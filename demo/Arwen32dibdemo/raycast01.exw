--
--  raycast01.exw demo
--
--  Part 1: Basic load and display of the graphics.
--  Author: Pete Lomax
--          This is a basic proof of concept, from which I learnt:
--          * drawDibTransformedPolygon() has some minor affine trasformation effects (more of a sine wave than a gross distortion)
--          * a flat xGdiTransparentBlt somehow just works better on the edges of the hand image being used.
--          * between them (slightly more due to the latter) that means this program is now mothballed.
--          * The initial plan of using whole-wall polygon transformations has been shelved, but at least it is now obvious that
--          * rather than drawing stripes a fixed N pixels wide, we should use the drop in height of one pixel to determine how
--          * wide the stripes should be.
--          * I managed to write a routine to gradually darken the walls from side to side, but it is rather slow. If we're 
--          * going to draw it in stripes then I could create a bank of up to 255 pre-darkened walls to select slices from?
--

include a32dpoly.ew  -- only the core- and polygon-library are necessary
include a32dgeom.ew -- GEOMETRIC MANIPULATION LIBRARY
include axtra.ew

constant main = create(Window, "raycast demo", 0, 0, Default, Default, 480, 300, 0),
         mainDC = getPrivateDC(main),
--       backDC = c_func(xCreateCompatibleDC, {NULL}),  -- the background
--       handDC = c_func(xCreateCompatibleDC, {NULL}),  -- the hand/weapon
--       wallDC = c_func(xCreateCompatibleDC, {NULL}),  -- the wall
--       dibDC = c_func(xCreateCompatibleDC, {NULL}),   -- the wall
$

integer backWidth, backHeight, handWidth, handHeight, wallWidth, wallHeight
integer darkWidth, darkHeight
--atom bmBack,bmHand,bmWall

a32Dib0 screen_dib
a32Dib backDib, handDib, wallDib, darkDib
integer dx, dy, dw, dh
integer bX = 0
--, frames
--atom t

--  dib = loadDib("demo.bmp")

--function LoadGraphics(sequence FilePath)--, atom hDC, integer mult)
function LoadGraphics(sequence FilePath, integer mult)
-- load a file via gdiplus and copy it to a standard bitmap
integer width,height
atom pImage, pGraphics, hBitmap
--if mult then end if --DEV
a32Dib dib
atom hDC

    pImage = GdipLoadImageFromFile(FilePath)
    width = GdipGetImageWidth(pImage)
    height = GdipGetImageHeight(pImage)
    if mult=1 then
        width = floor(width*2.6)
        height = floor(height*1.3)
--better effect by doping it in transBlt
--  elsif mult=2 then

--      width = floor(width*1)
--      height = floor(height*1)
    end if

    hDC = c_func(xCreateCompatibleDC, {NULL})
    hBitmap = c_func(xCreateCompatibleBitmap, {mainDC, width, height})
    {} = deleteObject(selectObject(hDC,hBitmap))
--  void = selectObject(hDC,hBitmap)
--?void

    pGraphics = GdipCreateFromHDC(hDC)

--  dib = extractDib(pImage, 0, 0, width, height)
--  dib = extractDib(pGraphics, 0, 0, width, height)
--?dib

    GdipDrawImageRectI(pGraphics,pImage,0,0,width,height)
    dib = extractDib(hDC, 0, 0, width, height)
--if mult=2 then
--  dib = scaleDib(dib,width*2,height*2,1)
--end if

    GdipDisposeImage(pImage)
    GdipDeleteGraphics(pGraphics)

    {} = deleteObject(hDC)
    {} = deleteObject(hBitmap)

--  return {hBitmap,width,height}
--  return {width,height}
    
    return {dib,width,height}
end function

GdipInitialize()
--{bmBack,backWidth,backHeight} = LoadGraphics("..\\raycast\\deathvalley_panorama.jpg",backDC,1)
--{bmHand,handWidth,handHeight} = LoadGraphics("..\\raycast\\knife_hand.png",handDC,2)
--{bmWall,wallWidth,wallHeight} = LoadGraphics("..\\raycast\\wall_texture.jpg",wallDC,0)
--{backWidth,backHeight} = LoadGraphics("..\\raycast\\deathvalley_panorama.jpg",backDC,1)
--{handWidth,handHeight} = LoadGraphics("..\\raycast\\knife_hand.png",handDC,2)
--{wallWidth,wallHeight} = LoadGraphics("..\\raycast\\wall_texture.jpg",wallDC,0)
{backDib,backWidth,backHeight} = LoadGraphics("..\\raycast\\deathvalley_panorama.jpg",1)
{handDib,handWidth,handHeight} = LoadGraphics("..\\raycast\\knife_hand.png",0)
{wallDib,wallWidth,wallHeight} = LoadGraphics("..\\raycast\\wall_texture.jpg",0)
GdipUninitialize()
--?{bmWall,wallWidth,wallHeight}
--  darkDib = newDib(wallWidth,wallHeight)
--  handDib = scaleDib(handDib,handWidth*2,handHeight*2,1)
--  dib = newDib(wallWidth,wallHeight)
--  wallDib = extractDib(wallDC, 0, 0, wallWidth, wallHeight)
--  if not sequence(wallDib) then
--      if message_box("Can't load bitmap '???demo.bmp'.", "Error", MB_ICONERROR) then end if
--      abort(0)
--  end if
--  void = c_func(xBitBlt,{dib[1],0,0,wallWidth,wallHeight,wallDC,0,0,SRCCOPY})
--  void = selectObject(dibDC,dib[1])
--  void = c_func(xBitBlt,{dibDC,0,0,wallWidth,wallHeight,wallDC,0,0,SRCCOPY})
--  if void=0 then
--      -- 6 = ERROR_INVALID_HANDLE
--      ?c_func(xGetLastError,{})
--  end if
--  copyToDib2(dib, wallDC, 0, 0, 0, 0, wallWidth, wallHeight)
--global procedure copyToDib2(sequence dib, atom hDC, integer dX, integer dY, integer cX1, integer cY1, integer cX2, integer cY2)
-- Draws a portion ((cX1, cY1)-(cX2, cY2)) of a control to the bitmap at position (dX, dY)
--atom hDibDC = c_func(xCreateCompatibleDC, {NULL})
--  void = c_func(xSelectObject, {hDibDC, dib[DibHandle]})
--  void = c_func(xBitBlt,{hDibDC, dX, dY, cX2-cX1+1, cY2-cY1+1, hDC, cX1, cY1, SRCCOPY})
--  void = c_func(xDeleteDC,{hDibDC})
--end procedure

procedure shadeDibLR(a32Dib dib, integer width, integer height, integer il, integer ir)
-- shade (darken) pixels from intensity il to ir (left to right, 0=black, 255=original).
atom memory, x
integer red, green, blue, bytes_per_line, width3, w, v
--,width
atom brightness
sequence color, dx
    memory = dib[DibMemory]
    bytes_per_line = dib[DibBytesPerLine]
--  width = dib[DibWidth]
    width3 = width*3-3
--  dx = repeat(0,width)
--  for d=1 to width do
----        dx[d] = floor((il*(width-d)+ir*(d-1))/width)
--      dx[d] = (il*(width-d)+ir*(d-1))/(width*255)
--  end for
    dx = repeat(0,width)
    for d=1 to width do
--      dx[x] = floor((il*(w-x)+ir*(x-1))/w)
        dx[d] = (il*(width-d)+ir*(d-1))/(width*255)
    end for
--?dx

    for y=0 to dib[DibBytesTotal]-bytes_per_line by bytes_per_line do
        w = 1
        for z=y to y+width3 by 3 do
            brightness = dx[w] w+= 1
            x = memory+z
--!/**/     color = sq_add(peek({x, 3}),brightness) --/* -- Phix
--          color = peek({x, 3}) + brightness       --*/ -- RDS
--          blue = color[1]
--          green = color[2]
--          red = color[3]
--          if blue<0 then poke(x, 0) elsif blue>255 then poke(x, 255) else poke(x, blue) end if
--          if green<0 then poke(x+1, 0) elsif green>255 then poke(x+1, 255) else poke(x+1, green) end if
--          if red<0 then poke(x+2, 0) elsif red>255 then poke(x+2, 255) else poke(x+2, red) end if
            for i=1 to 3 do
--              v = rgb[i]-d
--              v = floor(rgb[i]*d)
                v = floor(peek(x)*brightness)
                if v<0 then v = 0 end if
--              rgb[i] = v
                poke(x,v)
                x += 1
            end for
        end for
--if y>=height then exit end if
    end for
end procedure

if 0 then   --DEV
--  shadeDibLR(wallDib, 0, -100)
end if

    screen_dib = 0
    dx = 0  dy = 0  
    dw = 0  dh = 0

--procedure IdleHandler()
--integer x1, y1, x2, y2, x3, y3, x4, y4
--  x1 = rand(dx)           y1 = rand(dy)
--  x2 = dw-rand(dx)        y2 = rand(dy)
--  x3 = dw-rand(dx)        y3 = dh-rand(dy)
--  x4 = rand(dx)           y4 = dh-rand(dy)
--  if sequence(screen_dib) then
--      clearDib(screen_dib, {255, 255, 0})
--      clearDib(screen_dib, {0, 0, 0})
----        drawDibTransformedPolygon(screen_dib, dib, {{x1, y1}, {x2, y2}, {x3, y3}, {x4, y4}}, {})
--      drawDibToDib(screen_dib, backDib, 0,0,0,0,backWidth,backHeight,{},255)
--      drawDibToDib(screen_dib, handDib, 200,200,0,0,handWidth,handHeight,{0,0,0},255)
--      drawDibTransformedPolygon(screen_dib, wallDib, {{x1, y1}, {x2, y2}, {x3, y3}, {x4, y4}}, {})
--  end if
--  frames += 1
--  if time()-t>2 then
--      setText(main, sprintf("%g FPS", frames/2))
--      frames = 0
--      t = time()
--  end if
--  repaintWindow(main,False)
--sleep(1)
--end procedure
--setHandler(IDLE, routine_id("IdleHandler"))

--integer firsttime = 1

function mainHandler(integer id, integer msg, atom wParam, object lParam)
sequence rect
integer x, y, h, bY
integer x1,x2,y1,y2,y3,y4
    if id or wParam or object(lParam) then end if -- suppress warnings
    if msg=WM_PAINT then
--      if not firsttime then
        if sequence(screen_dib) then
--          IdleHandler()
            clearDib(screen_dib, {0, 0, 0})
--          drawDibToDib(screen_dib, backDib, 0,0,0,0,backWidth,backHeight,{},255)
            if backHeight<dh then
                y = floor((dh-backHeight)/2)
--              setPenColor(0)
--              drawRectangleh(viewDC, True, 0, 0, dw, dh)
                clearDib(screen_dib, {0, 0, 0})
                h = backHeight
                bY = 0
            else
                y = 0
                h = dh
                bY = floor((backHeight-dh)/2)
            end if
--          void = c_func(xBitBlt,{viewDC,0,y,dw,h,backDC,bX,bY,SRCCOPY})
--          setText(main,sprint({0,y,bX,bY,dw,h,}))
            drawDibToDib(screen_dib,backDib,0,y,bX,bY,bX+dw,bY+h,{},255)
            if backWidth-bX<dw then
--              void = c_func(xBitBlt,{viewDC,backWidth-bX-2,y,dw,h,backDC,0,bY,SRCCOPY})
                drawDibToDib(screen_dib,backDib,backWidth-bX-2,y,0,bY,dw,bY+h,{},255)
            end if
--          drawDibTransformedPolygon(screen_dib, wallDib, {{x1, y1}, {x2, y2}, {x3, y3}, {x4, y4}}, {})
    darkWidth = floor(dw/4)
    darkHeight = floor(dh*0.4)
--darkWidth = wallWidth
--darkHeight = wallHeight
darkDib = newDib(darkWidth,darkHeight)
--  darkDib = scaleDib(wallDib,darkWidth,darkHeight,0)
--  darkDib = scaleDibPct(wallDib,50,0)
    drawDibTransformedPolygon(darkDib, wallDib, {{0, 0}, {darkWidth, 0}, {darkWidth, darkHeight}, {0, darkHeight}}, {})

    shadeDibLR(darkDib, darkWidth,darkHeight, 0, 255)

            x1 = floor(dw/4)
--          x1 = floor(dw/8)
            x2 = floor(dw/2)
--          x2 = floor(dw*0.8)
            y1 = floor(dh*0.3)
            y2 = floor(dh*0.35)
            y3 = floor(dh*0.65)
            y4 = floor(dh*0.7)
--          drawDibTransformedPolygon(screen_dib, wallDib, {{x1, y1}, {x2, y2}, {x2, y3}, {x1, y4}}, {})
--          drawDibTransformedPolygon(screen_dib, wallDib, {{100, 310}, {400, 410}, {400, 600}, {100, 700}}, {})
--          drawDibToDib(screen_dib,wallDib,0,0,0,0,wallWidth,wallHeight,{},255)
--          drawDibToDib(screen_dib,darkDib,x1,y1,0,0,darkWidth,darkHeight,{},255)
--          drawDibTransformedPolygon(screen_dib, darkDib, {{x1, y1}, {x2, y2}, {x3, y3}, {x4, y4}}, {})
            drawDibTransformedPolygon(screen_dib, darkDib, {{x1, y1}, {x2, y2}, {x2, y3}, {x1, y4}}, {})
killDib(darkDib)

            x = floor(dw*0.56)
--          y = dh-handHeight-85
            y += h-handHeight+38
            bY = 40
            if y<dh/2 then
                y = floor(dh/2)
                bY = handHeight-y
            end if
--          y = bY+h-handHeight+45
--          void = c_func(xGdiTransparentBlt,{viewDC,x,y,handWidth*2,handHeight*2,handDC,0,0,handWidth,handHeight,0})
--          drawDibToDib(screen_dib,handDib,x,y,0,0,handWidth*2,handHeight*2,{0,0,0},255)
            setText(main,sprint({x,y,bY,h,handWidth,handHeight,}))
            drawDibToDib(screen_dib,handDib,x,y,0,0,handWidth,handHeight-bY,{0,0,0},255)

            drawDib(main, screen_dib, 0, 0, 0, 0, dw, dh)
        end if
    elsif msg=WM_SIZE then
        rect = getClientRect(main)
        dx = floor(rect[3]/4)+1
        dy = floor(rect[4]/4)+1
        dw = rect[3]
        dh = rect[4]
        if sequence(screen_dib) then killDib(screen_dib) end if
        screen_dib = newDib(dw, dh)
--      firsttime = 0
    elsif msg=WM_ERASEBKGND then
        return {1} -- suppress erasing the background: eliminates flickering
--  elsif firsttime
--    and msg=WM_SHOWWINDOW then
--      firsttime = 0
--      t = time()
--      frames = 0
--      startIdle(40)
    elsif msg=WM_KEYDOWN then
        if wParam=VK_LEFT then
            bX -= 90
            if bX<0 then bX += backWidth end if
--          setText(main,sprintf("bX=%d",bX))
            repaintWindow(main)
        elsif wParam=VK_RIGHT then
            bX += 90
            if bX>=backWidth then bX -= backWidth end if
--          setText(main,sprintf("bX=%d",bX))
            repaintWindow(main)
        end if
    elsif msg=WM_CHAR 
      and wParam=VK_ESCAPE then
        closeWindow(main)
    end if
    return 0
end function
setHandler(main, routine_id("mainHandler"))

    WinMain(main, SW_NORMAL)
    killDib(wallDib)
    if sequence(screen_dib) then killDib(screen_dib) end if
    
--/*    
         backDC = c_func(xCreateCompatibleDC, {NULL}),  -- the background
         handDC = c_func(xCreateCompatibleDC, {NULL}),  -- the hand/weapon
         wallDC = c_func(xCreateCompatibleDC, {NULL}),  -- the wall
--       gradDC = c_func(xCreateCompatibleDC, {NULL}),  -- wall-sized gradient
         darkDC = c_func(xCreateCompatibleDC, {NULL}),  -- the wall, gradient-darkened
         viewDC = c_func(xCreateCompatibleDC, {NULL})   -- with animation etc

integer backWidth, backHeight, handWidth, handHeight, wallWidth, wallHeight
atom bmBack, bmHand, bmWall, bmView, bmDark



--*/
