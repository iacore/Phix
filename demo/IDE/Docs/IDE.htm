<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML>
<HEAD>

   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Enhanced IDE">
   <TITLE>Documentation For IDE</TITLE>
</HEAD>
<BODY>
       

<CENTER><FONT SIZE=+2 COLOR="#FF0000">Enhanced IDE version 1.0.4
<BR>
<FONT SIZE=+1>July, 2008</FONT></FONT>
<BR>
<HR WIDTH="100%">
<FONT SIZE=3 COLOR="black">A Visual Coding Environment Designer for Win32Lib

<BR>(c) David Cuny&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(?-1999)
<BR>With modifications by Judith Evans (1999-2008)</CENTER>
<P>Other contributors are Elliott S. de Andrade, Mike Anon, Mira Balikova, Travis W. Beaty, Brian Broker, 
Tommy Carlier, Chris Cuvier, CoJaBo, David Cuny, Rajesh Deshpande, Andy Drummond, Euman, Wolf Fritz, Josef Jindra,
CK Lester, Matt Lewis, Dan Moyer, C A Newbould, Derek Parnell, Don Phillips, Tone Skoda, Martin Stachon, 
Mario Steele, Roland Stowasser, Ward Turner, Virtual B, Craig Welch and Sascha Zindel. 
<P>C A Newbould made improvements to sections "What is This" and "Nice include files for use with IDE."</FONT>

<P>If you would like to be a pre-release tester of IDE, contact me and I will gratefully add you to the list.

<P>Suggestions for improvements are always welcome and anyone who would
like to contribute code is welcome to do so. 

<P>Upon IDE crash please notify Judith Evans via the EuForum or e-mail
giving the nature of what you were doing and the ex.err message, if available. Also helpful is the version of
Windows(tm) used, Win32lib version, Euphoria version and IDE version.
<!-- BUILD TABLE OF CONTENTS -->
<HR WIDTH="100%">
<FONT SIZE=+2 color="green"><CENTER><I><B><A NAME="TOC">Table of Contents</B></I></CENTER></FONT>
<UL><FONT SIZE=3>
  <LI><B><A HREF="#What"> What is This?</A>
  <LI><A HREF="#What_New"> What's new in this release</A>
  <LI><A HREF="#Nice"> Nice include files for use with IDE</A>
  <LI><A HREF="#Agreement"> License Agreement</A>
  <LI><A HREF="#Installation"> Notes about installation</A>
  <LI><A HREF="#Known_Problems"> Known Problems </A>
  <LI><A HREF="#Starting IDE"> Starting IDE </A>
	</B><UL>
	<LI><A HREF="#Splash Screen"> Splash Screen</A>
	<LI><A HREF="#IDE Main Window"> IDE Main Window</A>	</UL>  	
  <LI><B><A HREF="#MainWindow_Components"> Main Window Components</A>
  	</B><UL>
		<LI><A HREF="#Menus"> Menu bar</A>		
		<LI><A HREF="#Toolbar"> Tool bar</A>
		<LI><A HREF="#Properties"> Properties</A>
			<UL>
				<LI><A HREF="#Properties_attributes"> control attributes</A>
			</UL>
		<LI><A HREF="#Project View"> Project View</A>
		<LI><A HREF="#Property_Project"> How Property and Project View Interact</A>
		<LI><A HREF="#Form"> Form Design</A>
			<UL>												
				<LI><A HREF="#Resize_Window">Resize The Window</A>
				<LI><A HREF="#Adding_Controls">Adding Controls</A>
				<UL>
					<LI><A HREF="#Control_Parenting"> Control Parenting</A>
					<LI><A HREF="#Control_Partners"> Control Partnering</A>
				</UL>
				<LI><A HREF="#Select_Controls">Selecting Controls</A>
				<LI><A HREF="#Unselect_Controls">Unselecting Controls:</A>
				<LI><A HREF="#Del_Controls">Deleting Controls</A>
				<LI><A HREF="#Editing_Controls">Editing Controls</A>
				<LI><A HREF="#Resize_Controls">Resizing Controls</A>
				<LI><A HREF="#Move_Controls">Moving Controls</A>
				<LI><A HREF="#Copy_Controls">Copy a Control</A>
				<LI><A HREF="#Index_Controls">Index a Control to Another Control</A>
				<LI><A HREF="#Save_Design">Saving the Design:</A>
				<LI><A HREF="#Keyboard">Using the Keyboard with Form Design</A>
                <LI><A HREF="#Control_Layering"> Control Layering</A>
				<UL>
					<LI><A HREF="#Control_Layering_Parent"> Assigning Parent to Controls in Layers</A>
				</UL>
				<LI><A HREF="#Adding_Window"> Adding An Additional Window</A>
				<LI><A HREF="#Adding_NonTraditional"> Adding Non Traditional Controls</A>
			</UL>
		<LI><A HREF="#ToolBox"> Icon Tool Box</A>
			<UL>
				<LI><A HREF="#Tool Box Icons"> Icon List</A>			
			</UL>
		</UL>	
	
	<LI><B><A HREF="#Support Windows"> Support Windows</A></B>
		<UL>
			<LI><A HREF="#Code Editor"> Code Editor</A>
			<LI><A HREF="#Menu Editor"> Menu Editor</A>
			<LI><A HREF="#Popup Editor"> Popup Editor</A>
				<UL>
				<LI><A HREF="#Using Popup Editor"> Using the popup in your exw</A>
				</UL>
			<LI><A HREF="#Timer Editor"> Timer Editor</A>
			<LI><A HREF="#Xpmmer"> XPMmer Icon Editor</A>
			<LI><A HREF="#Initial List"> Initial List for List and Combo </A>  
			<LI><A HREF="#MessageBox"> Create Message Box Utility </A>
			<LI><A HREF="#Systray"> Systray Setup Window </A>
			<LI><A HREF="#WindowStyles"> Window Styles Explorer utility </A> 
			<LI><A HREF="#ListViewStyles"> Visual List View Styles Explorer utility </A>
			<!-- <LI><A HREF="#Painter"> Design Window Drawings </A>-->
			<LI><A HREF="#SelectPropertyTemplate">Select From Property Templates Window </A>
			<LI><A HREF="#ManagePropertyTemplate">Manage Property Templates Window </A>
			<LI><A HREF="#Configure"> Configure IDE </A>						
				<UL>
					<LI><A HREF="#Config_General"> General Information About IDE </A>
						<UL>
							<LI><A HREF="#Config_One"> One Instance Of IDE </A>
							<LI><A HREF="#Config_PrjType"> Define Project Type As </A>
							<LI><A HREF="#Config_Lang"> Language Preference </A>
							<LI><A HREF="#Config_Start"> Start IDE with last opened or saved project </A>
							<LI><A HREF="#Config_Index"> Never index when copy a control </A>							
							<LI><A HREF="#Config_Min"> Do Not Minimize IDE During Menu Run</A>
							<LI><A HREF="#Config_StartIn"> When Open or Save(As) Start in Folder </A>
							<LI><A HREF="#Config_FolderName"> Folder Name </A>
							<LI><A HREF="#Config_Browse"> Browse For Folder Name </A>
							<LI><A HREF="#Config_Global"> When Adding Controls They Are Global or Local </A>
							<LI><A HREF="#Config_ChangeAll"> Change existing controls to this selection </A>
							<LI><A HREF="#Default Editor"> Default Editor when passing controls and routines to external editor </A>
						</UL>
					<LI><A HREF="#Config_WindowOpen"> Describe How Major Windows Open </A>
					<LI><A HREF="#Config_EnterKey"> Enter Key Processing For Property </A>
					<LI><A HREF="#Config_Docs"> Documentation Location </A>					
					<LI><A HREF="#Config_Grid"> Design Grid Appearance </A>
					<LI><A HREF="#Config_Controls"> Values Used To Create A New Control </A>
					<LI><A HREF="#Config_Backups"> Backups </A>
						<UL>
							<LI><A HREF="#Config_Backup"> Backup Project before save </A>
							<LI><A HREF="#Config_Backup2"> Backup Project after MenuRun if no errors </A>
							<LI><A HREF="#Config_BackupName">Backup folder Name</A>
						</UL>
				</UL>
			<LI><A HREF="#Program Information">Program Information</A>																		
			<LI><A HREF="#Change_Order">Change Control Order For Program</A>
			<LI><A HREF="#MIS"> Manage Include Statements </A>
			<LI><A HREF="#Launch">Launch other programs while in IDE</A>
			<LI><A HREF="#About">About IDE and Contributors</A>
			<LI><A HREF="#Show">Show Full Size Form Design Window</A>
			<LI><A HREF="#Off Screen">Show Off Screen Controls</A>
			<LI><A HREF="#Rule_Tool">Measuring Ruler Tool</A>
			<LI><A HREF="#Bind">Bind Project/Include</A>							  
  		</UL>
		
	<LI><B><A href="#UsingMainWindows">Using The Main Windows</A></B>
		<UL>
			<LI><A HREF="#Using_Project_View"> Using Project View</A>
			<LI><A HREF="#Using_Property"> Using Properties</A>
			<LI><A HREF="#Using_Design_Window">Using The Design Window </A>
			<LI><A HREF="#Using_Code_Window">Using Code Editor </A>
			<LI><A HREF="#Using_Include_Modules">Using Include Modules </A>
		</UL>
	<LI><B><A HREF="#The Prj File">The Project File	</A></B>
	<LI><B><A HREF="#Translations">Messages and Translations </A></B>
	<LI><B><A HREF="#EXW_file"> Creating an EXW file </A></B>
	<LI><B><A HREF="#References"> References</A></B>
		<UL>
			<LI><A HREF="#Tool Box Icons"> Icon List</A>
			<LI><A HREF="#Properties_attributes"> control attributes</A>
			<LI><A HREF="#NonWin32lib">Non-Win32lib Routines In Generated EXW</A>
			<LI><A HREF="#Control_specs">Specifics Pertaining To Certain Controls</A>  
        </UL>	
</UL>	
</B>
</FONT>

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+2 color="teal"><B><A NAME="What"></A>What Is This?</B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">
This is an <b>I</b>ntegrated <b>D</b>evelopment <b>E</b>nvironment for writing
windows' (GUI) programs using Euphoria and the Win32lib library,
on a machine using Microsoft Windows.
<p>
It works from a <b>Design Window</b>
(in other IDEs this might be called a Form Editor)
in which you can create one or more windows. You can add to a window a wide
range of <b>controls</b> (in other IDEs these might be called widgets).
As you build up the design, the IDE writes, in the background, the Euphoria
instructions which create the controls and relate them together.
<p>
Each element of the design can have Euphoria code attached to it.
Creating and editing this code can all be done without leaving the IDE.
Central to GUI programming is the association of code to <b>events</b>.
All you have to do is double-click on the control to open up the
editor for the entry of the code for the routine
you want to use when the particular event occurs.
<p>
The IDE handles all the code (including those parts which it does for you)
within a <b>Project</b>.
Projects can hold not only the file holding your code (which will have an 'exw'
file type) but also can store module references (<b>'include'</b> files, with 
either 'e' or 'ew' extensions).
<p>
When you have a working design and want to test it you can do this without
leaving the IDE's environment.
</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>


<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+2 color="teal"><B><A NAME="What_New"></A>What's new in this release?</B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">

<P>Notes about this release
This release requires Win32lib v0.70.4a or later.

</B>
<P>v1.0.4
<BR><I> Bugs Fixed: </I>
<LI>Caption for RichEdit wasn't being drawn in Design.
<LI>setIndex for RichEdit control was 1 letter too short when specifing a range to select. This is a difference between IDEWin32lib and 
Win32lib and showed up when setting RichEdit caption's font in Design.
<LI>Using &P in both Project and GenerateProgram captions prevented Alt key to work with either. Changed &Project to P&roject.
<LI>When showing the Win32lib version in Help/About needed to add a space between the digits and date.
<LI>Code Editor opened at different screen locations when in Configurations option "Closed" was checked but opened properly when 
not checked.
<LI>Fixed bug in find/replace where "find/replace"  and "find/replace all" changes were lost when project saved immediately after 
using them.
<LI>Launch Pass File will now pass file as .exw or .ew depending what has been set up in Generate Tools/Program Information.
<LI>Corrected error when user changes Timer Name.
<LI>Fixed crash when attempting to change ReBar font.
<LI>When changing HintFontName, Properties was still showing old HintFontName.
<LI>Manage Include Statements always saved even when user clicked Cancel button.
<LI>There is a problem in Menu, Popup and Timer editors where the use of destroy(a window) crashes. The destroy statement has been removed.
<LI>Fixed problem with deleting menu from class modules when Name changed or menu/menuitem deleted
<LI>Fixed problem showing menuitems under TheMenus:window when one of their Name is subset of another. For example if MenuSaveAs is
 before MenuSave then MenuSaveAs would not show.
<LI>Fixed problem where setTimer and killTimer statements were not written for Code Editor events which did not have procedure/end procedure unless in General event.
<LI>Properties showed Position Caption and in +Control Styles showed Caption Position for colored buttons. Only one worked so the other has been removed.
<LI>Fixed bug in MenuRun and MenuTempRun where ex.err might be in wrong folder if user had changed current directory from the 
generated exw.
<LI>Fixed problem with Visual ListViewStyles Explorer caused by using destroy() without validId().
<LI>Fixed problem with Visual ListViewStyles Explorer option "Single Click Activate" not being remembered. 

<P><I>Improvements and Enhancements: </I>
<LI>User may check setCreateFont attribute in Properties for Window class control and enter Font data to create all controls with this 
font. If a non Window class control has Font data in Properties, then that control will use the Font data specified for that control.
<LI>Added a new icon for ColoredButton in ToolKit. This icon sets the internal property to treat as a colored button and when Properties are viewed
the colored button ones are present. When PushButton icon is selected, the internal property is not set and colored button Properties are
not visible. User may change button from a colored button to a normal button and vice-versa via "Color Button?" checkbox after "Class" but both Properties
are internally saved so user may change his mind and switch back without loss of data.  If control is a colored button user code is parsed 
and revelent win32lib routine names are changed to coloredbutton.ew ones in the generated exw.
<LI>allow user to indicate less than 4 grid size in configurations. 4 will remain the default.
<LI>When passing IDEPassFile.exw to editor of choice, the file will be placed in the project folder. If there is no project folder then the file
will be placed in IDE's folder.
<LI>Changed the tab order in Find. Removed "Direction" group control but retained the "Up" and "Down" radio controls.
<LI>Find/Replace may be restricted to the current procedure or function. Check the option "Restrict to current routine" to activate.
<LI>Win32libScan has been rewritten to parse the Win32lib Include folder and find global routine names for coloration in Code Editor and
editor.exw.
<LI>FontName, FontSize, HintFontName and HintFontSize are all initialized to the win32lib default font or size when a control 
or window is added to Design instead of &lt;Default>
<LI>Removed line length limitation when generating the exw.
<LI>Moved some colored button cells under controlStyles.
<LI>Colored Button routine names are now colorized in Code Editor. But clicking the name does not jump to colored button docs. Instead
use new MenuItem under Help to access coloredbuttons.html.
<LI>Added location of coloredbutton.htm in Configurations.
<LI>Added ColoredButtons to Help Menu in Code Editor
<LI>There has been an entry in Project file named "LastEditorEvent" and newly added is "LastEditorNameEvent". 
Most users do not know the correlation between event number and the w32H name.
<LI>For most IDE windows: Adjustments to controls placement and size for better language fit.
<LI>ex.err files now go into the project folder. If there is not a project folder, the ex.err goes into the IDE folder.
<LI>If IDE is started more than once and user has specified one instance of IDE, a message box will be provided telling user only one instance is allowed.
<LI>Only one instance of Visual ListView Styles Explorer is allowed.
<LI>ListView Properties will show the number of columns specified in Visual ListView Styles Explorer. If an empty caption for a column is desired, in Visual Listview Styles Explorer Column Data enter one or more spaces in Title, enter column width if desired and click Add. 
<LI>ListView Test window will now show columns for all user's Headers, not just two. Thanks to Mark Young for pointing me in the right direction.
<LI>Some projects are so complex that an ex.err file is not easily located so crash_file may be optionally added at the top of the generated exw which puts the ex.err
in the project path. Once your project is error free you might wish to eliminate the crash_file statement expecially if you will be distributing to other people. You choose to use crash_file from Menu Generate Tools\Program Information.

<P><I>New Features: </I>
<LI>Added color Properties for MonthControl.
<LI>In order to keep the IDE folder tidy, I now place backups in a backup folder within the IDE folder. Configurations shows the folder 
name as 'Backups' but user may change to any folder name desired. Do not enter the folder name's path. If the folder does not exist it 
will be created. A new Configuration's Tab, "Backups", now holds configuration items related to backing up the project. User might wish 
to move existing backups to the new folder.
<LI>Code Editor uses a new custom control by Andy Drummond, Formatted List Boxes (FList), to manage the event dropdown. This serves as a demo of using
Flist as well as some IDE eye candy. Events with user code will be colored RED in the events dropdown. Last selected event is centered in the list of events so user has the most possible events in sight to choose from without scrolling.

<P><I>Other: </I>
<LI>Language translation changes: changed Msg 10,120, 58; added Text 1198-1212; changed Text 872, 893, 894, 1016, 1126, 1149, 1162, 1171; removed Text 826, 827,866, 869, 870 
<LI>Changed words continue, replace, trim, entry, loop and store which conflict with Euphoria 4.0 thanks to Roland Stowasser.
<LI>When storing global routine names, IDE now also looks for export keyword.

<P> 
<LI>I wish to thank everyone who offered suggestions and improvements and those who gave of their time to help test this version.

</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+2 color="teal"><B><A NAME="Nice"></A>Nice include files to use with IDE</B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">

The following is a list of items which are connected, directly or indirectly,
with this IDE. Some, or all, may be of interest.
They are all entries in Euphoria's Archive.
<p>
The links below will take you directly to the file download.
If you just want further information then put the highlighted text of the
entry in the search box on the <a href=http://www.rapideuphoria.com/archive.htm>
Euphoria Archive</a> page.   
<br><br>
<table>

<tr>
       <td><a href=http://www.rapideuphoria.com/autosize_2.1.zip>
	   Auto-Scale Controls</a> by Mr. Trick.</td>
       <td>Automatically sizes controls to the parent window.
	   Design your layout in the IDE, then Autosize
	   to make all your controls move smoothly to occupy all the window.</td>
</tr>
<tr>
       <td><a href=http://www.rapideuphoria.com/exw2prj.zip>Make Project File</a>
	   by Martin Stachon.</td>
       <td>Converts an exw to IDE 'prj' file format.
	   This is now a bit outdated but will still do a lot of the conversion
	   for you.</td>
</tr>
<tr>
       <td><a href=http://www.rapideuphoria.com/proj_conv.zip>
	   onXXX to setHandler</a> IDE Project Convert by Andy Drummond.</td>
       <td>Old IDE projects used the onXXX event handler system, which is 
	   rendered obsolete in favour of the setHandler system.
	   This program will convert your old IDE projects to the new system leaving
	   a minimum of necessary editing to make it work.</td>
</tr>
<tr>
       <td><a href=http://www.rapideuphoria.com/eugrid133.zip>EuGrid</a>
	   by Phil Russell.</td>
       <td>An extension to Win32Lib, providing support for grid controls.
	   </td>
</tr>
<tr>
       <td><a href=http://www.rapideuphoria.com/systray.zip>System Tray Icons
	   </a> by Thomas Parslow.</td>
       <td>An include file for managing system tray (taskbar notification area)
	   icons.</td>
</tr>
<tr>
       <td><a href=http://www.rapideuphoria.com/alphablend.zip>Alpha Blending</a>
	   by Thomas Parslow.</td>
       <td>An include file for making semi-transparent windows with Windows
	   Alpha Blending.</td>
</tr>
<tr>
       <td><a href=http://prdownloads.sourceforge.net/euvide/ColoredButtonsForWin32lib.zip>
	   ColoredButtons</a> by Judith Evans.</td>
       <td>Add the feature Microsoft forgot!
	   This very easy to use include file will add and manage colored buttons;
	   color, press color, caption color, press caption color, graphics,
	   font, hints and more. All button classes supported.</td>
</tr>
<tr>
	   <td><a href=http://www.rapideuphoria.com/transhelper.zip>Translation Helper for Enhanced IDE</a>
		by Roland Stowasser.</td>
	   <td>A handy tool for language translators to keep language files updated.</td> 	
</tr>

</table>
</BLOCKQUOTE></FONT>  
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER> 

<HR WIDTH="100%">
<P><FONT SIZE=+2 color="teal"><B><A NAME="Agreement"></A>License Agreement</B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">Software ID: IDE
<BR>Copyright:&nbsp;&nbsp;&nbsp; (c) 2001 David Cuny, Judith Evans, etal
<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
All rights reserved.
<BR>License:
<BR>This software is provided 'as-is', without any expressed or implied
warranty. In no event will the authors be held liable for any damages arising
from the use of this software.
<P>Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:
<OL>
  <LI> The origin of this software must not be misrepresented; you must 
          not claim that you wrote the original software.
  <LI> If you use this software in a product, acknowledgement in the product's
          documentation and binary are required.
  <LI> Altered source versions, and works substantially derived from the it, must...
    <UL TYPE=a> 
      <LI> be plainly marked as such,
      <LI> not be misrepresented as the original software,
      <LI> you may place your name in the IDE "About" box as a modifier, translator, etc.
      <LI> include this notice, unaltered
    </UL>
</OL>
</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>


<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+2 color="teal"><B><A NAME="Installation"></A>Notes about installation</B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">
<P>IDE requires Win32lib.ew version v0.70.4a or later. 
Menu <I>Help/About</I> shows your version of win32lib.ew.
<P>If you are downloading into a new folder and you have used IDE before, please copy IDE.cfg, IDE_HotKey.dat,
Launch.cfg, Other.ini, SynFont2.ini and SynMain2.ini from your prior folder. If you do not do this your
Configuration and Code Editor options will be missing, any hot keys you registered and
any programs started by Launch will be missing.
<P>Standalone editor, editor.exw, should be kept in the same folder as IDE. If you elect not to do this
then several files must be copied to the folder it is placed into.
<BR>Standalone editor no longer requires the latest ide.cfg file. You will get an error message that ide.cfg 
is not current only when new Configurations entries have been added to IDE which affect Standalone editor.
<BR>Standalone editor now works with .ex files.
<UL>
	<P> Credits:
	<LI>Change of IDE.cfg requirements was suggested by Andy Drummond.
	<LI>Les Rogers discovered differences in the way editor worked between Menu Run and Launch\Run.
</UL>	
</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>



<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+2 color="teal"><B><A NAME="Known_Problems"></A>Known Problems:</B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black"> 
	<LI>Win XP: After adding an icon to FlatToolBar button you can not doubleclick to transfer to Code Editor.

</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>


<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+2 color="teal"><B><A NAME="Starting IDE"></A>Starting IDE</B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">
<P>IDE may be started from a Desktop shortcut, Start\Run, clicking IDE.exe (or IDE.exw if you use the source) in Windows Explorer or,
after you have saved a project, by clicking the project file in Windows Explorer. When
clicking the project file be sure that file type associations have been added to Window(tm) File
Types.
	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="Splash Screen"></A> Splash Screen</B></FONT>
<BR>While IDE activates a splash window may appear depending upon the speed of your computer. Moving the mouse across will close the Splash Screen.
The Splash Screen will show the progress steps of opening IDE. Some computers may load IDE faster than
 the Splash Screen can show the steps.
<UL>
	<P> Credits:
	<LI>Splash Window was contributed by Mario Steele.
	<LI>Elliott S. de Andrade added a text area to show processing steps of loading to Spash Window.
</UL>

	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="IDE Main Window"></A> IDE Main Window</B></FONT>
<BR>This window contains Menu bar, Tool bar, Form Design with initial Window control, Properties, Project View and Icon Tool Box.
A Code Editor, Menu Editor, Popup Editor and Timer Editor are associated with the Main Window.
</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER> 

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+2 color="teal"><B><A NAME="#MainWindow_Components"></A> Main Window Components </B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">
<P>
<UL>
	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="#Menus"></A> Menu bar</B></FONT>	
		<UL>
			<LI>Project
				<UL>
					<LI>New
						<BR>Starts a new project. If there is an unsaved project active, you will be asked to save. The
						Form Design window is then cleared.
					<LI>Open
						<BR>Presents Windows(tm) Open File Dialog.
					<LI>Save
						<BR>Presents Windows(tm) Save File Dialog.
							Saves selections from Configurations, Code Editor and IDE Option Menues. 
							Current FileName will be added to Recent Project List.
					<LI>SaveAs
						<BR>Presents Windows(tm) Save As File Dialog.
							Saves selections from Configurations, Code Editor and IDE Option Menues. 
							New FileName will be added to Recent Project List.
					<LI>Exit
						<BR>Exits IDE. Saves selections from Configurations, Code Editor and IDE Option Menues.
						<BR>If there is an unsaved project you will be asked to save.
					<LI>Clear Recent Project List
						<BR>Clears the list below
					<LI><i>The Recent Project List</i>
				</UL>
			<LI>View
				<UL>
					<LI>Project View
						<BR>If Project View is docked, or undocked and open, contents are refreshed.
						When undocked the window is moved forward 
						into view if hidden behind another window. If closed Project View is
						reopened.	
					<LI>Properties
						<BR>If Properties is docked, or undocked and open, contents are 
						refreshed. When undocked the window is moved forward 
						into view if hidden behind another window. If closed Properties is
						reopened.								
					<LI>Icon Tool Box
						<BR>If Icon Tool Box is docked, or undocked and open, nothing happens. 
						When undocked the window is moved forward 
						into view if hidden behind another window. If closed Icon Tool Box is
						reopened.		
				</UL>
			<LI>Editors
				<UL>
					<LI>Code Editor
						<BR>Opens the <A HREF="#Code Editor"> Code Editor</A>.
					<LI>Menu Editor
						<BR>Opens the <A HREF="#Menu Editor"> Menu Editor</A>.
					<LI>Popup Editor
						<BR>Opens the <A HREF="#Popup Editor"> Popup Editor</A>.
					<LI>Timer Editor
						<BR>Opens the <A HREF="#Timer Editor"> Timer Editor</A>.
                    <LI>Xpmmer
						<BR>Opens the <A HREF="#Xpmmer"> Icon Editor</A>.
				</UL>
			<LI>Edit
				<UL>
					<LI>Control Action Undo
						<BR>Undo last control add, move, copy, delete in Form Design. Undo does not work across Windows in the project.
					<LI>New Window
						<BR>Saves the layout for the existing window and clears Form Design.
						See <A HREF="#Adding_Window"> Adding An Additional Window</A>.
					<LI>Delete Active Window
						<BR>Removes the active window and controls from the project.
					<LI>New Controls Layer
						<BR>Adds a new control Layer Tab. The Tab will positioned behind the last
						active Layer.
						<A HREF="#Control_Layering"> See Using Layered Controls</A>
					<LI>All controls in active layer may use setLayer with the exception of controls in EuGrid.
						<BR>When you select this menu item, you are indicating each control added to this 
						layer will be auto-selected for setLayer. setLayerActive and setLayerEnable are 
						routines in the generated EXW which work only on those controls which have
						'may use setlayer' checked in Properties. This menu item ensures all controls have
						'may use setlayer' checked with the exception of controls in EuGrid.
					<LI><A HREF="#Layer_rename"> Rename Layer </A>
						<BR>Give your own unique name to a Layer.						
					<LI>Delete active Layer
						<BR>Removes a Layer and all controls in it.
						<A HREF="#Control_Layering"> See Using Layered Controls</A>
					<LI>Form Lock: No Control Move
						<BR>Sometimes when you click a control in order to check its Properties, the mouse
						may detect a small movement and move the control which might result in a parenting change. 
						To prevent this from happening select this menu item once your controls are placed as 
						desired. You may cleck and uncheck this item as many times as you wish as you work
						with your controls. You may also select a control from Properties or Project View.
					<LI>Initial List for List, Combo
						<BR>Opens the <A HREF="#Initial List"> Initial List for List and Combo </A> controls. You may add contents
						to List and Combo.
					<LI>Create Message Box
						<BR>Opens the <A HREF="#MessageBox"> Create Message Box Utility </A>
					<LI>Setup Systray for current Window
						<BR>Opens the <A HREF="#Systray"> Systray Setup Window </A>
					<LI>Visual Window Styles Explorer 
						<BR>Opens <A HREF="#WindowStyles"> Window Styles Explorer utility </A> 
					<LI>Visual List View Styles Explorer
						<BR>Opens <A HREF="#ListViewStyles"> Visual List View Styles Explorer utility </A>					
					<LI>Select from Property Templates
						<BR>Opens <A HREF="#SelectPropertyTemplate">Select From Property Templates Window </A>
				</UL>
			<LI>Options
				<UL>
					<LI><A HREF="#IconBehavior"> Icon Behavior </A>
						<UL>
							<LI>Check Off\On toggle
							<LI>Instructions
						</UL>
					<LI>Ruler Tool
						<UL>
							<LI>Open Ruler Tool
								<BR>Opens the Ruler Measuring Tool which floats on top of the Screen.
							<LI>Information Ruler Tool
								<BR>see Ruler.chm located in the \Docs folder
						</UL>
					<LI>Grid Hide
						<BR>Hide the grid behind controls in Form Design.
							Grid specifications are found in <A HREF="#Configure"> Configure IDE </A>. 
					<LI>Grid Disable
						<BR>When moving and sizing controls, the control placement and dimensions are adjusted
							to the next 'snap size' which is 4 pixels by default but you may change this
							value in <A HREF="#Configure"> Configure IDE </A>. You may elect to turn this off by this option. 
					<LI>Undock Form
						<BR>Allows Form Design Window to move freely about the Main Window.
					<LI>Undock Properties						
						<BR>Allows Property Window to move freely about the Main Window.
					<LI>Undock Project View
						<BR>Allows Project View Window to move freely about the Main Window.	
					<LI>Undock Icon Tool Box
						<BR>Allows Icon Tool Box Window to move freely about the Main Window.
					<LI>Draw windows and controls with color
						<BR>If you have used the 'color' attribute in Properties and want to see how it appears
							without running the EXW then check this feature.
					<LI>Draw controls with Font
						<BR>If you have used the 'font' attribute in Properties and want to see how it appears
							without running the EXW then check this feature.
					<LI>Draw controls with Bitmap, Ico, Xpm
						<BR>If you have added Bitmap, Icon or Xpm to a control and wish to see the control drawn
							with it, check this feature.
					<LI><A NAME="Configure"></A> Configure IDE
						<BR>Change some features of IDE to your needs:
						<UL>
							<LI><A HREF="#Config_General"> General Information About IDE </A>
							<LI><A HREF="#Config_WindowOpen"> Describe How Major Windows Open </A>
							<LI><A HREF="#Config_EnterKey"> Enter Key Processing For Property </A>
							<LI><A HREF="#Config_Docs"> Documentation Location </A>
							<LI><A HREF="#Config_Styles"> Register Additional Styles </A>
							<LI><A HREF="#Config_Grid"> Design Grid Appearance </A>
							<LI><A HREF="#Config_Controls"> Values Used To Create A New Control </A>
						</UL>
						<P>Code Editor has its own configuration. See <A HREF="#Using_Code_Window">Using Code Editor </A>.
				</UL>
			<LI>Generate Tools
				<BR>Several tools may be used to provide information to the generated EXW
				<UL>
					<LI><A HREF="#Program Information">Program Information</A>																		
					<LI><A HREF="#Change_Order">Change Control Order For Program</A>
					<LI><A HREF="#MIS"> Manage Include Statements </A>
				</UL>
			<LI>Generate Program
				<BR>
				<UL>
					<LI>Temporary Run Project/Include
						<UL>
							<LI><A HREF="#TempRules">Rules</A>
								<BR>Established what IDE should do with the temporary file
									created by a Temporary Run
							<LI>Temp Run
								<BR>Proceed to making a Temporary Run, 
								See <A HREF="#EXW_file">Creating an EXW file</A> for more information								
						</UL>
					<LI>Run Project/Include
						<BR>If you have not saved your project then Run Project will be a
							Temporary Run. 
							See <A HREF="#EXW_file">Creating an EXW file</A> for more information					    
						<LI><A HREF="#Bind">Bind</A> Project/Include
						<BR>You may bind your project from within IDE
				</UL>
			<LI>Launch
				<UL>
					<LI><A HREF="#external_editor"> Instead of using Code Editor pass controls and routines to editor of your choice</A>
					<LI>Run ...
						<BR>Opens Windows(tm) Open File Dialog for you to select a program to execute.
					<LI>Edit Launcher
						<BR>Opens the <A HREF="#Launch">Launcher Edit Window </A> for setting up programs under this Menu Item.
					<LI><i>List of programs set up by Edit Launcher</i>
				</UL>
			<LI>Help
				<UL>
					<LI>Contents
						<BR>Opens IDE.htm which you have previously located for IDE in <A HREF="Configure"> Configurations </A>.
					<LI>Keys
						<BR>Lists the hotkeys you may use in IDE
					<LI>About
						<BR>Opens <A HREF="#About"> About </A>
				</UL>
		</UL>

	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="#Toolbar"></A> Tool bar</B></FONT>
		<UL>
			<LI>New Project				
			<LI>Open Project
			<LI>Save Project
			<LI>SaveAs Project
			<LI>Control Undo
			<LI>Configurations
			<LI>Delete Active Window
			<LI>Run
			<LI>Index Copy Active
			<LI>Drop Icon Multiple Times
			<LI>Active Window Combo
			<LI>Active TabItem Combo
		</UL>
		<UL>
			<P> Credits:
			<LI>Roland Stowasser supplied a fix to keep Tool Bar and Tool Box icons from disappearing from buttons.
		</UL>
	
	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="Properties"></A> Properties</B></FONT>
		<BR>Displays <A HREF="#Properties_attributes"> attributes</A> of a particular control
		or the window if an unoccupied spot on the design window is clicked. The
		tiny button in the upper right corner undocks and redocks Properties. 
		One Tab Item shows Property information about controls. Property caption and property value 
		panels may be adjusted in width using the mouse over the divider line between them. The other Tab Item 
		of Properties is a list of Events for the control. Events with code are flagged. 
		<UL>
		<P>Credits:
			<LI>The latest Property module was contributed by Martin Stachon.
			<LI>Travis Beaty suggested the method used to undock Properties via the little button.
			<LI>CK Lester provided much knowledge as to how Properties and Project View resize to one another.
		    <LI>Mario Steel provided useful information for undocking and changing parent window.
		</UL>
	
	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="Project View"></A> Project View</B></FONT>
		<BR>Project View is a Tree View of the elements of the current Project:
		Forms, Class Modules and Modules. Design, Properties, Menu Editor, Popup
		Editor, Timer Editor and Code Editor may be accessed by clicking on one
		of the elements of Project View. The tiny button in the upper right corner
		undocks and redocks Project View. 
		<P>You may elect to start IDE with or without Project View. See Menu <I> Options/Configure IDE</I>. 
		<UL>
			<P>Credits:
			<LI>Derek Parnell provided routines for manipulating Tree View within ProjectView.
			<LI>Travis Beaty suggested the method used to undock ProjectView via the little button.
			<LI>CK Lester provided much knowledge as to how Properties and Project View resize to one another.
		    <LI>Mario Steel provided useful information for undocking and changing parent window.
		</UL>

	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="Property_Project"></A> How Property and Project View Interact</B></FONT>				 
		<BR>Properties and Project View may be expanded
		or contacted in height and width by using the window resize arrows. When
		either one is changed in width, the other changes as well. When either
		one is changed in height, the other contracts accordingly. These windows,
		when undocked, stay on top of the IDE except when openFileName dialog,
		color Dialog, message boxes, etc appear. When expanding over Form Design, Form Design
		will move out of the way. Form Design may be resized in width as Property or Project View
		expand and contract in width. A docked Design Window when maximized will not cover 
		docked Properties or Project View. 
		
		<P>Properties and Project View may be undocked and
		moved anywhere on the <I>Screen. </I>It is not a requirement that they
		stay within IDE. If they are both redocked they return to their <U>original
		</U>position
		but retain the latest width provided that width is at least as wide as
		the width when IDE opens. If only one is redocked, it returns to the upper
		portion of the original position but occupies the entire length.

	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="Form"></A> Form Design</B></FONT>		.	
		<BR>This is a window with a grid, scroll bars, 'Layer 0' Tab and the first Window for the project, for example, Window1.
		Window1 is a view of the window that the end user will interact with.		
		Controls can be added to it using the Tool Box icons. The Grid
		may be hidden, disabled or drawn with different colors and lines/dots. <A HREF="#Configure"> See Configurations</A>.
		Controls may be added to several <A HREF="#Control_Layering"> control layers.</A>.
		Form Design may be undocked and moved any where within the Main Window. 
		An undocked Design Window when maximized will cover full screen
		See <A HREF="#Using_Design_Window">Using The Design Window </A> for a general overview of using Form Design.		
		<UL>
		<P> Credits:
			<LI>CK Lester provided information as to how Design interacts with Properties and Project View when maximized or resized.
			<LI>Martin Stachon provided many solutions to problems with Design Window positioning and faster painting when Design is resized.
			<LI>David Cuny supplied a fast grid drawing routine.
			<LI>Derek Parnell and Dan Moyer provided ideas for Layering
			<LI>Mario Steel provided useful information for undocking and changing parent window.
		    <LI>Sascha Zindel suggested moving Form Design out the way of Property or Project View
				width expansion.
		</UL>

	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="ToolBox"></A> Icon Tool Box</B></FONT>	
		<BR>Icons from the Tool Box can be selected to place controls onto the
		Design Window. <A HREF="#Tool Box Icons"> Icons</A> may be dropped once per selection or multiple times.
		<A HREF="#IconBehavior"> Icon Behavior </A>.
		<P>The tiny button in the upper right corner undocks
		and redocks Tool Box.
		Tool Box may be undocked and moved anywhere on
		the <I>Screen. </I>It is not a requirement that it stay within IDE's main window.
		If redocked it returns to the
		<U>original</U> position.
		<P>The ? Button left of the undock button will open
		the IDE Docs for information about various controls. 
		<UL>
			<P>Credits:
			<LI>Most Icons for Tool Box were obtained from David Cuny or Thomas C. Janes.
			<LI>Concepts for Tool Box were submitted by David Cuny.
			<LI>Travis Beaty suggested the method used to undock Tool Box via the little button.	
		</UL>	
	</BLOCKQUOTE></FONT>
	<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER> 

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+2 color="teal"><B><A NAME="#Support Windows"></A> Support Windows </B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">			
		
	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="Code Editor"></A> Code Editor</B></FONT>
	<BR>The editor allows code to be associated to control-event pairs or with program modules. You may select 
	to automatically add the SaveAs file name to <I>Generate Tools/Manage Include Statements</I> and 
	Code Editor's Module combo or be asked first.
	Your selection, if any, is saved for next run of IDE. 
	<P>A stand alone editor, editor.exw, is provided as a companion to Code Editor. Multiple instances of editor.exw are permitted. 
	Code from editor.exw is not incorporated into IDE except through copy/paste. Further enhancements are planned for this editor.
	<A HREF="#Using_Code_Window">See Using Code Editor </A>.	
	<UL>
		<P>Credits: 
		<LI>The latest editor, syntax editor, was contributed by Don Phillips. 
		<LI>Some modifications were made by Martin Stachon, Mario Steele and Roland Stowasser for adaption to IDE.
		<LI>Brian Broker improved syntax editor for standard behavior.
		<LI>Mario Steele suggested adding SaveAs module to the project and the third component of combos for code selection.
		<LI>Craig Welch suggested Mouse left double click to select and highlight a word.
	</UL>
	<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="Menu Editor"></A> Menu Editor</B></FONT>
	<BR>Menu Editor is used to design Menu and Menu Items. 
	In the Caption use the & symbol to underline the following letter in the generated exw.
	You may use <I>\t</I> to
	right align portions of the Menu Item text and <I>!</I> to treat a Menu as a command button.
	You may press Shift+Enter key while in either Caption or Name to create a new Menu. You may press Enter key
 	while in either Caption or Name to create a new MenuItem.
	Pressing Enter or Tab key after changing Name to a new Name will not create new entries but will instead
 	check for changes of Name in code data. You can double click a selected entry and be transferred to
	Code Editor w32HClick event. You can design more than Menu and MenuItem; you can design Menus
	under MenuItems and their MenuItems down three levels.

	If Menu Editor puts error messages in the list you must click the error line to move the entry back up into
	the Title and Name fields at the top of Menu Editor where you can correct the error.
 
	<UL>
		<P>Credits:
		<LI>Menu Editor has been modified from its original design by Roland Stowasser and Martin Stachon.
		<LI>Enter key for creating entries was suggested by Greg Haberek.
	</UL>
	<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="Popup Editor"></A> Popup Editor</B></FONT>
	<BR>Editor for designing right click PopUps. Works similarily to Menu Editor.
	<P><A NAME="Using Popup Editor"></A><U>Using the popup in your exw</U> is simple. Write a w32HMouse
		event for the control or window using the popup. For example, if your high order popup entry is Popup_101
		and the control using the popup is YourControl
		you would write something like this:
		<P>procedure onMouse_YourControl(integer self, integer event, sequence params)		
		<BR>&nbsp;&nbsp; if params[1]=RightDown then				
		<BR>&nbsp;&nbsp;&nbsp;&nbsp; popup(Popup_101, params[2], params[3]) 
		<BR>&nbsp;&nbsp; end if
		<BR>end procedure
		<BR>setHandler(YourControl, w32HMouse, routine_id("onMouse_YourControl"))
		<P>You might need to adjust params[2] and params[3] if the control clicked is not Window class.
		<BR>Use normal w32HClick routines for PopupItems.
	<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="Timer Editor"></A> Timer Editor</B></FONT>
	<BR>Editor for pseudo control Timer. Works similarily to Menu Editor.
	<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="Xpmmer"></A> Icon Editor</B></FONT>
	<BR>XPMmer is a helper Tool to design graphics for PictureButton, TogglePicture and Bitmap class controls.		
		See the Help information within XPMmer for detailed information. Note that the Help information was written for
		the stand alone Icon Editor (offered on Euphoria's Recent Contributions Page by Andy Drummond) and some features are not offered
		through the IDE version.
		<P> XPMmer may also be accessed from Properties for the above class of controls.		
		<BR>"XPMmer XPM" Property cell allows you to design an icon for the control.  
        <BR>"XPMmer Disable XPM" Property cell will allow you to design and create a disabled icon for the control. This property causes a duplicate button be
createEx in the <I>generated exw</I> with the disable icon. This control is named the same as the original button control with "D" added.
For example if your original button is PushButton2 the generated control is PushButton2D. The disable icon has no setHandler events.
You can switch between the two icons in Design via F1 and F2 when the control is selected. If there has not been a disabled icon created, you
will see the enabled icon when pressing F2.If you have more than one control with icon and disable icon, using F1 and F2
has the same action for them all. In other words if you press F2 on one of the controls and then select another and it has a disabled icon, that icon will show even thou
you had not pressed either F1 or F2 for this control.
<P>The generated disable button will be setVisible to false when the exw opens. You control switching the icons by
pairs of setVisible statements, set one control True and one False, in the exw when needed. Do not use setEnable of false on either control or your icon may be grayed out.
This feature is only available via Properties. Using Menu Editors "Icon Editor" will not create the disable icon.
	<P> You can copy XPMmer XPM Object to XPMmer Disable XPM Object on the same control from right click in Object under XPMmer XPM
		and selecting "Copy to XPMmer Disable XPM"	and vice-versa.
	<P> You can copy an XPMmer icon to another PictureButton, TogglePicture or Bitmap control.
			The method is to select in Design the control holding the icon you wish to copy. In Properties
			select 'XPMmer XPM' or 'XPMmer Disabled XPM' (the one you want to copy) which will open the icon in XPMmer. Make your changes, if any, to the icon showing in the grid. 
			When you are satisfied with the icon, move XPMmer out of the way or
			Minimize and select the control in Design to which you want the icon copied. Restore XPMmer and exit XPMmer which transfers the icon to the copy-to control.
			If you prefer you can copy the icon as is and reselect the copy-to control and modify the icon via XPMmer and exit XPMmer.	
	<P> Credits:
		<LI>XPMmer was written by Andy Drummond.
		<LI>Andy Drummond suggested the disabled icon.
	<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="MessageBox"></A> Message Box Generator</B></FONT>
	<BR>This selection from Menu <I>Edit/Create Message Box</I> allows you to create a Message Box while 
	using IDE and add to Code Editor via Window(tm) clipboard.
	<P>Enter information such as number of lines for message text, Icon desired, Button Type. Then
	click the CREATE button to see and modify the text of the message. COPY button will copy to clipboard and you
	may then paste into Code Editor.
	<UL>
		<P>Credits:
		<LI>This module was contributed by Roland Stowasser.
	</UL>
	<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="Systray"></A> Setup Systray Data</B></FONT>
	<BR>This selection from Menu <I>Edit/Setup Systray</I> allows you to indicate the tray
		icon,tip text, and button up and down routines.  
		You must have systray.ew on your system in Euphoria\include, your EuInc folder or your project folder
		and add to Manage Include Statements before F5/F6.
	<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="WindowStyles"></A> Visual Windows Styles Explorer</B></FONT>
	<BR>This window allows you to try various styles, extended styles and CS_NOCLOSE
	for window control and transfer the selection to Properties.
	<P>Special attention should be paid to Child Window. Some selections will produce Class Default style changes and if
	the Style is modified after using Visual Styles Explorer that field in Properties should be examined. Also remember that
	following Windows will be using the same styles as changed by Class Defaults and if they are not correct then they
 	may need a Class Default with WS_SYSMENU,WS_MINIMIZEBOX,WS_MAXIMIZEBOX if TitleBar with full system buttons is desired.
	<P>Select from Menu <I>Edit</I> or right click on current window in Design.

	<UL>
		<P>Credits:
		<LI>This module was contributed by Don Phillips.
	</UL>
	<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="ListViewStyles"></A> Visual ListView Styles Explorer</B></FONT>
	<BR>This series of windows allows you to try various styles, extended
	styles, headings, icons and data for ListView control and transfer selection
	to Properties. When a ListView is selected in Properties and Visual ListView
	Styles Explorer selected from Menu <I>Edit</I>, existing data will be supplied;
	otherwise default data is shown. You may also right click on ListView control to obtain 
	Visual ListView Styles Explorer.

	<P>"Fit to Data" means the longest text entry in the column determines the column Header width while "Fit To Data+Header" means
		the longest of the text entries in the column or the Header determines the column Header width.
	
	<UL>
		<P>Credits:
		<LI>The original author is unknown.
	</UL>
	<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

	<!-- <HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="Painter"></A> Design Window drawings</B></FONT>
	<BR>This component allows you to design drawings for your Window class controls. The
	drawings stay with the control unless you remove them. Select Painter from
	the ToolBox 'PaintBox' tab. Drawings always go behind normal controls.
	This concept never got off the ground but I have kept it here just in case it ever gets taken up again.

	<UL>
		<P>Credits:
		<LI>Painter was derived from concepts developed for the XPM and Icon generator by Andy Drummond.
	</UL>
	<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER> -->

	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="Initial List"></A> Initial Values for List and Combo controls</B></FONT>
	<BR>This window, selected from Menu <I>Edit/Initial Value for List and
	Combo</I> or right click Properties/&lt;LIST>, allows you to enter initial
	values for List and Combo Class controls.

	<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

	<HR ALIGN=LEFT WIDTH="100%">
		<P><FONT SIZE=+1 color="green"><B><A NAME="ManagePropertyTemplate"></A> Manage Property Template</B></FONT>
		<BLOCKQUOTE>	
			Manage Property Templates allows you to enter data for window or controls and replaces "Register Styles" and
			"Select From Styles." This feature
 			simply allows you to save keying by adding data you might need for a Property attribute.
			Data is entered and associated to a unique Key Name. You may add and remove the unique key names and
			associated data. If "Data" contains several attributes, separate with comma. You may change the Data for a key name.			
			If your data is simple you may use the data value as the key name and IDE will use it
			instead of the contents of "Data."
			Selected data is added to the currently active attribute
 			for the currently selected control.
			Manage Property Templates is pre-loaded with key names 
			LBS_NOINTEGRALHEIGHT and PBS_VERTICAL. Use Menu <I>Edit/Select From Property Templates</I> to add selected data to Properties
			or right click in selected attribute cell.
     <UL>
		<P>Credits:
		<LI>Sascha Zindel recommended Property Templates.
	</UL>
	<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>
	
<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="SelectPropertyTemplate"></A> Select From Property Templates</B></FONT>
	<BR>If you have used Manage Property Templates and added
		data you might use in projects, then you may use Select From Property Templates to
		add data to a control Properties. IDE does not validate your selection.
    <P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>
	
	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="Configure_IDE"></A> Configure IDE</B></FONT>
	<BLOCKQUOTE>
	Your selected options from the below configurations are modifiable and may be saved for future runs 
	of IDE.	
		<HR ALIGN=LEFT WIDTH="100%">
		<FONT SIZE=+1 color="blue"><B><A NAME="Config_General"></A> General Information</B></FONT>
				
			<UL>
				<LI><A NAME="Config_One"></A> <U>One Instance Of IDE</U>
					<BR>If checked IDE may not be started if a current instance is running. If unchecked 
					IDE may be restarted<I> but only from the first instance</I>. 	
					<UL>
						<P>Credits:
						<LI>Instance processing was contributed by Euman.
					</UL>
				<LI><A NAME="Config_PrjType"></A> <U>Define Project Type As</U> 
					<BR>The Define Project File Type option allows you to select the 
					three-character file type IDE will use when reading
					and writing the project file. This applies to all projects. 'prj' is the default.
				<LI><A NAME="Config_Lang"></A> <U>Language Preference </U>
					<BR>All language translations that have been downloaded by you and placed into the Language sub folder will
					appear in the combo and you may select the
 					one you prefer. Never remove English.lng from Language folder.
				<LI><A NAME="Config_Start"></A> <U>Start IDE with last opened or saved project</U>
					<BR>Check if desired. This implies that the project has been saved.
					Opening with last project is bypassed if you have not saved a project or if you 
					start IDE from a 
					filetype association such as from
 					Windows Explorer. 
				<LI><A NAME="Config_Index"></A> <U>Never index when copy a control</U>
					<BR>There is a feature in IDE to create controls that are indexed to other controls. So when
					you copy a control a question is asked if you want to index the new control to the one copied from.
					Some find this particularily annoying and if you do too then check this option. 
				<LI><A NAME="Config_Backup"></A> <U>Backup Project before save</U> 
					<BR>Before the project is saved a backup file <I>projectname</I>.bak is automatically
					set in the SaveAs dialog. Change the filename as desired. Press the Save button to continue or the Cancel
					button to not write the file. Uncheck this menu item to never write the backup file. 
					If you never want to change the filename or skip the backup
					then check "Re-use backup filename" next to this option. 					
				<LI><A NAME="Config_Backup2"></A> <U>Backup Project after MenuRun if no ex.err or crash file</U> 
					<BR>When checked this item indicates after MenuRun (F5), the project was previously saved, and no ex.err 
					that a backup file 
					<I>projectname</I>.AfterSave.bak be written via the SaveAs dialog. Change the name as desired. Press the Save button to continue or the Cancel
					button to not write the file. If you never want to change the filename or skip the backup
					then check "Re-use backup filename" next to this option.   					
					<UL>
						<P>Credits:
						<LI>This feature was suggested by Andy Drummond.
					</UL>
				<LI><A NAME="Config_BackupName"></A> <U>Backup Folder Name</U>
					<BR>In order to keep IDE folder tidy, a new subfolder "Backups" holds the backup files. You may change the backup folder
						but it should be a subfolder of IDE.
					<BR>Do not input the folder name with a path.
					<UL>
						<P>Credits:
						<LI>This feature was suggested by C K Lester.
					</UL>
				<LI><A NAME="Config_Min"></A> <U>Do Not Minimize IDE During Menu Run</U>
					<BR>The default behavior is IDE minimizes when you generate the exw via Menu Run or Menu 
					Temp Run. You may restore IDE while the exw is
 					running. If you never want IDE to minimize in this manner then check this item.
				<LI><A NAME="Config_StartIn"></A> <U>When Open or Save(As) Start in Folder</U>
					<BR>This sets the start folder, for example your project folder or a folder your project is in 
				<LI><A NAME="Config_FolderName"></A> <U>Folder Name</U>
					<BR>Indicate the default folder for Open and SaveAs Dialogs. This may or may not be the actual project 
					folder, depending upon
 					your folder structure. The default folder must already exist.
					If the above choice is not checked this field is ignored 
				<LI><A NAME="Config_Browse"></A> <U>Browse For Folder Name</U>
					<BR>Click this button for Folder Browse 
				<LI><A NAME="Config_Global"></A> <U>When Adding Controls They Are Global or Local</U> 
					<BR>Allows you to select local or global as <U>default</U> when creating
					a <U>new control</U> for the project. Choice may alternatively be changed per control 
					in Properties or Menu, Popup and Timer editors. When 'global'
					IDE generates 'global constant <I>Name</I> = create ....' statements and
					when 'local' IDE generates 'constant <I>Name = create </I>....' statements.
					The default is initially set to local.
					<UL>
						<P>Credits:
						<LI>Derek Parnell suggested adding this feature with default 'Local.'
						<LI>Mario Steele suggested adding this feature to Menu and Popup Editors.
					</UL>
				<LI><A NAME="Config_ChangeAll"></A> <U>Change existing controls to this selection</U> 
					<BR>You may change existing controls on the project to the above selection.
				<LI><A Name="Default Editor"></A> <U>Default Editor when passing IDE data </U>
                	<BR>The external editor path and name to use when clicking MenuItem 'Generate Program\Pass to editor of your Choice'. If you
						do not enter this data, IDE's Editor.exw will be used. The external editor must be able to read params. 
						If you edit the data while in the external editor IDE will know nothing about the changes!
						The passed file will be saved in the Project Folder or IDE's folder if there is no project.
					<UL>
						<P>Credits:
						<LI>Roland Stowasser suggested saving the passed file in the Project Folder.
					</UL>
			</UL>
			
		<HR ALIGN=LEFT WIDTH="100%">
		<P><FONT SIZE=+1 color="blue"><B><A NAME="Config_WindowOpen"></A> Describe How Major Windows Open</B></FONT>		
		<BLOCKQUOTE>	
			Indicate how major windows within IDE are opened when IDE initiates, e.g. 
			always maximized, maximized only if left IDE with it maximized,
 			at last position and size, closed, undocked. Not all options apply to every window.
			Selections will be used as soon as Configurations is saved. 
			
			<P>For Code Editor each time user closes and reopens Code Editor, these rules will apply.
			<UL>
			<LI>'Always Maximize'. Each and every time you open Code Editor it will be maximized. Even if
			 	you restore and/or resize the next opening will maximize.
			<LI>'Maximize if left IDE with Code Editor maximized'. If Code Editor was maximized when
				IDE closed, the next time IDE is opened Code Editor will be maximized. If you restore
				and/or resize, the next opening will maximize (because it was maximized when IDE was 
				previously closed.)
			    If this option is selected and IDE was closed with Code Editor not maximized, upon
				next open of IDE, system Default position and size will be used.
			<LI>'Last Position and Size'. Each and every time you open Code Editor it will open
				at the last position and size you left it when Code Editor closed. The size might be
				maximized. IDE will only open Code Editor minimized the when IDE opens; afterwards
				it will not open or reopen minimized; the logic is when you close and reopen Code Editor you want
				to see it and not have it minimized.
			<LI>'Defaults'. System default position and size will be used. 
			</UL>	
		    </BLOCKQUOTE>
		<HR ALIGN=LEFT WIDTH="100%">
		<P><FONT SIZE=+1 color="blue"><B><A NAME="Config_EnterKey"></A>Properties Wait For Enter Key</B></FONT>		
		<BLOCKQUOTE>	
			This window shows the attributes from Properties that respond to your
			input data with a redraw of the control or required value. You may select the 
			attributes that must 
			wait for a press of Enter key or TAB to process entered data.
			<P>Name always waits for Enter or Tab key and is disabled as a checked item.
			</BLOCKQUOTE>
		<HR ALIGN=LEFT WIDTH="100%">
		<P><FONT SIZE=+1 color="blue"><B><A NAME="Config_Docs"></A> Documentation Location</B></FONT>
		<BLOCKQUOTE>	
			IDE attempts to locate documentation files (Win32Lib's index.htm, Ruler.chm and IDE.htm)
			in IDE's folder or sub-folders. If not found, the Euphoria folder and sub folders
			are searched. Multiple copies of the files are entered in a combo box for
			selection.
			<P>If you have placed the documentation files into folders outside
			of Euphoria and/or IDE or on another drive, Browse button selections will allow a direct
			lookup for them using the Open Dialog.
			<P>This action only needs to be done once or when one of the files is moved or renamed.
		    </BLOCKQUOTE>
		<HR ALIGN=LEFT WIDTH="100%">
		<P><FONT SIZE=+1 color="blue"><B><A NAME="Config_Grid"></A> Grid Configuration</B></FONT>
		<BLOCKQUOTE>	
			Configure items such as color, pixel size and dot/lines. Options hide/show, enable/disable are located 
			in Menu <I>Options</I> on IDE's main Menu.
			<P>Changing the grid pixel increment after adding
			controls may lead to unpredictable behavior. It is recommended that the
			grid pixel size be determined before adding any controls.
			<P>The default status of grid is: blue color, 4 pixel,
			show grid, grid enabled and grid dots. Changing some of these fields results
			in a slight delay while IDE builds the new grid.
			<P>When using Properties the grid is temporarily
			disabled. If a control X or Y is changed, any later move of the control
			with the mouse will re-snap to the grid if you have grid enabled
			<UL>
				<P>Credits:
				<LI> David Cuny provided method for fast redrawing of grid after user selects a change.
			</UL>
			</BLOCKQUOTE>
		<HR ALIGN=LEFT WIDTH="100%">
		<P><FONT SIZE=+1 color="blue"><B><A NAME="Config_Controls"></A> Default Control Values</B></FONT>
		<BLOCKQUOTE>	
			Default Name, Title, CX and CY over-rides may be entered for controls
			dropped onto Design. These values may be used for the current IDE session,
			saved for future IDE use or replaced with original values
			</BLOCKQUOTE>
		<HR ALIGN=LEFT WIDTH="100%">	
	</BLOCKQUOTE>
	<UL>
		<P>Credits:
		<LI>Andy Drummond and Sasha Zindel suggested allowing user to indicate various Window positioning and state.
		<LI>Mario Steele suggested the default folder.
		<LI>Unknown user suggested automatic start of last project.
		<LI>Andy Drummond suggested Define Project File Type feature.
	</UL>
	
	<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>
   

	<HR ALIGN=LEFT WIDTH="100%">
	<P><FONT SIZE=+1 color="green"><B><A NAME="Program Information"></A> Program Information</B></FONT>
	<BLOCKQUOTE><FONT SIZE=3 color="black">			
	<UL>
		<LI>File Type for the generated program or module 
			<BR>You check either ew or exw.
		<LI>Include Win32lib Statement
			<BR>Generally for an exw you leave this checked; for an include module you decide.
		<LI>Win32lib Name
			<BR>If you have renamed Win32lib.ew to something else, then enter the name and
				supply the following information
		<LI>Add Crash_file Statement
			<BR>You may include a crash file statement at the top of the generated EXW by checking this option.
				The default is False. It is recommended when you generate your final version of the project that you
				not include the crash file statement if you are going to distribute the exw to others.
		<LI>Save Win32lib Name:
			<BR>You may save this new name for <I>all</I> projects by checking 'Save As Default' and
				each time you start IDE it will use this Win32lib name
			<BR>You may save this new name for <I>this</I> project by checking 'Save In Project' and
				each time you start IDE <I>for this project</I> it will use this Win32lib name
			<BR>Or you may choose not to save the new name at all by checking 'Do Not Save' and
				each time you start IDE it will use 'Win32lib.ew' for the Win32lib name.
		<LI>Run Project With Command Line
			<BR>allows you to add params to the exw statement
		<LI>Comment data added near top of generated program
			<UL>
				<LI>Program Title
				<LI>Version
				<LI>Author
				<LI>Date
				<LI>Required Win32lib.ew version
				<LI>Description
				<LI>Comments			
				<LI>Ok Button
					<BR>Click 'OK' when completed with entries
			</UL>
		<UL>
			<P>Credits:
			<LI>Dan Moyer suggested the Program Comment Data
			<LI>Roland Stowasser suggested the crash_file statement be optional.
		</UL>				
	</UL>
	</BLOCKQUOTE></FONT>	
	<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+1 color="green"><B><A NAME="Change_Order"></A>Change Control Order For Program</B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">	
	This window allows reordering the controls for the output EXW (EW). Normally you do not
	need to adjust the control order unless you want your controls to show top to bottom in a
	different order than what you would see tabbing to them. Then you only need to move these
	controls around with Change Control Order. You do not need to move them under their parent. Recent
	releases of IDE, since the introduction of Change Control Order will place them correctly under
	their parent when the EXW is generated.
	Conrol order within Design, Code Editor Control list, Properties or Project View is not 
	changed. The first time you use this feature in your project the controls may not be grouped
	with controls immediately under their parent. You might see controls between a parent and its
	child control. This is only a visual difference; your generated EXW will be correct.
	This happens because
	initially the control list is in the order you created the controls and all IDE does this first time
	is place the child controls somewhere under the parent. If the order is unsatisfactory, use the up or down buttons
	to place the controls in proper order. If you save this order, the next time you use it the
	controls will be listed as you left them, unless you have added or deleted controls since last
	use of this feature.
	<UL>
		<LI>Window Combo
			<BR>Use the combo to select any window in your project and get a list of controls
			for that window in the ListBox
		<LI>Use the 'Move Up' and 'Move Down' buttons to change the order of the controls in
			the ListBox
		<LI>click the OK button when you are completed
		<LI>or click Cancel button to keep controls for all windows in the original order
	</UL>
	</BLOCKQUOTE></FONT>
	<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+1 color="green"><B><A NAME="MIS"></A> Manage Include Statements</B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">	
	Use this window to add Modules and select the order they are included in the generated EXW	
	(EW) file after the statement 'include Win32lib.ew'. Previously included Modules may also 
	be removed from the Project using this window.
	<P>Text may be associated with the included Module. This will allow you
	to add something such as 'as XXX' or a comment. To add the appended text,
	or view previously added text, click the Module name in Manage Include
	Statements and enter the text in the edit box above. Also shown is the full
	path of the included Module.
	<P> Module Path may be altered. This is particularily useful when using a project 
	file created by another person.
 	The Path may be selected from the ... button located next to the path which 
	presents Folder Dialog or via right click in the path
 	field to delete or further modify the path. When using right click in the path the 
	first option is "set path relative"
	which removes from left to right one element of the path per right click. The 
	second option "delete path" removes the entire path.
	<P>When creating the generated EXW and project file, if the module's path is 
	within the project folder, the project folder 
 	name is removed from the path.
	<P>If you code in Code Editor an include statement for a file added to Manage Include
	Statements, your include statement will prevail and IDE will not add another. This
	allows you to use MIS to document project include files but place the "include" statement
	somewhere other than after "include Win32lib.ew."
	<P> See <A HREF="#Using_Include_Modules">Using Include Modules </A>
	<UL>
		<LI>Use the 'Add' button to select a file or files using the Open Dialog
		<LI>Use the 'Move Up' and 'Move Down' buttons to reorder the file names
		<LI>Optionally alter the path and add appended text
		<LI>Press the 'OK' button to save the file information
		<LI>Press 'Cancel' to abort
	</UL>
	<UL>
		<P>Credits:
		<LI>Right click on path was contributed by Roland Stowasser.
		<LI>Removing the path was suggested by Andy Drummond
	</UL>
	</BLOCKQUOTE></FONT>
	<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+1 color="green"><B><A NAME="TempRules"></A>Rules</B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">	
	The projected Temporary Name is shown at the top of the window
	<BR>There is a box for indicating what to do if the temporary file already exists
		Your choices are to
		<UL>			
			<LI>replace
			<BR>run will reuse the temporary filename
			<LI>stop
			<BR>the action will be aborted
			<LI>be asked for a new filename
			<BR>opens a dialog for you to enter a filename
		</UL>
	<BR>There is a box for indicating what to do with the temporary file after the exw is
		generated. 
		Your choices are to
		<UL>
			<LI>keep if bad EXW
			<LI>keep if good EXW
			<LI>always keep
			<LI>never keep
		</UL>
	<BR>Select Save\Save at the top of the Window to save you selections
	<BR>Select Run\Run to make a Temporary Run using these rules. 
		See <A HREF="#EXW_file">Creating an EXW file</A> for more information
	<BR>Press 'Close" button to return to Main Window without saving or temporary run
	</BLOCKQUOTE></FONT>
	<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+1 color="green"><B><A Name="external_editor"></A> Pass controls and routines to editor of your choice</B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">
	Use this option to pass your current controls and routines to an external editor of your choice.	
	<P>You may pass controls and routines to an external editor using this Menu Option. Indicate in Configurations the path and name of the
		external editor. If you do not enter an external filename editor and you use this Menu Option, IDE will
		pass to IDE's Editor.exw.
    <P>
		The external editor must be capable of using params as that is the method IDE
		uses to pass the file name, "IDEPassFile.exw", to the editor. Any changes you make via this editor
		will not be known to IDE! 
	<P> IDEPassFile.exw is deleted when IDE closes. If you want to keep the file once in external editor please SaveAs another file name.
		IDEPassFile.exw is placed in the project folder, or IDE's folder if no project exists. 
		<UL>
			<P> Credits:
			<UL>
				<LI>This feature was suggested by Don Cole
				<LI>Placing in project folder was suggested by Roland Stowasser
			</UL>
		</UL>			
</BLOCKQUOTE></FONT>	
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>


<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+1 color="green"><B><A NAME="Bind"></A> Bind Project/Include</B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">	
	You may bind your project from within IDE.	
	<BR>You may select
		<UL>
			<LI>Full Debug
			<LI>List
			<LI>Quiet
			<LI>Con
			<LI>Out [filename]
			<LI>Icon [filename]
		</UL>	
	<BR>See Euphoria documentation for meanings of these options
	<BR>An edit box shows your binding selections. You may directly key binding options
		in this field or correct options IDE may add.
	<BR>You may also indicate the Icon for the Bound exw by entering the file name or
		using the '...' button to locate the file. 
	<BR>Press 'Bind File/Save Options' button to Bind or 'Close' Button to abort Bind 
</BLOCKQUOTE></FONT>	
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+1 color="green"><B><A NAME="SelectRegisteredStyles"></A> Select From Registered Templates</B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">	
	If you have registered templates you may select a template for your control. The selected
	template data is placed in the current cell in Properties. It is your responsibility to use
	a template with an appropriate cell.

</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>
	
<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+1 color="green"><B><A NAME="Launch"></A>Launch other programs while in IDE</B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">	
	Under Menu <I>Launch</I> are:
	<BR><LI><A HREF="#external_editor"> Pass controls and routines to editor of your choice</A>
	<BR>"Run" which opens a dialog for you to select a file.
	<BR><A HREF="#Launcher">"Edit Launcher" </A> which allows you to set up files to list under the Menu <I>Launch</I>.
	<BR>Files that were previously set up via Edit Launcher. 
	<P>When parameters are selected in Edit Launcher, the file name will be passed to the launched program.
	<P> IDE does not send data to or receive data from programs under Launch.
	<UL>
		<P>Suggested files to add to Edit Launch are:
		<LI>eTranslate by Roland Stowasser which will pass your generated EXW to the Translator. Look for it on <B>Euphoria Recent Contributions Page</B>.
		<LI>exw2prj by Martin Stachon which generates a project file from simple EXW files. Look for it on <B>Euphoria Recent Contributions Page</B>.
	</UL>
	<UL>
		<P>Credits:
	</U>		<LI>Edit Launcher was written and contributed by Roland Stowasser.
</BLOCKQUOTE></FONT>	
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+1 color="green"><B><A NAME="Launcher"></A> Launcher Edit Window</B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">	
Launcher Edit Window allows you to enter programs that will be accessed from IDE's toolbar.
</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+1 color="green"><B><A NAME="About"></A> About Window</B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">	
	This window, selected from Menu <I>Help</I> shows all the people who have contributed to IDE. This window may be moved.
	<UL>
		<P>Credits:
		<LI>Scrolling list was contributed by Roland Stowasser.
		<LI>Movable window was contributed by Elliott S. de Andrade.
	</UL>
	</BLOCKQUOTE></FONT>
	<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+1 color="green"><B><A NAME="Table Specs"></A> Table Control Specificiations</B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">	
	Table Specs is used to generated row and column cells for Table control. You use
		the up/down arrows to change the number of rows and columns and the space between
		them. You may have the Table control resize to fit around the rows and columns or
		not. A case where you might not is for a very long group of rows and columns that
		would not fit your window. You might want scrollbars added to view the rows and 
		columns that do not fit your window. Only the cells that fit in Design show but with
		a right click in Design you may see them all. IDE will name the cells after cell 1 which
		is the control dropped onto the Table control. You may ask IDE to keep the cell's new name
		if you rename it. You may ask for the generated EXW to see the Table as an array.
	<P>You may use cell setHandler's routine_id in other cells. This method works by Row or Column
		or All cells. In Table Specs if you select Row from the 'Common SetHandlers' then each row's
		column1 control's routine_id will be used for all columns of that row. Select Column and each 
		column's row1 controls's routine_id will be used for all rows of that column. Select All and
		every control will use cell1 routine_id. Selecting None will treat routine_ids as normal.
		If you have multiple controls in cell1 then each control is treated individually but all controls 
		in cell1 will use the same method.
	<P>If you select Row, Column, None or All and OK Table Specs then later open Table Specs and select another option the
		setHandlers that were previously revised are set back to their original value of Control Name_event. 
		If you manually changed the setHandler statment you must manually change again.
	
 </BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+1 color="green"><B><A NAME="Show"></A> Show Full Size Form Design</B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">	
	This window, selected from right click in Design, is a Full Size Design.
	You may add, move and delete controls as in the smaller Design window;
	however the mechanism is not friendly. Both versions of Design are maintained
	when 'Show Full Size' is selected.
</BLOCKQUOTE></FONT>	
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+1 color="green"><B><A NAME="Off Screen"></A> Show Off Screen Controls</B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">	
When a control's X position becomes negative, it may not be fully displayed
in the Design Window. Off Screen is accessed via right click in Design.
The control is positioned as an offset relative to the right edge of the
Off Screen Window whose width is Design width. Controls of this nature
are usually Pixmaps but other controls may be placed off screen such that
the EXW's end user does not see them. If there are not any off screen controls,
the right click option is disabled. This window is currently not editable.
This window is not very useful.
</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>
</BLOCKQUOTE></FONT>


<HR ALIGN=LEFT WIDTH="100%">
<P><B><I><FONT COLOR="teal" size=+2>
<A NAME="Rule_Tool"></A>Using Measuring Ruler Tool</FONT></I></B>
<BLOCKQUOTE><FONT SIZE=3 color="black">See the Help under Options\Ruler Tool
for documentation or view Ruler.chm.
<UL>
<P>Credits:
<LI>Measuring Tool module was provided by Travis W. Beaty.
</UL>
</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR ALIGN=LEFT WIDTH="100%">
<P><B><I><FONT COLOR="teal" size=+2>
<A NAME="UsingMainWindows"></A>Using The Main Windows </FONT></I></B>
<BLOCKQUOTE><FONT SIZE=3 color="black">

	<HR ALIGN=LEFT WIDTH="100%">
	<P><B><I><FONT COLOR="green" size=+1>
	<A NAME="Using_Project_View"></A>Using Project View</FONT></I></B>
	<BLOCKQUOTE><FONT SIZE=3 color="black">Project View contains all the forms and
controls for a project, the class module-event pair having code and include
module names. You add include files necessary for the EXW directly into
IDE via Menu <I>Generate Tools/Manage Include Statements</I>. Win32lib.ew should not be
included since it is automatically generated when indicated. The
module will be added to Project View under Modules. The module list is
saved in the project's PRJ file. Prior to Menu <I>Generate Program</I> the include module list
may be reordered by Menu <I>Generate Tools/Manage Include Statements</I>. The included modules
are inserted in the EXW after Win32lib.ew.
<P>The view will be rebuilt each time Menu <I>Edit/UnDo</I> for Controls
is selected, a different window is added, selected or deleted or Project View is selected from Menu View.
<P>Clicking a node of the tree view will result in the
Design Form being altered to show selection of that control or window if
the control is not Menu, Popup or Timer and the Properties reflecting that
control or window and, if a Class Module or Module node was selected, Code
Editor for the selected Class Module-event pairing or routines for Module.
If the control is Menu, Popup or Timer the respective Editor is opened.</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

	<HR ALIGN=LEFT WIDTH="100%">
	<P><B><I><FONT COLOR="green" size=+1>
	<A NAME="Using_Property"></A>Using Properties</FONT></I></B>
	<BLOCKQUOTE><FONT SIZE=3 color="black">Properties contains all the data
about controls that you may edit. Many of the properties or 'cells' produce immediate results
in Form Design such as 'Row', 'Col', 'Width', 'Height', 'Caption' and if you have these checked to
affect the drawn control, 'Font', 'Color', 'Bitmap', 'Ico', and 'XPM'
<P>When 'Name' is changed you must remember to press either Tab or Enter key to accept the change
at which time Code Editor statements are modified for the new 'Name' as well as the Tool bar Window combo,
if 'Name' was for a Window class and the list of controls in Properties and Code Editor. There is
an option in Code Editor you may chose that does not change Code Editor statements when 'Name' is changed.
This means you must change them manually.
<P> You can see a complete list of Properties cells and what the cell does 
<A HREF="#Properties_attributes">here</A>.
 </BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

	<HR ALIGN=LEFT WIDTH="100%">
	<P><B><I><FONT COLOR="green" size=+1>
	<A NAME="Using_Design_Window"></A>Using The Design Window</FONT></I></B>
	<BLOCKQUOTE><FONT SIZE=3 color="black">
<P><A NAME="Resize_Window"></A><U>Resize The Window:</U>
		<BR>Resize the Design Window in Properties
		by altering it's attributes or by using the Design Window resize arrows or
		by clicking in an empty area of Design and using keyboard Shift and left or right arrows..
		Scroll bars are removed when not necessary.
		When the Design window completely fills the Form Design window (less the
		scrollbars), only Properties Width and Height fields and keyboard Shift and left or right arrows
		may be used to further expand the Design window. 
		A future enhancement will address this issue.

<P><A NAME="Adding_Controls"></A><U>Adding Controls</U>
To add a control to the window, select
the icon of the control from the Tool Box by clicking it, and then
click the Form Design window where you want the control to appear.<B> </B>Menu,
PopUp and Timer when selected transfer to their respective editors. <B>If
you add a control over an existing control it does not necessarily become
the parent but IDE will <U>attempt</U> to draw both controls. This is also
true if a control is moved by mouse or Properties over another control.</B> See more information
under <A HREF="#Control_Parenting"> Control Parenting.</A>
<P>Controls may move other controls via <A HREF="#Control_Partners"> Control Partnering.</A> 
<P><A NAME="#IconBehavior"></A>Icon Behavior allows changing how the selection of control icons
works for the current session. The default is single selection with multiple
selection as the option. You can toggle back and forth during the current
session by clicking 'OFF' Menu Item, toggling the "Off"/"On" button
on the Tool Bar or answering the question under 'Instructions.' When clicking
'OFF' Menu Item, the check mark is toggled. If multiple selection is
selected be sure to turn it off before clicking on a control to see its
Properties.
<P>With multiple selection the control icon selected
remains active until de-selected by clicking on it again. This allows multiple
additions of the control without having to reselect from the Tool Box.
It will not remain active after right clicking, Menu Editor, Popup Editor,
Timer Editor, Menu <I>Generate Program</I>, error messages or selection of a new window.
To de-select the control for control move or resize, press the control icon
again in the Tool Box, press the Esc key, click the "Off" menu item, click
the "Off"/"On" Tool Bar button or click somewhere in the Design window
where there is not a control. Selecting another control will automatically
de-select any prior selection.
<P>Tab Control must be added before Tab Item. Adding Tab Control automatically adds
the first Tab Item
There may be multiple Tab Controls and each one may have any number of
Tab Items with their respective controls. Tab Control may be added to an
existing Tab Item of another Tab Control.
<P>To add an additional Tab Item, select the Tab Item icon and click
<I>within</I> 
the Tab Item which is masking the Tab Control to which you wish to add. The second
combo box in the Main Window Tool Bar designates the currently selected
Tab Item. As new Tab Items are added, the combo box is updated
with the Title. Dropping a control <I>within</I> a Tab Item adds to the currently
selected Tab Item. Change the combo box for the appropriate Tab Item wanted
active to drop a control onto or for move/copy/resize. You may also select
the Tab Item by clicking on its "tab" in Design, if it shows, using Properties
dropdown list or selecting from Project View.
<P>Tool Bar control is automatically inserted at
the top of Design Window1 when selected from Tool Box unless dropped onto CWindow, in which case
it is positioned at the top of CWindow. When Window1
is larger than can be displayed, you will not see the Tool Bar after vertical
scrolling. There may be only one Tool Bar per window but it may be resized into rows. Rows are automatically sized. Just drag the Tool Bar
down and let go and a row will be added. After designing the Tool
Bar and its contents, if Window1 is resized smaller, some of its controls
may appear to be "lost" if the Tool Bar was completely full.
<P>The exception to these rules is when Tool Bar is dropped onto ReBarBand control. Then multiple 
Tool Bars are allowed but must be on different ReBarBands and Tool Bar must stay within its parent ReBarBand.
<P>To add a control to the Tool Bar, select the icon
from the Tool Box by clicking on it, and then click on the Tool Bar. The
control will be auto positioned within the Tool Bar. Controls may be repositioned
by dragging them to a new position. Drop the control a bit under the top
of the row you want it on and it will snap into place. To add or move a
control between existing controls, drag or drop overlapping each one. Controls
may also be added to Tool Bar by moving them into the Tool Bar, positioning
a little bit below the top of the row desired. The control will autoposition
and snap into place. Removing controls from the Tool Bar causes the remaining
controls to automatically reposition. Use ToolBar Spacer control for adding spaces 
between controls on Tool Bar.
<P>Status Bar control is automatically inserted at
the bottom of Design Window1 or CWindow when selected from Tool Box. When Window1
is larger than can be displayed, you will see the Status Bar after vertical
scrolling. When adding Status Bar to the project, it must be dropped onto Window or CWindow
and not any child controls. When moving Status Bar to Window or CWindow it must be moved to
Window or CWindow and not to a child control.
<P>To add a control to the Status Bar, select the
icon from the Tool Box by clicking on it, and then click on the Status
Bar. Controls added to the Status Bar are automatically CY sized. Controls
may also be added to Status Bar by moving them into the Status Bar.
<P>Menus can be added by selecting Menu from the
Tool Box. or from Menu <I>Editors</I>, right click on Design or hot key.
<P>Popups can be added by selecting Popup from the
Tool Box or from Menu <I>Editors</I>, right click or hot key. Use mouse right
button in Design and select 'Show Popup' to see the Popup Items. There
may be multiple Popups on a window and under that condition when selecting
'Show Popup' there will be another window for choosing the Popup Name to
show. Click on the window, an item in the Popup or a Form Design control to clear the Popup display.
There has been no attempt to associate Popups with controls but you may
do this in Code Editor. This display is for visual purposes only. The Popup will try to appear
at the cursor position where you right clicked in Design. If there are more PopupItems than will fit
on the screen, Windows[tm] will reposition.
<P>Timers can be added by selecting Timer from the
Tool Box. or from Menu <I>Editors</I>, right click on Design or hot key.
<UL>
<P>Credits:
<LI>Dan Moyer provided assistance with multiple selection logic.
</UL>

<P><A Name="Control_Parenting"></A><U> Control Parenting</U>
When adding a control to Design, IDE will establish parenting if the control is placed within
TabItem, ToolBar, FlatToolBar, StatusBar, ReBar, ReBarBand, Group, Table or CWindow control.
<P>If you add a control to other controls, for example a PushButton, and desire the PushButton to
be the parent you may manually add parenting. Click into the new control and in Properties scroll down
to the attribute 'Parent' and use the dropdown list to select the name of the control you wish to
be parent to the new control. Notice that a check is entered into the attribute under parent, 'Maint by user,' which
indicates the parent is frozen as far as automatic reassignment by IDE to another control except The Window. The dropdown list is comprised of controls
the new control is within in the same Layer or Layer 0. If you move the control out of the parent you previously manually selected the parent
changes to The Window but the checkbox remains checked. If you further
move the control to a traditional IDE container, such as Group, the parent is still The Window
but if you uncheck "Maint by user" or select the Group control from the dropdown parent list then Group becomes the parent
 and the check is removed from "Maint by user." You may also check controls within traditional parent controls
such as Group, TabItem, etc which will prevent that control when moved from obtaining a new parent except The Window. 
Traditional parent controls may themselves be checked in "Maint by user."
<P>Selecting The Window as parent is an alternative method to using Control Layering.

<P><A Name="Control_Partners"></A><U> Control Partners</U>
Control Partners are controls that follow along when another control moves. The Partner control does not
have the moving control as parent and is not 'inside' the moving control. This is simply a
feature to facilitate layout Design and does not carry over into the generated exw. To use Control Partnering
in Properties locate the 'partners' attribute in Properties and either manually enter the Name of
the control or click the button to the right of the cell. When manually entering or adding manually
to the list produced by clicking the button, separate entries with a comma.

<P><A NAME="Select_Controls"></A><U>You select a control</U>
by clicking on the control in the Design window,
selecting the control from Properties dropdown or selecting
from Project View. Tab Items may also be selected from IDE's ToolBar Tab
Item Combo or their "tab", if showing. The selected control will appear
as a rectangle and resizing arrows will be supplied. Select a Tab Control with Tab Items 
via Properties dropdown list
or Project View.

<P><A NAME="Unselect_Controls"></A><U>Unselecting Controls:</U>
<BR>To unselect a control, either press the Esc key,
click in the Design window where there are no controls or pick another
control from the Tool box.

<P><A NAME="Del_Controls"></A><U>Deleting Controls:</U>
<BR>To delete a control, select it and press the Delete
key or select it with the right button and choose 'Delete Control.'
<P>To select a Tab Control with Tab Items, use Properties
dropdown list, ProjectView or right click in Design. When Tab Control has only one
Tab Item and Delete key is
pressed, IDE will be delete both Tab Item and Tab Control. 
<P>Deleting a Tab Control, Tab Item, Status
Bar, Tool Bar, Group, Table, ReBar or ReBarBand automatically deletes its
sub controls.
<P>Deleting a control from the Tool Bar results in
the remaining controls in the Tool Bar being repositioned.
<P>The Currently Active window may be deleted using
Menu <I>Edit/Delete Active Window</I>. If the currently active window
is the only window, the window is replaced with an empty Window1.

<P><A NAME="Editing_Controls"></A><U>Editing Controls:</U>
<BR>Click on a control using the left button, and
Properties will be updated for this control or the Window if an unoccupied
spot on Design is clicked. If multiple icon usage has been selected, it
needs to be turned off before clicking on a control. Control may also be
selected via Properties dropdown or ProjectView.
<P>You can change the size of the control
with the mouse and the position with the mouse or keyboard arrow keys.
Properties may also be used to change size and position.

<P><A NAME="Resize_Controls"></A><U>Resizing Controls:</U>
<BR>To resize the control, select it then drag one of the corners, top, bottom or side. To
prevent control from moving while you are finding the hotspot to resize, hold down Shift+R before 
moving the cursor. Tip: move the mouse from the center of the control outwards toward the border. When
the cursor changes from pointer to arrow, press the left mouse and pause a second or two for IDE to
catch up and while mouse is still depressed move the mouse.
<P>Controls may also be resized by using Shift plus up or down keyboard arrow. Properties may also
be used via Width and Height attributes.

<P><A NAME="Move_Controls"></A><U>Moving Controls</U>
<BR>To move the control with the mouse, select it and drag
it to the new position. Shift+R prevents moving a control. 
Properties may also be used to move to a new location as well as the keyboard arrow keys.
Controls may also be moved using right click popup options.
<P>To move a Tab Control and all its Tab
Items, select with the left mouse and drag. A Tab Control may not be moved
to any other control except to an existing Tab Item. To move a Tab Item,
select with the left mouse while holding down the Shift key and drag.
<P>A Tab Item must be moved to an existing
Tab Item on a different Tab Control. When moving to
a Tab Control with existing Tab Items, they will all be sized to the largest
Tab Item. Lift up on the mouse with the cursor <I>within </I>the Tab Item and the moved Tab Item will auto position.
<P>Moving the Tab Item, Group, Table, CWindow or
ReBarBand controls automatically moves controls contained within them.
<P>Controls moved out of a Tab Item, Group, CWindow
or ReBarBand no longer are assigned to a parent, unless moved into another
Group, ReBarband, CWindow or Tab Item. Parenting is carried into the EXW or EW file
and x, y positions re-calculated to fit within the parent. The project
file retains the original positions for reload purposes.
<P>Controls moved into a Tab Item, Group, CWindow
or ReBarBand will have the Tab Item, Group, CWindow or ReBarBand assigned as parent.
The exception is a Group within a Tab Item. In this case, if a control
is moved into the Group, the parent will be the Tab Item although
Properties and ProjectView will show the Group as parent. If the Group
is subsequently moved out of the Tab Item, the controls within are re-assigned
to the Group. The EXW or EW file will assign controls within the Group
control to the Group even though the Group is within a Tab Item. The PRJ
file retains the original parenting for reload purposes. Since version 0.17.0, direct parenting and child
information is maintained in the project file and the above discussion refers to the highest parent 
of a control.
<P>A control and any children may be moved from a window to another window in the project.
<P>Controls in the Tool Bar may be moved
around (or out of the Tool Bar) by selecting with the left button, moving
where desired and releasing the mouse. Be sure to release it just a bit
under the top of the Tool Bar row if moving to a new row. The existing
controls in the Tool Bar will auto position to accommodate the insertion.
<P>Multiple controls may be selected for moving and resizing via keyboard arrow keys or for changes in Properties (except row and column.) The controls must all be the same class. Click a control and press Shift+S, then select 
and press Shift+S for every 
control you wish to mass change. If you change your mind press Shift+A. Use either keyboard arrow keys 
to move/resize all the
 controls or the change made in Properties will apply to all the selected controls. When completed with 
changes for these
 controls, press Shift+A to terminate multiple processing. This procedure may not be used with 
Copy Control or Delete Control.

<P><A NAME="Copy_Controls"></A><U>Copy a Control</U>
<BR>To copy a control to another location, press the
Ctrl key, select the control to copy and drag to the new location.
Controls may also be copied using right-click options. 
Any controls within the selected control will also copy unless their Property "Maint By User" is checked. 
When coping a control whose Property "Maint By User" is checked, the newly created control will 
<U>not</U> have "Maint By User" checked.
When copying a control
or container controls the newly created control will have Name
and Title built from the control's Name or Title less any trailing numbers plus the next available incrementing
number assigned. Any controls child to the copied control will also follow this rule when copied.
 However if the control is a List View and it has trailing quote the new control will have the quote at 
the end.
 <P>If <A NAME="Index_Controls"></A><U>Indexed Copy</U> is Active (the default), after pressing Ctrl key and moving the control, you will be asked if the new control
 should be indexed to the original. When answering "Yes" this control, and others copied from the original control will create a one dimensional array in the
 generated EXW. A control created via Copy with indexing may not itself use copy with indexing but may use copy. To suspend this feature, click the Indexed Copy Active icon in the IDE toolbar. When creating controls in this
 manner, you may continue to write code referring to the Name as shown in Properties and IDE will translate to
 the proper index when generating the EXW. If the
 new control is not in the same control (including window) as the original, it will be created without indexing. In the generated EXW the
 order of the controls is the original and then the copy-indexed in Control Order (TabOrder) and they are
 named the original control e.g. if original is PushButton2 then it is PushButton2[1] and the copies will be PushButton2[2]..PushButton2[n].
 If a control created in the way has a lower row value than the control copied from, the control copied from is still the first index.
 Group, TabItem, TabControl,CWindow when create an index-copy should not have within it a control that creates an
 index-copy because IDE can not figure out some of the indexing. A container control when Copied (without index-copy) that
has indexed controls will not create the new container with indexed controls. State of Indexed Copy Active button is saved for next IDE run.
<P>Tool Bar, FlatToolBar, Status Bar, ReBar and ReBarBand may not be copied.
<P>Indexed Copy is Active may be set/unset in configurations for future runs of IDE. If you switch Index Copy
 from toolbar that does not alter configuration 'Never index when copy a control' setting. This allows you to set the 'usual' condition in configuration and switch
 during control manipulation in Design via the toolbar.
<P>Credits:
<LI>Indexed Copy was suggested by Merv McKee.

<P><A NAME="Save_Design"></A><U>Saving the Design:</U>
<BR>Closing IDE, opening another Project file, starting
a new Project may generate a PRJ file via a window's dialog. A backup file
<I>filename</I>.bak
will be automatically created when project is saved. You may elect
not to do this by unchecking in Menu/Configure IDE on General Information tab 'Backup Before Save' option.When opening project, you may not select Backup Files from the files type dropdown.

<P><A NAME="Keyboard"></A><U>Keyboard support</U>
<BR>F5 initiates menu 'Run'.
<BR>F6 initiates menu 'Temporary Run'.
<BR>Delete key deletes selected control.
<BR>Ctrl+S will save project unless Code Editor has focus in which case the data in editor is saved.
<BR>F12 provides the SaveAS Dialog.
<BR>Ctrl+O provides the Open Dialog for 'prj' unless Code Editor has focus in which case Open Dialog for files is provided.
<BR>Ctrl+T opens Tool Box or changes to Top Most
status if already open.
<BR>Ctrl+P opens Properties or changes to Top Most
status if already open and undocked.
<BR>Ctrl+J opens Project View or changes to Top Most
status if already open and undocked.
<BR>Ctrl+L opens Initial Values for List and Combo
controls.
<BR>Ctrl+M opens Menu Editor if not already open.
<BR>Ctrl+U opens Popup Editor if not already open.
<BR>Ctrl+E opens Code Editor or changes to Top Most
status if already open.
<BR>Ctrl+W opens Timer Editor if not already open.
<BR>Ctrl+Z performs Undo either control or Code Editor depending upon which has focus. Undo does not work across Windows in the project.
<BR>Ctrl+A opens Manage Include Statements or select all Code Editor statements depending upon which 
has focus.
<BR>Keyboard arrow keys may be used to move and resize
a selected control by Grid Pixel Size positions. Using arrow keys with
Shift will adjust CX and CY and using Ctrl will adjust both CX and CY.
<BR>F1, F2 and F3 switch button icons for FlatToolBar. However if Code Editor's Find/Replace has focus, 
F3 will find again.
<BR>Shift+S after clicking a control selects it for multiple processing. Multiple processing is terminated with Shift+A.
<BR>Shift+A terminates or aborts multiple control processing
control.
<BR>Shift+R prevents control from moving as you attempt to resize
<BR>&nbsp;
<P><U>Form Locking</U>
<BR>The X, Y, CX and CY values of controls on the
Form may be locked to prevent accidental movement with the mouse. This
is a menu item under Menu <I>Edit</I>.
<P><U>Undo Last Action</U>
<BR>One level of Undo is provided. This action is found under Menu <I>Edit</I>
and right click in Design or on IDE Tool Bar. Undo is disabled when selecting Code Editor
and upon return to Design is not available until the next control action. Code Editor has its own Undo.
<P>Undo does not work across Windows in the project.

<P><A NAME="Control_Layering"></A><U>Using Layered Controls</U>
<BR>Controls may be designed that reside at the same location or overlap in a window. Controls may also be designed that do not reside or overlay other
 controls but that are needed or not due to your specific actions. "Layering" is a visual tool for you to design such controls and via generated routines
 manipulate whether they show on the Window or not. 
The set of controls which are not in an extra layer
are in the base layer, labeled Layer 0, in the first tabitem above the Design Window. Most of the controls for a Window are in the base level, Level 0.
Controls which might overlay, replace or supplement some of
the controls in the base layer are in extra layers which you add. Usually the intent is one set or the other is viewable by the program's
end user at any time. There is no limit to the number of extra layers associated with a Window. You may add and remove Layer Tabs and change the Layer Tab captions. Controls may be added to the active layer by
 selecting from Tool Box and dropping on Form Design in the normal way. Or you may move a control from layer to layer
 via "Layer" in Properties.
<P>Normal <A HREF="#Control_Layering_Parent"> parenting rules</A> carry across layers. 
<P>Select Menu <I>Edit/New Control Layer</I>
to add a new layer which is positioned <B>after</B> the active layer tab. IDE will add a new tabitem and show an empty Design Window. Add controls as desired.
You should probably uncheck <I>Visible</I> in Properties for all controls in additional layers and set Visible or Enabled as desired
from within the exw or use canned functions <I>setLayerVisible </I> or <I>setLayerEnable</I>. Layers may be deleted via Menu <I>Edit</I> which will remove not only the layer tab but controls
that were added for that layer or moved to that layer. Menu <A HREF="#Layer_rename"> <I>Edit/Rename Layer</I></A> allows you to change a particular, or all/any, captions at one time.
<P>Child controls of ToolBar, FlatToolBar, ReBar, ReBarBand, TabControl, TabItem and Table added to a different layer than
the parent control may not work correctly. When a Table control is checked to use setLayer, then the individual cells are not
evaluated.
<P>A layer is not a new window so all controls in all layers for a window will show in Properties and Project View. Clicking
a control that is in a separate layer will shift the view to that layer and then display the selected control and other controls in
the layer.
<P>Additional Window controls in the project may also use layering. Information regarding background layers for the current window is not retained when switching or adding a new Window.
<P>Showing multiple layers is possible provided a layer (other than Layer 0) is currently active.
 If there is one additional layer, Layer 1 will display over Layer 0 from right click Popup selection "Show Multiple Layers." To remove
 Layer 0, from right click Popup select "Show Foreground Layer." You may also compare additional layers to one another. When
 there are more layers than Layer 0 and layer 1 and "Show Multiple Layers" is selected from Popup, you may specify the background layer. Multiple background
 layers may be specified by holding down the Ctrl key when selecting from the List. The active layer
 is always the foreground layer.
<P>Specifying background layers for the active layer may also be achieved via right click on a non-active layer tab. When Layer 0 is the active layer other layers
 may not be background layers. Multiple background layers
 may be specified by holding down the Ctrl key when right clicking. To remove background layers, right click the active layer tab.
<P>When a layer is specified as a background layer, the controls in that layer will be grided (if grid is not hidden) so you may easily
distinguish those controls in the active layer. When grided, controls with icon or bitmap images will not draw with them
 since the grid would be masked. If a control from background layer is completely behind a foreground controls it will
be drawn with a red border and no caption.
<P>Control Layer may be changed to another valid layer in Properties. From "Layer" dropdown 
list select the Layer Caption to which the control should be assigned. 
<P>Layer Tab captions may be changed via Edit Menu. New captions will be remembered for next load of the project provided the project is saved.
<P>An example of Layering would be a window which has a group control containing different 
adio, checkbox, etc under certain conditions. You would
 place the group control in the base layer, first set of controls for the group in one 
layer and the extra set in another and manually set the correct Visible/Enable as directed by
 some action of the program end user. You may use setLayerVisible and/or setLayerEnable and 
every control in the indicated layer which has "may use setLayer" in Properties checked
would be set True or False. A Menu Item in <I>Edit</I> Menu may be used to change all controls, with the exception of controls in EuGrid,
in the active layer True/False in "may use setLayer." This MenuItem is also checked when controls
are added/moved to/in Design. If the MenuItem is checked then controls added/moved into the active
layer will automatically have "may use setLayer" checked. If the MenuItem is not checked, new controls
will not be checked and controls moved into the layer will retain their checked state.
<BR>You might also design the project such that the group is not in the base layer at all but is in one of the extra layers with the initial set of controls for that group. Upon
program end user's action, another group from another layer might be set Visible and the first group set not Visible.
<P><B>Note that older project files (prior to v0.18.9) with Layering did not have the 'May use setLayer' and you will need to check this Property. IDE will auto check this
property for controls in layers other than the base layer. Once project is saved these values are remembered upon reload.</B>
<P> Parameters to functions setLayerVisible and setLayerEnable are (integer windowName, object "layerName" and integer state) where
windowName is the Name of the Window in Properties, layerName is the exact layer tab caption in quotes or the layer number and state is either True
 or False. Layer numbers begin with 0. These functions return 0 for success or 1 for failure to find layer name. If window name is not found, a syntax error will occur. Associated with these routines is a sequence sorted by windowName, layerName and controlName. You may find other
uses for this sequence. The sequence and setLayer routines are found in the generated exw after all project Window createEx statements.
<P>Credits:
<LI>Layering was suggested by Dan Moyer and Derek Parnell. Dan Moyer provided detailed logic for Layer Tab Right Clicking as well as sample code. 
Tony Steward suggested griding background layers and allowing switching a control between layers which is useful when
 working with an existing project. Tony Steward suggested ability to rename layer tabitem captions. Andy Drummond suggested routines setLayerVisible and
 setLayerEnable. 
</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<P><A NAME="Layer_rename"></A> <U>Layer Rename</U>
<BR>Allows you to rename any Layer. A window will open to allow you to pick the Window and Layer
to change. The current Layer Name appears in an edit box; make your change and if press the "Done"
button or "Cancel" button to return without making the change.
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<P><A NAME="Control_Layering_Parent"> <U>Assigning Parent to Controls</A></U>
<BR>If you add a container control, such as
Group, to Layer 0 and place a Button in Layer 1 over the Group, the Button's parent will be
Group.
When changing a control to another layer if there is a parent already for the control, it 
is not altered if the parent is in Layer 0 or the same layer; otherwise
a new parent is assigned. If there was not a parent and the control falls within another control after switching 
layers, the parent is changed to the control it falls within if it is a container control or Window1 with a dropdownlist of
possible parents.

<P>In Properties assigning Parent for controls in layers, except for layer 0, is permitted.
 When the selected control is part of an additional layer and <I>Parent</I> in Properties 
is
 clicked, a dropdownlist of parents from layer 0, or the current layer, and the Window is prepared. 
<B>Be careful to assign <I>Parent</I> when positioning of the
 controls in layers are satisfactory </B> because any movement of a control may reassign 
parenting based on the current layer. In other words
 if Parent is a control from layer 0 that Parent may be removed and replaced with the 
Parent in the current layer, if applicable and vice-versa. Child controls in the same
 layer as the Parent retain their Parent. 

<P>Table control is a special case. Normally the Table
and its cell controls are in the same layer, however IDE will allow placing on separate layers.
Since a cell control within Table may not be moved if another control is placed in a layer other than
layer 0 and Table is placed in layer 0 then Table might become Parent to the control when it should
not. To help you IDE will prepare all possible parents in the Parent dropdownlist. It must be stressed
this will not happen if the Table and the control falling in Table are both in layer 0.
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+2 color="teal"><B><A NAME="Adding_Window"></A>Adding An Additional Window</FONT></I></B>
<BLOCKQUOTE><FONT SIZE=3 color="black">To add an additional window to the project, select Menu <I>Edit/New Window</I>. 
The window will be added to the currently active window
combo box in the Main Window Tool Bar. Properties 'Parent' may be modified
for additional windows. If parent is blank, IDE will generate "0" for the
parent attribute in the EXW (EW).
<P>A dropdown list of available windows may be used in Properties 'Parent'
attribute. The dropdown will include a 'blank' entry, all window names
defined prior to the selected window and, if an include module project, the parent
of the first window. The first window may not have a parent unless the
project is an include module project. The first window in the include module project
may have a parent but be aware that using one most likely will cause the
generated EW to fail when run in stand alone mode.
</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+2 color="teal"><B><A Name="Adding_NonTraditional"></A> Adding Non Traditional Controls</FONT></I></B>
<BLOCKQUOTE><FONT SIZE=3 color="black">IDE departs from normal Microsoft buttons by allowing color. IDE colored buttons are
emulated and managed by coloredbuttons.ew include file. You still add a button to your project and give it
all the properties you normally would but in addition you would assign color and other attributes you want. ColoredButtons.ew
takes care of everything else for you.

</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR ALIGN=LEFT WIDTH="100%">
<P><B><I><FONT COLOR="green" size=+1>
<A NAME="Using_Code_Window"></A>Using Code Editor</FONT></I></B>
<BLOCKQUOTE><FONT SIZE=3 color="black">
Associated with Code Editor is a dialog window for selecting
the syntax colorization colors, number of columns for tab, number of UnDo allowed and updates for the syntax words by category. 
Click the 'Tool' bitmap located at the bottom right next to intersection of scroll bars or Menu Item. You may add/remove words, series of words or
the complete category.
<UL>
<P>Credits:
<LI>Moving Options window contributed by Elliott S. de Andrade.
</UL>
<P>Included with IDE is a program Winlibscan.exw
which updates OtherC.ini file, with a collection
of Win32lib.ew keywords, to assist you in upgrading to a new Win32lib.ew
release.
<P>Right mouse in the editing pane brings up a popup menu with 'undo/cut/copy/paste/select all' options.
<P><U>Returning to a line of code when switching between modules and class modules</U>
<BR>You may switch between modules and class modules and between themselves via the combos at
 top of editor as well as Project View and the line of code at the prior cursor position will be shown. 
Scrolling does not establish cursor position but clicking in a line will.
 <P>You may also position cursor in a routine name that is a global routine from
a module in Manage Include Statements or control-event pair; 
press F1 and jump to that routine; press ESC to return to
the module or Control-Event code. The line returned to is the last cursor position as shown in
the status bar. Scrolling or clicking in a line does not establish cursor position. For routines defined and used within 
control-events, you may press F1
on a routine name to jump to the statement where the routine is declared, move the cursor to another 
line and F1 on a routine name
in that line, so on and so on, and when you may press Esc key multiple times walk backwards to where 
routines where accessed via F1.
<P>The last cursor position is kept for the duration of the current IDE session and saved in the 
project file for the next time the project is opened unless ex.err intervenes. 
<P><U>Right click in Code Editor Controls List</U>
<BR>A right click in Code Editor Control's list opens a popup. The popup opens a small window of results from the following
selections: (1) Present a list of
event names that have coding for the control right clicked,
(2) Sort the controls list,  
(3) Show a list of controls from other windows in the project,
(4) Show sorted list of controls from other windows in the project. 
When using option 1 you can select the event from the sorted list.
When using option 2 you can select the control from the sorted list.
This window closes when a control or event is selected from the normal Code Editor's 
Controls list or Event dropdown.
<P><U>Using AutoSave</U>
<BR>You may activate/deactivate autoSave in Code Editor which will save your project every n minutes you specify.
This feature saves your <B>existing</B> project file based on a timer. You activate/deactivate autoSave in in Code Editor MenuItem "Options/Autosave Options" which opens 
a new window for checking/unchecking "Turn on/off Autosave" and to use the UpDown control to
change the Autosave interval minutes or enter them directly in the editbox. 5 Minutes is the default. Your selections are used for all projects
and saved each time you change one of them.
<UL>
<P>Credits:
<LI>AutoSave was written and contributed by Craig Welch.
<LI>Multiple Jump_Return via F1_Esc was suggested by Andy Drummond.
<LI>Jump_Return from module routine to Control_Event code was suggested by Andy Drummond.
<LI>Logic of returning to last cursor position was contributed by Andy Drummond.
<LI>Suggestion to supply user with sorted Controls list was contributed by Tony Steward.
<LI>Suggestion to add Events with code and use a popup window was contributed by Andy Drummond.
</UL>
<P><U>Adding Code To Controls or Module:</U>
<BR>Right click, double click most controls in
the Design window, press hot key, or select from Menu <I>Editors</I>,
and the Code Editor Window will appear. Exceptions occur when you have added an image to your
control. Not all images accept double click. To invoke Code Editor from these controls, use right click
and select Code Editor from the popup list. 
If code already exists, selecting
from Class Modules in Project View will also open the Code Editor. Clicking
a node under Modules will open Code Editor with routines from the included
module. To add code for a Menu Item, in Design select the Menu the Menu
Item is under and move the mouse down to the Menu Item and release or use
Menu Editor and right or double click on the menu item in the bottom box or select from Menu Editor Menu. 
If a Menu has ! anywhere in its caption, it also may transfer Code Editor but only for the w32HClick event. Code for
PopUps and Timer are done in a similar manner from PopUp Editor and Timer
Editor, respectively. Timer Editor will allow only the window control onTimer
event.
<P>You may scroll to selected routines from Module
or Control's (General),(Control General), Intro) and (Final) events via Menu Item <I>List Routines</I>. The list box
item "All Routines" takes you to the top of the Module or control-event event.
<P>The Code Editor Window has the following fields:
</BLOCKQUOTE></FONT>

<BLOCKQUOTE>
<TABLE BORDER COLS=2 WIDTH="88%" >
<!--Define column headings-->
<TR>
<TD><CENTER><FONT color="green" size=+1><B>Control</B></FONT></CENTER></TD>
<TD><CENTER><FONT color="green" size=+1><B>Function</B></FONT></CENTER></TD>
</TR>
<!--Table below-->
<TR>
<TD>Control</TD>
<TD>Determines the control for which code is being associated.</TD>
</TR>
<TR>
<TD>Long, thin button</TD>
<TD>Click button to hide Control List and resize the edit panel. Click again to restore.</TD>
</TR>
<TR>
<TD>Event</TD>
<TD>Lists all events that can be associated with the control. The events list initially includes
all possible events. You may limit your events to selected ones per Class.
</TD>
</TR>
<TR>
<TD>Module</TD>
<TD>All Included Modules for the Project and files opened during the current editor session.The include 
module name may also be selected from 
Project View or Project Module Open in Code Editor. When selected, code is associated with the
 module instead of control.</TD>
</TR>
<TR>
<TD>Edit</TD>
<TD>Displays the code associated with the control/event pair or include
module. 
</TR>
</TABLE></BLOCKQUOTE>

<BLOCKQUOTE><FONT COLOR="black" SIZE=3>
Code for Class Modules is temporarily saved internally
within IDE when the Control or Event is changed, a different Module is selected, a Module is Opened
 from Menu <I>Module File/Open</I>,
'Run' or 'Temp Run' is requested from Menu<I>Generate Program</I> or Tool bar or the Code Editor
is closed. Module code is not associated with events. An event that has actual control code will be 
flagged in the event combo
box with an asterisk. If code is subsequently removed, so is the asterisk.
Events without code are not written to the project file or EXW or EW file.
If the event is desired in these files, code a comment. When an event is
first presented, a blank line with the cursor, will be inserted after 'procedure......'.
Re-selection of the event code will show the cursor positioned at the first
line 'procedure ......'.
<P>New code for control-event pairs will present
a suggested procedure name and final statement. 
These may be modified in
any way desired except removal.
<P>Code for Modules is not temporarily saved. It
is saved via the Code Editor Menus <I>Module File/Save or SaveAs</I> selection or when switching to a Control or Event 
selection. <B>NOTE:
if a module has an associated PRJ file, modifying the module will not alter
the PRJ file. This may present problems when reloading the PRJ file for
modifications. A program written by Martin Stachon may facilitate reloading
and may be found on Euphoria's Recent Contributions Page</B>.
<P>Menu <I>Options/When SaveAs Module</I> allows adding SaveAs Module file name to Manage Include Statements and Code Editor's Module Combo or asking first. 
<P>There is a special event, "(Begin/Version)", that may
be used to add comments and/or code prior to all include statements. It
acts like "(General)" event. This event is only available for Window class.
<UL>
<P>Credits:
<LI> "Version" was suggested by Dan Moyer to encourage the use of Version information and the idea modified by Virtual B.
</UL>
<P>There is a special event, "(Intro)", that may
be used to add comments and/or code prior to the createEx statements. It acts like "(General)"
event. This event is only available for Window class.
<P>There is a special event, "(Final)", which allows you to supply coding
AFTER all controls normal event processing. This event is only available
for Window class. This event shows right before the normal WinMain(.....)
statement in the output EXW or at program end if a .EW program.
<P>NOTE: You may supply a WinMain(.....) statement in the "(Final)" event,
in which case IDE does not write the usual WinMain(...) statement. This
allows the EXW to begun execution, do some processing and then start Windows
via WinMain or use EuCom.
<P>You may select by Class those events you wish to see in the Event dropdown. Select Menu <I>Options/
Taylor Events To Control Class</I> and a window will open where you can uncheck by Class the
events you do not wish to use. Note: if you already have coding in any window of your project that
uses the event you are unchecking, you will be prevented, and the event will be re-checked.
<P>If the Eu community will help me develop standard defaults, I can prep the defaults file.
<UL>
<P>Credits:
<LI> Aku requested tayloring event list to those allowable per control Class.
</UL>
<P>Menu <I>Search/Find/Replace</I> (F3,F4) allows searching
for specified text. Searching begins at the line where the cursor is, either
Up or Down as indicated. 'Find' may also be used to locate Control_Event or Project Find Word strings. 
For
 these versions of 'Find', a list box contains the Control-Event or modules containing the Find Word string.
 Selecting one of these transfers the Class Module or module coding to editor.
<P>Menu <I>Search/Go to line....</I> will jump to the indicated
line in editor. If indicated line is beyond the range of data, a warning message will result. Go to 
value zero will be ignored.
<P>Menu <I>Edit/Undo</I> will reverse the last action. 
<P><U>Keyboard Support:</U>
<BR>The usual keyboard keys work with the Code Window.
Ctrl-Home and Ctrl-End go to the top and bottom of the code. Arrow keys
move left, right, up and down. Shift-arrow extends highlighting when selecting
text. Page Up and Page Down keys move the editing window up a page and
down a page. Backspace removes text. Tab indents 1 line. Ctrl+B will shift multiple selected lines.
Ctrl+X, Ctrl+C, Ctrl+V and Ctrl+Z may be used as hot keys for 'cut', 'copy',
'paste' and 'UnDo', respectively. Ctrl+D will add comments to line or selected
lines. If the selected line or lines already has comments then they are removed when Ctrl+D is pressed. Ctrl+A will select all lines.
<P>Enhanced keyboard support is provided via F-keys and Shift+F-keys. The key and inserted text must be registered
 prior to using. See Menu <I>Options/Register Hot Keys</I>.
F1, F5, F6 and F12 are reserved for other IDE usage. One use for this feature is for those of you whos keyboards
 do not easily support some of the brackets and parenthesis used by Euphoria language. Another use might be 
often used code. 
Multiple HotKey files are allowed. 
 You can create new hot key files within Register Hot Keys and switch back and forth between them. Note that when switching Code Editor
 only knows about text for the currently loaded file. In other words you can not use a F-key from one file and
 others from another but switching does not affect any code already inserted into Code Editor.
The default hot key file is used when Code Editor opens, however, you may indicate a different hot key file be
 used.
<P>F1 when pressed while cursor is within an Euphoria
or Win32lib keyword will bring up associated Htm for that keyword.
<BR>Starting with Win32lib v58.05, the first time you, during an IDE session, presses F1 on a keyword, a short delay
 will occur while IDE builds a cross reference table of keyword and win32lib's htm link.
<UL>
<P>Credits:
<LI>Hot Key support was suggested by Roland Stowasser.
<LI>Editor enhancements by Martin Stachon, Brian Broker and CoJaBo.
<LI>Code for wheelmouse scrolling by Tommy Carlier.
</UL>
<p><U>Mouse Support:</U>
<BR>The mouse may be used to select text
and position the scrollbars.
<P><U>Locate Ex.Err Statement</U>
<BR>When at all possible, IDE tries to show the procedure
generating the ex.err statement in Code Editor. It can not do this when
the error is a "create" statement. If the error is associated with a control
'create' statement IDE will change Properties to that control. When the
error is in "(General)" or "(Control General)" event, the entire event is displayed even if the
error is in a procedure or function you wrote within the "(General)" or "(Control General)"
event. This is also true for "(Begin/Version)", "(Intro)" and "(Final)" events. If the ex.err refers to an include module, IDE will attempt to locate
the error in that module, if the module may be opened and read.
<P><U>Hints</U>
<BR>When keying an Euphoria, Win32lib or module (added
to project) global routine, IDE will supply a hint under the Menus. The hint will appear 
as soon as the routine name is completely entered
and the following parenthesis keyed. The parenthesis must immediately follow
the routine without intervening spaces. As parameters of the routine are
keyed, the Hint will jump to the next parameter in its list. When the closing
parenthesis is keyed the Hint will be removed. Clicking in the body of
Code Editor will also remove the Hint. The Hint may be moved by clicking on the black 'handle' and dragging.
Hint will width resize as Editor resizes unless you have previously moved it. When the Hint contains a long list of variables, up and down arrows may
be used to scroll or the Hint may be resized.
<P>You may select to disable Hints. However, this
may be temporarily over ridden if Ctrl+space is pressed. Ctrl+space will also reshow a deleted Hint if Ctrl+space is
pressed while cursor is in keyword or after the opening parenthesis.
<P>You may select Hints to appear in Status Bar
instead of in body of editor.
<P><U>Known Problem</U>
<BR>Sometimes after
ex.err, the error statement is not located properly with the editor.
</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

 <HR ALIGN=LEFT WIDTH="100%">
<P><B><FONT COLOR="green" size=+1>
<A NAME="Using_Include_Modules"></A>Using Include Modules</FONT></B>
<BLOCKQUOTE><FONT SIZE=3 color="black">
An Include Module is a module with controls. You write code for an include module exactly
as you would for any window in your project.
<P>You indicate prior to Menu <I>Project/SaveAs</I> which file type to use; EXW or EW.
This selection is saved in the generated PRJ file. An existing PRJ file
that you created while selecting .EW output file type is considered an
Include Module.
<P>In addition, Menu <I>Generate Tools\Program Information</I>
allows electing to include the statements 'Include Win32Lib.ew' and 'without
warning' in the EW output file. The default is EXW extension and to include
the statements. These are reset to defaults when Menu <I>Project/New</I> is selected. You may elect to suppress 'include Win32lib.ew' in
an include file. You may specify the name to use instead of 'Win32lib.ew'
for both include files or .exw files. These selections are saved in PRJ
file.
<P>Normally 'include Win32Lib.ew' would be used when
Menu <I>Generate Program/Temporary Run</I> to check for errors. If the statement is not desired in the
EW file after checking for errors, simply uncheck the item and select
'Save' from the Project Menu. If Window1 has been assigned a parent
that is not known, the generated EW file will fail when Menu Generate Program.
</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>
</BLOCKQUOTE></FONT>

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+2 color="teal"><B><A NAME="The Prj File"></A> The Project File </B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">	
<P>Associated with the Design Window is a project file which is used to
reload the Design Window. When closing IDE with unsaved 
changes, there is a query to Save(As) a project file. You supply
the name of the file and its path from a dialog box. The project file is
also written when 'run' is selected from Menu <I>Generate Program</I> unless you indicate
that a temporary EXW file be generated. An EXW file is also created or
an EW file if the module is an Include Module. IDE
and the output EXW from Menu <I>Generate Program/Run</I> may both be concurrently working. In other words 
the taskbar or titlebar of each window may be
used to swap back and forth between them. Code Editor may be re-opened,
however it will jump in front of both IDE and the EXW window. Changes made
in IDE in this mode will not affect the currently executing EXW.
<UL>
	<P>Credits:
	<LI>Process control module was provided by Tone Skoda.
	<LI>Method to determine file processing name by Wolf Fritz.
</UL></BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+2 color="teal"><B><A NAME="Translations"></A> Messages and Translations </B></FONT>
<BLOCKQUOTE><FONT SIZE=3 color="black">	
<P><B>IDE messages</B> are centrally located in Languages sub folder in the English.lng file by default. 
<B>Translations</B>,
contributed by IDE users may be found on the IDE page for other languages.
Place the unzipped language file in Languages sub folder without removing English.lng file. Other language 
translations are welcome.
<UL>
<P>Credits:
<LI>IDE_MsgCzech.zip by Martin Stachon, Mira Balikova. <B>Czech is no longer being maintained</B>
<LI>IDE_MsgGerman.zip by Roland Stowasser.
<LI>There is a Spanish translation on Euphoria site's Recent Contributions Page.
</UL>
</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR ALIGN=LEFT WIDTH="100%">
<P><B><I><FONT COLOR="teal" size=+2>
<A NAME="EXW_file"></A>Creating an EXW file</FONT></I></B>
<BLOCKQUOTE><FONT SIZE=3 color="black">You may re-order most controls prior
to running the EXW. Select Menu <I>Generate Tools/Change Control Order For Program</I>
or use Properties 'Control Order' for this option. The initial order of
the controls in the list box is the y, x order unless you have previously
re-ordered the controls. Controls within a container are offset by '&lt;'s
but may not necessarily be directly under the parent if another control's
y, x are between them. Changing the EXW reorder does not change the order
in Code Editor Controls combo, Design, Properties or Project View. Changing the control order does
not change the parent of a control. IDE can not change Windows(tm) tabbing behavior.
If you could not tab to a control, e.g. Group, using Control Order will
not force that to happen.
<P>You may add and order the 'include' statements
within the EXW. Use Menu <I>Generate Tools/Manage Include Statements</I> for this
option.
<P>Text may be associated with the include module in <I>Generate Tools/Manage Include
Statements</I>. This will allow you to add something such as 'as XXX' or a comment.
To add the appended text, or view previously added text, click the module
name in Manage Include Statements and enter the text in the edit box above.
<P>You may indicate that 'global constant <I>Name</I>
= create ....' statements not have the word global by checking 'local' in Properties
or changing the default to local in Menu <I>Options/Configure IDE</I>.
<P>You may indicate to use integer instead of constant
in create statements with Properties attribute Create With.
<P>You may indicate that an EW instead of EXW generated program be created, an optional Win32lib.ew be used,
in <I>Generate Tools/Program Information</I>. 
<P>Also available in <I>Program Information</I> are fields for Author, Title, Version, Date, Required Win32lib 
Version,
Comment and Description which is passed to the generated program if supplied. Comment and Description are
 supplied as comment lines and the others as constants so you may refer to them in your program. You may also
 specify Command Line data to attach to the generated exw.
<P>Select Menu <I>Generate Program/Run</I> to produce the EXW or EW file.
You may elect to direct the generated EXW to a temporary file. If there
are ex.err errors IDE attempts to find the location if in a procedure from Code Editor 
or within the Properties for a particular control.
If the ex.err refers to a module IDE will show the error code in that module
if the module can be opened and read.
<P>You may elect to create a temporary file instead
of the normal project PRJ and EXW files. When electing to use this version
of Menu <I>Generate Program</I>, a temporary PRJ file is not created and the existing PRJ file
is not modified. You may indicate what to do with the temporary EXW file
under Menu <I>Generate Program/Temporary Run Project/Include/Rules</I> and select the run from
Menu <I>Generate program/Temporary Run/Run</I> or from a menu item in Rules. The file name
will be <I>project name</I> _TEMP.exw or unidentified_TEMP.exw, if the
project has not yet been saved. If the file is an Include Module, .EW will
be the extension instead of .EXW. The temporary file, if you elect to
keep it, is in the project's folder or in IDE's folder if unidentified_TEMP.exw.
<P>The Temporary Run Rules may be saved in IDE.cfg with configuration choices.
<P>When you request Menu <I>Generate Program</I> and has not previously
saved his project, a temporary run is forced. The GetOpenFile Dialog will
not be presented unless the Temporary Run Rules require it.
<P>While the generated exw is running, IDE is minimized by default. You always may restore IDE from
 taskbar during this time. If you never wants IDE to minimize during Menu Run or Menu Temp Run there is a configuration item which will
 prevent the default behavior.
<P> While viewing generated EXW file, you may return to IDE to make changes. These changes
do not take effect in the currently running EXW.
<UL>
<P>Credits 
<LI>Interactive processing was contributed by Tone Skoda.
<LI>Determining file processing name was contributed by Wolf Fritz.
<LI>Author, Title, Version, Date, Required Win32lib.ew Version were suggested by Dan Moyer.
</UL>
</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+2 color="teal"><B><A NAME="References"></A>References</B></FONT>
<P><BLOCKQUOTE><B><I><FONT COLOR="green" size=+2></B></I>

<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+2 color="teal"><B><A NAME="Tool Box Icons"></A>Tool Box Icons</B></FONT>
<P><BLOCKQUOTE><B><I><FONT COLOR="green" size=+1>
<A NAME="Control_Icons">The Control Icons:</FONT></I></B>
<P><FONT SIZE=3 color="black">The following icons are represented in the Tool Box. 
<BR>Click the control class in the list below to obtain further information.</FONT>
<P>
<A NAME="List"></A>
<TABLE BORDER COLS=3 WIDTH="88%" >
<!--Define column headings-->
<TR>
<TD><CENTER><FONT color="green" size=+1><B>Control</B></FONT></CENTER></TD>
<TD><CENTER><FONT color="green" size=+1><B>Default Class</B></FONT></CENTER></TD>
<TD><CENTER><FONT color="green" size=+1><B>Other Classes</B></FONT></CENTER></TD>
</TR>
<!--Table below-->
<TR>
<TD><A HREF="#bitmap control">Bitmap *</A></TD>
<TD>Bitmap</TD>
<TD>Pixmap</TD>
</TR>

<TR>
<TD><A HREF="#icon control">Icon/Image</A></TD>
<TD>Icon</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#static control">Static Text *</A></TD>
<TD>LText</TD>
<TD>CText, RText</TD>
</TR>

<TR>
<TD><A HREF="#edit control"> Edit Text</A></TD>
<TD>EditText</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#labeledit control">Edit Text with Label</A></TD>
<TD>LabelEdit</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#mle control">Mle Text</A></TD>
<TD>MleText</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#rich control">Rich Edit</A></TD>
<TD>RichEdit</TD>
<TD>&nbsp;</TD>
</TR>


<TR>
<TD><A HREF="#menu control">Menu</A></TD>
<TD>Menu</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#popup control">PopUp</A></TD>
<TD>PopUp</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#group control">Frame</A></TD>
<TD>Group</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#button control">Push Button *</A></TD>
<TD>PushButton</TD>
<TD>PictureButton, TogglePicture, ToggleButton, DefPushButton</TD>
</TR>

<TR>
<TD><A HREF="#radio control">Radio Button</A></TD>
<TD>Radio</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#check control">Check Box *</A></TD>
<TD>CheckBox</TD>
<TD>TriCheckBox</TD>
</TR>

<TR>
<TD><A HREF="#combo control">Combo Box *</A></TD>
<TD>Combo</TD>
<TD>SortedCombo, SimpleCombo, ComboBoxEx</TD>
</TR>

<TR>
<TD><A HREF="#list control">List *</A></TD>
<TD>List</TD>
<TD>SortedList, DropDownList</TD>
</TR>

<TR>
<TD><A HREF="#hscroll control">Horizontal Scrollbar *</A></TD>
<TD>HScroll</TD>
<TD>HTrackBar</TD>
</TR>

<TR>
<TD><A HREF="#vscroll control">Vertical Scrollbar *</A></TD>
<TD>VScroll</TD>
<TD>VTrackBar, Mle</TD>
</TR>

<TR>
<TD><A HREF="#progress control">Progress Bar</A></TD>
<TD>ProgressBar</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#updown control">Up/Down</A></TD>
<TD>UpDown</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#tabc control">Page Control</A></TD>
<TD>TabControl</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#tabitem control">Tab Item</A></TD>
<TD>TabItem</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#calendar">Calendar</A></TD>
<TD>MonthCalendar</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#tree control">Tree View</A></TD>
<TD>TreeView</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#listview control">List View</A></TD>
<TD>ListView</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#toolbar control">Tool Bar</A></TD>
<TD>ToolBar</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#Tool spacer control">Tool Bar Spacer</A></TD>
<TD>n/a</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#statusbar control">Status Bar</A></TD>
<TD>StatusBar</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#table control">Table</A></TD>
<TD>Table Pseudo control</TD>
<TD>&nbsp;</TD>
</TR>


<TR>
<TD><A HREF="#Flat Tool Bar">Flat Tool Bar</A></TD>
<TD>FlatTool Bar</TD>
<TD>&nbsp;</TD>
</TR>


<TR>
<TD><A HREF="#Flat Tool Bar Spacer">Separator Button</A></TD>
<TD>SepButton for FlatToolBar</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#ReBar">ReBar</A></TD>
<TD>ReBar</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#ReBarBand">ReBar Band</A></TD>
<TD>ReBarBand</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#Timer">Timer</A></TD>
<TD>Timer</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#child control">Child Window</A></TD>
<TD>CWindow</TD>
<TD>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#EuGrid">EuGrid</TD>
<TD>EuGrid</TD>
<TD>&nbsp;</TD>
</TR>

</TABLE>
<P><FONT SIZE=3 color="black">
* To select a class that is not the default (
for example, CText), use Properties 'Class' once the control has been added to
Design Window.
<P>Menu, PopUp and Timer when selected transfer to
their respective editors. </FONT>
</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR ALIGN=LEFT WIDTH="100%">
<P><B><I><FONT COLOR="teal" size=+2>
<A NAME="Properties_attributes"></A>Properties List</FONT></I></B></FONT>
<P>Properties displays the following attributes for
controls other than Menu, PopUp or Timer: 
<TABLE BORDER COLS=2 WIDTH="88%" >
<!--Define column headings-->
<TR>
<TD><CENTER><FONT color="green" size=+1><B>Label</B></FONT></CENTER></TD>
<TD><CENTER><FONT color="green" size=+1><B>Meaning</B></FONT></CENTER></TD>
</TR>
<!--Table below-->
<TR>
<TD>Control DropDown</TD>
<TD>Contains a list of all controls in a Window with the exception of Menu,
Popup, Timer and their subs.</TD>
</TR>

<TR>                              
<TD>Name</TD>
<TD>The identifier given to the control by Win32lib</TD>
</TR>

<TR>
<TD>Class *</TD>
<TD>Type of control. Has a drop down list if there are associated classes.</TD>
</TR>

<TR>
<TD>&nbsp; Color Button</TD>
<TD>Check to allow button to be colored.
<TD>There might be cases where you do not want the button to initially have color but later on
you will assign color. 
<TD>
</TR>

<TR>
<TD>Caption**</TD>
<TD>Title displayed in the control. If longer than the control width it
is truncated when drawn (except for LabelEdit).
<BR>For LabelEdit control, this is the label caption.</TD>
</TR>

<TR>
<TD>Caption on Left</TD>
<TD>Title displayed on left or right.
<BR>For LabelEdit control only.</TD>
</TR>

<TR>
<TD>Position Caption</TD>
<TD>Allows you to position PushButton, ToggleButton, DefPushButton and CancelButton Caption 
left justified, centered or right justified.</TD>
</TR>

<TR>
<TD>Data</TD>
<TD>For LabelEdit control, this is the initial EditText data.</TD>
</TR>

<TR>
<TD>&nbsp; Show in EXW</TD>
<TD>If False the Caption does not show in the output EXW.
<BR>For LabelEdit control, if False, this will not show Data in the output EXW but label Caption will show.
</TD>
</TR>

<TR>
<TD>Title Widths</TD>
<TD>ListView column widths. Non editable.</TD>
</TR>

<TR>
<TD>Col</TD>
<TD>X coordinate of control in window. If WINDOW class the default value
is 'Default'. Any numeric, including zero, may be entered. When negative,
controls is considered Off Screen and will only show on Off Screen Window
accessed by right click in Design</TD>
</TR>

<TR>
<TD>Row</TD>
<TD>Y coordinate of control in window. If WINDOW class the default value
is 'Default'. Any positive numeric, including zero, may be entered.</TD>
</TR>

<TR>
<TD>Width</TD>
<TD>Width (cx) of control&nbsp;</TD>
</TR>

<TR>
<TD>Height</TD>
<TD>Height (cy) of control&nbsp;</TD>
</TR>


<TR>
<TD>Alternate Positions</TD>
<TD>Click This property to obtain alternate Row, Col, Width and Height. Note that these
 properties are not actually used in IDE for positioning and only apply to the output EXW.
 They might be used for percentage values or for variables previously defined.&nbsp;</TD>
</TR>

<TR>
<TD>  Row</TD>
<TD>Enter whatever you wish to override the normal Row value and establish Y coordinate in EXW output of control. IDE does not edit this property.&nbsp;</TD>
</TR>

<TR>
<TD>  Col</TD>
<TD>Enter whatever you wish to override the normal Col value and establish X coordinate in EXW output of control. IDE does not edit this property.&nbsp;</TD>
</TR>

<TR>
<TD>  Width</TD>
<TD>Enter whatever you wish to override the normal Width value and establish CX coordinate in EXW output of control. IDE does not edit this property.&nbsp;</TD>
</TR>

<TR>
<TD>  Height</TD>
<TD>Enter whatever you wish to override the normal Height value and establish CY coordinate in EXW output of control. IDE does not edit this property.&nbsp;</TD>
</TR>

<TR>
<TD>Row Height</TD>
<TD>Height of a ToolBar and FlatToolBar 'row'. Bar Height will be multiple of this value.&nbsp;</TD>
</TR>

<TR>
<TD>Layer</TD>
<TD>DropDown List of Layer Captions to which control may be assigned. Not shown for Window class control.&nbsp;</TD>
</TR>


<TR>
<TD>Table Specs</TD>
<TD>Button to access Table Control Table Specs Window. Will only work after a control has been added to Table Control.
</TD>
</TR>

<TR>
<TD>setLayerOK</TD>
<TD>Toggles True/False whether or not control can use setLayerVisible and setLayerEnable</TD>
</TR>

<TR>
<TD>Comment/Code</TD>
<TD>Enter whatever you wish as a comment( enter -- ) or a one line of code to preceed the control in EXW output. IDE does not edit this property.&nbsp;</TD>
</TR>

<TR>
<TD>SysTray</TD>
<TD>Check this property to indicate Window should show in Window Task Bar and be transferred to a window to enter supplemental data.Also accessible via Menu Edit.
You must have systray.ew on your system in Euphoria\include, your EuInc folder or project folder.&nbsp;</TD>
</TR>

<TR>
<TD>Use In WinMain</TD>
<TD>Checked for window that is used in WinMain statement. First window in project is the default.</TD>
</TR>

<TR>
<TD>WinMainOpen</TD>
<TD>select Normal, Minimize or Maximize from drop down list. For first
Window in project.</TD>
</TR>

<TR>
<TD>Cursor At</TD>
<TD>Allows you to indicate the control to receive cursor via WinMain statement.
 For First Window in project.</TD>
</TR>

<TR>
<TD>Win Position</TD>
<TD>select an initial position for a Window in project from 9 commonly
used positions. Selecting None will remove a prior selection.</TD>
</TR>

<TR>
<TD>Reduce by TaskBar</TD>
<TD>Companion property to Win Position. When selecting Center or Bottom Win Position choices, this Property indicates that
 the available Screen area be reduced by the Task Bar such that output EXW will not cover it.&nbsp;</TD>
</TR>

<TR>
<TD>Control Order</TD>
<TD>EXW control order. Not offered for Window, ToolBar, StatusBar, Menu
and Popup Classes. Key into attribute or right click for transfer to Change
Control Order Modal Window.</TD>
</TR>

<TR>
<TD>&lt;LIST></TD>
<TD>DropDownList of initial values for List/Combo controls. Right click
for transfer to Initial Values Modal Window.</TD>
</TR>

<TR>
<TD>Default Indexes</TD>
<TD>Allows pre-selection of List indexes. Enter 1 for the first index. Enter 1,3,5 for the first, third and fifth item. Enter All (Case does not matter) to select all indexes. 0 will be treated as no selection. &nbsp;</TD>
</TR>

<TR>
<TD>Create With</TD>
<TD>Determines whether control statement uses 'constant' create or 'integer'.
Select from constant/integer.</TD>
</TR>

<TR>
<TD>Local</TD>
<TD>Select flag True if EXW create statement is to eliminate 'global'.
Toggle On and Off</TD>
</TR>

<TR>
<TD>Ex Style</TD>
<TD>Is used for providing Extended Flags when create. Default value is
zero.</TD>
</TR>

<TR>
<TD>Extended Style</TD>
<TD>ListView Extended styles. Non editable.</TD>
</TR>

<TR>
<TD>Partners</TD>
<TD>Partner controls are controls associated to the selected control and acts in tandem to 
selected control when selected control moves.</TD>
</TR>

<TR>
<TD>Parent</TD>
<TD>Parent of control (Group, Table, Status Bar, Tool Bar, Tab Control, Tab Item or CWindow). Non editable except for Window Class and controls on layers 1-n. You may edit secondary Windows from drop down list of valid parents.
When Window is for an .EW program, the primary window may be edited to any Window name, within the current PRJ or not.
To make this work you must select from 'File Information' under <i>Generate Tools\Program Information</I> and indicate .EW file type,
at which time the 'parent' property is opened for input. Returning to .EXW file type will automatically remove the primary parent.
<P>When control is in layers other than layer 0, Parent contains a combo you may select an appropriate control as parent. Entries in the combo are
 selected from layer 0, or active layer and the Window.
</TD>
</TR>

<TR>
<TD>&nbsp;Maint by user</TD>
<TD>This cell is checked when user has assigned a new parent. Normal re-parenting rules are
suspended when checked and control is moved. User may uncheck for IDE to
re-establish parenting.</TD>
</TR>

<TR>
<TD>Style (if Class is Window, CWindow)</TD>
<TD>Attribute indicating the style for window. If more than one, separate
with comma. From Right Click you may select Style and ExStyle from various
window styles shown in another window. The Style, exStyle and classDefault
may be viewed by clicking Generate button and passed back to Properties
when OK button is clicked.
<P>Note if you remove WS_CHILD from CWindow you will need to position CWindow in parent
Window yourself and also position when moving the parent Window, </TD>
</TR>

<TR>
<TD>Style Type (if Class is Window,CWindow)</TD>
<TD>Indicates how style param is to be formatted. Has a drop down list. If Style Type ... is 
selected and you have Styles separated by commas, you will get an exErr.</TD>
</TR>

<TR>
<TD>ClassDefaults</TD>
<TD>Used by Window Styles Explorer and Child Window. You may also indicate style changes
in this property, particularily if the Child Window has removed a style that the next window needs.</TD>
</TR>

<TR>
<TD>CCWinStyle</TD>
<TD>Generates classDefaults statement for CCwinstyle param only. Currently
used by Visual Styles Explorer.</TD>
</TR>

<TR>
<TD>Visible</TD>
<TD>Toggle On or Off if control is visible.</TD>
</TR>

<TR>
<TD>Enabled</TD>
<TD>Toggle On and Off if control is enabled.</TD>
</TR>

<TR>
<TD>Limit Text</TD>
<TD>Number of characters to limit a text field.</TD>
</TR>

<TR>
<TD>Min Value****</TD>
<TD>Minimum Scroll Value for UpDown, Scroll, Track and Progress bar controls.</TD>
</TR>

<TR>
<TD>Max Value****</TD>
<TD>Maximum Scroll Value for UpDown, Scroll, Track and Progress bar controls.</TD>
</TR>

<TR>
<TD>Line Change</TD>
<TD>Small Scroll Change for Scroll and Track bar controls.</TD>
</TR>

<TR>
<TD>Page Change</TD>
<TD>Large Scroll Change for Scroll and Track bar controls.</TD>
</TR>

<TR>
<TD>Suppress Cell</TD>
<TD>This cell in a Table Control, while showing in Design, is not passed to the generated EXW.</TD>
</TR>

<TR>
<TD>Styles</TD>
<TD>This attributes works like TreeView, Click to expand and contract to view various control styles below:.
</TR>

<TR>
<TD>&nbsp; Upper Case</TD>
<TD>Toggle On and Off. For edit controls.</TD>
</TR>

<TR>
<TD>&nbsp; Lower Case</TD>
<TD>Toggle On and Off. For edit controls.</TD>
</TR>

<TR>
<TD>&nbsp; Read Only</TD>
<TD>Toggle On and Off. For edit controls.</TD>
</TR>

<TR>
<TD>&nbsp; Password Char</TD>
<TD>Toggle On and Off. For edit controls.&nbsp;</TD>
</TR>

<TR>
<TD>&nbsp; Numeric</TD>
<TD>Toggle On and Off.For edit controls.</TD>
</TR>

<TR>
<TD>&nbsp; MultiLine</TD>
<TD>Toggle On and Off. For PushButton, ToggleButton, CheckBox and Radio.
If Tab<i>Control</i>is selected, toggle On and Off if Tab<i>Control</i> is to show all TabItem captions.&nbsp;</TD>
</TR></TD>
</TR>

<TR>
<TD>&nbsp; Checked</TD>
<TD>Toggle On and Off. For CheckBox and Radio control.</TD>
</TR>

<TR>
<TD>&nbsp; H Scroll</TD>
<TD>Toggle On and Off for RichEdit and MleText control.&nbsp;</TD>
</TR>

<TR>
<TD>&nbsp; Multiple Sel</TD>
<TD>Add LBS_MULTIPLESEL to List Control Style if checked. Toggle On and Off.</TD>
</TR>

<TR>
<TD>&nbsp; Extend Sel</TD>
<TD>Add LBS_EXTENDEDSEL to List Control Style if checked. Toggle On and Off.</TD>
</TR>

<TR>
<TD>&nbsp; RBBS_BREAK</TD>
<TD>Toggle On and Off if add to ReBarBand. Default is Checked.</TD>
</TR>

<TR>
<TD>&nbsp; Clickable</TD>
<TD>Toggle On and Off if add to xText. Default is unchecked.</TD>
</TR>

<TR>
<TD>&nbsp; Flat</TD>
<TD>Toggle On and Off if PushButton is to have BS_FLAT appearance.&nbsp;</TD>
</TR>

<TR>
<TD>&nbsp; Align to Left of Buddy</TD>
<TD>Toggle on and off to show UpDown control at left or right of Buddy.This param is automatically added
to Other Styles for UpDown control.&nbsp;</TD>
</TR>

<TR>
<TD>&nbsp; Show Horizontal</TD>
<TD>Toggle on and off to show UpDown control horizontally. This param is automatically added
to Other Styles for UpDown control.&nbsp;</TD>
</TR>

<TR>
<TD>&nbsp; Buddy [Name]</TD>
<TD>Name of Buddy control associated with UpDown Control.</TD>
</TR>

<TR>
<TD>&nbsp; Add To Bottom</TD>
<TD>List View Rows are build from top to bottom in the order added.</TD>
</TR>

<TR>
<TD>&nbsp; Show Tabs at Bottom</TD>
<TD>Tab<i>Control</i> must be selected. Toggle On and Off if Tab<i>Control</i> is to show TabItem captions below the TabControl body.&nbsp;</TD>
</TR>

<TR>
<TD>&nbsp; Smooth</TD>
<TD>Toggle On and Off if ProgressBar is to have PBS_SMOOTH.&nbsp;</TD>
</TR>

<TR>
<TD>&nbsp; MultiSelect</TD>
<TD>Toggle On and Off if MonthCalendar is to have MCS_MULTISELECT.&nbsp;</TD>
</TR>

<TR>
<TD>&nbsp; No Integral Height</TD>
<TD>Toggle On and Off if List or SortedList is to have LBS_NOINTEGRALHEIGHT.
Check this if the generated exw shows the List control shorter than you indicated.&nbsp;</TD>
</TR>

<TR>
<TD>&nbsp; Other Flags</TD>
<TD>Attribute indicating extra flags not yet supplied above. If more than
one separate with comma.</TD>
</TR>

<TR>
<TD>Style Type (for controls not Window or CWindow class)</TD>
<TD>Indicates how style param is to be formatted. Has a drop down list.</TD>
</TR>

<TR>
<TD>Color</TD>
<TD>setWindowbackColor in RGB. Enter value directly or click Button. 
Presently value 0 for controls other than Window indicates the system BTNFACE color and 
not the color Black. For EuGrid control, 0 is default color. If you
want a control to be Black, try entering -2 or some other negative number.
Suppress drawing window
and controls with color by unchecking Menu Item Options/Draw window and
controls with color</TD>
</TR>

<TR>
<TD>System Color</TD>
<TD>Select from drop down list of all COLOR_ defined within Win32lib. When selected, the choice will generate
getSysColor(COLOR_choice) statements in the exw. The selection's color value will be placed in Color.
When the getSysColor(COLOR_choice) is 0,
the selection will be treated as Black in the exw. Item "User Color" is not selectable and indicates
that you manually keyed into Color or used the get color dialog.</TD>
</TR>

<TR>
<TD>Tick Bar Color</TD>
<TD>Progress Bar Tick Color (moving bar) in RGB. Enter value directly or click Button. 
Presently value 0 indicates the system default color and not the color Black. If you
want a control to be Black, try entering -2 or some other negative number.
Suppress drawing window
and controls with color by unchecking Menu Item Options/Draw window and
controls with color</TD>
</TR>

<TR>
<TD>Month Calendar Colors:</TD>
<TD>MC_Background</TD>
<TD>MC_Text</TD>
<TD>MC_TitleBK</TD>
<TD>MC_TitleText</TD>
<TD>MC_MonthBK</TD>
<TD>MC_TrailingText</TD>
</TR>

<TR>
<TD>Icon FileName</TD>
<TD>setIcon file name. Enter file name or click BUTTON to
select from Open Dialog. For Window and Icon Classes only except when adding
Default ico File Name for FlatToolBar button. Pressing F1 will show the
icon. Suppress drawing controls with ico by unchecking MenuItem Options/Draw
controls with bitmap and ico.</TD>
</TR>

<TR>
<TD>Icon FileNames</TD>
<TD>ListView Ico File Names. Shows drop down list of ico files. Non Editable. Right click to transfer to Visual ListView Explorer window.</TD>
</TR>

<TR>
<TD>Hot Icon FName</TD>
<TD>Enter file name or click BUTTON for Open Dialog to select hot ico file for FlatToolBar
button. Pressing F2 will show this ico. Suppress drawing controls with
ico by unchecking MenuItem Options/Draw controls with bitmap and ico.</TD>
</TR>

<TR>
<TD>Dis Icon FName</TD>
<TD>Enter file name or click BUTTON for Open Dialog to select disable ico file for
FlatToolBar button. Pressing F3 will show this ico. Suppress drawing controls
with ico by unchecking MenuItem Options/Draw controls with bitmap and ico.</TD>
</TR>

<TR>
<TD>Bitmap FileName</TD>
<TD>Enter file name or  click BUTTON to select from Open Dialog. For Bitmap, TogglePicture and PictureButton
Classes only. Suppress drawing controls with ico by unchecking MenuItem
Options/Draw controls with bitmap and ico.</TD>
</TR>

<TR>
<TD>XPMmer XPM</TD>
<TD>Click to transfer to XPMmer Icon Editor</TD>
</TR>

<TR>
<TD>&nbsp; Object</TD>
<TD>If icon was passed from XPMmer Icon Editor to Properties, this cell will hold the name of the
control with a suffix _xpm, for example, PictureButton2_xpm. This cell may be erased but
any other editing is ignored. Right click to copy this icon to XPMmer Disable Object. </TD>
</TR>

<TR>
<TD>XPMmer Disable XPM</TD>
<TD>Click to transfer to XPMmer Icon Editor</TD>
</TR>

<TR>
<TD>&nbsp; Object</TD>
<TD>If icon was passed from XPMmer Icon Editor to Properties, this cell will hold the name of the
control with a suffix D_xpm, for example, PictureButton2D_xpm. This cell may be erased but
any other editing is ignored. Right click to copy this icon to XPMmer Object. This Property when used, is setVisible false when the generated exw opens. 
When you need to switch the enabled and disabled icons use setVisible statements. </TD>
</TR>

<TR>
<TD>XPM FileName</TD>
<TD>xpm file name or emulated xpm include file name. Enter file name or  click BUTTON to select from Open Dialog. For Toggle Picture and Picture Button
Classes only. Suppress drawing controls with ico by unchecking MenuItem
Options/Draw controls with bitmap and ico.</TD>
</TR>

<TR>
<TD>&nbsp; XPM Member</TD>
<TD>when XPM FileName is an include file, enter the member name of the
emulated xpm.</TD>
</TR>

<TR>
<TD>Hint Text</TD>
<TD>Text for Hint. Note: Win32lib does not show separate hints for Tab Items.
Not for ReBarBand control.</TD>
</TR>

<TR>
<TD>&nbsp; --as var</TD>
<TD>A variable name may be entered for Hint Text. The variable, a sequence, must be defined and assigned value somewhere
in a Code Editor event (Intro is suggested).</TD>
</TR>

<TR>
<TD>Hint Font</TD>
<TD>properties for Hint Font follow</TD>
</TR>

<TR>
<TD>&nbsp; Open Var</TD>
<TD>Check this Property to show Hint Font variable cells and uncheck to hide.</TD>
</TR>

<TR>
<TD>&nbsp; Hint Font***</TD>
<TD>Font name for Hints. Enter file name or click BUTTON to select from
Font Dialog. For Window Class only. When you have not entered a font, this
field will be the Win32lib default. Hint Font applies to
Hints for all controls on the Window.</TD>
</TR>

<TR>
<TD>&nbsp; -- as var</TD>
<TD>A variable may be entered for Hint Font Name. The variable, a sequence, must be defined and assigned value somewhere
in a Code Editor event (Intro is suggested).</TD>
</TR>

<TR>
<TD>&nbsp; Hint Font Points</TD>
<TD>Points for Hint font above. When using Font Dialog this field is auto
filled.</TD>
</TR>

<TR>
<TD>&nbsp; -- as var</TD>
<TD>A variable may be entered for Hint Font Points. The variable, an integer, must be defined and assigned value somewhere
in a Code Editor event (Intro is suggested).</TD>
</TR>

<TR>
<TD>&nbsp; Hint Font Italic</TD>
<TD>Toggle True or False if Italic Font. When using Font Dialog and selected, this field is auto filled.</TD>
</TR>

<TR>
<TD>&nbsp; -- as var</TD>
<TD>A variable may be entered for Hint Font Italic. The variable, an integer, must be defined and assigned value of Italic somewhere
in a Code Editor event (Intro is suggested).</TD>
</TR>

<TR>
<TD>&nbsp; Hint Font Bold</TD>
<TD>Toggle True or False if Bold Font. When using Font Dialog and selected, this field is auto filled.</TD>
</TR>

<TR>
<TD>&nbsp; -- as var</TD>
<TD>A variable may be entered for Hint Font Bold. The variable, an integer, must be defined and assigned value of Bold somewhere
in a Code Editor event (Intro is suggested).</TD>
</TR>

<TR>
<TD>&nbsp; Hint Font Underline</TD>
<TD>Toggle True or False if Font Underline. When using Font Dialog and selected, this field is auto filled.</TD>
</TR>

<TR>
<TD>&nbsp; -- as var</TD>
<TD>A variable may be entered for Hint Font Underline. The variable, an integer, must be defined and assigned value of Underline somewhere
in a Code Editor event (Intro is suggested).</TD>
</TR>

<TR>
<TD>&nbsp; Hint Font Stikeout</TD>
<TD>Toggle True or False if Hint Font Stikeoutout. When using Font Dialog and selected, this field is auto filled.</TD>
</TR>

<TR>
<TD>&nbsp; -- as var</TD>
<TD>A variable may be entered for Hint Font Strike. The variable, an integer, must be defined and assigned value of Strikeout somewhere
in a Code Editor event (Intro is suggested).</TD>
</TR>

<TR>
<TD>ColoredButton:</TD>
<TD>following are properties for colored buttons</TD>
</TR>

<TR>
<TD>&nbsp; Color</TD>
<TD>Enter color to asign the button. If no color is assigned COLOR_BTNFACE will be used.</TD>
</TR>

<TR>
<TD>&nbsp; Press Color</TD>
<TD>Button color in pressed or in down state. If no color is assigned COLOR_BTNFACE will be used. If the button is 
a ToggleButton or TogglePicture a special color is used when no color is assigned.</TD>
</TR>

<TR>
<TD>&nbsp; Caption Color</TD>
<TD>Caption Color. Default is Black.</TD>
</TR>

<TR>
<TD>&nbsp; Caption Press Color</TD>
<TD>Caption Press Color is color of caption when button is pressed or in down state. Default is Black.</TD>
</TR>

<TR>
<TD>&nbsp; Border Thickness</TD>
<TD>Pixel width of border around button face. Default value is 1.</TD>
</TR>

<TR>
<TD>&nbsp; Caption Pos</TD>
<TD>Left, Right, Center or Unit positioning of caption. Unit considers caption+graphic when placing left, right or center.</TD>
</TR>

<TR>
<TD>&nbsp; Graphic Pos</TD>
<TD>Left, Right or Center positioning of graphic.</TD>
</TR>

<TR>
<TD>&nbsp; Multiline</TD>
<TD>Toggle on or off to make long Caption multiple lines; either by use of \n or space breaks.</TD>
</TR>

<TR>
<TD>&nbsp; Flat</TD>
<TD>Toggle on or off to make button have BS_FLAT appearance.</TD>
</TR>

<TR>
<TD>&nbsp; Center Caption Vertically</TD>
<TD>Toggle on or off to make caption vertically centered or at top of button.</TD>
</TR>

<TR>
<TD>Font</TD>
<TD>below are properties for Font</TD>
</TR>

<TR>
<TD>&nbsp; Open Var</TD>
<TD>Check this Property to show Font variable cells and uncheck to hide. 
Warning: When using Font Name, Font Pts or Font attributes
 as variables, Design can not draw your control with Font or warn you if your LabelEdit caption is too large.</TD>
</TR>

<TR>
<TD>&nbsp; Font***</TD>
<TD>Font name for control fonts. Enter file name or click BUTTON to
select from Font Dialog. When you have not entered a font, this field will
be the Win32lib default. Not for ReBarBand control. Apparently
Win32lib will apply font to all TabItems. If more than one TabItem has
a font specified, and they are different, the right most specified font
will be used. IDE does not try to draw this correctly. Suppress drawing
controls with font by unchecking MenuItem Options/Draw controls with Font.</TD>
</TR>

<TR>
<TD>&nbsp; -- as var</TD>
<TD>A variable may be entered for Font Name. The variable, a sequence, must be defined and assigned value somewhere
in a Code Editor event (Intro is suggested).</TD>
</TR>

<TR>
<TD>&nbsp; Font Points</TD>
<TD>Points for font above. When using Font Dialog this field is auto filled. Use Font Points to change size of MonthCalendar.</TD>
</TR>

<TR>
<TD>&nbsp; -- as var</TD>
<TD>A variable may be entered for Font Points. The variable, an integer, must be defined and assigned value somewhere
in a Code Editor event (Intro is suggested).</TD>
</TR>

<TR>
<TD>&nbsp; Font Italic</TD>
<TD>Toggle True or False if Italic Font. When using Font Dialog and selected, this field is auto filled.</TD>
</TR>

<TR>
<TD>&nbsp; -- as var</TD>
<TD>A variable may be entered for Font Italic. The variable, an integer, must be defined and assigned value of Italic somewhere
in a Code Editor event (Intro is suggested).</TD>
</TR>

<TR>
<TD>&nbsp; Font Bold</TD>
<TD>Toggle True or False if Bold Font. When using Font Dialog and selected, this field is auto filled.</TD>
</TR>

<TR>
<TD>&nbsp; -- as var</TD>
<TD>A variable may be entered for Font Bold. The variable, an integer, must be defined and assigned value of Bold somewhere
in a Code Editor event (Intro is suggested).</TD>
</TR>

<TR>
<TD>&nbsp; Font Underline</TD>
<TD>Toggle True or False if Font Underline. When using Font Dialog and selected, this field is auto filled.</TD>
</TR>

<TR>
<TD>&nbsp; -- as var</TD>
<TD>A variable may be entered for Font Underline. The variable, an integer, must be defined and assigned value of Underline somewhere
in a Code Editor event (Intro is suggested).</TD>
</TR>

<TR>
<TD>&nbsp; Font Strikeout</TD>
<TD>Toggle True or False if Font Strikeout. When using Font Dialog and selected, this field is auto filled.</TD>
</TR>

<TR>
<TD>&nbsp; -- as var</TD>
<TD>A variable may be entered for Font Strikeout. The variable, an integer, must be defined and assigned value of Strikeout somewhere
in a Code Editor event (Intro is suggested).</TD>
</TR>

<TR>
<TD>&nbsp; Font Color</TD>
<TD>For RichEdit control only. Enter RGB value. May be supplied using Font Dialog or click BUTTON for Color Dialog.</TD>
</TR>

<TR>
<TD>&nbsp; -- as var</TD>
<TD>A variable may be entered for Font Color for RichEdit control. The variable, an integer, must be defined and assigned value in RGB format somewhere
in a Code Editor event (Intro is suggested).</TD>
</TR>

<TR>
<TD>Indexed To</TD>
<TD>This control was created using Indexed Copy. The control in this property is the primary Copied From.</TD>
</TR>

<TR>
<TD>&nbsp; Remove Indexing</TD>
<TD>Checking removes Property "Indexed To" from control which removes prior copy-indexing flag.</TD>
</TR>


<TR>
<TD>Transparency</TD>
<TD>Allows you to add transparency to Windows on operating systems except Win95 and Win98.
 If you elect to use this feature you must have alphablend.ew by Thomas Parslow in Euphoria\Include, your EuInc folder or your project folder 
and add to Manage Include Statements before
 Menu Run or Menu Temp Run. Transparency may be tested from Properties via right click. This Property will be disabled for
 Win95 and Win98.</TD>
</TR>

<TR>
<TD>EuGrid Specific</TD>
<TD>Refer to EuGrid documentation from Phil Russell's EuGrid distribution obtained from Euphoria's Recent Contributions Page.</TD>
</TR>
</TABLE>


<BLOCKQUOTE><FONT COLOR="black" SIZE=3>
* Use Class drop down to change the class associated
with the Tool Box icon to another associated class. See 'Using the
Tool Box Icons' section above.
<P>** It is recommended that you generate all cells
of a Table Control prior to changing individual cell Captions.
<P>*** To return to system font, use the Delete or
Backspace key to remove the font name and the default font name and size will be returned. 
<P>(Name), Caption, CX, and CY are derived from a
Control List. You may change these values via Menu Options/Configure IDE/Values Used to Create A New
Control. The change may be temporary for several controls,
the IDE session or Saved for future runs of IDE.
<P>Changing any attribute affects the Design window
immediately and is not recoverable except by re-entering. A future release
<I>may</I>
offer an UnDo feature.
<P>Changing every attribute may not be allowed for
some controls.
<P>Some controls default to a specific Style when
<I>added</I>
to the Design window. Note that the default Style <I>does not</I> contain
or_all, parenthesis and brackets.
<P>Style Type contains or_all({entry}), {entry} and
entry. Specify which way to format the Style in the EXW or EW output file.
Select one of the following: or_all({entry}), {entry} or entry, where entry
will be the value coded into the style field. If Style Type is not selected
for a <B>Window</B>, {entry} is the default.
<P>Upper Case, Lower Case, Password Char, Read Only
and Numeric are only for edit controls. Not all fields are applicable for
MleText or RichEdit. MultiLine is for PushButton and ToggleButton only.
For RichEdit, H Scroll may be selected. When this flag is selected, WS_HSCROLL
is automatically supplied. These styles will be or_all'd with any entries
in Other Styles
<P>Limit Text is only for edit controls.

<P>UpDown has an edit control as Buddy. The Buddy
is the field that shows the numerical changes as the UpDown is clicked.
The Buddy may be identified to Win32Lib via UDS_AUTOBUDDY or setBuddy().
Either method may be used with IDE but to simplify problems using UpDown
the default is setBuddy. To facilitate identification of the control that
is the Buddy, enter the control's (<I>Name</I>) in Buddy (Name) attribute.
When the EXW is generated, the setBuddy statement will be automatically
generated for those UpDown controls having supplied "Buddy (Name)" otherwise
you must add UDS_AUTOBUDDY to the UpDown control's " Other Flags."
For the counter in the Buddy to increment when up arrow is clicked and
decrement when down arrow is clicked, setScrollRange values must be provided.
****When both Min Value and Max Value are zero, the setScrollRange is not
created in the output EXW.
<P>Back Color has been added to Properties for window
and other controls that support background color. Clicking BUTTON will access
the Color Dialog. Otherwise the RGB color must be input by you.
Default color is ButtonColor for Window class and 0 -- no color -- for controls.
When the EXW and PRJ files are generated, if Back Color is the value of
&lt;Default> for a window, the setWindowBackColor statement
will not be created and the value in the PRJ file will be 0. For Window Class, System Default
property may also be used to further refine Window class. Selecting an entry from the drop down list
 will produce a getSysColor(COLOR_choice) statement in the EXW program. BTNFACE is the default and does not
override any hard coded value input by you.
<P>Caption may specify multiple column heading for
ListView. You must specify quote marks where needed. For example a
List View Caption of two columns might be "the heading 1","the heading
2". Quotes may be imbedded within the column name and it would be formatted
such: "the heading1 for "things"","the heading 2".
<BR>Caption may specify quote marks for PushButton.
But no other controls or window should contain quote marks in Caption.
<P>If the .ico file, .bmp file or .xpm file is in
the same folder as the resulting EXW program, you may wish to edit Icon
FileName and Bitmap FileName to remove drive and parent folder such as
C:\euphoria........\xyz.ico to xyz.ico.
<P>Properties supports XPM. There are two types of XPM that IDE can
handle. One is a real XPM file such as Close.xpm which has an extension
of .xpm and the other is the emulated XPMs such as seen in IDE_xpm.ew include
file. (1) When using the real XPM, you add the XPM file name <I>whatever</I>.xpm
via Properties XPM FileName. When EXW is generated IDE adds a canned procedure
to convert the XPM file and place onto the button. (2) When using the emulated
XPM, you may add XPM include file name, e.g. IDE_xpm.ew, via Menu Generate Tools/Manage Include
Statement and also in Properties enters the include file name in
XPM FileName and indicates the XPM name within the include file in XPM
Member. When EXW is generated IDE adds a canned procedure to convert the
XPM names and place onto the buttons. If you do not add the include
module to IDE, IDE will add it at Menu Generate Program time.
<P>Multiple controls may be selected for changes in Properties. The controls must all be the same class. Click a control and press Shift+S, then select and press Shift+S for every 
control you wish to mass change. If you change your mind press Shift+A. The next changes made in Properties will apply to all the selected controls. When completed with changes for these
 controls, press Shift+A to terminate multiple processing. Not for X, Y, Name, Caption (when TabItem) Properties or Window Class.
<P>Credits:
<LI>Aku suggested multiple control updates for Properties.
<LI>Various additions to the Properties list have been suggested by Aku, Bryan Broker, Martin Stachon 
 and Yuugure Chiisana. 
<LI>There are others who have suggested additions to Properties who are not recorded in my notes. I wish to give everyone credit for helping improve IDE so
 please notify me of your missing name.
</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<P><B><I><FONT COLOR="teal" size=+2>
<A NAME="NonWin32lib"></A>Non-Win32lib Routines In Generated EXW</FONT></I></B>
<BLOCKQUOTE><FONT SIZE=3 color="black">
<LI>function <B>setLayerVisible</B>(integer windowName,object layerName,integer state)
	<BR>This function allows you to change the visibility of controls in a layer for a window.
	<BR><I>layerName</I> may be alpha or numeric. When alpha layerName is the layer's caption, for example, "Layer 0." If
		numeric is the layer's number, example 0. Even if you have renamed your layer names, the first
		layer number is 0.
	<BR><I>state</I> is true or false
 <LI>function <B>setLayerEnable</B>(integer windowName,object layerName,integer state)
	<BR>This function allows you to enable or disable controls in a layer for a window.
	<BR><I>layerName</I> may be alpha or numeric. When alpha layerName is the layer's caption, for example, "Layer 0." If
		numeric is the layer's number, example 0. Even if you have renamed your layer names, the first
		layer number is 0.
	<BR><I>state</I> is true or false. 
<LI>procedure <B>IDEaddXPM</B>(integer IDEctrl, sequence IDEXPM)
	<BR>This procedure converts an emulated xpm sequence to a dib and adds to a PictureButton or TogglePicture.
	<BR><I>IDEctrl</I> is the Name of the PictureButton or TogglePicture.
	<BR><I>IDEXPM</I> is a sequence containing the xpm passed from Properties.
<LI>procedure <B>IDERealXpmToButton</B>(integer IDEctrl, sequence filename)
	<BR>This routine adds an xpm having a file name to a PictureButton or TogglePicture.
	<BR><I>IDEctrl</I> is the Name of the PictureButton or TogglePicture.
	<BR><I>filename</I> is the actual file name passed from Properties.



</BLOCKQUOTE></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<P><B><I><FONT COLOR="teal" size=+2>
<A NAME="Control_specs"></A> Specifics Pertaining To Certain Controls:</FONT></I></B>
<BLOCKQUOTE><FONT SIZE=3 color="black">

 <HR WIDTH="100%">
 <A Name="bitmap control"></A><FONT COLOR="#3333FF">Bitmap</FONT> is a control holder for a
.bmp file. Select the .bmp filename in Properties.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A Name="icon control"></A><FONT COLOR="#3333FF">Icon/Image</FONT> is a control holder for a
.ico file. Select the .ico filename in Properties.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A Name="static control"></A><FONT COLOR="#3333FF">Static Text</FONT> is a control often used for
a label or caption of other controls. Use setText to set the text or use Caption from Properties.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A name="edit control"></A><FONT COLOR="#3333FF"> Edit Text</FONT> is a control where your users
may input data. Use SetText and GetText to put data into
the control and to retrieve users input.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A NAME="labeledit control"></A><FONT COLOR="#3333FF">Edit Text with Label</FONT>
is a normal EditText control with an adjustable 'Label'. The 'Label' may be on the left or right. As you key in data into
Properties 'Caption' attribute, the label portion will change. To add data into the EditText portion of the
control, use Properties 'Data' attribute. Note that <B>Properties Col and Row reflect the position
of the EditText portion of the control</B>. It is your responsibility to move the control placement such
that the label portion does not fall into another parent. When generating the EXW, the label portion
is stripped and used in a LText control.
 <UL>
	<P> Credits:
	<LI>This control was requested by Ward Turner.
	<LI>Andy Drummond suggested LabelEdit "label" be optionally on Left or Right.
</UL>
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A Name="mle control"></A><FONT COLOR="#3333FF">Mle Text</FONT> is a multiple line text control.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER> 

<HR WIDTH="100%">
<p><A Name="rich control"></A><FONT COLOR="#3333FF">Rich Edit</FONT> is a formatted text control. This is
the class of control that is used for Microsoft Windows WordPad(tm) program. Data is placed into
and retrieved from this control in a number of ways. Please view the Win32lib documentation.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A Name="menu control"></A><FONT COLOR="#3333FF">Menu</FONT> opens a Menu and MenuItem Editor. This editor
allows you to design you Menus for a Window. There is no control in Form Design for Menu.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A Name="popup control"></A><FONT COLOR="#3333FF">Popup</FONT> opens a Popup and PopupItem Editor. This editor
allows you to design you Popups for a Window. There is no control in Form Design for Popup.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A Name="group control"><FONT COLOR="#3333FF"></A>Frame</FONT> is a bordering control. You may assign
other controls as children to Group. A common usage is to place Radio controls that react together
as a unit, such that only one of them is checked at a time, in a Group control and parented by the Group.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A Name="button control"><FONT COLOR="#3333FF"></A>Push Button</FONT> is a depressable button. In
IDE there are several other classes of PushButton which are different in the Properties they may
use. 
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A Name="radio control"><FONT COLOR="#3333FF"></A>Radio Button</FONT> is a control which may be
checked and unchecked. When checked a little dot shows in a circle next to the button.
When you have several related radio buttons, one of which may be checked
at a time, they are usually placed in a Group control.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A Name="check control"><FONT COLOR="#3333FF"></A>Check Box</FONT> is a control which may be
checked and unchecked. When Class changed to TriCheckBox the background behind the check mark is light gray.

<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>
<UL>
	<P> Credits:
	<LI>TriCheckBox depiction to shaddow the check mark was suggested by Rajesh Deshpande when drawing
		in Design.
</UL>
<HR WIDTH="100%">
<p><A Name="combo control"><FONT COLOR="#3333FF"></A>Combo</FONT> is a control which contains lists
of data in a dropdown segment.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A Name="list control"><FONT COLOR="#3333FF"></A>List</FONT> is a control which contains lists
of data in a scrollable box.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A Name="hscroll control"><FONT COLOR="#3333FF"></A>Horizontal Scrollbar</FONT> is a control
with a moveable bar. The bar is usually along the bottom of a window.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A Name="vscroll control"><FONT COLOR="#3333FF"></A>Vertical Scrollbar</FONT> is a control
with a moveable bar. The bar is usually along the right side of a window.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A name="progress control"><FONT COLOR="#3333FF"></A>Progress Bar</FONT> is similar to a scrollbar
except it can be placed anywhere in the window.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<P><A NAME="#tabc control"><FONT COLOR="#3333FF"></A>Page Control (Tab Control)</FONT> is a container for
TabItem control. When adding Page Control (Tab Control) the first TabItem control is automatically
added to Form. In order to have multiple lines of tabs and/or the tabs at bottom of control you will need to select
the Tab Control via ProjectView or the control name dropdown in Properties.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<P><A NAME="tabitem control"></A>To add an additional <FONT COLOR="#3333FF">Tab Item</FONT>,
select the icon from the Tool Box by clicking on it, and then click the
existing Page Control (Tab Control) or Tab Item in the Design Window. Be sure to click
<I>within</I> the Tab Control or Tab Item; don't click on the border.
<p>Use the Tab Item combo box next to the
Tab Item icon in the Tool Box to select between the Tab Items when adding
controls to a Tab Item, deleting a Tab Item or right clicking for the Code
Window. You may also click on the "tab" of the Tab Item, is it shows,
to select the Tab Item or use Properties dropdown or ProjectView..
<p>When adding additional Tab Items, the
new one will be immediately sized to match existing ones. Tab Items
on different Tab Controls or windows may have different sizes. A <I>visual
only</I> tab is added to the top of the Tab Item which will change as new
Tab Items are added or selected from the Tab Item combo box. If there are
more Tab Items than can be accommodated by the size of the Tab Control,
small left and right arrows will show next to the last tab that fits within
the Tab Control. Dragging the Tab Control larger will automatically show
tabs that fit.
<P>Moving the Tab Item moves the Tab Control and
all Tab Items. Dragging the resize down arrow will drag and resize all
the Tab Items on the Tab Control. Use the Ctrl key in addition to the mouse
to move only the currently selected Tab Item.
<P>Basically the x, y, cx, and cy of Tab Items for
a Tab Control on a window are kept the same. Moving/dragging a Tab
Item on a Tab Control does not affect Tab Items on other Tab Controls.
<p>All Tab Items on a Tab Control on a window
occupy the same physical location on the window so the IDE simply does
not draw the Tab Item and associated controls unless it is an active one.
The combo box in the Main Window Tool Bar indicates the currently active
Tab Item but each Tab Control retains its own active Tab Item.
<p>A Tab Item must not be moved or added
to another control besides a Tab Control or a Tab Item on another Tab Control.
When moving a Tab Item be sure to lift up <I>inside</I> the Tab Control
or Tab Item.
<P>A Tab Control must not be moved or added to another
control besides a Tab Item or The Window. Tab Controls and Tab Items with
Tab Controls and Tab Items may be stacked to any depth desired.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A NAME="calendar"></A>The <FONT COLOR="#3333FF">Calendar</FONT>
control is sized 250 width and 200 height
and can be resized via Properties "font\Points". Resizing from
the Design pad is prevented.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A NAME="updown control"></A><FONT COLOR="#3333FF">UpDown </FONT>has
an edit control as Buddy. The Buddy is the field that shows the numerical
changes as the UpDown is clicked. The Buddy may be identified to Win32Lib
via UDS_AUTOBUDDY or setBuddy(). Either method may be used with IDE but
to simplify problems using UpDown the default is setBuddy. To facilitate
identification of the control that is the Buddy, enter the control's (<I>Name</I>).
When the EXW is generated, the setBuddy statement will be automatically
generated for those UpDown controls having supplied "Buddy (Name)" otherwise
you must add UDS_AUTOBUDDY to the UpDown control's " Other Flags."
The companion Buddy control must be added just prior to adding the UpDown
control. Min and Max
values may be entered for the UpDown counter. When either value is entered
in Properties, IDE generates a setScrollRange statement containing the
values.

<P>When designing the UpDown control remember that the Buddy control must be large enough to
accommodate the data that the updown will place there but also large enough to hold the actual 
updown control since the UpDown control will position itself on top of the Buddy.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A NAME="statusbar control"></A>Controls
added to the<FONT COLOR="#3333FF"> Status Bar </FONT>control
will be auto-sized. When the Design Window is resized, the Status Bar is
automatically resized. Also when Status Bar is in a CWindow and the CWindow is
resized, the Status Bar is sized accordingly. The Status Bar always resides at the bottom of its parent
Window or CWindow.
<P>Status Bar may not be copied but may be moved to another Window or CWindow.
<P>Hints may be assigned to child controls of Status Bar but they will only show if the child control
receives mouse events.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A NAME="toolbar control"></A>Controls dropped on the <FONT COLOR="#3333FF">Tool
Bar</FONT> are auto positioned and sized. If there
is not enough room on the Tool Bar to accommodate the added control, an
error message will be displayed. A solution is to use the Tool Bar down resize arrow
and add a new 'row' to the Tool Bar or change the Height Properties value. Drag just
a bit under the bottom of the Tool Bar and it will add the new 'row' with
the correct depth and snap into place. Then the new control may be added.
<P>If the control dropped on the Tool Bar is a Push
Button, it will be converted to Picture Button and sized 4 pixels smaller than the ToolBar. It can be resized.
<P>When moving a control in the ToolBar to a new
location, drop it a bit below the row you want it in. It will pop
into place.
<P>If you want to move a control between other controls,
simply move it where it overlaps BOTH controls and a bit below the
top of them. When you lift up, the controls are repositioned.
<P>Resizing Design window will automatically adjust
Tool Bar controls. This means they may move from row to row within
the Tool Bar. To keep a control "stuck" on a row but relative to other
controls, use the Tool Spacer. Controls dropped onto the Tool Bar may be
a maximum of 30 pixels CY, and Y is the top of the Tool Bar row. If you
want to reposition within the CY, you may, but any resizing of the
Design window or moving/resizing may negate your change.
<P>Tool Bar may not be copied.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A NAME="Tool spacer control"></A><FONT COLOR="#3333FF">Tool
Spacer</FONT> may be used to separate controls
in the Tool Bar. Tool Spacer resize arrows are very hard to use because the
Tool Spacer is such a narrow control. Tool Spacer is also difficult to
right click for Properties Window for the same reason. However, you may utilize the
Properties Control dropdown above the (Name) Property.
<P>ToolSpacer is used only in Design window
and is not carried to the EXW file. It is assigned a 'class' of "None"
when viewing in the Properties Window.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A Name="Flat Tool Bar"></A><FONT COLOR="#3333FF">Flat Tool Bar</FONT> is similar to Tool Bar except it has a larger depth.
Adding buttons is identical to adding a button to Tool Bar. Flat Tool Bar needs three icons
associated with it for the different states the button is in.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A Name="Flat Tool Bar Spacer"></A><FONT COLOR="#3333FF">Separator Button</FONT> is similar to Tool Bar Spacer.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A Name="tree control"></A><FONT COLOR="#3333FF">Tree View</FONT> is a control that shows
information in an outline format. Items that are grouped under another item are indented. You
may assign an icon to each node to indicate the node is open or not. If you don't want an
icon, use -1 for open and close folder icon names when using the setTVItem function. The open
and closed icon is set up for Tree View and List View (see below) with an extractIcon statement.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A Name="listview control"></A><FONT COLOR="#3333FF">List View</FONT> is a control that shows
information similar to a List control only there are distinct columns. IDE will help you build
a listview control with Menu Edit/ <I>Visual List View Explorer</I>.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A NAME="table control"></A><FONT COLOR="#3333FF">Table Pseudo
Control</FONT> may be used to create a repeating set of controls on an
optional background and bounded by an optional border. 
The end result is a column and row appearance rather
like a grid with the same type of controls in each cell. First the Table
control is selected and placed on the Form. The actual control is a LText
so that a heading may be supplied. Use Properties to select an optional
color background for the Table. Otherwise the background will be the default
parent window background. If a background is not desired, in Properties remove
contents of Caption for the Table and do not supply Color. If you select a Border
around the table, when the EXW is generated the LText is changed to a Group control.
If your cells do not all fit inside the Table, LText does not convert to Group.Cell 1
is then designed. More than one control may be in a Cell and they may be
nested, side to side or under one another. However Group, TabControl, TabItem
or another Table controls may not presently be added to Table. You have
complete freedom designing the Cell. Use Properties to select color and
font for the Cell. If a particular control is not desired for a cell, it may be
suppressed in the generated EXW via "Suppress Cell." It is recommended that you not 
change Captions until
all cells are built. Once Cell 1 is designed, it may be replicated by right
clicking with the mouse on the Table and (or left clicking on the Table and in Properties) 
selecting Table Specs. Enter the
number of columns and rows and any spaces between. Cell 1 CX and CY is
replicated. Properties items such as Color and Font are not. If Font is
entered for Table it will be used for the Cells as well but may be overridden
individually for each Cell. Once built no more controls may be added to
Table unless 'rows' and 'cols' are set back to 1 in Table Specs. Change
the location of the controls in Cell 1 and all Cells may be changed relatively.
When the EXW file is written, each Cell is created unless you select
to have the Table treated as an array. In that case, only the Table LText
background is created and an array named the Table <I>Name</I>Array.
Accessing a Table Array must be by indexing
<I>Name</I>Array. When Table
is treated as an array, you may still use Code Editor with the control
names and IDE attempts to translate all occurrences of the control name
to its array representation; except in the statements 'procedure xyz()',
'call_proc( xyz,{}) or xyz() since these statement will not accept indexing. 
You may change row, column, width and height of any cell via Properties
but it is highly recommended that the Table Specs not be selected again
after this is done since all changes to cells via Table Specs is relative
to cell 1.
<P>Normally when a Table is created via Table Specs, the number of cells are created and 
the Table is adjusted to surround them. However you may create a small Table which contains 
many more cells than can fit inside its boundaries by creating "small foot print" Tables.
Drop the Table icon on Design and size as it should appear in the generated EXW.  Add cell 
one controls as usual, right click somewhere in the Table and select Table Specs.
In Table Specs, in "Size To Fit Cells", check "No" and then decide if scrollbars are needed. 
Making the Table resizable by the EXW end user may also be selected. This type of Table may 
also be an created as an array.
When returning to Design you will see only the cells that actually fit inside the boundaries 
of Table. To see the rest, right click on Table control and select "Show Full Size". The 
window that is opened will show the Table as the generated EXW would create it.
Cells outside the Table boundaries may not be seen in Design but may be manipulated via 
Properties. Use the Property Drop Down to select this type of cell.
<P>Beginning with v0.19.0 you may elect to have your arrayed Table cells created in the 
generated exw. The
advantage of this method is IDE does not createEx each control occurance in the exw; 
instead a for-loop in the generated exw is used to createEx the array controls. 
This method greatly reduces the statements in your exw.
To use this method in Table Specs check "Generate array in exw." You may also elect via 
"Add border around Table ....." 
to place the Table in a Group control instead of LText so that a "border" surrounds the 
Table. This may not be used when all cells are not within the Table control.
<P>Beginning with v0.19.2 new project Tables have their
cells generated using a unique caption, styled as cn_x_y where cn is the letter "c" followed
by the control number, x is col and y is row. If you change or remove the caption of one of these cells
the new caption will be shown instead of the cn_x_y technique for that cell. Because of the method
IDE uses to determine that the caption has changed since the cell was created, older projects with Tables
generated in the exw might never use the cn_x_y style even if you have previously changed the cell
caption because IDE was not storing the original caption at that time. The rule is as follows; if original caption
(determined when control was added to Design) is the same as the current caption, IDE assumes you have not
changed the caption and will use the cn_x_y method. If the original caption and current caption differ, then IDE will
use the current caption. However if the current caption is spaces, regardless of the value
of the original caption, IDE will use spaces in the caption. When loading older project files IDE will be set the original caption to spaces. 
<UL>
	<P>Credits:
		<LI>Andy Drummond suggested the new array method and supplied code to produce in the exw.			
</UL>
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A NAME="EuGrid"></A><FONT COLOR="#3366FF">EuGrid</FONT>
, a custom control written and maintained by Phil Russell, has been added but is fairly simple at this time. 
IDE assumes you have some familiarity with EuGrid and questions about using EuGrid should be directed to Phil. Questions about the 
interface between IDE and EuGrid will be handled by the IDE staff (that's me.)
There is no support at the cell level. 
IDE distribution does not include a copy of EuGrid.ew so you need to obtain a copy from Euphoria's Recent Contributions Page and place in
Euphoria\Include, your EuInc folder or project folder and add to Manage Include Statements before F5/F6. 
EuGrid acts like toolbar when adding controls so you do not have to try to line them up yourself. 
What you add are controls representing a row. 
Then in Properties for EuGrid you add the setGridProperty values and in Properties for each control on the row you can add the setColumnProperty values. 
There is not a provision for adding beyond the CX of the Grid. Create your data array in (Intro) and add the name of the sequence in EuGrid/Data Name Array Property.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A NAME="ReBar"></A><FONT COLOR="#3366FF">ReBar and ReBarBand</FONT>
control may be used instead of Tool Bar or Flat Tool Bar. You must
add ReBar before adding ReBarBand. ReBarBand is 4 pixels smaller than the
ReBar control; 2 pixels top and bottom and offset from the left edge of
ReBar by 5 pixels. Only one ReBar is allowed per window but multiple ReBarBands
are allowed and may be on the same or subsequent band 'rows'. When you
change Properties Flags/RBBS_BREAK to False, the ReBarBand is on the same
'row' as the prior ReBarBand. True is the default. Only one control may
be added to ReBarBand unless the control is added to a Group, ToolBar or
FlatToolBar. Control in ReBarBand is offset from the ReBarBand Caption
by 5 pixels. The Height of ReBarBand is determined by the height of any
controls within and all ReBarBands are the same Height. When controls are
dropped or moved to ReBarBand, IDE makes the sizing adjustments. When ReBarBand
Caption is removed, the control within is offset from the beginning of
the band by 5 pixels. ReBarBand Font is the Font of ReBar and all ReBarBands
 are the same Font.
<p>It has been very difficult to draw the
ReBar and ReBarBand with any accuracy since they are adjusted during EXW
run. Therefore controls following the Rebar and ReBarBand may not be exactly
where you desire.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A NAME="ReBarBand"></A><FONT COLOR="#3366FF">ReBarBand</FONT> is described above
under <A HREF="#ReBar">ReBar</A>
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>


<HR WIDTH="100%">
<p><A NAME="Flat Tool Bar"></A><FONT COLOR="#3366FF">Flat Tool
Bar </FONT>control may be used instead of Tool Bar
or ReBar. PushButtons placed on Flat Tool Bar require three ico files to
provide the default, hot and disabled icon. Default icon is always necessary
and will be used when hot and/or disabled ico file names are not specified.
When you have not specified in Properties the default ico file name, a
PushButton only is passed to the EXW. IDE supplies the extractIcon and
addIcon statements. A special button, Sep Button, supplies a separation
between adjacent PushButtons. IDE temporarily changes the Class to PictureButton
so that icons may be specified and changes back to PushButton for EXW run.
You may rotate between the ico files shown in Design by pressing F1, F2
and F3.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">
<p><A NAME="child control"></A><FONT COLOR="#3366FF">Child Window</FONT> control is a special
Window control that has type WS_CHILD automatically assigned. If you remove WS_CHILD style 
you will need to position CWindow in parent
Window yourself and also position when moving the parent Window, The depiction in Design is <B>not exact</B> and some trial
and error must be handled by the user especially when changing Styles.
<UL>
	<P> Credits:
	<LI>Many improvements to Child Window were submitted by Rajesh Dashpande.
</UL>
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>


<HR WIDTH="100%">
<p><A NAME="Timer"></A><FONT COLOR="#3366FF">Timer </FONT>control
is a pseudo control for setTimer and killTimer statements and as a vehicle
for w32HTimer events. Timer controls are not placed on the Design
Form when selected from the Tool Box; instead the Timer Editor Window is
opened. Timer Editor Window may also be opened from IDE 'Editors.'
<p>The Timer Editor allows for adding and
deleting Timers. Timers are always associated with the window control but
may be turned on and off for any control-w32HEvent pair. The Editor allows
you to select these pairings and will insert the setTimer and killTimer
statements in any routines you add via Code Editor or will create
these control-w32HEvent routines if you have not coded them. These routines,
generated by IDE, are not reflected in the Code Editor. If you elect
not to specify the set and/or kill control-w32HEvent, then you must
code these statements.
<P>Timer Editor also includes a field to
specify the time interval for the setTimer statement generated by IDE.
<P>The minimum amount of information required to
add a Timer control is the Timer Name which is assigned when you click
the 'Add' button.
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>

<HR WIDTH="100%">

</BLOCKQUOTE>
<P><CENTER><A HREF="#List">Return to List</A></CENTER>
<FONT Color="black" SIZE=3><CENTER> or </CENTER></FONT>
<P><CENTER><A HREF="#TOC">Return to Table of Contents</A></CENTER>


<HR ALIGN=LEFT WIDTH="100%">
<P><FONT SIZE=+2 color="teal"><B><A NAME="Utilities"></A>Utilities</B></FONT>
<P><BLOCKQUOTE><B><I><FONT COLOR="green" size=+2></FONT></I></B>
<LI>WinlibScan
<BR>This program in IDE's distribution may be used to quickly update your Code Editor
 Win32lib.ew keywords when you change Win32lib.ew versions.

</BLOCKQUOTE>
<HR WIDTH="100%">
</BODY>
</HTML>

elsif equal( the[SelectWidth][j], IDEText[824][1] ) then  --"Fit Data"
            colMenuWidth&={IDEText[894][1]}                       --"Fit Data"
            addItem(ColumnWidthData,IDEText[894][1])              --"Fit Data"listbiew