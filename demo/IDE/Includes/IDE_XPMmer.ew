--  code generated by Win32Lib IDE v0.21.0

--constant TheProgramType="ew" 
--constant TheTitle = "XPMmer" 
--constant TheAuthor = "A.F.Drummond" 
--constant TheVersion = "2.3" 
--constant TheDate = "26 April 2006" 
--constant TheWinlibVersion = "6.0.6" 

include Win32Lib.ew
without warning
--with trace
--                                      XPMmer
--                                      ======

--              Version 2.3                     18 April 2006           A.Drummond
--                                                                                      andy@kestreltele.com

--              This program allows the editing and creation of XPM icons
--      of size up to 32x32. A 64-color palette is available to use,
--      including the transparent color, None.

--              You can input (some) XPM files, Euphoria XPM files (these
--      are XPM objects encapsulated in Win32Lib code to produce the
--      bitmap handle which can be directly loaded into pictureButton
--      and icon objects), and also icon and bitmap files.

--              The results can be saved as standard XPM, asn Euphoria XPM
--      files called EUX files, and icons. The icons are always 64 color
--      32x32 icons which are compatible with Euphoria's program binder.

--              Modifications from 1.4:

--      * Changing the grid size dows not make it move about
--      * There was a bug which made the input of XPM files impossible
--      * There was a bug whereby the closing of the getFile dialog box
--        with the mouse button down could put in false pixels ar set
--        false colors in the palette.
--  * Inputing icons and XPMs used to copy their palettes into the
--        first few places of the XPMmer palette. This made life rather
--        difficult so now they merely look for the closest match with
--        the existing standard palette.
--  * Setting a new color in Erase mode automatically reverts to Pen
--  * When XPMs are output, only those colors used in the image are
--        included in the color list.
--      * It is now able to read a wider range of XPMs - only those with
--        two-character pixel idents cannot be read.
--      * I now can add a dot in the middle if Transparent pixels, and
--        I can remove the grid lines around them too.
--      * I can open XPM or EUX lines from the command line but icon files
--        for some reason won't.
--      * Cured a few bugs, mostly pointed out by Igor "the Cossack!"
--      * I have removed the "Euphoria XPMs" from the program and used the
--        XPMmer built into the IDE to define the icons on the toolbar!
--        Very odd indeed using XPMmer from within IDE to set the icons on
--        XPMmer itself!!  But it worked very well.
--      * Added an UNDO ALL button so if you foul up the edits of an icon
--        within IDE you can retreat from the situation to the original.

--      18 April 2006 - passed over to Judith Evans (for the umpteenth time)
--      for incorporation in IDE. It is now considered good enough for that.

--      16 June 2006 - passed back to Andy Drummond to sort out the rotate
--      business and correct the UndoAll process...

--      24 August 2006
--      Sorted out the reading in of BMP files which was awful.
--      Added setTextX() to put filename in a window such that if it is too long
--      it truncates a bit from the middle...
--      Failed to sort the small icon reading - see around line 2720 or so...
--      I decided it was not worth the hassle!
--      BMP files and ICO files read in in one go; before you had to select
--      that you wanted BMPs as opposed to ICOs.

--      Note to Judith: IDEText[1105][1] wants changing to include both file types.
--                                      And I suppose [1106] can be junked or re-used.


-- x color names
constant ColorNames = {
                       {"grey0", #00, #00, #00},
                       {"black", #00, #00, #00},
                       {"gray0", #00, #00, #00},
                       {"navyblue", #00, #00, #80},
                       {"navy_blue", #00, #00, #80},
                       {"navy", #00, #00, #80},
                       {"blue4", #00, #00, #8B},
                       {"sergblue", #00, #00, #B4},
                       {"medium_blue", #00, #00, #CD},
                       {"blue3", #00, #00, #CD},
                       {"mediumblue", #00, #00, #CD},
                       {"blue2", #00, #00, #EE},
                       {"blue1", #00, #00, #FF},
                       {"blue", #00, #00, #FF},
                       {"dark_green", #00, #64, #00},
                       {"darkgreen", #00, #64, #00},
                       {"deepskyblue4", #00, #68, #8B},
                       {"turquoise4", #00, #86, #8B},
                       {"green4", #00, #8B, #00},
                       {"springgreen4", #00, #8B, #45},
                       {"cyan4", #00, #8B, #8B},
                       {"deepskyblue3", #00, #9A, #CD},
                       {"deepskyblue2", #00, #B2, #EE},
                       {"deep_sky_blue", #00, #BF, #FF},
                       {"deepskyblue", #00, #BF, #FF},
                       {"deepskyblue1", #00, #BF, #FF},
                       {"turquoise3", #00, #C5, #CD},
                       {"green3", #00, #CD, #00},
                       {"springgreen3", #00, #CD, #66},
                       {"cyan3", #00, #CD, #CD},
                       {"dark_turquoise", #00, #CE, #D1},
                       {"darkturquoise", #00, #CE, #D1},
                       {"turquoise2", #00, #E5, #EE},
                       {"green2", #00, #EE, #00},
                       {"springgreen2", #00, #EE, #76},
                       {"cyan2", #00, #EE, #EE},
                       {"turquoise1", #00, #F5, #FF},
                       {"medium_spring_green", #00, #FA, #9A},
                       {"mediumspringgreen", #00, #FA, #9A},
                       {"green1", #00, #FF, #00},
                       {"green", #00, #FF, #00},
                       {"springgreen1", #00, #FF, #7F},
                       {"spring_green", #00, #FF, #7F},
                       {"springgreen", #00, #FF, #7F},
                       {"cyan", #00, #FF, #FF},
                       {"cyan1", #00, #FF, #FF},
                       {"grey1", #03, #03, #03},
                       {"gray1", #03, #03, #03},
                       {"gray2", #05, #05, #05},
                       {"grey2", #05, #05, #05},
                       {"gray3", #08, #08, #08},
                       {"grey3", #08, #08, #08},
                       {"gray4", #0A, #0A, #0A},
                       {"grey4", #0A, #0A, #0A},
                       {"gray5", #0D, #0D, #0D},
                       {"grey5", #0D, #0D, #0D},
                       {"grey6", #0F, #0F, #0F},
                       {"gray6", #0F, #0F, #0F},
                       {"dodgerblue4", #10, #4E, #8B},
                       {"gray7", #12, #12, #12},
                       {"grey7", #12, #12, #12},
                       {"gray8", #14, #14, #14},
                       {"grey8", #14, #14, #14},
                       {"grey9", #17, #17, #17},
                       {"gray9", #17, #17, #17},
                       {"dodgerblue3", #18, #74, #CD},
                       {"midnightblue", #19, #19, #70},
                       {"midnight_blue", #19, #19, #70},
                       {"grey10", #1A, #1A, #1A},
                       {"gray10", #1A, #1A, #1A},
                       {"grey11", #1C, #1C, #1C},
                       {"gray11", #1C, #1C, #1C},
                       {"dodgerblue2", #1C, #86, #EE},
                       {"dodgerblue", #1E, #90, #FF},
                       {"dodger_blue", #1E, #90, #FF},
                       {"dodgerblue1", #1E, #90, #FF},
                       {"grey12", #1F, #1F, #1F},
                       {"gray12", #1F, #1F, #1F},
                       {"lightseagreen", #20, #B2, #AA},
                       {"light_sea_green", #20, #B2, #AA},
                       {"gray13", #21, #21, #21},
                       {"grey13", #21, #21, #21},
                       {"forest_green", #22, #8B, #22},
                       {"forestgreen", #22, #8B, #22},
                       {"gray14", #24, #24, #24},
                       {"grey14", #24, #24, #24},
                       {"gray15", #26, #26, #26},
                       {"grey15", #26, #26, #26},
                       {"royalblue4", #27, #40, #8B},
                       {"grey16", #29, #29, #29},
                       {"gray16", #29, #29, #29},
                       {"grey17", #2B, #2B, #2B},
                       {"gray17", #2B, #2B, #2B},
                       {"grey18", #2E, #2E, #2E},
                       {"gray18", #2E, #2E, #2E},
                       {"seagreen4", #2E, #8B, #57},
                       {"seagreen", #2E, #8B, #57},
                       {"sea_green", #2E, #8B, #57},
                       {"dark_slate_grey", #2F, #4F, #4F},
                       {"dark_slate_gray", #2F, #4F, #4F},
                       {"darkslategray", #2F, #4F, #4F},
                       {"darkslategrey", #2F, #4F, #4F},
                       {"grey19", #30, #30, #30},
                       {"gray19", #30, #30, #30},
                       {"lime_green", #32, #CD, #32},
                       {"limegreen", #32, #CD, #32},
                       {"gray20", #33, #33, #33},
                       {"grey20", #33, #33, #33},
                       {"grey21", #36, #36, #36},
                       {"gray21", #36, #36, #36},
                       {"steelblue4", #36, #64, #8B},
                       {"gray22", #38, #38, #38},
                       {"grey22", #38, #38, #38},
                       {"royalblue3", #3A, #5F, #CD},
                       {"gray23", #3B, #3B, #3B},
                       {"grey23", #3B, #3B, #3B},
                       {"medium_sea_green", #3C, #B3, #71},
                       {"mediumseagreen", #3C, #B3, #71},
                       {"grey24", #3D, #3D, #3D},
                       {"gray24", #3D, #3D, #3D},
                       {"grey25", #40, #40, #40},
                       {"gray25", #40, #40, #40},
                       {"turquoise", #40, #E0, #D0},
                       {"royalblue", #41, #69, #E1},
                       {"royal_blue", #41, #69, #E1},
                       {"gray26", #42, #42, #42},
                       {"grey26", #42, #42, #42},
                       {"royalblue2", #43, #6E, #EE},
                       {"seagreen3", #43, #CD, #80},
                       {"grey27", #45, #45, #45},
                       {"gray27", #45, #45, #45},
                       {"chartreuse4", #45, #8B, #00},
                       {"aquamarine4", #45, #8B, #74},
                       {"steelblue", #46, #82, #B4},
                       {"steel_blue", #46, #82, #B4},
                       {"slateblue4", #47, #3C, #8B},
                       {"grey28", #47, #47, #47},
                       {"gray28", #47, #47, #47},
                       {"dark_slate_blue", #48, #3D, #8B},
                       {"darkslateblue", #48, #3D, #8B},
                       {"royalblue1", #48, #76, #FF},
                       {"mediumturquoise", #48, #D1, #CC},
                       {"medium_turquoise", #48, #D1, #CC},
                       {"gray29", #4A, #4A, #4A},
                       {"grey29", #4A, #4A, #4A},
                       {"skyblue4", #4A, #70, #8B},
                       {"grey30", #4D, #4D, #4D},
                       {"gray30", #4D, #4D, #4D},
                       {"seagreen2", #4E, #EE, #94},
                       {"gray31", #4F, #4F, #4F},
                       {"grey31", #4F, #4F, #4F},
                       {"steelblue3", #4F, #94, #CD},
                       {"gray32", #52, #52, #52},
                       {"grey32", #52, #52, #52},
                       {"darkslategray4", #52, #8B, #8B},
                       {"cadetblue4", #53, #86, #8B},
                       {"gray33", #54, #54, #54},
                       {"grey33", #54, #54, #54},
                       {"palegreen4", #54, #8B, #54},
                       {"seagreen1", #54, #FF, #9F},
                       {"purple4", #55, #1A, #8B},
                       {"dark_olive_green", #55, #6B, #2F},
                       {"darkolivegreen", #55, #6B, #2F},
                       {"grey34", #57, #57, #57},
                       {"gray34", #57, #57, #57},
                       {"grey35", #59, #59, #59},
                       {"gray35", #59, #59, #59},
                       {"grey36", #5C, #5C, #5C},
                       {"gray36", #5C, #5C, #5C},
                       {"steelblue2", #5C, #AC, #EE},
                       {"mediumpurple4", #5D, #47, #8B},
                       {"gray37", #5E, #5E, #5E},
                       {"grey37", #5E, #5E, #5E},
                       {"cadetblue", #5F, #9E, #A0},
                       {"cadet_blue", #5F, #9E, #A0},
                       {"lightskyblue4", #60, #7B, #8B},
                       {"timgray", #61, #5C, #5C},
                       {"gray38", #61, #61, #61},
                       {"grey38", #61, #61, #61},
                       {"grey39", #63, #63, #63},
                       {"gray39", #63, #63, #63},
                       {"steelblue1", #63, #B8, #FF},
                       {"cornflowerblue", #64, #95, #ED},
                       {"cornflower_blue", #64, #95, #ED},
                       {"grey40", #66, #66, #66},
                       {"gray40", #66, #66, #66},
                       {"paleturquoise4", #66, #8B, #8B},
                       {"chartreuse3", #66, #CD, #00},
                       {"mediumaquamarine", #66, #CD, #AA},
                       {"medium_aquamarine", #66, #CD, #AA},
                       {"aquamarine3", #66, #CD, #AA},
                       {"darkorchid4", #68, #22, #8B},
                       {"lightblue4", #68, #83, #8B},
                       {"slateblue3", #69, #59, #CD},
                       {"dimgray", #69, #69, #69},
                       {"dimgrey", #69, #69, #69},
                       {"gray41", #69, #69, #69},
                       {"dim_gray", #69, #69, #69},
                       {"grey41", #69, #69, #69},
                       {"dim_grey", #69, #69, #69},
                       {"olivedrab4", #69, #8B, #22},
                       {"darkseagreen4", #69, #8B, #69},
                       {"slateblue", #6A, #5A, #CD},
                       {"slate_blue", #6A, #5A, #CD},
                       {"grey42", #6B, #6B, #6B},
                       {"gray42", #6B, #6B, #6B},
                       {"olive_drab", #6B, #8E, #23},
                       {"olivedrab", #6B, #8E, #23},
                       {"slategray4", #6C, #7B, #8B},
                       {"skyblue3", #6C, #A6, #CD},
                       {"grey43", #6E, #6E, #6E},
                       {"gray43", #6E, #6E, #6E},
                       {"lightsteelblue4", #6E, #7B, #8B},
                       {"darkolivegreen4", #6E, #8B, #3D},
                       {"rosegray40", #70, #66, #66},
                       {"gray44", #70, #70, #70},
                       {"grey44", #70, #70, #70},
                       {"slate_grey", #70, #80, #90},
                       {"slate_gray", #70, #80, #90},
                       {"slategray", #70, #80, #90},
                       {"slategrey", #70, #80, #90},
                       {"gray45", #73, #73, #73},
                       {"grey45", #73, #73, #73},
                       {"gray46", #75, #75, #75},
                       {"grey46", #75, #75, #75},
                       {"chartreuse2", #76, #EE, #00},
                       {"aquamarine2", #76, #EE, #C6},
                       {"lightslategrey", #77, #88, #99},
                       {"light_slate_gray", #77, #88, #99},
                       {"lightslategray", #77, #88, #99},
                       {"light_slate_grey", #77, #88, #99},
                       {"grey47", #78, #78, #78},
                       {"gray47", #78, #78, #78},
                       {"darkslategray3", #79, #CD, #CD},
                       {"mediumorchid4", #7A, #37, #8B},
                       {"slateblue2", #7A, #67, #EE},
                       {"grey48", #7A, #7A, #7A},
                       {"gray48", #7A, #7A, #7A},
                       {"lightcyan4", #7A, #8B, #8B},
                       {"cadetblue3", #7A, #C5, #CD},
                       {"mediumslateblue", #7B, #68, #EE},
                       {"medium_slate_blue", #7B, #68, #EE},
                       {"palegreen3", #7C, #CD, #7C},
                       {"lawngreen", #7C, #FC, #00},
                       {"lawn_green", #7C, #FC, #00},
                       {"purple3", #7D, #26, #CD},
                       {"grey49", #7D, #7D, #7D},
                       {"gray49", #7D, #7D, #7D},
                       {"skyblue2", #7E, #C0, #EE},
                       {"grey50", #7F, #7F, #7F},
                       {"gray50", #7F, #7F, #7F},
                       {"chartreuse1", #7F, #FF, #00},
                       {"chartreuse", #7F, #FF, #00},
                       {"aquamarine1", #7F, #FF, #D4},
                       {"aquamarine", #7F, #FF, #D4},
                       {"gray51", #82, #82, #82},
                       {"grey51", #82, #82, #82},
                       {"slateblue1", #83, #6F, #FF},
                       {"honeydew4", #83, #8B, #83},
                       {"azure4", #83, #8B, #8B},
                       {"lightslateblue", #84, #70, #FF},
                       {"light_slate_blue", #84, #70, #FF},
                       {"gray52", #85, #85, #85},
                       {"grey52", #85, #85, #85},
                       {"grey53", #87, #87, #87},
                       {"gray53", #87, #87, #87},
                       {"sky_blue", #87, #CE, #EB},
                       {"skyblue", #87, #CE, #EB},
                       {"lightskyblue", #87, #CE, #FA},
                       {"light_sky_blue", #87, #CE, #FA},
                       {"skyblue1", #87, #CE, #FF},
                       {"mediumpurple3", #89, #68, #CD},
                       {"blue_violet", #8A, #2B, #E2},
                       {"blueviolet", #8A, #2B, #E2},
                       {"gray54", #8A, #8A, #8A},
                       {"grey54", #8A, #8A, #8A},
                       {"red4", #8B, #00, #00},
                       {"magenta4", #8B, #00, #8B},
                       {"deeppink4", #8B, #0A, #50},
                       {"firebrick4", #8B, #1A, #1A},
                       {"maroon4", #8B, #1C, #62},
                       {"violetred4", #8B, #22, #52},
                       {"brown4", #8B, #23, #23},
                       {"orangered4", #8B, #25, #00},
                       {"tomato4", #8B, #36, #26},
                       {"indianred4", #8B, #3A, #3A},
                       {"hotpink4", #8B, #3A, #62},
                       {"coral4", #8B, #3E, #2F},
                       {"darkorange4", #8B, #45, #00},
                       {"saddle_brown", #8B, #45, #13},
                       {"saddlebrown", #8B, #45, #13},
                       {"chocolate4", #8B, #45, #13},
                       {"sienna4", #8B, #47, #26},
                       {"palevioletred4", #8B, #47, #5D},
                       {"orchid4", #8B, #47, #89},
                       {"salmon4", #8B, #4C, #39},
                       {"lightsalmon4", #8B, #57, #42},
                       {"orange4", #8B, #5A, #00},
                       {"tan4", #8B, #5A, #2B},
                       {"lightpink4", #8B, #5F, #65},
                       {"pink4", #8B, #63, #6C},
                       {"darkgoldenrod4", #8B, #65, #08},
                       {"plum4", #8B, #66, #8B},
                       {"goldenrod4", #8B, #69, #14},
                       {"rosybrown4", #8B, #69, #69},
                       {"burlywood4", #8B, #73, #55},
                       {"gold4", #8B, #75, #00},
                       {"peachpuff4", #8B, #77, #65},
                       {"navajowhite4", #8B, #79, #5E},
                       {"thistle4", #8B, #7B, #8B},
                       {"bisque4", #8B, #7D, #6B},
                       {"mistyrose4", #8B, #7D, #7B},
                       {"wheat4", #8B, #7E, #66},
                       {"lightgoldenrod4", #8B, #81, #4C},
                       {"antiquewhite4", #8B, #83, #78},
                       {"lavenderblush4", #8B, #83, #86},
                       {"khaki4", #8B, #86, #4E},
                       {"seashell4", #8B, #86, #82},
                       {"cornsilk4", #8B, #88, #78},
                       {"lemonchiffon4", #8B, #89, #70},
                       {"snow4", #8B, #89, #89},
                       {"yellow4", #8B, #8B, #00},
                       {"lightyellow4", #8B, #8B, #7A},
                       {"ivory4", #8B, #8B, #83},
                       {"grey55", #8C, #8C, #8C},
                       {"gray55", #8C, #8C, #8C},
                       {"lightskyblue3", #8D, #B6, #CD},
                       {"darkslategray2", #8D, #EE, #EE},
                       {"cadetblue2", #8E, #E5, #EE},
                       {"gray56", #8F, #8F, #8F},
                       {"grey56", #8F, #8F, #8F},
                       {"darkseagreen", #8F, #BC, #8F},
                       {"dark_sea_green", #8F, #BC, #8F},
                       {"palegreen2", #90, #EE, #90},
                       {"purple2", #91, #2C, #EE},
                       {"gray57", #91, #91, #91},
                       {"grey57", #91, #91, #91},
                       {"medium_purple", #93, #70, #DB},
                       {"mediumpurple", #93, #70, #DB},
                       {"dark_violet", #94, #00, #D3},
                       {"darkviolet", #94, #00, #D3},
                       {"gray58", #94, #94, #94},
                       {"grey58", #94, #94, #94},
                       {"grey59", #96, #96, #96},
                       {"gray59", #96, #96, #96},
                       {"paleturquoise3", #96, #CD, #CD},
                       {"darkslategray1", #97, #FF, #FF},
                       {"cadetblue1", #98, #F5, #FF},
                       {"palegreen", #98, #FB, #98},
                       {"pale_green", #98, #FB, #98},
                       {"dark_orchid", #99, #32, #CC},
                       {"darkorchid", #99, #32, #CC},
                       {"gray60", #99, #99, #99},
                       {"grey60", #99, #99, #99},
                       {"darkorchid3", #9A, #32, #CD},
                       {"lightblue3", #9A, #C0, #CD},
                       {"olivedrab3", #9A, #CD, #32},
                       {"yellowgreen", #9A, #CD, #32},
                       {"yellow_green", #9A, #CD, #32},
                       {"palegreen1", #9A, #FF, #9A},
                       {"purple1", #9B, #30, #FF},
                       {"darkseagreen3", #9B, #CD, #9B},
                       {"grey61", #9C, #9C, #9C},
                       {"gray61", #9C, #9C, #9C},
                       {"grey62", #9E, #9E, #9E},
                       {"gray62", #9E, #9E, #9E},
                       {"mediumpurple2", #9F, #79, #EE},
                       {"slategray3", #9F, #B6, #CD},
                       {"purple", #A0, #20, #F0},
                       {"sienna", #A0, #52, #2D},
                       {"grey63", #A1, #A1, #A1},
                       {"gray63", #A1, #A1, #A1},
                       {"lightsteelblue3", #A2, #B5, #CD},
                       {"darkolivegreen3", #A2, #CD, #5A},
                       {"gray64", #A3, #A3, #A3},
                       {"grey64", #A3, #A3, #A3},
                       {"lightskyblue2", #A4, #D3, #EE},
                       {"brown", #A5, #2A, #2A},
                       {"gray65", #A6, #A6, #A6},
                       {"grey65", #A6, #A6, #A6},
                       {"gray66", #A8, #A8, #A8},
                       {"grey66", #A8, #A8, #A8},
                       {"mediumpurple1", #AB, #82, #FF},
                       {"gray67", #AB, #AB, #AB},
                       {"grey67", #AB, #AB, #AB},
                       {"grey68", #AD, #AD, #AD},
                       {"gray68", #AD, #AD, #AD},
                       {"lightblue", #AD, #D8, #E6},
                       {"light_blue", #AD, #D8, #E6},
                       {"green_yellow", #AD, #FF, #2F},
                       {"greenyellow", #AD, #FF, #2F},
                       {"paleturquoise2", #AE, #EE, #EE},
                       {"paleturquoise", #AF, #EE, #EE},
                       {"pale_turquoise", #AF, #EE, #EE},
                       {"maroon", #B0, #30, #60},
                       {"grey69", #B0, #B0, #B0},
                       {"gray69", #B0, #B0, #B0},
                       {"light_steel_blue", #B0, #C4, #DE},
                       {"lightsteelblue", #B0, #C4, #DE},
                       {"powder_blue", #B0, #E0, #E6},
                       {"powderblue", #B0, #E0, #E6},
                       {"lightskyblue1", #B0, #E2, #FF},
                       {"firebrick", #B2, #22, #22},
                       {"darkorchid2", #B2, #3A, #EE},
                       {"lightblue2", #B2, #DF, #EE},
                       {"gray70", #B3, #B3, #B3},
                       {"grey70", #B3, #B3, #B3},
                       {"olivedrab2", #B3, #EE, #3A},
                       {"mediumorchid3", #B4, #52, #CD},
                       {"lightcyan3", #B4, #CD, #CD},
                       {"darkseagreen2", #B4, #EE, #B4},
                       {"gray71", #B5, #B5, #B5},
                       {"grey71", #B5, #B5, #B5},
                       {"darkgoldenrod", #B8, #86, #0B},
                       {"dark_goldenrod", #B8, #86, #0B},
                       {"gray72", #B8, #B8, #B8},
                       {"grey72", #B8, #B8, #B8},
                       {"slategray2", #B9, #D3, #EE},
                       {"medium_orchid", #BA, #55, #D3},
                       {"mediumorchid", #BA, #55, #D3},
                       {"grey73", #BA, #BA, #BA},
                       {"gray73", #BA, #BA, #BA},
                       {"paleturquoise1", #BB, #FF, #FF},
                       {"rosy_brown", #BC, #8F, #8F},
                       {"rosybrown", #BC, #8F, #8F},
                       {"lightsteelblue2", #BC, #D2, #EE},
                       {"darkolivegreen2", #BC, #EE, #68},
                       {"darkkhaki", #BD, #B7, #6B},
                       {"dark_khaki", #BD, #B7, #6B},
                       {"gray74", #BD, #BD, #BD},
                       {"grey74", #BD, #BD, #BD},
                       {"darkorchid1", #BF, #3E, #FF},
                       {"grey75", #BF, #BF, #BF},
                       {"gray75", #BF, #BF, #BF},
                       {"lightblue1", #BF, #EF, #FF},
                       {"grey", #C0, #C0, #C0},
                       {"gray", #C0, #C0, #C0},
                       {"olivedrab1", #C0, #FF, #3E},
                       {"honeydew3", #C1, #CD, #C1},
                       {"azure3", #C1, #CD, #CD},
                       {"darkseagreen1", #C1, #FF, #C1},
                       {"grey76", #C2, #C2, #C2},
                       {"gray76", #C2, #C2, #C2},
                       {"gray77", #C4, #C4, #C4},
                       {"grey77", #C4, #C4, #C4},
                       {"slategray1", #C6, #E2, #FF},
                       {"mediumvioletred", #C7, #15, #85},
                       {"grey78", #C7, #C7, #C7},
                       {"gray78", #C7, #C7, #C7},
                       {"gray79", #C9, #C9, #C9},
                       {"grey79", #C9, #C9, #C9},
                       {"lightsteelblue1", #CA, #E1, #FF},
                       {"darkolivegreen1", #CA, #FF, #70},
                       {"grey80", #CC, #CC, #CC},
                       {"gray80", #CC, #CC, #CC},
                       {"red3", #CD, #00, #00},
                       {"magenta3", #CD, #00, #CD},
                       {"deeppink3", #CD, #10, #76},
                       {"firebrick3", #CD, #26, #26},
                       {"maroon3", #CD, #29, #90},
                       {"violetred3", #CD, #32, #78},
                       {"brown3", #CD, #33, #33},
                       {"orangered3", #CD, #37, #00},
                       {"tomato3", #CD, #4F, #39},
                       {"indianred3", #CD, #55, #55},
                       {"coral3", #CD, #5B, #45},
                       {"indianred", #CD, #5C, #5C},
                       {"indian_red", #CD, #5C, #5C},
                       {"hotpink3", #CD, #60, #90},
                       {"darkorange3", #CD, #66, #00},
                       {"chocolate3", #CD, #66, #1D},
                       {"sienna3", #CD, #68, #39},
                       {"palevioletred3", #CD, #68, #89},
                       {"orchid3", #CD, #69, #C9},
                       {"salmon3", #CD, #70, #54},
                       {"lightsalmon3", #CD, #81, #62},
                       {"orange3", #CD, #85, #00},
                       {"peru", #CD, #85, #3F},
                       {"tan3", #CD, #85, #3F},
                       {"lightpink3", #CD, #8C, #95},
                       {"pink3", #CD, #91, #9E},
                       {"darkgoldenrod3", #CD, #95, #0C},
                       {"plum3", #CD, #96, #CD},
                       {"goldenrod3", #CD, #9B, #1D},
                       {"rosybrown3", #CD, #9B, #9B},
                       {"burlywood3", #CD, #AA, #7D},
                       {"gold3", #CD, #AD, #00},
                       {"peachpuff3", #CD, #AF, #95},
                       {"navajowhite3", #CD, #B3, #8B},
                       {"thistle3", #CD, #B5, #CD},
                       {"bisque3", #CD, #B7, #9E},
                       {"mistyrose3", #CD, #B7, #B5},
                       {"wheat3", #CD, #BA, #96},
                       {"lightgoldenrod3", #CD, #BE, #70},
                       {"antiquewhite3", #CD, #C0, #B0},
                       {"lavenderblush3", #CD, #C1, #C5},
                       {"seashell3", #CD, #C5, #BF},
                       {"khaki3", #CD, #C6, #73},
                       {"cornsilk3", #CD, #C8, #B1},
                       {"lemonchiffon3", #CD, #C9, #A5},
                       {"snow3", #CD, #C9, #C9},
                       {"yellow3", #CD, #CD, #00},
                       {"lightyellow3", #CD, #CD, #B4},
                       {"ivory3", #CD, #CD, #C1},
                       {"grey81", #CF, #CF, #CF},
                       {"gray81", #CF, #CF, #CF},
                       {"violet_red", #D0, #20, #90},
                       {"violetred", #D0, #20, #90},
                       {"mediumorchid2", #D1, #5F, #EE},
                       {"grey82", #D1, #D1, #D1},
                       {"gray82", #D1, #D1, #D1},
                       {"lightcyan2", #D1, #EE, #EE},
                       {"chocolate", #D2, #69, #1E},
                       {"tan", #D2, #B4, #8C},
                       {"light_grey", #D3, #D3, #D3},
                       {"lightgray", #D3, #D3, #D3},
                       {"lightgrey", #D3, #D3, #D3},
                       {"light_gray", #D3, #D3, #D3},
                       {"grey83", #D4, #D4, #D4},
                       {"gray83", #D4, #D4, #D4},
                       {"grey84", #D6, #D6, #D6},
                       {"gray84", #D6, #D6, #D6},
                       {"thistle", #D8, #BF, #D8},
                       {"gray85", #D9, #D9, #D9},
                       {"grey85", #D9, #D9, #D9},
                       {"orchid", #DA, #70, #D6},
                       {"goldenrod", #DA, #A5, #20},
                       {"pale_violet_red", #DB, #70, #93},
                       {"palevioletred", #DB, #70, #93},
                       {"gray86", #DB, #DB, #DB},
                       {"grey86", #DB, #DB, #DB},
                       {"gainsboro", #DC, #DC, #DC},
                       {"plum", #DD, #A0, #DD},
                       {"burlywood", #DE, #B8, #87},
                       {"gray87", #DE, #DE, #DE},
                       {"grey87", #DE, #DE, #DE},
                       {"mediumorchid1", #E0, #66, #FF},
                       {"grey88", #E0, #E0, #E0},
                       {"gray88", #E0, #E0, #E0},
                       {"honeydew2", #E0, #EE, #E0},
                       {"azure2", #E0, #EE, #EE},
                       {"light_cyan", #E0, #FF, #FF},
                       {"lightcyan1", #E0, #FF, #FF},
                       {"lightcyan", #E0, #FF, #FF},
                       {"gray89", #E3, #E3, #E3},
                       {"grey89", #E3, #E3, #E3},
                       {"grey90", #E5, #E5, #E5},
                       {"gray90", #E5, #E5, #E5},
                       {"lavender", #E6, #E6, #FA},
                       {"gray91", #E8, #E8, #E8},
                       {"grey91", #E8, #E8, #E8},
                       {"dark_salmon", #E9, #96, #7A},
                       {"darksalmon", #E9, #96, #7A},
                       {"gray92", #EB, #EB, #EB},
                       {"grey92", #EB, #EB, #EB},
                       {"grey93", #ED, #ED, #ED},
                       {"gray93", #ED, #ED, #ED},
                       {"red2", #EE, #00, #00},
                       {"magenta2", #EE, #00, #EE},
                       {"deeppink2", #EE, #12, #89},
                       {"firebrick2", #EE, #2C, #2C},
                       {"maroon2", #EE, #30, #A7},
                       {"violetred2", #EE, #3A, #8C},
                       {"brown2", #EE, #3B, #3B},
                       {"orangered2", #EE, #40, #00},
                       {"tomato2", #EE, #5C, #42},
                       {"indianred2", #EE, #63, #63},
                       {"coral2", #EE, #6A, #50},
                       {"hotpink2", #EE, #6A, #A7},
                       {"darkorange2", #EE, #76, #00},
                       {"chocolate2", #EE, #76, #21},
                       {"sienna2", #EE, #79, #42},
                       {"palevioletred2", #EE, #79, #9F},
                       {"orchid2", #EE, #7A, #E9},
                       {"salmon2", #EE, #82, #62},
                       {"violet", #EE, #82, #EE},
                       {"lightsalmon2", #EE, #95, #72},
                       {"orange2", #EE, #9A, #00},
                       {"tan2", #EE, #9A, #49},
                       {"lightpink2", #EE, #A2, #AD},
                       {"pink2", #EE, #A9, #B8},
                       {"darkgoldenrod2", #EE, #AD, #0E},
                       {"plum2", #EE, #AE, #EE},
                       {"goldenrod2", #EE, #B4, #22},
                       {"rosybrown2", #EE, #B4, #B4},
                       {"burlywood2", #EE, #C5, #91},
                       {"gold2", #EE, #C9, #00},
                       {"peachpuff2", #EE, #CB, #AD},
                       {"navajowhite2", #EE, #CF, #A1},
                       {"thistle2", #EE, #D2, #EE},
                       {"bisque2", #EE, #D5, #B7},
                       {"mistyrose2", #EE, #D5, #D2},
                       {"wheat2", #EE, #D8, #AE},
                       {"lightgoldenrod2", #EE, #DC, #82},
                       {"light_goldenrod", #EE, #DD, #82},
                       {"lightgoldenrod", #EE, #DD, #82},
                       {"antiquewhite2", #EE, #DF, #CC},
                       {"lavenderblush2", #EE, #E0, #E5},
                       {"seashell2", #EE, #E5, #DE},
                       {"khaki2", #EE, #E6, #85},
                       {"pale_goldenrod", #EE, #E8, #AA},
                       {"palegoldenrod", #EE, #E8, #AA},
                       {"cornsilk2", #EE, #E8, #CD},
                       {"lemonchiffon2", #EE, #E9, #BF},
                       {"snow2", #EE, #E9, #E9},
                       {"yellow2", #EE, #EE, #00},
                       {"lightyellow2", #EE, #EE, #D1},
                       {"ivory2", #EE, #EE, #E0},
                       {"lightcoral", #F0, #80, #80},
                       {"light_coral", #F0, #80, #80},
                       {"khaki", #F0, #E6, #8C},
                       {"gray94", #F0, #F0, #F0},
                       {"grey94", #F0, #F0, #F0},
                       {"alice_blue", #F0, #F8, #FF},
                       {"aliceblue", #F0, #F8, #FF},
                       {"honeydew1", #F0, #FF, #F0},
                       {"honeydew", #F0, #FF, #F0},
                       {"azure", #F0, #FF, #FF},
                       {"azure1", #F0, #FF, #FF},
                       {"gray95", #F2, #F2, #F2},
                       {"grey95", #F2, #F2, #F2},
                       {"sandybrown", #F4, #A4, #60},
                       {"sandy_brown", #F4, #A4, #60},
                       {"wheat", #F5, #DE, #B3},
                       {"beige", #F5, #F5, #DC},
                       {"whitesmoke", #F5, #F5, #F5},
                       {"grey96", #F5, #F5, #F5},
                       {"gray96", #F5, #F5, #F5},
                       {"white_smoke", #F5, #F5, #F5},
                       {"mintcream", #F5, #FF, #FA},
                       {"mint_cream", #F5, #FF, #FA},
                       {"grey97", #F7, #F7, #F7},
                       {"gray97", #F7, #F7, #F7},
                       {"ghost_white", #F8, #F8, #FF},
                       {"ghostwhite", #F8, #F8, #FF},
                       {"salmon", #FA, #80, #72},
                       {"antiquewhite", #FA, #EB, #D7},
                       {"antique_white", #FA, #EB, #D7},
                       {"linen", #FA, #F0, #E6},
                       {"light_goldenrod_yellow", #FA, #FA, #D2},
                       {"lightgoldenrodyellow", #FA, #FA, #D2},
                       {"gray98", #FA, #FA, #FA},
                       {"grey98", #FA, #FA, #FA},
                       {"gray99", #FC, #FC, #FC},
                       {"grey99", #FC, #FC, #FC},
                       {"old_lace", #FD, #F5, #E6},
                       {"oldlace", #FD, #F5, #E6},
                       {"red1", #FF, #00, #00},
                       {"red", #FF, #00, #00},
                       {"magenta1", #FF, #00, #FF},
                       {"magenta", #FF, #00, #FF},
                       {"deeppink1", #FF, #14, #93},
                       {"deeppink", #FF, #14, #93},
                       {"deep_pink", #FF, #14, #93},
                       {"firebrick1", #FF, #30, #30},
                       {"maroon1", #FF, #34, #B3},
                       {"violetred1", #FF, #3E, #96},
                       {"brown1", #FF, #40, #40},
                       {"orangered", #FF, #45, #00},
                       {"orangered1", #FF, #45, #00},
                       {"orange_red", #FF, #45, #00},
                       {"tomato1", #FF, #63, #47},
                       {"tomato", #FF, #63, #47},
                       {"hotpink", #FF, #69, #B4},
                       {"hot_pink", #FF, #69, #B4},
                       {"indianred1", #FF, #6A, #6A},
                       {"hotpink1", #FF, #6E, #B4},
                       {"coral1", #FF, #72, #56},
                       {"darkorange1", #FF, #7F, #00},
                       {"chocolate1", #FF, #7F, #24},
                       {"coral", #FF, #7F, #50},
                       {"sienna1", #FF, #82, #47},
                       {"palevioletred1", #FF, #82, #AB},
                       {"orchid1", #FF, #83, #FA},
                       {"dark_orange", #FF, #8C, #00},
                       {"darkorange", #FF, #8C, #00},
                       {"salmon1", #FF, #8C, #69},
                       {"lightsalmon1", #FF, #A0, #7A},
                       {"lightsalmon", #FF, #A0, #7A},
                       {"light_salmon", #FF, #A0, #7A},
                       {"orange", #FF, #A5, #00},
                       {"orange1", #FF, #A5, #00},
                       {"tan1", #FF, #A5, #4F},
                       {"lightpink1", #FF, #AE, #B9},
                       {"pink1", #FF, #B5, #C5},
                       {"lightpink", #FF, #B6, #C1},
                       {"light_pink", #FF, #B6, #C1},
                       {"darkgoldenrod1", #FF, #B9, #0F},
                       {"plum1", #FF, #BB, #FF},
                       {"pink", #FF, #C0, #CB},
                       {"goldenrod1", #FF, #C1, #25},
                       {"rosybrown1", #FF, #C1, #C1},
                       {"burlywood1", #FF, #D3, #9B},
                       {"gold1", #FF, #D7, #00},
                       {"gold", #FF, #D7, #00},
                       {"peachpuff", #FF, #DA, #B9},
                       {"peachpuff1", #FF, #DA, #B9},
                       {"peach_puff", #FF, #DA, #B9},
                       {"navajowhite", #FF, #DE, #AD},
                       {"navajo_white", #FF, #DE, #AD},
                       {"navajowhite1", #FF, #DE, #AD},
                       {"thistle1", #FF, #E1, #FF},
                       {"moccasin", #FF, #E4, #B5},
                       {"bisque1", #FF, #E4, #C4},
                       {"bisque", #FF, #E4, #C4},
                       {"mistyrose", #FF, #E4, #E1},
                       {"misty_rose", #FF, #E4, #E1},
                       {"mistyrose1", #FF, #E4, #E1},
                       {"wheat1", #FF, #E7, #BA},
                       {"blanched_almond", #FF, #EB, #CD},
                       {"blanchedalmond", #FF, #EB, #CD},
                       {"lightgoldenrod1", #FF, #EC, #8B},
                       {"papayawhip", #FF, #EF, #D5},
                       {"papaya_whip", #FF, #EF, #D5},
                       {"antiquewhite1", #FF, #EF, #DB},
                       {"lavenderblush1", #FF, #F0, #F5},
                       {"lavender_blush", #FF, #F0, #F5},
                       {"lavenderblush", #FF, #F0, #F5},
                       {"seashell1", #FF, #F5, #EE},
                       {"seashell", #FF, #F5, #EE},
                       {"khaki1", #FF, #F6, #8F},
                       {"cornsilk", #FF, #F8, #DC},
                       {"cornsilk1", #FF, #F8, #DC},
                       {"lemon_chiffon", #FF, #FA, #CD},
                       {"lemonchiffon1", #FF, #FA, #CD},
                       {"lemonchiffon", #FF, #FA, #CD},
                       {"floral_white", #FF, #FA, #F0},
                       {"floralwhite", #FF, #FA, #F0},
                       {"snow1", #FF, #FA, #FA},
                       {"snow", #FF, #FA, #FA},
                       {"yellow1", #FF, #FF, #00},
                       {"yellow", #FF, #FF, #00},
                       {"light_yellow", #FF, #FF, #E0},
                       {"lightyellow", #FF, #FF, #E0},
                       {"lightyellow1", #FF, #FF, #E0},
                       {"ivory1", #FF, #FF, #F0},
                       {"ivory", #FF, #FF, #F0},
                       {"grey100", #FF, #FF, #FF},
                       {"white", #FF, #FF, #FF},
                       {"gray100", #FF, #FF, #FF},
                       {"gray100", #FF, #FF, #FF}}

--------------------------------------------------------------------------------
--  Window Window1

sequence IDEFlags
global constant Window1 = createEx(Window, "XPM Icon Editor", Controls, 0, 0, 591, 540,
                                   {WS_DLGFRAME, WS_SYSMENU, WS_MINIMIZEBOX}, 0)
setVisible(Window1, w32False)
setIcon(Window1,"Resources\\XPMmer.ico")
constant File = createEx(Menu, "&File", Window1, 0, 0, 0, 0, 0, 0)
constant ReadXPM = createEx(MenuItem, "Read &XPM file", File, 0, 0, 0, 0, 0, 0)
constant ReadEuXPM = createEx(MenuItem, "Read &Euphoria XPM", File, 0, 0, 0, 0, 0, 0)
constant ReadIcon = createEx(MenuItem, "Read &Icon or Bitmap file", File, 0, 0, 0, 0, 0, 0)
constant MenuItem_103 = createEx(MenuItem, "-", File, 0, 0, 0, 0, 0, 0)
constant Exit = createEx(MenuItem, "E&xit", File, 0, 0, 0, 0, 0, 0)
constant Menu_102 = createEx(Menu, "|", Window1, 0, 0, 0, 0, 0, 0)
constant Options = createEx(Menu, "&Options", Window1, 0, 0, 0, 0, 0, 0)
constant AddBorder = createEx(MenuItem, "Add &frame around preview icon", Options, 0, 0, 0, 0, 0, 0)
constant AddDotty = createEx(MenuItem, "Add &dot to transparent color", Options, 0, 0, 0, 0, 0, 0)
constant RemoveGridLines = createEx(MenuItem, "Remove &grid lines round transparent pixels", Options, 0, 0, 0, 0, 0, 0)
constant Menu_108 = createEx(Menu, "|", Window1, 0, 0, 0, 0, 0, 0)
constant Help = createEx(Menu, "&Help", Window1, 0, 0, 0, 0, 0, 0)
constant HowTo = createEx(MenuItem, "&How to use the program", Help, 0, 0, 0, 0, 0, 0)
setVisible(HowTo, w32False)
constant About = createEx(MenuItem, "&About ...", Help, 0, 0, 0, 0, 0, 0)
constant Menu_109 = createEx(Menu, "|", Window1, 0, 0, 0, 0, 0, 0)
IDEFlags = classDefaults(Window, {{1, {WS_SYSMENU}},{2, {0}}})
constant Grid = createEx(Window, "CWindow1822", Window1, 230, 60, 320, 320, w32or_all({WS_CHILD, WS_CLIPSIBLINGS, WS_BORDER}), 0)
openWindow(Grid, Normal)
moveZOrder(Grid, HWND_TOP)
setWindowBackColor(Grid,4210752)
IDEFlags = classDefaults(Window, {{CCwinstyle,{CS_NOCLOSE}}})
IDEFlags = classDefaults(Window, {{1, {WS_SYSMENU}},{2, {WS_EX_CLIENTEDGE}}})
constant AskBlock = createEx(Window, "Operation ?", Window1, 400, 90, 85, 135, w32or_all({WS_CHILD, WS_CLIPSIBLINGS, WS_BORDER, WS_DLGFRAME, WS_CAPTION, WS_SYSMENU}),
                             w32or_all({WS_EX_CLIENTEDGE}))
openWindow(AskBlock, Normal)
moveZOrder(AskBlock, HWND_TOP)
setVisible(AskBlock, w32False)
IDEFlags = classDefaults(Window, {{CCwinstyle,{0}}})
IDEFlags = classDefaults(Window, {{1, {WS_SYSMENU}},{2, {0}}})
constant Palette = createEx(Window, "", Window1, 45, 95, 145, 210, w32or_all({WS_CHILD, WS_CLIPSIBLINGS, WS_BORDER}), 0)
openWindow(Palette, Normal)
moveZOrder(Palette, HWND_TOP)
setFont(Palette,"Arial",12,Normal+Bold)
setIcon(Palette,"Resources\\XPMmer.ico")
constant MyToolBar = createEx(ToolBar, "", Window1, 0, -36, 456, 36, 0, 0)
constant Pen = createEx(PictureButton, "", MyToolBar, 0, 0, 32, 32, 0, 0)
constant Line = createEx(PictureButton, "", MyToolBar, 32, 0, 32, 32, 0, 0)
constant Rectangle = createEx(PictureButton, "", MyToolBar, 64, 0, 32, 32, 0, 0)
constant FilledRectangle = createEx(PictureButton, "", MyToolBar, 96, 0, 32, 32, 0, 0)
constant RoundedRectangle = createEx(PictureButton, "", MyToolBar, 128, 0, 32, 32, 0, 0)
constant FilledRoundedRectangle = createEx(PictureButton, "", MyToolBar, 160, 0, 32, 32, 0, 0)
constant Circle = createEx(PictureButton, "", MyToolBar, 192, 0, 32, 32, 0, 0)
constant FilledCircle = createEx(PictureButton, "", MyToolBar, 224, 0, 32, 32, 0, 0)
constant Erase = createEx(PictureButton, "", MyToolBar, 256, 0, 32, 32, 0, 0)
constant Clear = createEx(PictureButton, "", MyToolBar, 288, 0, 36, 32, 0, 0)
constant IconSize = createEx(PushButton, "Size = 32", MyToolBar, 324, 0, 72, 32, 0, 0)
setFont(IconSize,"Arial",10,Normal+Bold)
constant BlockOps = createEx(PictureButton, "", MyToolBar, 396, 0, 32, 32, 0, 0)
setIcon(BlockOps,"Resources\\XPMmer.ico")
constant Rotate = createEx(PictureButton, "", MyToolBar, 428, 0, 32, 32, 0, 0)
setVisible(Rotate, w32False)
constant RotateD = createEx(PictureButton, "", MyToolBar, 428, 0, 32, 32, 0, 0)
setVisible(RotateD, w32True)
constant Undo = createEx(PictureButton, "", MyToolBar, 460, 0, 32, 32, 0, 0)
constant UndoAll = createEx(PictureButton, "", MyToolBar, 492, 0, 32, 32, 0, 0)
constant Quit = createEx(PictureButton, "", MyToolBar, 524, 0, 32, 32, 0, 0)
constant Info = createEx(CText, "", Window1, 45, 4, 145, 20, 0, 0)
setFont(Info,"Arial",10,Normal+Bold)
constant ShowFileName = createEx(LText, "", Window1, 230, 9, 370, 20, 0, 0)
setTextColor(ShowFileName,4194304)
setFont(ShowFileName,"Arial",10,Normal+Bold)
constant ColorPaletteText = createEx(CText, "Color Palette", Window1, 45, 24, 145, 20, 0, 0)
setFont(ColorPaletteText,"Arial",12,Normal+Bold)
constant ShowStyle = createEx(CText, "", Window1, 230, 34, 315, 20, 0, 0)
setFont(ShowStyle,"Arial",10,Normal+Bold)
constant BlockMove = createEx(PushButton, "Move?", AskBlock, 6, 2, 65, 30, 0, 0)
constant BlockCopy = createEx(PushButton, "Copy?", AskBlock, 6, 32, 65, 30, 0, 0)
constant BlockCancel = createEx(CancelButton, "Cancel", AskBlock, 6, 62, 65, 30, 0, 0)
constant PaletteInfoGroup = createEx(Group, "", Window1, 45, 269, 145, 35, 0, 0)
constant LText1935 = createEx(CText, "T = Transparent", PaletteInfoGroup, 5, 10, 135, 20, 0, 0)
constant IconText = createEx(CText, "Icon", Window1, 80, 319, 50, 20, 0, 0)
setFont(IconText,"Arial",10,Normal+Bold)
constant MyIcon = createEx(Icon, "", Window1, 150, 319, 36, 36, 0, 0)
setWindowBackColor(MyIcon,-2)
constant PreviewText = createEx(CText, "Preview", Window1, 70, 339, 70, 20, 0, 0)
setFont(PreviewText,"Arial",10,Normal+Bold)
constant IDummy = createEx(Icon, "", Window1, 50, 369, 50, 50, 0, 0)
setVisible(IDummy, w32False)
constant Dummy = createEx(Pixmap, "", Window1, 115, 369, 50, 50, 0, 0)
setVisible(Dummy, w32False)
constant GridInfoGroup = createEx(Group, "", Window1, 218, 375, 376, 76, 0, 0)
constant LText1922 = createEx(LText, "Use right button to sample color at cursor", GridInfoGroup, 8, 5, 364, 32, 0, 0)
constant LText1937 = createEx(LText, "XPMmer Version 2.3", Window1, 4, 404, 208, 30, 0, 0)
setFont(LText1937,"Arial",12,Normal+Bold)
constant LText1923 = createEx(LText, "Use left button to draw pixels or shapes", GridInfoGroup, 8, 37, 364, 36, 0, 0)
setHint(Pen,"Pen drawing")
setHint(Line,"Line")
setHint(Rectangle,"Hollow rectangle")
setHint(FilledRectangle,"Solid rectangle")
setHint(RoundedRectangle,"Hollow rounded rectangle")
setHint(FilledRoundedRectangle,"Solid rounded rectangle")
setHint(Circle,"Hollow ellipse")
setHint(FilledCircle,"Solid ellipse")
setHint(Erase,"Erase to Transparent")
setHint(Clear,"Clear to current color")
setHint(Undo,"Undo")
setHint(UndoAll,"Undo ALL changes\nsince last load")
setHint(Quit,"Quit XPMmer")
setHint(Info,"Current cursor position")
setHint(ShowFileName,"Base filename to save to")
setHint(ShowStyle,"Current drawing style")
setHint(MyIcon,"Icon preview")
---------------------------GENERATED BY IDE--------------------
--add emulated xpmmers to button
sequence IDEBmp
atom IDEdib
--integer IDEresult
atom IDEresult
    setTransparentColor(getSysColor(COLOR_BTNFACE))
    IDEBmp = xpmToEuBmp(
{
"32 32 5 1",
"o c None",
", c #000000",
"A c #E10000",
"G c #0000E1",
"e c #E1E1E1",
"oooooooooooooooooooooooooooooGGo",
"ooooooooooooooooooooooooooooGGGo",
"ooooooooooooooooooooooooooGGGGoo",
"oooooooooooooooooooooooooGGGGooo",
"ooooooooooooooooooooooooGGGGGooo",
"oooooooooooooooooooooooGGGGGoooo",
"oooooooooooooooooooooGGGGGGooooo",
"ooooooooooooooooooooGGGGGGoooooo",
"oooooooooooooooooooGGGGGGooooooo",
"ooooooooooooooooooGGGGGGGooooooo",
"oooooooooooooooooGGGGGGGoooooooo",
"ooooooooooooooooGGGGGGGooooooooo",
"ooooooooooooooo,,GGGGGoooooooooo",
"oooooooooooooo,,,,GGGooooooooooo",
"ooooooooooooo,,,,,,Goooooooooooo",
"oooooooooooo,,,,,,,ooooooooooooo",
"ooooooooooo,,,,,,,oooooooooooooo",
"oooooooooo,,,,,,,ooooooAoooooooo",
"ooooooooo,,,,,,,ooooooAooooooooo",
"oooooooo,,,,,,,ooooooAoooooooooo",
"ooooooo,,,,,,,ooooooAooooooooooo",
"oooooo,,,,,,,oooooooAooooooooooo",
"ooooo,,e,,,,ooooooooAooooooooooo",
"ooooo,eee,,ooooooooooAoooooooooo",
"oooo,eee,,ooooooooooooAooooooooo",
"oooo,,e,,ooooooooooooooAoooooooo",
"ooo,,,,ooooAAAAooooooooAoooooooo",
"ooo,,ooooAAooooAoooooooAoooooooo",
"oo,oooooAoooooooAooooooAoooooooo",
"oooAoooAoooooooooAAoooAooooooooo",
"ooooAAAooooooooooooAAAoooooooooo",
"oooooooooooooooooooooooooooooooo"
}
)
    IDEdib = createDIB({IDEBmp[1],IDEBmp[2]})
    IDEresult = sendMessage(Pen, BM_SETIMAGE, IMAGE_BITMAP, IDEdib)
------------------------------------------------------------------------------- 
    setTransparentColor(getSysColor(COLOR_BTNFACE))
    IDEBmp = xpmToEuBmp(
{
"32 32 3 1",
"o c None",
", c #000000",
"A c #E10000",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"ooooooooooooooooooooooooo,oooooo",
"ooooooooooooooooooooooooo,oooooo",
"ooooooooooooooooooooooo,,,,,oooo",
"ooooooooooooooooooooooooA,oooooo",
"oooooooooooooooooooooooAA,oooooo",
"ooooooooooooooooooooooAAoooooooo",
"oooooooooooooooooooooAAooooooooo",
"ooooooooooooooooooooAAoooooooooo",
"oooooooooooooooooooAAooooooooooo",
"ooooooooooooooooooAAoooooooooooo",
"oooooooooooooooooAAooooooooooooo",
"ooooooooooooooooAAoooooooooooooo",
"oooooooooooooooAAooooooooooooooo",
"ooooooooooooooAAoooooooooooooooo",
"oooooooooooooAAooooooooooooooooo",
"ooooooooooooAAoooooooooooooooooo",
"oooooooooooAAooooooooooooooooooo",
"ooooooooooAAoooooooooooooooooooo",
"oooooooooAAooooooooooooooooooooo",
"ooooooooAAoooooooooooooooooooooo",
"ooooo,oAAooooooooooooooooooooooo",
"ooooo,AAoooooooooooooooooooooooo",
"ooo,,,,,oooooooooooooooooooooooo",
"ooooo,oooooooooooooooooooooooooo",
"ooooo,oooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo"
}
)
    IDEdib = createDIB({IDEBmp[1],IDEBmp[2]})
    IDEresult = sendMessage(Line, BM_SETIMAGE, IMAGE_BITMAP, IDEdib)
------------------------------------------------------------------------------- 
    setTransparentColor(getSysColor(COLOR_BTNFACE))
    IDEBmp = xpmToEuBmp(
{
"32 32 3 1",
"o c None",
", c #000000",
"G c #0000E1",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"ooooooooooooooooooooooooooooo,oo",
"ooooooooooooooooooooooooooooo,oo",
"ooGGGGGGGGGGGGGGGGGGGGGGGGG,,,,,",
"ooGGGGGGGGGGGGGGGGGGGGGGGGGGG,oo",
"ooGGooooooooooooooooooooooooG,oo",
"ooGGooooooooooooooooooooooooGGoo",
"ooGGooooooooooooooooooooooooGGoo",
"ooGGooooooooooooooooooooooooGGoo",
"ooGGooooooooooooooooooooooooGGoo",
"ooGGooooooooooooooooooooooooGGoo",
"ooGGooooooooooooooooooooooooGGoo",
"ooGGooooooooooooooooooooooooGGoo",
"ooGGooooooooooooooooooooooooGGoo",
"ooGGooooooooooooooooooooooooGGoo",
"ooGGooooooooooooooooooooooooGGoo",
"ooGGooooooooooooooooooooooooGGoo",
"ooGGooooooooooooooooooooooooGGoo",
"ooGGooooooooooooooooooooooooGGoo",
"oo,GooooooooooooooooooooooooGGoo",
"oo,GGGGGGGGGGGGGGGGGGGGGGGGGGGoo",
",,,,,GGGGGGGGGGGGGGGGGGGGGGGGGoo",
"oo,ooooooooooooooooooooooooooooo",
"oo,ooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo"
}
)
    IDEdib = createDIB({IDEBmp[1],IDEBmp[2]})
    IDEresult = sendMessage(Rectangle, BM_SETIMAGE, IMAGE_BITMAP, IDEdib)
------------------------------------------------------------------------------- 
    setTransparentColor(getSysColor(COLOR_BTNFACE))
    IDEBmp = xpmToEuBmp(
{
"32 32 4 1",
"o c None",
"& c #006400",
", c #000000",
"N c #4BE14B",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooo,ooooooooo",
"oooooooooooooooooooooo,ooooooooo",
"ooooo&&&&&&&&&&&&&&&,,,,,ooooooo",
"ooooo&NNNNNNNNNNNNNNNN,ooooooooo",
"ooooo&NNNNNNNNNNNNNNNN,ooooooooo",
"ooooo&NNNNNNNNNNNNNNNN&ooooooooo",
"ooooo&NNNNNNNNNNNNNNNN&ooooooooo",
"ooooo&NNNNNNNNNNNNNNNN&ooooooooo",
"ooooo&NNNNNNNNNNNNNNNN&ooooooooo",
"ooooo&NNNNNNNNNNNNNNNN&ooooooooo",
"ooooo&NNNNNNNNNNNNNNNN&ooooooooo",
"ooooo&NNNNNNNNNNNNNNNN&ooooooooo",
"ooooo&NNNNNNNNNNNNNNNN&ooooooooo",
"ooooo&NNNNNNNNNNNNNNNN&ooooooooo",
"ooooo&NNNNNNNNNNNNNNNN&ooooooooo",
"ooooo&NNNNNNNNNNNNNNNN&ooooooooo",
"ooooo&NNNNNNNNNNNNNNNN&ooooooooo",
"ooooo&NNNNNNNNNNNNNNNN&ooooooooo",
"ooooo&NNNNNNNNNNNNNNNN&ooooooooo",
"ooooo,NNNNNNNNNNNNNNNN&ooooooooo",
"ooooo,NNNNNNNNNNNNNNNN&ooooooooo",
"ooo,,,,,&&&&&&&&&&&&&&&ooooooooo",
"ooooo,oooooooooooooooooooooooooo",
"ooooo,oooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo"
}
)
    IDEdib = createDIB({IDEBmp[1],IDEBmp[2]})
    IDEresult = sendMessage(FilledRectangle, BM_SETIMAGE, IMAGE_BITMAP, IDEdib)
------------------------------------------------------------------------------- 
    setTransparentColor(getSysColor(COLOR_BTNFACE))
    IDEBmp = xpmToEuBmp(
{
"32 32 3 1",
"o c None",
"& c #006400",
", c #000000",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"ooooooooooooooooooooooooooo,oooo",
"ooooooooooooooooooooooooooo,oooo",
"oooooooooo&&&&&&&&&&&&&&o,,,,,oo",
"oooooooo&&&&&&&&&&&&&&&&&&o,oooo",
"ooooooo&&&oooooooooooooo&&&,oooo",
"ooooooo&&oooooooooooooooo&&ooooo",
"oooooo&&oooooooooooooooooo&&oooo",
"oooooo&&oooooooooooooooooo&&oooo",
"oooooo&&oooooooooooooooooo&&oooo",
"oooooo&&oooooooooooooooooo&&oooo",
"oooooo&&oooooooooooooooooo&&oooo",
"oooooo&&oooooooooooooooooo&&oooo",
"oooooo&&oooooooooooooooooo&&oooo",
"oooooo&&oooooooooooooooooo&&oooo",
"oooooo&&oooooooooooooooooo&&oooo",
"oooooo&&oooooooooooooooooo&&oooo",
"oooooo&&oooooooooooooooooo&&oooo",
"oooooo&&oooooooooooooooooo&&oooo",
"oooooo&&oooooooooooooooooo&&oooo",
"oooooo&&oooooooooooooooooo&&oooo",
"ooooooo&&oooooooooooooooo&&ooooo",
"oooooo,&&&oooooooooooooo&&&ooooo",
"oooooo,o&&&&&&&&&&&&&&&&&&oooooo",
"oooo,,,,,o&&&&&&&&&&&&&&oooooooo",
"oooooo,ooooooooooooooooooooooooo",
"oooooo,ooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo"
}
)
    IDEdib = createDIB({IDEBmp[1],IDEBmp[2]})
    IDEresult = sendMessage(RoundedRectangle, BM_SETIMAGE, IMAGE_BITMAP, IDEdib)
------------------------------------------------------------------------------- 
    setTransparentColor(getSysColor(COLOR_BTNFACE))
    IDEBmp = xpmToEuBmp(
{
"32 32 4 1",
"o c None",
", c #000000",
": c #00AF00",
"X c #7DE17D",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"ooooooooooooooooooooooooo,oooooo",
"ooooooooooooooooooooooooo,oooooo",
"ooooooooo::::::::::::::,,,,,oooo",
"ooooooo:::XXXXXXXXXXXX:::,oooooo",
"ooooooo:XXXXXXXXXXXXXXXX:,oooooo",
"oooooo::XXXXXXXXXXXXXXXX::oooooo",
"oooooo:XXXXXXXXXXXXXXXXXX:oooooo",
"oooooo:XXXXXXXXXXXXXXXXXX:oooooo",
"oooooo:XXXXXXXXXXXXXXXXXX:oooooo",
"oooooo:XXXXXXXXXXXXXXXXXX:oooooo",
"oooooo:XXXXXXXXXXXXXXXXXX:oooooo",
"oooooo:XXXXXXXXXXXXXXXXXX:oooooo",
"oooooo:XXXXXXXXXXXXXXXXXX:oooooo",
"oooooo:XXXXXXXXXXXXXXXXXX:oooooo",
"oooooo:XXXXXXXXXXXXXXXXXX:oooooo",
"oooooo:XXXXXXXXXXXXXXXXXX:oooooo",
"oooooo:XXXXXXXXXXXXXXXXXX:oooooo",
"oooooo::XXXXXXXXXXXXXXXX::oooooo",
"oooooo,:XXXXXXXXXXXXXXXX:ooooooo",
"oooooo,:::XXXXXXXXXXXX:::ooooooo",
"oooo,,,,,::::::::::::::ooooooooo",
"oooooo,ooooooooooooooooooooooooo",
"oooooo,ooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo"
}
)
    IDEdib = createDIB({IDEBmp[1],IDEBmp[2]})
    IDEresult = sendMessage(FilledRoundedRectangle, BM_SETIMAGE, IMAGE_BITMAP, IDEdib)
------------------------------------------------------------------------------- 
    setTransparentColor(getSysColor(COLOR_BTNFACE))
    IDEBmp = xpmToEuBmp(
{
"32 32 4 1",
"o c None",
", c #000000",
"> c #640096",
"H c #7D00C8",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooo,ooo",
"oooooooooooooooooooooooooooo,ooo",
"ooooooooooooooHHHHoooooooo,,,,,o",
"ooooooooooHHHH>>>>HHHHoooooo,ooo",
"oooooooooHH>>>oooo>>>HHooooo,ooo",
"oooooooHH>>oooooooooo>>HHooooooo",
"ooooooHH>oooooooooooooo>HHoooooo",
"ooooooH>oooooooooooooooo>Hoooooo",
"oooooH>oooooooooooooooooo>Hooooo",
"ooooHH>oooooooooooooooooo>HHoooo",
"ooooH>oooooooooooooooooooo>Hoooo",
"ooooH>oooooooooooooooooooo>Hoooo",
"ooooHooooooooooooooooooooooHoooo",
"oooH>oooooooooooooooooooooo>Hooo",
"oooH>oooooooooooooooooooooo>Hooo",
"oooH>oooooooooooooooooooooo>Hooo",
"oooH>oooooooooooooooooooooo>Hooo",
"ooooHooooooooooooooooooooooHoooo",
"ooooH>oooooooooooooooooooo>Hoooo",
"ooooH>oooooooooooooooooooo>Hoooo",
"ooooHH>oooooooooooooooooo>HHoooo",
"oooooH>oooooooooooooooooo>Hooooo",
"ooooooH>oooooooooooooooo>Hoooooo",
"ooooooHH>oooooooooooooo>HHoooooo",
"oooooooHH>>oooooooooo>>HHooooooo",
"ooo,oooooHH>>>oooo>>>HHooooooooo",
"ooo,ooooooHHHH>>>>HHHHoooooooooo",
"o,,,,,ooooooooHHHHoooooooooooooo",
"ooo,oooooooooooooooooooooooooooo",
"ooo,oooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo"
}
)
    IDEdib = createDIB({IDEBmp[1],IDEBmp[2]})
    IDEresult = sendMessage(Circle, BM_SETIMAGE, IMAGE_BITMAP, IDEdib)
------------------------------------------------------------------------------- 
    setTransparentColor(getSysColor(COLOR_BTNFACE))
    IDEBmp = xpmToEuBmp(
{
"32 32 3 1",
"o c None",
", c #000000",
"K c #E14B4B",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooo,ooo",
"oooooooooooooooooooooooooooo,ooo",
"oooooooooooo,,,,,,,,oooooo,,,,,o",
"ooooooooo,,,KKKKKKKK,,,ooooo,ooo",
"oooooooo,KKKKKKKKKKKKKK,oooo,ooo",
"oooooo,,KKKKKKKKKKKKKKKK,,oooooo",
"ooooo,KKKKKKKKKKKKKKKKKKKK,ooooo",
"ooooo,KKKKKKKKKKKKKKKKKKKK,ooooo",
"oooo,KKKKKKKKKKKKKKKKKKKKKK,oooo",
"oooo,KKKKKKKKKKKKKKKKKKKKKK,oooo",
"ooo,KKKKKKKKKKKKKKKKKKKKKKKK,ooo",
"ooo,KKKKKKKKKKKKKKKKKKKKKKKK,ooo",
"ooo,KKKKKKKKKKKKKKKKKKKKKKKK,ooo",
"ooo,KKKKKKKKKKKKKKKKKKKKKKKK,ooo",
"ooo,KKKKKKKKKKKKKKKKKKKKKKKK,ooo",
"ooo,KKKKKKKKKKKKKKKKKKKKKKKK,ooo",
"oooo,KKKKKKKKKKKKKKKKKKKKKK,oooo",
"oooo,KKKKKKKKKKKKKKKKKKKKKK,oooo",
"ooooo,KKKKKKKKKKKKKKKKKKKK,ooooo",
"ooooo,KKKKKKKKKKKKKKKKKKKK,ooooo",
"oooooo,,KKKKKKKKKKKKKKKK,,oooooo",
"ooo,oooo,KKKKKKKKKKKKKK,oooooooo",
"ooo,ooooo,,,KKKKKKKK,,,ooooooooo",
"o,,,,,oooooo,,,,,,,,oooooooooooo",
"ooo,oooooooooooooooooooooooooooo",
"ooo,oooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo"
}
)
    IDEdib = createDIB({IDEBmp[1],IDEBmp[2]})
    IDEresult = sendMessage(FilledCircle, BM_SETIMAGE, IMAGE_BITMAP, IDEdib)
------------------------------------------------------------------------------- 
    setTransparentColor(getSysColor(COLOR_BTNFACE))
    IDEBmp = xpmToEuBmp(
{
"32 32 6 1",
"o c None",
"0 c #009600",
"8 c #AF4B00",
"U c #E17D7D",
"V c #E1AF64",
"e c #E1E1E1",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"ooooooooooooooooooooooo8oooooooo",
"ooooooooooooooooooooV8888ooooooo",
"oooooooooooooooooooVVV8888oooooo",
"ooooooooooooooooooVVVVV8888ooooo",
"oooooooooooooooooVVVVVVV8888oooo",
"ooooooooooooooooVVVVVVVVV8888ooo",
"oooooooooooooooVVVVVVVVVVV8888oo",
"ooooooooooooooVVVVVVVVVVVVV888oo",
"oooooooooooooVVVVVVVVVVVVVVVUUoo",
"000000000000VVVVVVVVVVVVVVVUUU00",
"00000000000VVVVVVVVVVVVVVVUUU000",
"0000000000VVVVVVVVVVVVVVVUUU0000",
"000000000VVVVVVVVVVVVVVVUUU00000",
"00eeeee000VVVVVVVVVVVVVUUU000000",
"0eeeeeee000VVVVVVVVVVVUUU0000000",
"eeeeeeeeeeeeVVVVVVVVVUUU00000000",
"eeeeeeeeeeeeeVVVVVVVUUU000000000",
"eeeeeeeeeeeeeeVVVVVUUU0000000000",
"0eeeeeeeeeeeeeeVVVUU000000000000",
"00000000eeeeeeeeVU00000000000000",
"00000000000000000000000000000000",
"00000000000000000000000000000000",
"00000000000000000000000000000000",
"00000000000000000000000000000000"
}
)
    IDEdib = createDIB({IDEBmp[1],IDEBmp[2]})
    IDEresult = sendMessage(Erase, BM_SETIMAGE, IMAGE_BITMAP, IDEdib)
------------------------------------------------------------------------------- 
    setTransparentColor(getSysColor(COLOR_BTNFACE))
    IDEBmp = xpmToEuBmp(
{
"32 32 9 1",
"o c None",
"' c #004B19",
", c #000000",
"0 c #009600",
"2 c #00327D",
"6 c #323232",
"A c #E10000",
"D c #00E100",
"e c #E1E1E1",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"ooooooooooooo22ooooooooooooooooo",
"oooooooooooo22A22ooooooooooooooo",
"ooooooooooo22D2AA2oooooooooooooo",
"oooooooooo2DDD2AA2oooooooooooooo",
"ooooooooo22DDDD22A2ooooooooooooo",
"oooooooo2DDDDDDD2AAooooooooooooo",
"ooooooo22DDDDDDDDAAooooooooooooo",
"oooooo2DDDDDDDD0'AAooooooooooooo",
"oooooo666DDDDD0'oAAooooooooooooo",
"ooooooo666DDD0'ooAAooooooooooooo",
"ooooooo6666D0'oooAAooooooooooooo",
"ooooooo,6660',,,,AA,,,,,,,,,,,,o",
"ooooooo,ee6'eeeeeAAAeeeeeeeeee,o",
"ooooooo,eeeeeeeeeAAAeeeeeeeeee,o",
"ooooooo,eeeeeeeeAAAAeeeeeeeeee,o",
"ooooooo,eeeeeeeeAAAAAeeeeeeeee,o",
"oooooo,,eeeeeeeAAAAAAeeeeeeeee,o",
"oooooo,eeeeeeAAAAAAAAAAeeeeeee,o",
"oooooo,eeeeAAAAAAAAAAAAAAeeeee,,",
"oooooo,eeeAAAAAAAAAAAAAAAAeeeee,",
"oooooo,eeeAAAAAAAAAAAAAAAAAAeee,",
"oooooo,eeeeAAAAAAAAAAAAAAAAAAee,",
"oooooo,eeeeeAAAAAAAAAAAAAAAAAee,",
"oooooo,eeeeeeAAAAAAAAAAAeeAAeee,",
"ooooo,eeeeeeeAAAeeAAAAeeeeeeeee,",
"ooooo,eeeeeeeeAeeeeAAeeeeeeeeee,",
"ooooo,oeeeeeeeeeeeeeeeeeeeeeeee,",
"ooooo,,,,,,,,,,,,,,,,,,,,,,,,,,,",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo"
}
)
    IDEdib = createDIB({IDEBmp[1],IDEBmp[2]})
    IDEresult = sendMessage(Clear, BM_SETIMAGE, IMAGE_BITMAP, IDEdib)
------------------------------------------------------------------------------- 
    setTransparentColor(getSysColor(COLOR_BTNFACE))
    IDEBmp = xpmToEuBmp(
{
"32 32 3 1",
"o c None",
", c #000000",
"7 c #AF0000",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooo,,oo,,oo,,oo,,oo,,oooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooo,oooooooooooooooo,o7oooooooo",
"oooo,oooooooooooooooo,o77ooooooo",
"ooooooooooooooooooooooo777oooooo",
"oooooooooooo777777777777777ooooo",
"oooo,ooooooo7777777777777777oooo",
"oooo,ooooooo77777777777777777ooo",
"oooooooooooo7777777777777777oooo",
"oooooooooooo777777777777777ooooo",
"oooo,oooooooooooooooo,o777oooooo",
"oooo,oooooooooooooooo,o77ooooooo",
"ooooooooooooooooooooooo7oooooooo",
"oooooooooooooooooooooooooooooooo",
"oooo,oooooooooooooooo,oooooooooo",
"oooo,oooooooooooooooo,oooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooo,,oo,,oo,,oo,,oo,,oooooooooo",
"oooooooooooooooooooooooooooooooo",
"oo,,,oo,ooooo,,ooo,,oo,oo,oooooo",
"oo,oo,o,oooo,oo,o,oo,o,o,ooooooo",
"oo,,,oo,oooo,oo,o,oooo,,oooooooo",
"oo,oo,o,oooo,oo,o,oooo,,oooooooo",
"oo,oo,o,oooo,oo,o,oo,o,o,ooooooo",
"oo,,,oo,,,,oo,,ooo,,oo,oo,oooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo"
}
)
    IDEdib = createDIB({IDEBmp[1],IDEBmp[2]})
    IDEresult = sendMessage(BlockOps, BM_SETIMAGE, IMAGE_BITMAP, IDEdib)
------------------------------------------------------------------------------- 
    setTransparentColor(getSysColor(COLOR_BTNFACE))
    IDEBmp = xpmToEuBmp(
{
"32 32 3 1",
"o c None",
", c #000000",
"G c #0000E1",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooGGGGGGooooooooooooo",
"oooooooooooGGGGGGGGGGooooooooooo",
"ooooooooooGGGooooooGGGoooooooooo",
"oooooooooGGGooooooooGGGooooooooo",
"ooooooooGGGooooooooooGGGoooooooo",
"ooooooo,,GooooooooooooGGoooooooo",
"oooooo,,,,ooooooooo,oooGGooo,ooo",
"ooooo,,GG,,oooooooo,,ooGGoo,,ooo",
"oooo,,oGGo,,oooooooo,,oGGo,,oooo",
"ooo,,ooGGoo,,oooooooo,,GG,,ooooo",
"ooo,oooGGooo,ooooooooo,,,,oooooo",
"ooooooooGGooooooooooooG,,ooooooo",
"ooooooooGGGooooooooooGGGoooooooo",
"oooooooooGGGooooooooGGGooooooooo",
"ooooooooooGGGooooooGGGoooooooooo",
"oooooooooooGGGGGGGGGGooooooooooo",
"oooooooooooooGGGGGGooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oo,,,ooo,,oo,,,ooo,ooo,,,o,,,ooo",
"oo,oo,o,oo,oo,ooo,o,ooo,oo,ooooo",
"oo,,,oo,oo,oo,oo,ooo,oo,oo,,oooo",
"oo,o,oo,oo,oo,oo,,,,,oo,oo,ooooo",
"oo,oo,oo,,ooo,oo,ooo,oo,oo,,,ooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo"
}
)
    IDEdib = createDIB({IDEBmp[1],IDEBmp[2]})
    IDEresult = sendMessage(Rotate, BM_SETIMAGE, IMAGE_BITMAP, IDEdib)
-------------------------------------------------------------------------------
        setTransparentColor(getSysColor(COLOR_BTNFACE))
    IDEBmp = xpmToEuBmp(
{
"32 32 4 1",
"o c None",
", c #000000",
"A c #E10000",
"G c #0000E1",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"ooooooAooooooooooooooooAoooooooo",
"oooooAAAoooooGGGGGGoooAAAooooooo",
"ooooooAAAooGGGGGGGGGGAAAoooooooo",
"oooooooAAAGGGooooooGAAAooooooooo",
"ooooooooAAAGoooooooAAAGooooooooo",
"ooooooooGAAAooooooAAAGGGoooooooo",
"ooooooo,,GAAAooooAAAooGGoooooooo",
"oooooo,,,,oAAAooAAA,oooGGooo,ooo",
"ooooo,,GG,,oAAAAAAo,,ooGGoo,,ooo",
"oooo,,oGGo,,oAAAAooo,,oGGo,,oooo",
"ooo,,ooGGoo,,AAAAoooo,,GG,,ooooo",
"ooo,oooGGoooAAAAAAoooo,,,,oooooo",
"ooooooooGGoAAAooAAAoooG,,ooooooo",
"ooooooooGGAAAooooAAAoGGGoooooooo",
"oooooooooAAAooooooAAAGGooooooooo",
"ooooooooAAAGGooooooAAAoooooooooo",
"oooooooAAAoGGGGGGGGGAAAooooooooo",
"ooooooAAAooooGGGGGGooAAAoooooooo",
"oooooooAooooooooooooooAooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo",
"oo,,,ooo,,oo,,,ooo,ooo,,,o,,,ooo",
"oo,oo,o,oo,oo,ooo,o,ooo,oo,ooooo",
"oo,,,oo,oo,oo,oo,ooo,oo,oo,,oooo",
"oo,o,oo,oo,oo,oo,,,,,oo,oo,ooooo",
"oo,oo,oo,,ooo,oo,ooo,oo,oo,,,ooo",
"oooooooooooooooooooooooooooooooo",
"oooooooooooooooooooooooooooooooo"
}
)
        IDEdib = createDIB({IDEBmp[1],IDEBmp[2]})
    IDEresult = sendMessage(RotateD, BM_SETIMAGE, IMAGE_BITMAP, IDEdib)
------------------------------------------------------------------------------- 
    setTransparentColor(getSysColor(COLOR_BTNFACE))
    IDEBmp = xpmToEuBmp(
{
"24 24 10 1",
"o c None",
", c #000000",
"- c #960000",
"= c #0019AF",
"@ c #646464",
"K c #E14B4B",
"N c #4BE14B",
"U c #E17D7D",
"Y c #64E1C8",
"l c #9696E1",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"ooooooooo,oooooooooooooo",
"oooooooo,-oooooooooooooo",
"ooooooo,K-oooooooooooooo",
"oooooo,KUU,,,loooooooooo",
"ooooo,KUUUU@N,,loooooooo",
"oooooo,KUU,,,NN,oooooooo",
"ooooooo,K-ool,N,looooooo",
"oooooooo,-oool,N,ooooooo",
"ooooooooo,ooool,,ooooooo",
"ooooooooooooooo,,ooooooo",
"ooooooooooooooo,,ooooooo",
"oooooooooooooo,,looooooo",
"ooooooooooooo,,loooooooo",
"oooooooooooo,loooooooooo",
"oo=oo=o=ooo=o===YoY==Yoo",
"oo=oo=o==oo=o=oo=o=oo=oo",
"oo=oo=o=o=o=o=oo=o=oo=oo",
"oo=oo=o=oo==o=oo=o=oo=oo",
"ooY==Yo=ooo=o===YoY==Yoo"
}
)
    IDEdib = createDIB({IDEBmp[1],IDEBmp[2]})
    IDEresult = sendMessage(Undo, BM_SETIMAGE, IMAGE_BITMAP, IDEdib)
------------------------------------------------------------------------------- 
    setTransparentColor(getSysColor(COLOR_BTNFACE))
    IDEBmp = xpmToEuBmp(
{
"24 24 11 1",
"o c None",
", c #000000",
". c #7D1900",
"= c #0019AF",
"@ c #646464",
"A c #E10000",
"K c #E14B4B",
"N c #4BE14B",
"U c #E17D7D",
"Y c #64E1C8",
"c c #C864E1",
"oooo,oo,oo,ooooooooooooo",
"ooo,.o,.o,.ooooooooooooo",
"oo,K.,K.,K.ooooooooooooo",
"o,KU,KU,KUUU,,,,oooooooo",
",KU,UU,UUUUUK@@N,,oooooo",
"o,KU,KU,KUUU,,,,NN,ooooo",
"oo,K.,K.,K.ooooo,NN,oooo",
"ooo,.o,.o,.oooooo,N,oooo",
"oooo,oo,oo,ooooooo,,oooo",
"oooooooooooooooooo,,oooo",
"oooooooooooooooooo,,oooo",
"oooooooooooooooooo,,oooo",
"ooAoooAooooAooooo,c,oooo",
"oAoAooAooooAoooo,cc,oooo",
"AoooAoAooooAo,,,cc,ooooo",
"AAAAAoAooooAocccc,oooooo",
"AoooAoAooooAoooo,ooooooo",
"AoooAoAAAAoAAAAooooooooo",
"oooooooooooooooooooooooo",
"oo=oo=o=ooo=o===YoY==Yoo",
"oo=oo=o==oo=o=oo=o=oo=oo",
"oo=oo=o=o=o=o=oo=o=oo=oo",
"oo=oo=o=oo==o=oo=o=oo=oo",
"ooY==Yo=ooo=o===YoY==Yoo"
}
)
    IDEdib = createDIB({IDEBmp[1],IDEBmp[2]})
    IDEresult = sendMessage(UndoAll, BM_SETIMAGE, IMAGE_BITMAP, IDEdib)
------------------------------------------------------------------------------- 
    setTransparentColor(getSysColor(COLOR_BTNFACE))
    IDEBmp = xpmToEuBmp(
{
"24 24 6 1",
"o c None",
", c #000000",
"@ c #646464",
"K c #E14B4B",
"N c #4BE14B",
"U c #E17D7D",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooo,,,,,,,,,,oooo",
"oooooooooo,NNNNNNN,,oooo",
"oooooooooo,NNNNNNN,,oooo",
"oooooooooo,NNNNNNN,,oooo",
"oooooooo,o,NNNNNNN,,oooo",
"oooooooo,,,NNNNNNN,,oooo",
"oooooooo,U,NNNNNNN,,oooo",
"ooo,,,,,,UU,NN@,NN,,oooo",
"ooo,@@@KKUUU,N,@NN,,oooo",
"ooo,@@@KKUUU,NNNNN,,oooo",
"ooo,,,,,,UU,NNNNNN,,oooo",
"oooooooo,U,NNNNNNN,,oooo",
"oooooooo,,,NNNNNNN,,oooo",
"oooooooo,o,NNNN,,,,,oooo",
"oooooooooo,NN,,,,,,,oooo",
"oooooooooo,,,,,,,,,,oooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo"
}
)
    IDEdib = createDIB({IDEBmp[1],IDEBmp[2]})
    IDEresult = sendMessage(Quit, BM_SETIMAGE, IMAGE_BITMAP, IDEdib)

------------------------------------------------------------------------------- 
---------------------------------------------------------
--------------------------------------------------------------------------------
--                              XPM CREATOR

--      Default is a 64-color palette and allpixels set to transparent
--      on startup. Color 1 is SYS_BTNFACE and is called "None".

--      Version 2.3             12 April 2006

--      Many thanks to Igor and Alexander without whom this would never have
--      got done properly.

--      Note to Judith Evans:

--              ProcessXPMFile(filename) will read an XPM file in and convert to
--      my internal storage fornat; if Window1 is visible you'd see it onscreen.
--      It returns True if OK, False if it failed.

--              MakeXPM() takes the internal data and returns a conventional XPM
--      object as a Euphoria object rather than as an ASCII string.

--              tidy_print(filehandle, object) will output any Euphoria object to
--      a file whose handle is supplied, in as nice a format as can be managed.

--              Hopefully you will be able to call ProcessXPMFile() for a give XPM file,
--      and then call MakeXPM() (no argument) to return that XPM as a standard XPM
--      object which hopefully you can use for your internal machinations.

--              If you need an ASCII representation of the XPM object then there are
--      several routines around which will do the same as tidy_print but which
--      will output to an ASCII string sequence.


------------------------------------------------------------------------
--crash_message("We regret normal service cannot be maintained as XPMmer has crashed!")

--=================  C O N S T A N T S  =======================

constant PEN = 1, LINE = 2, RECT = 3, FRECT = 4, RRECT = 5, FRRECT = 6, CIRC = 7, FCIRC = 8, ERASE = 9, MOVE = 10, DOMOVE = 11

--      Dimensions etc of palette

constant        HW = 20,        -- Width of bars
VW = 20,        -- Height of bars
NV = 10,        -- Number of bars vertically
NH = 7          -- Number of bars horizontally

constant        DRAWOLDCOLOR    = 0,
DRAWNEWCOLOR    = 1

--      This is coded: RGB in hundreds, tens & units columns. These are multiplied
--      by 28 to give true values when copied into MyPalette. Makes it much easier
--      to see what proportions of what color we have in each.
--      These will be changed in the fullness of time to produce a more full
--      range of colors. I hope!

constant LUT = {    -- ,RGB,
                --400,310,330,040,031,013,003,203,301,000,
                --600,510,540,060,052,025,005,304,502,222,
                --700,730,770,070,064,036,017,406,604,444,
                --900,940,990,090,085,048,009,508,805,666,
                --933,952,992,393,286,268,229,628,826,888,
                --955,974,994,595,498,489,449,849,948,999,
                --977,986,996,797,698,689,669,869,968}
                --R  Ong  Yel  Lym  Grn  Cyn  Blu  Mag  Vio  Gry
                400, 310, 330, 230, 040, 033, 004, 203, 301, 000,       -- Darkest
                600, 520, 540, 350, 060, 055, 005, 204, 402, 222,       -- Dark
                700, 740, 870, 570, 070, 077, 007, 306, 603, 444,       -- Plain
                900, 860, 990, 590, 090, 099, 009, 509, 905, 666,       -- Max color
                933, 962, 993, 793, 393, 399 ,339, 739, 937, 888,       -- Light
                955, 974, 995, 895, 696, 599, 669, 869, 968, 999,       -- Lightest
                977, 986, 997, 997, 898, 799, 889, 979, 979}


--==================  V A R I A B L E S  ===========================

integer color                                                   -- Index 2 = Black
integer oldcolor oldcolor = White
integer cindx                                                       -- Index=1=None
integer None                                                        -- SYS_BTNFACE used for Transparent
integer Style = PEN                             -- Initial mode is Pen
integer StartX, StopX, StartY, StopY    -- TL & BR of currently drawn shape
integer MoveX, MoveY, MoveW, MoveH          -- Data-moving parameters
MoveX = 0 MoveY = 0 MoveW = 0 MoveH = 0
integer BackupIndex     BackupIndex = 1         -- Undo record - none written yet
integer Size = 32                               -- Initial grid size - 32x32
integer Gridx, Gridy                                    -- Initial TL position of Grid
integer Inhibit = True                  -- Left-down over grid does nowt till
                                                                        -- button actually GOES down
integer backGround                                          -- background color panel is filled with
integer backGroundIndex
integer BorderOption = False -- If set then draw border round icon
integer DottyOption = False     -- If set then put dot in transparent color
integer noGridOption = False    -- If set we don't draw grid round None pixels
integer MoveCopy = 0            -- 'M', 'C' or 'R' -  or 0!
sequence Colors
sequence Cindex
sequence MyPalette
sequence FileName = ""
sequence Backup = {}
sequence OrigIcon
sequence MovedData, MovedIndx

object res                                                      -- G.P.
atom numOfColors                                        -- number of colors in MakeXPM xpm
     numOfColors = 0

global procedure translateIconEditor()
    setText(Window1, IDEText[1057][1])
    setText(File, IDEText[1058][1])
    setText(ReadXPM, IDEText[1059][1])
    setText(ReadEuXPM, IDEText[1060][1])
    setText(ReadIcon, IDEText[1061][1])
    setText(Exit, IDEText[1062][1])
    setText(Help, IDEText[1063][1])
    setText(About, IDEText[1064][1])
    setText(ColorPaletteText, IDEText[1065][1])
    setText(IconText, IDEText[1067][1])
    setText(PreviewText, IDEText[1068][1])
    setText(IconSize, IDEText[1069][1] & sprint(Size))
    setText(Options, IDEText[1099][1])
    setText(AddBorder, IDEText[1100][1])
    setText(AddDotty, IDEText[1101][1])
    setText(RemoveGridLines, IDEText[1118][1])
    setText(LText1922, IDEText[1120][1])
    setText(LText1923, IDEText[1121][1])
    setText(LText1935, IDEText[1122][1])
    setText(ShowStyle,IDEText[1107][1] & IDEText[1072][1])
    setText(AskBlock,IDEText[1129][1])
    setText(HowTo,IDEText[1130][1])
    setText(BlockMove, IDEText[1131][1])
    setText(BlockCopy, IDEText[1132][1])
    setText(BlockCancel,IDEText[386][1])

    setHint(Grid, IDEText[1070][1])
    setHint(Palette,IDEText[1071][1])
    setHint(Pen,IDEText[1072][1])
    setHint(Line,IDEText[1073][1])
    setHint(Rectangle,IDEText[1074][1])
    setHint(FilledRectangle,IDEText[1075][1])
    setHint(RoundedRectangle,IDEText[1076][1])
    setHint(FilledRoundedRectangle,IDEText[1077][1])
    setHint(Circle,IDEText[1078][1])
    setHint(FilledCircle,IDEText[1079][1])
    setHint(Erase,IDEText[1080][1])
    setHint(Clear,IDEText[1081][1])
    setHint(Undo,IDEText[1082][1])
    setHint(ShowFileName,IDEText[1083][1])
    setHint(ShowStyle,IDEText[1084][1])
    setHint(Info,IDEText[1086][1])
    setHint(IconSize,IDEText[1087][1])
    setHint(MyIcon,IDEText[1088][1])
    setHint(IconSize,IDEText[1089][1])
    setHint(UndoAll,IDEText[1119][1])
    setHint(Quit,IDEText[1123][1])
end procedure

--====================================================================--
--=========================  LIBRARY  ==================================
--====================================================================--

------------------------------------------------------------------------
--              Draw Pixel on Grid; takes care of transparency characteristics
--              x & y in are the same as for the small icon pixmap - 1-32
--              We now ALWAYS draw in normal stuff-it-in mode.

procedure drawBigxel(integer x, integer y, integer col)
integer ix,iy

    ix = x
    iy = y
    x *= 10
    y *= 10

    if col=None then
        setPenColor(Grid, col)
        drawRectangle(Grid, w32True, x-10, y-10, x, y)

--              Draw the grid in the pixel color

        if noGridOption=False then -- draw grid lines bottom L & R
            setPenColor(Grid, #404040)
            drawRectangle(Grid, w32False, x-10, y-10, x+1, y+1)
        end if

--              Draw a dot in the middle

        if DottyOption then
            setPixel(Grid, x-5, y-5, Black)
            setPixel(Grid, x-5, y-6, Black)
            setPixel(Grid, x-6, y-5, Black)
            setPixel(Grid, x-6, y-6, Black)
        end if
    else
        setPenColor(Grid, col)
        drawRectangle(Grid, w32True, x-10, y-10, x, y)

--      Draw grid border on all other colors

        setPenColor(Grid, #404040)
        drawRectangle(Grid, w32False, x-10, y-10, x+1, y+1)
    end if
end procedure


------------------------------------------------------------------------
--      Return value of a string and the start of the next number

function val(object txt)
sequence res
integer n

    if not sequence(txt) then
        return {0, 0}
    end if

    res = value(txt)
    n = res[2]

    for i=1 to length(txt) do
        if txt[i]>'9' or txt[i]<'0' then
            txt = txt[i..$]
            exit
        end if
    end for

    for i=1 to length(txt) do
        if txt[i]<='9' and txt[i]>='0' then
            txt = txt[i..$]
            exit
        end if
    end for

    return {n, txt}
end function


------------------------------------------------------------------------
--      Absolute value

function abs(atom x)
    if x<0 then
        return -x
    end if

    return x
end function


------------------------------------------------------------------------
--      Internal atom colors are RGB - XPM colors are BGR. Wonder why?
--      This little routine just swaps the R & B colors

function BGR(atom c)
sequence col

    col = split_rgb(c)
    return rgb(col[3], col[2], col[1])
end function


------------------------------------------------------------------------
--              Returns maximum to two values

--function Max(atom a, atom b)
--  if a>b then
--      return a
--  else
--      return b
--  end if
--end function
--

------------------------------------------------------------------------
--              This looks for the difference between two colors as a scalar value

function diff(atom a, atom b)
sequence rgba, rgbb
integer dif

    rgba = split_rgb(a)
    rgbb = split_rgb(b)
--      dif  = Max(Max(abs(rgba[1]-rgbb[1]),abs(rgba[2]-rgbb[2])),abs(rgba[3]-rgbb[3]))
    dif  = abs(rgba[1]-rgbb[1])+abs(rgba[2]-rgbb[2])+abs(rgba[3]-rgbb[3])

    return dif
end function


------------------------------------------------------------------------
--              Finds best match for color in palette

function bestMatch(atom pix, integer num)
integer cI, err, res

    err = 2000

    for j=1 to num do               -- ... look for closest match in color - NOT None!!
        res = diff(MyPalette[j], pix)
        if res<err then
            err = res
            cI = j
        end if
    end for

    return cI
end function


------------------------------------------------------------------------
--- Simple efforts used my MakeIcon

--function word_to_bytes(integer a)
--  return {and_bits(a, #FF), and_bits(floor(a/#100), #FF)}
--end function

--function bytes_to_word(sequence x)
--  return x[2]*256+x[1]
--end function

--function RGBQuad(atom col)
--sequence quad
--
--  quad = {0,0,0,0}
--  quad[3] = and_bits(col, #FF)
--  col /= #100
--  quad[2] = and_bits(col, #FF)
--  col /= #100
--  quad[1] = and_bits(col, #FF)
--  return quad
--end function


------------------------------------------------------------------------
--      Change size of the XPM

procedure NewSize(integer n)
sequence obj

    if n>32 then
        return
    end if

    if n>Size then                                      -- Getting bigger
        obj = repeat(repeat(backGround, n), n)

        for i=1 to Size do
            obj[i][1..Size] = Colors[i][1..Size]
        end for

        Colors = obj
        obj = repeat(repeat(backGroundIndex, n), n)

        for i=1 to Size do
            obj[i][1..Size] = Cindex[i][1..Size]
        end for

        Cindex = obj
    end if

    Size = n
    setCtlSize(Grid, Size*10, Size*10)
    setCtlPosition(Grid, Gridx+(32-Size)*5, Gridy+(32-Size)*5)
    repaintWindow(MyIcon)
    setText(IconSize, IDEText[1069][1]&sprint(Size)) --"Size = "
end procedure


------------------------------------------------------------------------
-----------------  PALETTE to STARTUP DEFAULT ---------------

--      Each digit of the color codes represents R, G and B respectively.
--      They therefore are 0-9 each. These are converted to a logarithmic-is
--      value with LUTMult[] which then gives the color value.

procedure setPalette()
integer n, c, ix

    backGround = None

    for i=1 to length(LUT) do
        n = LUT[i]
        ix = remainder(n,10)
        c = #190000*ix
        n = floor(n/10)
        ix = remainder(n,10)
        c += #1900*ix
        n = floor(n/10)
        ix = remainder(n,10)
        c += #19*ix

        MyPalette[i] = c
    end for
end procedure

------------------------------------------------------------------------
--              Paint box around selected color - and undo previous!

procedure paintPaletteBox()
integer i, c

    for x=1 to NH do
        for y=1 to NV do
            i = (x-1)*NV+y                  -- Get index into palette sequence

--      Redraw old color box with no border

            if oldcolor=MyPalette[i] then
                setPenColor(Palette, MyPalette[i])
                drawRectangle(Palette, w32True, x*HW-HW,y*VW-VW,x*HW-1,y*VW-1)
            end if

--      Redraw new color box WITH border either Black or White

            if color=MyPalette[i] then
                if diff(color,Black)>diff(color,BrightWhite) then
                    c = Black
                else
                    c = BrightWhite
                end if
                setPenColor(Palette, c)
                setPenWidth(Palette, 2)
                drawRectangle(Palette, w32False, x*HW-HW+1,y*VW-VW+1,x*HW-1,y*VW-1)
                setPenWidth(Palette, 1)
            end if
        end for
    end for

    res = drawText(Palette, "T",{6*HW+4,9*VW,7*HW, 10*VW}, DT_WORDBREAK, 4, 0, 0)
    oldcolor = color
end procedure


------------------------------------------------------------------------
--      Remove 'C' comments from a sequence prior to trying to value it
--      This is called from the time we read in the XPM and the time it is
--      passed to AnalyseXPM(). It also removes control characters because
--      we had to leave (at least) new lines in to delimit the // comments.

function deCCommentify(sequence str)
sequence res
integer  Comment1, Comment2, Quote

    Comment1 = False                                -- True if within the /* ... */ type
    Comment2 = False                                -- True if within the // ... nl type
    Quote    = False                                -- True during quoted strings
    res = ""

    for i=1 to length(str)-1 do
        if str[i]='"' then
            if Quote then
                Quote = False
            else
                Quote = True
            end if
        end if

        if not Quote then
            if str[i]='/' and str[i+1]='*' then
                Comment1 = True
            end if

            if Comment1 and str[i-2]='*' and str[i-1]='/' then
                Comment1 = False
            end if

            if str[i]='/' and str[i+1]='/' then
                Comment2 = True
            end if

            if str[i]='\n' then
                Comment2 = False
            end if

            if str[i]='\t' then
                str[i] = ' '
            end if
        end if

        if Comment1=False and Comment2=False and str[i]>=' ' then
            res &= str[i]
        end if
    end for

    return res
end function


------------------------------------------------------------------------
--      Make32. Takes a string which presumably goes #?????" where there may
--                      be an awful lot of ???? and it must compress it a bit

function Make32(sequence str)
integer a

    while str[1]=' ' do                 -- Remove any leading spaces
        str = str[2..$]
    end while

    for i=1 to length(str) do       -- Any spaces in a name we turn to underlines
        if str[i]=' ' then
            str[i] = '_'            -- SPaces not allowed in color names
        end if
    end for

--      Look for a match with the colors in the list; convert any number found to
--      the standard format we expect - #123456 style.

    for i=1 to length(ColorNames) do
        if equal(str, ColorNames[i][1]) then
            a = ColorNames[i][2]*65536+ColorNames[i][3]*256+ColorNames[i][4]
            str = sprintf("#%6.6x", a)
            return str
        end if
    end for

--      No match? If not numeric then this is None (I hope!)

    if str[1]!='#' then
        return str                              -- Presumably "None" which is special
    end if

--      If a numeric see how long it is... #123456 is max allowed

    if length(str)>7 then
--              If #123456789ABC then a 48-bit value to be truncated
        if length(str)>12 then
            str = str[1..3]&str[6..7]&str[10..11]
        else
            a = displayErrorMessage(254,{})
            str = str[1..7]         -- This is NASTY but then so is the color value
        end if
    end if

    return upper(str)                       -- Hex codes always U/C for value()
end function


------------------------------------------------------------------------
--      Make basic Eu XPM onject from the working data

function MakeXPM()
object XPM
sequence line, col
atom nc

--      Count colors used in xpm

    col = repeat(0, 70)                             -- List of indices of used colors

    for y=1 to Size do                              -- Test all pixels
        for x=1 to Size do
            col[Cindex[x][y]] = 1   -- Mark this color used
        end for
    end for

    nc = 0                                                  -- One for transparent color anyway

    for i=1 to 70 do                                -- Count number used
        nc += col[i]
    end for
    numOfColors = nc

--      Output basic data & first color, the background color

    XPM = {sprintf("%d %d %d 1",{Size, Size, nc})}

--      Do the None color first as it seems it has to be!

    if col[70]=1 then                           -- None was used ...
        XPM = append(XPM, "o c None")
    end if

--      Output the rest of the colors which were used

    for i=1 to 69 do                                -- Color 66 is the None color
        nc = BGR(MyPalette[i])

        if col[i]=1 then                -- Color was used ...
            if ('#'+i)>'Z' then
                XPM = append(XPM, sprintf("%s c #%06x",{'*'+i-1,nc}))
            else
                XPM = append(XPM, sprintf("%s c #%06x",{'#'+i-1, nc}))
            end if
        end if
    end for

--      Then put in Size rows of column data pixels

    for y=1 to Size do
        line = ""

        for x=1 to Size do
            if ('#'+Cindex[x][y])>90 then
                line &= '*'+Cindex[x][y]-1
            else
                line &= '#'+Cindex[x][y]-1              -- Index 1 = None = 'A' code
            end if
        end for

        XPM = append(XPM, line)
    end for

    return XPM
end function


------------------------------------------------------------------------
--      Analyse basic XPM object read in

--      It sets up the contents on MyPalette[], Colors[] & Cindex[]
--      sequences which are all we need for working.

function AnalyseXPM(object xpm)
sequence newlist, codelist, cv
integer fh, nx, ny, nc, ix, ci

--      Quit if there is no chance of this working ...

    if length(xpm)<5 then
        return w32False
    end if

    res = xpm[1]
    res = val(res)
    nx = res[1]                             -- X-size
    res = res[2]
    res = val(res)
    ny = res[1]                             -- Y-size
    res = res[2]
    res = val(res)
    nc = res[1]                             -- Number of colors
    res = res[2]
    res = val(res)

    if res[1]!=1 then
        res = displayErrorMessage(255,{})
        return w32False
    end if

    if nx<8 or nx>32 or ny<8 or ny>32 or nc>256 or nx!=ny then
        nx = displayErrorMessage(256,{})
        return  w32False
    end if

    if length(xpm)<(1+nc+nx) then
        return  w32False
    end if

    NewSize(nx)

--      For each color specified, we read the color CHARACTER CODE
--      and the color value. If the color value (corrected for the
--      RGB-BGR swap) matches one of the basic sixteen colors then
--      we set that replacement character as the relevant one.
--      Other colors we put into the ad-hoc color list and assign
--      the relevan to index to that too.
--      If we run out of spaces then we look for the nearest color
--      using a comparison routine that compares the magnitudes of
--      the R-difference, G-difference and B-difference. Easy!

    codelist = repeat(0, nc)
    newlist  = repeat(-1,nc)

    for c=1 to nc do
        res = xpm[c+1]                                  -- This color entry
        codelist[c] = res[1]                    -- Color code char

        if match("None", res) then              -- If color is "None"
            ci = 70                                         -- then use that
        else
            ix = match("c ", res[2..$])+2 -- Find "c "
            cv = value(Make32(res[ix..$]))-- Hex value(?) follows
            fh = BGR(cv[2])                         -- Get color in right order
            ci = bestMatch(fh, 69)                  -- Return index of best match
        end if

        newlist[c] = ci                                 -- Put next index into list
    end for

--              Now we run through each of the lines of the XPM,
--      and find the color code in the colvalue[] array. Replace
--      with the value in newlist at the same index. Then what we
--      have is basically our format data. I hope.

    for y=1 to Size do                          -- For every character
        res = xpm[1+nc+y]

        if length(res)<Size then
            return w32False
        end if

        for x=1 to Size do
            fh = res[x]

            for i=1 to length(codelist) do      -- Find character in list
                if fh=codelist[i] then
                    ci = newlist[i]
                    Colors[x][y] = MyPalette[ci]-- [i] starts at 1
                    Cindex[x][y] = ci                       -- Index starts at 0
                    exit
                end if
            end for
        end for
    end for

    return w32True
end function


--      setTextX is designed to put a long filename into a text box
--      with the middle replaced with dots to make it fit ...

procedure setTextX(integer id, sequence text)
integer w, t, h
sequence hv

    if text[1]='_' then
        text = text[2..$]
        setWindowBackColor(id, BrightRed)
    else
        setWindowBackColor(id, None)
    end if

    setHint(id, text)
    hv = getCtlSize(id)
    h = hv[1]
    w = getTextWidth(id, text)

    if w>h then
        t = length(text)
        for i=floor(t/2) to 1 by -1 do
            w = getTextWidth(id, text[1..i]&" ... "&text[t-i..t])

            if w<h then
                w = i
                exit
            end if
        end for

        setText(id, text[1..w]&" ... "&text[t-w..t])
    else
        setText(id, text)
    end if
end procedure

---------------------------------------------------------------------
--      tidy_print
--
--              This routine can be used in place of Euphoria's print routine
--      to print arbitrary Euphoria objects in a single invocation while
--      remaining able to read the object back in using a single get() call
--      of Euphoria.
--              The pretty_print() routine does not allow the use of get() to reload
--      an arbitrary Euphoria object due to the addition of formatting newlines.
--      The result is far more readable than a standard Euphoria print while
--      remaining in the most basic Euphoria format as is required by get().
--              It also saves a lot of disk space when large ASCII-oriented objects
--      such as databases are saved.
--              The routine calls itself re-entrantly to handle sequences embedded
--      within the object being printed. This saves code space and is quite quick.
--
------------------------------------------------------------------------

procedure tidy_print(integer fp, object data)
integer fh, IsFirst, IsASCII

--      Initial call to tidy_print has a positive file pointer.
--      This routine calls itself recursively with a negative value.
--      Thus we know on entry if we were the initial call or a sub-call.
--      If it was the initial call then we add a newline to the end.

    if fp>0 then
        IsFirst = True                  -- this is the first-level call
        fh = fp                         -- so access file with the handle as supplied
        fp = -fp                        -- but negate for future calls
    else
        IsFirst = False                 -- this is a subsequent call
        fh = -fp                        -- access the file with the positive of the argument fp
    end if

--              If the object is an atom, print it as normal. May as well be a number
--      as the sequence 'A' for example is longer than 65 which is the equivalent.

    if atom(data) then              print(fh, data)

--              If a sequence then call this routine for every element of it ...
--      but first either enclose the data in braces or quotes depending ...

--      elsif sequence(data) then
    else -- sequence(data)
        IsASCII = True

--              Look to see if this is a basic ASCII string first of all
--              (The test could be widened if you wish to allow larger integers as being ASCII)

        for i=1 to length(data) do
            if integer(data[i]) then
                if (data[i]<' ' or data[i]>126) and data[i]!='\t' then
                    IsASCII = False
                    exit
                end if
            else
                IsASCII = False
                exit
            end if
        end for

--              If ASCII then print as a string in quotes..

        if IsASCII then
            puts(fh,"\"")                           -- Open double quotes ..
            puts(fh, data)                          -- .. the string ..
            puts(fh,"\"")                           -- .. and close double quotes

--              Else print as a sequence of objects in braces, using tidy_print recursively

        else
            if IsFirst then
                puts(fh, "{\n")                         -- Open braces ..
            else
                puts(fh, "{")                           -- Open braces ..                       
            end if


            for i=1 to length(data) do      -- Print series of objects which may be
                tidy_print(fp, data[i]) --      strings so call routine re-entrantly

                if i<length(data) then-- If object has more than one item, then     
                    if IsFirst then
                        puts(fh,",\n")          --  use comma separator
                    else
                        puts(fh,",")            --  use comma separator
                    end if
                end if
            end for

            puts(fh,"}")                            -- And finally close braces
        end if
    end if

--              Having done that, if this was the initial call to the routine we add newline

    if IsFirst then                                         -- First call ending implies print final newline
        puts(fh, "\n")
    end if
end procedure


---------------------------------------------------------------------
--              Process XPM file given its name..

function ProcessXPMFile(sequence fname)
object res
sequence xpm, gash
integer fh, i, ch

    fh = open(fname, "r")
    res = ""
    ch = getc(fh)

    while ch!='{' do
        res &= ch
        ch = getc(fh)

        if ch= -1 then
            res = displayErrorMessage(257,{})
            return  False
        end if
    end while

    res = ""

--      Now we keep reading till end of file; it is too complicated to work out where
-- the end of the Euphoria object is!!

    while 1 do
        res &= ch
        ch = getc(fh)

        if ch= -1 then
            close(fh)
            exit
        end if
    end while

--      Remove any C-style comments within the sequence read in

    res = deCCommentify(res)

--      Pass it to Euphoria's value() to turn a long string into a Euphoria object.

    gash = value(res)

    if gash[1]!=GET_SUCCESS then
        gash[1] = displayErrorMessage(258,{})
        fh = open("Debug.e", "w")
        tidy_print(fh, res)
        close(fh)
        return False
    end if

--      Now to analyse the XPM object

    res = {MyPalette, Colors, Cindex}       -- Backup existing data

--      Erase internal data before reading new data

    for x=1 to Size do
        for y=1 to Size do
            Colors[x][y] = None
            Cindex[x][y] = 70
        end for
    end for

--      Now analyse file

    xpm = gash[2]
    i = AnalyseXPM(xpm)

--      If it failed then restore previous object & retire gracefully

    if i=False then
        MyPalette = res[1]
        Colors    = res[2]
        Cindex    = res[3]
        res = displayErrorMessage(259,{})
        return False
    end if

--      Put the new(old?) object on screen & tidy up ready to start editing

    repaintWindow(Grid)
    repaintWindow(Palette)
    setPenColor(Palette, Black)
    FileName = fname[1..find('.',fname)-1]
    setTextX(ShowFileName, FileName)
    cindx = 70
    color = MyPalette[cindx]
    paintPaletteBox()
--      setWindowBackColor(Show Color, color)
    Style = PEN
    Inhibit = True
    OrigIcon = {Colors, Cindex}
    return True
end function

------------------------------------------------------------------
--      Process an ICON file

procedure ProcessICOFile(sequence fname)
integer fh, i, ci, xs, ys, xm, ym, xi, yi, x5, y5
atom err
sequence xy, av, pav

--      Changed in July/Aug 2006 by AFDrummond to improve the input of BMP files
--      by using my own scanning method..

    setPalette()                                    -- Use standard palette for matching
    doEvents(0)

    if equal(upper(fname[$-3..$]),".BMP") then
        for x=1 to 32 do
            for y=1 to 32 do
                Colors[x][y] = None
                Cindex[x][y] = 70
            end for
        end for

        setTextX(ShowFileName,"_      PLEASE WAIT....")
        err = loadBitmapFromFile(fname)
        xy = getCtlSize(err)
        i = create(Pixmap,"",Window1,1,1,xy[1],xy[2],0)
        drawBitmap(i, err, 1, 1)

--      Get step size across bmp to give 32 samples on longer side
--      Then deduce margins of output icon

        xs = 1+floor(xy[1]/32)
        ys = 1+floor(xy[2]/32)

        if xy[1]<xy[2] then                 -- Narrow high bmp
            xm = floor(32*xy[1]/xy[2])
            xm = floor((32-xm)/2)
            ym = 1
            xs = ys
        elsif xy[1]>xy[2] then              -- Wide low bmp
            xm = 1
            ym = floor(32*xy[2]/xy[1])
            ym = floor((32-ym)/2)
            ys = xs
        else
            xm = 1
            ym = 1
        end if

        x5 = 1+floor(xs/5)
        y5 = 1+floor(ys/5)
        xi = xm

        for x=1 to xy[1] by xs do
            yi = ym

            for y=1 to xy[2] by ys do
                pav = {0,0,0}
                err = 0

                for x1=x to x+xs-x5 by x5 do
                    for y1=y to y+ys-y5 by y5 do
                        av = split_rgb(getPixel(i, x1, y1))


--/**/                  pav = sq_add(pav,av)    --/* -- Phix
                        pav += av               --*/ -- RDS
                        err += 1
                    end for
                end for

--/**/          pav = sq_floor_div(pav,err) --/* -- Phix
                pav = floor(pav/err)        --*/ -- RDS
                ci = bestMatch(rgb(pav[1],pav[2],pav[3]), 69)
                Colors[xi][yi] = MyPalette[ci]
--                              Colors[xi][yi] = pav
                Cindex[xi][yi] = ci
                yi += 1
            end for

            xi += 1
        end for

        destroy(i)
    else
        setVisible(IDummy, True)
        i = floodFill(IDummy,0,0,None,FLOODFILLBORDER)
        setIcon(IDummy, fname)                  -- Put icon into IDummy
        xy = getClientSize(IDummy)
        repaintWindow(IDummy)

--      NON-32x32 ICONS
--      ===============
--              If I load an icon as above, the system ALWAYS reports 32x32.
--      This may be because I onlyhave 32x32 icons, but I cannot find anywhere
--      any icons which are not 32x32. So I have decided to abandon that problem
--      until such time as I get a smaller icon to use.
--              Hence the odd setting below of fh.

--              if xy[3] > xy[4] then
--                      NewSize(xy[3])
--                      fh = floor((32-xy[3])/2)
--              else
--                      NewSize(xy[4])
--                      fh = floor((32-xy[4])/2)
--              end if

        NewSize(32)
        fh = 0

--      Now we will scan Dummy and for each pixel find the closest match in the
--      pallette we have. Then create the Colors[] and Cindx[] array data.

        for y=1 to xy[4] do                             -- For each pixel in dummy icon ...
            for x=1 to xy[3] do
                ci = bestMatch(getPixel(IDummy,x-1,y-1), 69)
                Colors[x-fh][y-fh] = MyPalette[ci]
                Cindex[x-fh][y-fh] = ci
            end for
        end for

        setVisible(IDummy, w32False)    -- Hide again
    end if

    repaintWindow(Grid)                             -- Repaint Grid & MyIcon with new data
    FileName = fname[1..find('.',fname)-1]
    setTextX(ShowFileName, FileName)
    cindx = 70
    color = MyPalette[cindx]
    paintPaletteBox()
    Style = PEN
    Inhibit = True
    OrigIcon = {Colors, Cindex}
end procedure

------------------------------------------------------------------
--                                      MAKE ICON ROUTINE                                                       --
--                                      =================                                                       --
--                                                                                                                              --
--              With thanks to Alexander Thoresson - March 2006                 --
--                                                                                                                              --
--      icon[1] is the width (32 normally)                                                      --
--      icon[2] is the height (32 also normally)                                        --
--      icon[3] is the number of color planes (1)
--      icon[4] is the number of bits in each pixel (8)
--      icon[5] is the number of bytes in the resource (calced below)
--      icon[6] is the offset to the start of the image (calced below)
--      icon[7] is the bitmap image size (1024)
--      icon[8] is the array of pixel indices (1 dimensional)
--      icon[9] is the AND mask (one bit per pixel)
--      icon[10] is the color palette (list of RGBQUADs)


--procedure MakeIcon(sequence icon, sequence pal, sequence out, integer Size)
--sequence icons, bit, mask
--integer  fn, ff1, ff32
--
--  icons = {32,32,1,8,0,22,1024,{},{},{}}
--  mask     = {}
--
----        Prepare palette in RGBQuads with a 0,0,0,0 quad to terminate
--
----                                          70
--  pal &= repeat(0, 256-length(pal))       -- Make pal up to length 70 (is that anyway?)
--  icons[10] &= RGBQuad(0)                         -- First color=0=transparent, I gather
----                                69
--  for i=1 to 255 do                                       -- Color 1 is BTNFACE used for transp.
--      icons[10] &= RGBQuad(pal[i])    -- AddBorder other colors to palette field icons[10]
--  end for
--
----        Prepare single-sequence icon image & also AND mask
--
----        Cater for smaller XPMs than 32x32 as follows:
----        Find the difference between Size and 32 - so if 28, difference is 4.
----        Half that is 2. If we are preparing the pixels x=1 and x=2 then we use transp.
----        instead of "real" data. For 3 we use pixel 1 from the data. So....
--
--  ff1 = floor((32-Size)/2)                        -- 28x28 XPM gives this as 2
--  ff32 = ff1+Size                                         -- So this is 28+2 = 30
--
----        Mod AFD 23Oct06 to generate icons smaller than 32x32 PROPERLY!
--
--  ff1 = 0
--  ff32 = Size
--
----        End of mod. The code above can be removed and the variables deassigned
--
--  for x=32 to 1 by -1 do
--      bit = {}
--
--      for y=1 to 32 do
--          if x<=ff1 or x>ff32 or y<=ff1 or y>ff32 then
--              icons[8] &= 0
--              bit &= 1                                -- Make undefined pixels transparent
--          else                                        -- Eu indices start at 1, Windows at 0
--              if icon[y-ff1][x-ff1]=70 then
--                  icons[8] &= 0           -- Color indices are one larger than normal,
--                  bit &= 1
--              else                                    -- but index 70 (Trans) -> 0 = color 0
--                  icons[8] &= icon[y-ff1][x-ff1]
--                  bit &= 0
--              end if
--          end if
--      end for
--
--      mask &= bits_to_int(reverse(bit[1..8]))
--      mask &= bits_to_int(reverse(bit[9..16]))
--      mask &= bits_to_int(reverse(bit[17..24]))
--      mask &= bits_to_int(reverse(bit[25..32]))
--  end for
--
--  fn = open(out, "wb")
--
--  if fn= -1 then
--      return
--  end if
--
---------------------------------#HEADER#---------------------------
--  icons[9] = mask
--  icons[5] = length(icons[10])+length(icons[8])+length(icons[9])+40
--
---------------------------------ICONDIR----------------------------
--  puts(fn, word_to_bytes(0))               -- idReserved
--  puts(fn, word_to_bytes(1))               -- idType
--  puts(fn, word_to_bytes(1))               -- idCount
--
-------------------------------ICONDIRENTRY-------------------------
--  puts(fn, icons[1])                       -- bWidth
--  puts(fn, icons[2])                       -- bHeight
--  puts(fn, 0)                              -- bColorCount  (0 if >=8bpp)
--  puts(fn, 0)                              -- bReserved
--  puts(fn, word_to_bytes(icons[3]))        -- wPlanes      (1 color plane?)            0?
--  puts(fn, word_to_bytes(icons[4]))        -- wBitCount    (8 bpp)                     0?
--  puts(fn, int_to_bytes(icons[5]))         -- dwBytesInRes (as above)                  0?
--  puts(fn, int_to_bytes(icons[6]))         -- dwImageOffset(where is the image?) (+22)
--
-----------------------------BITMAPINFOHEADER-----------------------
--  puts(fn, int_to_bytes(40))               -- biSize
--  puts(fn, int_to_bytes(icons[1]))         -- biWidth
--  -- biHeight
----/**/    puts(fn, sq_mul(int_to_bytes(icons[2]),2))   --/* -- Phix
--  puts(fn, int_to_bytes(icons[2])*2)               --*/ -- RDS
--  puts(fn, word_to_bytes(icons[3]))        -- biPlanes      (1)
--  puts(fn, word_to_bytes(icons[4]))        -- biBitCount    (8)
--  puts(fn, int_to_bytes(0))                -- biCompression (0=BI_RGB)
--  puts(fn, int_to_bytes(icons[7]))         -- biSizeImage   (32x32=1024)
--  puts(fn, int_to_bytes(0))                -- biXPelsPerMeter
--  puts(fn, int_to_bytes(0))                -- biYPelsPerMeter
----                                                  71
--  puts(fn, int_to_bytes(256))               -- biClrUsed     (71 colors used)
--  puts(fn, int_to_bytes(0))                -- biClrImportant(all colors important)
--
----------------------------------PALETTE---------------------------
--  puts(fn, icons[10])                                          -- palette
--
----------------------------XOR MASK/IMAGE DATA---------------------
--  puts(fn, icons[8])                                           -- XOR Mask (image)
--
---------------------------------AND MASK---------------------------
--  puts(fn, icons[9])                                           -- AND mask
--
--  close(fn)
--end procedure



--=======================================================
--              ASK
--              ===

--      Andy Drummond

--      Just ask a question of the client and await his reply -
--      or the demise of the parent which also causes our destruction.
--      A bit like message_box only more useful...

--======================================================


sequence InTextText
atom GotInTextEnter
integer CWindow2, OutText, InText
integer InBusiness

InBusiness = False

--=======================================================
--      Detect Enter or Escape to set flag to show we are done

procedure InText_onKey(integer self, integer event, sequence params)
    if params[1]=VK_ENTER or params[1]=VK_ESCAPE then
        GotInTextEnter = params[1]
    end if
end procedure

--=======================================================
--      parent is the ID of the calling window
--      stuff is {question, default reply}
--      Potential enhancement is to add to this sequence details like:
--              Window color, text font, you name it

function Ask(integer parent, object stuff)
sequence question, dflt

    if atom(stuff) then
        return ""
    end if

    if sequence(stuff[1]) then
        question = stuff[1]

        if length(stuff)=2 then
            dflt = stuff[2]
        else
            dflt = ""
        end if
    else
        question = stuff
        dflt = ""
    end if

    if InBusiness=False then
        InBusiness = True
        InTextText = ""
        GotInTextEnter = 0
--      Should match size of window to question being asked....
        CWindow2 = createEx(Window, "CWindow2", parent, 0.5, 0.5, 400, 100, w32or_all({WS_CHILD, WS_CLIPSIBLINGS, WS_DLGFRAME}), 0)
        setWindowBackColor(CWindow2, LightGray)
        openWindow(CWindow2, Normal)
        moveZOrder(CWindow2, HWND_TOP)
        OutText = createEx(CText,     question, CWindow2, 20, 10, 160, 50, 0, 0)
        InText  = createEx(EditText, dflt,  CWindow2, 20, 60, 150, 20, 0, 0)
        setHandler(InText, w32HKeyDown, routine_id("InText_onKey"))
        GotInTextEnter = False
        setFocus(InText)

        while GotInTextEnter=0 do
            doEvents(0)

            if getMainWindow()=0 then
                exit
            end if
        end while

        if GotInTextEnter=VK_ENTER then
            InTextText = getText(InText)
        else
            InTextText = ""
        end if

        destroy(CWindow2)
        InBusiness = False
    else
        setFocus(InText)
        return dflt
    end if

    if length(InTextText)=0 then
        return dflt
    end if

    return InTextText
end function







------------------------------------------------------------------------

--      Set graphical window to all-"None"

--      setPenColor(Grid, None) 

procedure StartUp()

--      Preload default parameters in the Colors & Cindex arrays

    None = getSysColor(COLOR_BTNFACE)
    Colors = repeat(repeat(0,32), 32)
    Cindex = repeat(repeat(0,32), 32)

    for x=1 to Size do
        for y=1 to Size do
            Colors[x][y] = None
            Cindex[x][y] = 70
        end for
    end for

    OrigIcon = {Colors, Cindex}

--      Preload the initial colors (may be from a file, Judith)
--      Each color represented by a three-digit decimal number,
--      LSD = red, mid = green, MSD = blue      
--      Hex colors are BBGGRR

    setText(ShowStyle,"Mode = Pen")
    setText(IconSize, "32")
    res = getPosition(Grid)
    Gridx = res[1]
    Gridy = res[2]
    NewSize(32)
    setCtlSize(Palette, HW*NH+2,VW*NV+2)
    MyPalette = repeat(None,70)
    backGround = None
    backGroundIndex = 70
    StopX = 0
    StopY = 0

    setPalette()
    cindx = 10
    color = MyPalette[cindx]
    Style = PEN
    Inhibit = True
    paintPaletteBox()
end procedure

--===========================================================================
--=========================  START-UP  BUSINESS  ============================
--===========================================================================

StartUp()


--------------------------------------------------------------------------------
procedure Window1_onClose(integer self, integer event, sequence params)
--params is ()
sequence xpm

    if length(Backup)>1 then
        res = displayErrorMessage(260,{})

        if res=IDCANCEL then            -- Cancel - do no more processing
            returnValue(w32True)
            return
        end if

        if res=IDNO then                        -- No - exit but don't save data
            return
        end if
    end if
                                                                        -- Yes - use data & return

    if find(controls[selectedControl][Class],{"PictureButton","TogglePicture","Bitmap"}) then
        --protect user has not switched class           
        xpm = MakeXPM()

        if numOfColors>1 then
            --and that xpm has colors other than None
            if xpmCell=1 then
                controls[selectedControl][XpmObject] = xpm
                --show xpmObject in Properties
                call_proc(updateProperty_id, {"XpmObject"})
            else
                controls[selectedControl][XpmDisableObject] = xpm
                --show xpmDisableObject in Properties
                call_proc(updateProperty_id, {"XpmDisableObject"})
            end if
        end if
    end if
end procedure
setHandler(Window1, w32HClose, routine_id("Window1_onClose"))
--------------------------------------------------------------------------------
procedure Window1_onOpen(integer self, integer event, sequence params)
--params is ()

    if find(controls[selectedControl][Class],{"PictureButton","TogglePicture","Bitmap"}) then
        for x=1 to 32 do
            for y=1 to 32 do
                Colors[x][y] = None
                Cindex[x][y] = 70
            end for
        end for

        if xpmCell=1 then
            res = AnalyseXPM(controls[selectedControl][XpmObject])
        else
            res = AnalyseXPM(controls[selectedControl][XpmDisableObject])
        end if
    end if

    Backup = {Colors, Cindex}
    OrigIcon = Backup
    translateIconEditor()
end procedure
setHandler(Window1, w32HOpen, routine_id("Window1_onOpen"))
--------------------------------------------------------------------------------
procedure ReadXPM_onClick(integer self, integer event, sequence params)
--params is ()
sequence fname

    fname = getOpenFileName(Window1, "*.XPM", {IDEText[1102][1],"*.XPM", IDEText[1103][1],"*.*"})--"Standard XMP files" "All files"

    if length(fname)=0 then
        return
    end if

    res = ProcessXPMFile(fname)
end procedure
setHandler(ReadXPM, w32HClick, routine_id("ReadXPM_onClick"))
--------------------------------------------------------------------------------
procedure ReadEuXPM_onClick(integer self, integer event, sequence params)
--params is ()
sequence fname

    fname = getOpenFileName(Window1, "*.EUX", {IDEText[1104][1],"*.EUX", IDEText[1103][1],"*.*"})   --"Euphoria XMP files"  "All files"

    if length(fname)=0 then
        return
    end if

    res = ProcessXPMFile(fname)
end procedure
setHandler(ReadEuXPM, w32HClick, routine_id("ReadEuXPM_onClick"))
--------------------------------------------------------------------------------
procedure ReadIcon_onClick(integer self, integer event, sequence params)
--params is ()
sequence fname

    fname = getOpenFileName(Window1, "", {IDEText[1105][1],"*.ICO;*.BMP"})
    --"Windows Icon files"  "Windows ICO, BMP files"    

    if length(fname)=0 then
        return
    end if

    ProcessICOFile(fname)
end procedure
setHandler(ReadIcon, w32HClick, routine_id("ReadIcon_onClick"))
--------------------------------------------------------------------------------
procedure Exit_onClick(integer self, integer event, sequence params)
--params is ()
    closeWindow(Window1)
end procedure
setHandler(Exit, w32HClick, routine_id("Exit_onClick"))
--------------------------------------------------------------------------------
procedure AddBorder_onClick(integer self, integer event, sequence params)
--params is ()
    if BorderOption then
        BorderOption = False
        setCheck(AddBorder, False)
    else
        BorderOption = True
        setCheck(AddBorder, True)
    end if

    repaintWindow(MyIcon)
end procedure
setHandler(AddBorder, w32HClick, routine_id("AddBorder_onClick"))
--------------------------------------------------------------------------------
procedure AddDotty_onClick(integer self, integer event, sequence params)
    if DottyOption then
        DottyOption = False
        setCheck(AddDotty, False)
    else
        DottyOption = True
        setCheck(AddDotty, True)
    end if

    repaintWindow(Grid)
end procedure
setHandler(AddDotty, w32HClick, routine_id("AddDotty_onClick"))
--------------------------------------------------------------------------------
procedure RemoveGridLines_onClick(integer self, integer event, sequence params)
    if noGridOption then
        noGridOption = False
    else
        noGridOption = True
    end if

    setCheck(RemoveGridLines, noGridOption)
    repaintWindow(Grid)
end procedure
setHandler(RemoveGridLines, w32HClick, routine_id("RemoveGridLines_onClick"))
--------------------------------------------------------------------------------
procedure HowTo_onClick(integer self, integer event, sequence params)
atom ret

    ret = w32Func(xShellExecute,{0,0,allocate_string("Docs\\XPMmer.hlp"),0,0,1})

end procedure
setHandler(HowTo, w32HClick, routine_id("HowTo_onClick"))
--------------------------------------------------------------------------------
procedure About_onClick(integer self, integer event, sequence params)
object res
    res = displayErrorMessage(261,{})
--      res = message_box(
--      "   XMP  Icon Generator and Editor  Version 3.2\n\n"&
--      "This program was developed as an enhancement to Judith Evans'\n"&
--      "Enhanced IDE for Win32Lib, this being the standalone version.\n"&
--      "It allows you to create XPM icons up to 32x32 pixels in size, with\n"&
--      "up to 64 colors including Transparent. Such icons can be saved as\n"&
--      "XPM files, or Euphoria XPM files (*.eux) for direct inclusion in\n"&
--      "Win32Lib programs, or as Euphoria-compatible 32x32 icons.\n"&
--      "The program can read files saved by itself, or any Windows icon file,\n"&
--      "or most XPM files.\n\n"&
--      "Written by Andy Drummond (andy@kestreltele.com) with assistance from\n"&
--      "Judith Evans and from Alexander Thoresson (for generating *.ico files)\n"&
--      "using Judith's IDE (EuVIDE) and Derek Parnell's Win32Lib.\n"&
--      "Thanks also to Igor for his supply of a library of nasty XPM files!\n"&
--      "Also for his testing and encouragement.\n"&
--      "    15 April 2006","About XPMmer", MB_ICONEXCLAMATION)
end procedure
setHandler(About, w32HClick, routine_id("About_onClick"))
--------------------------------------------------------------------------------

--------------------  DRAW SHAPE ------------------------

--      This routine "looks" like a standard routine but is a bit different.
--      x & y in are from 1 to Size only.

--      The Windows shape drawing routines are far less accurate than I expected.
--      If I use draw shapes with a 1-pixel per coordinate then I find the start
--      and/or end points are off by 1 pixel often. Hence I have had to work out
--      the odd correction processes which are applicable to lines and to shapes;
--      all shapes seem to show the same odd error.

--      Added a flag now which dictates whether or not to put a dot in the
--      middle of any transparent pixel on the grid.


procedure drawShape(integer pos, integer what, integer x1, integer y1, integer x2, integer y2, integer Dot)
integer xy

--      Draw the shape in the dummy pixmap in white; that way we can tell
--      which pixels are set to draw the shape.  After than we look to see
--      which pixels are NOT black and then we draw those pixels in the
--      destination location.

    setPenColor(Dummy, Black)                       -- Clear
    drawRectangle(Dummy, w32True, 1,1,50,50)        -- Bigger than we need
    setPenColor(Dummy, White)                       -- White means pixel set

--      We have to do some jiggery pokery with the end coordinate because
--      Windows(tm) core does not seem to want to include the destination pixel
--      in the shape.  For the line we could just add the destination pixel
--      but for real shapes that method is not open to us.  It is still not
--      quite right for lines but ...

    if what=LINE then
        if x1<x2 then
            x2 += 1
        elsif x1>x2 then
            x2 -= 1
        end if

        if y1<y2 then
            y2 += 1
        elsif y1>y2 then
            y2 -= 1
        end if

        drawLine(Dummy, x1, y1, x2, y2)
    else
        if x1>x2 then
            xy = x1
            x1 = x2
            x2 = xy+1
        else
            x2 += 1
        end if

        if y1>y2 then
            xy = y1
            y1 = y2
            y2 = xy+1
        else
            y2 += 1
        end if

--      Use Windows own drawing algorithms to make up shape

        if what=RECT or what=MOVE then
            drawRectangle(Dummy, w32False, x1, y1, x2, y2)
        elsif what=FRECT then
            drawRectangle(Dummy, w32True, x1, y1, x2, y2)
        elsif what=RRECT then
            drawRoundRect(Dummy, w32False, x1, y1, x2, y2, 7, 7)
        elsif what=FRRECT then
            drawRoundRect(Dummy, w32True, x1, y1, x2, y2, 7, 7)
        elsif what=CIRC then
            drawEllipse(Dummy, w32False, x1, y1, x2, y2)
        elsif what=FCIRC then
            drawEllipse(Dummy, w32True, x1, y1, x2, y2)
        end if
    end if

--      If destination is the icon, just pop pixels into it disregarding flag

    if pos=MyIcon then
        for x=1 to Size do
            for y=1 to Size do
                if getPixel(Dummy, x, y)!=Black then
                    setPixel(MyIcon, x+1, y+1, color)       -- +1 for border
                    Colors[x][y] = color
                    Cindex[x][y] = cindx
                end if
            end for
        end for

        return
    end if

--      Other normal efforts

    for x=1 to Size do
        for y=1 to Size do
            if getPixel(Dummy, x, y)!=Black then
                if Dot=DRAWOLDCOLOR then
                    drawBigxel(x, y, Colors[x][y])
                else
                    drawBigxel(x, y, color)
                end if
            end if
        end for
    end for
end procedure

--------------------------------------------------------------------------------
procedure Grid_onMouse(integer self, integer event, sequence params)
--params is ( integer event, integer x, integer y, integer shift, integer wheelmove )
integer x, y, ix, iy, col
sequence rgbcol

    if MoveCopy=1 then
        return
    end if

    x = params[2]+10        -- In pixels on the Grid 1 to 10*Size
    y = params[3]+10
    ix = floor(x/10)        -- In pixels one-to-one on the icon
    iy = floor(y/10)        -- From 1 to Size
    setText(Info, sprintf("X=%d Y=%d", {ix, iy}))

------------------ RIGHT BUTTON  -------------------
--      Select color under mouse cursor

    if params[1]=RightDown then
        color = Colors[ix][iy]
        cindx = Cindex[ix][iy]
--              setWindowBackColor(Show Color, color)

        if Style=ERASE then
            Style = PEN
            setText(ShowStyle,IDEText[1107][1] & IDEText[1072][1])--"Mode = Pen"
        end if

        paintPaletteBox()
        return
    end if

-----------------  SAFETY  ------------------

--      After reading in a file, the mouse button is down. When the menu
--      disappears then the button is seen to be down on the Grid and we write
--      a black pixel automatically.  This may help. It may not...it does!


    if params[1]=LeftDown then
        Inhibit = False
        setVisible(RotateD, w32True)
        setVisible(Rotate, w32False)
    end if

    if Inhibit then
        return
    end if

---------------------  PEN  -------------------------

--      Pen does not have an indicator while the mouse button is down -
--      it just draws and saves each location.

    if Style=PEN or Style=ERASE then
        if params[1]=LeftDown or (params[1]=MouseMove and and_bits(params[4],LeftBtnMask)) then
            if params[1]=LeftDown then
                Backup = append(Backup,{Colors, Cindex})
                BackupIndex += 1

                StopX = x
                StopY = y
            else
                if StopX=ix and StopY=iy then
                    return  -- No movement
                end if
            end if

            if Style=PEN then
                setPixel(MyIcon, ix+1, iy+1, color)
                setPenColor(Grid, color)
                Colors[ix][iy] = color
                Cindex[ix][iy] = cindx          -- Index of last color selected
            else -- Style = ERASE   
                setPixel(MyIcon, ix+1, iy+1, backGround)
                setPenColor(Grid, backGround)
                Colors[ix][iy] = backGround
                Cindex[ix][iy] = backGroundIndex
            end if

            drawBigxel(ix, iy, Colors[ix][iy])
            return
        end if

-----------------   DOING A MOVEMENT  ------------------

    elsif Style=DOMOVE then
        if params[1]=LeftDown then

--      Remember where cursor was when we pressed button down

            StartX = ix
            StartY = iy

        elsif params[1]=MouseMove and and_bits(params[4],LeftBtnMask) then

--      Make all screen pixels greyed out first of all from original data

            for xx=1 to Size do
                for yy=1 to Size do
                    rgbcol = split_rgb(Colors[xx][yy])
                    col = floor((rgbcol[1]+rgbcol[2]+rgbcol[3])/3)
                    drawBigxel(xx, yy, rgb(col,col,col))
                end for
            end for

--      Draw the moved data in true color in new place

            for xx=1 to MoveW do
                for yy=1 to MoveH do
                    x = xx+ix-StartX+MoveX-1
                    y = yy+iy-StartY+MoveY-1
                    drawBigxel(x, y, MovedData[xx][yy])
                end for
            end for

--      Left UP, however, plonks MovedData into Colors[][] array

        elsif params[1]=LeftUp then
            Backup = append(Backup,{Colors, Cindex})
            BackupIndex += 1

            for xx=1 to MoveW do
                for yy=1 to MoveH do
                    x = xx+ix-StartX+MoveX-1
                    y = yy+iy-StartY+MoveY-1

                    if x>0 and x<33 and y>0 and y<33 then
                        Colors[x][y] = MovedData[xx][yy]
                        Cindex[x][y] = MovedIndx[xx][yy]
                    end if
                end for
            end for

            repaintWindow(Grid)
            setText(ShowStyle,IDEText[1107][1] & IDEText[1072][1])--"Mode = Pen"
            Style = PEN
            MoveCopy = 0
        end if

        return
    else

-----------------       OTHER  SHAPES   --------------------

--      Other shapes all now use the same drawShape() routine in Control General

--      Button pressed - note the starting point

        if params[1]=LeftDown then
            StartX = ix
            StopX  = ix
            StartY = iy
            StopY  = iy

--      Mouse moved with the button down - remove any old shape and draw new
--      but using XOR drawing mode

        elsif params[1]=MouseMove and and_bits(params[4],LeftBtnMask) then
            if StopX=ix and StopY=iy then
                return  -- No movement - don't want to redraw in same place
            end if

--      Undraw previous one                     
            drawShape(Grid, Style, StartX, StartY, StopX, StopY, DRAWOLDCOLOR)
            StopX = ix
            StopY = iy
--      Draw new one
            drawShape(Grid, Style, StartX, StartY, StopX, StopY, DRAWNEWCOLOR)

--      Button released - remove most recent prototype shape then draw the
--      pukka shape in both Grid & MyIcon & save the result

        elsif params[1]=LeftUp then
            Backup = append(Backup,{Colors, Cindex})
            BackupIndex += 1

--      Undraw previous one                     

            drawShape(Grid, Style, StartX, StartY, StopX, StopY, DRAWOLDCOLOR)
            StopX = ix
            StopY = iy

--      Draw new one - the "final" one both in Grid & pixel

            if Style=MOVE then
                if ix!=StartX or iy!=StartY then

--              Remember where the area is now

                    setVisible(RotateD, w32False)
                    setVisible(Rotate, w32True)
                    Style = DOMOVE
                    MoveX = StartX
                    MoveY = StartY
                    MoveW = abs(StopX-StartX+1)
                    MoveH = abs(StopY-StartY+1)
                    MovedData = repeat(repeat(0,MoveH), MoveW)
                    MovedIndx = repeat(repeat(0,MoveH), MoveW)

--              Save the area data

                    for xx=1 to Size do
                        for yy=1 to Size do
                            if xx<StartX or yy<StartY or xx>StopX or yy>StopY then
                                rgbcol = split_rgb(Colors[xx][yy])
                                col = floor((rgbcol[1]+rgbcol[2]+rgbcol[3])/3)
                                drawBigxel(xx, yy, rgb(col,col,col))
                            else
                                MovedIndx[xx-StartX+1][yy-StartY+1] = Cindex[xx][yy]
                                drawBigxel(xx, yy, Colors[xx][yy])
                                MovedData[xx-StartX+1][yy-StartY+1] = Colors[xx][yy]

                                if MoveCopy!='C' then
                                    Colors[xx][yy] = backGround
                                    Cindex[xx][yy] = backGroundIndex
                                end if
                            end if
                        end for
                    end for
                end if
            else
                drawShape(Grid, Style, StartX, StartY, StopX, StopY, DRAWNEWCOLOR)
                drawShape(MyIcon, Style, StartX, StartY, StopX, StopY, DRAWNEWCOLOR)
            end if
        end if
    end if
end procedure
setHandler(Grid, w32HMouse, routine_id("Grid_onMouse"))
--------------------------------------------------------------------------------
procedure Grid_onPaint(integer self, integer event, sequence params)
--params is ( integer x1, integer y1, integer x2, integer y2 )

--      This merely copies the XPM data into the entire grid & icon areas

    setPenColor(Grid, Gray)
    drawRectangle(Grid, w32True, 1, Size, 1, Size)

    for x=1 to Size do
        for y=1 to Size do
            drawBigxel(x, y, Colors[x][y])
            setPixel(MyIcon,x+1,y+1,Colors[x][y])
        end for
    end for
end procedure
setHandler(Grid, w32HPaint, routine_id("Grid_onPaint"))
--------------------------------------------------------------------------------
procedure Palette_onMouse(integer self, integer event, sequence params)
--params is ( integer event, integer x, integer y, integer shift, integer wheelmove )
integer x,y,ix,iy,i
sequence pos

-----------------  SAFETY  ------------------

--      After reading in a file, the mouse button is down. When the menu
--      disappears then the button is seen to be down on the Grid and we write
--      a black pixel automatically.  This may help. It may not...it does!

    if params[1]=LeftDown or params[1]=RightDown then
        Inhibit = False
    end if

    if Inhibit then
        return
    end if

--      The boxes are 20 pixels high (so divide by 20 to get index) but ...
--  The numerical value of the first box is 17 so ix(=1)*16 + iy(=1) => 17

    pos = getPointerRelPos(Palette)
    x = pos[1]
    y = pos[2]
    ix = floor(x/HW)+1
    iy = floor(y/VW)+1
    i = (ix-1)*NV+iy
    x = (ix-1)*HW
    y = (iy-1)*VW

--      if and_bits(params[4], LeftBtnMask) then
    if params[1]=LeftDown then
        if Style=ERASE then
            Style = PEN
            setText(ShowStyle,IDEText[1107][1] & IDEText[1072][1])--"Mode = Pen"
        end if

        color = MyPalette[i]
        cindx = i
        paintPaletteBox()
    end if

--      setWindowBackColor(Show Color, color)

--      if color = None then
--              res = drawText(Show Color, "T",{9,7,50,50}, DT_WORDBREAK, 4, 0, 0)
--      end if
end procedure
setHandler(Palette, w32HMouse, routine_id("Palette_onMouse"))
--------------------------------------------------------------------------------
procedure Palette_onPaint(integer self, integer event, sequence params)
--params is ( integer x1, integer y1, integer x2, integer y2 )
integer i

    for x=1 to NH do
        for y=1 to NV do
            i = (x-1)*NV+y                  -- Get index into palette sequence
            setPenColor(Palette, MyPalette[i])
            drawRectangle(Palette, w32True, x*HW-HW,y*VW-VW,x*HW-1,y*VW-1)
        end for
    end for

--      res = drawText(Palette, "T",{6*HW,9*VW,7*HW, 10*VW}, DT_WORDBREAK, 4, 0, 0)
    paintPaletteBox()
end procedure
setHandler(Palette, w32HPaint, routine_id("Palette_onPaint"))
--------------------------------------------------------------------------------
procedure Pen_onClick(integer self, integer event, sequence params)
    Style = PEN
    setText(ShowStyle,IDEText[1107][1] & IDEText[1072][1])--"Mode = Pen"
end procedure
setHandler(Pen, w32HClick, routine_id("Pen_onClick"))
--------------------------------------------------------------------------------
procedure Line_onClick(integer self, integer event, sequence params)
    Style = LINE
    setText(ShowStyle,IDEText[1107][1] & IDEText[1073][1])--"Mode = Line"
end procedure
setHandler(Line, w32HClick, routine_id("Line_onClick"))
--------------------------------------------------------------------------------
procedure Rectangle_onClick(integer self, integer event, sequence params)
    Style = RECT
    setText(ShowStyle,IDEText[1107][1] & IDEText[1074][1])--"Mode = Rectangle"
end procedure
setHandler(Rectangle, w32HClick, routine_id("Rectangle_onClick"))
--------------------------------------------------------------------------------
procedure FilledRectangle_onClick(integer self, integer event, sequence params)
    Style = FRECT
    setText(ShowStyle,IDEText[1107][1] & IDEText[1075][1])--"Mode = Filled Rectangle"       
end procedure
setHandler(FilledRectangle, w32HClick, routine_id("FilledRectangle_onClick"))
--------------------------------------------------------------------------------
procedure RoundedRectangle_onClick(integer self, integer event, sequence params)
    Style = RRECT
    setText(ShowStyle,IDEText[1107][1] & IDEText[1076][1])--"Mode = Rounded Rectangle"                      
end procedure
setHandler(RoundedRectangle, w32HClick, routine_id("RoundedRectangle_onClick"))
--------------------------------------------------------------------------------
procedure FilledRoundedRectangle_onClick(integer self, integer event, sequence params)
    Style = FRRECT
    setText(ShowStyle,IDEText[1107][1] & IDEText[1077][1])--"Mode = Filled Rounded Rectangle"       
end procedure
setHandler(FilledRoundedRectangle, w32HClick, routine_id("FilledRoundedRectangle_onClick"))
--------------------------------------------------------------------------------
procedure Circle_onClick(integer self, integer event, sequence params)
    Style = CIRC
    setText(ShowStyle,IDEText[1107][1] & IDEText[1078][1])--"Mode = Ellipse"
end procedure
setHandler(Circle, w32HClick, routine_id("Circle_onClick"))
--------------------------------------------------------------------------------
procedure FilledCircle_onClick(integer self, integer event, sequence params)
    Style = FCIRC
    setText(ShowStyle,IDEText[1107][1] & IDEText[1079][1])--"Mode = Filled Ellipse"
end procedure
setHandler(FilledCircle, w32HClick, routine_id("FilledCircle_onClick"))
--------------------------------------------------------------------------------
procedure Erase_onClick(integer self, integer event, sequence params)
    Style = ERASE
    setText(ShowStyle,IDEText[1107][1] & IDEText[1108][1])--"Mode = Eraser"
end procedure
setHandler(Erase, w32HClick, routine_id("Erase_onClick"))
--------------------------------------------------------------------------------
procedure Clear_onClick(integer self, integer event, sequence params)
    setPenColor(Grid, color)
    FileName = ""
    setTextX(ShowFileName, "")
    Backup = {}
    BackupIndex = 1

    for x=1 to Size do
        for y=1 to Size do
            Colors[x][y] = color
            Cindex[x][y] = cindx
        end for
    end for

    repaintWindow(Grid)
    backGround = color
    backGroundIndex = cindx
end procedure
setHandler(Clear, w32HClick, routine_id("Clear_onClick"))
--------------------------------------------------------------------------------
procedure IconSize_onClick(integer self, integer event, sequence params)
sequence txt

    txt = Ask(Window1, {IDEText[1133][1], sprint(Size)})
    txt = value(txt)

    if txt[1]=GET_SUCCESS and txt[2]>9 and txt[2]<33 then
        NewSize(txt[2])
    end if
end procedure
setHandler(IconSize, w32HClick, routine_id("IconSize_onClick"))
--------------------------------------------------------------------------------
procedure BlockOps_onClick(integer self, integer event, sequence params)
    MoveCopy = 1
    setText(ShowStyle,IDEText[1134][1])
    openWindow(AskBlock, Normal)
    moveZOrder(AskBlock, HWND_TOP)
    setFocus(AskBlock)
end procedure
setHandler(BlockOps, w32HClick, routine_id("BlockOps_onClick"))
--------------------------------------------------------------------------------
procedure Rotate_onClick(integer self, integer event, sequence params)
sequence temp, rgbcol
integer  t, col

    if MoveCopy=0
    or (MoveX=0 and MoveY=0 and MoveW=0 and MoveH=0) then
        return
    end if

    temp = repeat(repeat(0,MoveW), MoveH)

    for x=1 to MoveW do
        for y=1 to MoveH do
            temp[y][x] = MovedData[x][MoveH-y+1]
        end for
    end for

    MovedData = temp

    for x=1 to MoveW do
        for y=1 to MoveH do
            temp[y][x] = MovedIndx[x][MoveH-y+1]
        end for
    end for

    MovedIndx = temp
    t = MoveH
    MoveH = MoveW
    MoveW = t

--      Draw all icon in grey...

    for x=1 to Size do
        for y=1 to Size do
            rgbcol = split_rgb(Colors[x][y])
            col = floor((rgbcol[1]+rgbcol[2]+rgbcol[3])/3)
            drawBigxel(x, y, rgb(col,col,col))
        end for
    end for

--      Draw the moved data in true color in new attitude

    for x=1 to MoveW do
        for y=1 to MoveH do
            drawBigxel(x+MoveX-1, y+MoveY-1, MovedData[x][y])
        end for
    end for

end procedure
setHandler(Rotate, w32HClick, routine_id("Rotate_onClick"))
--------------------------------------------------------------------------------
procedure Undo_onClick(integer self, integer event, sequence params)
--params is ()
sequence res

    BackupIndex = length(Backup)

    if BackupIndex>2 then
        res = Backup[BackupIndex]
        Backup = Backup[1..$-1]
        Colors = res[1]
        Cindex = res[2]
    else
        return
    end if

    for x=1 to Size do
        for y=1 to Size do
            drawBigxel(x, y, Colors[x][y])
            setPixel(MyIcon,x+1,y+1,Colors[x][y])
        end for
    end for
end procedure
setHandler(Undo, w32HClick, routine_id("Undo_onClick"))
--------------------------------------------------------------------------------
procedure UndoAll_onClick(integer self, integer event, sequence params)
--params is ()
    if displayErrorMessage(264,{})=IDNO then
        return
    end if

    Colors = OrigIcon[1]
    Cindex = OrigIcon[2]
    repaintWindow(Grid)
    repaintWindow(MyIcon)
    Backup = {}
    BackupIndex = 1
end procedure
setHandler(UndoAll, w32HClick, routine_id("UndoAll_onClick"))
--------------------------------------------------------------------------------
procedure Quit_onClick(integer self, integer event, sequence params)
    closeWindow(Window1)
end procedure
setHandler(Quit, w32HClick, routine_id("Quit_onClick"))
--------------------------------------------------------------------------------
procedure BlockMove_onClick(integer self, integer event, sequence params)
    MoveCopy = 'M'
    color = Black
    Style = MOVE
    setVisible(AskBlock, False)
end procedure
setHandler(BlockMove, w32HClick, routine_id("BlockMove_onClick"))
--------------------------------------------------------------------------------
procedure BlockCopy_onClick(integer self, integer event, sequence params)
    MoveCopy = 'C'
    color = Black
    Style = MOVE
    setVisible(AskBlock, False)
end procedure
setHandler(BlockCopy, w32HClick, routine_id("BlockCopy_onClick"))
--------------------------------------------------------------------------------
procedure BlockCancel_onClick(integer self, integer event, sequence params)
--params is ()
    setVisible(AskBlock, False)
    Style = PEN
    setText(ShowStyle,IDEText[1107][1] & IDEText[1072][1])--"Mode = Pen"    
end procedure
setHandler(BlockCancel, w32HClick, routine_id("BlockCancel_onClick"))
--------------------------------------------------------------------------------
procedure MyIcon_onPaint(integer self, integer event, sequence params)
--params is ( integer x1, integer y1, integer x2, integer y2 )

--      This prepares the icon area by blanking it all then adding a border
--      Pixels will be drawn from 2 to Size+1; so border at 1 and Size+2

    setPenColor(MyIcon, None)
    drawRectangle(MyIcon,w32True,1,1,35,35)

    if BorderOption then
        setPenColor(MyIcon, Black)
        drawRectangle(MyIcon,w32False,1,1,Size+3,Size+3)
    end if

--      This is done because otherwise we seemed to lose the icon after minimising
--      and restoring the program..

    for x=1 to Size do
        for y=1 to Size do
            setPixel(MyIcon,x+1,y+1,Colors[x][y])
        end for
    end for
end procedure
setHandler(MyIcon, w32HPaint, routine_id("MyIcon_onPaint"))

