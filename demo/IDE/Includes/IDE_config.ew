--IDE_Config.ew

constant TCS_MULTILINE = #0200
--------------------------------------------------------------------------------
--  Window ConfigWindow
global constant ConfigWindow = createEx(Window, "Configure IDE With Your Preferences", Form, Default, Default, 800, 498, {WS_DLGFRAME}, 0)
global constant tile = createEx(Pixmap, "a", ConfigWindow, -40, 0, 40, 40, 0, 0)
global constant TabControl1 = createEx(TabControl, "TabControl1", ConfigWindow, 0, 0, 796, 416, TCS_MULTILINE, 0)
global constant TabItem1 = createEx(TabItem, "General Information About IDE", TabControl1, 0, 0, 0, 0, 0, 0)
global constant TabItem2 = createEx(TabItem, "Describe How Major Windows Open", TabControl1, 0, 0, 0, 0, 0, 0)
global constant TabItem3 = createEx(TabItem, "Design Grid Apperance", TabControl1, 0, 0, 0, 0, 0, 0)
global constant TabItem4 = createEx(TabItem, "Values Used To Create A New Control", TabControl1, 0, 0, 0, 0, 0, 0)
global constant TabItem5 = createEx(TabItem, "Enter Key Processing For Property", TabControl1, 0, 0, 0, 0, 0, 0)
global constant TabItem6 = createEx(TabItem, "Documentation Location", TabControl1, 0, 0, 0, 0, 0, 0)
global constant TabItem7 = createEx(TabItem, "Backups", TabControl1, 0, 0, 0, 0, 0, 0)
global constant MenuInstance = createEx(CheckBox, "One Instance of IDE", TabItem1, 8, 76, 200, 20, 0, 0)
global constant Tab3_Lb1 = createEx(LText, "Grid Color", TabItem3, 12, 76, 148, 20, 0, 0)
global constant MenuBackupSave = createEx(CheckBox, "Backup Project before save", TabItem7, 12, 76, 388, 20, 0, 0)
global constant Tab6_LB1 = createEx(LText, "", TabItem6, 24, 76, 552, 60, 0, 0)
setText(Tab6_LB1,IDEText[120][1])
global constant GridCombo = createEx(Combo, "", TabItem3, 160, 76, 148, 20*6, 0, 0)
global constant Tab4_Name = createEx(EditText, "", TabItem4, 256, 76, 104, 20, 0, 0)
global constant ReuseBak1File = createEx(CheckBox, "re-use backup filename", TabItem7, 424, 76, 364, 20, 0, 0)
global constant Tab4_ChangeButton = createEx(PushButton, "Change", TabItem4, 444, 76, 90, 30, 0, 0)
global constant Tab4_LB1 = createEx(LText, "Name:", TabItem4, 64, 80, 148, 20, 0, 0)
global constant Tab2_Group1 = createEx(Group, "IDE", TabItem2, 232, 84, 40, 124, 0, 0)
global constant Tab2_Group2 = createEx(Group, "Form", TabItem2, 276, 84, 56, 124, 0, 0)
global constant Tab2_Group3 = createEx(Group, "Editor", TabItem2, 340, 84, 56, 124, 0, 0)
global constant Tab2_Group4 = createEx(Group, "Property", TabItem2, 412, 84, 80, 124, 0, 0)
global constant Tab2_Group5 = createEx(Group, "Project View", TabItem2, 500, 84, 92, 124, 0, 0)
global constant Tab1_Lb1 = createEx(LText, "Define Project File Type As:", TabItem1, 28, 96, 192, 40, 0, 0)
global constant WaitName = createEx(CheckBox, "Name", TabItem5, 88, 96, 196, 20, 0, 0)
global constant Tab4_Title = createEx(EditText, "", TabItem4, 256, 96, 104, 20, 0, 0)
global constant LText366 = createEx(RText, "Language Preference:", TabItem1, 280, 96, 148, 20, 0, 0)
global constant WaitFont = createEx(CheckBox, "Font", TabItem5, 344, 96, 196, 20, 0, 0)
global constant Tab2_LB1 = createEx(LText, "Always Maximize", TabItem2, 8, 100, 148, 20, 0, 0)
global constant Tab4_LB2 = createEx(LText, "Title:", TabItem4, 64, 100, 148, 20, 0, 0)
global constant DefineProjectFileType = createEx(EditText, "prj", TabItem1, 228, 100, 48, 20, 0, 0)
global constant IDE_R1 = createEx(Radio, "", Tab2_Group1, 12, 16, 20, 20, 0, 0)
global constant Design_R1 = createEx(Radio, "", Tab2_Group2, 12, 16, 20, 20, 0, 0)
global constant Code_R1 = createEx(Radio, "", Tab2_Group3, 12, 16, 20, 20, 0, 0)
global constant LangPref = createEx(SortedCombo, "", TabItem1, 440, 100, 160, 20*6, 0, 0)
global constant MenuBackupAfterSave = createEx(CheckBox, "Backup Project after MenuRun when no errors", TabItem7, 12, 104, 388, 20, 0, 0)
global constant ReuseBak2File = createEx(CheckBox, "Re-use backup filename", TabItem7, 424, 106, 364, 20, 0, 0)
global constant Tab3_Lb2 = createEx(LText, "Snap To Pixel Size", TabItem3, 12, 112, 148, 44, 0, 0)
global constant WaitTitle = createEx(CheckBox, "Caption", TabItem5, 88, 112, 196, 20, 0, 0)
global constant GridSnap = createEx(EditText, "4", TabItem3, 160, 112, 36, 20, 0, 0)
global constant WaitFontColor = createEx(CheckBox, "Font Color", TabItem5, 344, 112, 196, 20, 0, 0)
global constant Tab4_CX = createEx(EditText, "", TabItem4, 256, 116, 48, 20, 0, 0)
global constant Tab4_LB3 = createEx(LText, "CX:", TabItem4, 64, 120, 148, 20, 0, 0)
global constant Tab2_Lb2 = createEx(LText, "Maximize If Left IDE Maximized", TabItem2, 8, 128, 220, 20, 0, 0)
global constant WaitY = createEx(CheckBox, "Row", TabItem5, 88, 128, 196, 20, 0, 0)
global constant IDE_R2 = createEx(Radio, "", Tab2_Group1, 12, 44, 20, 20, 0, 0)
global constant Design_R2 = createEx(Radio, "", Tab2_Group2, 12, 44, 20, 20, 0, 0)
global constant WaitIcoFile = createEx(CheckBox, "Icon File Name", TabItem5, 344, 128, 196, 20, 0, 0)
global constant Code_R2 = createEx(Radio, "", Tab2_Group3, 12, 44, 20, 20, 0, 0)
global constant Tab3_Icon = createEx(Icon, "", TabItem3, 244, 132, 60, 64, 0, 0)
constant Tab7_LB1 = createEx(LText, "Backup Folder Name:", TabItem7, 12, 134, 150, 32, 0, 0)
global constant Tab6_lb4 = createEx(LText, "IDE", TabItem6, 28, 136, 148, 20, 0, 0)
global constant BackupFolderName = createEx(EditText, "Backups", TabItem7, 170, 136, 200, 24, 0, 0)
global constant Tab4_CY = createEx(EditText, "", TabItem4, 256, 136, 48, 20, 0, 0)
global constant Tab4_LB4 = createEx(LText, "CY:", TabItem4, 64, 140, 148, 20, 0, 0)
global constant CB_Start = createEx(CheckBox, "Start IDE with last opened or saved project", TabItem1, 8, 144, 540, 20, 0, 0)
global constant WaitX = createEx(CheckBox, "Column", TabItem5, 88, 144, 196, 20, 0, 0)
global constant WaitDefFile = createEx(CheckBox, "Def Icon File Name", TabItem5, 344, 144, 196, 20, 0, 0)
global constant MenuIDEFind = createEx(PushButton, "Find Files", TabItem6, 524, 152, 160, 28, 0, 0)
global constant Tab2_Lb3 = createEx(LText, "Last Position and Size", TabItem2, 8, 156, 216, 20, 0, 0)
global constant IDE_R3 = createEx(Radio, "", Tab2_Group1, 12, 72, 20, 20, 0, 0)
global constant Design_R3 = createEx(Radio, "", Tab2_Group2, 12, 72, 20, 20, 0, 0)
global constant Code_R3 = createEx(Radio, "", Tab2_Group3, 12, 72, 20, 20, 0, 0)
global constant Prop_R1 = createEx(Radio, "", Tab2_Group4, 12, 72, 20, 20, 0, 0)
global constant PV_R1 = createEx(Radio, "", Tab2_Group5, 12, 72, 20, 20, 0, 0)
global constant Combo5 = createEx(Combo, "", TabItem6, 32, 160, 460, 20*6, 0, 0)
global constant WaitCX = createEx(CheckBox, "Width", TabItem5, 88, 160, 196, 20, 0, 0)
global constant WaitHotFile = createEx(CheckBox, "Hot Icon File Name", TabItem5, 344, 160, 196, 20, 0, 0)
global constant Tab3_Group1 = createEx(Group, "Type", TabItem3, 16, 164, 104, 72, 0, 0)
constant ControlListView = createEx(ListView, {"Control","Name","Title","CX","CY"}, TabItem4, 60, 164, 508, 192, w32or_all({LVS_REPORT,LVS_SHOWSELALWAYS}), 0)
global constant WaitCY = createEx(CheckBox, "Height", TabItem5, 88, 176, 196, 20, 0, 0)
global constant WaitDisFile = createEx(CheckBox, "Dis Icon File Name", TabItem5, 344, 176, 196, 20, 0, 0)
global constant NoIndexing = createEx(CheckBox, "Never index when copy a control", TabItem1, 8, 180, 556, 20, 0, 0)
global constant GridDotsCheck = createEx(Radio, "Dots", Tab3_Group1, 8, 16, 84, 20, 0, 0)
global constant Tab2_Lb4 = createEx(LText, "Defaults", TabItem2, 8, 184, 148, 20, 0, 0)
global constant IDE_R4 = createEx(Radio, "", Tab2_Group1, 12, 100, 20, 20, 0, 0)
global constant Design_R4 = createEx(Radio, "", Tab2_Group2, 12, 100, 20, 20, 0, 0)
global constant Code_R4 = createEx(Radio, "", Tab2_Group3, 12, 100, 20, 20, 0, 0)
global constant Prop_R2 = createEx(Radio, "", Tab2_Group4, 12, 100, 20, 20, 0, 0)
global constant PV_R2 = createEx(Radio, "", Tab2_Group5, 12, 100, 20, 20, 0, 0)
global constant WaitRowCY = createEx(CheckBox, "Row Height", TabItem5, 88, 192, 196, 20, 0, 0)
global constant WaitXPM = createEx(CheckBox, "XPM File Name", TabItem5, 344, 192, 196, 20, 0, 0)
global constant GridLinesCheck = createEx(Radio, "Lines", Tab3_Group1, 8, 44, 88, 20, 0, 0)
global constant WaitStyle = createEx(CheckBox, "Style", TabItem5, 88, 208, 196, 20, 0, 0)
global constant WaitXPMMember = createEx(CheckBox, "XPM Member Name", TabItem5, 344, 208, 196, 20, 0, 0)
global constant Tab2_LB5 = createEx(LText, "Closed", TabItem2, 8, 212, 148, 20, 0, 0)
global constant Tab6_lb5 = createEx(LText, "Ruler", TabItem6, 28, 212, 148, 20, 0, 0)
global constant NoMinMenuRun = createEx(CheckBox, "Do Not Minimize IDE During Menu Run", TabItem1, 8, 220, 568, 20, 0, 0)
global constant WaitParent = createEx(CheckBox, "Parent", TabItem5, 88, 224, 196, 20, 0, 0)
global constant WaitBitmap = createEx(CheckBox, "Bitmap File name", TabItem5, 344, 224, 196, 20, 0, 0)
global constant MenuRulerFind = createEx(PushButton, "Find Files", TabItem6, 524, 232, 160, 28, 0, 0)
global constant Tab2_lb6 = createEx(LText, "Undocked", TabItem2, 8, 240, 148, 20, 0, 0)
global constant Combo6 = createEx(Combo, "", TabItem6, 32, 240, 460, 20*6, 0, 0)
global constant WaitHintFont = createEx(CheckBox, "Hint Font", TabItem5, 88, 240, 196, 20, 0, 0)
global constant WaitColor = createEx(CheckBox, "Back Color", TabItem5, 344, 240, 176, 20, 0, 0)
global constant Tab1_Group1 = createEx(Group, "When Open or Save(as) Project or Module:", TabItem1, 8, 248, 520, 64, 0, 0)
global constant EditPrjDef = createEx(EditText, "", Tab1_Group1, 220, 24, 204, 20, 0, 0)
global constant BrowseDef = createEx(PushButton, "Browse", Tab1_Group1, 428, 24, 88, 28, 0, 0)
global constant CB_WantDefault = createEx(CheckBox, "Start in Folder:", Tab1_Group1, 8, 28, 208, 20, 0, 0)
global constant Tab6_lb6 = createEx(LText, "Win32Lib", TabItem6, 28, 292, 148, 20, 0, 0)
global constant MenuWin32libFind = createEx(PushButton, "Find Files", TabItem6, 524, 308, 160, 28, 0, 0)
global constant Combo7 = createEx(Combo, "", TabItem6, 32, 316, 460, 20*6, 0, 0)
global constant Tab1_Group2 = createEx(Group, "When Adding Controls They Are:", TabItem1, 8, 320, 520, 60, 0, 0)
global constant ClickLocal = createEx(Radio, "Local", Tab1_Group2, 8, 24, 96, 20, 0, 0)
global constant ClickGlobal = createEx(Radio, "Global", Tab1_Group2, 104, 24, 116, 20, 0, 0)
global constant LocalCheckBox = createEx(CheckBox, "Change existing controls to this selection", Tab1_Group2, 220, 24, 292, 20, 0, 0)
global constant Tab6_lb7 = createEx(LText, "Colored Buttons", TabItem6, 32, 356, 148, 20, 0, 0)
global constant MenuCbFind = createEx(PushButton, "Find Files", TabItem6, 528, 372, 160, 28, 0, 0)
global constant Combo8 = createEx(Combo, "", TabItem6, 32, 380, 460, 20*6, 0, 0)
constant EditorPath = createEx(LText, "Default Editor", TabItem1, 8, 388, 176, 24, 0, 0)
global constant DefaultEditor = createEx(EditText, "", TabItem1, 184, 388, 196, 24, 0, 0)
constant DefaultEditorFind = createEx(PushButton, "Browse", TabItem1, 380, 388, 88, 28, 0, 0)
global constant SaveWin1 = createEx(PushButton, "Save", ConfigWindow, 598, 417, 88, 28, 0, 0)
global constant CloseWin1 = createEx(PushButton, "Close", ConfigWindow, 694, 417, 88, 28, 0, 0)
constant RestoreIDE = createEx(CheckBox, "Restore From IDE System Defaults", ConfigWindow, 8, 424, 416, 20, 0, 0)
global constant
    Design_CB1              = createEx(CheckBox, "", TabItem2, 288, 240, 24, 20, 0, 0),
    Code_CB1                = createEx(CheckBox, "", TabItem2, 352, 212, 28, 20, 0, 0),
    Prop_CB1                = createEx(CheckBox, "", TabItem2, 424, 212, 20, 20, 0, 0),
    Prop_CB2                = createEx(CheckBox, "", TabItem2, 424, 240, 20, 20, 0, 0),
    PV_CB1                  = createEx(CheckBox, "", TabItem2, 512, 212, 20, 20, 0, 0),
    PV_CB2                  = createEx(CheckBox, "", TabItem2, 512, 240, 20, 20, 0, 0)

------------------------------------------------------------------------------
--           initialise tabs
--------------------------------------------------------------------------------
procedure changeWindowText()

    setText(ConfigWindow, IDEText[56][1])
    setText(RestoreIDE, IDEText[57][1])
    setText(SaveWin1, IDEText[58][1])
    setText(CloseWin1, IDEText[59][1])
    setText(TabItem1, IDEText[60][1])
    setText(MenuInstance, IDEText[61][1])
    setText(CB_Start, IDEText[62][1])
    setText(LText366, IDEText[63][1])
    setText(Tab1_Lb1, IDEText[64][1])
    setText(Tab1_Group1, IDEText[65][1])
    setText(CB_WantDefault, IDEText[66][1])
    setText(BrowseDef, IDEText[67][1])
    setText(Tab1_Group2, IDEText[68][1])
    setText(ClickLocal, IDEText[69][1])
    setText(ClickGlobal, IDEText[70][1])
    setText(LocalCheckBox, IDEText[71][1])
    setText(MenuBackupSave, IDEText[72][1])
    setText(MenuBackupAfterSave, IDEText[1056][1])
    setText(NoMinMenuRun, IDEText[1021][1])
    setText(EditorPath, IDEText[1127][1])
    setText(DefaultEditorFind, IDEText[67][1])
    setText(TabItem2, IDEText[73][1])
    setText(Tab2_LB1, IDEText[74][1])
    setText(Tab2_Lb2, IDEText[75][1])
    setText(Tab2_Lb3, IDEText[76][1])
    setText(Tab2_Lb4, IDEText[77][1])
    setText(Tab2_LB5, IDEText[78][1])
    setText(Tab2_lb6, IDEText[79][1])
    setText(Tab2_Group2, IDEText[80][1])
    setText(Tab2_Group1, IDEText[81][1])
    setText(Tab2_Group3, IDEText[82][1])
    setText(Tab2_Group4, IDEText[83][1])
    setText(Tab2_Group5, IDEText[84][1])
    setText(TabItem3, IDEText[85][1])
    setText(Tab3_Lb1, IDEText[86][1])
    setText(Tab3_Lb2, IDEText[87][1])
    setText(Tab3_Group1, IDEText[88][1])
    setText(GridDotsCheck, IDEText[89][1])
    setText(GridLinesCheck, IDEText[90][1])
    setText(TabItem4, IDEText[91][1])
    setColumnHeadings(ControlListView, {IDEText[92][1],IDEText[1175][1],IDEText[581][1],IDEText[1176][1],IDEText[1177][1]})
    setText(Tab4_LB1, IDEText[93][1])
    setText(Tab4_LB2, IDEText[94][1])
    setText(Tab4_LB3, IDEText[95][1])
    setText(Tab4_LB4, IDEText[96][1])
    setText(Tab4_ChangeButton, IDEText[97][1])
    setText(TabItem5, IDEText[98][1])
    setText(TabItem6, IDEText[99][1])
    setText(WaitName, IDEText[100][1])
    setText(WaitTitle, IDEText[101][1])
    setText(WaitY, IDEText[102][1])
    setText(WaitX, IDEText[103][1])
    setText(WaitCX, IDEText[104][1])
    setText(WaitCY, IDEText[105][1])
    setText(WaitRowCY, IDEText[106][1])
    setText(WaitStyle, IDEText[107][1])
    setText(WaitParent, IDEText[108][1])
    setText(WaitHintFont, IDEText[109][1])
    setText(WaitFont, IDEText[110][1])
    setText(WaitFontColor, IDEText[111][1])
    setText(WaitIcoFile, IDEText[112][1])
    setText(WaitDefFile, IDEText[113][1])
    setText(WaitHotFile, IDEText[114][1])
    setText(WaitDisFile, IDEText[115][1])
    setText(WaitXPM, IDEText[116][1])
    setText(WaitXPMMember, IDEText[117][1])
    setText(WaitBitmap, IDEText[118][1])
    setText(WaitColor, IDEText[119][1])
    setText(Tab6_LB1, IDEText[120][1])
    setText(Tab6_lb4, IDEText[121][1])
    setText(MenuIDEFind, IDEText[122][1])
    setText(Tab6_lb5, IDEText[123][1])
    setText(MenuRulerFind, IDEText[122][1])
    setText(Tab6_lb6, IDEText[124][1])
    setText(MenuWin32libFind, IDEText[122][1])
    setText(Tab6_lb7, IDEText[1159][1])
    setText(MenuCbFind, IDEText[122][1])
    setText(NoIndexing, IDEText[970][1])
    setText(ReuseBak1File, IDEText[1117][1])
    setText(ReuseBak2File, IDEText[1117][1])
    setText(TabItem7,IDEText[1206][1])
    setText(Tab7_LB1,IDEText[1207][1])
    eraseItems(GridCombo)
    addItem(GridCombo, IDEText[128][1])
    addItem(GridCombo, IDEText[129][1])
    addItem(GridCombo, IDEText[130][1])
    addItem(GridCombo, IDEText[131][1])
    addItem(GridCombo, IDEText[132][1])
    addItem(GridCombo, IDEText[133][1])
    addItem(GridCombo, IDEText[134][1])
    addItem(GridCombo, IDEText[135][1])
    addItem(GridCombo, IDEText[136][1])
    addItem(GridCombo, IDEText[137][1])
    addItem(GridCombo, IDEText[138][1])
    addItem(GridCombo, IDEText[139][1])
    addItem(GridCombo, IDEText[140][1])
    addItem(GridCombo, IDEText[141][1])
    addItem(GridCombo, IDEText[142][1])
    addItem(GridCombo, IDEText[143][1])
    addItem(GridCombo, IDEText[144][1])
    addItem(GridCombo, IDEText[145][1])
    addItem(GridCombo, IDEText[146][1])
    addItem(GridCombo, IDEText[147][1])
    addItem(GridCombo, IDEText[148][1])


end procedure

setWindowBackColor(Tab3_Icon,Blue)

setVisible(RestoreIDE, w32False)       --for tab4
setEnable(RestoreIDE, w32False)    --for tab4

setCheck(ClickLocal, w32True)
setCheck(LocalCheckBox, w32False)
setCheck(MenuInstance, w32True)
setCheck(MenuBackupSave, w32True)
setCheck(NoIndexing, w32False)
setCheck(NoMinMenuRun, w32False)

setText(DefineProjectFileType, projectFileType)

addItem(GridCombo, "Black")
addItem(GridCombo, "Blue")
addItem(GridCombo, "Bright Blue")
addItem(GridCombo, "Green")
addItem(GridCombo, "Bright Green")
addItem(GridCombo, "Cyan")
addItem(GridCombo, "Bright Cyan")
addItem(GridCombo, "Red")
addItem(GridCombo, "Bright Red")
addItem(GridCombo, "Magenta")
addItem(GridCombo, "Bright Magenta")
addItem(GridCombo, "Brown")
addItem(GridCombo, "White")
addItem(GridCombo, "Bright White")
addItem(GridCombo, "Gray")
addItem(GridCombo, "Yellow")
addItem(GridCombo, "DarkGray")
addItem(GridCombo, "LightGray")
addItem(GridCombo, "Pink")
addItem(GridCombo, "Purple")
addItem(GridCombo, "Parchment")

setFocus(TabItem1)
-------------------------------------------------------------------------------
--settingsBuffer slot constants
constant cfgGridColor = 1,
cfgGridColorname = 2,
cfgGridPixel = 3,
cfgGridStyle = 4,
         cfgControls = 43,
         cfgLangPref = 45
--       cfgDefaultEditor=60,
--       cfgBackupFolderName=65

integer
    saveIDE_R1,
    saveIDE_R2,
    saveIDE_R3,
    saveIDE_R4,
    saveDesign_R1,
    saveDesign_R2,
    saveDesign_R3,
    saveDesign_R4,
    saveDesign_CB1,
    saveCode_R1,
    saveCode_R2,
    saveCode_R3,
    saveCode_R4,
    saveCode_CB1,
    savePV_R1,
    savePV_R2,
    savePV_CB1,
    savePV_CB2,
    saveProp_R1,
    saveProp_R2,
    saveProp_CB1,
    saveProp_CB2,
    saveCB_WantDefault,
    saveCB_Start,
    prevDots,
    prevSnap,
    prevColor,
    saveNoMin

sequence
    saveEditPrjDef,
    saveProjectFileType,
    saveDefaultEditor,
    saveBackupFolder,
    Colors,
    WaitNames,          --these names correspond to the controls[which][what] what name
    WinNames,           --these are the control names in the create statements
    LVSelected

    LVSelected = {}

    Colors = {Black, Blue, BrightBlue, Green, BrightGreen, Cyan, BrightCyan, Red,
              BrightRed, Magenta, BrightMagenta, Brown, White, BrightWhite, Gray,
              Yellow, DarkGray, LightGray, Pink, Purple, Parchment}
    WaitNames = {"Name","Title","Y","X","CX","CY","RowHeight","Style","ControlParent","HintFontName",
                 "FontName","FontColor","IcoFile","IcoFile","TwoIcoFile","TriIcoFile","XPM",
                 "XPMmember","BitmapFile","BkColor"}
    WinNames = {WaitName,WaitTitle,WaitY,WaitX,WaitCX,WaitCY,WaitRowCY,WaitStyle,WaitParent,
                WaitHintFont,WaitFont,WaitFontColor,WaitIcoFile,WaitDefFile,WaitHotFile,
                WaitDisFile,WaitXPM,WaitXPMMember,WaitBitmap,WaitColor}

global sequence
    IdeDocs,
    RulerDocs,
    Win32libDocs,
    CbDocs,
    theStyles

    IdeDocs = {}
    RulerDocs = {}
    Win32libDocs = {}
    CbDocs = {}

-------------------------------------------------------------------------------
--callback code and selectDirectory params code from Win32lib demo by
--Thomas Parslow
-------------------------------------------------------------------------------
integer vcb vcb = 0
integer vattempts vattempts = 0
atom bif bif = 0

global function callback(atom hWnd, atom msg, atom lParam, atom lData)
atom res
sequence foldername
integer VOID

    res = 0
    if msg=BFFM_INITIALIZED then
        if hWnd=0 then
            -- Starting initialiation
            bif = lParam
            vcb = 0
            vattempts += 1
            w32store(bif, bfTitle, "Get Default Folder")
        else
            -- Completed initialiation.
            vcb = 1
        end if

    elsif msg=BFFM_VALIDATEFAILED then
        foldername = w32peek_string(lParam)
        VOID = displayErrorMessage(36,{foldername})
        if VOID=IDOK then
            res = -1
        else
            res = 0
        end if

    elsif msg=BFFM_SELCHANGED and vcb then
        --made selection then pressed cancelled button
    end if

    return res
end function
-------------------------------------------------------------------------------
global procedure drawGrid(integer id)

--David Cuny was kind enough to share how to blt the dots
--faster than what I was doing.

sequence size
integer blitsize, many, many1, many2

--    if SnapSize < 4 then
--      SnapSize=4
--    end if
    blitsize = 20
    many = floor(blitsize/SnapSize)
    many1 = blitsize-( many*SnapSize )
    many2 = SnapSize-many1
    blitsize += many2

    size = getRect(Screen)
    if GridHide then
        return
    end if

    if not SnapSize then
        return
    end if

    setPenColor(id, GridColor)
    setPenColor(tile, GridColor)
    setPenColor(BackBlit, GridColor)

    if GridDots then

        if SnapSize<41 then
            for i=0 to blitsize by SnapSize do
                for j=0 to blitsize by SnapSize do
                    drawLine(tile, i, j, i+1, j+1)
                end for
            end for

            for i=0 to size[3] by blitsize do
                for j=0 to size[4] by blitsize do
                    copyBlt(id, i, j, tile)
                    copyBlt(BackBlit, i, j, tile)
                end for
            end for
        else
            for i=0 to size[3] by SnapSize do
                for j=0 to size[4] by SnapSize do
                    drawLine(id, i, j, i+1, j+1)
                    drawLine(BackBlit, i, j, i+1, j+1)
                end for
            end for
        end if

    else

        for i=0 to size[3] by SnapSize do
            drawLine(id, i, 0, i, size[4])
            drawLine(BackBlit, i, 0, i, size[4])
        end for

        for i=0 to size[4] by SnapSize do
            drawLine(id, 0, i, size[3], i)
            drawLine(BackBlit, 0, i, size[3], i)
        end for

    end if

end procedure
--------------------------------------------------------------------------------
function look_at(sequence path_name, sequence Entry)

    if equal(upper(Entry[D_NAME]), "DOCS\\IDE.HTM") then
        addItem(Combo5, path_name & "\\" & Entry[D_NAME])
    elsif equal(upper(Entry[D_NAME]), "DOCS\\RULER.CHM")then
        addItem(Combo6, path_name & "\\" & Entry[D_NAME])
    elsif equal(upper(Entry[D_NAME]), "index.HTM")then
        addItem(Combo7, path_name & "\\" & Entry[D_NAME])
    end if

    return 0 -- keep going

end function
--------------------------------------------------------------------------------
procedure ConfigWindow_onClose(integer self, integer event, sequence params)
sequence size, theText
integer j

--User may have made changes to grid and control information but chose not to save it
--but wants to use for current session.....

--default control info
    for i=1 to getLVCount(ControlListView) do
        theText = getLVAllText(ControlListView, i)
        --controls list is 1 larger than listview because POINTER is first entry
        j = i+1
        ControlList[j][ControlCX] = val(theText[4])
        ControlList[j][ControlCY] = val(theText[5])
        ControlList[j][ControlName] = theText[2]
        ControlList[j][ControlTitle] = theText[3]
    end for

    --if grid was changed, then redraw it now
    size = getRect(Screen)
    SnapSize = getNumber(GridSnap)
--    if SnapSize < 4 then
--      SnapSize = 4
--    end if

    if prevSnap!=SnapSize then
        setPenColor(GridBlit, getSysColor(COLOR_BTNFACE))
        drawRectangle(GridBlit, w32True, 0, 0, size[3], size[4])
        setPenColor(tile, getSysColor(COLOR_BTNFACE))
        drawRectangle(tile, w32True, 0, 0, 40, 40)
    end if

    if isChecked(GridDotsCheck) then
        GridDots = w32True
    end if

    if isChecked(GridLinesCheck) then
        GridDots = w32False
    end if

    drawGrid(GridBlit)

    copyBlt(ControlBlit, 0, 0, GridBlit)
    copyBlt(OffScreenBlit, 0, 0, GridBlit)
    call_proc(drawIt_id,{})
    bitBlt(Design, 0, 0, ControlBlit,0, 0, gridX,gridY,SRCCOPY)
    bitBlt(OffScreen, 0, 0, OffScreenBlit,0, 0, gridX,gridY,SRCCOPY)

    call_proc(updateProperties_id,{})

end procedure
setHandler(ConfigWindow, w32HClose, routine_id("ConfigWindow_onClose"))
--------------------------------------------------------------------------------
procedure ConfigWindow_onOpen(integer self, integer event, sequence params)
integer k
sequence newSettings, Path, theData, theWhat, theCX, theCY, theName, theTitle
object euDir
integer at, ok, foundIt, VOID
sequence SB

atom sysColor = getSysColor(COLOR_WINDOW) 
     
    -- CMB not just Phix set the background color of the labels 
 
--  setWindowBackColor(object id, object Color) 
    setWindowBackColor(Tab3_Lb1, sysColor) 
    setWindowBackColor(Tab6_LB1, sysColor) 
    setWindowBackColor(Tab4_LB1, sysColor) 
    setWindowBackColor(Tab1_Lb1, sysColor) 
    setWindowBackColor(Tab2_LB1, sysColor) 
    setWindowBackColor(Tab4_LB2, sysColor) 
    setWindowBackColor(Tab4_LB2, sysColor) 
    setWindowBackColor(Tab4_LB3, sysColor) 
    setWindowBackColor(Tab2_Lb2, sysColor) 
    setWindowBackColor(Tab6_lb4, sysColor) 
    setWindowBackColor(Tab4_LB4, sysColor) 
    setWindowBackColor(Tab2_Lb3, sysColor) 
    setWindowBackColor(Tab2_Lb4, sysColor) 
    setWindowBackColor(Tab2_LB5, sysColor) 
    setWindowBackColor(Tab6_lb5, sysColor) 
    setWindowBackColor(Tab2_lb6, sysColor) 
    setWindowBackColor(Tab6_lb6, sysColor) 
    setWindowBackColor(Tab6_lb7, sysColor) 
    setWindowBackColor(EditorPath, sysColor) 
    setWindowBackColor(LText366, sysColor) 
    setWindowBackColor(Tab3_Lb2, sysColor) 
    setWindowBackColor(Tab7_LB1, sysColor) 
 
    setText(DefineProjectFileType, projectFileType)

        --set tab1 data
    --save the original settings in case of close button
    saveCB_WantDefault = isChecked(CB_WantDefault)
    saveCB_Start = isChecked(CB_Start)
    saveEditPrjDef = getText(EditPrjDef)
    saveProjectFileType = getText(DefineProjectFileType)
    saveNoMin = isChecked(NoMinMenuRun)
    saveDefaultEditor = getText(DefaultEditor)
    saveBackupFolder = getText(BackupFolderName)
    --find the langauge in TheLanguages and set that index
    for i=1 to length(TheLanguages) do
        if equal(settingsBuffer[cfgLangPref][2], TheLanguages[i][2]) then
            setIndex(LangPref, i)
            exit
        end if
    end for

    if not equal(lower(settingsBuffer[cfgLangPref][2]),"english") then
        changeWindowText()
    end if

    --tab2
    --save the original settings in case of Cancel button
    saveIDE_R1 = isChecked(IDE_R1)
    saveIDE_R2 = isChecked(IDE_R2)
    saveIDE_R3 = isChecked(IDE_R3)
    saveIDE_R4 = isChecked(IDE_R4)
    saveDesign_R1 = isChecked(Design_R1)
    saveDesign_R2 = isChecked(Design_R2)
    saveDesign_R3 = isChecked(Design_R3)
    saveDesign_R4 = isChecked(Design_R4)
    saveDesign_CB1 = isChecked(Design_CB1)
    saveCode_R1 = isChecked(Code_R1)
    saveCode_R2 = isChecked(Code_R2)
    saveCode_R3 = isChecked(Code_R3)
    saveCode_R4 = isChecked(Code_R4)
    saveCode_CB1 = isChecked(Code_CB1)
    savePV_R1 = isChecked(PV_R1)
    savePV_R2 = isChecked(PV_R2)
    savePV_CB1 = isChecked(PV_CB1)
    savePV_CB2 = isChecked(PV_CB2)
    saveProp_R1 = isChecked(Prop_R1)
    saveProp_R2 = isChecked(Prop_R2)
    saveProp_CB1 = isChecked(Prop_CB1)
    saveProp_CB2 = isChecked(Prop_CB2)
    saveCB_WantDefault = isChecked(CB_WantDefault)
    saveCB_Start = isChecked(CB_Start)
    saveEditPrjDef = getText(EditPrjDef)
    saveProjectFileType = getText(DefineProjectFileType)

    if copyIndexSw then
        setCheck(NoIndexing,w32False)
    else
        setCheck(NoIndexing,w32True)
    end if
    --set tab3 data
    prevColor = GridColor
    prevDots = GridDots
    prevSnap = SnapSize

    for i=1 to getCount(GridCombo) do
        if equal(GridColorName, getItem(GridCombo, i)) then
            setIndex(GridCombo, i)
            exit
        end if
    end for

    if GridDots then
        setCheck(GridDotsCheck, w32True)
    else
        setCheck(GridLinesCheck, w32True)
    end if

    setText(GridSnap, sprint(SnapSize))

    setWindowBackColor(Tab3_Icon, GridColor)

    --set tab4 data
    newSettings = {"",0,0,"",""}

    k = 0
    theData = {}
    eraseItems(ControlListView)
    VOID = setLVInsert(1)
    SB = settingsBuffer[cfgControls][2]
    --skip Pointer, the first entry
    for i=2 to length(SB) do
        --count how many loaded
        k += 1
        theWhat = SB[i][1]
        theCX = sprint(SB[i][2])
        theCY = sprint(SB[i][3])
        theName = SB[i][4]
        theTitle = SB[i][5]
        theData &= addLVItem(ControlListView, 0, {theWhat, theName, theTitle, theCX, theCY})
    end for


    while getLVCount(ControlListView)<(length(MasterList)-1) do
        k += 1
        --get it from the MasterList
        --this happens if user is behind some releases of IDE and I have
        --added some new controls.

        --add 1 to k because Masterlist starts with Pointer
        theWhat = MasterList[k+1][ControlClass]
        theName = MasterList[k+1][ControlName]
        theTitle = MasterList[k+1][ControlTitle]
        theCX = sprint(MasterList[k+1][ControlCX])
        theCY = sprint(MasterList[k+1][ControlCY])
        theData &= addLVItem(ControlListView, 0, {theWhat, theName, theTitle, theCX, theCY})

        --increase settingsbuffer
        newSettings[1] = MasterList[k+1][ControlClass]
        newSettings[2] = MasterList[k+1][ControlCX]
        newSettings[3] = MasterList[k+1][ControlCY]
        newSettings[4] = MasterList[k+1][ControlName]
        newSettings[5] = MasterList[k+1][ControlTitle]

        settingsBuffer[cfgControls][2] = settingsBuffer[cfgControls][2] & {newSettings}
    end while

    --set tab5 data
    if length(waitForKeys) then
        for i=1 to length(WaitNames) do
            if find(WaitNames[i], waitForKeys) then
                setCheck(WinNames[i], w32True)
            end if
        end for
    end if
    setCheck(WinNames[1],w32True)
    setEnable(WinNames[1],w32False)

    --set tab6 data
    --empty the combos
    eraseItems(Combo5)
    eraseItems(Combo6)
    eraseItems(Combo7)
    eraseItems(Combo8)

    --build the combo boxes for the various libs
    euDir = whereEu
    ok = walk_dir(euDir, routine_id("look_at"), w32True)

    --setIndex to one in current_dir() if found, else the first entry
    if getCount(Combo5) then
        setIndex(Combo5, 1)
    end if

    if getCount(Combo6) then
        setIndex(Combo6, 1)
    end if

    if getCount(Combo7) then
        setIndex(Combo7, 1)
    end if

    if getCount(Combo8) then
        setIndex(Combo8, 1)
    end if

    Path = {}
    for i=1 to getCount(Combo5) do

        at = match("IDE.HTM", upper(getItem(Combo5, i)))

        if at then
            Path = getItem(Combo5, i)
            Path = Path[1..at-2]

            if length(Path)
            and equal(Path,the_current_dir) then
                setIndex(Combo5, i)
                exit
            end if
        end if
    end for

    Path = {}
    for i=1 to getCount(Combo6) do

        at = match("RULER.CHM", upper(getItem(Combo6, i)))

        if at then
            Path = getItem(Combo6, i)
            Path = Path[1..at-2]

            if length(Path)
            and equal(Path,the_current_dir) then
                setIndex(Combo6, i)
                exit
            end if
        end if
    end for

    Path = {}
    for i=1 to getCount(Combo7) do

        at = match("INDEX.HTM", upper(getItem(Combo7, i)))

        if at then
            Path = getItem(Combo7, i)
            Path = Path[1..at-2]

            if length(Path)
            and equal(Path,the_current_dir) then
                setIndex(Combo7, i)
                exit
            end if
        end if
    end for

    Path = {}
    for i=1 to getCount(Combo8) do

        at = match("COLOREDBUTTON.HTM", upper(getItem(Combo8, i)))

        if at then
            Path = getItem(Combo8, i)
            Path = Path[1..at-2]

            if length(Path)
            and equal(Path,the_current_dir) then
                setIndex(Combo8, i)
                exit
            end if
        end if
    end for

    --if the user has already set the doc then use that file and set index to it.
    if length(IdeDocs) then
        foundIt = w32False
        for i=1 to getCount(Combo5) do
            if equal(IdeDocs, getItem(Combo5, i)) then
                setIndex(Combo5, i)
                foundIt = w32True
                exit
            end if
        end for
        if foundIt=w32False then
            --must have been selected from open dialog
            addItem(Combo5, IdeDocs)
            setIndex(Combo5, getCount(Combo5))
        end if
    end if

    if length(RulerDocs) then
        foundIt = w32False
        for i=1 to getCount(Combo6) do
            if equal(RulerDocs, getItem(Combo6, i)) then
                setIndex(Combo6, i)
                foundIt = w32True
                exit
            end if
        end for
        if foundIt=w32False then
            --must have been selected from open dialog
            addItem(Combo6, RulerDocs)
            setIndex(Combo6, getCount(Combo6))
        end if
    end if

    if length(Win32libDocs) then
        foundIt = w32False
        for i=1 to getCount(Combo7) do
            if equal(Win32libDocs, getItem(Combo7, i)) then
                setIndex(Combo7, i)
                foundIt = w32True
                exit
            end if
        end for
        if foundIt=w32False then
            --must have been selected from open dialog
            addItem(Combo7, Win32libDocs)
            setIndex(Combo7, getCount(Combo7))
        end if
    end if

    if length(CbDocs) then
        foundIt = w32False
        for i=1 to getCount(Combo8) do
            if equal(CbDocs, getItem(Combo8, i)) then
                setIndex(Combo8, i)
                foundIt = w32True
                exit
            end if
        end for
        if foundIt=w32False then
            --must have been selected from open dialog
            addItem(Combo8, CbDocs)
            setIndex(Combo8, getCount(Combo8))
        end if
    end if

    --now make sure the index is set
    if not length(IdeDocs) then
        if getCount(Combo5) then
            IdeDocs = getItem(Combo5, getIndex(Combo5))
        end if
    end if

    if not length(RulerDocs) then
        if getCount(Combo6) then
            RulerDocs = getItem(Combo6, getIndex(Combo6))
        end if
    end if

    if not length(Win32libDocs) then
        if getCount(Combo7) then
            Win32libDocs = getItem(Combo7, getIndex(Combo7))
        end if
    end if

    if not length(CbDocs) then
        if getCount(Combo8) then
            CbDocs = getItem(Combo8, getIndex(Combo8))
        end if
    end if

    eraseItems(LangPref)
    for i=1 to length(TheLanguages) do
        addItem(LangPref, TheLanguages[i])
    end for

    for i=1 to getCount(LangPref) do
        if equal(getItem(LangPref, i),settingsBuffer[cfgLangPref][2]) then
            setIndex(LangPref,i)
            exit
        end if
    end for
end procedure
setHandler(ConfigWindow, w32HOpen, routine_id("ConfigWindow_onOpen"))
--------------------------------------------------------------------------------
procedure TabItem1_onClick(integer self, integer event, sequence params)
    setEnable(RestoreIDE, w32False)
    setVisible(RestoreIDE, w32False)
end procedure
setHandler({TabItem1,TabItem2,TabItem3,TabItem5,TabItem6}, w32HClick, routine_id("TabItem1_onClick"))
--------------------------------------------------------------------------------
procedure TabItem4_onClick(integer self, integer event, sequence params)
    setEnable(RestoreIDE, w32True)
    setVisible(RestoreIDE, w32True)
end procedure
setHandler(TabItem4, w32HClick, routine_id("TabItem4_onClick"))
--------------------------------------------------------------------------------
--procedure Code_R1_onClick(integer self, integer event, sequence params)
--  if self or event or sequence(params) then end if
--  if isChecked(Code_R1) then
--      setCheck(Code_CB1,w32False)
--  end if
--end procedure
--------------------------------------------------------------------------------
--procedure Code_R2_onClick(integer self, integer event, sequence params)
--  if self or event or sequence(params) then end if
--  if isChecked(Code_R2) then
--      setCheck(Code_CB1,w32False)
--  end if
--end procedure
--------------------------------------------------------------------------------
--procedure Code_R3_onClick(integer self, integer event, sequence params)
--  if self or event or sequence(params) then end if
--  if isChecked(Code_R3) then
--      setCheck(Code_CB1,w32False)
--  end if
--end procedure
--------------------------------------------------------------------------------
--procedure Code_R4_onClick(integer self, integer event, sequence params)
--  if self or event or sequence(params) then end if
--  if isChecked(Code_R4) then
--      setCheck(Code_CB1,w32False)
--  end if
--end procedure
--------------------------------------------------------------------------------
--procedure Code_CB1_onClick(integer self, integer event, sequence params)
--  if self or event or sequence(params) then end if
--  if isChecked(Code_CB1) then
--      setCheck(Code_R4,w32True)
--      setCheck(Code_R3,w32False)
--      setCheck(Code_R2,w32False)
--      setCheck(Code_R1,w32False)
--  end if
--end procedure
--------------------------------------------------------------------------------
procedure MenuInstance_onClick(integer self, integer event, sequence params)
    if not isChecked(MenuInstance) then
    --turn on multiple instance
        w32Proc(xCloseHandle,{hMutex})
    end if
end procedure
setHandler(MenuInstance, w32HClick, routine_id("MenuInstance_onClick"))
--------------------------------------------------------------------------------
procedure LangPref_onChange(integer self, integer event, sequence params)
    for i=1 to length(TheLanguages) do
        if equal(getItem(LangPref,getIndex(LangPref)), TheLanguages[i]) then
            loadLanguagePreference(TheLanguages[i])
            changeWindowText()
            translateNow = w32True
            --translate Controls, Properties
            translateControls()
            exit
        end if
    end for
end procedure
setHandler(LangPref, w32HChange, routine_id("LangPref_onChange"))
--------------------------------------------------------------------------------
procedure GridCombo_onChange(integer self, integer event, sequence params)
integer index

    index = getIndex(GridCombo)
    if not index then
        return
    end if

    GridColorName = getItem(GridCombo, getIndex(GridCombo))
    GridColor = Colors[getIndex(GridCombo)]
    setWindowBackColor(Tab3_Icon, GridColor)
end procedure
setHandler(GridCombo, w32HChange, routine_id("GridCombo_onChange"))
--------------------------------------------------------------------------------
procedure MenuIDEFind_onClick(integer self, integer event, sequence params)
sequence fileName,currentdirectory
integer foundIt

    currentdirectory = current_dir()

    fileName = {}
    fileName = getOpenFileName(ConfigWindow, "docs\\IDE.htm", {IDEText[1115][1], "*.HTM"})

    if length(fileName) then
        IdeDocs = fileName
        foundIt = w32False
        for i=1 to getCount(Combo5) do
            if equal(getItem(Combo5, i), IdeDocs) then
                foundIt = w32True
                exit
            end if
        end for
        if foundIt then
            --got it already
        else
            addItem(Combo5, IdeDocs)
            setIndex(Combo5, getCount(Combo5))
        end if
    end if

    foundIt = chdir(currentdirectory)
end procedure
setHandler(MenuIDEFind, w32HClick, routine_id("MenuIDEFind_onClick"))
--------------------------------------------------------------------------------
procedure Combo5_onChange(integer self, integer event, sequence params)
    IdeDocs = getItem(Combo5, getIndex(Combo5))
end procedure
setHandler(Combo5, w32HChange, routine_id("Combo5_onChange"))
--------------------------------------------------------------------------------
procedure BrowseDef_onClick(integer self, integer event, sequence params)
sequence folders

    folders = selectDirectory("Get a Dir", {BIF_USENEWUI,BIF_VALIDATE},
                              routine_id("callback"), 0)

    if length(folders) then
        setText(EditPrjDef, folders)
    end if
end procedure
setHandler(BrowseDef, w32HClick, routine_id("BrowseDef_onClick"))
--------------------------------------------------------------------------------
procedure DefaultEditorFind_onClick(integer self, integer event, sequence params)
sequence fileName,currentdirectory

    currentdirectory = current_dir()

    fileName = getOpenFileName(ConfigWindow, current_dir(),
                               {IDEText[488][1],"*.exw",IDEText[1128][1],"*.exe",IDEText[1103][1],"*.*"})
    if length(fileName) then
        setText(DefaultEditor,fileName)
    end if
end procedure
setHandler(DefaultEditorFind, w32HClick, routine_id("DefaultEditorFind_onClick"))
--------------------------------------------------------------------------------
procedure MenuRulerFind_onClick(integer self, integer event, sequence params)
sequence fileName,currentdirectory
integer foundIt

    currentdirectory = current_dir()

    fileName = {}
    fileName = getOpenFileName(ConfigWindow, "docs\\ruler.chm", {IDEText[1116][1], "*.CHM"})

    if length(fileName) then
        RulerDocs = fileName
        foundIt = w32False
        for i=1 to getCount(Combo6) do
            if equal(getItem(Combo6, i), RulerDocs) then
                foundIt = w32True
                exit
            end if
        end for
        if foundIt then
            --got it already
        else
            addItem(Combo6, RulerDocs)
            setIndex(Combo6, getCount(Combo6))
        end if
    end if
    foundIt = chdir(currentdirectory)
end procedure
setHandler(MenuRulerFind, w32HClick, routine_id("MenuRulerFind_onClick"))
--------------------------------------------------------------------------------
procedure Combo6_onClick(integer self, integer event, sequence params)
    RulerDocs = getItem(Combo6, getIndex(Combo6))
end procedure
setHandler(Combo6, w32HClick, routine_id("Combo6_onClick"))
--------------------------------------------------------------------------------
procedure MenuCbFind_onClick(integer self, integer event, sequence params)
sequence fileName,currentdirectory
integer foundIt

    currentdirectory = current_dir()

    fileName = {}
    fileName = getOpenFileName(ConfigWindow, "docs\\coloredbutton.htm", {IDEText[1115][1], "*.HTM"})

    if length(fileName) then
        CbDocs = fileName
        foundIt = w32False
        for i=1 to getCount(Combo8) do
            if equal(getItem(Combo8, i), CbDocs) then
                foundIt = w32True
                exit
            end if
        end for
        if foundIt then
            --got it already
        else
            addItem(Combo8, CbDocs)
            setIndex(Combo8, getCount(Combo8))
        end if
    end if

    foundIt = chdir(currentdirectory)
end procedure
setHandler(MenuCbFind, w32HClick, routine_id("MenuCbFind_onClick"))
--------------------------------------------------------------------------------
procedure Combo8_onChange(integer self, integer event, sequence params)
    CbDocs = getItem(Combo8, getIndex(Combo8))
end procedure
setHandler(Combo8, w32HChange, routine_id("Combo8_onChange"))
--------------------------------------------------------------------------------
procedure LocalCheckBox_onClick(integer self, integer event, sequence params)
    if isChecked(LocalCheckBox) then
    -- save controls to window
        if selectedWindow then
            windows[selectedWindow] = controls
        end if
        for i=1 to length(windows) do
            for j=1 to length(windows[i]) do
                if isChecked(ClickLocal) then
                    windows[i][j][Local] = w32True
                else
                    windows[i][j][Local] = w32False
                end if
            end for
            if i=selectedWindow then
                controls = windows[i]
            end if
        end for
    end if
end procedure
setHandler(LocalCheckBox, w32HClick, routine_id("LocalCheckBox_onClick"))
--------------------------------------------------------------------------------
procedure MenuWin32libFind_onClick(integer self, integer event, sequence params)
sequence fileName,currentdirectory
integer foundIt

    currentdirectory = current_dir()

    fileName = {}
    fileName = getOpenFileName(ConfigWindow, "index.htm", {IDEText[1115][1], "*.HTM"})

    if length(fileName) then
        Win32libDocs = fileName
        foundIt = w32False
        for i=1 to getCount(Combo7) do
            if equal(getItem(Combo7, i), Win32libDocs) then
                foundIt = w32True
                exit
            end if
        end for
        if foundIt then
            --got it already
        else
            addItem(Combo7, Win32libDocs)
            setIndex(Combo7, getCount(Combo7))
        end if
    end if
    foundIt = chdir(currentdirectory)
end procedure
setHandler(MenuWin32libFind, w32HClick, routine_id("MenuWin32libFind_onClick"))
--------------------------------------------------------------------------------
procedure Combo7_onClick(integer self, integer event, sequence params)
    Win32libDocs = getItem(Combo7, getIndex(Combo7))
end procedure
setHandler(Combo7, w32HClick, routine_id("Combo7_onClick"))
--------------------------------------------------------------------------------
procedure SaveWin1_onClick(integer self, integer event, sequence params)
sequence theText

    --save all the tabs data now
    if length(getText(DefineProjectFileType))=3 then
    --ok
        projectFileType = lower(getText(DefineProjectFileType))
    else
        ok = displayErrorMessage(188,{})
        return
    end if

    if isChecked(ClickLocal) then
        saveLocal = w32True
    else
        saveLocal = w32False
    end if

    if isChecked(NoIndexing) then
        if copyIndexSw then
            ok = invokeHandler(ToolCopyIndex, w32HClick, {})
            copyIndexSw = w32False
        end if
    else
        if not copyIndexSw then
            ok = invokeHandler(ToolCopyIndexD, w32HClick, {})
            copyIndexSw = w32True
        end if
    end if

        --tab3
    if GridColor then
        settingsBuffer[cfgGridColor] = {"",0}
        settingsBuffer[cfgGridColor][1] = "Grid Color"
        settingsBuffer[cfgGridColor][2] = GridColor
    end if
    if length(GridColorName) then
        settingsBuffer[cfgGridColorname] = {"",""}
        settingsBuffer[cfgGridColorname][1] = "Grid Color Name"
        settingsBuffer[cfgGridColorname][2] = GridColorName
    end if
    if GridSnap then
        settingsBuffer[cfgGridPixel] = {"",0}
        settingsBuffer[cfgGridPixel][1] = "Grid Pixel"
        settingsBuffer[cfgGridPixel][2] = getNumber(GridSnap)
    end if

    settingsBuffer[cfgGridStyle] = {"",""}
    settingsBuffer[cfgGridStyle][1] = "Grid Style"
    if isChecked(GridDotsCheck) then
        settingsBuffer[cfgGridStyle][2] = "dots"
    else
        settingsBuffer[cfgGridStyle][2] = "lines"
    end if

    settingsBuffer[cfgLangPref][2] = getItem(LangPref,getIndex(LangPref))

        --tab4
        --save changes in buffer

    --load values from ListView now
    for i=1 to getLVCount(ControlListView) do
        theText = getLVAllText(ControlListView, i)
        --add 1 because first Pointer is not in listview
        settingsBuffer[cfgControls][2][i+1][1] = theText[1]
        settingsBuffer[cfgControls][2][i+1][2] = val(theText[4])       --CX
        settingsBuffer[cfgControls][2][i+1][3] = val(theText[5])       --CY
        settingsBuffer[cfgControls][2][i+1][4] = theText[2]        --Name
        settingsBuffer[cfgControls][2][i+1][5] = theText[3]        --Title
    end for

    waitForKeys = {}
    for i=1 to length(WinNames) do
        if i=1 then
            setCheck(WinNames[1],w32True)
        end if
        if isChecked(WinNames[i]) then
            --add property name to array
            waitForKeys &= {WaitNames[i]}
        end if
    end for

    --update the IDE.cfg file
    call_proc(saveDefaultSettingsId,{})
    closeWindow(ConfigWindow)
end procedure
setHandler(SaveWin1, w32HClick, routine_id("SaveWin1_onClick"))
--------------------------------------------------------------------------------
procedure CloseWin1_onClick(integer self, integer event, sequence params)
        --restore
    setCheck(IDE_R1, saveIDE_R1)
    setCheck(IDE_R2, saveIDE_R2)
    setCheck(IDE_R3, saveIDE_R3)
    setCheck(IDE_R4, saveIDE_R4)
    setCheck(Design_R1, saveDesign_R1)
    setCheck(Design_R2, saveDesign_R2)
    setCheck(Design_R3, saveDesign_R3)
    setCheck(Design_R4, saveDesign_R4)
    setCheck(Design_CB1, saveDesign_CB1)
    setCheck(Code_R1, saveCode_R1)
    setCheck(Code_R2, saveCode_R2)
    setCheck(Code_R3, saveCode_R3)
    setCheck(Code_R4, saveCode_R4)
    setCheck(Code_CB1, saveCode_CB1)
    setCheck(PV_R1, savePV_R1)
    setCheck(PV_R2, savePV_R2)
    setCheck(PV_CB1, savePV_CB1)
    setCheck(PV_CB2, savePV_CB2)
    setCheck(Prop_R1, saveProp_R1)
    setCheck(Prop_R2, saveProp_R2)
    setCheck(Prop_CB1, saveProp_CB1)
    setCheck(Prop_CB2, saveProp_CB2)
    setCheck(CB_WantDefault, saveCB_WantDefault)
    setCheck(CB_Start, saveCB_Start)
    setText(EditPrjDef, saveEditPrjDef)
    setText(DefineProjectFileType, saveProjectFileType)
    setText(DefaultEditor, saveDefaultEditor)
    setText(BackupFolderName, saveBackupFolder)
    setCheck(NoMinMenuRun, saveNoMin)

    closeWindow(ConfigWindow)

end procedure
setHandler(CloseWin1, w32HClick, routine_id("CloseWin1_onClick"))
--------------------------------------------------------------------------------
procedure RestoreIDE_onClick(integer self, integer event, sequence params)
integer VOID
sequence theData, theWhat, theCX, theCY, theName, theTitle

    theData = {}
    eraseItems(ControlListView)
    VOID = setLVInsert(1)
    for i=2 to length(MasterList) do
        theWhat = MasterList[i][ControlClass]
        theCX = sprint(MasterList[i][ControlCX])
        theCY = sprint(MasterList[i][ControlCY])
        theName = MasterList[i][ControlName]
        theTitle = MasterList[i][ControlTitle]
        theData &= addLVItem(ControlListView, 0, {theWhat, theName, theTitle, theCX, theCY})
    end for

end procedure
setHandler(RestoreIDE, w32HClick, routine_id("RestoreIDE_onClick"))
-------------------------------------------------------------------------------
procedure ControlListView_onClick(integer self, integer event, sequence params)

    LVSelected = getLVSelected(ControlListView)
    if length(LVSelected)>0 then
        setText(Tab4_Name, getLVItemText(ControlListView, LVSelected[1],2))
        setText(Tab4_Title, getLVItemText(ControlListView, LVSelected[1],3))
        setText(Tab4_CX, getLVItemText(ControlListView, LVSelected[1],4))
        setText(Tab4_CY, getLVItemText(ControlListView, LVSelected[1],5))
    else
        setText(Tab4_Name, "")
        setText(Tab4_Title, "")
        setText(Tab4_CX, "")
        setText(Tab4_CY, "")
    end if

end procedure
setHandler(ControlListView, w32HClick, routine_id("ControlListView_onClick"))
--------------------------------------------------------------------------------
procedure Tab4_ChangeButton_onClick(integer self, integer event, sequence params)
sequence newText

    if length(LVSelected) then
        for i=1 to length(LVSelected) do
            newText = getText(Tab4_Name)
            setLVItemText(ControlListView, LVSelected[i], 2, newText)
            newText = getText(Tab4_Title)
            setLVItemText(ControlListView, LVSelected[i], 3, newText)
            newText = getText(Tab4_CX)
            setLVItemText(ControlListView, LVSelected[i], 4, newText)
            newText = getText(Tab4_CY)
            setLVItemText(ControlListView, LVSelected[i], 5, newText)
            exit
        end for
    end if
end procedure
setHandler(Tab4_ChangeButton, w32HClick, routine_id("Tab4_ChangeButton_onClick"))

