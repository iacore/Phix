--IDE_orderEvents.ew
--------------------------------------------------------------------------------
--  Window TaylorEventsWin
                                                                                                --"Taylor Events To Control Class"
global constant TaylorEventsWin = createEx(Window, IDEText[1038][1], CodeWin, Default, Default, 434, 480, 0, 0)
                                                                --"Valid?"
constant Text1 = createEx(LText, IDEText[1039][1], TaylorEventsWin, 152, 48, 52, 20, 0, 0)
                                                                --"Taylor Events To Control Class"
constant Text2 = createEx(LText, IDEText[1038][1], TaylorEventsWin, 28, 4, 196, 40, 0, 0)
constant SelectIcon = createEx(SortedCombo, "Window1", TaylorEventsWin, 248, 4, 168, 20*6, 0, 0)
constant Table19 = createEx(LText, "", TaylorEventsWin, 4, 64, 416, 344, 0, 0)--height was 320
                                                                --"Valid?"
constant Text3 = createEx(LText, IDEText[1039][1], TaylorEventsWin, 344, 48, 52, 20, 0, 0)
                                                                                --"Save"
constant OkButton = createEx(PushButton, IDEText[58][1], TaylorEventsWin, 8, 412, 88, 28, 0, 0)
                                                                                        -- "Close"                                                                                      
constant CancelButton = createEx(PushButton, IDEText[59][1], TaylorEventsWin, 312, 412, 88, 28, 0, 0)
constant Table19Array = {
--row 1 col1
                         {{createEx(CheckBox, "", Table19, 164, 4, 24, 20, 0, 0)
,createEx(LText, "LText20Cell1", Table19, 4, 8, 148, 20, 0, 0)
                          },{
--row1 col2
                             createEx(CheckBox, "", Table19, 358, 4, 24, 20, 0, 0)
,createEx(LText, "LText20Cell21", Table19, 198, 8, 148, 20, 0, 0)
                            }},
--row 2 col1 etc
                         {{
                           createEx(CheckBox, "", Table19, 164, 28, 24, 20, 0, 0)
,createEx(LText, "LText20Cell2", Table19, 4, 32, 148, 20, 0, 0)
                          },{
                             createEx(CheckBox, "", Table19, 358, 28, 24, 20, 0, 0)
,createEx(LText, "LText20Cell22", Table19, 198, 32, 148, 20, 0, 0)
                            }},
                         {{
                           createEx(CheckBox, "", Table19, 164, 52, 24, 20, 0, 0)
,createEx(LText, "LText20Cell3", Table19, 4, 56, 148, 20, 0, 0)
                          },{
                             createEx(CheckBox, "", Table19, 358, 52, 24, 20, 0, 0)
,createEx(LText, "LText20Cell23", Table19, 198, 56, 148, 20, 0, 0)
                            }},
                         {{
                           createEx(CheckBox, "", Table19, 164, 76, 24, 20, 0, 0)
,createEx(LText, "LText20Cell4", Table19, 4, 80, 148, 20, 0, 0)
                          },{
                             createEx(CheckBox, "", Table19, 358, 76, 24, 20, 0, 0)
,createEx(LText, "LText20Cell24", Table19, 198, 80, 148, 20, 0, 0)
                            }},
                         {{
                           createEx(CheckBox, "", Table19, 164, 100, 24, 20, 0, 0)
,createEx(LText, "LText20Cell5", Table19, 4, 104, 148, 20, 0, 0)
                          },{
                             createEx(CheckBox, "", Table19, 358, 100, 24, 20, 0, 0)
,createEx(LText, "LText20Cell25", Table19, 198, 104, 148, 20, 0, 0)
                            }},
                         {{
                           createEx(CheckBox, "", Table19, 164, 124, 24, 20, 0, 0)
,createEx(LText, "LText20Cell6", Table19, 4, 128, 148, 20, 0, 0)
                          },{
                             createEx(CheckBox, "", Table19, 358, 124, 24, 20, 0, 0)
,createEx(LText, "LText20Cell26", Table19, 198, 128, 148, 20, 0, 0)
                            }},
                         {{
                           createEx(CheckBox, "", Table19, 164, 148, 24, 20, 0, 0)
,createEx(LText, "LText20Cell7", Table19, 4, 152, 148, 20, 0, 0)
                          },{
                             createEx(CheckBox, "", Table19, 358, 148, 24, 20, 0, 0)
,createEx(LText, "LText20Cell27", Table19, 198, 152, 148, 20, 0, 0)
                            }},
                         {{
                           createEx(CheckBox, "", Table19, 164, 172, 24, 20, 0, 0)
,createEx(LText, "LText20Cell8", Table19, 4, 176, 148, 20, 0, 0)
                          },{
                             createEx(CheckBox, "", Table19, 358, 172, 24, 20, 0, 0)
,createEx(LText, "LText20Cell28", Table19, 198, 176, 148, 20, 0, 0)
                            }},
                         {{
                           createEx(CheckBox, "", Table19, 164, 196, 24, 20, 0, 0)
,createEx(LText, "LText20Cell9", Table19, 4, 200, 148, 20, 0, 0)
                          },{
                             createEx(CheckBox, "", Table19, 358, 196, 24, 20, 0, 0)
,createEx(LText, "LText20Cell29", Table19, 198, 200, 148, 20, 0, 0)
                            }},
                         {{
                           createEx(CheckBox, "", Table19, 164, 220, 24, 20, 0, 0)
,createEx(LText, "LText20Cell10", Table19, 4, 224, 148, 20, 0, 0)
                          },{
                             createEx(CheckBox, "", Table19, 358, 220, 24, 20, 0, 0)
,createEx(LText, "LText20Cell30", Table19, 198, 224, 148, 20, 0, 0)
                            }},
                         {{
                           createEx(CheckBox, "", Table19, 164, 244, 24, 20, 0, 0)
,createEx(LText, "LText20Cell11", Table19, 4, 248, 148, 20, 0, 0)
                          },{
                             createEx(CheckBox, "", Table19, 358, 244, 24, 20, 0, 0)
,createEx(LText, "LText20Cell31", Table19, 198, 248, 148, 20, 0, 0)
                            }},
                         {{
                           createEx(CheckBox, "", Table19, 164, 268, 24, 20, 0, 0)
,createEx(LText, "LText20Cell12", Table19, 4, 272, 148, 20, 0, 0)
                          },{
                             createEx(CheckBox, "", Table19, 358, 268, 24, 20, 0, 0)
,createEx(LText, "LText20Cell32", Table19, 198, 272, 148, 20, 0, 0)
                            }},
                         {{
                           createEx(CheckBox, "", Table19, 164, 292, 24, 20, 0, 0)
,createEx(LText, "LText20Cell13", Table19, 4, 296, 148, 20, 0, 0)
                          },{
                             createEx(CheckBox, "", Table19, 358, 292, 24, 20, 0, 0)
,createEx(LText, "LText20Cell33", Table19, 198, 296, 148, 20, 0, 0)
                            }},
                         {{
                           createEx(CheckBox, "", Table19, 164, 320, 24, 20, 0, 0)
,createEx(LText, "LText20Cell14", Table19, 4, 324, 148, 20, 0, 0)
                          },{
                             createEx(CheckBox, "", Table19, 358, 320, 24, 20, 0, 0)
,createEx(LText, "unused", Table19, 198, 324, 148, 20, 0, 0)
                            }}

                        }

                        --------------------------------------------------------------------------------
global procedure translate_TaylorEvents()
    setText(Text1, IDEText[1039][1])
    setText(Text2, IDEText[1038][1])
    setText(Text3, IDEText[1039][1])
    setText(OkButton, IDEText[58][1])
    setText(CancelButton, IDEText[59][1])
end procedure
--------------------------------------------------------------------------------
sequence priorSelection         priorSelection = ""
integer m,n

procedure SelectIcon_onChange(integer self, integer event, sequence params)
sequence text

    text = priorSelection
    if length(text) then
        --when starting module, text will be empty      

        --store the last data changed
        for i=1 to length(tempEventsPerControlClass) do
            if equal(tempEventsPerControlClass[i][1], text) then
                for j=1 to 14 do
                    m = j
                    tempEventsPerControlClass[i][2][j][2] = isChecked(Table19Array[m][1][1])
                end for
                for j=15 to 27 do
                    m = j-14
                    tempEventsPerControlClass[i][2][j][2] = isChecked(Table19Array[m][2][1])
                end for
                exit
            end if
        end for
    end if

    --now build permissions for selected control class
    text = getItem(SelectIcon, getIndex(SelectIcon))
    priorSelection = text
    if equal(text, "Window") then
        setText(Table19Array[1][1][2], "(General)")
    else
        setText(Table19Array[1][1][2], "(Control General)")
    end if

    --build permissions for this control
    --every control uses (General)/(Control General) and w32HClick
    for i=1 to length(tempEventsPerControlClass) do
        --table is in order of row, col1, col2
        if equal(tempEventsPerControlClass[i][1], text) then
            m = 0
            n = 1
            for j=1 to length(tempEventsPerControlClass[i][2]) do
                if j<15 then
                    m += 1
                elsif j=15 then
                    m = 1
                    n = 2
                else
                    m += 1
                end if
                if tempEventsPerControlClass[i][2][j][2] then
                    setCheck(Table19Array[m][n][1],w32True)
                else
                    setCheck(Table19Array[m][n][1],w32False)
                end if
                if equal(getText(Table19Array[m][n][2]), "w32HClick") then
                    setCheck(Table19Array[m][n][1], w32True)
                    setEnable(Table19Array[m][n][1], w32False)
                end if
            end for
            exit
        end if
    end for
    setCheck(Table19Array[1][1][1], w32True)
    setEnable(Table19Array[1][1][1], w32False)
end procedure
setHandler(SelectIcon, w32HChange, routine_id("SelectIcon_onChange"))
--------------------------------------------------------------------------------
procedure Radio_onClick(integer self, integer event, sequence params)
sequence theEvent
integer foundIt

    m = 0
    n = 1
    foundIt = w32False
    if not isChecked(self) then
        for j=1 to 27 do
            if j<15 then
                m += 1
            elsif j=15 then
                m = 1
                n = 2
            else
                m += 1
            end if

            if self=Table19Array[m][n][1] then
                theEvent = getText(Table19Array[m][n][2])
                exit
            end if
        end for

--      update what is sitting in editor
        --ok=invokeHandler(CodeEvents, w32HChange, {})
        Change_Code(CodeEvents,0,{})
--              update windows sequence with current controls           
        windows[selectedWindow] = controls
        for i=1 to length(windows) do
            for j=1 to length(windows[i]) do
                for k=1 to length(windows[i][j][Code]) do
                    for o=1 to length(Events) do
                        if equal(theEvent, Events[o][3]) then
                            if length(windows[i][j][Code][o]) then
                                ok = displayErrorMessage(245,{})
                                setCheck(self, w32True)
                            end if
                            foundIt = w32True
                            exit
                        end if
                    end for
                    if foundIt then
                        exit
                    end if
                end for
                if foundIt then
                    exit
                end if
            end for
            if foundIt then
                exit
            end if
        end for
    end if
end procedure
--------------------------------------------------------------------------------
m = 0
n = 1
    for j=1 to length(Events) do
        if j<15 then
            m += 1
        elsif j=15 then
            m = 1
            n = 2
        else
            m += 1
        end if
        setHandler(Table19Array[m][n][1], w32HClick, routine_id("Radio_onClick"))
    end for
    --------------------------------------------------------------------------------
procedure TaylorEventsWin_onActivate(integer self, integer event, sequence params)
integer i,j

    --store the data in a temporary area where change may be placed per control class
    --and data saved from
    tempEventsPerControlClass = EventsPerControlClass
    eraseItems(SelectIcon)
    --load controls list
    for x=1 to length(ControlList) do       --item 1 is pointer which is Window
        if x=1 then
            addItem(SelectIcon,"Window")
        else
            addItem(SelectIcon, ControlList[x][4])
        end if
    end for
    --add timer Menu, MenuItem, Popup and PopupItem
    addItem(SelectIcon, "Timer")
    addItem(SelectIcon, "Menu")
    addItem(SelectIcon, "MenuItem")
    addItem(SelectIcon, "Popup")
    addItem(SelectIcon, "PopupItem")
    setIndex(SelectIcon, 1)

    --load Events and CheckBox
    j = 1
    i = 0
    for x=1 to length(Events) do
        if x<15 then
            i += 1
        elsif x=15 then
            i = 1
            j = 2
        else
            i += 1
        end if

        setText(Table19Array[i][j][2],Events[x][3])

        --When there are not an even number of events do not show the second column
        --Be sure to change 14 to whatever the max row happens to be            
        setVisible(Table19Array[14][2][1],w32False)
        setVisible(Table19Array[14][2][2],w32False)
    end for
    ok = invokeHandler(SelectIcon, w32HChange, {})
end procedure
setHandler(TaylorEventsWin, w32HActivate, routine_id("TaylorEventsWin_onActivate"))
--------------------------------------------------------------------------------
procedure click_OkButton(integer self, integer event, sequence params)
sequence text
integer k, hFile

    text = priorSelection
    --store the last data worked on
    for i=1 to length(tempEventsPerControlClass) do
        if equal(tempEventsPerControlClass[i][1], text) then
            for j=1 to 14 do
                k = j
                tempEventsPerControlClass[i][2][j][2] = isChecked(Table19Array[k][1][1])
            end for
            for j=15 to 27 do
                k = j-14
                tempEventsPerControlClass[i][2][j][2] = isChecked(Table19Array[k][2][1])
            end for
            exit
        end if
    end for

    --save in permanent array
    EventsPerControlClass = tempEventsPerControlClass

    --save in file
    hFile = open(the_current_dir & "\\Files\\Eventclass.dat", "w")
    if hFile!= -1 then
        print(hFile, EventsPerControlClass)
        close(hFile)
    end if

    --rebuild events list by invoking change control
    ok = invokeHandler(CodeControls, w32HClick, {})

    closeWindow(TaylorEventsWin)
end procedure
setHandler(OkButton, w32HClick, routine_id("click_OkButton"))
--------------------------------------------------------------------------------
procedure click_CancelButton(integer self, integer event, sequence params)
    closeWindow(TaylorEventsWin)
end procedure
setHandler(CancelButton, w32HClick, routine_id("click_CancelButton"))

