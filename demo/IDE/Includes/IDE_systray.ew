--  code generated by Win32Lib IDE v0.15.0

--------------------------------------------------------------------------------
global integer SystrayWin  SystrayWin = -1
integer SystrayIcon,SystrayFind,SystrayHint,SystrayOK,SystrayCancel,SystrayDelete
integer Systray_LB13,Systray_LB1,Systray_LB3,Systray_LB4,Systray_LB2
integer SystrayMle,Systray_CB

---------------------------------------------------------
constant CrLf    = {'\r', '\n'}
--------------------------------------------------------------------------------
procedure SystrayCloseUp()
    if validId(SystrayWin) then
        destroy(SystrayWin)
    end if
    SystrayWin = -1
end procedure
--------------------------------------------------------------------------------
procedure SystrayFind_onClick(integer self, integer event, sequence params)
sequence icoFile,currentdirectory
integer ok

    currentdirectory = current_dir()

    --present openfile dialog for icon file name
    icoFile = getOpenFileName(SystrayWin, the_current_dir & "\\*.ico",{})
    if length(icoFile) then
        setText(SystrayIcon, icoFile)
    end if

    ok = chdir(currentdirectory)
end procedure
--------------------------------------------------------------------------------
procedure SystrayOK_onClick(integer self, integer event, sequence params)
integer ok, at
sequence text, text2

    if not length(getText(SystrayIcon)) then
        ok = displayErrorMessage(47,{})
        return
    end if

    --split down systray text into seperate lines based on finding \r\n
    text2 = {"procedure onsystray(integer id, atom message)"}
    text = getText(SystrayMle)
    while w32True do
        at = match(CrLf, text)
        if at then
            text2 &= {text[1..at-1]}
            text = text[at+2..length(text)]
        else
            text2 &= {text}
            exit
        end if
    end while
    text2 &= {"end procedure"}
    text2 &= {"systray_SetEvent(SysTray,routine_id(\"onsystray\"))"}

    controls[selectedControl][SysTrayIcon] = getText(SystrayIcon)
    controls[selectedControl][SysTrayHint] = getText(SystrayHint)
    controls[selectedControl][SysTrayText] = text2
    controls[selectedControl][SysTrayHide] = isChecked(Systray_CB)

    closeWindow(SystrayWin)
    SystrayCloseUp()
    call_proc(updateProperties_id,{})
end procedure
--------------------------------------------------------------------------------
procedure SystrayCancel_onClick(integer self, integer event, sequence params)
    closeWindow(SystrayWin)
    SystrayCloseUp()
end procedure
--------------------------------------------------------------------------------
procedure SystrayDelete_onClick(integer self, integer event, sequence params)
    controls[selectedControl][SysTrayIcon] = {}
    controls[selectedControl][SysTrayHint] = {}
    controls[selectedControl][SysTrayText] = {}
    controls[selectedControl][SysTrayHide] = w32False
    closeWindow(SystrayWin)
    SystrayCloseUp()
    call_proc(updateProperties_id,{})
end procedure
-------------------------------------------------------------------------------
procedure SystrayWin_onOpen(integer self, integer event, sequence params)
sequence text, text2

    setText(SystrayIcon, controls[selectedControl][SysTrayIcon])
    setText(SystrayHint, controls[selectedControl][SysTrayHint])
    setCheck(Systray_CB, controls[selectedControl][SysTrayHide])

    --prep the mle for LBUTTONDOWN and RBUTTONDOWN code
    if length(controls[selectedControl][SysTrayText]) then
        text = controls[selectedControl][SysTrayText]
        for i=2 to length(text)-2 do
            if i=2 then
                text2 = text[i]
            else
                text2 &= CrLf & text[i]
            end if
        end for
        setText(SystrayMle, text2)
    else
        text = "if message = WM_LBUTTONDOWN then          end if" & CrLf &
               "if message = WM_RBUTTONDOWN then          end if"
        setText(SystrayMle, text)
    end if

end procedure
--------------------------------------------------------------------------------
global procedure createSystrayWin()
    if SystrayWin= -1 then
                                 --"Systray"
        SystrayWin = createEx(Window, IDEText[672][1], Form, Default, Default, 404, 441, {WS_THICKFRAME, WS_DLGFRAME}, 0)
                                    --"*.ico"
        SystrayIcon = createEx(EditText, IDEText[673][1], SystrayWin, 104, 68, 196, 24, 0, 0)
                                      --"Browse"
        SystrayFind = createEx(PushButton, IDEText[674][1], SystrayWin, 300, 64, 88, 28, 0, 0)
        SystrayHint = createEx(EditText, "", SystrayWin, 104, 104, 284, 20, 0, 0)
                                     --"OK"
        SystrayOK = createEx(PushButton, IDEText[675][1], SystrayWin, 28, 340, 88, 28, 0, 0)
                                         --"Cancel"
        SystrayCancel = createEx(PushButton, IDEText[676][1], SystrayWin, 158, 340, 88, 28, 0, 0)
                                         --"Delete"
        SystrayDelete = createEx(PushButton, IDEText[677][1], SystrayWin, 276, 340, 88, 28, 0, 0)
                                  --"This Property uses an include file by Thomas Parslow, which will be included in (General) at Generate Program."
        Systray_LB13 = createEx(LText, IDEText[678][1], SystrayWin, 0, 12, 380, 50, 0, 0)
                                  --"Tray Icon:"
        Systray_LB1 = createEx(LText, IDEText[679][1], SystrayWin, 0, 64, 104, 36, 0, 0)
                                  --"The following statements will be inserted into (Final)"
        Systray_LB3 = createEx(LText, IDEText[680][1], SystrayWin, 0, 144, 388, 20, 0, 0)
                                  --"Change as needed."
        Systray_LB4 = createEx(LText, IDEText[681][1],SystrayWin, 0, 164, 388, 20, 0, 0)
                                  --"Tip Text if any:"
        Systray_LB2 = createEx(LText, IDEText[682][1], SystrayWin, 0, 104, 104, 32, 0, 0)
                                   --"User Supplies systray_Hide(SysTray) statement"
        Systray_CB  = createEx(CheckBox, IDEText[979][1], SystrayWin, 4, 296, 384, 20, 0, 0)
        SystrayMle = createEx(MleText, "", SystrayWin, 4, 188, 384, 92, 0, 0)

        setHandler(SystrayFind, w32HClick, routine_id("SystrayFind_onClick"))
        setHandler(SystrayOK, w32HClick, routine_id("SystrayOK_onClick"))
        setHandler(SystrayCancel, w32HClick, routine_id("SystrayCancel_onClick"))
        setHandler(SystrayDelete, w32HClick, routine_id("SystrayDelete_onClick"))
        setHandler(SystrayWin, w32HOpen, routine_id("SystrayWin_onOpen"))
    end if
end procedure

