--  code generated by Win32Lib IDE v0.15.0

include Win32Lib.ew
without warning
include tk_trim.e

--------------------------------------------------------------------------------
--  Window Window1
constant Window1 = createEx( Window, "Window1", 0, Default, Default, 400, 265, 0, 0 )
constant TheStatusBar = createEx( StatusBar, "Ready", Window1, 0, 0, 0, 0, 0, 0 )
constant Lab1 = createEx( CText, "Conversion program for IDE.cfg to new format.", Window1, 60, 8, 256, 20, 0, 0 )
constant Lab2 = createEx( LText, "Please enter location of IDE.cfg:", Window1, 0, 56, 300, 20, 0, 0 )
constant Filename = createEx( EditText, ".cfg", Window1, 0, 80, 284, 20, 0, 0 )
constant FindButton = createEx( PushButton, "Find File", Window1, 300, 72, 88, 28, 0, 0 )
constant GoButton = createEx( PushButton, "GO!", Window1, 300, 100, 88, 28, 0, 0 )
constant CheckBoxBackup = createEx( CheckBox, "Backup file written", Window1, 4, 136, 264, 20, 0, 0 )
constant CheckBoxComplete = createEx( CheckBox, "Conversion complete. ", Window1, 4, 160, 292, 20, 0, 0 )
constant CheckBoxDelete = createEx( CheckBox, "Check to delete backup file now (optional)", Window1, 4, 184, 236, 20, 0, 0 )
---------------------------------------------------------
--------------------------------------------------------------------------------
constant cfgGridColor=1,
		 cfgGridColorname=2,
		 cfgGridPixel=3,
		 cfgGridStyle=4,
		 cfgIdeDocs=5,
		 cfgRulerDocs=6,
		 cfgWin32libDocs=7,
		 cfgWin32libName=8,
		 cfgGlobal=9,
		 cfgNoBackupsave=10,
		 cfgTempRules1=11,
		 cfgTempRules2=12,
		 cfgHintStatusBar=13,
		 cfgHintDisabled=14,
		 cfgMultipleInstance=15,
		 cfgWaitKey=16,
		 cfgProjectFileType=17,
		 cfgNotSetHandler=18,
		 cfgIDE_R1=19,
		 cfgIDE_R2=20,
		 cfgIDE_R3=21,
		 cfgDesign_R1=22,
		 cfgDesign_R2=23,
		 cfgDesign_R3=24,
		 cfgDesign_CB1=25,
		 cfgCode_R1=26,
		 cfgCode_R2=27,
		 cfgCode_R3=28,
		 cfgCode_CB1=29,
		 cfgPV_R1=30,
		 cfgPV_CB1=31,
		 cfgPV_CB2=32,
         cfgProp_R1=33,
         cfgProp_CB1=34,
         cfgProp_CB2=35,
         cfgCB_Start=36,
         cfgCB_WantDefault=37,
         cfgEditPrjDef=38,
         cfgSaveToProject=39,
         cfgAskSaveToProject=40,
         cfgNoEditorBackup=41,
         cfgFiles=42,
         cfgControls=43,

         maxSlots=43
		
integer ok, outF
sequence fName, backupName

setEnable(CheckBoxBackup, False)
setEnable(CheckBoxComplete, False)
setEnable(CheckBoxDelete, False)

procedure convertFile()
	integer fn, cnt, slot
	sequence line, settingsBuffer, newBuffer, files, defControls,
                waitk
	
	-- open the file
    fn = open ( fName, "r" )
    if fn = -1 then
        setText(TheStatusBar,"Can not open " & fName)
        return
    end if

    --read the records
    settingsBuffer = {}
    newBuffer=repeat("",maxSlots)     --number of different configs
    defControls={}                    --number of controls
    files={}                          --number not known and IDE doesn't care
    waitk={}                          --number of waitkeys
    cnt=0

    while 1 do
        line = get(fn)
        if line[1]=GET_EOF then
            exit   -- at end of file
        elsif line[1]=GET_FAIL then
            setText(TheStatusBar,"Can not read " & fName)
            return
        end if
        line=line[2]
        settingsBuffer&= {line}
        cnt+=1
    end while

    close( fn )

	if cnt < 2 then
		setText(TheStatusBar,"File has already been converted or the file " & fName
					& " is corrupted")
		return					
	end if

    --interrogate the buffer
	for i=1 to length( settingsBuffer ) do
        slot=0
		if find( settingsBuffer[i][1], {"tableInst","CodeBackColor","SmallIcons",
            "AllCatagories","Clicks 1","Ruler Disabled","RulerCol","TableInst"}) then
			--these are obsolete
            slot=-1
        elsif equal( settingsBuffer[i][1], "ProjectTreeDisabled") then
        	--obsolete but place in PV_CB1, True
            newBuffer[cfgPV_CB1]="PV_CB1"
            slot=-1
        elsif equal( settingsBuffer[i][1], "File") then
        	--build up files sequence
        	files&={settingsBuffer[i][2]}
            slot=-1
        elsif equal( settingsBuffer[i][1],"Grid Color") then
            slot=cfgGridColor
        elsif equal( settingsBuffer[i][1], "Grid Color Name") then
            slot=cfgGridColorname
        elsif equal( settingsBuffer[i][1], "Grid Pixel" ) then
            slot=cfgGridPixel
        elsif equal( settingsBuffer[i][1], "Grid Style") then
            slot=cfgGridStyle
        elsif equal( settingsBuffer[i][1], "IdeDocs") then
            slot=cfgIdeDocs
        elsif equal( settingsBuffer[i][1], "RulerDocs") then
            slot=cfgRulerDocs
        elsif equal( settingsBuffer[i][1], "Win32libDocs") then
            slot=cfgWin32libDocs
        elsif equal( settingsBuffer[i][1], "Win32libName") then
            slot=cfgWin32libName
        elsif equal( settingsBuffer[i][1], "Global") then
            slot=cfgGlobal
        elsif equal( settingsBuffer[i][1], "NoBackupSave") then
            slot=cfgNoBackupsave
        elsif equal( settingsBuffer[i][1], "TempRules1") then
            slot=cfgTempRules1
        elsif equal( settingsBuffer[i][1], "TempRules2") then
            slot=cfgTempRules2
        elsif equal( settingsBuffer[i][1], "HintStatusBar") then
            slot=cfgHintStatusBar
        elsif equal( settingsBuffer[i][1], "HintDisabled") then
            slot=cfgHintDisabled
        elsif equal( settingsBuffer[i][1], "MultipleInstance") then
            slot=cfgMultipleInstance
        elsif equal( settingsBuffer[i][1], "WaitKey") then
            waitk&={settingsBuffer[i][2]}
            slot=-1
        elsif equal( settingsBuffer[i][1], "ProjectFileType") then
            slot=cfgProjectFileType
        elsif equal( settingsBuffer[i][1], "IDE_R1") then
            slot=cfgIDE_R1
        elsif equal( settingsBuffer[i][1], "IDE_R2") then
            slot=cfgIDE_R2
        elsif equal( settingsBuffer[i][1], "IDE_R3") then
            slot=cfgIDE_R3
        elsif equal( settingsBuffer[i][1], "Design_R1") then
            slot=cfgDesign_R1
        elsif equal( settingsBuffer[i][1], "Design_R2") then
            slot=cfgDesign_R2
        elsif equal( settingsBuffer[i][1], "Design_R3") then
            slot=cfgDesign_R3
        elsif equal( settingsBuffer[i][1], "Design_CB1") then
            slot=cfgDesign_CB1
        elsif equal( settingsBuffer[i][1], "Code_R1") then
            slot=cfgCode_R1
        elsif equal( settingsBuffer[i][1], "Code_R2") then
            slot=cfgCode_R2
        elsif equal( settingsBuffer[i][1], "Code_R3") then
            slot=cfgCode_R3
        elsif equal( settingsBuffer[i][1], "Code_CB1") then
            slot=cfgCode_CB1
        elsif equal( settingsBuffer[i][1], "PV_R1") then
            slot=cfgPV_R1
        elsif equal( settingsBuffer[i][1], "PV_CB1") then
            slot=cfgPV_CB1
        elsif equal( settingsBuffer[i][1], "PV_CB2") then
            slot=cfgPV_CB2
        elsif equal( settingsBuffer[i][1], "Prop_R1") then
            slot=cfgProp_R1
        elsif equal( settingsBuffer[i][1], "Prop_CB1") then
            slot=cfgProp_CB1
        elsif equal( settingsBuffer[i][1], "Prop_CB2") then
            slot=cfgProp_CB2
        elsif equal( settingsBuffer[i][1], "CB_Start") then
            slot=cfgCB_Start
        elsif equal( settingsBuffer[i][1], "CB_WantDefault") then
            slot=cfgCB_WantDefault
        elsif equal( settingsBuffer[i][1], "EditPrjDef") then
            slot=cfgEditPrjDef
        elsif equal( settingsBuffer[i][1], "SaveToProject") then
            slot=cfgSaveToProject
        elsif equal( settingsBuffer[i][1], "AskSaveToProject") then
            slot=cfgAskSaveToProject
        elsif equal( settingsBuffer[i][1], "noEditorBackUp") then
            slot=cfgNoEditorBackup
        end if

        if slot
        and slot != -1 then
            newBuffer[slot]=settingsBuffer[i]
            if length(settingsBuffer[i]) < 2 then
                newBuffer[slot]=settingsBuffer[i][1]
            end if
        elsif slot=0 then
        	--must be controls data build it up under DefControls	
        	defControls&={settingsBuffer[i]}
        end if
    end for

	if length (files) then
        newBuffer[cfgFiles]={"Files",files}
	end if
	
	if length(defControls) then
        newBuffer[cfgControls]={"defControls",defControls}
	end if

    if length(waitk) then
        newBuffer[cfgWaitKey]={"WaitKey",waitk}
    end if
	
    outF=open(fName, "w")
    if outF=-1 then
        ok=message_box("problem opening file for conversion output","",0)
        return
    end if
    print(outF, newBuffer)	
    close(outF)

    setEnable(CheckBoxComplete, True)
	setCheck(CheckBoxComplete, True)
	setEnable(CheckBoxDelete, True)
	setText(TheStatusBar,"You may now start IDE")	
end procedure
--------------------------------------------------------------------------------
procedure FindButton_onClick (integer self, integer event, sequence params)--params is ()
	fName=getOpenFileName(Window1,"*.cfg",{"IDE config","*.cfg"})
	if length(fName) then
		setText(Filename,fName)
	end if
end procedure
setHandler( FindButton, w32HClick, routine_id("FindButton_onClick"))
--------------------------------------------------------------------------------
procedure GoButton_onClick (integer self, integer event, sequence params)--params is ()
	--make sure there is a fName
	fName=getText(Filename)
	fName=trim_left(fName)
	if not length(fName) then
		setText(TheStatusBar,"Need IDE file name before pressing GO!")
		return
	end if
	
	--first write backup for Filename
	backupName=getSaveFileName(Window1,current_dir() & "\\*_save.cfg",{"IDE.cfg backup","*_save.cfg"})
	if not length(backupName) then
		setText(TheStatusBar,"Need backup file name to continue")
		return
	end if
	
	--copy the file
	ok=copyFile(fName,backupName,0)
	if not ok then
		setText(TheStatusBar,"Backup failed")
		return
	end if
	setEnable(CheckBoxBackup, True)
	setCheck(CheckBoxBackup, True)
	
	setText(TheStatusBar, "Processing begun")
	convertFile()

end procedure
setHandler( GoButton, w32HClick, routine_id("GoButton_onClick"))
--------------------------------------------------------------------------------
procedure CheckBoxDelete_onClick (integer self, integer event, sequence params)--params is ()
	setText(TheStatusBar,"Delete backup")
	ok=deleteFile(backupName)
	if not ok then
		setText(TheStatusBar,"Can not delete backup file")
	else
		setText(TheStatusBar, "File deleted. You may now start IDE")	
	end if
end procedure
setHandler( CheckBoxDelete, w32HClick, routine_id("CheckBoxDelete_onClick"))


WinMain( Window1,Normal )
