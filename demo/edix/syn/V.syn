V syntax file
BlockComment /* */
LineComment //
// Sections
// ========
// All words beginning in column 1 (apart from comments) begin a section. 
// The following sections should be defined:
//                BlockComment, [optional]
//                LineComment,
//                TokenStart,
//                TokenChar, [optional]
//                TokenFirst, [optional]
//                TokenLast, [optional]
//                Escapes, [optional]
//                Delimiters, [optional, except in None.syn]
//                Braces, [optional]
//                Operators, [optional]
//                Illegal, [optional] and
//                FileExtensions,
// in that order. 

TokenStart abcedfghijklmnopqrstuvwxyz
TokenStart ABCDEFGHIJKLMNOPQRSTUVWXYZ_#$
TokenChar 0123456789
// TokenFirst can be used to specify characters which are only valid at the start
// of a token (eg # in #include or < in <table> [HTML]), and TokenLast can be used
// to specify characters which terminate a token (eg > in <table> or $ in MID$), eg
// TokenFirst #<        // by default this set is empty
// TokenLast >$        // ""
// In practice, TokenLast defines single-character tokens, so internally the
//  syntax colouring will treat <table> as "<table" and ">". eg see Html.syn
//
// Whitespace is defaulted to #09101320, ie tab, lf, cr, and space. There is 
// as yet no way to change this, though I will say it should be specified as 
// a hexadecimal stringset rather than OS/editor/language dependent means.
//
// Likewise String and Character parsing is currently hard-coded (to ' and ").
// You should not specify ' or " as delimiters or operators.
//
Escapes \rnt\'
//Escapes \rnt"0\'x

// Next we have Delimiters, Operators, and Illegals (in that order).
// The Delimiter section is optional (except in None.syn) and allows additional
//        characters to be coloured as "Other". The idea is that in "integer a,integer b"
//        then "a,integer" is not scanned as a single word, as well as colouring the ","
//        normally as opposed to "Illegal". See easynld.e for technical details.
// All characters used in the Operators section are automatically delimiters.
Delimiters ;
Operators < > ; = . + - , : * / || := ! && << >> & | ^ ++ -- += != == ? %
// <= >= -= *= /= .. &= ^= \ ~ ^

// The Braces section begins with a digit specifying the number of nesting levels 
// of colour required (1..7). Only pairs from ()<>[]{} are permitted. 
// If the number of nesting levels is set above 5 you may have difficultly finding
// enough appropriate colours to use. A lower number does not, of course, limit
// the code that can be written, just how it is coloured. If the nesting level is
// exceeded, inner brackets are coloured starting from 1 again.
//
Braces 5 ()[]{}

//
// FileExtensions should be specified next. This is not optional.
//
FileExtensions v

Indents + { - }

// The optional AutoComplete section. If present, this section must
// end with a "##end AutoComplete" line. Note that any comments in this
// section must begin in column 1, otherwise they are misinterpreted as
// being part of the autocompletion text. For more details, please
// see eauto.e Ideally, leave this in English, and add translations
// in elng_XXX.txt (if not English, that is).
//
//AutoComplete
//##end AutoComplete

//
// The remaining sections are listed in the Options/Colours window. 
// The names used should not contain spaces; these are automatically 
// inserted after any lower-case character which is followed by an 
// upper-case one. Otherwise these names are entirely descriptive and 
// are not defined or used anywhere else (though they must match entries
// in the final Scheme and .clr files). Remember that all words
// beginning in column 1 are interpreted as section names.

ReservedWords
        break
        const
        continue
        defer
        else
        enum
        fn
        for
        go
        goto
        if
        import
        in
        interface
        match
        module
        mut
        or
        pub
        return
        struct
        type

Constants
        true
        false

Preprocessor
        #define
        #ifdef
        #ifndef
//      #import
        #include
//      #else
        #endif
//      #undef
        $if
        $else

Types
        array
        bool
        byte
        byteptr
        f32
        f64
        i8
        i16
        i32
        i64
//      i128 (soon)
        int         // (==int32)
        rune        // (==int32)
        string
        typedef
        u8
        u16
        u32
        u64
//      u128 (soon) 
        voidptr

//      struct
//      const
//      static
//      unsigned
//      extern
//      bool BOOL
//      char uchar CHAR UCHAR
//      double
//      float
//      int uint INT UINT
//      int64_t
//      long ulong LONG ULONG
//      short ushort
//      time_t      // typedef long time_t; 
//      uint64_t
//      volatile
//      wchar_t

clib
//modules:
//      main
        os
        time
        strings

//dot:
        close       // socket, os, szip
        contains    // int, string(3)
        exec        // os, pg
        index       // string, szip
        insert      // array, map
        join        // bf, string
        left        // array, [u]string
        len         // array, [u]string
        right       // array, [u]string
        slice       // bf, array
        write       // os, strings, crypto
        writeln     // os, strings
 //os.
        create
        dir
        dir_exists
        executable
        File
        file_exists
        get_raw_line
        getenv
        getwd
        home_dir
        ls
        mkdir
        read_file
        rm
        rmdir
        setenv
        system
        user_os
        write_file
 //string.
        all_after
        all_before_last
        cstr
        ends_with
        replace
        split
        starts_with
        substr
        trim_space
 //strings.
        Builder
        new_builder

//standalone:
        panic
        println
        exit
        
//      abort 
//      abs 
//      acos 
//      asctime 
//      asin 
//      assert 
//      atan 
//      atan2 
//      atexit 
//      atof 
//      atoi 
//      atol 
//      atoll
//      bsearch
//      bottom
//      calloc 
//      ceil 
//      clearerr 
//      clock 
//      close
//      cos 
//      cosh 
//      ctime
//      difftime 
//      div
//      exit 
//      exp
//      fabs 
//      fclose 
//      fdopen 
//      feof 
//      ferror 
//      fflush 
//      fgetc 
//      fgetpos 
//      fgets 
//      filelength
//      fileno 
//      floor 
//      fmod
//      fopen 
//      fprintf 
//      fputc 
//      fputs 
//      fread 
//      free 
//      freopen 
//      frexp 
//      fscanf 
//      fseek 
//      ftell 
//      fwrite
//      getc 
//      getenv 
//      gets 
//      gmtime
//      hypot
//      instr 
//      isalnum 
//      isalpha 
//      isascii 
//      isblank 
//      isdigit 
//      isxdigit 
//      itoa
//      labs 
//      ldexp 
//      ldiv 
//      left 
//      llabs 
//      lldiv 
//      localeconv 
//      localtime 
//      log 
//      log10 
//      longjmp
//      lstrcat 
//      lstrcmp 
//      lstrcpy 
//      lstrlen
//      malloc 
//      mblen 
//      mbstowcs 
//      mbtowc 
//      memchr 
//      memcmp 
//      memcpy 
//      memicmp 
//      memmove
//      memset 
//      mid 
//      mktime 
//      modf
//      perror 
//      pow 
//      printf 
//      putc 
//      putchar 
//      putenv 
//      puts
//      qsort
//      raise 
//      rand
//      read 
//      realloc 
//      regcomp 
//      regerror 
//      regexec 
//      regfree 
//      remove 
//      rename 
//      rewind
//      right
//      scanf 
//      setbuf 
//      setjmp 
//      setlocale 
//      setvbuf 
//      signal 
//      sin 
//      sinh 
//      sizeof 
//      snprintf 
//      sprintf
//      sqrt 
//      srand 
//      sscanf 
//      strcasecmp 
//      strcat 
//      strchr 
//      strcmp 
//      strcoll 
//      strcpy 
//      strcspn 
//      strdup
//      strerror 
//      strftime 
//      stricmp 
//      strlen 
//      strncasecmp 
//      strncat 
//      strncmp 
//      strncmpi
//      strncpy 
//      strnicmp
//      strpbrk 
//      strrchr 
//      strrev
//      strspn 
//      strstr 
//      strtod 
//      strtok 
//      strtol 
//      strtoll 
//      strtoul 
//      strtoull
//      strupr 
//      strxfrm 
//      system
//      tan 
//      tanh 
//      time 
//      tmpfile 
//      tmpnam 
//      toascii 
//      tolower 
//      top 
//      toupper
//      ungetc
//      vfprintf 
//      vfscanf 
//      vprintf 
//      vscanf 
//      vsnprintf 
//      vsprintf 
//      vsscanf
//      wctomb 
//      write
//      wsprintf 
//      wsprintfA 
//      wvsprintf
//
//      _i64toa
//      _tsplitpath_s
//      _tprintf
//      _wopen
//

//
// The Scheme section defines the /default/ colours (and exists mainly to 
//        simplify distribution and installation).
// If a .clr file exists (eg Euphoria.clr) then it overrides these defaults.
// The Options/Colours window creates/overwrites .clr files on exit.
//
Scheme
 Background Silver
 Comments Navy Italic
 Highlight Gray
 CurrentLine #E9E9E9
 Strings Green
 Symbols Blue
 Illegals Red
 Other Black
 Brace1 Blue
 Brace2 Purple
 Brace3 Maroon
 Brace4 Purple
 Brace5 Green
 ReservedWords Teal
 Constants Olive
 Preprocessor Teal
 Types #681504
 clib Maroon

