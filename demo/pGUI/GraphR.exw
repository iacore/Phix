--
-- demo\pGUI\GraphR.exw
-- ====================
--
-- Displays a simple staggered rainbow graph. 
--
-- Uses the clipboard text if it begins with "GraphR:{" and ends with "}":
--  between those it should contain a comma-separated list of elements,
--  each of which is a sub-sequence of "{description,start,size}", all of 
--UPDATE: using scanf() [for the benefit of p2js]
--  which is processed using value() (from builtins\get.e). For an example
--  see default_text. Note that eg "red" is a description not a colour in 
--  constant default_text, which happens to match the colours in rainbow.
--
-- Pressing F9 in filedump.exw, when it is showing a PE executable, invokes
--  this program to show a simple memory (erm, actually a file) map. While
--  not exactly pretty, it helped quickly resolve some issues with "strange"
--  (albeit perfectly legal) format files, such as the import RVA lying slap
--  in the middle of the data section, rather than occupying a separate one.
--  Seeing a visual representation is far easier than studying 10 or 15 sets
--  of numbers in no particular order, especially with not only different
--  file and virtual addresses, but also those tricky RVA offset thingies.
--
with javascript_semantics
--without javascript_semantics -- needs cdCanvasVectorTextSize, ...
--                                  cdCanvasMultiLineVectorText aka cdCanvasVectorText;
--                                  cdCanvasVectorTextDirection
--                                  IupClipboard
--                              -- have "platform()!=JS"'d out those (for now?)
include pGUI.e

--test with (in the clipboard): GraphR:{{"red",0,20},{"orange",30,50}}
--constant default_text = `GraphR:{{"red",0,20},`&
--                              `{"orange",10,30},`&
--                              `{"yellow",20,40},`&
--                              `{"green",30,50},`&
--                              `{"blue",40,60},`&
--                              `{"indigo",50,70},`&
--                              `{"violet",60,80}}`
constant default_v = {{"red",0,20},
                      {"orange",10,30},
                      {"yellow",20,40},
                      {"green",30,50},
                      {"blue",40,60},
                      {"indigo",50,70},
                      {"violet",60,80}}

sequence v  -- decoded version of above/clipboard text

integer maxright    -- The highest (start+size) found.

--constant rainbow = { CD_RED , CD_ORANGE , CD_YELLOW , CD_GREEN , CD_BLUE , CD_INDIGO , CD_VIOLET }
constant rainbow = { CD_RED , CD_ORANGE , CD_YELLOW , CD_GREEN , CD_BLUE , CD_MAGENTA , CD_VIOLET }
--constant rainbow = { CD_RED , CD_ORANGE , CD_YELLOW , CD_GREEN , CD_BLUE , CD_INDIGO , CD_MAGENTA }
--sequence text_clr = repeat(0,length(rainbow))

Ihandle dlg, canvas
cdCanvas cddbuffer, cdcanvas

function negate_colour(object colour)
    if string(colour) then  -- pwa/p2js
        colour = to_integer(colour,0,16)
        colour = xor_bits(colour,#FFFFFF)
        colour = sprintf("#%06x",colour)
    else
        colour = xor_bits(colour,#FFFFFF)
    end if
    return colour
end function

function redraw_cb(Ihandle /*ih*/)
    cdCanvasActivate(cddbuffer)

--  cdCanvasClear(cddbuffer)

    integer {width, height} = IupGetIntInt(canvas, "DRAWSIZE")
    -- surrounding box:
    cdCanvasSetForeground(cddbuffer, CD_BLACK)
    cdCanvasRect(cddbuffer, 5, width-10, 5, height-10) 
    width-=30
    for pass=1 to 2 do  -- draw all blocks first, then text
        integer cidx = 1
        integer x, y = height-20
        string text
        integer w, right
        for i=1 to length(v) do
            {text,x,w} = v[i]
            right = x+w
            integer x1 = floor(x/maxright*width)+10,
                    x2 = floor(right/maxright*width)+10,
                    y2 = (length(v)-i)*20+15
            if pass=1 then
                cdCanvasSetForeground(cddbuffer, rainbow[cidx])
                cdCanvasBox(cddbuffer, x1, x2, y, y2) 
            else
                integer {twidth, theight} = cdCanvasGetTextSize(cddbuffer, text)
--3/11/21 no longer sure what this was trying to achieve...
--if twidth>x2-x1 then
--              cdCanvasSetForeground(cddbuffer, CD_BLACK)
--              cdCanvasText(cddbuffer, x1, y-theight/2, text)
--else
--              cdCanvasSetForeground(cddbuffer, xor_bits(rainbow[cidx],#FFFFFF))
                cdCanvasSetForeground(cddbuffer, negate_colour(rainbow[cidx]))
--              cdCanvasSetForeground(cddbuffer, text_clr[cidx])
                cdCanvasText(cddbuffer, x1, y-theight/2, text)
    if platform()!=JS then
                cdCanvasVectorTextSize(cddbuffer, twidth, theight, text)
--              cdCanvasMultiLineVectorText(cddbuffer, x1+3, y-theight, text)
                cdCanvasVectorText(cddbuffer, x1+3, y-theight, text)
    end if
--end if
            end if
            y -= 20
            cidx += 1
            if cidx>length(rainbow) then cidx = 1 end if
        end for
    end for

--  cdCanvasText(cddbuffer, 15, height-15, "string text") 

    cdCanvasFlush(cddbuffer)

    return IUP_DEFAULT
end function

function map_cb(Ihandle ih)
    cdcanvas = cdCreateCanvas(CD_IUP, ih)
    cddbuffer = cdCreateCanvas(CD_DBUFFER, cdcanvas)
    cdCanvasSetBackground(cddbuffer, CD_WHITE)
    cdCanvasSetForeground(cddbuffer, CD_BLACK)
    cdCanvasFont(cddbuffer, "Helvetica", CD_PLAIN, 8)
    if platform()!=JS then
        cdCanvasVectorTextDirection(cddbuffer, 1, 1, 1, 0)
    end if
    return IUP_DEFAULT
end function

function unmap_cb(Ihandle /*ih*/)
    cdKillCanvas(cddbuffer)
    cdKillCanvas(cdcanvas)
    return IUP_DEFAULT
end function

procedure main()
--  integer --error_status, 
--          x, 
--          width, 
--          right

    IupOpen()

    Ihandle clipboard = IupClipboard()
    string text = IupGetAttribute(clipboard,"TEXT")
    if length(text)=0
    or match("GraphR:{",text)!=1
    or text[$]!='}' then
--      text = default_text
        v = default_v
    else
--  end if
--/*
        text = text[8..$] -- strip the "GraphR:", leaving "{...}"
        {error_status,v} = value(text)
        if error_status!=GET_SUCCESS then
            IupMessage("error",text)
            abort(0)
        end if
--*/
        text = text[10..$-2] -- strip the "GraphR:{{", and final "}}"
        v = split(text,"},{")
--/*
    v[1..3] = {`"ELF Header (#0..#33)",0,52'4'`,`"Program Headers (#34..#73)",52'4',64'@'`,`"Section Headers (#110C..#11FB)",4364,240`}
    v[4..6] = {`".text (#80..#FFFFFFFF)",128,-128`,`".ARM.attributes (#10C8..#10DF)",4296,24`,`".shstrtab (#10E0..#110B)",4320,44','`}
--*/
        for i=1 to length(v) do
            v[i] = scanf(v[i],`"%s",%d,%d`)[1]
        end for
    end if
    maxright = 0
    for i=1 to length(v) do
        integer {?,x,width} = v[i],
                right = x+width
        if right>maxright then maxright = right end if
    end for
--?v
--GraphR:{{"ELF Header (#0..#33)",0,52},{"Program Headers (#34..#73)",52,64},{"Code Segment (#74..#97)",116,36}}
--GraphR:{{"ELF Header (#0..#33)",0,52},{"Program Headers (#34..#73)",52,64},{"Code Segment (#74..#97)",116,36}}
--?maxright
--  for i=1 to length(rainbow) do
--      integer c = rainbow[i]
--      atom r = and_bits(c,#FF0000)/#FF0000,
--           g = and_bits(c,#00FF00)/#00FF00,
--           b = and_bits(c,#0000FF)/#0000FF,
--           l = 0.2126 * power(r, 2.2)
--             + 0.7152 * power(g, 2.2)
--             + 0.0722 * power(b, 2.2)
--      text_clr[i] = iff(l>0.5?CD_BLACK:CD_WHITE)
--  end for

    canvas = IupCanvas("RASTERSIZE=600x400")

    IupSetCallbacks(canvas, {"MAP_CB",  Icallback("map_cb"),
                             "UNMAP_CB",    Icallback("unmap_cb"),
                             "ACTION", Icallback("redraw_cb")})

    dlg = IupDialog(canvas, "TITLE=GraphR")

    IupShow(dlg)
    IupSetAttribute(canvas, "RASTERSIZE", NULL) -- release the minimum limitation
    if platform()!=JS then
        IupMainLoop()
        IupClose()
    end if
end procedure

main()

