--
-- IupView.exw
--
--  Translated from iup_view.c
--
include pGUI.e

--function list_cb(Ihandle self, atom pText, int /*item*/, state)
function list_cb(Ihandle self, object pText, int /*item*/, state)
    if state==1 then    -- selected
        if atom(pText) then pText = peek_string(pText) end if
        Ihandle elem = IupGetHandle(pText)
        Ihandle label = IupGetAttributePtr(self, "mainLabel")
        string title = IupGetAttribute(elem, "_FILE_TITLE"), 
               class = IupGetClassName(elem),
               str_elem = sprintf("FileTitle: %s - Type: %s", {title,class})
        IupStoreAttribute(label, "TITLE", str_elem)
    end if
    return IUP_DEFAULT
end function

procedure mainUpdateInternals()
    sequence names = IupGetAllNames()
    for i=1 to length(names) do
        Ihandle elem = IupGetHandle(names[i])
        if IupGetAttribute(elem, "_FILE_TITLE")="" then
            IupSetAttribute(elem, "_INTERNAL", "YES")
        end if
    end for
end procedure

--function replaceDot(string file_name)
---- replace all "." by "_"
---- replace all "-" by "_"
--   
--  return file_name
--end function

function mainGetFileTitle(string file_name)
    integer last = 1, ch
    for i=length(file_name) to 1 by -1 do
        ch = file_name[i]
        if ch='.' then
            if last then
                file_name = file_name[1..i-i]
                last = 0
            end if
        elsif ch='\\'
           or ch='/' then
            file_name = file_name[i+1..$]
            exit
        end if
    end for
    file_name = substitute_all(file_name, ".-", "__")
    return file_name
end function

procedure mainUpdateList(Ihandle self, string file_name)
    Ihandle list = IupGetAttributePtr(self, "mainList")
    sequence names = IupGetAllNames()
    string str_item
    integer n = 1
    file_name = mainGetFileTitle(file_name)
    for i=1 to length(names) do
        Ihandle elem = IupGetHandle(names[i]);
        if IupGetInt(elem, "_INTERNAL")==0 then
            str_item = sprintf("%d", n)
            IupSetAttribute(list, str_item, names[i]);
            if IupGetAttribute(elem, "_FILE_TITLE")="" then
                IupStoreAttribute(elem, "_FILE_TITLE", file_name)
            end if
            n += 1
        end if
    end for
    str_item = sprintf("%d", n)
    IupSetAttribute(list, str_item, NULL)
    if n!=1 then
        IupSetAttribute(list, "VALUE", "1")
        {} = list_cb(list, IupGetAttribute(list, "1"), -1, 1);
    end if
end procedure

function loadbuffer_cb(Ihandle self)
    string buffer = IupGetText("LED","")
    if buffer!="" then
        mainUpdateInternals();

        string error = IupLoadBuffer(buffer)
        if error!="" then
            IupMessage("Error", error);
        else
            mainUpdateList(self, "<Buffer>");
        end if
    end if
    return IUP_DEFAULT
end function

function loadled_cb(Ihandle self)
    string file_name = "./*.led"
    string ret = IupGetFile(file_name)
    if ret!="" then
        mainUpdateInternals()

        string error = IupLoad(file_name)
        if error!="" then
            IupMessage("Error", error);
        else
            mainUpdateList(self, file_name);
        end if
    end if
    return IUP_DEFAULT
end function

function loadimagelib_cb(Ihandle self)
    mainUpdateInternals();

    iupImageStockLoadAll();

    mainUpdateList(self, "ImageLib");

    return IUP_DEFAULT;
end function

function use_utf8_cb(Ihandle /*self*/)
    if IupGetInt(NULL, "UTF8MODE") then
        IupSetGlobal("UTF8MODE", "No")
    else
        IupSetGlobal("UTF8MODE", "Yes")
    end if
    return IUP_DEFAULT
end function

function close_cb()
    return IUP_CLOSE
end function

function showelem_cb(Ihandle self)
    Ihandle list = IupGetAttributePtr(self, "mainList")
    string name = IupGetAttribute(list, IupGetAttribute(list, "VALUE"))

    if name!="" then
        Ihandle elem = IupGetHandle(name)
        string class = IupGetClassName(elem)

        if class="dialog" then
            IupShow(elem)
        else
            Ihandln dialog = IupGetDialog(elem)
            if dialog!=NULL then
                IupShow(dialog)
            else
                if class="menu" then
                    IupPopup(elem, IUP_MOUSEPOS, IUP_MOUSEPOS)
                else
                    IupMessage("Error", "Will only show dialogs and independent menus.");
                end if
            end if
        end if
    else
        IupMessage("Error", "No elements.");
    end if
    return IUP_DEFAULT
end function

function hideelem_cb(Ihandle self)
    Ihandle list = IupGetAttributePtr(self, "mainList")
    string name = IupGetAttribute(list, IupGetAttribute(list, "VALUE"))

    if name!="" then
        Ihandle elem = IupGetHandle(name);
        string class = IupGetClassName(elem)

        if class="dialog" then
            IupHide(elem)
        else
            Ihandln dialog = IupGetDialog(elem)
            if dialog!=NULL then
                IupHide(dialog)
            else
                IupMessage("Error", "Will only hide dialogs.")
            end if
        end if
    else
        IupMessage("Error", "No elements.")
    end if
    return IUP_DEFAULT;
end function

function layoutdlg_cb(Ihandle self)
    Ihandle list = IupGetAttributePtr(self, "mainList");
    string name = IupGetAttribute(list, IupGetAttribute(list, "VALUE"));

    if name!="" then
        Ihandle elem = IupGetHandle(name);
        string class = IupGetClassName(elem);

        if class="dialog" then
            IupShow(IupLayoutDialog(elem));
        else
            Ihandln dialog = IupGetDialog(elem);
            if dialog!=NULL then
                IupShow(IupLayoutDialog(dialog));
            else
                IupMessage("Error", "Will only hide dialogs.");
            end if
        end if
    else
        IupMessage("Error", "No elements.");
    end if
    return IUP_DEFAULT;
end function

function destroyall_cb(Ihandle self)
    Ihandle ih;
    Ihandle list = IupGetAttributePtr(self, "mainList");
    sequence names = IupGetAllNames()
    sequence ih_names = {}
    for i=1 to length(names) do
        ih = IupGetHandle(names[i]);
        if iupObjectCheck(ih) 
        and IupGetInt(ih, "_INTERNAL")==0 then
            ih = IupGetDialog(ih)
            if not find(ih,ih_names) then
                ih_names = append(ih_names,ih)
            end if
        end if
    end for
    for i=1 to length(ih_names) do
        Ihandle elem = ih_names[i]
        if iupObjectCheck(elem) then
            string class = IupGetClassName(elem);

            if class="dialog" then
                IupDestroy(elem);
            else
                Ihandln dialog = IupGetDialog(elem);
                if dialog!=NULL then
                    IupDestroy(elem);
                end if
            end if
        end if
    end for
    IupSetAttribute(list, "1", NULL);
    IupSetAttribute(list, "VALUE", "1");
    return IUP_DEFAULT;
end function

function inactivetoggle_cb(Ihandle self, int v)
    Ihandle tabs = IupGetAttributePtr(self, "TABS");
    Ihandln child = IupGetNextChild(tabs, NULL);
    while child!=NULL do
        IupSetAttribute(child, "ACTIVE", iff(v?"NO":"YES"));
        child = IupGetNextChild(tabs, child);
    end while
    return IUP_DEFAULT;
end function

function is_image(string class)
    return find(class,{"image","imagergb","imagergba"})!=0
end function

function compare_image_names(Ihandle ih1, ih2)
    return compare(IupGetName(ih1),IupGetName(ih2))
end function

function imagebutton_cb(Ihandle self)
  Ihandle label = IupGetAttributePtr(self, "_INFO_LABEL");
  IupSetAttribute(label, "TITLE", IupGetAttribute(self, "_INFO"));
  return IUP_DEFAULT
end function

function showallimages_cb(Ihandle ih)
--  Ihandle *box, *tabs, *toggle, *label;
--  Ihandle* params[500];
--  char *names[MAX_NAMES];
--  Ihandle* images[MAX_NAMES];
--  int i, n = 0, num_images, num_names = IupGetAllNames(names, MAX_NAMES);
    sequence names = IupGetAllNames()
    sequence images = {}
    sequence params = {}
    Ihandle files = IupUser();

--  num_images = 0;
    for i=1 to length(names) do
        Ihandle elem = IupGetHandle(names[i]);
        string class = IupGetClassType(elem);

        if is_image(class) then
            -- show only loaded images
            string file_title = IupGetAttribute(elem, "_FILE_TITLE");
            if file_title!="" then
                images = append(images,elem)
            end if
        end if
    end for

    if length(images)==0 then
        IupMessage("Error", "No images.");
        return IUP_DEFAULT;
    end if

    images = custom_sort(routine_id("compare_image_names"),images);

    for i=1 to length(images) do

        Ihandle elem = images[i]
        string name = IupGetName(elem);

        /* show only loaded images */
        string file_title = IupGetAttribute(elem, "_FILE_TITLE");
        if file_title!="" then
            Ihandln tbox = IupGetAttributePtr(files, file_title);
            if tbox=NULL then
                tbox = IupVbox()
                IupSetAttributePtr(files, file_title, tbox);
                IupSetAttribute(tbox, "TABTITLE", file_title);
--#ifdef STOCK_TEST
--    params[n] = IupBackgroundBox(tbox);
--    IupSetStrAttribute(params[n], "BGCOLOR", IupGetAttribute(IupGetDialog(ih), "BGCOLOR"));
--#else
                params = append(params,tbox)
--#endif
            end if

            Ihandln lbox = IupGetAttributePtr(tbox, file_title);
            if lbox==null
            or IupGetInt(lbox, "LINE_COUNT")==10 then
                lbox = IupHbox()
                IupAppend(tbox, lbox);
                IupSetAttributePtr(tbox, file_title, lbox);
                IupSetAttribute(lbox, "LINE_COUNT", "0");
            end if

            Ihandle button = IupButton("", NULL);
--#ifdef STOCK_TEST
--  IupSetAttribute(button, "FLAT", "Yes");
--#endif
            IupSetStrAttribute(button, "IMAGE", name);
            IupSetStrAttribute(button, "_INFO", "%s [%d,%d]", {name, IupGetInt(elem, "WIDTH"), IupGetInt(elem, "HEIGHT")});
            IupSetCallback(button, "ACTION", Icallback("imagebutton_cb"));
            IupAppend(lbox, button);
            IupSetStrAttribute(lbox, "LINE_COUNT", "%d", {IupGetInt(lbox, "LINE_COUNT")+1});
        end if
    end for

--  params[n] = NULL;

    Ihandle toggle = IupToggle("INACTIVE", NULL),
            tabs = IupTabs(params),
            label = IupLabel(""),
            box = IupVbox({toggle, tabs, label});
    IupSetAttribute(box, "MARGIN", "10x10");
    IupSetAttribute(box, "GAP", "10");
    IupSetAttribute(tabs, "ALIGNMENT", "NW");
    IupSetAttribute(tabs, "SIZE", "150x80");
    IupSetCallback(toggle, "ACTION", Icallback("inactivetoggle_cb"));
    IupSetAttributePtr(toggle, "TABS", tabs);
    IupSetAttribute(label, "EXPAND", "HORIZONTAL");

    Ihandle dialog = IupDialog(box);
    IupSetAttribute(dialog, "TITLE", "All Images");
    IupSetCallback(dialog, "CLOSE_CB", Icallback("close_cb"))
    IupSetAttributePtr(dialog, "_INFO_LABEL", label);
    IupSetAttributeHandle(dialog, "PARENTDIALOG", IupGetDialog(ih));

    IupPopup(dialog, IUP_CENTER, IUP_CENTER);

    IupDestroy(dialog);
    IupDestroy(files);

    return IUP_DEFAULT;
end function

function getfileformat(int all)
    sequence options = {"LED","LUA","C","ICO","BMP","GIF","PNG"};
    if not all then options = options[1..3] end if
    integer count = length(options)
    integer ret = IupListDialog(1,"File Format",options,1,9,count+1);
    if ret==-1 then
        return ""
    end if
    return options[ret]
end function

function GetSaveAsFile(string file, imgtype)
    Ihandle gf = IupFileDlg();
    IupSetAttribute(gf, "DIALOGTYPE", "SAVE");
    IupSetStrAttribute(gf, "TITLE", "Save %s File", {imgtype})
    IupSetStrAttribute(gf, "FILTER", "*.%s", {lower(imgtype)})
    IupSetAttribute(gf, "FILE", file);
    IupPopup(gf, IUP_CENTER, IUP_CENTER);
    string val = IupGetAttribute( gf, "VALUE" );
    if val="" then val = file end if
    integer ret = IupGetInt( gf, "STATUS" );
    IupDestroy(gf);
    return {val,ret}
end function

function saveimage_cb(Ihandle self)
    Ihandle list = IupGetAttributePtr(self, "mainList");
    string name = IupGetAttribute(list, IupGetAttribute(list, "VALUE"));

    if name!="" then
        Ihandle elem = IupGetHandle(name);
        string class = IupGetClassType(elem);

        if is_image(class) then
--            char file_name[10240];

            string imgtype = getfileformat(1);
            if imgtype="" then return IUP_DEFAULT end if

            string file_name = sprintf("%s.%s", {name, lower(imgtype)});
            integer ret
            {file_name,ret} = GetSaveAsFile(file_name, imgtype)
            if ret!=-1 then
                object res = IupSaveImageAsText(elem, file_name, imgtype, name)
                if res!=1 then
--      #ifdef USE_IM
--                    if (!IupSaveImage(elem, file_name, imgtype))
--                    {
--                      char* err_msg = IupGetGlobal("IUPIM_LASTERROR");
--                      if (err_msg)
--                        IupMessage("Error", err_msg);
--                      return IUP_DEFAULT;
--                    }
--      #else
                  IupMessage("Error", "Failed to save the image. "&res);
--      #endif
                end if
            end if
        else
            IupMessage("Error", "Not an image.");
        end if
    else
        IupMessage("Error", "No elements.");
    end if
    return IUP_DEFAULT
end function

function getfolder()
    string folder = ""
    Ihandle filedlg = IupFileDlg(); 
 
    IupSetAttribute(filedlg, "DIALOGTYPE", "DIR");
    IupSetAttribute(filedlg, "TITLE", "Select Folder for Images");

    IupPopup(filedlg, IUP_CENTER, IUP_CENTER); 

    if IupGetInt(filedlg, "STATUS")!=-1 then
        folder = IupGetAttribute(filedlg, "VALUE")
    end if
    IupDestroy(filedlg)
    return folder
end function

function saveallimages_cb()
--  char *names[MAX_NAMES];
--  char* folder;
--  int i, n = 0, num_names = IupGetAllNames(names, MAX_NAMES); 
    integer n = 0
    sequence names = IupGetAllNames()

    string imgtype = getfileformat(1);
    if imgtype="" then return IUP_DEFAULT end if

    string folder = getfolder()
    if folder="" then return IUP_DEFAULT end if

    for i=1 to length(names) do
        Ihandle elem = IupGetHandle(names[i]);
        string class = IupGetClassType(elem);

        if is_image(class) then
--    char file_name[10240] = "";

            /* save only loaded images */
            string file_title = IupGetAttribute(elem, "_FILE_TITLE")
            if file_title!="" then
                string file_name = folder&"/"&file_title&"_"&names[i]&"."&lower(imgtype)
                object res = IupSaveImageAsText(elem, file_name, imgtype, names[i])
                if res!=1 then
--#ifdef USE_IM
--      if (!IupSaveImage(elem, file_name, imgtype))
--      {
--        char* err_msg = IupGetGlobal("IUPIM_LASTERROR");
--        if (err_msg)
--          IupMessage("Error", err_msg);
--        return IUP_DEFAULT;
--      }
--#else
                    IupMessage("Error", "Failed to save the image.");
                    return IUP_DEFAULT
--#endif
                end if
                n += 1
            end if
        end if
    end for
    
    if n==0 then
        IupMessage("Error", "No images.")
    end if
    return IUP_DEFAULT
end function

function saveallimagesone_cb()
--  char file_name[10240] = "*.";
--  char *names[MAX_NAMES];
--  int i, n = 0, num_names = IupGetAllNames(names, MAX_NAMES); 
    integer n = 0
    sequence names = IupGetAllNames()
--  FILE* packfile = NULL;
    integer packfile = 0

    string imgtype = getfileformat(0);
    if imgtype="" then return IUP_DEFAULT end if

    string file_name = "*."&lower(imgtype)
    integer ret
    {file_name,ret} = GetSaveAsFile(file_name, imgtype)
    if ret==-1 then return IUP_DEFAULT end if

    for i=1 to length(names) do
        Ihandle elem = IupGetHandle(names[i]);
        string class = IupGetClassType(elem);

        if is_image(class) then
            /* save only loaded images */
            string file_title = IupGetAttribute(elem, "_FILE_TITLE")
            if file_title!="" then
                if packfile=0 then
                    packfile = open(file_name, "wb")
                end if
                if packfile=-1 then
                    IupMessage("Error", "Failed to open the file.");
                    return IUP_DEFAULT;
                end if
--?9/0
-- we cannot pass iup.dll a FILE*, so we cannot do this... (just rip out this routine?)
--              if not iupSaveImageAsText(elem, packfile, imgtype, names[i]) then
                if not IupSaveImageAsText(elem, "packfile", imgtype, names[i]) then
                    close(packfile)
                    IupMessage("Error", "Failed to write to the file.");
                    return IUP_DEFAULT;
                end if
                n += 1
            else
                names[i] = NULL
            end if
        else
            names[i] = NULL;
        end if
    end for

    if packfile!=0 then
        if imgtype="C" then  /* only for C files */
            string title = mainGetFileTitle(file_name);
            printf(packfile, "void load_all_images_%s(void)\n{\n", {title});
            for i=1 to length(names) do
                if names[i]!=NULL then
                    printf(packfile, "  IupSetHandle(\"IUP_%s\", load_image_%s());\n", {names[i], names[i]});
                end if
            end for
            printf(packfile, "}\n\n");
        end if
        close(packfile)
    end if
    if n==0 then
        IupMessage("Error", "No images.");
    end if
    return IUP_DEFAULT
end function

function about_cb()
    IupMessage("About", """
     IupView
Show dialogs and popup menus
defined in LED files.
Can show all defined images.
Can import and export images.""")
    return IUP_DEFAULT;
end function

function list_dbclick_cb(Ihandle self, int /*i*/, atom /*pText*/)
    {} = showelem_cb(self);
    return IUP_DEFAULT
end function

function dropfile_cb(Ihandle self, atom pFileName)
--  char* error;

    mainUpdateInternals();

--  error = IupLoad(pFileName);
    string error = IupLoad(peek_string(pFileName));
    if error!="" then
        IupMessage("Error", error);
    else
        string file_name = peek_string(pFileName)
        mainUpdateList(self, file_name);
    end if
    return IUP_DEFAULT;
end function

function mainDialog()

    Ihandle file = IupSubmenu("File", IupMenu({IupItem("Load Buffer...", Icallback("loadbuffer_cb")),
                                               IupItem("Load Led...", Icallback("loadled_cb")),
                                               IupSeparator(),
                                               IupItem("Load Image Lib", Icallback("loadimagelib_cb")),
--#ifdef USE_IM
--                                             IupItem("Import Image(s)...", Icallback("loadimage_cb")),
--#endif
                                               IupSeparator(),
                                               IupItem("Use UTF-8", Icallback("use_utf8_cb"),"AUTOTOGGLE=Yes"),
                                               IupItem("Exit", Icallback("close_cb"))}))
    Ihandle element = IupSubmenu("Element", IupMenu({IupItem("Show...", Icallback("showelem_cb")),
                                                     IupItem("Hide...", Icallback("hideelem_cb")),
                                                     IupItem("Layout Dialog...", Icallback("layoutdlg_cb")),
                                                     IupSeparator(),
                                                     IupItem("Destroy All...", Icallback("destroyall_cb")),
                                                     IupItem("Show All Images...", Icallback("showallimages_cb")),
                                                     IupSeparator(),
                                                     IupItem("Save Image...", Icallback("saveimage_cb")),
                                                     IupItem("Save All Images...", Icallback("saveallimages_cb")),
                                                     IupItem("Save All Images (One File)...", Icallback("saveallimagesone_cb"))}))
    Ihandle help = IupSubmenu("Help", IupMenu({IupItem("About...", Icallback("about_cb"))}))
    Ihandle menu = IupMenu({file,element,help})
    IupSetHandle("mainMenu", menu);
    
    Ihandle list = IupList(NULL)
    Ihandle label = IupLabel("")
    Ihandle box = IupVbox({IupLabel("Elements:"),
                           list,
                           IupFill("SIZE=2"),
                           IupFrame(label)})
    IupSetAttribute(box, "MARGIN", "10x10")
    IupSetAttribute(list, "SORT", "YES")
    IupSetCallback(list, "ACTION", Icallback("list_cb"))
    IupSetCallback(list, "DBLCLICK_CB", Icallback("list_dbclick_cb"))
    
    IupSetAttribute(list, "SIZE", "150x80")
    IupSetAttribute(list, "EXPAND", "YES")
    IupSetAttribute(label, "EXPAND", "HORIZONTAL")
    
    Ihandle main_dialog = IupDialog(box)
    IupSetAttribute(main_dialog, "TITLE", "IupView")
    IupSetAttribute(main_dialog, "MENU", "mainMenu")
    IupSetAttributePtr(main_dialog, "mainList", list)
    IupSetAttributePtr(main_dialog, "mainLabel", label)
    IupSetCallback(main_dialog, "CLOSE_CB", Icallback("close_cb"))
    IupSetCallback(main_dialog, "DROPFILES_CB", Icallback("dropfile_cb"))
    IupSetAttribute(main_dialog, "_INTERNAL", "YES")
    
    IupSetAttributePtr(menu, "mainList", list)
    IupSetAttributePtr(menu, "mainLabel", label)

    return main_dialog
end function

string usage = """
iupview [-h] [-t type] [-o out_file] in_files
  IUP version: %s
  Converts image files to source code that creates an IupImage
  Can pack several files in a single output file
  Each image will correspond to a function called load_image_<filetitle>,
  where <filetitle> is the file name of the input image without path.
  -h            print this help
  -t            output format, can be LED, LUA or C (default: C)
  -o out_file   place output in file <out_file> (default: images.c)"""

function iupStrFileGetTitle(string file_name)
-- translated/deduced from the C source (iup_str.c)
    for i=length(file_name) to 1 by -1 do
        if find(file_name[i],"\\/") then
            file_name = file_name[i+1..$]
            exit
        end if
    end for
    return file_name
end function

procedure image_converter(sequence cl)
string outname = "images.c",
       imgtype = "C",
       intitle
integer --outfile,
        argc = length(cl)-2,
        argv = 3
    
    while argc do
        string op = cl[argv]
        if op[1]!='-' then exit end if
        argc -= 1
        argv += 1
        integer o2 = op[2]
        if argc>=1 and find(o2,"ot") then
            argc -= 1
            if o2='o' then
                outname = cl[argv]
            else    
                imgtype = cl[argv]
            end if
            argv += 1
        else 
            printf(2,usage,{IupVersion()})
            return
        end if
    end while

--  outfile = open(outname, "wb")
--  if outfile=-1 then
--      puts(1,"Error: Failed to open the output file.");
--      return
--  end if

    IupOpen()

    while argc do
        argc -= 1
        string inname = cl[argv]
        argv += 1
        Ihandln image = IupLoadImage(inname);
        if image=NULL then
            printf(1,"Error: %s\n", {IupGetGlobal("IUPIM_LASTERROR")})
            exit
        end if

        intitle = iupStrFileGetTitle(inname);
        intitle = substitute(intitle,".","_")

--DEV as above, can only do one at a time... or maybe ... I could perhaps add get_file_handle(outfile) to pfileioN.e???
--      if not iupSaveImageAsText(image, outfile, imgtype, intitle) then
        if not IupSaveImageAsText(image, outname, imgtype, intitle) then
            printf(1,"Error: Failed to write to the output file.");
            IupDestroy(image)
            exit
        end if

        IupDestroy(image);
    end while
--  close(outfile)
    IupClose()
end procedure

procedure main()
    sequence cl = command_line()
    if length(cl)<=2 then
        IupOpen()
--#ifndef USE_NO_OPENGL  
--  IupGLCanvasOpen();
--#endif    
        IupControlsOpen()
        IupImageLibOpen()

--#ifdef STOCK_TEST
--  IupSetGlobal("IMAGESTOCKSIZE", STOCK_TEST);
--#endif

        IupSetGlobal("GLOBALLAYOUTDLGKEY", "Yes")
--      IupSetGlobal("UTF8MODE", "YES")

        mainUpdateInternals()

        Ihandle main_dialog = mainDialog()
        IupShow(main_dialog)

        IupMainLoop()
        IupClose()
    else
        image_converter(cl)
    end if
end procedure
main()


--/*
--#if 0
--/* To check for memory leaks */
--#define VLD_MAX_DATA_DUMP 80
--#include <vld.h>
--#endif

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <time.h>

#include "iup.h"
#include "iupcontrols.h"
#include "iupgl.h"

#include "iup_str.h"
#include "iup_object.h"


/* #define STOCK_TEST "24" */
/* #define STOCK_TEST "48" */


#define MAX_NAMES 5000

#ifdef USE_IM
#include "iupim.h"
#endif

/* IupImage internal function, used only here */
int iupSaveImageAsText(Ihandle* ih, FILE* packfile, const char* format, const char* name);

/* IupImage internal function, used only here */
void iupImageStockLoadAll(void);

function StrLower(const char* sstr)
{
  static char buf[10];
  iupStrLower(buf, sstr);
  return buf;
end function

function strdup_free(const char* str, char* str_ptr)
{
  int len = (int)strlen(str);
  char* tmp = malloc(len+1);
  memcpy(tmp, str, len+1);
  free(str_ptr);
  return tmp;
end function

#ifdef USE_IM
#ifdef WIN32
static char* ParseFile(const char* dir, const char* FileName, int *offset)
{
  const char* file = FileName;
  while (*file != 0 && *file != '|')
    file++;

  if (file == FileName)
    return NULL;

  {
    int size = (int)(file - FileName) + 1;
    int dir_size = (int)strlen(dir);
    char* file_name = malloc(size+dir_size+1);
    memcpy(file_name, dir, dir_size);
    file_name[dir_size] = '\\';
    memcpy(file_name+dir_size+1, FileName, size-1);
    file_name[size+dir_size] = 0;
    *offset += size;
    return file_name;
  }
}

static char* ParseDir(const char* FileName, int *offset)
{
  const char* file = FileName;
  while (*file != 0 && *file != '|')
    file++;

  if (*file == 0)
    return NULL;

  {
    int size = (int)(file - FileName) + 1;
    char* dir = malloc(size);
    memcpy(dir, FileName, size-1);
    dir[size-1] = 0;
    *offset = size;
    return dir;
  }
}
#endif

static void LoadImageFile(Ihandle* self, const char* file_name)
{
  Ihandle* new_image = IupLoadImage(file_name);
  if (new_image)
  {
    char* file_title = mainGetFileTitle(file_name);
    IupSetHandle(file_title, new_image);
    free(file_title);
    mainUpdateList(self, file_name);
  }
  else
  {
    char* err_msg = IupGetGlobal("IUPIM_LASTERROR");
    if (err_msg)
      IupMessage("Error", err_msg);
  }
end function

function getOpenFileName(char* file)
{
  Ihandle *gf;
  int ret;
  char *value;

  gf = IupFileDlg();
  IupSetAttribute(gf, "DIALOGTYPE", "OPEN");
  IupSetAttribute(gf, "TITLE", "Load Image File(s)");
  IupSetAttribute(gf, "MULTIPLEFILES", "YES");
  IupPopup(gf, IUP_CENTER, IUP_CENTER);

  value = IupGetAttribute(gf, "VALUE");
  if (value) strcpy(file, value);
  ret = IupGetInt(gf, "STATUS");

  IupDestroy(gf);

  return ret;
end function

function loadimage_cb(Ihandle* self)
{
  char FileName[2000] = "*.*";

  /* Retrieve a file name */
  if (getOpenFileName(FileName) == -1)
   return IUP_DEFAULT;

  mainUpdateInternals();

#ifdef WIN32
  /* parse multiple files */
  {
    int offset;
    char* file_name;
    char* dir = ParseDir(FileName, &offset);
    if (dir)
    {
      while ((file_name = ParseFile(dir, FileName + offset, &offset)) != NULL)
      {
        LoadImageFile(self, file_name);
        free(file_name);
      }
      free(dir);
    }
    else
      LoadImageFile(self, FileName);
  }
#else
  LoadImageFile(self, FileName);
#endif

  return IUP_DEFAULT;
end function
#endif

--DEAD:
--include iup_layoutdlg.e

function load_image_Tecgraf()
sequence imgdata =
{
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 95, 108, 1, 90, 100, 117, 99, 123, 138, 166, 126, 137, 152, 181, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 105, 123, 147, 122, 137, 165, 255, 136, 152, 183, 255, 132, 149, 179, 250, 133, 149, 178, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 100, 115, 43, 111, 125, 150, 253, 140, 158, 190, 255, 135, 151, 182, 255, 132, 149, 179, 255, 131, 147, 177, 217, 153, 164, 188, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 113, 134, 148, 134, 151, 182, 255, 137, 154, 185, 255, 115, 129, 154, 252, 114, 128, 155, 255, 130, 146, 175, 255, 132, 147, 175, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 158, 159, 162, 3, 108, 121, 145, 230, 144, 162, 195, 255, 137, 154, 185, 197, 74, 79, 86, 45, 41, 46, 55, 246, 120, 134, 162, 255, 129, 145, 174, 156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 101, 113, 48, 124, 139, 167, 255, 144, 161, 194, 255, 138, 155, 186, 67, 0, 0, 0, 0, 49, 54, 62, 150, 87, 98, 118, 255, 128, 144, 173, 223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 113, 132, 105, 137, 154, 185, 255, 139, 156, 188, 231, 143, 159, 187, 3, 0, 0, 0, 0, 64, 68, 76, 61, 70, 79, 95, 255, 127, 143, 172, 254, 134, 149, 175, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 121, 142, 153, 141, 159, 191, 255, 139, 156, 188, 164, 0, 0, 0, 0, 0, 0, 0, 0, 79, 82, 87, 3, 69, 77, 92, 241, 122, 137, 165, 255, 127, 142, 170, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 122, 146, 191, 145, 163, 196, 255, 139, 156, 188, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 86, 101, 190, 115, 129, 156, 255, 126, 141, 170, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 125, 149, 227, 150, 168, 201, 255, 141, 157, 188, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 91, 107, 144, 113, 127, 153, 255, 125, 140, 169, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 165, 167, 2, 112, 125, 150, 252, 155, 173, 203, 255, 143, 159, 189, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 94, 110, 109, 114, 128, 155, 255, 125, 140, 168, 175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 167, 181, 1, 120, 130, 149, 33, 48, 53, 59, 69, 43, 46, 52, 100, 50, 54, 59, 137, 116, 130, 156, 255, 155, 171, 201, 255, 105, 118, 142, 155, 104, 117, 141, 151, 105, 118, 141, 151, 105, 118, 142, 151, 101, 113, 136, 185, 111, 124, 150, 255, 116, 130, 156, 220, 112, 125, 148, 95, 115, 127, 150, 67, 123, 134, 156, 33, 168, 176, 190, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 129, 147, 5, 109, 121, 142, 71, 106, 118, 140, 140, 105, 117, 140, 197, 107, 120, 144, 242, 120, 135, 162, 255, 123, 137, 163, 255, 44, 49, 58, 255, 28, 32, 39, 255, 125, 139, 164, 255, 150, 167, 197, 255, 138, 155, 186, 255, 131, 148, 178, 255, 125, 141, 170, 255, 119, 134, 162, 255, 114, 128, 154, 255, 108, 122, 147, 255, 104, 117, 141, 255, 102, 115, 138, 255, 103, 116, 139, 255, 107, 120, 145, 255, 111, 124, 149, 245, 113, 126, 151, 200, 113, 127, 152, 140, 116, 129, 154, 71, 122, 135, 158, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 118, 128, 145, 14, 106, 118, 140, 130, 104, 116, 139, 234, 105, 118, 142, 255, 128, 144, 173, 255, 147, 165, 199, 255, 157, 177, 213, 255, 150, 168, 202, 255, 140, 156, 187, 229, 41, 45, 52, 196, 39, 43, 51, 183, 130, 143, 168, 255, 144, 161, 192, 233, 109, 122, 145, 109, 105, 116, 138, 109, 99, 110, 130, 109, 92, 103, 123, 109, 91, 100, 117, 145, 97, 109, 131, 255, 95, 106, 128, 248, 74, 83, 97, 193, 64, 72, 85, 227, 56, 63, 75, 255, 55, 62, 75, 255, 65, 73, 88, 255, 90, 101, 121, 255, 111, 125, 150, 255, 114, 128, 154, 236, 116, 129, 155, 130, 127, 140, 165, 16, 0, 0, 0, 0,
 95, 101, 113, 22, 103, 115, 137, 220, 103, 116, 140, 255, 110, 123, 148, 255, 146, 165, 198, 255, 147, 165, 197, 232, 142, 158, 188, 147, 131, 144, 169, 78, 115, 123, 139, 20, 0, 0, 0, 0, 0, 0, 0, 0, 91, 97, 108, 68, 128, 142, 167, 255, 144, 162, 193, 212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 100, 107, 31, 120, 135, 163, 255, 133, 150, 180, 231, 0, 0, 0, 0, 0, 0, 0, 0, 86, 89, 93, 20, 50, 54, 61, 73, 37, 40, 46, 141, 33, 36, 42, 230, 46, 52, 63, 255, 107, 120, 144, 255, 116, 130, 157, 255, 118, 133, 159, 223, 132, 147, 174, 24,
 76, 83, 95, 114, 104, 117, 140, 255, 105, 117, 141, 255, 118, 133, 160, 253, 139, 155, 184, 116, 134, 143, 161, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 100, 110, 74, 122, 137, 163, 255, 143, 160, 191, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 114, 120, 31, 123, 138, 166, 255, 136, 153, 183, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 93, 97, 5, 42, 45, 51, 111, 86, 97, 117, 253, 118, 133, 160, 255, 119, 133, 161, 255, 133, 149, 180, 116,
 46, 50, 56, 109, 67, 76, 91, 255, 105, 118, 142, 255, 107, 120, 145, 254, 112, 125, 149, 131, 127, 139, 161, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 98, 109, 74, 116, 130, 156, 255, 142, 159, 190, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 115, 122, 31, 128, 143, 172, 255, 141, 157, 185, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 137, 163, 7, 122, 136, 162, 122, 120, 135, 162, 254, 121, 136, 164, 255, 136, 152, 184, 255, 126, 141, 168, 116,
 71, 74, 79, 17, 31, 35, 41, 206, 42, 47, 57, 255, 77, 87, 105, 255, 103, 116, 140, 255, 110, 124, 149, 239, 112, 125, 150, 157, 115, 128, 153, 89, 122, 134, 158, 30, 147, 158, 177, 2, 0, 0, 0, 0, 81, 87, 96, 65, 109, 123, 148, 255, 141, 158, 190, 212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 103, 112, 31, 135, 151, 180, 255, 141, 156, 183, 231, 0, 0, 0, 0, 153, 164, 183, 1, 134, 147, 171, 30, 124, 138, 165, 84, 123, 138, 165, 154, 122, 137, 164, 235, 127, 143, 172, 255, 140, 157, 189, 255, 144, 162, 195, 255, 129, 144, 172, 218, 126, 138, 161, 22,
 0, 0, 0, 0, 64, 68, 73, 7, 39, 43, 49, 118, 32, 36, 42, 225, 30, 35, 42, 255, 50, 57, 68, 255, 72, 81, 97, 255, 91, 102, 123, 255, 105, 118, 142, 255, 113, 127, 152, 240, 115, 129, 155, 204, 111, 124, 149, 196, 111, 125, 150, 255, 126, 141, 170, 234, 119, 133, 159, 120, 120, 134, 160, 116, 121, 135, 161, 117, 121, 135, 162, 119, 116, 130, 155, 152, 127, 142, 170, 255, 125, 140, 168, 248, 123, 138, 166, 199, 130, 145, 173, 235, 140, 155, 183, 255, 143, 160, 190, 255, 143, 161, 193, 255, 147, 165, 199, 255, 145, 164, 197, 255, 132, 148, 177, 230, 127, 140, 166, 126, 124, 134, 151, 12, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 141, 144, 3, 55, 58, 63, 58, 37, 40, 46, 126, 34, 38, 44, 184, 34, 38, 44, 235, 35, 39, 47, 254, 49, 55, 66, 255, 64, 72, 87, 255, 77, 87, 104, 255, 88, 98, 118, 255, 96, 108, 130, 255, 103, 116, 139, 255, 108, 122, 147, 255, 113, 127, 153, 255, 118, 133, 160, 255, 124, 140, 168, 255, 133, 148, 176, 255, 141, 156, 183, 255, 146, 161, 187, 255, 144, 159, 186, 255, 131, 146, 174, 254, 127, 141, 168, 237, 126, 141, 168, 188, 123, 137, 162, 131, 112, 123, 143, 61, 128, 132, 140, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 94, 98, 19, 64, 68, 73, 56, 53, 57, 65, 82, 62, 67, 76, 116, 66, 74, 89, 255, 95, 107, 129, 255, 80, 88, 103, 155, 81, 90, 105, 151, 86, 95, 112, 151, 95, 104, 122, 151, 98, 109, 128, 180, 124, 139, 166, 255, 109, 122, 146, 218, 100, 110, 128, 84, 96, 104, 118, 56, 105, 109, 117, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 174, 176, 2, 74, 83, 98, 252, 131, 147, 178, 255, 140, 155, 184, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 134, 157, 114, 151, 169, 203, 255, 123, 138, 165, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 76, 90, 224, 122, 137, 165, 255, 136, 152, 182, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 139, 165, 147, 146, 164, 198, 255, 122, 137, 165, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 69, 81, 191, 110, 124, 149, 255, 134, 151, 181, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 143, 170, 193, 142, 160, 192, 255, 122, 137, 164, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 63, 74, 150, 94, 105, 127, 255, 133, 149, 179, 166, 0, 0, 0, 0, 0, 0, 0, 0, 115, 119, 128, 5, 130, 145, 174, 242, 137, 154, 186, 255, 125, 139, 166, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 58, 66, 102, 72, 81, 97, 255, 132, 148, 178, 236, 148, 161, 187, 5, 0, 0, 0, 0, 110, 121, 140, 64, 140, 157, 189, 255, 127, 142, 171, 254, 131, 144, 169, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 65, 71, 43, 47, 52, 63, 255, 127, 143, 172, 255, 132, 148, 177, 75, 0, 0, 0, 0, 121, 134, 158, 160, 139, 156, 188, 255, 123, 138, 165, 223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 156, 158, 1, 36, 39, 46, 227, 106, 119, 143, 255, 130, 145, 175, 203, 114, 125, 147, 51, 123, 138, 166, 247, 131, 147, 177, 255, 123, 138, 165, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 41, 47, 143, 68, 77, 93, 255, 128, 144, 174, 255, 126, 141, 170, 252, 129, 145, 174, 255, 123, 138, 166, 255, 127, 141, 167, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 68, 73, 40, 34, 38, 46, 250, 117, 131, 158, 255, 126, 142, 171, 255, 124, 140, 168, 255, 125, 139, 166, 214, 140, 152, 172, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 44, 50, 134, 58, 66, 79, 255, 123, 138, 166, 255, 123, 138, 166, 250, 127, 140, 165, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 156, 158, 1, 46, 50, 55, 83, 82, 89, 102, 123, 106, 116, 136, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
Ihandle image = IupImageRGBA(32, 32, imgdata);
    return image;
end function

function load_image_LogoTecgraf()
sequence imgdata =
{
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 120, 143, 125, 132, 148, 178, 173, 133, 149, 178, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 110, 130, 48, 130, 147, 177, 254, 124, 139, 167, 254, 131, 147, 176, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 128, 153, 134, 142, 159, 191, 194, 47, 52, 61, 110, 114, 128, 154, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 143, 172, 192, 140, 156, 188, 99, 65, 69, 76, 16, 97, 109, 131, 251, 129, 144, 172, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 147, 175, 232, 140, 157, 188, 43, 0, 0, 0, 0, 100, 112, 134, 211, 126, 141, 169, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 78, 88, 26, 48, 52, 57, 60, 135, 150, 178, 254, 108, 121, 145, 83, 105, 118, 142, 76, 106, 119, 143, 201, 118, 133, 159, 122, 117, 129, 152, 25, 168, 176, 190, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 118, 128, 145, 3, 104, 117, 140, 92, 114, 127, 152, 180, 131, 147, 177, 237, 133, 149, 178, 249, 38, 42, 50, 222, 137, 152, 180, 249, 126, 142, 170, 182, 114, 128, 154, 182, 104, 117, 140, 227, 95, 107, 128, 238, 83, 93, 112, 248, 84, 95, 113, 239, 104, 117, 141, 180, 115, 129, 155, 93, 127, 140, 165, 4,
 98, 109, 130, 153, 109, 123, 147, 254, 145, 163, 195, 153, 138, 154, 182, 56, 115, 123, 138, 5, 92, 99, 109, 35, 134, 149, 177, 230, 0, 0, 0, 0, 0, 0, 0, 0, 120, 133, 159, 143, 135, 151, 181, 115, 86, 89, 93, 5, 41, 45, 51, 54, 40, 45, 53, 150, 107, 120, 144, 254, 122, 137, 164, 154,
 51, 57, 66, 147, 83, 93, 112, 255, 108, 121, 145, 159, 113, 126, 151, 62, 123, 136, 159, 8, 87, 93, 103, 35, 125, 141, 169, 230, 0, 0, 0, 0, 0, 0, 0, 0, 129, 143, 169, 143, 140, 156, 184, 115, 134, 147, 172, 8, 124, 138, 165, 60, 124, 139, 167, 155, 131, 147, 177, 255, 131, 147, 176, 153,
 64, 68, 73, 2, 36, 39, 45, 86, 41, 46, 54, 173, 60, 67, 80, 232, 75, 84, 101, 251, 89, 100, 120, 228, 105, 118, 142, 250, 110, 123, 148, 187, 118, 132, 158, 187, 126, 141, 169, 229, 134, 149, 177, 239, 136, 152, 179, 250, 136, 152, 181, 234, 139, 156, 186, 175, 130, 145, 173, 90, 124, 134, 151, 3,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 74, 79, 19, 60, 64, 73, 50, 92, 103, 124, 254, 86, 95, 111, 84, 90, 100, 117, 76, 126, 141, 168, 201, 113, 126, 150, 119, 99, 105, 117, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 105, 125, 231, 135, 151, 181, 46, 0, 0, 0, 0, 137, 154, 184, 212, 123, 137, 164, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 83, 98, 191, 133, 149, 179, 102, 111, 121, 139, 17, 134, 150, 180, 252, 126, 140, 166, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 48, 57, 132, 121, 136, 164, 197, 121, 135, 161, 115, 130, 146, 175, 221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 47, 52, 46, 87, 98, 118, 254, 126, 142, 170, 254, 124, 139, 166, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 57, 67, 118, 115, 128, 152, 170, 127, 140, 164, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
Ihandle image = IupImageRGBA(16, 16, imgdata)
    return image
end function

--unused: 
/*
constant img_bits1 =
{
 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1
,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1
,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1
,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1
,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1
,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1
,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1
,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,0,2,0,2,0,2,2,0,2,2,2,0,0,0,2,2,2,0,0,2,0,2,2,0,0,0,2,2,2
,2,2,2,0,2,0,0,2,0,0,2,0,2,0,2,2,2,0,2,0,2,2,0,0,2,0,2,2,2,0,2,2
,2,2,2,0,2,0,2,2,0,2,2,0,2,2,2,2,2,0,2,0,2,2,2,0,2,0,2,2,2,0,2,2
,2,2,2,0,2,0,2,2,0,2,2,0,2,2,0,0,0,0,2,0,2,2,2,0,2,0,0,0,0,0,2,2
,2,2,2,0,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,0,2,2,2,0,2,0,2,2,2,2,2,2
,2,2,2,0,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,0,2,2,0,0,2,0,2,2,2,0,2,2
,2,2,2,0,2,0,2,2,0,2,2,0,2,2,0,0,0,0,2,2,0,0,2,0,2,2,0,0,0,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,0,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1
,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1
,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1
,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1
,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
};
*/

constant img_bits2 =
{
 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,3,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,3,3,3,3,3,1,1,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,3,3,3,3,3,3,1,1,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,0,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,0,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,0,3,0,3,0,3,3,0,3,3,3,1,1,0,3,3,3,0,0,3,0,3,3,0,0,0,3,3,3
,3,3,3,0,3,0,0,3,0,0,3,0,3,0,1,1,3,0,3,0,3,3,0,0,3,0,3,3,3,0,3,3
,3,3,3,0,3,0,3,3,0,3,3,0,3,3,1,1,3,0,3,0,3,3,3,0,3,0,3,3,3,0,3,3
,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
,3,3,3,0,3,0,3,3,0,3,3,0,3,0,1,1,3,0,3,0,3,3,0,0,3,0,3,3,3,0,3,3
,3,3,3,0,3,0,3,3,0,3,3,0,3,3,1,1,0,0,3,3,0,0,3,0,3,3,0,0,0,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,0,3,3,3,0,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,3,0,0,0,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,2,2,2,2,2,2,2,3,3,3,3,3,3,3,1,1,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,3,3,3,3,3,3,3,3,1,1,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
};

function copydata_cb(Ihandle ih, atom v, integer size)
    if ih then end if
    printf(1,"COPYDATA(%s, %d)\n",{peek_string(v), size});
    return IUP_DEFAULT;
end function

function valuechanged_cb(Ihandle ih)
    printf(1,"VALUECHANGED_CB(%s)=%s\n",{IupGetClassName(ih), IupGetAttribute(ih, "VALUE")});
    return IUP_DEFAULT;
end function

--unused:
--function getfocus_cb(Ihandle ih)
--  printf(1,"GETFOCUS_CB(%s)\n",{IupGetClassName(ih)});
--  return IUP_DEFAULT;
--end function

--unused:
--function killfocus_cb(Ihandle ih)
--  printf(1,"KILLFOCUS_CB(%s)\n",{IupGetClassName(ih)});
--  return IUP_DEFAULT;
--end function

-- unused:
--function leavewindow_cb(Ihandle ih)
--  printf(1,"LEAVEWINDOW_CB(%s)\n",{IupGetClassName(ih)});
--  return IUP_DEFAULT;
--end function

--unused:
--function enterwindow_cb(Ihandle ih)
--  printf(1,"ENTERWINDOW_CB(%s)\n",{IupGetClassName(ih)});
--  return IUP_DEFAULT;
--end function

/* Internal SDK function */
--char *iupKeyCodeToName(int code);

function k_any(Ihandle ih, atom c)
--  if iup_isprint(c) then
    if c=K_ESC then
        return IUP_CLOSE
    elsif c>31 and c<127 then
        printf(1,"K_ANY(%s, %d = %s \'%c\')\n",{IupGetClassName(ih), c, iupKeyCodeToName(c), c});
    else
        printf(1,"K_ANY(%s, %d = %s)\n",{IupGetClassName(ih), c, iupKeyCodeToName(c)})
    end if
    if c=='r' then IupRecordInput("inputtest.iup", IUP_RECTEXT); return IUP_IGNORE; end if  -- IUP_RECBINARY, IUP_RECTEXT 
    if c=='s' then IupRecordInput(NULL, 0); IupPlayInput(NULL); return IUP_IGNORE; end if
    if c=='p' then IupPlayInput("inputtest.iup"); return IUP_IGNORE; end if
    return IUP_CONTINUE;
end function

--unused:
--function help_cb(Ihandle ih)
--  printf(1,"HELP_CB(%s)\n", {IupGetClassName(ih)});
--  return IUP_DEFAULT;
--end function

Ihandln text_menu = NULL

procedure show_text_menu(Ihandle ih)
integer x, y
Ihandle menu_file

--DEV dunno what "item_cb" is meant to be, anyway it does nothing...
--DEV ditto all the images... (I fixed image_tec)
--Ihandle menu_file = IupMenu({IupSetAttributesf(IupMenuItem("Item with Image", "item_cb"), "IMAGE=image_tec"),
    if text_menu=NULL then
        menu_file = IupMenu({IupMenuItem("Item with Image", "IMAGE=image_tec"),
--                           IupSetAttributesf(IupMenuItem("Toggle using VALUE", NULL), "VALUE=ON, KEY=K_V"),
                             IupMenuItem("Toggle using &VALUE", "VALUE=ON, AUTOTOGGLE=YES"),
--                           IupSetAttributesf(IupMenuItem("Auto &Toggle", "item_cb"), "AUTOTOGGLE=YES, VALUE=OFF, IMAGE=image_test, IMPRESS=image_test_pressed"),
                             IupMenuItem("Auto &Toggle", "AUTOTOGGLE=YES, VALUE=OFF, IMAGE=image_test, IMPRESS=image_test_pressed"),
                             IupSeparator(),
--                           IupMenuItem("E&xit (Close)", NULL)});
                             IupMenuItem("E&xit (Close)")});

--      text_menu = IupMenu({IupSetAttributesf(IupSubmenu("Submenu", menu_file), "KEY=K_S, IMAGE=image_tec"),
        text_menu = IupMenu({IupSubmenu("&Submenu", menu_file, "IMAGE=image_tec"),
--                           IupMenuItem("Item", "item_cb"),
                             IupMenuItem("Item"),
--                           IupSetAttributesf(IupMenuItem("Item", "item_cb"), "VALUE=ON"),
                             IupMenuItem("Item", "VALUE=ON"),
--                           IupSetAttributesf(IupMenuItem("Item", "item_cb"), "KEY=K_I, IMAGE=image_tec")});
                             IupMenuItem("&Item", "IMAGE=image_tec")});
    end if

    x = IupGetInt(ih, "X");
    y = IupGetInt(ih, "Y")+IupGetInt2(ih, "RASTERSIZE");

    IupPopup(text_menu, x, y);
--  IupDestroy(text_menu);
end procedure

function text_click_cb(Ihandle ih)
--  IupSetAttribute(IupGetDialog(ih), "BACKGROUND", "255 128 128");
    show_text_menu(ih);
    return IUP_DEFAULT;
end function

function action2_cb(Ihandle ih)
    printf(1,"ACTION2\n");
    return IUP_DEFAULT;
end function

function action3_cb(Ihandle ih)
    if ih then end if
    printf(1,"ACTION3\n");
--  IupSetAttribute(IupGetChild(IupGetDialog(ih), 0), "BGCOLOR", "128 0 0");
    return IUP_DEFAULT;
end function

procedure set_callbacks(object ih)
    if sequence(ih) then
        for i=1 to length(ih) do
            set_callbacks(ih[i])
        end for
    else
        IupSetCallback(ih, "VALUECHANGED_CB", Icallback("valuechanged_cb"));

--      IupSetCallback(ih, "GETFOCUS_CB", Icallback("getfocus_cb"));
--      IupSetCallback(ih, "KILLFOCUS_CB", Icallback("killfocus_cb"));

--      IupSetCallback(ih, "ENTERWINDOW_CB", Icallback("enterwindow_cb"));
--      IupSetCallback(ih, "LEAVEWINDOW_CB", Icallback("leavewindow_cb"));

        IupSetCallback(ih, "K_ANY", Icallback("k_any"));
--      IupSetCallback(ih, "HELP_CB", Icallback("help_cb"));

    end if
end procedure

function background_cb(Ihandle ih)
    if IupGetAttribute(IupGetDialog(ih), "BACKGROUND")="240 240 240" then
        IupSetAttribute(IupGetDialog(ih), "BACKGROUND", "0 128 0");
    else
        IupSetAttribute(IupGetDialog(ih), "BACKGROUND", "240 240 240");
    end if
    return IUP_DEFAULT;
end function
constant cb_background = Icallback("background_cb")

function dlgbg_cb(Ihandle ih)
string bgcolor = IupGetAttribute(IupGetDialog(ih), "BGCOLOR")
string newcolor = iff(bgcolor="240 240 240"?"128 0 0":"240 240 240")
    IupSetAttribute(IupGetDialog(ih), "BGCOLOR", newcolor)
    return IUP_DEFAULT;
end function
constant cb_dlgbg = Icallback("dlgbg_cb")

function childbg_cb(Ihandle ih)
string dlgcolor = IupGetAttribute(IupGetDialog(ih), "BGCOLOR")
string bgcolor = IupGetAttribute(IupGetChild(IupGetDialog(ih),0), "BGCOLOR")
nullable_string newcolor = iff(bgcolor=dlgcolor?"0 0 128":NULL)
    for pos=0 to IupGetChildCount(IupGetDialog(ih)) do
        IupSetAttribute(IupGetChild(IupGetDialog(ih), pos), "BGCOLOR", newcolor);
    end for
    return IUP_DEFAULT;
end function
constant cb_childbg = Icallback("childbg_cb")

Ihandle pbar
integer pval = 0
function OnTimer(Ihandle /*ih*/)
    IupSetStrAttribute(pbar, "VALUE", "%2.1f",{pval/10});
    if pval=11 then -- (needed an extra 1 to let it complete...)
        pval = 0
    else
        pval += 1
    end if
    return IUP_IGNORE
end function

--unused:
--procedure globalkeypress_cb(integer code, integer pressed)
--  printf(1,"GLOBALKEYPRESS_CB(code[%d]=%s, pressed=%d)\n",{code,"iupKeyCodeToName(code)", pressed});
--end procedure

--unused:
--procedure globalmotion_cb(integer x, integer y, atom pStatus)
--  printf(1,"GLOBALMOTION_CB(x=%d, y=%d, status=%s)\n",{x, y, peek_string(pStatus)});
--end procedure

--unused:
--procedure globalbutton_cb(integer button, integer pressed, integer x, integer y, atom pStatus)
--  printf(1,"GLOBALBUTTON_CB(button=%c, pressed=%d, x=%d, y=%d, status=%s)\n",{button, pressed, x, y, peek_string(pStatus)});
--end procedure

--unused:
--procedure globalwheel_cb(atom delta, integer x, integer y, atom pStatus)
--  printf(1,"GLOBALWHEEL_CB(delta=%g, x=%d, y=%d, status=%s)\n",{delta, x, y, peek_string(pStatus)});
--end procedure

function esc_close(Ihandle /*ih*/, atom c)
-- (I like all my demos to close when escape is keyed)
    return iff(c=K_ESC?IUP_CLOSE:IUP_CONTINUE)
end function

-- This shows how to defer-load nodes on expand/demand:
-- Obviuously would probably be more dynamically set in a real app,
-- and of course elements can be more than plain-string leaf nodes,
-- with daisy-chains of unique userids to control things properly.
-- (7 is plucked out of the air, matches the 7 in tree_nodes below)
-- (also feel free to use xxx[7]!=0 instead of find(7,toload)!=0..)

sequence {toload,tolkids} = columnize({{7,{"equilateral",
                                           "isoceles",
                                           "scalenus"}},
--                                     {8,{"some",      -- (works just fine, if)
--                                         "other",     -- (8 uncommented below)
--                                         "branch"}},
                                      })

function branchopen_cb(Ihandle tree, integer id)
--  printf(1,"BRANCHOPEN_CB (%d)\n", {id});
    integer userid = IupTreeGetUserId(tree,id),
            k = find(userid,toload)
    if k!=0 then -- (deferred load rqd for this node)
        -- first kill off "dummy" (which ensured a '+'):
        IupSetAttributeId(tree,"DELNODE",id,"CHILDREN")
        sequence children = tolkids[k]
        IupTreeAddNodes(tree, children, userid)
        -- finally remove load from the to-do lists:
        toload[k..k] = {}
        tolkids[k..k] = {}
    end if
    return IUP_DEFAULT;
end function

procedure SampleTest()
Ihandle mnu, menu1, backmenu, hbox_1, cnv_1, vbox_1, dlg, img,
    btn_1, btn_2, btn_3, btn_4, btn_5,
    tgl_1, tgl_2, tgl_3, tgl_4, tgl_5, exp_3,
    frm_1, frm_2, frm_3, frm_4, frm_5, val, tabs,
    list_1, list_2, list_3, text_1, ml_1, tree;

--  img = IupImage(32,32, img_bits1);
--  IupSetHandle ("img1", img); 
--  IupSetAttribute (img, "0", "0 0 0"); 
--  IupSetAttribute (img, "1", "BGCOLOR");
--  IupSetAttribute (img, "2", "255 0 0");

    img = load_image_Tecgraf();
    IupSetHandle("img1", img);

    img = IupImage(32,32, img_bits2);
    IupSetHandle("img2", img);
    IupSetAttribute(img, "0", "0 0 0");
    IupSetAttribute(img, "1", "0 255 0");
    IupSetAttribute(img, "2", "BGCOLOR");
    IupSetAttribute(img, "3", "255 0 0");

    menu1 = IupMenu({IupMenuItem("IupMenuItem 1 Checked", "VALUE=ON"),
                     IupSeparator(),
                     IupMenuItem("IupMenuItem 2 Disabled", "ACTIVE=NO")})
    backmenu = IupMenu({IupMenuItem("toggle BACKGROUND",cb_background,"AUTOTOGGLE=YES"),
                        IupMenuItem("toggle dialog BGCOLOR",cb_dlgbg, "AUTOTOGGLE=YES"),
                        IupMenuItem("toggle child BGCOLOR",cb_childbg,"AUTOTOGGLE=YES")})
    mnu = IupMenu({IupSubmenu("IupSubmenu 1", menu1),
                   IupMenuItem("IupMenuItem 3", NULL),
                   IupMenuItem("IupMenuItem 4", NULL),
                   IupSubmenu("Background",backmenu)});

    IupSetHandle("mnu",mnu);

    btn_1 = IupButton("Button Text", "PADDING=5x5")
    btn_2 = IupButton("Text", Icallback("text_click_cb"), "IMAGE=img1, PADDING=5x5")
    btn_3 = IupButton(NULL, Icallback("action2_cb"), "IMAGE=img1")
    btn_4 = IupButton(NULL, Icallback("action3_cb"), "IMAGE=img1,IMPRESS=img2")
    btn_5 = IupButton(NULL, Icallback("action3_cb"), "BGCOLOR=\"255 0 128\", SIZE=20x10")
    set_callbacks({btn_1,btn_2,btn_3,btn_4,btn_5})
--DEV this will confuse plade: (fixed, any more?)
--  frm_1 = IupFrame(IupVbox({btn_1,btn_2,btn_3,btn_4,btn_5}),"TITLE=IupButton")
--  frm_1 = IupExpander(frm_1)
    frm_1 = IupExpander(IupFrame(IupVbox({btn_1,btn_2,btn_3,btn_4,btn_5}),"TITLE=IupButton"))
    IupSetAttribute(frm_1,"BARPOSITION","LEFT");

    frm_2 = IupFrame(IupVbox({IupLabel("Label Text"),
                              IupLabel(NULL,"SEPARATOR=HORIZONTAL, MAXSIZE=150, NAME=SAMP_SEP"),
                              IupLink("http://google.co.uk"),
--                            IupLabel(NULL,"IMAGE=img1")}),
                              IupLabel(NULL,"IMAGE=image_tec")}),
                     "TITLE=IupLabel");

--  tgl_1 = IupToggle("Toggle Text", "VALUE=ON")
    tgl_1 = IupToggle("Toggle Text", "VALUE=ON, 3STATE=YES")
    tgl_2 = IupToggle("", "VALUE=ON,IMAGE=img1,IMPRESS=img2")
    tgl_3 = IupToggle("", "VALUE=ON,IMAGE=img1")
    tgl_4 = IupToggle("Toggle Text")
    tgl_5 = IupToggle("Toggle Text")
    set_callbacks({tgl_1,tgl_2,tgl_3,tgl_4,tgl_5})

    frm_3 = IupFrame(IupRadio(IupVbox({tgl_4,tgl_5})),
                     "TITLE=IupRadio")
--  frm_3 = IupFrame(IupRadio(IupVbox({IupHbox({IupLabel(NULL,"IMAGE=image_tec"),tgl_4}),
--                                     IupHbox({IupLabel(NULL,"IMAGE=image_tec"),tgl_5})})),
--                   "TITLE=IupRadio")

    exp_3 = IupExpander(IupVbox({tgl_1,tgl_2,tgl_3,
--                               IupFrame(IupRadio(IupVbox({tgl_4,tgl_5})),
                                 frm_3}));

    IupSetAttribute(exp_3,"TITLE","IupToggle");
    IupSetAttribute(exp_3,"BARPOSITION","TOP");

    text_1 = IupText();
    IupSetAttribute(text_1,"VALUE","Single Line Text");
    IupSetAttribute(text_1,"SIZE","80x");

    ml_1 = IupMultiLine();
--  ml_1 = IupText()
--  IupSetAttribute(ml_1, "MULTILINE", "YES")
    IupSetAttribute(ml_1,"VALUE","Multiline Text\nSecond Line\nThird Line");
    IupSetAttribute(ml_1,"EXPAND","YES");
    IupSetAttribute(ml_1,"SIZE","80x40");

    set_callbacks({text_1,ml_1})
    frm_4 = IupFrame(IupVbox({text_1,ml_1}));

    IupSetAttribute(frm_4,"TITLE","IupText");

    list_1 = IupList();
--  IupSetAttribute(list_1,"EXPAND","YES");
    IupSetAttribute(list_1,"VALUE","1");
    IupSetAttribute(list_1,"1","Item 1 Text");
    IupSetAttribute(list_1,"2","Item 2 Text");
    IupSetAttribute(list_1,"3","Item 3 Text");
    IupSetAttribute(list_1,"TIP","List 1");

    list_2 = IupList();
    IupSetAttribute(list_2,"DROPDOWN","YES");
--  IupSetAttribute(list_2,"EXPAND","YES");
    IupSetAttribute(list_2,"VALUE","2");
    IupSetAttribute(list_2,"1","Item 1 Text");
    IupSetAttribute(list_2,"2","Item 2 Text");
    IupSetAttribute(list_2,"3","Item 3 Text");
    IupSetAttribute(list_2,"TIP","List 2");

    list_3 = IupList();
    IupSetAttribute(list_3,"EDITBOX","YES");
--  IupSetAttribute(list_3,"EXPAND","YES");
    IupSetAttribute(list_3,"VALUE","3");
    IupSetAttribute(list_3,"1","Item 1 Text");
    IupSetAttribute(list_3,"2","Item 2 Text");
    IupSetAttribute(list_3,"3","Item 3 Text");
    IupSetAttribute(list_3,"TIP","List 3");

    set_callbacks({list_1,list_2,list_3})
    frm_5 = IupFrame(IupVbox({list_1,list_2,list_3}));
    IupSetAttribute(frm_5,"TITLE","IupList");

    hbox_1 = IupHbox({frm_1,frm_2,exp_3,frm_4,frm_5});

    val = IupValuator()
    set_callbacks(val)

    pbar = IupProgressBar();
    IupSetAttribute(pbar, "VALUE", "0");
--  IupSetAttribute(pbar, "DASHED", "YES"); -- (no effect on windows 10)
--  IupSetAttribute(pbar, "MARQUEE", "YES");
    set_callbacks(pbar);

    Ihandle hTimer = IupTimer(Icallback("OnTimer"), 300)

    tabs = IupTabs({IupVbox({IupLabel()}),
                    IupVbox({IupFill()}),
                    IupVbox({IupFill()})});
    IupSetAttribute(tabs,"TABTITLE0","Tab Title 0");
    IupSetAttribute(tabs,"TABTITLE1","Tab Title 1");
--  IupSetAttributeHandle(tabs,"TABIMAGE1", load_image_LogoTecgraf());
    img = load_image_LogoTecgraf()
    IupSetHandle("image_tec", img);
    IupSetAttributeHandle(tabs,"TABIMAGE1", img)

--  IupSetAttributeId(tabs,"TABIMAGE", 1, load_image_LogoTecgraf()) -- no
--  IupSetAttributeId(tabs,"TABIMAGE", 1, NULL) -- yes (clears)
--  IupSetAttribute(tabs,"TABIMAGE1", load_image_LogoTecgraf()) -- no
    IupSetAttribute(tabs,"TABTITLE2","Tab Title 2");
    IupSetAttribute(tabs,"RASTERSIZE","300x50");
--  IupSetAttribute(tabs,"FGCOLOR","255 0 255") -- ineffective
--  IupSetAttribute(tabs,"PADDING","5x5");
    set_callbacks(tabs);

    tree = IupTree();
    IupSetAttribute(tree, "SHOWRENAME", "YES");
--DEV test..
--  IupSetAttribute(tree, "ADDROOT", "NO");
    IupSetAttribute(tree,"RASTERSIZE","100x150");
    set_callbacks(tree);

    cnv_1 = IupCanvas();
    IupSetAttribute(cnv_1,"BGCOLOR","128 255 0");
    IupSetAttribute(cnv_1,"SCROLLBAR","YES");
    IupSetAttribute(cnv_1,"EXPAND","HORIZONTAL");
    IupSetAttribute(cnv_1,"RASTERSIZE","x100");
--  IupSetAttribute(cnv_1,"CANFOCUS","NO");
    set_callbacks(cnv_1);

    vbox_1 = IupVbox({hbox_1,
                      IupHbox({IupFrame(IupHbox({val}), "TITLE=IupVal"),
                               IupFrame(IupHbox({pbar}), "TITLE=IupProgressBar"),
                               IupFrame(IupHbox({tabs}), "TITLE=IupTabs")}),
                      IupHbox({IupFrame(IupHbox({cnv_1}), "TITLE=IupCanvas"),
                               IupFrame(IupHbox({tree}), "TITLE=IupTree")})});
    IupSetAttribute(vbox_1,"MARGIN","5x5");
    IupSetAttribute(vbox_1,"GAP","5");

-- test (seems fine)
--if 01 then
--  Ihandle scbox = IupScrollBox(vbox_1)
--  -- (note: SIZE must be specified here, else it looks silly)
--  dlg = IupDialog(scbox,"SIZE=300x200")
--else
    dlg = IupDialog(vbox_1);
--end if
    IupSetHandle("dlg",dlg);
    IupSetAttribute(dlg,"MENU","mnu");
    IupSetAttribute(dlg,"TITLE","Iup Sample Dialog");
--  IupSetAttribute(dlg,"COMPOSITED","YES");   /* Windows Only */
--  IupSetAttribute(dlg, "OPACITY", "192");

--  IupSetAttribute(dlg, "BGCOLOR", "173 177 194");  -- Motif BGCOLOR for documentation
--  IupSetAttribute(vbox_1, "BGCOLOR", "92 92 255");
--  IupSetAttribute(dlg, "BGCOLOR", "92 92 255");
--  IupSetAttribute(dlg, "BACKGROUND", "200 10 80");

  --IupSetGlobal("DLGBGCOLOR", "92 92 255");
  --IupSetGlobal("TXTFGCOLOR", "255 92 92");
  --IupSetGlobal("TXTBGCOLOR", "92 92 255");

--  IupSetAttribute(dlg, "FONT", "Helvetica, 24");
--  IupSetAttribute(dlg, "FONT", "-*-helvetica-*-r-*-*-18-*-*-*-*-*-*-*");

--  IupSetAttribute(box, "FGCOLOR", "255 0 0");

--  IupSetAttribute(dlg,"RASTERSIZE","1000x800");

    IupSetCallback(dlg, "COPYDATA_CB", Icallback("copydata_cb"));

  --IupSetGlobal("INPUTCALLBACKS", "Yes");
  --IupSetFunction("GLOBALKEYPRESS_CB", Icallback("globalkeypress_cb"));
  --IupSetFunction("GLOBALMOTION_CB", Icallback("globalmotion_cb"));
  --IupSetFunction("GLOBALBUTTON_CB", Icallback("globalbutton_cb"));
  --IupSetFunction("GLOBALWHEEL_CB", Icallback("globalwheel_cb"));

    IupSetCallback(dlg, "K_ANY", Icallback("esc_close"));

    IupMap(dlg);

    if 0 then
        IupSetAttribute(tree, "TITLE0",     "Figures");
        IupSetAttribute(tree, "ADDLEAF0",   "Other");      /* new id=1 */
        IupSetAttribute(tree, "ADDBRANCH1", "triangle");  /* new id=2 */
        IupSetAttribute(tree, "ADDLEAF2",   "equilateral");  /* ... */
        IupSetAttribute(tree, "ADDLEAF3",   "isoceles");
        IupSetAttribute(tree, "ADDLEAF4",   "scalenus");
    else
        sequence tree_nodes = {"Figures",               -- (branch with 5 children)
--                             {"STATE","COLLAPSED"},   --  (works fine, btw)
                               {"Other",                -- (leaf)
--                              {"triangle",            -- (branch with 3 children)
--                               {"STATE","COLLAPSED"},
--                               {"equilateral",
--                                "isoceles",
--                                "scalenus",
--                               }},
                                {"triangle",            -- (branch with 3 children)
                                 {"STATE","COLLAPSED","USERDATA",7},
                                 {"dummy"}},            -- (ensures we get a '+')
                                {"parallelogram",       -- (branch with 2 children)
                                 {"square",
                                  {"diamond",
                                   {"COLOR","92 92 255","TITLEFONT","Courier, 8"},
                                   0}   -- (nb: this is a leaf, non-optional here)
                                 }},
                                "2D",                   -- (leaf)
--                              {"2D"},                 -- (same)
--                              {"2D",0},               -- (same)
--                              {"2D",{},0},            -- (same)
                                {"3D",{}},              -- (branch, empty)
--                              {"4D",                  -- (works just fine, if 8 uncommented above)
--                               {"STATE","COLLAPSED","USERDATA",8},
--                               {"dummy"}}             -- (branch, deferred load)
                               }
                              }
--      tree_nodes = "one"  -- (as expected, creates a single leaf node)
        IupSetCallback(tree, "BRANCHOPEN_CB",  Icallback("branchopen_cb"));
        IupTreeAddNodes(tree, tree_nodes)
    end if
    IupShow(dlg);
--Ihandle ih = IupLayoutDialog(dlg)
--IupShow(ih)

--  IupSetAttribute(dlg,"RASTERSIZE", NULL);
end procedure


--*/
