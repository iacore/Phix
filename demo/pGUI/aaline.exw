--
-- demo\pGUI\aaline.exw
-- ====================
--
--  draw anti-aliased lines (iif USE_OPENGL==1)
--
--  This program was written in an attempt to figure out precisely what makes opengl
--  draw anti-aliased lines, and/or how to add such capability to other programs. 
--  I am still somewhat in the dark, but obviously CD_GL is critical, and I learnt 
--  that the canvas_resize_cb thing is too. Anyway: it is short, sweet, and works.
--
--  This is effectively a cut-down version of demo\rosetta\XiaolinWuLine.exw,
--  though things actually went the other way round.
--
--  I also learnt thet cdCanvasArc draws anti-aliased lines whereas cdCanvasSector
--  does not; draw the latter ontop of cdCanvasArc and cdCanvasLine for best effect.
--  Also note that cdCanvasSector draws a chord under opengl but a pie-segment when
--  not.
--
with javascript_semantics -- see also demo\rosetta\XiaolinWuLine.exw
include pGUI.e

Ihandle dlg, canvas
cdCanvas cd_canvas

constant USE_OPENGL = 01 -- (if 0, it draws thinner bresenham lines)

--/*
enum FILL,BORDER
constant colours = {CD_BLUE,CD_RED},
         modes = {CD_FILL,CD_CLOSED_LINES}
sequence pts = {{319,606},{150,86},{591,407},{46,407},{487,86}}
integer rot = 0, radius = 30, cx = 50, cy = 50
--*/

function canvas_action_cb(Ihandle canvas)
    cdCanvasActivate(cd_canvas)
    cdCanvasClear(cd_canvas)
    integer {w, h} = sq_sub(IupGetIntInt(canvas, "DRAWSIZE"),10)
--  cdCanvasSetBackground(cd_canvas, CD_RED)
--cdCanvasSetLineWidth(cd_canvas,1) -- no change
--cdCanvasSetLineWidth(cd_canvas,0) -- no change
--cdCanvasSetLineWidth(cd_canvas,2) -- really thick
    cdCanvasLine(cd_canvas,0,0,200,200)
    cdCanvasLine(cd_canvas,w,0,200,200)
    cdCanvasLine(cd_canvas,0,h,200,200)
    cdCanvasLine(cd_canvas,w,h,200,200)
    cdCanvasArc(cd_canvas, 200, 200, 200, 200, 0, 360)
--  cdCanvasSector(cd_canvas, 200, 200, 200, 200, 0, 360) 
--  cdCanvasSector(cd_canvas, 200, 200, 200, 200, 0, 270) 
--  cdCanvasChord(cd_canvas, 200, 200, 200, 200, 0, 270) 
--  cdCanvasSetForeground(cd_canvas, CD_RED)
    cdCanvasArc(cd_canvas, 200, 200, 300, 100, 0, 360)
--  cdCanvasSetBackground(cd_canvas, CD_PARCHMENT)
--test (note that, w/o the lines, this has bresenham edges)
--  cdCanvasBegin(cd_canvas,CD_FILL)
--  cdCanvasVertex(cd_canvas,w,h)
--  cdCanvasVertex(cd_canvas,0,h)
--  cdCanvasVertex(cd_canvas,200,200)
--  cdCanvasEnd(cd_canvas)
    cdCanvasFont(cd_canvas, "Helvetica", CD_ITALIC, 12)
    cdCanvasText(cd_canvas,50,13,"Hello!")
--/test
--/*
--  cdCanvasActivate(cddbuffer)
--  cdCanvasClear(cddbuffer)
--  cdCanvasSetFillMode(cd_canvas, CD_WINDING)
--  cdCanvasSetLineWidth(cd_canvas, round(radius/100)+1) 
--cdCanvasSetFillMode(cd_canvas, CD_WINDING)
--cdCanvasSetFillMode(cd_canvas, CD_EVENODD)
    for mode=FILL to BORDER do
        cdCanvasSetForeground(cd_canvas,colours[mode])
        cdCanvasBegin(cd_canvas,modes[mode])
?sq_round(sq_floor_div(pts,10))
        for i=1 to length(pts) do
            integer {x,y} = pts[i]
            cdCanvasVertex(cd_canvas,x/10+120,y/10+10)
        end for
        cdCanvasEnd(cd_canvas)
        cdCanvasBegin(cd_canvas,modes[mode])
sequence pt2 = {}
        for a=90 to 666 by 144 do
            atom r = (a+rot)*CD_DEG2RAD,
                 x = radius*cos(r)+cx,
                 y = radius*sin(r)+cy
pt2 = append(pt2,{round(x),round(y)})
            cdCanvasVertex(cd_canvas, x, y)
        end for
?pt2
        cdCanvasEnd(cd_canvas)
    end for
--*/

    cdCanvasFlush(cd_canvas)
--  if USE_OPENGL then
--      IupGLSwapBuffers(canvas)    -- (no diff?)
--  end if
    return IUP_DEFAULT
end function

function canvas_map_cb(Ihandle canvas)
    if USE_OPENGL then
        IupGLMakeCurrent(canvas)    -- *** BIG DIFFERENCE! ***
        if platform()=JS then
            cd_canvas = cdCreateCanvas(CD_IUP, canvas)
        else
            atom res = IupGetDouble(NULL, "SCREENDPI")/25.4
            cd_canvas = cdCreateCanvas(CD_GL, "10x10 %g", {res})
        end if
    else
        cd_canvas = cdCreateCanvas(CD_IUPDBUFFER, canvas)
    end if
    cdCanvasSetBackground(cd_canvas, CD_PARCHMENT)
    cdCanvasSetForeground(cd_canvas, CD_BLUE)
    return IUP_DEFAULT
end function

function canvas_unmap_cb(Ihandle canvas)
    cdKillCanvas(cd_canvas)
    return IUP_DEFAULT
end function

function canvas_resize_cb(Ihandle /*canvas*/)
    if USE_OPENGL then
        integer {canvas_width, canvas_height} = IupGetIntInt(canvas, "DRAWSIZE")
        atom res = IupGetDouble(NULL, "SCREENDPI")/25.4
        cdCanvasSetAttribute(cd_canvas, "SIZE", "%dx%d %g", {canvas_width, canvas_height, res})
    end if
    return IUP_DEFAULT
end function

procedure main()
    IupOpen()
    if USE_OPENGL then
        canvas = IupGLCanvas()
    else
        canvas = IupCanvas()
    end if
    IupSetAttribute(canvas, "RASTERSIZE", "640x480")
    IupSetCallbacks(canvas, {"ACTION", Icallback("canvas_action_cb"),
                             "MAP_CB", Icallback("canvas_map_cb"),
                             "UNMAP_CB", Icallback("canvas_unmap_cb"),
                             "RESIZE_CB", Icallback("canvas_resize_cb")})
    dlg = IupDialog(IupVbox({canvas}),`TITLE="Anti-Aliased Lines"`)
    IupShow(dlg)
    IupSetAttribute(canvas, "RASTERSIZE", NULL)
    if platform()!=JS then
        IupMainLoop()
        IupClose()
    end if
end procedure

main()

