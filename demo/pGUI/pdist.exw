--
-- demo\pGUI\pdist.exw
-- ===================
--
--  Phix distribution helper
--
--  Loosely based on eudist, "Euphoria distribution helper v1.0", except:
--
-- SIMPLIFY:
--  this does a single file.
--  you can run it as p pdist [options] src (from a batch file).
--  options include -out dir, -exclude file/dir, 
--  if you want to clear the output directory, do it in a batch file.
--  if you want multiple files or additional includes, "".
--  the gui version won't do directories, command_line/batch will.

--  1)  Uses pGUI to define packages and store settings, in pdist.ini.
--      Simply press the Build button and it copies files to the specified
--      output directory. It also remembers the last project you were working
--      on, and offers that as the default the next time it is run.
--
--  2)  Once and only once a package has been (manually) defined, this can be
--      run via the command line without displaying a GUI, for instance if I
--      define the project "pdist" starting with this very file (plus output
--      directory and other options), I can later run "p pdist.exw pdist" to
--      re-populate the specified output directory, eg from a batch file.
--      More often that not, though, you would just use the GUI.
--
--  3)  It does /not/ use EUDIR or eu.cfg files, nor does it copy anything 
--      from builtins, it assumes the target machine will have a valid Phix
--      installation pre-installed. Output is suitable for eg PCAN.
--
--  When first fun, and pdist.ini does not already exist, it automatically 
--  invokes the "New" button to start a new project. Should you fail to
--  select a suitable start file, the program will simply close.
--  Otherwise the project name and output directory are auto-defaulted.
--  Any errors found in pdist.ini cause the program to terminate.
--
--  NOTE: The gui front-end might look a bit prettier, and remember a few
--  more things than the command-line version it is based on, but it is not
--  intended to provide additional validation or preview capabilities.
--
--  You cannot (have it remember how to) package the same file in multiple
--  different ways. However you could put say a "myapp.altpack" next to a
--  myapp.exw and add the latter as an additional file against that, iyswim.
--
?"" -- (temp)
without debug
include pGUI.e
include builtins\VM\pcfunc.e
include builtins\pfile.e
include builtins\get_routine_info.e
include builtins\scanf.e
include builtins\pdir.e
include builtins\penv.e
with debug

Ihandle dlg, 
        pname, pnew, pfile, pfldr, 
        ptable,
        fedit, ptype, pincx, 
        poutd, poutc, browse

global constant string initialcurrentdir = get_proper_dir(command_line()[2]),
                       inifile = join_path({initialcurrentdir,"pdist.ini"})

--include pdist.e -- ??
-- pdist.ini:
--project: xxxxx
--include file: xxxxx
-- ^ ex     ^dir
--output: xxxxx
--clear: Y/N

sequence projects = {}, -- (unique names/initial file)
         files = {},    -- (full_paths)
         filed = {},    -- "file"/"directory"
         incexc = {},   -- "include"/"exclude" (not true/false)
         outputs = {},  -- (directory name)
--X      clears = {}    -- "Y"/"N" (not true/false)
         clears = {}    -- (true/false)

procedure update_table()
    integer pdx = IupGetInt(pname,"VALUE")
--  integer pdx = find(IupGetAttribute(pname,"VALUE"),projects)
--  sequence data = repeat(0,length(files[pdx]))
    sequence data = {columnize({files[pdx],filed[pdx],incexc[pdx]}),{}}
--pp(files)
--pp(filed)
--pp(incexc)
--pp(data)
    IupTableSetData(ptable,data)
    IupSetAttribute(fedit,"VALUE","")
    IupSetInt(ptype,"VALUE",NULL)
    IupSetInt(pincx,"VALUE",NULL)
    IupSetAttribute(poutd,"VALUE",outputs[pdx])
    IupSetInt(poutc,"VALUE",clears[pdx])
end procedure

procedure add_project(string project_name)
    if not find(project_name,projects) then
        projects = append(projects,project_name)
        integer pdx = length(projects)
        IupSetAttributeId(pname,"",pdx,project_name)
        IupSetInt(pname,"VALUE",pdx)
        files = append(files,{})
        filed = append(filed,{})
        incexc = append(incexc,{})
        string output = join_path({get_file_path(project_name),"pdist"})
        outputs = append(outputs,"")
        clears = append(clears,true)
    end if
end procedure

function load_ini(string inifile)
    projects = {}
    files = {}
    filed = {}
    incexc = {}
    outputs = {}
    clears = {}
    object lines = get_text(inifile,GT_LF_STRIPPED)
    if lines=-1 then return false end if
    integer pdx = 0
    for i=1 to length(lines) do
        if lines[i]!="" then
            string {lt,li} = apply(split(lines[i],":",true,2),trim)
--?{"ltli",lt,li,lines[i]}
            if lt="project" then
                if find(li,projects) then
                    crash("duplicate project")
                end if
                add_project(li)
                pdx = length(projects)
            elsif lt="output" then
                outputs[pdx] = li
            elsif lt="clear" then
--              outputs[pdx] = (upper(li)=="Y")
                clears[pdx] = {true,false}[find(upper(li),{"Y","N"})]
--              clears[pdx] = li
            else
--?{lt,split(lt)}
                string {incx,filedir} = split(lt," ")
                files[pdx] = append(files[pdx],li)
                filed[pdx] = append(filed[pdx],filedir)
                incexc[pdx] = append(incexc[pdx],incx)
            end if
        end if
    end for
    if length(projects) then
--      for i=1 to length(projects) do
--          IupSetAttributeId(pname,"",i,projects[i])
----            ?9/0 -- tbc
--          -- add each to pname, select 1st [DONE]
--      -- construct table data -> IupTableSetData(ptable,data)
--      -- set output [DONE]
--      end for
        IupSetInt(pname,"VALUE",1)
--      IupSetAttribute(pname,"VALUE",projects[1])
        update_table()
    end if
    return length(projects)!=0
end function

procedure save_ini(string inifile)
    integer fn = open(inifile,"w")
    if fn=-1 then crash("cannot open "&inifile) end if
    sequence tags = tagset(length(projects))
    integer pdx = IupGetInt(pname,"VALUE")
--  integer pdx = find(IupGetAttribute(pname,"VALUE"),projects)
    if pdx!=1 then {tags[1],tags[pdx]} = {pdx,1} end if
    for i=1 to length(tags) do
        integer ti = tags[i]
        printf(fn,"project: %s\n",projects[ti])
        sequence fileset = files[ti],
                 filedir = filed[ti],
                 incexcs = incexc[ti]
        for j=1 to length(fileset) do
--          string ie = {"include","exclude"}[2-incexcs[j]],
--                 fd = {"file","directory"}
            printf(fn,"%s %s: %s\n",{incexcs[j],filedir[j],fileset[j]})
        end for
        printf(fn,"output: %s\n",{outputs[ti]})
        printf(fn,"clear: %s\n",{"N","Y"}[clears[ti]+1])
    end for
    close(fn)
end procedure

procedure add_file(string filename)
?{"add_file",filename}
    if projects={} then ?9/0 end if
--      string project_name = get_file_base(filename)
--      IupSetAttributeId(pname,"",1,project_name)
----        IupSetInt(pname,"VALUE",1)
--      IupSetAttribute(pname,"VALUE",project_name)
--      add_project(project_name)
----        outputs[1] = join_path({get_file_path(filename),project_name})
--      outputs[1] = join_path({get_file_path(filename),"pdist"})
----    else
--  end if
    integer pdx = IupGetInt(pname,"VALUE")
--  integer pdx = find(IupGetAttribute(pname,"VALUE"),projects)
    files[pdx] = append(files[pdx],filename)
    filed[pdx] = append(filed[pdx],"file")
    incexc[pdx] = append(incexc[pdx],"include")
--?{files,filed,incexc}
    update_table()
end procedure

function pname_action_cb(Ihandle /*pname*/, atom /*pText*/, integer /*item*/, /*state*/)
    update_table()
    return IUP_DEFAULT
end function

--/*
Ihandln filedlg = NULL

function browse_cb(Ihandle /!*bt_browse*!/)
    return IUP_DEFAULT
end function
constant cb_browse = Icallback("browse_cb")


--/!*
IupFileDlg(DIR) issues
(1) When the dialog opens it expands to the default directory, but at the last second seems to
perform an ensure_visible(node0) operation, so something like C:\Users is hidden off-screen.
(2) Tab/Shift-Tab only cycle through the buttons. You can put keyboard focus on the treeview,
with a mouse click, but not without changing the default node. I could almost live with (1),
if only I could back-tab onto the treeview and press up/down to reposition it.
--*!/

function browse_cb(Ihandle /!*browse*!/)
--?"browse_cb"
    string d = IupGetAttribute(dtext,"VALUE")
    IupSetAttribute(folderdlg,"FILE",d)
    IupSetAttribute(folderdlg,"DIRECTORY",d)
--  IupSetAttribute(folderdlg,"VALUE",d)
    IupPopup(folderdlg, IUP_CENTER, IUP_CENTER)
    if IupGetInt(folderdlg, "STATUS")=0 then
        d = IupGetAttribute(folderdlg, "VALUE")
        IupStoreAttribute(dtext, "VALUE", d)
        load_start(false)
    end if
--  IupHide(folderdlg)
    return IUP_DEFAULT
end function
constant cb_browse = Icallback("browse_cb")
--*/
Ihandln filedlg = NULL

function file_cb(Ihandle ih)
--  if filedlg=NULL then new_filedlg() end if
    if filedlg=NULL then
        filedlg = IupFileDlg()
        IupSetAttribute(filedlg, "DIALOGTYPE", "OPEN");
        IupSetAttributePtr(filedlg, "PARENTDIALOG", dlg);
        IupSetAttribute(filedlg, "EXTFILTER", "All files|*.*|");
        IupSetAttribute(filedlg, "TITLE", "Select File");
--      IupSetAttribute(filedlg,"FILE",initialcurrentdir&"\\*.*") -- fail, status of -1 (once only)
--      IupSetAttribute(filedlg,"FILE",initialcurrentdir&"*.*")
--DEV improveme:
        IupSetAttribute(filedlg,"DIRECTORY",initialcurrentdir)
    end if
--  IupSetAttribute(filedlg,"MULTIPLEFILES ","YES")
    IupSetInt(filedlg,"MULTIPLEFILES ",ih=pfile)
--?222
    IupPopup(filedlg, IUP_CURRENT, IUP_CURRENT)
--  IupPopup(filedlg, IUP_CENTER, IUP_CENTER)
--?333
--?IupGetInt(filedlg, "STATUS")
    if IupGetInt(filedlg, "STATUS")!=-1 then
        string file = IupGetAttribute(filedlg, "VALUE")
        if ih=pnew then
            add_project(file)
            update_table()
        elsif ih=pfile then
            add_file(file)
        else
            ?9/0
        end if
--?     IupSetAttribute(erunwith,"VALUE",runwith)
--?     set_buttons()
    end if
    return IUP_DEFAULT
end function

Ihandln folderdlg = NULL

function fldr_cb(Ihandle ih)
--?9/0
--?"new_cb"
    if folderdlg=NULL then
        folderdlg = IupFileDlg()
--      IupSetAttributes(folderdlg,`ALLOWNEW=NO,DIALOGTYPE=DIR,TITLE="Directory"`)  -- (no help)
        IupSetAttributes(folderdlg,`DIALOGTYPE=DIR,ALLOWNEW=YES,TITLE="Directory"`)
        IupSetAttributeHandle(folderdlg,"PARENTDIALOG",dlg)
--      IupSetAttribute(folderdlg,"FILE",initialcurrentdir)
--      IupSetAttribute(folderdlg,"FILE",initialcurrentdir&"*.*")
--      IupSetAttribute(folderdlg,"FILE",initialcurrentdir&".")
--DEV improveme:
        IupSetAttribute(folderdlg,"DIRECTORY",initialcurrentdir)
--      IupSetAttribute(folderdlg,"DIRECTORY",initialcurrentdir&"")
--      IupSetAttribute(folderdlg,"SHOWEDITBOX","YES")
--      IupSetAttribute(folderdlg,"NOPLACESBAR","YES")
--      IupSetAttribute(folderdlg,"SHOWHIDDEN","YES")
--      IupSetAttribute(folderdlg,"SHOWPREVIEW","YES")
--Ihandle ih = IupLayoutDialog(folderdlg) -- no good...
--IupShow(ih)

--integer nChildren = IupGetChildCount(folderdlg)
--?{"nChildren",nChildren} -- 0
    end if
    integer pdx = IupGetInt(pname,"VALUE")
    IupSetAttribute(folderdlg,"DIRECTORY",outputs[pdx])
    IupSetInt(folderdlg,"SHOWEDITBOX",ih=browse)
    IupPopup(folderdlg, IUP_CURRENT, IUP_CURRENT)
--  IupPopup(folderdlg, IUP_CENTER, IUP_CENTER)
    if IupGetInt(folderdlg, "STATUS")=0 then
        string d = IupGetAttribute(folderdlg, "VALUE")
--according to docs... (same anyway)
--      string d = IupGetAttribute(folderdlg, "DIRECTORY")
--?{d,IupGetAttribute(folderdlg, "DIRECTORY")}
        if ih=pfldr then
?{"add_dir",d}
--          add_dir(d)
        elsif ih=browse then
            IupStoreAttribute(poutd, "VALUE", d)
--          enable()
        else
            ?9/0
        end if
--      load_start(false)
    end if
    return IUP_DEFAULT
end function

function apply_cb(Ihandle /*ih*/)
?"apply_cb"
    return IUP_DEFAULT
end function

function remove_cb(Ihandle /*ih*/)
?"remove_cb"
    return IUP_DEFAULT
end function

constant columns = {{"Additional File(s)",160,"ALEFT"},{"type",40,"ALEFT"},{"include",40,"ALEFT"}}

IupOpen()

--pname = IupList("DROPDOWN=YES,EDITBOX=YES,VISIBLECOLUMNS=10")
pname = IupList(Icallback(pname_action_cb),"DROPDOWN=YES,EXPAND=HORIZONTAL")
--IupSetAttributes(pname, `1="this", 2="that"`) --DEV (test)
pnew = IupButton("New",Icallback(file_cb))
pfile = IupButton("File",Icallback(file_cb))
pfldr = IupButton("Folder",Icallback(fldr_cb))
sequence row1 = {IupLabel("project"),pname,pnew,pfile,pfldr}
{} = IupDestroy(IupNormalizer(row1))
ptable = IupTable(columns,{{},{}},10)
fedit = IupText("EXPAND=HORIZONTAL")
ptype = IupList(`DROPDOWN=YES, 1="file", 2="directory"`)
--IupSetAttributes(ptype, `1="include file", 2="exclude file", 3="include dir", 4="exclude dir"`)
--IupSetAttributes(ptype, `1="file", 2="directory"`)
pincx = IupList(`DROPDOWN=YES, 1="include", 2="exclude"`)
--IupSetAttributes(pincx, `1="include", 2="exclude"`)
poutd = IupText("EXPAND=HORIZONTAL")
poutc = IupToggle("clear?")
browse = IupButton("Browse",Icallback(fldr_cb))
Ihandle pbuild = IupButton("Build")
Ihandle vbox = IupVbox({IupHbox(row1,"GAP=10"),
                       ptable,
                       IupFrame(IupHbox({fedit,ptype,pincx,
                                         IupButton("Apply",Icallback(apply_cb)),
                                         IupButton("Remove"),Icallback(remove_cb)}),
                                "TITLE=details,GAP=10,EXPAND=HORIZONTAL"),
                       IupHbox({IupLabel("output"),poutd,browse,poutc},"GAP=10"),
                       IupHbox({IupFill(),pbuild},"MARGIN=10x0")},
                       "MARGIN=10x10")
dlg = IupDialog(vbox,`TITLE="Phix distribution helper",SIZE=400x300`)
IupShow(dlg)
--Ihandle ih = IupLayoutDialog(dlg)
--IupShow(ih)

if not load_ini(inifile)
or length(projects)=0 then
    {} = file_cb(pnew)
--  {} = fldr_cb(pfldr) -- (test)
end if
if length(projects)!=0 then
    IupMainLoop()
end if
--DEV not web-safe... (do in close_cb)
if length(projects) then save_ini(inifile) end if
IupClose()
--puts(1,"press any key...")
--{} = wait_key()
/*
--  JBrown
--combine.ex
--global scopes aren't redefined
    --this MIGHT cause an error, however, euphoria should normally have an
    --error in that case too.
--procedure-scope vars aren't saved, this makes code more readable
    --N/A if shroud is on
--you can either choose not to combine files in a list, or
    --you can ignore include files on 1 dir (default: eu's include dir)
--shrouding symbols is optional.
--bug fixed: local symbols were being treated as global.
--bug fixed: strings with \x were changed to \x\x.
--bug fixed: file c:\myfile.e and myfile.e were the diffrent files.
--added platform to sequence builtin
--bug: using routine_id("abort_") gives error
    --"Unable to resolve routine id for abort"
    --to fix made routine_id-ing of builtin routines legal.
-- concat.ex
-- version 1.0
--
-- replacement for Euphoria's bind routine

include std/cmdline.e
include std/get.e
include std/io.e
include std/map.e
include std/text.e
include std/console.e
include std/sequence.e
include std/filesys.e
include std/regex.e

-----------------------------------------------------------------------------
sequence included = {},
         excludedIncludes = {}

object outputDir = -1

integer verbose = 0

function stringifier(object s)
    if atom(s) then
        return ""
    end if
    return s
end function
function slashifier(sequence s, object null = 0)
    if length(s) and s[$]!=SLASH then
        s &= SLASH
    end if
    return s
end function

constant
    EuPlace = getenv("EUDIR")
    --Place = { "", EuPlace & "\\", EuPlace & "\\INCLUDE\\" }
sequence
        Place = {}
-----------------------------------------------------------------------------
function findFile(sequence fName, integer showWarning = verbose)

    -- returns where a file is
    -- looks in the usual places

    for i=1 to length(Place) do
        if sequence(dir(Place[i] & fName)) then
--ifdef WINDOWS then
--          return upper(Place[i] & fName)
--elsedef
            return Place[i] & fName
--end ifdef
        end if
    end for

    if showWarning then
        printf(1, "Warning: Unable to locate file %s.\n", {fName})
    end if
    return fName

end function

-----------------------------------------------------------------------------
function getIncludeName(sequence data)

    -- if the statement is an include statement, return the file name
    integer at

    -- include statement missing?
    if not match("include ", data) then
        return {"","",""}
    end if

    -- trim white space from ends
    data = trim(data)

    sequence includeType
    -- not first statement?
    if equal(data[1..8], "include ") then
        -- remove statement
        includeType = data[1..8]
        data = data[9..length(data)]
    elsif length(data)>15 and equal(data[1..15], "public include ") then
        -- remove statement
        includeType = data[1..15]
        data = data[16..length(data)]
    else
        -- not an include statement
        return {"","",""}
    end if

    sequence nameSpace = ""
    -- remove data after space
    at = find(' ', data)
    if at then
        nameSpace = data[at..$]
        data = data[1..at-1]
    end if
    return {data,nameSpace,includeType}

end function


-----------------------------------------------------------------------------
function includable(sequence name)
    --return not find(name, excludedIncludes)
    name = findFile(name,0)
    return not find(canonical_path(name), excludedIncludes)
end function

-- strips out the leading slash / drive
function convertAbsoluteToRelative(sequence name)
    if absolute_path(name) then
        for i=1 to length(name) do
            if find(name[i], `/\`) then
                return name[i+1..$]
            end if
        end for
    end if
    return name
end function

-----------------------------------------------------------------------------
function parseFile(sequence fName, sequence fromPath = "")

    integer inFile, outFile, comment_start
    sequence newIncludeName, newfName, nameSpace, includeType, includeName
    object data

    comment_start = match("--",fName)
    if comment_start>0 then
        fName = fName[1..comment_start-1]
    end if
    fName = trim(fName)

    included = append(included, fName)

    inFile = -1

    -- find the file
    sequence includeFile = convertAbsoluteToRelative(fName)
    sequence includePath = ""
    for i=length(includeFile) to 1 by -1 do
        if find(includeFile[i], `\/`) then
            includePath = includeFile[1..i]
            exit
        end if
    end for

    if length(fromPath) then
        sequence tryName = findFile(slashifier(fromPath) & fName)
        if file_exists(tryName) then
            includePath = fromPath
            includeFile = slashifier(fromPath) & fName
            fName = includeFile
        end if
    end if

    fName = findFile(fName)
    inFile = open(fName, "r")

    if inFile= -1 then
        printf(1, "Error finding file: '%s'\n", {fName})
        included = remove(included, length(included))
        return includeFile
    end if

    sequence newPath = slashifier(outputDir & includePath)
    if not file_exists(newPath) then
        create_directory(newPath)
    end if

    if verbose then
        puts(1, outputDir & SLASH & includeFile & "\n")
    end if
    outFile = open(outputDir & SLASH & includeFile, "w")

    if outFile= -1 then
        printf(1, "Warning: Unable to open %s for writing\n",
               {outputDir & SLASH & includeFile})
    end if

    while 1 do

        -- read a line
        data = gets(inFile)

        -- end of file?
        if integer(data) then
            exit
        end if

        -- include file?
        includeName = getIncludeName(data)
        includeType = includeName[3]
        nameSpace = includeName[2]
        includeName = includeName[1]
        if length(includeName) and includable(includeName) then

            -- already part of the file?
            newIncludeName = includeName

            if not find(includeName, included) then
                -- include the file
                newIncludeName = parseFile(includeName, includePath)

            elsif absolute_path(includeName) then
                newIncludeName = convertAbsoluteToRelative(includeName)

            end if

            if absolute_path(includeName) and eu:compare(includeName, newIncludeName) then
                integer ix = match(newIncludeName, data)
                if verbose then
                    printf(1, "rewriting include with absolute path: %s", {data})
                end if
                data = replace(data, "include ", 1, ix-1)
            end if

        elsif length(includeName) then
            printf(1, "Error finding include file %s\n", {includeName})
        end if
        if outFile!= -1 then
            puts(outFile, data)
        end if

    end while

    close(inFile)
    if outFile!= -1 then
        close(outFile)
    end if
    return includeFile

end function
--with warning

function getListOfFiles(sequence inDir, integer recursive = 0)
        object s = dir(inDir)
        sequence z = ""
    if atom(s) then
        s = ""
    end if
    for i=1 to length(s) do
        if not find('d', s[i][D_ATTRIBUTES]) then
            --z &= {inDir & SLAH & s[i][D_NAME]}
            z &= {canonical_path(inDir & SLASH & s[i][D_NAME])}
        elsif recursive and not find(s[i][D_NAME], {".",".."}) then
            z &= getListOfFiles(inDir & SLASH & s[i][D_NAME],recursive)
        end if
    end for
    return z
end function

-----------------------------------------------------------------------------
constant cmd_params = {
--                     { "c", "", "config file", { NO_CASE, HAS_PARAMETER, MULTIPLE, "eu.cfg" } },
                       {"", "clear", {NO_CASE}},
                       {"d", 0, "Output dir", {HAS_CASE, HAS_PARAMETER, OPTIONAL, ONCE, "dir"}},
                       {"e", "exclude-file", "Exclude file", {NO_CASE, HAS_PARAMETER, OPTIONAL, MULTIPLE, "filename"}},
                       {"ed", "exclude-directory", "Exclude directory", {NO_CASE, HAS_PARAMETER, OPTIONAL, MULTIPLE, "dir"}},
                       {"edr", "exclude-directory-recursively", "Exclude directory recursively", {NO_CASE, HAS_PARAMETER, OPTIONAL, MULTIPLE, "dir"}},
                       {"i", "include", "include dir", {NO_CASE, HAS_PARAMETER, MULTIPLE, "dir"}},
                       {"v", "verbose", "verbose output", {NO_CASE}},
                       $
                      }

--regex inc_path = regex:new(`^\s*-i (.+)\s*$`, regex:CASELESS)
--procedure read_config(sequence eu_cfg)
--  sequence orig_dir = current_dir()
--  sequence lines = read_lines(eu_cfg)
--  sequence cfg_path = pathname(canonical_path(eu_cfg))
--  chdir(cfg_path)
--  for lx=1 to length(lines) do
--      object m = regex:matches(inc_path, lines[lx])
--      if sequence(m) then
--          Place = append(Place, canonical_path(slashifier(m[2])))
--      end if
--  end for
--
--  chdir(orig_dir)
--end procedure

procedure run()


    puts(1, "Euphoria distribution helper v1.0\n")
    sequence default_dir = current_dir() & SLASH & "eudist"
    sequence start_dir   = current_dir() & SLASH

    -- read the command line
--  map:map params = cmd_parse(cmd_params)
--  object 
--              inFileName    = map:get( params, cmdline:EXTRAS, {} ),
--X             configFiles   = map:get( params, "c", {} ),
--              excludeDirRec = map:get( params, "edr"),
--              excludeDirs   = map:get( params, "ed"),
--              excludeFiles  = map:get( params, "e"),
--              verbose       = map:get( params, "verbose", 0 )
--
--      outputDir = map:get(params, "d")

    if atom(outputDir) then
        outputDir = default_dir

    end if

    if not absolute_path(outputDir) then
        outputDir = start_dir & outputDir
    end if

    outputDir = slashifier(outputDir)

    -- get input file
    if length(inFileName)<1 then
        puts(2, "You must specify at least a single file\n")
        abort(1)
    else
        if eu:compare(pathname(inFileName[1]), current_dir()) then
            chdir(pathname(inFileName[1]))
            inFileName[1] = filename(inFileName[1])
        end if

    end if

    Place &= apply(stringifier(map:get(params, "include")), routine_id("slashifier"))

--  sequence default_config_file = slashifier(pathname(inFileName[1])) & "eu.cfg"
--  if file_exists(default_config_file) then
--      configFiles = prepend(configFiles, default_config_file)
--  end if

--  for i=1 to length(configFiles) do
--      read_config(configFiles[i])
--  end for

    Place &= apply(include_paths(1), routine_id("slashifier"))

    if sequence(EuPlace) then
        Place &= {EuPlace & SLASH, EuPlace & SLASH & "include" & SLASH}
    end if

    if sequence(getenv("EUINC")) then
        Place &= apply(stdseq:split(stringifier(getenv("EUINC")),PATHSEP), routine_id("slashifier"))
    end if
    Place &= {""}

    if sequence(excludeFiles) and length(excludeFiles) then
        for i=1 to length(excludeFiles) do
            excludedIncludes = append(excludedIncludes, canonical_path(excludeFiles[i+1]))
        end for
    end if
    if sequence(excludeDirs) and length(excludeDirs) then
        for i=1 to length(excludeDirs) do
            excludedIncludes &= getListOfFiles(excludeDirs[i+1])
        end for
    end if
    if sequence(excludeDirs) and length(excludeDirs) then
        for i=1 to length(excludeFiles) do
            excludedIncludes &= getListOfFiles(excludeDirRec[i+1],1)
        end for
    end if

    if not file_exists(outputDir) then
        create_directory(outputDir)

    elsif map:get(params, "clear", 0) then
        remove_directory(outputDir, 1)
        create_directory(outputDir)
        if verbose then
            puts(1, "clearing the output directory\n")
        end if

    end if

    printf(1, "Outputting files to directory: %s\n", {outputDir})

    for i=1 to length(inFileName) do
        parseFile(inFileName[i])
    end for

    printf(1, "\n%d files were found.\n", {length(included)})
    if verbose then
        for i=1 to length(included) do
            printf(1, "%s\n", {included[i]})
        end for
    else

    end if
end procedure

run()
*/
