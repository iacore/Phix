--
-- general scratch area
--
include pGUI.e

-- For Edita/Tools/Re-indent source:
--#withtype Ihandle
--#withtype Ihandln
--#withtype cdCanvas

Ihandle dlg, canvas
cdCanvas cd_canvas

constant USE_OPENGL = 01

--
-- define 8 corners equidistant from {0,0,0}:
--
--          6-----2
--      5-----1   3
--      8-----4  
--
-- ie the right face is 1-2-3-4 clockwise, and the left face
--  is 5-6-7-8 counter-clockwise (unless using x-ray vision).
--
enum X, Y, Z
constant l = 100
constant corners = {{+l,+l,+l},
                    {+l,+l,-l},
                    {+l,-l,-l},
                    {+l,-l,+l},
                    {-l,+l,+l},
                    {-l,+l,-l},
                    {-l,-l,-l},
                    {-l,-l,+l}}


constant faces = {{CD_RED,      1,2,3,4},   -- right
                  {CD_YELLOW,   1,5,6,2},   -- top/upper
                  {CD_GREEN,    1,4,8,5},   -- front
                  {CD_BLUE,     2,3,7,6},   -- back
                  {CD_WHITE,    3,4,8,7},   -- btm/down
                  {CD_ORANGE,   5,6,7,8}}   -- left

constant centres = {{ l, 0, 0},
                    { 0, l, 0},
                    { 0, 0, l},
                    { 0, 0,-l},
                    { 0,-l, 0},
                    {-l, 0, 0}}

--
-- For simplicity, we maintain a rotation stack, rather than try and express
-- the camera position in a shorter form such as 3 co-dependant euler angles.
-- If you rotate X by 45 then Y by 45, you get a very different view to doing
-- it the other way round, ie rotate Y by 45 and then X by 45:
--
--                    +
--        +-+        /|\
--       / /\       + + +
--      +-+ +   vs  |/ \|
--      \ \/        +  +
--      +-+         \ /
--                   +
--
-- Obviously, therefore, in an rX rY rX' sequence you cannot just add rX' 
-- to rX; instead keep the full list, and do them all in the same order.
-- The stack is of arbitrary length, extended by keystroke, but since we can
-- easily perform 1.2 million rotations per second that does not bother us.
-- (Obviously if performing an X rotation and rotations[$] is an X, then I
--  will just add/subtract from that, rather than creating another entry.)
--
sequence rotations = {}     -- entries are {axis,degrees}
                            -- where axis is X|Y|Z
                            --   and degrees is 0..360

string pov_sides = "RUFBDL" -- (re-assigned on every re-draw)
--                  YxZzXy  -- (upper=clockwise, lower=anti-clockwise)

constant naxes = {{Y,Z},    -- (rotate about the X-axis)
                  {X,Z},    -- (rotate about the Y-axis)
                  {X,Y}}    -- (rotate about the Z-axis)

function rotate(sequence points, atom angle, integer axis)
--
-- rotate points by the specified angle about the given axis
--   eg when rotating about the X-axis, all X values stay
--   exactly the same, while the other two [Y & Z] change.
--
    atom radians = angle*CD_DEG2RAD,
         sin_t = sin(radians),
         cos_t = cos(radians)
    integer {nx,ny} = naxes[axis] -- (the 2 of XYZ != axis)
    for i=1 to length(points) do
        atom x = points[i][nx],
             y = points[i][ny]
        points[i][nx] = x * cos_t - y * sin_t
        points[i][ny] = y * cos_t + x * sin_t
    end for
    return points
end function

--procedure test_speed()
--atom t0 = time()
--sequence points = corners
--  for i=1 to 400000 do
--      points = rotate(points,rxyz[X],X)
--      points = rotate(points,rxyz[Y],Y)
--      points = rotate(points,rxyz[Z],Z)
--  end for
--  ?time()-t0
--end procedure
--test_speed()

function projection(sequence points, atom d)
--
-- project points from {0,0,d} onto the perpendicular plane through {0,0,0}
--
    for i=1 to length(points) do
        atom {x,y,z} = points[i],
             denom = (1-z/d)
        points[i][X] = x/denom
        points[i][Y] = y/denom
    end for
    return points
end function

--/*
function nearest(sequence points, integer axis=Z, integer d=+1)
--
-- return the index of the furthest point from {0,0,0}
--  (as viewed in the rotated/perspective adjusted model,
--   ie the highest/lowest value in the specified axis)
--
--  nearest(points,Z,1) yields max z value (nearest),
--  nearest(points,Z,-1) should always be hidden,
--  nearest(points,X,1) yeilds rightmost point,
--  nearest(points,X,-1) yeilds leftmost point,
--  nearest(points,Y,1) yeilds topmost point,
--  nearest(points,Y,-1) yeilds lowest point.
--   (all from the camera's point of view)
--
--  some ambiguity is to be expected when the camera is
--   edge-on, eg top/right might be one and the same.
--   (if necessary, constrain all angles to be odd)
--   (or, grey out rotate controls at some angles)
--
    integer np = 1
    atom maxv = points[1][axis]
    for i=2 to length(points) do
        atom pix = points[i][axis]
        if compare(pix,maxv)=d then
            maxv = pix
            np = i
        end if
    end for
    return np
end function
--*/
function nearest(sequence points)
--
-- return the index of the max Z value (as 
--  rotated to make the camera be {0,0,d}).
--
    integer np = 1
    atom maxz = points[1][Z]
    for i=2 to length(points) do
        atom piz = points[i][Z]
        if piz>maxz then
            maxz = piz
            np = i
        end if
    end for
    return np
end function

procedure vertices(integer wx, wh, sequence points, face)
-- (common code for line/fill drawing)
    for i=2 to length(face) do
        integer fi = face[i]
        cdCanvasVertex(cd_canvas,wx+points[fi][X],wh+points[fi][Y])
    end for
end procedure

procedure draw_cube(integer wx, wh)
sequence points, cpoints
integer axis
atom angle

    points = corners
    for i=1 to length(rotations) do
        {axis, angle} = rotations[i]
        points = rotate(points,angle,axis)
    end for
    points = projection(points,1000)
    --
    -- find the three faces that contain the nearest point
    --
    integer np = nearest(points), 
            front, up, left, diag
    sequence faceset = {}
    for i=1 to length(faces) do
        sequence fi = faces[i]
        integer k = find(np,fi)
        if k then
            diag = mod(k,4)+2
            diag = fi[diag]
            faceset = append(faceset,{points[diag][Z],i,diag})
        end if
    end for
    if length(faceset)!=3 then ?9/0 end if
    --
    -- order by/draw them furthest (diag) away first.
    --
    faceset = sort(faceset)
    --
    -- label them with F/B/U/D/L/R appropriately.
    -- look at the diagonal on the front to decide which other two sides are
    -- being drawn (one or even two of which may be completely obscured by 
    -- nearer faces, from some angles).
    --
    {front,diag} = faceset[3][2..3]     -- deciding the front is easy!
    pov_sides[front] = 'F'
    pov_sides[7-front] = 'B'
    if points[np][Y]>points[diag][Y] then   -- top(up) must be showing
        if points[np][X]>points[diag][X] then
            -- right must be showing (faceset[1..2] is TR or RT)
            if points[faceset[1][3]][Y]>points[faceset[2][3]][Y] then
                up = faceset[1][2]
                left = 7-faceset[2][2]
            else
                left = 7-faceset[1][2]
                up = faceset[2][2]
            end if
        else
            -- left must be showing (faceset[1..2] is LT or TL)
            if points[faceset[1][3]][Y]>points[faceset[2][3]][Y] then
                up = faceset[1][2]
                left = faceset[2][2]
            else
                left = faceset[1][2]
                up = faceset[2][2]
            end if
        end if
    else                                    -- down must be showing
        if points[np][X]<points[diag][X] then
            -- left must be showing (faceset[1..2] is LD or DL)
            if points[faceset[1][3]][Y]<points[faceset[2][3]][Y] then
                up = 7-faceset[1][2]
                left = faceset[2][2]
            else
                left = faceset[1][2]
                up = 7-faceset[2][2]
            end if
        else
            -- right must be showing (faceset[1..2] is RD or DR)
            if points[faceset[1][3]][Y]<points[faceset[2][3]][Y] then
                up = 7-faceset[1][2]
                left = 7-faceset[2][2]
            else
                left = 7-faceset[1][2]
                up = 7-faceset[2][2]
            end if
        end if
    end if
    pov_sides[up] = 'U'
    pov_sides[7-up] = 'D'
    pov_sides[left] = 'L'
    pov_sides[7-left] = 'R'
    --
    -- and work out the centre positions properly:
    --
    cpoints = centres
    for i=1 to length(rotations) do
        {axis, angle} = rotations[i]
        cpoints = rotate(cpoints,angle,axis)
    end for
    cpoints = projection(cpoints,1000)
--IupSetStrAttribute(dlg,"TITLE","Draw a Rotating Cube (%s)",{pov_sides})

    for i=1 to length(faceset) do
        integer fdx = faceset[i][2]
        sequence fi = faces[fdx]
        cdCanvasSetForeground(cd_canvas,fi[1])
        -- draw edges (anti-aliased)
        cdCanvasBegin(cd_canvas,CD_CLOSED_LINES)
        vertices(wx,wh,points,fi)
        cdCanvasEnd(cd_canvas)
        -- fill sides (else would get bresenham edges)
        cdCanvasBegin(cd_canvas,CD_FILL)
        vertices(wx,wh,points,fi)
        cdCanvasEnd(cd_canvas)
        -- and draw F/U/R/L/D in the centres
        cdCanvasSetForeground(cd_canvas,CD_BLACK)
        atom mx = wx+cpoints[fdx][X],
             my = wh+cpoints[fdx][Y]
        cdCanvasText(cd_canvas, mx, my, pov_sides[fdx..fdx]) 
    end for
end procedure

function canvas_action_cb(Ihandle canvas)
--  if USE_OPENGL then
--      IupGLMakeCurrent(canvas)    -- (no diff?)
--  end if
    cdCanvasActivate(cd_canvas)
    cdCanvasClear(cd_canvas)
    integer {wx, wh} = sq_floor_div(IupGetIntInt(canvas, "DRAWSIZE"),2)
    draw_cube(wx,wh)
    cdCanvasFlush(cd_canvas)
--  if USE_OPENGL then
--      IupGLSwapBuffers(canvas)    -- (no diff?)
--  end if
    return IUP_DEFAULT
end function

function canvas_map_cb(Ihandle canvas)
    if USE_OPENGL then
        atom res = IupGetDouble(NULL, "SCREENDPI")/25.4
        IupGLMakeCurrent(canvas)    -- *** BIG DIFFERENCE! ***
        cd_canvas = cdCreateCanvas(CD_GL, "10x10 %g", {res})
    else
        cd_canvas = cdCreateCanvas(CD_IUPDBUFFER, canvas)
    end if
    cdCanvasSetBackground(cd_canvas, CD_PARCHMENT)
--  cdCanvasSetBackground(cd_canvas, CD_BLACK)
--  cdCanvasSetForeground(cd_canvas, CD_BLUE)
    {} = cdCanvasTextAlignment(cd_canvas, CD_CENTER) 
    return IUP_DEFAULT
end function

function canvas_unmap_cb(Ihandle canvas)
    cdKillCanvas(cd_canvas)
    return IUP_DEFAULT
end function

function canvas_resize_cb(Ihandle /*canvas*/)
    if USE_OPENGL then
        integer {canvas_width, canvas_height} = IupGetIntInt(canvas, "DRAWSIZE")
        atom res = IupGetDouble(NULL, "SCREENDPI")/25.4
--      IupGLMakeCurrent(canvas)    -- (no diff?)
        cdCanvasSetAttribute(cd_canvas, "SIZE", "%dx%d %g", {canvas_width, canvas_height, res})
    end if
    return IUP_DEFAULT
end function

function esc_close(Ihandle /*ih*/, atom c)
integer fdx, d
    if c=K_ESC then return IUP_CLOSE end if
    fdx = find(c,{K_DOWN,K_LEFT,'-','+',K_RIGHT,K_UP})
    if fdx then
        d = 1
        if fdx>3 then
            d = 359
            fdx = 7-fdx
        end if
        if length(rotations) 
        and rotations[$][1] = fdx then
            rotations[$][2] = mod(rotations[$][2]+d,360)
        else
            rotations = append(rotations,{fdx,d})
        end if  
        IupRedraw(canvas)
    end if      
    return IUP_CONTINUE
end function

--function timer_cb(Ihandle /*ih*/)
--? ry = mod(ry+359,360)
--  IupRedraw(canvas)
--  return IUP_IGNORE
--end function

procedure main()
    IupOpen()
    IupImageLibOpen()
--  if USE_OPENGL then
--      IupGLCanvasOpen()   -- (no diff)
--  end if
    if USE_OPENGL then
        canvas = IupGLCanvas()
--      IupSetAttribute(canvas, "BUFFER", "DOUBLE") -- (no diff?)
    else
        canvas = IupCanvas()
    end if
    IupSetAttribute(canvas, "RASTERSIZE", "640x480")
    IupSetCallback(canvas, "ACTION", Icallback("canvas_action_cb"))
    IupSetCallback(canvas, "MAP_CB", Icallback("canvas_map_cb"))
    IupSetCallback(canvas, "UNMAP_CB", Icallback("canvas_unmap_cb"))
    IupSetCallback(canvas, "RESIZE_CB", Icallback("canvas_resize_cb"))
    dlg = IupDialog(IupVbox({canvas}))
    IupSetAttribute(dlg,"TITLE","Draw a Rotating Cube")
    IupSetCallback(dlg, "K_ANY",  Icallback("esc_close"))
    IupShow(dlg)
    IupSetAttribute(canvas, "RASTERSIZE", NULL)
--  Ihandle hTimer = IupTimer(Icallback("timer_cb"), 40)
    IupMainLoop()
    IupClose()
end procedure

main()

