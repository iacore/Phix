include iup.e


/********************************** Utilities *****************************************/

--DEV:
function get_file_name(sequence path)
    for i=length(path) to 1 by -1 do
        if find(path[i],"\\/") then
            path = path[i+1..$]
            exit
        end if
    end for
    return path
end function

--/**/include builtins/write_file.e
--/**/include builtins/read_file.e

--#withtype Ihandle

procedure new_file(Ihandle ih)
Ihandle dlg = IupGetDialog(ih);
Ihandle multitext = IupGetDialogChild(dlg, "MULTITEXT");

    IupSetAttribute(dlg, "TITLE", "Untitled - Simple Notepad");
    IupSetAttribute(multitext, "FILENAME", NULL);
    IupSetAttribute(multitext, "DIRTY", "NO");
    IupSetAttribute(multitext, "VALUE", "");
end procedure

procedure open_file(Ihandle ih, string filename)
object str = read_file(filename);
    if sequence(str) then
        Ihandle dlg = IupGetDialog(ih);
        Ihandle multitext = IupGetDialogChild(dlg, "MULTITEXT");
--      Ihandle config = IupGetAttribute(multitext, "CONFIG");
        Ihandle config = IupGetInt(multitext, "CONFIG");

        IupSetAttributef(dlg, "TITLE", "%s - Simple Notepad", {get_file_name(filename)});
        IupSetStrAttribute(multitext, "FILENAME", filename);
        IupSetAttribute(multitext, "DIRTY", "NO");
        IupSetStrAttribute(multitext, "VALUE", str);

--      IupConfigRecentUpdate(config, filename);
    end if
end procedure

procedure save_file(Ihandle multitext)
string filename = IupGetAttribute(multitext, "FILENAME");
string str = IupGetAttribute(multitext, "VALUE");
--integer count = IupGetInt(multitext, "COUNT");
    if write_file(filename, str, TEXT_MODE) then
        IupSetAttribute(multitext, "DIRTY", "NO");
    end if
end procedure

procedure saveas_file(Ihandle multitext, string filename)
string str = IupGetAttribute(multitext, "VALUE");
--  integer count = IupGetInt(multitext, "COUNT");
    if write_file(filename, str, TEXT_MODE) then
--      Ihandle config = IupGetAttribute(multitext, "CONFIG");
        Ihandle config = IupGetInt(multitext, "CONFIG");

        IupSetAttributef(IupGetDialog(multitext), "TITLE", "%s - Simple Notepad", {get_file_name(filename)});
        IupSetStrAttribute(multitext, "FILENAME", filename);
        IupSetAttribute(multitext, "DIRTY", "NO");

--      IupConfigRecentUpdate(config, filename);
    end if
end procedure

--with trace
function save_check(Ihandle ih)
Ihandle multitext = IupGetDialogChild(ih, "MULTITEXT");
--DEV..
--  if IupGetInt(multitext, "DIRTY")="YES" then
--trace(1)
--  object dbg = IupGetInt(multitext, "DIRTY")
    if IupGetInt(multitext, "DIRTY") then
        switch (IupAlarm("Warning", "File not saved! Save it now?", "Yes", "No", "Cancel"))
            case 1:  /* save the changes and continue */
                save_file(multitext);
      break;
            case 2:  /* ignore the changes and continue */
      break;
            case 3:  /* cancel */
                return 0;
        end switch
    end if
    return 1;
end function

procedure toggle_bar_visibility(Ihandle item, Ihandle ih)
    if IupGetInt(item, "VALUE") then
        IupSetAttribute(ih, "FLOATING", "YES");
        IupSetAttribute(ih, "VISIBLE", "NO");
        IupSetAttribute(item, "VALUE", "OFF");
    else
        IupSetAttribute(ih, "FLOATING", "NO");
        IupSetAttribute(ih, "VISIBLE", "YES");
        IupSetAttribute(item, "VALUE", "ON");
    end if

    IupRefresh(ih);  /* refresh the dialog layout */
end procedure

procedure set_find_replace_visibility(Ihandle find_dlg, integer show_replace)
Ihandle replace_txt = IupGetDialogChild(find_dlg, "REPLACE_TEXT");
Ihandle replace_lbl = IupGetDialogChild(find_dlg, "REPLACE_LABEL");
Ihandle replace_bt = IupGetDialogChild(find_dlg, "REPLACE_BUTTON");

    if show_replace then
        IupSetAttribute(replace_txt, "VISIBLE", "Yes");
        IupSetAttribute(replace_lbl, "VISIBLE", "Yes");
        IupSetAttribute(replace_bt, "VISIBLE", "Yes");
        IupSetAttribute(replace_txt, "FLOATING", "No");
        IupSetAttribute(replace_lbl, "FLOATING", "No");
        IupSetAttribute(replace_bt, "FLOATING", "No");

        IupSetAttribute(find_dlg, "TITLE", "Replace");
    else
        IupSetAttribute(replace_txt, "FLOATING", "Yes");
        IupSetAttribute(replace_lbl, "FLOATING", "Yes");
        IupSetAttribute(replace_bt, "FLOATING", "Yes");
        IupSetAttribute(replace_txt, "VISIBLE", "No");
        IupSetAttribute(replace_lbl, "VISIBLE", "No");
        IupSetAttribute(replace_bt, "VISIBLE", "No");

        IupSetAttribute(find_dlg, "TITLE", "Find");
    end if

    IupSetAttribute(find_dlg, "SIZE", NULL);    /* force a dialog resize on the IupRefresh */
    IupRefresh(find_dlg);
end procedure


/********************************** Callbacks *****************************************/


function dropfiles_cb(Ihandle ih, atom filename)
    if save_check(ih) then
        open_file(ih, peek_string(filename));
        return IUP_DEFAULT;
    end if
end function

function multitext_valuechanged_cb(Ihandle multitext)
    IupSetAttribute(multitext, "DIRTY", "YES");
    return IUP_DEFAULT;
end function

function file_menu_open_cb(Ihandle ih)
Ihandle item_revert = IupGetDialogChild(ih, "ITEM_REVERT");
Ihandle item_save = IupGetDialogChild(ih, "ITEM_SAVE");
Ihandle multitext = IupGetDialogChild(ih, "MULTITEXT");
object filename = IupGetAttribute(multitext, "FILENAME");
--  ?filename
    integer dirty = IupGetInt(multitext, "DIRTY");

    if dirty then
        IupSetAttribute(item_save, "ACTIVE", "YES");
    else
        IupSetAttribute(item_save, "ACTIVE", "NO");
    end if
--  if dirty and filename then
    if dirty and sequence(filename) and length(filename)!=0 then
        IupSetAttribute(item_revert, "ACTIVE", "YES");
    else
        IupSetAttribute(item_revert, "ACTIVE", "NO");
    end if
    return IUP_DEFAULT;
end function

function edit_menu_open_cb(Ihandle ih)
Ihandle clipboard = IupClipboard();
--Ihandle find_dlg = IupGetAttribute(ih, "FIND_DIALOG");
Ihandle find_dlg = IupGetInt(ih, "FIND_DIALOG");

Ihandle item_paste = IupGetDialogChild(ih, "ITEM_PASTE");
Ihandle item_cut = IupGetDialogChild(ih, "ITEM_CUT");
Ihandle item_delete = IupGetDialogChild(ih, "ITEM_DELETE");
Ihandle item_copy = IupGetDialogChild(ih, "ITEM_COPY");
Ihandle item_find_next = IupGetDialogChild(ih, "ITEM_FINDNEXT");
Ihandle multitext = IupGetDialogChild(ih, "MULTITEXT");

    if not IupGetInt(clipboard, "TEXTAVAILABLE") then
        IupSetAttribute(item_paste, "ACTIVE", "NO");
    else
        IupSetAttribute(item_paste, "ACTIVE", "YES");
    end if
    if length(IupGetAttribute(multitext, "SELECTEDTEXT"))=0 then
        IupSetAttribute(item_cut, "ACTIVE", "NO");
        IupSetAttribute(item_delete, "ACTIVE", "NO");
        IupSetAttribute(item_copy, "ACTIVE", "NO");
    else
        IupSetAttribute(item_cut, "ACTIVE", "YES");
        IupSetAttribute(item_delete, "ACTIVE", "YES");
        IupSetAttribute(item_copy, "ACTIVE", "YES");
    end if

    if find_dlg!=0 then
        Ihandle txt = IupGetDialogChild(find_dlg, "FIND_TEXT");
        string str_to_find = IupGetAttribute(txt, "VALUE");

        if length(str_to_find)==0 then
            IupSetAttribute(item_find_next, "ACTIVE", "NO");
        else
            IupSetAttribute(item_find_next, "ACTIVE", "Yes");
        end if
    else
        IupSetAttribute(item_find_next, "ACTIVE", "NO");
    end if

    IupDestroy(clipboard);
    return IUP_DEFAULT;
end function

--/* (no IupConfig...)
function config_recent_cb(Ihandle ih)
    if save_check(ih) then
        string filename = IupGetAttribute(ih, "TITLE");
        open_file(ih, filename);
    end if
    return IUP_DEFAULT;
end function
--*/

function multitext_caret_cb(Ihandle ih, integer line, integer col)
Ihandle lbl_statusbar = IupGetDialogChild(ih, "STATUSBAR");
    IupSetAttributef(lbl_statusbar, "TITLE", "Line %d, Col %d", {line, col});
    return IUP_DEFAULT;
end function

function item_new_action_cb(Ihandle item_new)
    if save_check(item_new) then
        new_file(item_new);
    end if
    return IUP_DEFAULT;
end function

function item_open_action_cb(Ihandle item_open)
Ihandle filedlg;
Ihandle config;
--string d

    if save_check(item_open) then
--      config = IupGetAttribute(item_open, "CONFIG");
        config = IupGetInt(item_open, "CONFIG");
--      d = IupConfigGetVariableStr(config, "MainWindow", "LastDirectory");

        filedlg = IupFileDlg();
        IupSetAttribute(filedlg, "DIALOGTYPE", "OPEN");
        IupSetAttribute(filedlg, "EXTFILTER", "Text Files|*.txt|All Files|*.*|");
        IupSetAttributeHandle(filedlg, "PARENTDIALOG", IupGetDialog(item_open));
--      IupSetStrAttribute(filedlg, "DIRECTORY", d);

        {} = IupPopup(filedlg, IUP_CENTERPARENT, IUP_CENTERPARENT);
        if IupGetInt(filedlg, "STATUS")!= -1 then
            string filename = IupGetAttribute(filedlg, "VALUE");
            open_file(item_open, filename);

--          d = IupGetAttribute(filedlg, "DIRECTORY");
--          IupConfigSetVariableStr(config, "MainWindow", "LastDirectory", d);
        end if

        IupDestroy(filedlg);
    end if
    return IUP_DEFAULT;
end function

function item_saveas_action_cb(Ihandle item_saveas)
Ihandle multitext = IupGetDialogChild(item_saveas, "MULTITEXT");
--Ihandle config = IupGetAttribute(multitext, "CONFIG");
Ihandle config = IupGetInt(multitext, "CONFIG");
--string d = IupConfigGetVariableStr(config, "MainWindow", "LastDirectory");
Ihandle filedlg = IupFileDlg();
    IupSetAttribute(filedlg, "DIALOGTYPE", "SAVE");
    IupSetAttribute(filedlg, "EXTFILTER", "Text Files|*.txt|All Files|*.*|");
    IupSetAttributeHandle(filedlg, "PARENTDIALOG", IupGetDialog(item_saveas));
    IupSetStrAttribute(filedlg, "FILE", IupGetAttribute(multitext, "FILENAME"));
--  IupSetStrAttribute(filedlg, "DIRECTORY", d);

    {} = IupPopup(filedlg, IUP_CENTERPARENT, IUP_CENTERPARENT);

    if IupGetInt(filedlg, "STATUS")!= -1 then
        string filename = IupGetAttribute(filedlg, "VALUE");
        saveas_file(multitext, filename);

--      d = IupGetAttribute(filedlg, "DIRECTORY");
--      IupConfigSetVariableStr(config, "MainWindow", "LastDirectory", d);
    end if

    IupDestroy(filedlg);
    return IUP_DEFAULT;
end function

function item_save_action_cb(Ihandle item_save)
Ihandle multitext = IupGetDialogChild(item_save, "MULTITEXT");
object filename = IupGetAttribute(multitext, "FILENAME");
    if not sequence(filename) or length(filename)=0 then
        {} = item_saveas_action_cb(item_save);
    else
        /* test again because in can be called using the hot key */
        integer dirty = IupGetInt(multitext, "DIRTY");
        if dirty then
            save_file(multitext);
        end if
    end if
    return IUP_DEFAULT;
end function

function item_revert_action_cb(Ihandle item_revert)
Ihandle multitext = IupGetDialogChild(item_revert, "MULTITEXT");
string filename = IupGetAttribute(multitext, "FILENAME");
    open_file(item_revert, filename);
    return IUP_DEFAULT;
end function

function item_exit_action_cb(Ihandle item_exit)
Ihandle dlg = IupGetDialog(item_exit);
--Ihandle config = IupGetAttribute(dlg, "CONFIG");
Ihandle config = IupGetInt(dlg, "CONFIG");

    if not save_check(item_exit) then
        return IUP_IGNORE;  /* to abort the CLOSE_CB callback */
    end if
--  IupConfigDialogClosed(config, dlg, "MainWindow");
--  {} = IupConfigSave(config);
    IupDestroy(config);
    return IUP_CLOSE;
end function

function goto_ok_action_cb(Ihandle bt_ok)
integer line_count = IupGetInt(bt_ok, "TEXT_LINECOUNT");
Ihandle txt = IupGetDialogChild(bt_ok, "LINE_TEXT");
integer line = IupGetInt(txt, "VALUE");
--erm:
    if line<1 or line>=line_count then
        IupMessage("Error", "Invalid line number.");
        return IUP_DEFAULT;
    end if

    IupSetAttribute(IupGetDialog(bt_ok), "STATUS", "1");
    return IUP_CLOSE;
end function

function goto_cancel_action_cb(Ihandle bt_ok)
    IupSetAttribute(IupGetDialog(bt_ok), "STATUS", "0");
    return IUP_CLOSE;
end function

function item_goto_action_cb(Ihandle item_goto)
Ihandle multitext = IupGetDialogChild(item_goto, "MULTITEXT");
Ihandle goto_dlg, box, bt_ok, bt_cancel, txt, lbl;
integer line_count = IupGetInt(multitext, "LINECOUNT");

    lbl = IupLabel("");
    IupSetAttributef(lbl, "TITLE", "Line Number [1-%d]:", {line_count});
    txt = IupText();
    IupSetAttribute(txt, "MASK", IUP_MASK_UINT);    /* unsigned integer numbers only */
    IupSetAttribute(txt, "NAME", "LINE_TEXT");
    IupSetAttribute(txt, "VISIBLECOLUMNS", "20");
    bt_ok = IupButton("OK");
    IupSetAttribute(bt_ok, "TEXT_LINECOUNT", line_count);
    IupSetAttribute(bt_ok, "PADDING", "10x2");
    IupSetCallback(bt_ok, "ACTION", routine_id("goto_ok_action_cb"));
    bt_cancel = IupButton("Cancel");
    IupSetCallback(bt_cancel, "ACTION", routine_id("goto_cancel_action_cb"));
    IupSetAttribute(bt_cancel, "PADDING", "10x2");

    box = IupVboxv({
                    lbl,
                    txt,
                    IupSetAttributesf(IupHboxv({
                                                IupFill(),
                                                bt_ok,
                                                bt_cancel,
                                                NULL}), "NORMALIZESIZE=HORIZONTAL"),
                    NULL});
    IupSetAttribute(box, "MARGIN", "10x10");
    IupSetAttribute(box, "GAP", "5");

    goto_dlg = IupDialog(box);
    IupSetAttribute(goto_dlg, "TITLE", "Go To Line");
    IupSetAttribute(goto_dlg, "DIALOGFRAME", "Yes");
    IupSetAttributeHandle(goto_dlg, "DEFAULTENTER", bt_ok);
    IupSetAttributeHandle(goto_dlg, "DEFAULTESC", bt_cancel);
    IupSetAttributeHandle(goto_dlg, "PARENTDIALOG", IupGetDialog(item_goto));

    {} = IupPopup(goto_dlg, IUP_CENTERPARENT, IUP_CENTERPARENT);

    if IupGetInt(goto_dlg, "STATUS")==1 then
        integer line = IupGetInt(txt, "VALUE");
        integer pos;
        pos = IupTextConvertLinColToPos(multitext, line, 0);
        IupSetAttribute(multitext, "CARETPOS", pos);
        IupSetAttribute(multitext, "SCROLLTOPOS", pos);
    end if

    IupDestroy(goto_dlg);

    return IUP_DEFAULT;
end function

function find_next_action_cb(Ihandle ih)
  /* this callback can be called from the main dialog also */
--Ihandle find_dlg = IupGetAttribute(ih, "FIND_DIALOG");
Ihandle find_dlg = IupGetInt(ih, "FIND_DIALOG");
    if find_dlg!=NULL then
        string str;
        integer pos;
--      Ihandle multitext = IupGetAttribute(find_dlg, "MULTITEXT");
        Ihandle multitext = IupGetInt(find_dlg, "MULTITEXT");
        integer find_pos = IupGetInt(multitext, "FIND_POS");

        Ihandle txt = IupGetDialogChild(find_dlg, "FIND_TEXT");
        string str_to_find = IupGetAttribute(txt, "VALUE");

        Ihandle find_case = IupGetDialogChild(find_dlg, "FIND_CASE");
        integer casesensitive = IupGetInt(find_case, "VALUE");

    /* test again, because it can be called from the hot key */
--  if (!str_to_find || str_to_find[0] == 0)
        if length(str_to_find)=0 then
            return IUP_DEFAULT;
        end if

        if find_pos== -1 then
            find_pos = 1
        end if
        str = IupGetAttribute(multitext, "VALUE");

--  pos = str_find(str + find_pos, str_to_find, casesensitive);
        pos = match(str_to_find, str, find_pos, casesensitive)
        if pos>=0 then
            pos += find_pos;
        elsif find_pos>0 then
--    pos = str_find(str, str_to_find, casesensitive);  /* try again from the start */
            pos = match(str_to_find, str, 1, casesensitive) /* try again from the start */
        end if
        if pos>=1 then
            integer line, col,
            end_pos = pos+length(str_to_find);

            IupSetAttribute(multitext, "FIND_POS", end_pos);

            {} = IupSetFocus(multitext);
            IupSetAttributef(multitext, "SELECTIONPOS", "%d:%d", {pos, end_pos});
            IupSetAttributef(multitext, "FIND_SELECTION", "%d:%d", {pos, end_pos});

            {line,col} = IupTextConvertPosToLinCol(multitext, pos);
            pos = IupTextConvertLinColToPos(multitext, line, 0);  /* position at col=0, just scroll lines */
            IupSetAttribute(multitext, "SCROLLTOPOS", pos);
        else
            IupSetAttribute(multitext, "FIND_POS", -1);
            IupMessage("Warning", "Text not found.");
        end if
    end if

    return IUP_DEFAULT;
end function

function find_replace_action_cb(Ihandle bt_replace)
--Ihandle find_dlg = IupGetAttribute(bt_replace, "FIND_DIALOG");
Ihandle find_dlg = IupGetInt(bt_replace, "FIND_DIALOG");
--Ihandle multitext = IupGetAttribute(find_dlg, "MULTITEXT");
Ihandle multitext = IupGetInt(find_dlg, "MULTITEXT");
integer find_pos = IupGetInt(multitext, "FIND_POS");
string selectionpos = IupGetAttribute(multitext, "SELECTIONPOS");
string find_selection = IupGetAttribute(multitext, "FIND_SELECTION");

    if find_pos== -1
    or selectionpos!=find_selection then
        {} = find_next_action_cb(bt_replace);
    else
        Ihandle replace_txt = IupGetDialogChild(find_dlg, "REPLACE_TEXT");
        string str_to_replace = IupGetAttribute(replace_txt, "VALUE");
        IupSetAttribute(multitext, "SELECTEDTEXT", str_to_replace);

        /* then find next */
        {} = find_next_action_cb(bt_replace);
    end if

    return IUP_DEFAULT;
end function

function find_close_action_cb(Ihandle bt_close)
Ihandle find_dlg = IupGetDialog(bt_close);
--Ihandle multitext = IupGetAttribute(find_dlg, "MULTITEXT");
Ihandle multitext = IupGetInt(find_dlg, "MULTITEXT");
--Ihandle config = IupGetAttribute(multitext, "CONFIG");
Ihandle config = IupGetInt(multitext, "CONFIG");
--  IupConfigDialogClosed(config, find_dlg, "FindDialog");
    {} = IupHide(find_dlg); /* do not destroy, just hide */
    return IUP_DEFAULT;
end function

function create_find_dialog(Ihandle multitext)
Ihandle box, bt_next, bt_close, txt, find_case, find_dlg;
Ihandle txt_replace, bt_replace;

    txt = IupText();
    IupSetAttribute(txt, "NAME", "FIND_TEXT");
    IupSetAttribute(txt, "VISIBLECOLUMNS", "20");
    txt_replace = IupText();
    IupSetAttribute(txt_replace, "NAME", "REPLACE_TEXT");
    IupSetAttribute(txt_replace, "VISIBLECOLUMNS", "20");
    find_case = IupToggle("Case Sensitive");
    IupSetAttribute(find_case, "NAME", "FIND_CASE");
    bt_next = IupButton("Find Next");
    IupSetAttribute(bt_next, "PADDING", "10x2");
    IupSetCallback(bt_next, "ACTION", routine_id("find_next_action_cb"));
    bt_replace = IupButton("Replace");
    IupSetAttribute(bt_replace, "PADDING", "10x2");
    IupSetCallback(bt_replace, "ACTION", routine_id("find_replace_action_cb"));
    IupSetAttribute(bt_replace, "NAME", "REPLACE_BUTTON");
    bt_close = IupButton("Close");
    IupSetCallback(bt_close, "ACTION", routine_id("find_close_action_cb"));
    IupSetAttribute(bt_close, "PADDING", "10x2");

    box = IupVboxv({
                    IupLabel("Find What:"),
                    txt,
                    IupSetAttributesf(IupLabel("Replace with:"), "NAME=REPLACE_LABEL"),
                    txt_replace,
                    find_case,
                    IupSetAttributesf(IupHboxv({
                                                IupFill(),
                                                bt_next,
                                                bt_replace,
                                                bt_close,
                                                NULL}), "NORMALIZESIZE=HORIZONTAL"),
                    NULL});
    IupSetAttribute(box, "MARGIN", "10x10");
    IupSetAttribute(box, "GAP", "5");

    find_dlg = IupDialog(box);
    IupSetAttribute(find_dlg, "TITLE", "Find");
    IupSetAttribute(find_dlg, "DIALOGFRAME", "Yes");
    IupSetAttributeHandle(find_dlg, "DEFAULTENTER", bt_next);
    IupSetAttributeHandle(find_dlg, "DEFAULTESC", bt_close);
    IupSetAttributeHandle(find_dlg, "PARENTDIALOG", IupGetDialog(multitext));
    IupSetCallback(find_dlg, "CLOSE_CB", routine_id("find_close_action_cb"));

  /* Save the multiline to access it from the callbacks */
    IupSetAttribute(find_dlg, "MULTITEXT", multitext);

  /* Save the dialog to reuse it */
    IupSetAttribute(find_dlg, "FIND_DIALOG", find_dlg);  /* from itself */
    IupSetAttribute(IupGetDialog(multitext), "FIND_DIALOG", find_dlg); /* from the main dialog */

    return find_dlg;
end function

function item_find_action_cb(Ihandle item_find)
--Ihandle find_dlg = IupGetAttribute(item_find, "FIND_DIALOG");
Ihandle find_dlg = IupGetInt(item_find, "FIND_DIALOG");
Ihandle multitext = IupGetDialogChild(item_find, "MULTITEXT");
--Ihandle config = IupGetAttribute(multitext, "CONFIG");
Ihandle config = IupGetInt(multitext, "CONFIG");
string str;

    if find_dlg=NULL then
        find_dlg = create_find_dialog(multitext);
    end if

    set_find_replace_visibility(find_dlg, 0);

--  IupConfigDialogShow(config, find_dlg, "FindDialog");
{} = IupShow(find_dlg)

    str = IupGetAttribute(multitext, "SELECTEDTEXT");
    if length(str)!=0 then
        Ihandle txt = IupGetDialogChild(find_dlg, "FIND_TEXT");
        IupSetStrAttribute(txt, "VALUE", str);
    end if

    return IUP_DEFAULT;
end function

function item_replace_action_cb(Ihandle item_replace)
--Ihandle find_dlg = IupGetAttribute(item_replace, "FIND_DIALOG");
Ihandle find_dlg = IupGetInt(item_replace, "FIND_DIALOG");
Ihandle multitext = IupGetDialogChild(item_replace, "MULTITEXT");
--Ihandle config = IupGetAttribute(multitext, "CONFIG");
Ihandle config = IupGetInt(multitext, "CONFIG");
string str;

    if find_dlg=NULL then
        find_dlg = create_find_dialog(multitext);
    end if

    set_find_replace_visibility(find_dlg, 1);

--  IupConfigDialogShow(config, find_dlg, "FindDialog");
{} = IupShow(find_dlg)

    str = IupGetAttribute(multitext, "SELECTEDTEXT");
    if length(str)!=0 then
        Ihandle txt = IupGetDialogChild(find_dlg, "FIND_TEXT");
        IupSetStrAttribute(txt, "VALUE", str);
    end if

    return IUP_IGNORE;  /* replace system processing for the hot key */
end function

function selection_find_next_action_cb(Ihandle ih)
Ihandle multitext = IupGetDialogChild(ih, "MULTITEXT");

string str = IupGetAttribute(multitext, "SELECTEDTEXT");
    if length(str)!=0 then
        Ihandle txt;
--      Ihandle find_dlg = IupGetAttribute(ih, "FIND_DIALOG");
        Ihandle find_dlg = IupGetInt(ih, "FIND_DIALOG");

        if find_dlg=NULL then
            find_dlg = create_find_dialog(multitext);
        end if

        txt = IupGetDialogChild(find_dlg, "FIND_TEXT");
        IupSetStrAttribute(txt, "VALUE", str);

        {} = find_next_action_cb(ih);
    end if

    return IUP_DEFAULT;
end function

function item_copy_action_cb(Ihandle item_copy)
Ihandle multitext = IupGetDialogChild(item_copy, "MULTITEXT");
Ihandle clipboard = IupClipboard();
    IupSetAttribute(clipboard, "TEXT", IupGetAttribute(multitext, "SELECTEDTEXT"));
    IupDestroy(clipboard);
    return IUP_DEFAULT;
end function

function item_paste_action_cb(Ihandle item_paste)
Ihandle multitext = IupGetDialogChild(item_paste, "MULTITEXT");
Ihandle clipboard = IupClipboard();
    IupSetAttribute(multitext, "INSERT", IupGetAttribute(clipboard, "TEXT"));
    IupDestroy(clipboard);
    return IUP_IGNORE;  /* replace system processing for the hot key, to correctly parse line feed */
end function

function item_cut_action_cb(Ihandle item_cut)
Ihandle multitext = IupGetDialogChild(item_cut, "MULTITEXT");
Ihandle clipboard = IupClipboard();
    IupSetAttribute(clipboard, "TEXT", IupGetAttribute(multitext, "SELECTEDTEXT"));
    IupSetAttribute(multitext, "SELECTEDTEXT", "");
    IupDestroy(clipboard);
    return IUP_DEFAULT;
end function

function item_delete_action_cb(Ihandle item_delete)
Ihandle multitext = IupGetDialogChild(item_delete, "MULTITEXT");
    IupSetAttribute(multitext, "SELECTEDTEXT", "");
    return IUP_DEFAULT;
end function

function item_select_all_action_cb(Ihandle item_select_all)
Ihandle multitext = IupGetDialogChild(item_select_all, "MULTITEXT");
    {} = IupSetFocus(multitext);
    IupSetAttribute(multitext, "SELECTION", "ALL");
    return IUP_DEFAULT;
end function

function item_font_action_cb(Ihandle item_font)
Ihandle multitext = IupGetDialogChild(item_font, "MULTITEXT");
Ihandle fontdlg = IupFontDlg();
string font = IupGetAttribute(multitext, "FONT");
    IupSetStrAttribute(fontdlg, "VALUE", font);
    IupSetAttributeHandle(fontdlg, "PARENTDIALOG", IupGetDialog(item_font));

    {} = IupPopup(fontdlg, IUP_CENTERPARENT, IUP_CENTERPARENT);

    if IupGetInt(fontdlg, "STATUS")==1 then
--      Ihandle config = IupGetAttribute(multitext, "CONFIG");
        Ihandle config = IupGetInt(multitext, "CONFIG");
        font = IupGetAttribute(fontdlg, "VALUE");
        IupSetStrAttribute(multitext, "FONT", font);

--      IupConfigSetVariableStr(config, "MainWindow", "Font", font);
    end if

    IupDestroy(fontdlg);
    return IUP_DEFAULT;
end function

function item_toolbar_action_cb(Ihandle item_toolbar)
Ihandle multitext = IupGetDialogChild(item_toolbar, "MULTITEXT");
Ihandle toolbar = IupGetChild(IupGetParent(multitext), 0);
--Ihandle config = IupGetAttribute(multitext, "CONFIG");
Ihandle config = IupGetInt(multitext, "CONFIG");

    toggle_bar_visibility(item_toolbar, toolbar);

--  IupConfigSetVariableStr(config, "MainWindow", "Toolbar", IupGetAttribute(item_toolbar, "VALUE"));
    return IUP_DEFAULT;
end function

function item_statusbar_action_cb(Ihandle item_statusbar)
Ihandle multitext = IupGetDialogChild(item_statusbar, "MULTITEXT");
Ihandle statusbar = IupGetBrother(multitext);
--Ihandle config = IupGetAttribute(multitext, "CONFIG");
Ihandle config = IupGetInt(multitext, "CONFIG");

    toggle_bar_visibility(item_statusbar, statusbar);

--  IupConfigSetVariableStr(config, "MainWindow", "Statusbar", IupGetAttribute(item_statusbar, "VALUE"));
    return IUP_DEFAULT;
end function

function item_help_action_cb()
    {} = IupHelp("http://www.tecgraf.puc-rio.br/iup");
    return IUP_DEFAULT;
end function

function item_about_action_cb()
    IupMessage("About", "   Simple Notepad\n\nAutors:\n   Gustavo Lyrio\n   Antonio Scuri");
    return IUP_DEFAULT;
end function


/********************************** Main *****************************************/


function create_main_dialog(Ihandle config)
Ihandle dlg, vbox, multitext, menu;
Ihandle sub_menu_file, file_menu, item_exit, item_new, item_open, item_save, item_saveas, item_revert;
Ihandle sub_menu_edit, edit_menu, item_find, item_find_next, item_goto, item_copy, item_paste, item_cut, item_delete, item_select_all;
Ihandle btn_cut, btn_copy, btn_paste, btn_find, btn_new, btn_open, btn_save;
Ihandle sub_menu_format, format_menu, item_font, item_replace;
Ihandle sub_menu_help, help_menu, item_help, item_about;
Ihandle sub_menu_view, view_menu, item_toolbar, item_statusbar;
Ihandle lbl_statusbar, toolbar_hb, recent_menu;
--string font;

    multitext = IupText();
    IupSetAttribute(multitext, "MULTILINE", "YES");
    IupSetAttribute(multitext, "EXPAND", "YES");
    IupSetAttribute(multitext, "NAME", "MULTITEXT");
    IupSetAttribute(multitext, "DIRTY", "NO");
    IupSetCallback(multitext, "CARET_CB", routine_id("multitext_caret_cb"));
    IupSetCallback(multitext, "VALUECHANGED_CB", routine_id("multitext_valuechanged_cb"));
    IupSetCallback(multitext, "DROPFILES_CB", routine_id("dropfiles_cb"));

    lbl_statusbar = IupLabel("Lin 1, Col 1");
    IupSetAttribute(lbl_statusbar, "NAME", "STATUSBAR");
    IupSetAttribute(lbl_statusbar, "EXPAND", "HORIZONTAL");
    IupSetAttribute(lbl_statusbar, "PADDING", "10x5");

    item_new = IupItem("&New\tCtrl+N", NULL);
    IupSetAttribute(item_new, "IMAGE", "IUP_FileNew");
    IupSetCallback(item_new, "ACTION", routine_id("item_new_action_cb"));
    btn_new = IupButton("");
    IupSetAttribute(btn_new, "IMAGE", "IUP_FileNew");
    IupSetAttribute(btn_new, "FLAT", "Yes");
    IupSetCallback(btn_new, "ACTION", routine_id("item_new_action_cb"));
    IupSetAttribute(btn_new, "TIP", "New (Ctrl+N)");
    IupSetAttribute(btn_new, "CANFOCUS", "No");

    item_open = IupItem("&Open...\tCtrl+O", NULL);
    IupSetAttribute(item_open, "IMAGE", "IUP_FileOpen");
    IupSetCallback(item_open, "ACTION", routine_id("item_open_action_cb"));
    btn_open = IupButton("");
    IupSetAttribute(btn_open, "IMAGE", "IUP_FileOpen");
    IupSetAttribute(btn_open, "FLAT", "Yes");
    IupSetCallback(btn_open, "ACTION", routine_id("item_open_action_cb"));
    IupSetAttribute(btn_open, "TIP", "Open (Ctrl+O)");
    IupSetAttribute(btn_open, "CANFOCUS", "No");

    item_save = IupItem("&Save\tCtrl+S", NULL);
    IupSetAttribute(item_save, "NAME", "ITEM_SAVE");
    IupSetAttribute(item_save, "IMAGE", "IUP_FileSave");
    IupSetCallback(item_save, "ACTION", routine_id("item_save_action_cb"));
    btn_save = IupButton("");
    IupSetAttribute(btn_save, "IMAGE", "IUP_FileSave");
    IupSetAttribute(btn_save, "FLAT", "Yes");
    IupSetCallback(btn_save, "ACTION", routine_id("item_save_action_cb"));
    IupSetAttribute(btn_save, "TIP", "Save (Ctrl+S)");
    IupSetAttribute(btn_save, "CANFOCUS", "No");

    item_saveas = IupItem("Save &As...", NULL);
    IupSetAttribute(item_saveas, "NAME", "ITEM_SAVEAS");
    IupSetCallback(item_saveas, "ACTION", routine_id("item_saveas_action_cb"));

    item_revert = IupItem("&Revert", NULL);
    IupSetAttribute(item_revert, "NAME", "ITEM_REVERT");
    IupSetCallback(item_revert, "ACTION", routine_id("item_revert_action_cb"));

    item_exit = IupItem("E&xit", NULL);
    IupSetCallback(item_exit, "ACTION", routine_id("item_exit_action_cb"));

    item_find = IupItem("&Find...\tCtrl+F", NULL);
    IupSetAttribute(item_find, "IMAGE", "IUP_EditFind");
    IupSetCallback(item_find, "ACTION", routine_id("item_find_action_cb"));
    btn_find = IupButton("");
    IupSetAttribute(btn_find, "IMAGE", "IUP_EditFind");
    IupSetAttribute(btn_find, "FLAT", "Yes");
    IupSetCallback(btn_find, "ACTION", routine_id("item_find_action_cb"));
    IupSetAttribute(btn_find, "TIP", "Find (Ctrl+F)");
    IupSetAttribute(btn_find, "CANFOCUS", "No");

    item_find_next = IupItem("Find &Next\tF3", NULL);
    IupSetAttribute(item_find_next, "NAME", "ITEM_FINDNEXT");
    IupSetCallback(item_find_next, "ACTION", routine_id("find_next_action_cb"));

    item_replace = IupItem("&Replace...\tCtrl+H", NULL);
    IupSetCallback(item_replace, "ACTION", routine_id("item_replace_action_cb"));

    item_cut = IupItem("Cu&t\tCtrl+X", NULL);
    IupSetAttribute(item_cut, "NAME", "ITEM_CUT");
    IupSetAttribute(item_cut, "IMAGE", "IUP_EditCut");
    IupSetCallback(item_cut, "ACTION", routine_id("item_cut_action_cb"));
    btn_cut = IupButton("")
    IupSetAttribute(btn_cut, "IMAGE", "IUP_EditCut");
    IupSetAttribute(btn_cut, "FLAT", "Yes");
    IupSetCallback(btn_cut, "ACTION", routine_id("item_cut_action_cb"));
    IupSetAttribute(btn_cut, "TIP", "Cut (Ctrl+X)");
    IupSetAttribute(btn_cut, "CANFOCUS", "No");

    item_copy = IupItem("&Copy\tCtrl+C", NULL);
    IupSetAttribute(item_copy, "NAME", "ITEM_COPY");
    IupSetAttribute(item_copy, "IMAGE", "IUP_EditCopy");
    IupSetCallback(item_copy, "ACTION", routine_id("item_copy_action_cb"));
    btn_copy = IupButton("")
    IupSetAttribute(btn_copy, "IMAGE", "IUP_EditCopy");
    IupSetAttribute(btn_copy, "FLAT", "Yes");
    IupSetCallback(btn_copy, "ACTION", routine_id("item_copy_action_cb"));
    IupSetAttribute(btn_copy, "TIP", "Copy (Ctrl+C)");
    IupSetAttribute(btn_copy, "CANFOCUS", "No");

    item_paste = IupItem("&Paste\tCtrl+V", NULL);
    IupSetAttribute(item_paste, "NAME", "ITEM_PASTE");
    IupSetAttribute(item_paste, "IMAGE", "IUP_EditPaste");
    IupSetCallback(item_paste, "ACTION", routine_id("item_paste_action_cb"));
    btn_paste = IupButton("")
    IupSetAttribute(btn_paste, "IMAGE", "IUP_EditPaste");
    IupSetAttribute(btn_paste, "FLAT", "Yes");
    IupSetCallback(btn_paste, "ACTION", routine_id("item_paste_action_cb"));
    IupSetAttribute(btn_paste, "TIP", "Paste (Ctrl+V)");
    IupSetAttribute(btn_paste, "CANFOCUS", "No");

    item_delete = IupItem("&Delete\tDel", NULL);
    IupSetAttribute(item_delete, "IMAGE", "IUP_EditErase");
    IupSetAttribute(item_delete, "NAME", "ITEM_DELETE");
    IupSetCallback(item_delete, "ACTION", routine_id("item_delete_action_cb"));

    item_select_all = IupItem("Select &All\tCtrl+A", NULL);
    IupSetCallback(item_select_all, "ACTION", routine_id("item_select_all_action_cb"));

    item_goto = IupItem("&Go To...\tCtrl+G", NULL);
    IupSetCallback(item_goto, "ACTION", routine_id("item_goto_action_cb"));

    item_toolbar = IupItem("&Toobar", NULL);
    IupSetCallback(item_toolbar, "ACTION", routine_id("item_toolbar_action_cb"));
    IupSetAttribute(item_toolbar, "VALUE", "ON");

    item_statusbar = IupItem("&Statusbar", NULL);
    IupSetCallback(item_statusbar, "ACTION", routine_id("item_statusbar_action_cb"));
    IupSetAttribute(item_statusbar, "VALUE", "ON");

    item_font = IupItem("&Font...", NULL);
    IupSetCallback(item_font, "ACTION", routine_id("item_font_action_cb"));

    item_help = IupItem("&Help...", NULL);
    IupSetCallback(item_help, "ACTION", routine_id("item_help_action_cb"));

    item_about = IupItem("&About...", NULL);
    IupSetCallback(item_about, "ACTION", routine_id("item_about_action_cb"));

    recent_menu = IupMenuv({});

    file_menu = IupMenuv({
                         item_new,
                         item_open,
                         item_save,
                         item_saveas,
                         item_revert,
                         IupSeparator(),
                         IupSubmenu("Recent &Files", recent_menu),
                         item_exit,
                         NULL});
    edit_menu = IupMenuv({
                         item_cut,
                         item_copy,
                         item_paste,
                         item_delete,
                         IupSeparator(),
                         item_find,
                         item_find_next,
                         item_replace,
                         item_goto,
                         IupSeparator(),
                         item_select_all,
                         NULL});
    format_menu = IupMenuv({
                           item_font,
                           NULL});
    view_menu = IupMenuv({
                         item_toolbar,
                         item_statusbar,
                         NULL});
    help_menu = IupMenuv({
                         item_help,
                         item_about,
                         NULL});

    IupSetCallback(file_menu, "OPEN_CB", routine_id("file_menu_open_cb"));
    IupSetCallback(edit_menu, "OPEN_CB", routine_id("edit_menu_open_cb"));

    sub_menu_file = IupSubmenu("&File", file_menu);
    sub_menu_edit = IupSubmenu("&Edit", edit_menu);
    sub_menu_format = IupSubmenu("F&ormat", format_menu);
    sub_menu_view = IupSubmenu("&View", view_menu);
    sub_menu_help = IupSubmenu("&Help", help_menu);

    menu = IupMenuv({
                    sub_menu_file,
                    sub_menu_edit,
                    sub_menu_format,
                    sub_menu_view,
                    sub_menu_help,
                    NULL});

    toolbar_hb = IupHboxv({
                           btn_new,
                           btn_open,
                           btn_save,
                           IupSetAttributesf(IupLabel(""), "SEPARATOR=VERTICAL"),
                           btn_cut,
                           btn_copy,
                           btn_paste,
                           IupSetAttributesf(IupLabel(""), "SEPARATOR=VERTICAL"),
                           btn_find,
                           NULL});
    IupSetAttribute(toolbar_hb, "MARGIN", "5x5");
    IupSetAttribute(toolbar_hb, "GAP", "2");

    vbox = IupVboxv({
                     toolbar_hb,
                     multitext,
                     lbl_statusbar,
                     NULL});

    dlg = IupDialog(vbox);
    IupSetAttributeHandle(dlg, "MENU", menu);
    IupSetAttribute(dlg, "SIZE", "HALFxHALF");
    IupSetCallback(dlg, "CLOSE_CB", routine_id("item_exit_action_cb"));
    IupSetCallback(dlg, "DROPFILES_CB", routine_id("dropfiles_cb"));

    IupSetCallback(dlg, "K_cN", routine_id("item_new_action_cb"));
    IupSetCallback(dlg, "K_cO", routine_id("item_open_action_cb"));
    IupSetCallback(dlg, "K_cS", routine_id("item_save_action_cb"));
    IupSetCallback(dlg, "K_cF", routine_id("item_find_action_cb"));
    IupSetCallback(dlg, "K_cH", routine_id("item_replace_action_cb"));  /* replace system processing */
    IupSetCallback(dlg, "K_cG", routine_id("item_goto_action_cb"));
    IupSetCallback(dlg, "K_F3", routine_id("find_next_action_cb"));
    IupSetCallback(dlg, "K_cF3", routine_id("selection_find_next_action_cb"));
    IupSetCallback(dlg, "K_cV", routine_id("item_paste_action_cb"));    /* replace system processing */
  /* Ctrl+C, Ctrl+X, Ctrl+A, Del, already implemented inside IupText */

  /* parent for pre-defined dialogs in closed functions (IupMessage and IupAlarm) */
    IupSetAttributeHandle(NULL, "PARENTDIALOG", dlg);

  /* Initialize variables from the configuration file */

--  IupConfigRecentInit(config, recent_menu, call_back(routine_id("config_recent_cb")), 10);

--  font = IupConfigGetVariableStr(config, "MainWindow", "Font");
--  if length(font)!=0 then
--      IupSetStrAttribute(multitext, "FONT", font);
--  end if

--  if not IupConfigGetVariableIntDef(config, "MainWindow", "Toolbar", 1) then
--      IupSetAttribute(item_toolbar, "VALUE", "OFF");
--      IupSetAttribute(toolbar_hb, "FLOATING", "YES");
--      IupSetAttribute(toolbar_hb, "VISIBLE", "NO");
--  end if

--  if not IupConfigGetVariableIntDef(config, "MainWindow", "Statusbar", 1) then
--      IupSetAttribute(item_statusbar, "VALUE", "OFF");
--      IupSetAttribute(lbl_statusbar, "FLOATING", "YES");
--      IupSetAttribute(lbl_statusbar, "VISIBLE", "NO");
--  end if

    IupSetAttribute(dlg, "CONFIG", config);

    return dlg;
end function

--function main(int argc, char **argv)
--{
Ihandle dlg;
Ihandle config = NULL

    {} = IupOpen()--&argc, &argv);
--  IupImageLibOpen();

--  config = IupConfig();
--  IupSetAttribute(config, "APP_NAME", "simple_notepad");
--  {} = IupConfigLoad(config);

    dlg = create_main_dialog(config);

  /* show the dialog at the last position, with the last size */
--  IupConfigDialogShow(config, dlg, "MainWindow");
{} = IupShow(dlg)

  /* initialize the current file */
    new_file(dlg);

  /* open a file from the command line (allow file association in Windows) */
sequence cl = command_line()
    if length(cl)>2 then
        string filename = cl[3]
        open_file(dlg, filename);
    end if

    IupMainLoop();

    IupClose();
--  return EXIT_SUCCESS;
--end function

/* If instead of using IupText we use IupScintilla, then we can add:
   - more find/replace options
   - zoom
   - show white spaces
   - margins
   - word wrap
   - tab size
   - auto replace tabs by spaces
   - undo & redo
   - markers
   - line numbers
   and much more.
   Hot keys for:
   - match braces
   - to lower case
   - to upper case
 */


