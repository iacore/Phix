--
-- demo/prime_drag_race.exw
-- ========================
--
?"begin"
--constant limit = 100_000_000
--constant limit = 10_000_000
constant limit = 1_000_000
--constant limit = 100_000
--constant limit = 10_000
--constant limit = 1_000
--constant limit = 100
--constant limit = 10

constant prime_counts = new_dict({{10, 4},
                                  {100, 25},
                                  {1000, 168},
                                  {10000, 1229},
                                  {100000, 9592},
                                  {1000000, 78498},
                                  {10000000, 664579},
                                  {100000000, 5761455}})

function sieve(integer n)
    integer bytes = floor((n+15)/16)    -- (round up to whole no of odd-bit bytes)
                                        -- (eg a limit of 10 ==> 1..15, in 1 byte)
    integer rsize = bytes+iff(machine_bits()=32?11:23)
    string res = repeat('\0',rsize)
--  atom pRes = allocate(rsize)
    -- initialise with every 3rd bit set (strike 3/9/15 etc)
    --  done in blocks of 12/24 bytes, hence padding above
--  if true then                        -- use slow hll version
    if false then                       -- use fast asm version
        for i=1 to length(res) by 3 do
            res[i]   = 0b1001_0010
            res[i+1] = 0b0010_0100
            res[i+2] = 0b0100_1001
        end for
--      res[1] = 0b1001_0010
--      res[2] = 0b0010_0100
--      res[3] = 0b0100_1001
--      poke(pRes,{0b1001_0010,0b0010_0100,0b0100_1001})
--      atom pRes
--      integer pRes4
--      #ilASM{
--          [32]
--              mov eax,[res]
--              shl eax,2
--              shr eax,2
--              mov [pRes4],eax
--          [64]
--              mov rax,[res]
--              shl rax,2
--              shr rax,2
--              mov [pRes4],rax
--          []
--            }
--      mem_copy(pRes4*4+3,pRes4*4,rsize-3)
--      mem_copy(pRes+3,pRes,rsize-3)
    else
        -- For the asm version of the above I used a "block size" of 12/24,
        -- simply because that fits comfortably in the available registers.
        #ilASM{
            [32]
                mov edi,[res]
--              mov eax,[pRes]
                mov ecx,[bytes]
--              mov ecx,[rsize]
                shl edi,2
--              call :%pLoadMint
--              mov edi,eax
                mov eax,0b1001_0010_0100_1001_0010_0100_1001_0010
                mov edx,0b0010_0100_1001_0010_0100_1001_0010_0100
                mov esi,0b0100_1001_0010_0100_1001_0010_0100_1001
                -- or (if preferred, smaller but two agi stalls)
--              mov edx,0b0010_0100_1001_0010_0100_1001_0010_0100
--              lea esi,[edx*2+1]
--              lea eax,[esi*2]

--              mov dword[edi+0],0b1001_0010_0100_1001_0010_0100_1001_0010
--              mov dword[edi+4],0b0010_0100_1001_0010_0100_1001_0010_0100
--              mov dword[edi+8],0b0100_1001_0010_0100_1001_0010_0100_1001
--              mov esi,edi
--              add edi,12
--              add edi,3
--              sub ecx,12
--              sub ecx,3
--              shr ecx,2
              @@:
                mov [edi],eax
                mov [edi+4],edx
                mov [edi+8],esi
--rep movsd?
--              rep movsd
--              rep movsb
                lea edi,[edi+12]
                sub ecx,12
                jg @b
            [64]
                -- Here we use a bit of bit-fiddling in preference to lots
                -- of massive literal constants, because it is easy enough.
                -- Of course you could do much the same in the 32-bit code.
                -- Note we should avoid setting the low-dword of rax to a
                -- signed value, since that fills the high-dword with 1s.
--              mov rax,[pRes]
--              call :%pLoadMint
--              mov rdi,rax
                mov rax,0b0100_1001_0010_0100_1001_0010_0100_1001
                mov rdi,[res]
                mov rdx,rax
                shl rax,1
                mov rcx,[bytes]
                shl rdx,34
                shl rdi,2
                add rax,rdx
                lea rdx,[rbx+rax*4+1]
                lea rsi,[rbx+rax*2]
              @@:
                mov [rdi],rax
                mov [rdi+8],rdx
                mov [rdi+16],rsi
--rep movsq?
                lea rdi,[rdi+24]
                sub rcx,24
                jg @b
              }
    end if
    -- then clear 3rd and strike 1st bit too.
    res[1] = 0b1001_0001
--  poke(pRes,0b1001_0001)
    --
    -- now strike 25,35,45...       5^2, {+5*2}
    --       then 49,63,77...       7^2, {+7*2}
    --       then 121,143,165...    11^2, {+11*2}
    --       then 169,195,221...    13^2, {+13*2}
    --       then 289,323,357...    17^2, {+17*2}
    --
    integer p = 5,  -- (first prime to test)
            p2 = p*p, -- (squared)
            pb = 2,   -- (bit index for 5)
            mask = 0b0100  -- (mask for 5)
    while p2<=n do
--      if true then                        -- use slow hll version
        if false then                       -- use fast asm version
            integer bdx = floor(pb/8)+1,
--          integer bdx = floor(pb/8),
                    byte = res[bdx]
--                  byte = peek(pRes+bdx)
            if and_bits(byte,mask)=0 then
                for k2=p2 to n by p*2 do
                    bdx = floor(k2/16)+1
--                  bdx = floor(k2/16)
                    byte = res[bdx]
--                  byte = peek(pRes+bdx)
                    integer kl = remainder(k2,16)
                    integer mask2 = power(2,floor(kl/2))
                    byte = or_bits(byte,mask2)
                    res[bdx] = byte
--                  poke(pRes+bdx,byte)
                end for
            end if
        else
            -- Obviously this would be much harder to write without the above
            -- to refer to and check against, likewise having a printable kl
            -- etc in the above loop helps (vs. doing the calculation inline).
            -- Most users bother not with this sort of thing, for good reason.
            -- In truth, #ilASM{} is for self-hosting, not really performance,
            -- and there never was any remote intention for it be easy to use.
            #ilASM{
                    [32]
--                      mov eax,[pRes]
--                      call :%pLoadMint
--                      mov esi,eax
                        mov ecx,[pb]
                        mov esi,[res]
                        shr ecx,3                   -- bdx := floor(bp/8)
                        mov edx,[mask]
                        mov eax,[p2]                -- k2
--                      test byte[esi*4+ecx],dl     -- byte,mask -- (needs 1.0.1)
                        test [esi*4+ecx],edx        -- byte,mask -- (works too)
--                      test [esi+ecx],edx          -- byte,mask -- (works too)
                        jne :nextp
                          ::by2p
                            mov ecx,eax             -- kl := k2
                            mov edi,eax             -- bdx := k2
                            and ecx,15              -- kl := remainder(k2,16)
                            mov edx,1               -- mask2 := 1
                            shr ecx,1               -- kl := kl/2
                            shr edi,4               -- bdx := floor(k2/16)
                            shl edx,cl              -- mask2 := power(2,floor(kl/2))
                            mov ecx,[p]
                            or byte[esi*4+edi],dl
--                          or byte[esi+edi],dl
                            lea eax,[eax+ecx*2]     -- k2 += p*2
                            cmp eax,[n]
                            jle :by2p
                    [64]
--                      mov rax,[pRes]
--                      call :%pLoadMint
--                      mov rsi,rax
                        mov rcx,[pb]
                        mov rsi,[res]
                        shr rcx,3                   -- bdx := floor(bp/8)
                        mov rdx,[mask]
                        mov rax,[p2]                -- k2
--                      test byte[rsi*4+rcx],dl     -- byte,mask -- (needs 1.0.1)
                        test [rsi*4+rcx],rdx        -- byte,mask -- (works too)
--                      test [rsi+rcx],rdx          -- byte,mask -- (works too)
                        jne :nextp
                          ::by2p
                            mov rcx,rax             -- kl := k2
                            mov rdi,rax             -- bdx := k2
                            and rcx,15              -- kl := remainder(k2,16)
                            mov dl,1                -- mask := 1
                            shr rcx,1               -- kl := kl/2
                            shr rdi,4               -- bdx := floor(k2/16)
                            shl dl,cl               -- mask := power(2,floor(kl/2))
                            mov rcx,[p]
                            or byte[rsi*4+rdi],dl
--                          or byte[rsi+rdi],dl
                            lea rax,[rax+rcx*2]     -- k2 += p*2
                            cmp rax,[n]
                            jle :by2p
                    []
                      ::nextp
                  }
        end if
        p += 2
        p2 = p*p
        pb += 1
        mask *= 2
        if mask>#FF then mask /= #100 end if
    end while
    res = res[1..bytes]
    return res -- (or return {res,bytes,n} should that be needed/desired)
--  return {pRes,bytes,n}
--  return pRes
end function

atom t5 = time()+5
--atom t5 = time()-.05  -- (useful for verifying different sizes)
integer passes = 0
string res
--sequence r3
--atom r3
while true do
    res = sieve(limit)
    passes += 1
    if time()>t5 then exit end if
end while
atom actual_time = time()-t5+5

--string res = peek(r3[1..2])
--string res = peek({r3,floor((limit+15)/16)})
integer prime_count = 1 -- (no bit for 2 so count it automatically)
--sequence primes = repeat(0,limit) -- (neither helps nor hinders)
--primes[2] = 1                                 -- ""
integer p = 1
for i=1 to length(res) do
    integer ri = res[i]
    for j=1 to 8 do
        if even(ri) then
            if p>limit then exit end if
            prime_count += 1
--          primes[p] = 1                       -- ""
        end if
        ri = floor(ri/2)
        p += 2
    end for
end for
puts(1,"\n")
integer verify = getd(limit,prime_counts)
if prime_count==verify then
--  printf(1,"%d primes < %d (verified)\n",{prime_count,limit})
    printf(1,"petelomax-phix;%d;%f;1;algorithm=base,faithful=yes,bits=1\n", {passes, actual_time})
--  petelomax-phix;5419;5.015000;1;algorithm=base,faithful=yes,bits=1
else
    printf(1,"**ERROR** %d primes(<%d) should be %d\n",{prime_count,limit,verify})
end if
{} = wait_key()

--/*
--Results on this machine, in performance order of worst first:
{{{
   Python: 14 (version 1, in 10 seconds so 7 really)
     Wren: 68
    Julia: 110 (version1)
    Julia: 111 (version2)
     Phix: 675 (hll init and main loop, aka "if true then")
FreeBASIC: 1054 (prime_boolean, the 8of30 one gave incorrect results)
   Python: 2270 (version 2)
       Go: 3064 (solution 1)
   Python: 3524 (solution 3, unfaithful)
     Phix: 4081 (hll init and asm main loop)
       Go: 4233 (solution 2)
     Phix: 5419 (asm init and main loop)
}}}

--results (manually discovered, machines may vary) [gave up]
x86-64: 8302
AWK: 14
Wren: 100
V: 850
arm64: 908
--*/

--/* --first working version:
--with trace
--constant limit = 100_000_000
--constant limit = 10_000_000
constant limit = 1_000_000
--constant limit = 100_000
--constant limit = 10_000
--constant limit = 1_000
--constant limit = 100
--constant limit = 10
constant prime_counts = new_dict({{10, 4},
                                  {100, 25},
                                  {1000, 168},
                                  {10000, 1229},
                                  {100000, 9592},
                                  {1000000, 78498},
                                  {10000000, 664579},
                                  {100000000, 5761455}})
--for k2=1 to 65 by 2 do
--  integer bdx = floor(k2/16)+1    
--  integer kl = remainder(k2,16)
--  integer mask = power(2,floor(kl/2))
--  printf(1,"%d: bdx:%d, kl:%d, mask:%08b\n",{k2,bdx,kl,mask})
--end for
--{} = wait_key()
--abort(0)
include puts1.e
constant k2c = "k2:",
         cbx = ", bdx:",
         kle = ", kl:",
         msk = ", mask ",
         cr = "\n"
function sieve(integer n)
--  n /= 2  -- (n must be even / crashes if not)
    integer bytes = floor((n+15)/16)    -- (round up to whole no of odd-bit bytes)
                                        -- (eg a limit of 10 ==> 1..15, in 1 byte)
--?n
--  string res = repeat('\0',500000)
--  integer len = n+iff(machine_bits()=32?11:23)
    string res = repeat('\0',bytes+iff(machine_bits()=32?11:23))
--  string res = repeat('\x49',n+1) -- 0b01001001
--  for i=2 to n by 3 do
--      res[i] = '\x24'             -- 0b00100100
--      if i=n then exit end if
--      res[i+1] = '\x92'           -- 0b10010010
--  end for
    -- initialise with every 3rd bit set (strike 3/9/15 etc)
    --  done in blocks of 12/24 bytes, hence padding above
    #ilASM{
        [32]
            mov edi,[res]
            mov ecx,[bytes]
            shl edi,2
            mov eax,0b1001_0010_0100_1001_0010_0100_1001_0010
            mov edx,0b0010_0100_1001_0010_0100_1001_0010_0100
            mov esi,0b0100_1001_0010_0100_1001_0010_0100_1001
          @@:
            mov [edi],eax
            mov [edi+4],edx
            mov [edi+8],esi
--rep movsd?
            lea edi,[edi+12]
            sub ecx,12
            jg @b
        [64]
--          mov rax,0b0010_0100_1001_0010_0100_1001_0010_0100_1001_0010_0100_1001_0010_0100_1001_0010
--          mov rax,0b1001_0010_0100_1001_0010_0100_1001_0010
            mov rax,0b0100_1001_0010_0100_1001_0010_0100_1001
            mov rdi,[res]
            mov rdx,rax
            shl rax,1
            mov rcx,[bytes]
            shl rdx,34
            shl rdi,2
--          mov rax,0b0010_0100_1001_0010_0100_1001_0010_0100_1001_0010_0100_1001_0010_0100_1001_0010
--          mov rdx,0b1001_0010_0100_1001_0010_0100_1001_0010_0100_1001_0010_0100_1001_0010_0100_1001
            add rax,rdx
--          or rax,rdx
            lea rdx,[rbx+rax*4+1]
--          mov rsi,0b0100_1001_0010_0100_1001_0010_0100_1001_0010_0100_1001_0010_0100_1001_0010_0100
            lea rsi,[rbx+rax*2]
          @@:
            mov [rdi],rax
            mov [rdi+8],rdx
            mov [rdi+16],rsi
--rep movsq?
            lea rdi,[rdi+24]
            sub rcx,24
            jg @b
          }
    -- then clear 3rd and strike 1st bit too.
--  res[1] = 0b1000_1001
    res[1] = 0b1001_0001
    --
    -- now strike 25,35,45...       5^2, {+5*2}
    --       then 49,53,67...       7^2, {+7*2}
    --       then 121,143,165...    11^2, {+11*2}
    --       then 169,175,201...    13^2, {+13*2}
    --       then 289,323,357...    17^2, {+17*2}
    -- ...using a rotating machine-word sized mask.
    -- (note that since the sieve is odd-only the step is prime, not prime*2)
    integer p = 5,  -- (first prime to test, squared)
            p2 = p*p,
            pb = 2,   -- (bit index for 5)
            mask = 0b0100  -- (mask for 5)
--  integer lim = floor(sqrt(n))
--  while p<lim do
--trace(1)
--145 = 0b10010001
    while p2<=n do
--  while false do
if false then
        integer bdx = floor(pb/8)+1,
                byte = res[bdx]
--      if and_bits(byte,mask)=0 then
            for k2=p2 to n by p*2 do
                bdx = floor(k2/16)+1
                byte = res[bdx]
                integer kl = remainder(k2,16)
                integer m2 = power(2,floor(kl/2))
if k2<=100 then
    printf(1,"k2:%d, bdx:%d, kl:%d, mask %08b\n",{k2,bdx,kl,m2})
end if
                byte = or_bits(byte,m2)
                res[bdx] = byte
            end for
else
        #ilASM{
                [32]
                    mov ecx,[pb]
                    mov esi,[res]
                    shr ecx,3                   -- bdx := floor(bp/8)
--                  shr ecx,4                   -- bdx := floor(bp/16)
                    mov edx,[mask]
                    mov eax,[p2]                -- k2
--                  test byte[esi*4+ecx],dl     -- byte,mask -- (needs 1.0.1)
--                  test word[esi*4+ecx],dx     -- word,mask -- (?)
                    test [esi*4+ecx],edx        -- byte,mask -- (works too)
                    jne :nextp
                      ::by2p
                        mov ecx,eax             -- kl := k2
                        mov edi,eax             -- bdx := k2
                        and ecx,15              -- kl := remainder(k2,16)
--                      and ecx,31              -- kl := remainder(k2,32)
--                      mov dl,1                -- mask := 1
                        mov edx,1               -- mask := 1
--                      shr cl,1                -- kl := kl/2
                        shr ecx,1               -- kl := kl/2
                        shr edi,4               -- bdx := floor(k2/16)
--                      shr edi,5               -- bdx := floor(k2/32)
                        shl edx,cl              -- mask := power(2,floor(kl/2))
--/*
cmp eax,100
jg :noshow
pushad
mov edi,[k2c]
mov esi,3
shl edi,2
call :%puts1ediesi  -- (edi=raw text, esi=length)
--mov eax,
mov eax,[esp+28]    -- eax(k2)
push 0
call :%putsint
mov edi,[cbx]
mov esi,6
shl edi,2
call :%puts1ediesi  -- (edi=raw text, esi=length)
--xor eax,eax
                -- [esp] is saved edi (from the pushad)
                -- [esp+4] is saved esi
                -- [esp+8] is saved ebp
                -- [esp+12] is saved esp
                -- [esp+16] is saved ebx
                -- [esp+20] is saved edx    -- (now used for prevebp)
                -- [esp+24] is saved ecx
                -- [esp+28] is saved eax    -- (save of symtab[routineno], then result)
--mov al,byte[esp+24]
--mov edx,[esp+28]  -- eax
--push ebx
--call :%puthex32
--mov edi,[psslmh]
--call :%puts1
--mov edx,[esp+20]  -- edx
--push ebx
--call :%puthex32
--mov edi,[psssob]
--call :%puts1
----mov eax,[esp+4]     -- esi
--mov eax,[esp]     -- edi
mov eax,[esp]       -- edi aka bdx
push 0
call :%putsint
mov edi,[kle]
mov esi,5
shl edi,2
call :%puts1ediesi  -- (edi=raw text, esi=length)
mov eax,[esp+24]    -- ecx aka kl
push 0
call :%putsint
mov edi,[msk]
mov esi,7
shl edi,2
call :%puts1ediesi  -- (edi=raw text, esi=length)
xor edx,edx
--mov edx,[esp+??]
mov dl,[esp+20]     -- mask
push 0
call :%puthex32
mov edi,[cr]
mov esi,1
shl edi,2
call :%puts1ediesi  -- (edi=raw text, esi=length)
popad
::noshow
--*/
                        mov ecx,[p]
                        or byte[esi*4+edi],dl
--                      or word[esi*4+edi],dx
                        lea eax,[eax+ecx*2]     -- k2 += p*2
                        cmp eax,[n]
                        jle :by2p
                [64]
                    mov rcx,[pb]
                    mov rsi,[res]
                    shr rcx,3                   -- bdx := floor(bp/8)
--                  shr rcx,4                   -- bdx := floor(bp/16)
                    mov rdx,[mask]
                    mov rax,[p2]                -- k2
--                  test byte[rsi*4+rcx],dl     -- byte,mask -- (needs 1.0.1)
                    test [rsi*4+rcx],rdx        -- byte,mask -- (works too)
                    jne :nextp
                      ::by2p
                        mov rcx,rax             -- kl := k2
                        mov rdi,rax             -- bdx := k2
                        and rcx,15              -- kl := remainder(k2,16)
                        mov dl,1                -- mask := 1
                        shr rcx,1               -- kl := kl/2
                        shr rdi,4               -- bdx := floor(k2/16)
                        shl dl,cl               -- mask := power(2,floor(kl/2))
                        mov rcx,[p]
                        or byte[rsi*4+rdi],dl
                        lea rax,[rax+rcx*2]     -- k2 += p*2
                        cmp rax,[n]
                        jle :by2p
                []
                  ::nextp
              }
        end if
        p += 2
--if p=17 then trace(1) end if
        p2 = p*p
        pb += 1
        mask *= 2
--      if mask>#FF then mask = and_bits(mask,#FF)+1 end if
        if mask>#FF then mask /= #100 end if
--      if mask>#FFFF then mask /= #10000 end if
    end while
--/*
              ::whilep2_le_n
    #ilASM{
            [32]
                cmp ?,?
            [64]
                cmp ?,?
            []
                jle :whilep2_le_n
          }
--*/
    res = res[1..bytes]
    return res
end function
--atom t5 = time()+5
atom t5 = time()-.05    -- (temp)
integer count = 0
string res
while true do
    res = sieve(limit)
    count += 1
    if time()>t5 then exit end if
end while
?count      -- 283950 w/o function
            -- 281651 with function (!!!)
            --   5026 with loop...
            --  76734 with ilASM
            -- 655830 (wow!)
            --1011441 (64 bit!!)
            --    287 (with inner hll loop!!!)
            --    298 ("" 64 bit...)
            -- 652869 (w/o, still)
            -- 231742 (w/o inner loop...)
            -- 272163 ("" 64 bit)
            --   5251 (all done)
--1333333
--"IÆ$I$IÆ$Æ$IÆIÆ$I$IÆ$...IÆ$I$IÆ$Æ$IÆIÆ$I$IÆ$ (500,000 digits)"
count = 0
sequence primes = repeat(1,limit+7)
--for i=4 to limit by 2 do primes[i] = 0 end for
for i=4 to length(primes) by 2 do primes[i] = 0 end for
integer p = 1
--?res&-1   145 = 0b10010001
--string fmt = iff(machine_bits()=32?"%08b\n"
for i=1 to length(res) do
    integer ri = res[i]
--  , eight = 8
if p<100 then
    printf(1,"%08b\n",ri)
end if
    for j=1 to 8 do
        if odd(ri) then
--          if p>1_000_000 then exit end if
            if p>limit then exit end if
            count += 1
--if p<limit then
            primes[p] = 0
--end if
        end if
        ri = floor(ri/2)
        p += 2
--      eight -= 2
    end for
--  p += eight
end for
puts(1,"\n")
--?count
count = limit/2-count+1 -- prime count
integer verify = getd(limit,prime_counts)
if count==verify then
    printf(1,"%d primes < %d (verified)\n",{count,limit})
else
    printf(1,"**ERROR** %d primes should be %d < $d\n",{count,verify,limit})
end if
--/*
?p -- 15 (first odd non-prime>10)
?primes[1..min(limit,100)]
count = 0
for i=1 to min(limit,100) do
--for i=1 to min(length(primes),100) do
    if primes[i] then ?i count += 1 end if
end for
?count
?get_primes_le(100)
?length(get_primes_le(100))
--*/
--?shorten(res)
--*/

