--
-- AdventOfCode.exw
-- ================
--
--  A complete set of puzzles and answers for https://adventofcode.com
--
--  Modify the DOD constant (at the end) to specify which days to run (or all).

--- Day 1: Not Quite Lisp ---
-----------------------------
--Santa was hoping for a white Christmas, but his weather machine's "snow" function is powered by stars, and he's fresh out! 
--To save Christmas, he needs you to collect fifty stars by December 25th.
--
--Collect stars by helping Santa solve puzzles. Two puzzles will be made available on each day in the Advent calendar; the 
--second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!
--
--Here's an easy puzzle to warm you up.
--
--Santa is trying to deliver presents in a large apartment building, but he can't find the right floor - the directions he 
--got are a little confusing. He starts on the ground floor (floor 0) and then follows the instructions one character at a time.
--
--An opening parenthesis, (, means he should go up one floor, and a closing parenthesis, ), means he should go down one floor.
--
--The apartment building is very tall, and the basement is very deep; he will never find the top or bottom floors.
--
--For example:
--
--(()) and ()() both result in floor 0.
--((( and (()(()( both result in floor 3.
--))((((( also results in floor 3.
--()) and ))( both result in floor -1 (the first basement level).
--))) and )())()) both result in floor -3.
--To what floor do the instructions take Santa?

--- Part Two ---
--Now, given the same instructions, find the position of the first character that causes him to enter the basement (floor -1). 
--The first character in the instructions has position 1, the second character has position 2, and so on.
--
--For example:
--
--) causes him to enter the basement at character position 1.
--()()) causes him to enter the basement at character position 5.
--What is the position of the character that causes Santa to first enter the basement?

constant directions = 
"(((())))()((((((((())()(()))(()((((()(()(((()((()((()(()()()()()))(((()(()((((((((((())(()()((())()("&
"((())))()(()(()((()(()))(()()()()((()((()(((()()(((((((()()())()((((()()(((((()(())()(())((())()()))"&
"()(((((((())(()())(()(((())(()))((())))(()((()())))()())((((())))(()(((((()(())(((()()((()((()(((((("&
"((((())(()())))))()))())()()((((()()()()()()((((((())())(((()())()((()()(((()()()))(((((()))(((()(()"&
"()()(()(()(((())()))(()(((()((())()(()())())))((()()()(()()(((()))(((()((((()(((((()()(()())((()())("&
"))(()((((((()(()()))((((()))))())((())()()((()(()))))((((((((()))(()()(((())())(())()((()()()()((()("&
"(()((()()(((())))(()((())()((((((((()((()(()()(((())())())))(())())))()((((()))))))())))()()))()())("&
"(()())()((()()()))(()()(((()(())((((())())((((((((()()()()())))()()()((((()()))))))()((((()(((()))(("&
")()())))((()()(((()))()()())())(((())((()()(())()()()(((())))))()())((()))()))((())()()())()())()()("&
"()))())))())()))(())((()(())))(()(())(()))))(()(())())(()(())(()(()))))((()())()))()((((()()))))()))"&
")()()())((())()((()()()))()(((()(()))))(())()()))(((()())))))))))(((())))()))())()))))()()(((())))))"&
"))()(()()(()))((()))))((())))((()((())))())))()()(()))())()(()((()())(()(()()())())(()()))()))))(()("&
"))()()))()()()()))(()(()(()))))))()(()))()))()()(()((())(()(())))()(((())(())())))))()(()(()))))()))"&
"(()()()(())()(()(())))()))))()()(((((())))))())()())())())()())()))))()))))))))())()()()()()()())))("&
")))((())()))())))()((())()))))()))())))))))())()()()))()()(()((((()(((((((()(())((()())((()()))())))"&
")(())))()()()(())((())()())))(())))(())))(((()()))()(())(((()(()))((())))())()))((((()))())())))))))"&
")()(())())))(()))()(()()))())()()(())())))())()()(()())))()((()())(()(())(())))))))))))))(()))))()))"&
"))))()()())(()(((((()(()())))())()))(()))()))(()()))()())(()))())()(())((()()))))))())))())()(((()))"&
")(()(()))()()))()(()))))))((()())(()))))))()())))()()))))))))((((((((()()()(()))))))()())))())))()()"&
"((())()))((())(())))())())))()()()((()((()(())))())()(())))))))))()())))()()()()()()))()))((())())(("&
")(()))))))(()()))()))(())))()))))))))))))(()))))))))()))))()))()())()))()()))))))()))))((()))))(()))"&
"())()(())))(()())((((()())))()))))(()))()(()()(())))))())))))()))))))())))())))))())))())())))())(()"&
"))))(())()(())))())()))((()()))))))())))((())))))))())))(())))))()()())))))())))))()))))))()))()()()"&
"(()(((()())())())(()))())))))((()(())(()))))))))(())))()()()())())(()))))()()()))()))())())())()(())"&
"))()(((()((((())))))))()))))))))))))))))))))((())()())(()))))()()))))))(()()(())())))())))((())))((("&
"))))))))))))))()))))()(()))))))())))))()))(()()())(()())))))))))()))))))(())))))()()))()())(((())))("&
")))(()))))))))(())())))())))())())())()()))((())()(())()())()))()())(())(()))))()())))(()(((()))))))"&
"()(()())()()()))()))))))))()()()(())()())()(((((()))()())())(()))))()()()(())))())))()((()())))(()))"&
"())()(()())())(()))()()))((()()))((()()()()())))(())()))(()(())))((()()))))))))())))))))())()())))))"&
")))))))))))(())()(())(())()())())()))()(()))))())())))))()())()(()))()()(())))(())())))))(()))))))))"&
"))))))())())(())(())))(((()))()))))())((())(()))())))))))())))))())))()))()))))))))))))())()))))()))"&
"))((()))(())))()(())))(())()))()))())))())))))))()(()())())))()()())))(())))))(()))))))))))))(()))()"&
"))()))())))(((()()()(())((()())))()())(((()))(())()))((()()()())))())(())(()))))()(((((())))(()))())"&
"())))))))((((()()()))())())()(()(()())))))))))()())())))(())))()())(((()(())())()()))())())))))))((("&
")())((()()(()))(()(())))()))()))(()))(()))()()(()(((())((((()))()(()))((())()(()(()())()(()))()())))"&
"))(()))()))())()())))())))(())))((())(()())))))()))(())(()))()())()(()()((()(()))))))()(())(()())(()"&
")()))(((())()))(()()(()()()))))(()(())))()))))())))))())(()()()()()()(((())))(()()))()((())(((((()()"&
"())))(()))(()))()()))(((())())()(((()()()()))))(()))(())())))()())(()()())())))))))()))))((())))()()"&
")(()))(()(()))())))))())(())))))()()())())()))()()(())))(()))(())((((((())(()))(()))())()))(()()(())"&
"))()))(()()))()))()(())))(())))((()(()))(())()()())())))(((()()())(())()))))))()(((()(((((()()(((())"&
"(())))())()((()))))((()())()(())(((())))(((()((()(()(()))(()()))())(()))(())(())))()))))))((((()))()"&
"((((()(()))()))()()))))()(()(()))()(()((()(((()(()()(((()))))()(((()(()(()(((()(()())())()()(()(()()"&
")())(()((((())(()))()))(((((()()())(())()((()()())))()()(((()()))()((((((((()(())))())((()))))(())))"&
"(()))))((()((((()()(())(((((()))(((((((((((((()())))((((()(((()((())())()))((()))()(()()((()()()()(("&
")()(()(()(((())()(()((((((()((()()((())()((((()((()()(()()())((()()()((()((())()(()(((()((())((((())"&
"(()))((()(()))(()())()((((((((()(((((((((((()))(()(((()(()()()((((())((())()())()))(())((())(()))((("&
"()((()(())))(()))))((()()))))((((()(()(()())(()(())((((((((()((((()((()(((((()))())()(()))(()()((()("&
"())(((((()(())()(((((()()))))))()(((())()(()()((((())()((())((()(((())(((()))((()()((((()(())))))((("&
")((((()((()((()(((())((()))(((((((()(((()((((((((())()))((((())(((((()((((((((()(((()((()(((()()(((("&
")((((((()()(()((((((((()()(()(()(())((((()())()))))(((()))((((())((((()())((()(())()((()((((((()(((("&
"((()(())))()())(((())())())()(())()(()())((()()((((())((((((())(()(((((()((((())()((((()(()(())(()()"&
")(((())()((())((((()))()((((((())(()(((()(((()((((((()(((()))(()()())())((()((()())()((((())(((()(()"&
"(((((((((())(())))()((()()()()(())((()))(((((((()(((((((((()(()))))(()((((((((()((((()((()()((((((()"&
"()(((((((()(()(())()(())((()()()((()(((((()())()(((((()())()()((()(()())(()()()(((()()(((((()((((((("&
")()((()(()()()((((((((((((()((((((((()()(((()())))()(((()()(())())((((()((((()((((()()()(())(())((()"&
"(()(((((((((((((((()(())(())))))()()))((()(((()(())((()(((()(()()((((()()(((()(((()(((((()()((()(()("&
"((()))((((((()((((((((()((()((())(((((()(((())(())())((()()))((((())()()((()(((()(((((()()(((()))((("&
"()(()(((((((((((((()))((((((((()(((()))))())((((((((((((())((())((()())(((())((())(()((((((((((()((("&
"())((()()(()((())(((((((((((()))((((((((((((()(()())((()((()((()(()(((()((((((((()()(()((()(()(((())"&
")((()))(((((((((((((()(())((((((())(((()(())(()(()(()((()()))((((()((((()((((())))())((((()((((()))("&
"(((((()((((((()((()(((())))((())(()))(()((()((((()((()(((()()))((((()()()(((((((())(((())(()))())((("&
"(()())(((()(((((((((((()(()(()((()(((((((((((((((()()((((()((((((((()(((()()((()((((()))(((()(())((("&
"(((()((((())()((((()((()))(())()(()(((()((())())((((((()(()(())())(((())(()(()())(((((()((()((())()("&
"))(())))(((()(())))))))(((()(((()))()((()(((()()((()())()()))())))(((()))(()(((()(((((((((()(()((((("&
"()()(((()())()()))))()(((()))(((()(()(()(()(()))()(())()))(()(((())))(()))))))))))(())((()((())((()("&
"())()(())((()()((((()()((()()))((())(((()((()(())(())))()(()(((((()((()))())()(((((()()(((()(()((((("&
"(())(()))(())()))((()(()()))(())())()))(((())))(()((()(((())(())())))((()()((((((((((((((()((()(()()"&
"(()(((()))())()()((()()()(())(()))(()())(((())((())()(())()()(()()(())))((()(((()))))(((()()(()()))("&
"))((()((())()))((((()()()())((())))(((()(())(((((()(((((()((()(()((((()()(((()()()(((()())(((()()((("&
"(())(()))(((()))(())())((()))(((()((()))(((()()((())((()(((((()((((()()())((()))()((((()((()(()()()("

function get_floor(string d, bool enter_basement=false)
    integer res = 0 
    for i=1 to length(d) do
        integer ch = d[i]
        if ch='(' then
            res += 1
        elsif ch=')' then
            res -= 1
        else
            ?9/0 -- illegal
        end if
        if enter_basement then
            if res=-1 then return i end if
        end if
    end for
    if enter_basement then
        return -1
    end if
    return res
end function

procedure day1()
    ?get_floor(directions) -- 232
    ?get_floor(directions,true) -- 1783
end procedure


--- Day 2: I Was Told There Would Be No Math ---
--The elves are running low on wrapping paper, and so they need to submit an order for more. 
--They have a list of the dimensions (length l, width w, and height h) of each present, and only want to order exactly as much as they need.
--
--Fortunately, every present is a box (a perfect right rectangular prism), which makes calculating the required wrapping paper for each gift 
--a little easier: find the surface area of the box, which is 2*l*w + 2*w*h + 2*h*l. 
--The elves also need a little extra paper for each present: the area of the smallest side.
--
--For example:
--
--A present with dimensions 2x3x4 requires 2*6 + 2*12 + 2*8 = 52 square feet of wrapping paper plus 6 square feet of slack, for a total of 58 square feet.
--A present with dimensions 1x1x10 requires 2*1 + 2*10 + 2*10 = 42 square feet of wrapping paper plus 1 square foot of slack, for a total of 43 square feet.
--All numbers in the elves' list are in feet. How many total square feet of wrapping paper should they order?
--
--Your puzzle answer was 1586300.
--
----- Part Two ---
--The elves are also running low on ribbon. Ribbon is all the same width, so they only have to worry about the length they need to order, 
--which they would again like to be exact.
--
--The ribbon required to wrap a present is the shortest distance around its sides, or the smallest perimeter of any one face. 
--Each present also requires a bow made out of ribbon as well; the feet of ribbon required for the perfect bow is equal to the cubic feet of volume of the present. 
--Don't ask how they tie the bow, though; they'll never tell.
--
--For example:
--
--A present with dimensions 2x3x4 requires 2+2+3+3 = 10 feet of ribbon to wrap the present plus 2*3*4 = 24 feet of ribbon for the bow, for a total of 34 feet.
--A present with dimensions 1x1x10 requires 1+1+1+1 = 4 feet of ribbon to wrap the present plus 1*1*10 = 10 feet of ribbon for the bow, for a total of 14 feet.
--How many total feet of ribbon should they order?
--
--Your puzzle answer was 3737498.

constant presents = split("""
29x13x26
11x11x14
27x2x5
6x10x13
15x19x10
26x29x15
8x23x6
17x8x26
20x28x3
23x12x24
11x17x3
19x23x28
25x2x25
1x15x3
25x14x4
23x10x23
29x19x7
17x10x13
26x30x4
16x7x16
7x5x27
8x23x6
2x20x2
18x4x24
30x2x26
6x14x23
10x23x9
29x29x22
1x21x14
22x10x13
10x12x10
20x13x11
12x2x14
2x16x29
27x18x26
6x12x20
18x17x8
14x25x1
30x15x22
17x18x7
28x23x24
15x12x25
14x7x20
29x23x8
24x5x22
6x22x8
1x15x26
14x5x1
24x28x28
17x23x23
4x15x7
23x8x11
6x15x1
23x18x13
17x1x26
23x13x17
2x18x8
22x22x1
10x22x6
28x29x20
22x21x25
14x8x23
12x30x14
8x7x5
3x30x15
4x3x29
25x18x3
16x7x16
4x3x8
9x16x30
20x28x3
28x24x6
4x18x2
23x18x5
22x4x30
15x30x9
7x12x12
3x22x29
12x1x9
9x2x25
17x11x10
25x24x7
7x27x26
26x4x12
29x2x26
19x24x12
23x23x3
26x28x16
18x4x16
25x30x18
29x19x19
16x3x27
29x25x29
18x19x5
14x21x30
19x13x26
19x10x15
9x4x7
18x6x6
24x25x29
9x12x27
15x3x22
30x17x21
18x19x28
9x11x12
8x28x22
11x3x4
28x17x20
24x18x15
11x12x13
6x19x24
28x4x5
28x22x23
13x29x2
9x16x15
29x28x1
10x18x30
19x11x12
26x28x25
23x17x13
25x1x21
17x1x27
17x27x28
28x13x15
14x13x25
11x29x7
22x29x5
13x6x14
23x18x13
25x7x17
18x9x20
21x11x2
28x11x13
13x25x1
19x29x25
16x29x4
10x21x10
7x25x17
5x9x3
1x15x6
8x27x29
23x6x30
22x22x29
6x20x30
26x25x29
10x19x19
20x30x9
5x30x24
17x10x27
30x14x30
8x17x4
7x18x6
3x5x4
24x17x15
14x20x17
22x27x15
18x14x15
23x9x11
21x16x29
7x18x21
9x3x29
10x13x4
2x30x4
23x20x4
8x22x21
29x28x4
13x16x25
21x9x11
7x26x26
13x23x30
19x7x10
9x23x21
21x9x17
9x21x15
20x29x22
23x13x15
19x25x2
12x11x30
20x21x6
21x6x17
24x26x9
29x21x29
29x26x16
6x16x1
2x12x6
6x7x20
7x2x22
6x22x4
13x11x27
25x27x14
11x8x6
26x11x14
30x3x29
27x21x20
15x16x26
6x22x10
11x9x25
23x13x6
13x9x3
30x22x13
29x23x14
25x19x6
7x29x11
19x18x5
29x25x13
25x24x27
1x9x12
22x9x17
14x12x28
19x21x17
13x25x17
14x25x12
4x14x30
7x15x28
3x6x25
6x2x16
15x19x11
17x30x20
20x23x7
26x21x6
26x29x24
2x4x30
4x22x18
13x3x28
27x6x21
5x3x27
12x7x11
28x11x9
12x9x2
1x22x20
15x13x28
14x19x16
28x20x3
20x4x9
26x7x26
18x19x25
7x1x13
20x23x29
27x26x8
11x15x15
10x21x23
29x2x11
21x28x20
3x18x23
26x17x17
14x26x17
20x7x17
18x12x8
4x8x8
8x15x23
24x29x5
1x25x8
1x28x17
16x18x13
29x24x22
13x16x10
14x7x16
15x11x29
12x15x19
17x6x28
4x3x9
15x16x8
29x27x11
2x24x20
4x21x3
29x24x27
18x22x22
7x8x18
20x7x8
19x9x2
20x17x2
2x29x10
19x25x1
28x9x3
29x27x20
7x21x7
10x4x22
26x8x5
26x14x1
5x27x9
2x18x3
3x27x17
30x17x23
30x11x20
4x6x7
6x29x27
30x16x20
24x30x28
19x20x26
18x1x25
26x12x12
19x15x29
16x21x24
23x13x26
25x16x10
8x9x18
24x14x1
24x15x21
19x9x14
8x23x11
22x2x16
29x9x26
3x16x25
15x20x30
3x11x12
15x2x3
13x7x4
2x7x27
9x26x11
30x24x19
28x17x21
10x8x2
11x15x26
10x12x20
24x24x27
25x26x16
13x4x20
25x13x11
12x22x3
20x7x1
12x18x6
26x8x20
14x2x7
23x12x1
26x24x24
27x26x23
26x17x5
17x24x2
26x5x6
23x5x1
5x18x30
24x21x19
5x28x11
21x20x14
25x4x22
26x24x11
7x5x8
13x1x30
5x1x6
14x5x2
8x11x7
13x20x1
17x30x14
29x22x10
12x26x3
27x17x3
26x27x4
5x26x17
22x11x19
8x26x3
24x19x22
7x1x4
6x27x30
4x28x14
16x14x18
4x5x20
19x25x4
15x15x1
10x14x14
16x18x24
21x27x15
5x5x10
1x7x13
16x2x8
13x15x11
3x25x10
20x29x8
12x3x2
10x13x12
25x27x1
11x30x19
7x19x13
27x6x18
16x21x19
21x29x5
16x23x12
29x19x15
5x5x10
27x15x1
13x16x22
29x19x5
8x12x9
3x18x5
13x25x3
5x9x21
10x20x16
9x9x11
23x21x1
22x2x15
27x8x13
23x7x3
26x30x15
29x15x16
16x27x13
2x18x9
10x27x8
20x9x25
10x2x17
16x13x13
21x26x1
27x26x24
9x30x16
19x17x28
25x15x1
10x26x6
10x11x11
5x26x25
30x4x15
9x8x23
14x25x7
8x28x8
28x18x24
4x4x25
16x25x11
17x27x8
15x16x9
24x13x21
17x3x27
27x5x26
8x27x12
29x2x8
24x23x30
1x30x21
6x18x20
13x14x12
25x30x23
24x6x24
12x7x21
11x6x8
8x30x30
26x3x12
28x6x5
18x7x1
7x6x20
14x16x18
11x22x15
4x20x10
19x24x19
8x24x11
4x9x10
6x6x22
10x9x29
1x5x28
19x25x29
20x30x3
15x13x13
9x9x24
20x14x29
26x24x13
2x25x8
10x26x2
12x19x12
18x6x20
4x5x14
26x27x10
16x26x20
3x21x15
2x26x18
14x11x17
26x26x25
10x1x11
17x19x19
27x28x26
9x2x10
19x30x15
23x30x14
15x3x20
2x14x22
21x18x8
22x4x29
19x6x29
9x26x29
16x10x9
22x12x22
13x28x14
25x14x28
28x3x30
10x17x1
10x27x22
10x23x19
14x25x9
11x24x8
30x25x10
22x13x28
2x7x6
11x20x8
9x22x14
19x16x9
11x24x4
11x17x2
6x4x10
26x10x10
12x14x5
27x10x3
15x3x6
11x7x19
22x10x12
21x26x10
13x20x3
27x8x8
1x24x23
24x9x22
23x17x23
3x28x19
2x20x28
23x17x24
26x1x4
4x1x12
5x6x16
13x22x13
25x21x21
20x21x12
9x24x25
17x16x12
12x28x9
18x16x27
29x12x2
30x12x15
24x11x10
4x9x22
4x24x5
19x11x5
6x25x6
1x20x17
22x8x21
11x26x4
16x19x3
8x12x8
13x2x18
10x5x11
8x12x17
21x2x5
26x17x26
23x18x17
28x11x14
1x4x27
29x5x28
5x9x10
5x7x25
20x15x27
15x11x17
12x14x1
29x14x4
18x14x18
14x25x24
26x14x18
13x8x11
30x1x23
3x4x12
12x24x9
8x6x16
14x15x30
12x30x8
22x11x18
16x30x28
17x18x4
13x14x23
2x28x8
3x28x30
29x30x8
4x6x26
6x30x17
11x30x30
19x4x3
12x15x20
22x28x4
26x30x2
6x12x7
1x10x5
25x29x7
17x9x18
16x21x29
21x14x7
15x16x11
26x6x15
8x24x7
2x20x4
2x9x3
19x8x13
18x7x22
27x14x17
2x13x8
18x15x26
15x27x27
18x11x15
1x29x20
21x12x11
20x2x15
28x23x9
1x1x17
7x23x9
30x9x27
9x16x18
15x24x28
30x11x18
29x26x10
9x5x25
2x1x19
14x3x14
6x3x6
30x15x20
20x17x27
28x10x9
14x24x28
17x11x6
12x3x6
8x8x15
23x14x21
11x21x7
5x13x30
4x29x25
30x28x24
18x4x9
3x15x6
13x9x19
30x14x7
7x9x9
17x11x26
24x26x13
16x21x16
27x17x25
2x21x11
9x11x27
3x3x7
13x8x14
20x20x26
13x29x22
30x11x1
7x10x19
27x5x9
23x17x15
21x6x13
24x15x16
18x4x14
18x16x6
22x11x18
14x2x5
15x3x7
10x20x29
16x1x10
30x23x1
10x15x11
17x14x5
22x8x13
7x11x28
26x17x3
2x23x2
28x13x19
18x12x28
22x23x16
14x12x1
20x8x19
17x19x13
29x2x12
2x26x27
29x16x4
13x8x18
16x15x30
23x16x2
28x8x27
21x8x23
13x20x26
19x6x17
17x30x15
7x4x30
2x13x30
18x7x19
4x13x27
8x6x5
18x20x25
2x3x30
23x27x13
22x30x4
23x25x25
23x16x19
25x3x1
5x6x15
11x29x12
25x24x7
16x7x20
20x3x2
12x27x15
16x10x12
1x3x14
22x1x26
2x24x18
11x29x16
15x2x9
10x1x24
21x8x11
30x11x23
6x30x21
13x27x29
14x6x5
18x29x19
12x4x28
29x3x14
10x30x28
5x7x15
14x1x10
9x25x14
7x24x18
28x17x21
18x13x25
26x15x1
21x1x19
12x16x21
4x6x13
7x15x26
17x19x5
12x28x2
1x20x19
27x7x5
17x26x8
12x15x19
5x23x10
8x2x8
16x13x12
14x27x1
26x29x3
24x16x14
14x13x13
7x22x23
2x9x30
4x27x8
26x27x15
23x1x6
25x29x18
5x18x1
20x8x20
5x10x25
30x25x15
7x22x25
28x26x17
29x4x1
21x11x27
20x9x8
25x22x12
2x11x11
23x2x16
23x27x20
2x13x28
27x2x24
11x1x17
12x4x27
16x20x22
30x12x10
5x15x4
5x2x27
12x4x25
1x16x4
27x4x4
21x16x3
27x26x3
24x6x6
24x12x12
20x20x25
8x29x2
21x4x5
2x4x8
4x13x19
3x20x10
12x15x16
6x5x4
12x16x20
22x19x17
8x17x22
25x16x15
7x1x19
10x1x7
23x23x5
28x6x12
2x25x12
10x27x12
24x27x19
14x14x20
4x1x5
16x27x29
20x20x24
28x24x30
6x15x15
9x15x30
23x26x3
17x24x21
22x25x25
18x29x10
20x25x1
24x11x16
20x7x21
20x7x9
7x26x2
5x18x1
16x26x28
4x10x18
27x30x21
26x9x9
8x16x14
6x27x8
28x9x20
13x13x4
9x18x16
18x15x18
22x19x14
14x10x17
25x29x11
1x18x19
8x11x26
18x6x14
30x24x13
27x1x27
15x9x3
2x29x17
2x26x21
22x9x9
20x20x20
22x28x2
26x5x16
11x3x14
21x16x16
18x26x7
18x30x6
7x11x12
15x10x2
27x2x16
27x30x24
28x14x24
7x4x8
6x28x15
13x19x1
22x26x30
7x30x24
2x17x21
19x26x2
19x24x15
14x23x2
21x27x15
30x15x14
21x29x5
23x30x2
4x1x2
15x5x13
21x2x30
20x7x16
1x21x25
2x25x1
12x29x5
28x13x16
26x3x12
29x20x23
28x12x20
4x30x8
16x15x16
6x16x29
2x28x13
24x25x2
26x15x22
17x20x11
18x12x7
19x1x18
8x27x13
22x16x8
19x26x17
13x11x10
22x12x3
13x12x14
29x17x9
6x14x10
14x20x10
8x26x9
25x13x22
3x30x25
14x28x1
30x29x12
3x17x15
3x24x14
28x24x22
16x6x1
20x25x14
17x17x13
6x19x27
10x15x20
8x23x20
7x29x21
18x9x25
10x5x22
2x27x27
16x18x30
15x5x12
26x29x29
28x11x10
9x29x28
24x15x23
26x9x10
5x1x25
22x27x16
7x29x3
1x3x5
8x7x29
19x21x11
28x13x30
17x16x20
5x10x25
9x14x15
15x14x23
16x4x17
21x8x2
9x9x8
22x22x4
10x2x27
12x19x10
15x29x4
22x14x7
29x18x5
1x7x27
24x1x15
23x23x26
12x17x23
26x10x24
8x22x2
8x1x10
22x19x12
2x23x13
11x27x25
26x15x27
27x7x21
18x9x6
22x21x22
7x12x26
23x21x13
14x3x8
5x9x28
29x29x15
27x25x23
12x2x24
8x2x20
29x19x4
12x24x29
2x27x28
14x20x9
28x6x25
18x29x8
19x11x30
15x11x23
18x7x7
14x20x14
26x18x22
27x25x13
12x10x30
30x2x7
28x10x1
18x10x30
22x11x5
22x16x3
25x15x9
5x10x24
4x28x8
19x24x18
3x4x25
14x4x30
11x26x3
12x12x12
26x7x24
3x2x14
1x27x7
2x2x13
3x26x26
12x4x11
12x17x20
4x19x30
5x18x10
17x6x18
19x30x20
11x2x17
30x13x19
22x23x7
17x28x2
5x17x30
7x11x4
21x26x18
15x28x4
5x6x27
12x6x16
9x17x12
27x20x5
14x5x20
27x14x6
2x14x21
4x28x30
24x5x1
19x29x29
11x23x1
8x16x21
3x17x19
10x13x5
20x21x16
23x3x6
27x26x11
3x2x22
14x3x5
10x9x8""","\n")
procedure day2()
    integer sqft = 0
    integer ribbon = 0
    for i=1 to length(presents) do
        integer {{l,w,h}} = scanf(presents[i],"%dx%dx%d")
        sequence sides = {l*w,w*h,h*l}
        sqft += 2*sum(sides) + min(sides)
        ribbon += 2*sum(sort({l,w,h})[1..2])+l*w*h
    end for
    ?sqft -- 1586300
    ?ribbon -- 3737498
end procedure

--- Day 3: Perfectly Spherical Houses in a Vacuum ---
--===================================================
-----------------------------------------------------
--Santa is delivering presents to an infinite two-dimensional grid of houses.
--
--He begins by delivering a present to the house at his starting location, and then an elf at the North Pole calls him via radio 
--and tells him where to move next. Moves are always exactly one house to the north (^), south (v), east (>), or west (<). 
--After each move, he delivers another present to the house at his new location.
--
--However, the elf back at the north pole has had a little too much eggnog, and so his directions are a little off, and Santa 
--ends up visiting some houses more than once. How many houses receive at least one present?
--
--For example:
--
--> delivers presents to 2 houses: one at the starting location, and one to the east.
--^>v< delivers presents to 4 houses in a square, including twice to the house at his starting/ending location.
--^v^v^v^v^v delivers a bunch of presents to some very lucky children at only 2 houses.

constant moves = 
">^^v^<>v<<<v<v^>>v^^^<v<>^^><^<<^vv>>>^<<^>><vv<<v^<^^><>>><>v<><>^^<^^^<><>>vv>vv>v<<^>v<>^>v<v^<>v>><>^v<<<<v^vv^><v>v^>>>vv>v^^"&
"^<^^<>>v<^^v<>^<vv^^<^><<>^>><^<>>><><vv><>v<<<><><>v><<>^^^^v>>^>^<v<<vv^^<v<^<^>^^v^^^^^v<><^v><<><^v^>v<<>^<>^^v^<>v<v^>v>^^<vv"&
"^v><^<>^v<><^><v^><><><<<<>^vv^>^vvvvv><><^<vv^v^v>v<<^<^^v^<>^<vv><v<v^v<<v<<^^>>^^^v^>v<><^vv<<^<>v<v><><v^^><v<>^^>^^>v^>^<<<<v"&
"><v<<>v><^v>^>><v^^<^>v<vvvv<>>>>>^v^^>v<v<^<vv>^>^vv^>vv^^v<<^<^^<>v>vv^v>><>>>v^>^>^^v<>^<v<<>^vv>v^<<v>v<<><v>^vvv<v<vvv^v<vv<v"&
"^^^>v><<^<>><v^^>^v^>>^v<^<><v<>>v^<>>v<>>v^^^><^>>vvvv>^v<^><<>>^<>^>vv><v<<>>^^>v^^^><^<<^^v>v<^<<>v>^^vvv^v^>v^<>^^<>v^v>v>v<v^"&
">vv>^^v<>v>>^<>><>v>v^<<vvvv<vvv><v^<^>^v<>>^><v>><>^<v>v<v>vv^>>vvv<>v>v<v^>>^>>v<<>^<>^<>>>^v<<<^<^v>vv^>><<><v^>^v^^^v<>^^vv><>"&
"><>>^>v^<v<>v<>>^<<^v>^^^<>^v^><>v<<v>vv^>vv<<>>><<^v^<>v<vv>>>^^<>^><<^>vv>>^<<v^^vv<>>><v>v><^<v<<>>>^^<>>^<^v><>vv^^^v>vvv>^><<"&
">^^>^<<v^<v<^v<<>vvv<^<<>^>^v<vv<^>vvv>v>vv^<v^><>>^vv<^^^vv><^vv<v^<><v^vvv><<^>^^><v<<vv^>v<vv<v>^<>^v<<>v<v^v^>^>^>v<<^vvv<<<v>"&
"^^>^<<<<>vv>>^<>^>>>v<v>^^<v^<v<>>>vv>^^v<<>>>^^v><<<v<v<^v<>^^><v<^v<<v^><><^<><v<^^v>>><v^^v<<v^><^<><<v^>><^<>v>v^<><^<v>^v^>^>"&
"^vv^>^^<<vv^>vv<^vvv<>>^^<^>v^>^>^<v^><v<v>>>v<<<><^v<<><^<vv^v^^^>v<^^<v^vvv<v<><v<vv<^vv<>vv<v^<>>vvvvv<<>^v^v>vv>>>vvv^^<^<^<><"&
">v<v>><^v><^<<<>><<<v>^>v<>^>^v>>^<>v^<^>><<>^<v>^>^^^>^^<v>>>><>^v^v><<<<vv^<vv<>vv>v<>v^<v^>v><>>>v^<><^vvv>vv^<^<<^<^^v>^>>>v<^"&
"<^v^^<^<^>>><v>vv>^<<><>^>>v>^<<>><^<>v<>vv^^>^>vvv^v<<^<^^<vv<>^vvv<^^v^vv^>>v<^>^^<v^<>v<^<^vv>v<<vv>vv>^>vvv>>>^^>v<>^v>v^<^>>v"&
">^^v>>>>v^<v>v<^>v<v<<>>^v<^^<v><^<>>^<<vv^>>v<<v>^v<>><^>vv<v<^>>^^<vvvvvvvvv>>>v<v<>v^<>>^vv<v^^v<<^vvv^<<^><>vv<><<>>v>vv^><>>^"&
"^v^>>v^v^><<<>>^^<^v<<^<>>>>^<^>v^><<^>v<^v<^>>^^<<<<><^<^v^v<>>^v<^<<vv^<><^^vv><v^v^v>^>>^>^vv^>^v<v^v<<vvv^><>>^v^^><>v>vv><^>>"&
"vv<vvv<<<<^<>vvv^v<v>^<v<^>^<^<v<><>v^^^^<<vv<^^vv<v>><<v^><>>><v^>^v><^>^><vv^<><^<v>><<^vv<>>v^<<v<>v><v<><><vv>^>>v^<^<v>^><>>>"&
"<^><v^v<>>>^^<^>v<v>vvv<>^<<><v^^>^>>v<^v>^>v>>>vv>v>>v^^^<^<vvv^<>^>^<v^<v^v>v>^>vv>vvv<>v<^>v>^^>>^<vv^^v>v^^^^^v^vv><^<><>^>vv<"&
"^>>^vvvv^^^>^<vv>^v<<^><^^>^<>^^>^<<v<^>>>^><<^^>v^v>>^>vvvv>^^v><v>>vv><<<vv<^>v>^^^<v>v^vvv<^><<^>^<>^><<<<<v^<<vv^v>^<>v<v>^>^>"&
"><>v^v<^vv^^>vv<<v^v>vv^vvv<<<<>^v<v^^v^v>v<<v>^^<>^vv^^>^>^v^vv^>>v^vv^^<vv><<v^v^^v><vv<^vvv<vv^^<<v>v^v^^^^v<^<^>v>^>v>^vv^v^^<"&
"v<^vvvv<<<>^<^^^<^^<>^<><vv<^^<<^>>><v^vvvv>^<>>^^>v^^v^<<v^^^<<<><^<v^v^^v<v^<>v><<v<>^v>v<^><^>vv^^<vvv<^v>>v>^<><v^><^^^<v^>>vv"&
"<<<<<^<>^v^v>^vv^<>v>v<^>vv<<^vv>vv<v<><>>v>><v<^<^^>><<v^v<<^><v<^<vv<v<<vv^>^<<><^^>^<^>>^<vv>><v<<vvv<^^v^>^^<^v>^v<v<>v><v^v^<"&
"<^<><<v<<^v>v<<>>^>v>>v>>v<^<<^<^>>>v>^^^v><^>^^>>v<<>^v><v>vvv^vv<<<>vvv<<>^>>>v<v<v^<^<^>^<^>v^^v<^^<v<>v<>>^^>^v^>v<<<<^<>v^><<"&
"<v>>>><<v^<^vv>v>><>>^<<<^<^^>v<>>v<>vv<<^<<><<^>v^^^vv^>vvvv>>v>v^><<v<>vv^<<><<vvv>^>>>^<<<^<^<<v>^>v<>>v>>vv^^><<<<^^^v>><<^><v"&
"><v^^><v<<v^^v^^v>>v<><><<>^><v><^<vv>><^v<>v<vvv<>^>><v>>v<^><<v>^<>^v><^><^^<v>^><^^v^<<><>>^>v^<^v^vv<><^>vv^>v^vvv^<>>^><^<^<>"&
"^<<v^v<^v><>^v<v>>^>>^v^vv>><vv><v^^<<^v^<>^v<<>^><^>><v>>v<<<v^^vv<>^^v>>><><><<v^<<<v^<^^><v^>v^^vv<v^<>>vv^<^v<>^v>>v^v>v<^^vv>"&
"<>^v<<>v^<>v^>>v>vvv<^><><^^>^vv^>>v^>^<^^<><>><<>^^^><^v^v><<<><<^v^vv>v>><^>>><v^>v<v><><v^v<>v^^>>v<<>v>v<v<v<^^<><>v^^<>>v<^v<"&
"v>v<><v<v>^<<>v>vv^^<>>^^^<>^^>^v>v>>>^v^v><v^^<><v>^^v^v<^<^^><<v<^<^<>^<>><<>^>>^>^^><v><>v<><>><<<>>>>vv>>>^>>^v<^>v^^^v<<vv>><"&
"<<^<<<>>>>>^>vv<^v^<>^<v^>^v><v>vvv<>>>^v^^^v<<<<>>^^<vv<^<^^>^<>v<^<<<>><>>v<^<>^<vvv<^<>><><<v>^^^>^^<<v<v^>^^v^>><<^vv><v>^v>>^"&
"<v>v>^^>^v>^vvv<>v^v^^<><vv>vv^>>><>v<^><v<v^<><<<>^v>^v<<<^>^>^>v^v<<><vvv<<v^^<><v>^>>><vv>><v>>v^<vv>>vv<<^v^v<<><^v<vv>>>vv<>>"&
">>^vv>v^<>vv>v^v<v^><v<^^^^^>vv<><<vvv^<v><^<vv><^^^vv^<>^^^^<^><^<>v^<v^v<<^v<<^^<>>^<v^^>>>vv<vvv<>v<<>><^vvv^<<^^<<>>>^<>>>v^^>"&
"<>><<>><v^v>>>>>><>>><v^<<vvv^>v<>>v^<>vv<><^^^^v^<<^<v^vv><<^^>v<^vvv^v>>v>^>>v>^^><<v^<>v<>vv<^v^vv><v><<vv^v>>v^>>v<^^^>^><<v<>"&
"^><>v>>>vvv<v<vv<^>>^v<v>^<^^^^^v><>v><>v^v^v<v^vv^v>vvvv<>vv<<<vv<v<<>^<^>^^v^<<>^<v><^><v<v<><<>v^<<^<><vv>v<<^v>>^v<><v>^>>^^><"&
">v^<^<vvv^>^>^<<<<>vv>^v^v<^^^<vv>><>^^<<v<^<^^>>>v^v<<^^^<v<v<^<>^v<v><v^vv^^v^^v^^<vv<>^<><vv^<^v^<<^><<vvv>^^<^^^<^v>^>^vv><<<^"&
"v<v>vv>v<>v^v<v^>v^>>>v^v<>^v<<>^vv>v>v>v^<^>v^^<^>^^^^vv>^^><^>vv^>>^^v>><<<<^><>v<>^<v<vv^>^^><<^><v>v^>^^<^>>><>><v^v<v^<v<vv^v"&
"^<<^<vvv>>><vv<^^>>^>^><<v^<>>v>v^v^^><<>vv^v>v^<v><^<>^^<^>v>^<><<<v>^<^<^>^>^>^^v^<<^^v^^<^<>><^>v>>^^<>^^^<<<<v^>^v<^vv>^<<<v<>"&
"<<v<>vv>>>v><>>><>>v<<<vv><>^v>v<^>><^><><v<>^v^>^v>^v<<><<^<>>v>^><>^>><>><^<v^><v^^<><v><^^>^v^^<>v^<v^<^v<v^^^^^v^<<^>^^^<^v><>"&
"^^<<<><<<<<^^>v^vvvv>v<>>vv<^>^v^>v<^vv^v<<><<v>v^v>^^><><^<v^>v><vv><>>><<>^vv<>v>>v<^v>>>v<v>v>v>^vv<<>^^vv<v<^v^<v<v>vv<>^<^<vv"&
"<v^<^v^^><<>^>><^v>vv^^v<<^^><<>v^^<><><v^^<v^v>^>^>^>v<^<v>^v^^>v<>vvv<^v<v^v><<v^><<^^><^<<v^v^>v<>^>v><><v>^<v<v>^<^^^>^v<<><<>"&
"<>vv>v^<>v^><v^v<v><><<v>v<vv><<v>>v>^<<<>vv>>vvv>^^vv^v^^<^^<>v^^<>v>>^^>^>^>v>><^>><>>^<<>><^>v<<<<<<<^v^v<v^<v^^>^<><<v<^>v^>v^"&
"vv<<^^vv^>>>>^<>v<^v<>v<vv<^>>v^vv>vv><vv<<^>v>><vv>>>vv^<<<<vv^>v<<<<^^>^^v^><<^<v^>v^>^^<v<>vvv^>^<>vvv<v<^^>v^<<v>><>v<v<>^^<vv"&
"v>^>vv><><<<^^vv<v^<v<>v<>><<v><^vv^>^<^>^^^<<<v>vv^<^<<>^>^<vv>v><v<<^><^>^^<vv^v^^>>>>vv^><^^vv><>^<v^v>v<vv>v><<<v>v<v>^><v^^><"&
"v>v<^v^>>^^<v^>^^>vv>>vv^><^vv^vv<<^>vv>^v<v><vv><v<vvvvv>^^v^v><v>>>^vv<>v>^^^^<^>><>^v^^^>v<^^<<^^v<vv<>vvv<^>><><^>>^><^<>v<v<<"&
"><<v><v^v<>><^>v><<v^<v>v<^<vv^v^v^>vvv^^>v>^<vv^>v^v^<>v>^>>vv>><^^<v<<>^vv<><><<^v<v>v<<vv><>><^v<v>>v^>vvv^v^<<^><v<>^vv^>v^<v<"&
"^>>v<v><v><v>>^<<<v^<><<>v>^>^^<v<>>^<>^>^><<<^<<^<<^>^v>>><vvv>><<<<v>>>>>>>^<^v<^>v<>vv<><>v>>^>>^>vv^^><<^<v<v>>^^<<^>v<^>>vv>^"&
"<>v><^>v<vv>>>>>>^v<^<<<v^><vv<<>>vv<<><v<><<<v<^<v<>>v<^^^^v^^<^^^<^<vv><<^>><>v<<>v<v<>>>><>v^vv>^>^>>vv^v<v<<><^v>vv^><v<<>v^v<"&
"^>vv<<^^v><^>>^^vv<^<>>v^^>><v>^v>>>^>>v>v<>v<^vv><>^<<^>vv>>><><>v^><>v^>v>v><^v<><v<v>^v<<^vv^><^^>><^^^<<<^>v>^v>>><^>><^>>>^^^"&
"<^>vv<><<<v^>^<^^>>^^^v^v^v>v<v>>>><^>>>v>^vv<<^^^<^^vv>v<<><v<<^^>v>><<v^^><^>^<^>^v^>v><^<^vv>v>><>^<<vv<<v>v<vv<v>^>^>><^^<v>^v"&
"^v<><<>vvv<^<v>^><>^>vvv>>>^><<>><v^^<^<<^v>>^v<v<vv>vv^v^>v<<vvv<^^v^v>^<^>>^>v<^>^v<<><<<^>^<^^^>vv<^^^^vv<v<^^v<<<<v<^v^<><v<<^"&
"><<>vv>>><^<^<>>>^>^>>^<<<<<^^v>^>^<>vvv^^<^><^>^^v>^vv^><v^<^<<v^<vvv<<^v<><^><^>>>v>^v>^>^v<vv^v>><v><^><v^^>v^>^<><<><>v<v^>vvv"&
"^>^>>v<>^><^>^><vvv>^^v^v>v<>^v^><^>>v>v^><<<^>>^<>^<>>v><>>v^>^>^^<>>v^>^<vvvv<^vvvv^>>vv^<v^v>^vv<>v<>^<v<v>v>^^><^>vv^<^v^<<^<^"&
"<><vv<^v<^v><>>>^v^<<^><^>vv<v>v<^>vv^>v<<<>^<><v<^^^>v><^^<>^<^<v^vv^<<^>><<v^v<^vvv<<<>>vvvv^v^^^>v<>>><<>vvv<<^^^>v>v>>v<<v<v^v"&
"^>^^v>^><^<><<v^<v<v^^^><>v^^^<v>vv<>^>^^vv>^<<^v<^v><v>>>^>>><^<<>^v>>^>vv<<<v<>^<v><v^<^<>v>v^^v^>><<^v<<<<>v>v>v^^<^><>^^<<<v>v"&
"v<>>>^>>v<><v^>^<><vv>v>v^v<v^<^>>^>><<^^<^^v<vv<>><<<v<^<<^^^>vvv^<vvv<^>vv><>><<<^<v^v^^<<^vvv^^<^<><<>^<^<>>vvv<>^<>v^v<><>>v^v"&
"><<>>>vvv>v<>^>>^><^>vv<<>>v<<^><>v>>^^<v>^>^<<>><^<<vv<^<vv^vv><>>>><^<v>^>vv<v><>^<>vvvvv^vv<<v<>>>^<<><>^^vvv>>>vv<<^^><^v^^v<>"&
"^^>^><^>v^^^^v<^<<vv<vv<>vv^^>v^vv>v><>>vv>^<^<v^v^>>v^v^^v>^>vv^>v<vvvv<^v<^v>^v>^^v<<^>^^<<>^><^v>>>vv^>^^>vvvv>>v<^<v>^>>>v^<><"&
"^<^^<v>vv^^><v>v^<>^^^>>><^^v>v>^<<>^<v^>vvv^>^^^><v<^>>v<v>>^v><<><<>v<^<<>^><>^>vv>^<v>^^v<<^v^vvv^^>^vv^<^>^>^^v>v^>^<<><<^>v>>"&
"vv^vv><v>>^<<^<v^^<^<v^^vv^><^^<^^><v^^>v^^^<^<>^<>>^v<^vvv^^v^<><^>>>>>v><><<<>vv<^v>><<>vvv<><<vv<<<^>v^^>>^>^v>><><^^v<>><>>v^>"&
"^<vv><<<>><><<v>^^<>>v<><^<vv>vv<^v>^<<<<v<^<<^^>>^<><^>><<>^>v>^^^v>>^<^^v><v^v>^><<><>>^>>^<<v<>^v<>^>^<v>>vv>^vvv<<v<<^>^>^<<^^"&
"<>^^^^vvv<>^vv<vvvvv^^>^^<^>>><>v^<><^<<^>v^^v<>>^vv<>v^^<>>v^vvvvv<<v^<v^^>>><vvvvv>><^>vv>v^v^<v<^>^^><^>^^^^v<><^v<<>v^>v>>vv<<"&
">^<v^^>vvv>^^<v^<>vv^><>><v^^v<>^>>^>v><>>^^v>^>^>>>^>v<^v>v>^<^^^^^>>v<v<>>v<<^>^<v<<>^^>><<^><>v<>^^^vv<>^^>><<^^>v>vv>vv>v^>^v>"&
"v^^<>>><<v><v<<>>v><>vvv^^v>^^>^vvvv^>^<>^vvvv><v><v<>>><>^<^vv<>^v<^v<>^vvv<<>><vvv^>>^><<vv^<v^>^<v<<^^>^^<^^v^>v<>v^v><>><v^^>>"&
"^vvv><^vv>v^<^<^v>>v^^>^vvv^<v^^v^^>v<^<>>^<>>>^^<><^^vv<>^vv^<>>>>^^<<^^<>vv^^><>^^<v<<v>^<v^^>^v<><><>vvv>^v^>>vv<<^v<<>><v>^><^"&
">>>^<^<^^>vv^<<^<>>^^><><<v>^^<v>>v<<vvvv>^v^vv>><^^<<^>>v>v<^^^<^><^^vv>^vv<^<vv<>v><^<><v><^^^>>^<><^<v>>>>v^<v>>>>>v<><^^>v<^<^"&
">><v<>^>vv>^^v^v^<<v<><<<^v^><<^<><<<<v<^>><<<>v>>vv><vv<><<^<^<><vv>^^^^<>v<<<<v>vv<>vv^^^>><>vv^><>>^vv<<><^^vv<>v^>>^<<>^<v^<^>v<"

--- Part Two ---
--The next year, to speed up the process, Santa creates a robot version of himself, Robo-Santa, to deliver presents with him.
--
--Santa and Robo-Santa start at the same location (delivering two presents to the same starting house), then take turns 
--moving based on instructions from the elf, who is eggnoggedly reading from the same script as the previous year.
--
--This year, how many houses receive at least one present?
--
--For example:
--
--^v delivers presents to 3 houses, because Santa goes north, and then Robo-Santa goes south.
--^>v< now delivers presents to 3 houses, and Santa and Robo-Santa end up back where they started.
--^v^v^v^v^v now delivers presents to 11 houses, with Santa going one direction and Robo-Santa going the other.

procedure day3()
    integer w=1, h=1, x=1, y=1, count = 1
    sequence houses = {{1}}

    for i=1 to length(moves) do
        integer ch = moves[i]
        switch ch do
            case '^': y -= 1
            case 'v': y += 1
            case '<': x -= 1
            case '>': x += 1
            default: ?9/0
        end switch
        if x<1 then
            for j=1 to length(houses) do
                houses[j] = 0&houses[j]
            end for
            w += 1
            x += 1
        elsif x>w then
            for j=1 to length(houses) do
                houses[j] = houses[j]&0
            end for
            w += 1
        end if
        if y<1 then
            houses = prepend(houses,repeat(0,w))
            h += 1
            y += 1
        elsif y>h then
            houses = append(houses,repeat(0,w))
            h += 1
        end if
        if houses[y,x]=0 then
            count += 1
        end if
        houses[y,x] += 1
    end for
    ?count  -- 2592

-- (switching to a dictionary-based solution for part 2)
--moves = "^v"
--moves = "^>v<"
--moves = "^v^v^v^v^v"
    integer hd = new_dict()
    setd({1,1},2,hd)
    count = 1
    integer sx = 1, sy = 1, rx = 1, ry = 1, s = true

    for i=1 to length(moves) do
        integer ch = moves[i]
        if s then
            switch ch do
                case '^': sy -= 1
                case 'v': sy += 1
                case '<': sx -= 1
                case '>': sx += 1
                default: ?9/0
            end switch
            {x,y} = {sx,sy}
        else
            switch ch do
                case '^': ry -= 1
                case 'v': ry += 1
                case '<': rx -= 1
                case '>': rx += 1
                default: ?9/0
            end switch
            {x,y} = {rx,ry}
        end if
        integer was = getd({x,y},hd)
        if was=0 then
            count += 1
        end if
        setd({x,y},was+1,hd)
        s = not s
    end for
    destroy_dict(hd)
    ?count  -- 2360
end procedure

--- Day 4: The Ideal Stocking Stuffer ---
--Santa needs help mining some AdventCoins (very similar to bitcoins) to use as gifts for all the economically forward-thinking little girls and boys.
--
--To do this, he needs to find MD5 hashes which, in hexadecimal, start with at least five zeroes. 
--The input to the MD5 hash is some secret key (your puzzle input, given below) followed by a number in decimal. 
--To mine AdventCoins, you must find Santa the lowest positive number (no leading zeroes: 1, 2, 3, ...) that produces such a hash.
--
--For example:
--
--If your secret key is abcdef, the answer is 609043, because the MD5 hash of abcdef609043 starts with five zeroes (000001dbbfa...), and it is the lowest such number to do so.
--If your secret key is pqrstuv, the lowest number it combines with to make an MD5 hash starting with five zeroes is 1048970; that is, the MD5 hash of pqrstuv1048970 looks like 000006136ef....
--Your puzzle input is yzbqklnj.

--<copied from demo\rosetta\md5.exw>

--NOTE: this achieves ~8000 hashes/s - not brilliant perhaps, but there is
--      <strikethrough>not much</strikethrough> *zero* point improving it,
--      other than for stupid pointless benchmarks such as this...

function uxor(atom data1,atom data2)
atom result = xor_bits(data1,data2)
    if result<0 then result += #100000000 end if
    return result
end function

function uor(atom data1,atom data2)
atom result = or_bits(data1,data2)
    if result<0 then result += #100000000 end if
    return result
end function

function r32(atom a)
    return remainder(a,#100000000)
end function

function rol(atom word,integer bits)
-- left rotate the bits of a 32-bit number by the specified number of bits
    return r32(word*power(2,bits))+floor(word/power(2,32-bits))
end function

constant K =
{#d76aa478, #e8c7b756, #242070db, #c1bdceee, #f57c0faf, #4787c62a, #a8304613, #fd469501,
 #698098d8, #8b44f7af, #ffff5bb1, #895cd7be, #6b901122, #fd987193, #a679438e, #49b40821,
 #f61e2562, #c040b340, #265e5a51, #e9b6c7aa, #d62f105d, #02441453, #d8a1e681, #e7d3fbc8,
 #21e1cde6, #c33707d6, #f4d50d87, #455a14ed, #a9e3e905, #fcefa3f8, #676f02d9, #8d2a4c8a,
 #fffa3942, #8771f681, #6d9d6122, #fde5380c, #a4beea44, #4bdecfa9, #f6bb4b60, #bebfbc70,
 #289b7ec6, #eaa127fa, #d4ef3085, #04881d05, #d9d4d039, #e6db99e5, #1fa27cf8, #c4ac5665,
 #f4292244, #432aff97, #ab9423a7, #fc93a039, #655b59c3, #8f0ccc92, #ffeff47d, #85845dd1,
 #6fa87e4f, #fe2ce6e0, #a3014314, #4e0811a1, #f7537e82, #bd3af235, #2ad7d2bb, #eb86d391}

constant m_block = {1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,
                    2, 7,12, 1, 6,11,16, 5,10,15, 4, 9,14, 3, 8,13,
                    6, 9,12,15, 2, 5, 8,11,14, 1, 4, 7,10,13,16, 3,
                    1, 8,15, 6,13, 4,11, 2, 9,16, 7,14, 5,12, 3,10}

constant c_words = {#67452301,#efcdab89,#98badcfe,#10325476}

sequence words

function divide_in_words(sequence message)
-- Divides the string into words (32-bit numbers)
sequence res
    res = repeat(0,length(message)/4)
    for word=1 to length(message)/4 do
        res[word] = bytes_to_int(message[word*4-3..word*4])
    end for
    return res
end function

procedure process_block(sequence block)
-- Updates the words according to the contents of the block
atom a,b,c,d

    block = divide_in_words(block)

    a = words[1]
    b = words[2]
    c = words[3]
    d = words[4]

    -- Round 1
    for step=1 to 16 by 4 do
        a = r32(b+rol(r32(a+block[m_block[step  ]]+K[step  ]+uor(and_bits(b,c),and_bits(not_bits(b),d))), 7))
        d = r32(a+rol(r32(d+block[m_block[step+1]]+K[step+1]+uor(and_bits(a,b),and_bits(not_bits(a),c))),12))
        c = r32(d+rol(r32(c+block[m_block[step+2]]+K[step+2]+uor(and_bits(d,a),and_bits(not_bits(d),b))),17))
        b = r32(c+rol(r32(b+block[m_block[step+3]]+K[step+3]+uor(and_bits(c,d),and_bits(not_bits(c),a))),22))
    end for

    -- Round 2
    for step=17 to 32 by 4 do
        a = r32(b+rol(r32(a+block[m_block[step  ]]+K[step  ]+uor(and_bits(b,d),and_bits(c,not_bits(d)))), 5))
        d = r32(a+rol(r32(d+block[m_block[step+1]]+K[step+1]+uor(and_bits(a,c),and_bits(b,not_bits(c)))), 9))
        c = r32(d+rol(r32(c+block[m_block[step+2]]+K[step+2]+uor(and_bits(d,b),and_bits(a,not_bits(b)))),14))
        b = r32(c+rol(r32(b+block[m_block[step+3]]+K[step+3]+uor(and_bits(c,a),and_bits(d,not_bits(a)))),20))
    end for

    -- Round 3
    for step=33 to 48 by 4 do
        a = r32(b+rol(r32(a+block[m_block[step  ]]+K[step  ]+uxor(b,xor_bits(c,d))), 4))
        d = r32(a+rol(r32(d+block[m_block[step+1]]+K[step+1]+uxor(a,xor_bits(b,c))),11))
        c = r32(d+rol(r32(c+block[m_block[step+2]]+K[step+2]+uxor(d,xor_bits(a,b))),16))
        b = r32(c+rol(r32(b+block[m_block[step+3]]+K[step+3]+uxor(c,xor_bits(d,a))),23))
    end for

    -- Round 4
    for step=49 to 64 by 4 do
        a = r32(b+rol(r32(a+block[m_block[step  ]]+K[step  ]+uxor(c,or_bits(b,not_bits(d)))), 6))
        d = r32(a+rol(r32(d+block[m_block[step+1]]+K[step+1]+uxor(b,or_bits(a,not_bits(c)))),10))
        c = r32(d+rol(r32(c+block[m_block[step+2]]+K[step+2]+uxor(a,or_bits(d,not_bits(b)))),15))
        b = r32(c+rol(r32(b+block[m_block[step+3]]+K[step+3]+uxor(d,or_bits(c,not_bits(a)))),21))
    end for

    -- Update the words
    words[1] = r32(words[1]+a)
    words[2] = r32(words[2]+b)
    words[3] = r32(words[3]+c)
    words[4] = r32(words[4]+d)
end procedure

function pad_message(sequence message)
-- Add bytes to the end of the message so it can be divided
-- in an exact number of 64-byte blocks.
integer bytes_to_add
    bytes_to_add = 64-remainder(length(message)+9,64)
    if bytes_to_add=64 then bytes_to_add = 0 end if

    message = message&#80&repeat(0,bytes_to_add)&
              int_to_bytes(length(message)*8)&{0,0,0,0}

    return message
end function


function md5(sequence message)
-- Given a string, returns a 16-byte hash of it.

    words = c_words -- Initialize the H words

    message = pad_message(message)  -- Add bytes to the message

    -- Process each 64-byte block
    for block=1 to length(message) by 64 do
        process_block(message[block..block+63])
    end for

    -- Convert hash into bytes
    return int_to_bytes(words[1])&    -- Return the hash
           int_to_bytes(words[2])&
           int_to_bytes(words[3])&
           int_to_bytes(words[4])
end function
--<copied from demo\rosetta\md5.exw>

--constant fmt = "0x%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\n"
--                  1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6
--printf(1,fmt,md5("abcdef609043")) -- 0x000001dbbfa3a5c83a2d506429c7b00e
--printf(1,fmt,md5("pqrstuv1048970"))   -- 0x000006136ef2ff3b291c85725f17325c
procedure day4()
    atom t1 = time()+1

--  for i=1 to 1000000000 do
    for i=282749 to 1000000000 do
        string test = sprintf("yzbqklnj%d",i),
               hash = md5(test)
        if hash[1]='\0' and hash[2]='\0' and hash[3]<#10 then
            ?test -- "yzbqklnj282749"
            exit
        end if
        if time()>t1 then
            printf(1,"%d\r",i)
            t1 = time()+1
        end if
    end for

--  for i=282749 to 1000000000 do
    for i=9962624 to 1000000000 do
        string test = sprintf("yzbqklnj%d",i),
               hash = md5(test)
        if hash[1]='\0' and hash[2]='\0' and hash[3]='\0' then
            ?test -- "yzbqklnj9962624"
            exit
        end if
        if time()>t1 then
            printf(1,"%d\r",i)
            t1 = time()+1
        end if
    end for
end procedure

--- Day 5: Doesn't He Have Intern-Elves For This? ---
--Santa needs help figuring out which strings in his text file are naughty or nice.
--
--A nice string is one with all of the following properties:
--
--It contains at least three vowels (aeiou only), like aei, xazegov, or aeiouaeiouaeiou.
--It contains at least one letter that appears twice in a row, like xx, abcdde (dd), or aabbccdd (aa, bb, cc, or dd).
--It does not contain the strings ab, cd, pq, or xy, even if they are part of one of the other requirements.
--For example:
--
--ugknbfddgicrmopn is nice because it has at least three vowels (u...i...o...), a double letter (...dd...), and none of the disallowed substrings.
--aaa is nice because it has at least three vowels and a double letter, even though the letters used by different rules overlap.
--jchzalrnumimnmhp is naughty because it has no double letter.
--haegwjzuvuyypxyu is naughty because it contains the string xy.
--dvszwmarrgswjxmb is naughty because it contains only one vowel.
--How many strings are nice?

--- Part Two ---
--Realizing the error of his ways, Santa has switched to a better model of determining whether a string is naughty or nice. 
--None of the old rules apply, as they are all clearly ridiculous.
--
--Now, a nice string is one with all of the following properties:
--
--It contains a pair of any two letters that appears at least twice in the string without overlapping, 
--like xyxy (xy) or aabcdefgaa (aa), but not like aaa (aa, but it overlaps).
--It contains at least one letter which repeats with exactly one letter between them, like xyx, abcdefeghi (efe), or even aaa.
--For example:
--
--qjhvhtzxzqqjkmpb is nice because is has a pair that appears twice (qj) and a letter that repeats with exactly one letter between them (zxz).
--xxyxx is nice because it has a pair that appears twice and a letter that repeats with one between, even though the letters used by each rule overlap.
--uurcxstgmygtbstg is naughty because it has a pair (tg) but no repeat with a single letter between them.
--ieodomkazucvgmuy is naughty because it has a repeating letter with one between (odo), but no pair that appears twice.
--How many strings are nice under these new rules?

constant strings = """
zgsnvdmlfuplrubt
vlhagaovgqjmgvwq
ffumlmqwfcsyqpss
zztdcqzqddaazdjp
eavfzjajkjesnlsb
urrvucyrzzzooxhx
xdwduffwgcptfwad
orbryxwrmvkrsxsr
jzfeybjlgqikjcow
mayoqiswqqryvqdi
iiyrkoujhgpgkcvx
egcgupjkqwfiwsjl
zbgtglaqqolttgng
eytquncjituzzhsx
dtfkgggvqadhqbwb
zettygjpcoedwyio
rwgwbwzebsnjmtln
esbplxhvzzgawctn
vnvshqgmbotvoine
wflxwmvbhflkqxvo
twdjikcgtpvlctte
minfkyocskvgubvm
sfxhhdhaopajbzof
sofkjdtalvhgwpql
uqfpeauqzumccnrc
tdflsbtiiepijanf
dhfespzrhecigzqb
xobfthcuuzhvhzpn
olgjglxaotocvrhw
jhkzpfcskutwlwge
zurkakkkpchzxjhq
hekxiofhalvmmkdl
azvxuwwfmjdpjskj
arsvmfznblsqngvb
ldhkzhejofreaucc
adrphwlkehqkrdmo
wmveqrezfkaivvaw
iyphmphgntinfezg
blomkvgslfnvspem
cgpaqjvzhbumckwo
ydhqjcuotkeyurpx
sbtzboxypnmdaefr
vxrkhvglynljgqrg
ttgrkjjrxnxherxd
hinyfrjdiwytetkw
sufltffwqbugmozk
tohmqlzxxqzinwxr
jbqkhxfokaljgrlg
fvjeprbxyjemyvuq
gmlondgqmlselwah
ubpwixgxdloqnvjp
lxjfhihcsajxtomj
qouairhvrgpjorgh
nloszcwcxgullvxb
myhsndsttanohnjn
zjvivcgtjwenyilz
qaqlyoyouotsmamm
tadsdceadifqthag
mafgrbmdhpnlbnks
aohjxahenxaermrq
ovvqestjhbuhrwlr
lnakerdnvequfnqb
agwpwsgjrtcjjikz
lhlysrshsmzryzes
xopwzoaqtlukwwdu
xsmfrfteyddrqufn
ohnxbykuvvlbbxpf
bbdlivmchvzfuhoc
vtacidimfcfyobhf
tinyzzddgcnmiabd
tcjzxftqcqrivqhn
vgnduqyfpokbmzim
revkvaxnsxospyow
ydpgwxxoxlywxcgi
wzuxupbzlpzmikel
nscghlafavnsycjh
xorwbquzmgmcapon
asmtiycegeobfxrn
eqjzvgkxgtlyuxok
mmjrskloposgjoqu
gceqosugbkvytfto
khivvoxkvhrgwzjl
qtmejuxbafroifjt
ttmukbmpoagthtfl
bxqkvuzdbehtduwv
gvblrpzjylanoggj
cltewhyjxdbmbtqj
fbkgedqvomdipklj
uxvuplhenqawfcjt
fkdjmayiawdkycva
gnloqfgbnibzyidh
kyzorvtopjiyyyqg
drckpekhpgrioblt
tvhrkmbnpmkkrtki
khaldwntissbijiz
aoojqakosnaxosom
xfptccznbgnpfyqw
moqdwobwhjxhtrow
chfwivedutskovri
gprkyalfnpljcrmi
pwyshpwjndasykst
xuejivogihttzimd
bugepxgpgahtsttl
zufmkmuujavcskpq
urybkdyvsrosrfro
isjxqmlxwtqmulbg
pxctldxgqjqhulgz
hclsekryiwhqqhir
hbuihpalwuidjpcq
ejyqcxmfczqfhbxa
xljdvbucuxnnaysv
irqceqtqwemostbb
anfziqtpqzqdttnz
cgfklbljeneeqfub
zudyqkuqqtdcpmuo
iuvhylvznmhbkbgg
mpgppmgfdzihulnd
argwmgcvqqkxkrdi
pdhrfvdldkfihlou
cbvqnjrvrsnqzfob
lkvovtsqanohzcmm
vxoxjdyoylqcnyzt
kurdpaqiaagiwjle
gwklwnazaxfkuekn
rbaamufphjsjhbdl
tzbrvaqvizhsisbd
pbcqlbfjvlideiub
hiwoetbfywaeddtx
fjirczxtuupfywyf
omeoegeyyospreem
ozbbpupqpsskvrjh
pzvcxkvjdiyeyhxa
odclumkenabcsfzr
npdyqezqdjqaszvm
yodkwzmrhtexfrqa
rjcmmggjtactfrxz
mioxfingsfoimual
aqskaxjjborspfaa
wientdsttkevjtkf
tdaswkzckmxnfnct
voucjhzvkkhuwoqk
boaaruhalgaamqmh
iufzxutxymorltvb
pfbyvbayvnrpijpo
obztirulgyfthgcg
ntrenvhwxypgtjwy
ephlkipjfnjfjrns
pkjhurzbmobhszpx
gqbnjvienzqfbzvj
wjelolsrbginwnno
votanpqpccxqricj
bxyuyiglnmbtvehi
qyophcjfknbcbjrb
anoqkkbcdropskhj
tcnyqaczcfffkrtl
rsvqimuqbuddozrf
meppxdrenexxksdt
tyfhfiynzwadcord
wayrnykevdmywycf
mhowloqnppswyzbu
tserychksuwrgkxz
xycjvvsuaxsbrqal
fkrdsgaoqdcqwlpn
vrabcmlhuktigecp
xgxtdsvpaymzhurx
ciabcqymnchhsxkc
eqxadalcxzocsgtr
tsligrgsjtrnzrex
qeqgmwipbspkbbfq
vzkzsjujltnqwliw
ldrohvodgbxokjxz
jkoricsxhipcibrq
qzquxawqmupeujrr
mizpuwqyzkdbahvk
suupfxbtoojqvdca
ywfmuogvicpywpwm
uevmznxmsxozhobl
vjbyhsemwfwdxfxk
iyouatgejvecmtin
tcchwpuouypllcxe
lgnacnphdiobdsef
uoxjfzmdrmpojgbf
lqbxsxbqqhpjhfxj
knpwpcnnimyjlsyz
fezotpoicsrshfnh
dkiwkgpmhudghyhk
yzptxekgldksridv
pckmzqzyiyzdbcts
oqshafncvftvwvsi
yynihvdywxupqmbt
iwmbeunfiuhjaaic
pkpkrqjvgocvaxjs
ieqspassuvquvlyz
xshhahjaxjoqsjtl
fxrrnaxlqezdcdvd
pksrohfwlaqzpkdd
ravytrdnbxvnnoyy
atkwaifeobgztbgo
inkcabgfdobyeeom
ywpfwectajohqizp
amcgorhxjcybbisv
mbbwmnznhafsofvr
wofcubucymnhuhrv
mrsamnwvftzqcgta
tlfyqoxmsiyzyvgv
ydceguvgotylwtea
btyvcjqhsygunvle
usquiquspcdppqeq
kifnymikhhehgote
ybvkayvtdpgxfpyn
oulxagvbavzmewnx
tvvpekhnbhjskzpj
azzxtstaevxurboa
nfmwtfgrggmqyhdf
ynyzypdmysfwyxgr
iaobtgubrcyqrgmk
uyxcauvpyzabbzgv
fbasfnwiguasoedc
mgmjoalkbvtljilq
szgkxiqkufdvtksb
xgfzborpavdmhiuj
hmuiwnsonvfgcrva
zolcffdtobfntifb
mvzgcsortkugvqjr
pbbpgraaldqvzwhs
zvsxegchksgnhpuv
kdpdboaxsuxfswhx
jdfggigejfupabth
tpeddioybqemyvqz
mxsntwuesonybjby
tzltdsiojfvocige
ubtdrneozoejiqrv
fusyucnhncoxqzql
nlifgomoftdvkpby
pyikzbxoapffbqjw
hzballplvzcsgjug
ymjyigsfehmdsvgz
vpqgyxknniunksko
ffkmaqsjxgzclsnq
jcuxthbedplxhslk
ymlevgofmharicfs
nyhbejkndhqcoisy
rjntxasfjhnlizgm
oqlnuxtzhyiwzeto
tntthdowhewszitu
rmxyoceuwhsvfcua
qpgsjzwenzbxyfgw
sumguxpdkocyagpu
ymfrbxwrawejkduu
hetgrtmojolbmsuf
qzqizpiyfasgttex
qnmoemcpuckzsshx
ddyqiihagcmnxccu
oirwxyfxxyktgheo
phpaoozbdogbushy
uctjdavsimsrnvjn
aurbbphvjtzipnuh
hpbtrubopljmltep
pyyvkthqfsxqhrxg
jdxaiqzkepxbfejk
ukgnwbnysrzvqzlw
lfkatkvcssnlpthd
ucsyecgshklhqmsc
rwdcbdchuahkvmga
rxkgqakawgpwokum
hbuyxeylddfgorgu
tbllspqozaqzglkz
rqfwizjlbwngdvvi
xuxduyzscovachew
kouiuxckkvmetvdy
ycyejrpwxyrweppd
trctlytzwiisjamx
vtvpjceydunjdbez
gmtlejdsrbfofgqy
jgfbgtkzavcjlffj
tyudxlpgraxzchdk
gyecxacqitgozzgd
rxaocylfabmmjcvt
tornfzkzhjyofzqa
kocjcrqcsvagmfqv
zfrswnskuupivzxb
cunkuvhbepztpdug
pmpfnmklqhcmrtmf
tfebzovjwxzumxap
xpsxgaswavnzkzye
lmwijdothmxclqbr
upqxhmctbltxkarl
axspehytmyicthmq
xdwrhwtuooikehbk
tpggalqsytvmwerj
jodysbwnymloeqjf
rxbazvwuvudqlydn
ibizqysweiezhlqa
uexgmotsqjfauhzp
ldymyvumyhyamopg
vbxvlvthgzgnkxnf
pyvbrwlnatxigbrp
azxynqididtrwokb
lwafybyhpfvoawto
ogqoivurfcgspytw
cinrzzradwymqcgu
sgruxdvrewgpmypu
snfnsbywuczrshtd
xfzbyqtyxuxdutpw
fmpvjwbulmncykbo
ljnwoslktrrnffwo
ceaouqquvvienszn
yjomrunrxjyljyge
xpmjsapbnsdnbkdi
uetoytptktkmewre
eixsvzegkadkfbua
afaefrwhcosurprw
bwzmmvkuaxiymzwc
gejyqhhzqgsrybni
gjriqsfrhyguoiiw
gtfyomppzsruhuac
ogemfvmsdqqkfymr
jgzbipsygirsnydh
zghvlhpjnvqmocgr
ngvssuwrbtoxtrka
ietahyupkbuisekn
gqxqwjizescbufvl
eiprekzrygkncxzl
igxfnxtwpyaamkxf
soqjdkxcupevbren
fspypobyzdwstxak
qstcgawvqwtyyidf
gsccjacboqvezxvd
bfsblokjvrqzphmc
srezeptvjmncqkec
opmopgyabjjjoygt
msvbufqexfrtecbf
uiaqweyjiulplelu
pbkwhjsibtwjvswi
xwwzstmozqarurrq
nytptwddwivtbgyq
ejxvsufbzwhzpabr
jouozvzuwlfqzdgh
gfgugjihbklbenrk
lwmnnhiuxqsfvthv
bzvwbknfmaeahzhi
cgyqswikclozyvnu
udmkpvrljsjiagzi
zzuhqokgmisguyna
ekwcdnjzuctsdoua
eueqkdrnzqcaecyd
lnibwxmokbxhlris
fdrbftgjljpzwhea
iabvuhhjsxmqfwld
qgogzkynrgejakta
mfcqftytemgnpupp
klvhlhuqhosvjuqk
gdokmxcgoqvzvaup
juududyojcazzgvr
fyszciheodgmnotg
yfpngnofceqfvtfs
cahndkfehjumwavc
dxsvscqukljxcqyi
cqukcjtucxwrusji
vevmmqlehvgebmid
ahswsogfrumzdofy
ftasbklvdquaxhxb
tsdeumygukferuif
ybfgbwxaaitpwryg
djyaoycbymezglio
trzrgxdjqnmlnzpn
rumwchfihhihpqui
ffrvnsgrnzemksif
oizlksxineqknwzd
cirqcprftpjzrxhk
zrhemeqegmzrpufd
kqgatudhxgzlgkey
syjugymeajlzffhq
nlildhmgnwlopohp
flcszztfbesqhnyz
ohzicmqsajyqptrw
ebyszucgozsjbelq
enxbgvvcuqeloxud
ubwnvecbsmhkxwuk
noifliyxvlkqphbo
hazlqpetgugxxsiz
ihdzoerqwqhgajzb
ivrdwdquxzhdrzar
synwycdvrupablib
mqkdjkntblnmtvxj
qmmvoylxymyovrnq
pjtuxskkowutltlq
gchrqtloggkrjciz
namzqovvsdipazae
yfokqhkmakyjzmys
iapxlbuoiwqfnozm
fbcmlcekgfdurqxe
ednzgtczbplwxjlq
gdvsltzpywffelsp
oaitrrmpqdvduqej
gseupzwowmuuibjo
dfzsffsqpaqoixhh
tclhzqpcvbshxmgx
cfqkptjrulxiabgo
iraiysmwcpmtklhf
znwjlzodhktjqwlm
lcietjndlbgxzjht
gdkcluwjhtaaprfo
vbksxrfznjzwvmmt
vpfftxjfkeltcojl
thrmzmeplpdespnh
yafopikiqswafsit
xxbqgeblfruklnhs
qiufjijzbcpfdgig
ikksmllfyvhyydmi
sknufchjdvccccta
wpdcrramajdoisxr
grnqkjfxofpwjmji
lkffhxonjskyccoh
npnzshnoaqayhpmb
fqpvaamqbrnatjia
oljkoldhfggkfnfc
ihpralzpqfrijynm
gvaxadkuyzgbjpod
onchdguuhrhhspen
uefjmufwlioenaus
thifdypigyihgnzo
ugqblsonqaxycvkg
yevmbiyrqdqrmlbw
bvpvwrhoyneorcmm
gbyjqzcsheaxnyib
knhsmdjssycvuoqf
nizjxiwdakpfttyh
nwrkbhorhfqqoliz
ynsqwvwuwzqpzzwp
yitscrgexjfclwwh
dhajwxqdbtrfltzz
bmrfylxhthiaozpv
frvatcvgknjhcndw
xlvtdmpvkpcnmhya
pxpemuzuqzjlmtoc
dijdacfteteypkoq
knrcdkrvywagglnf
fviuajtspnvnptia
xvlqzukmwbcjgwho
bazlsjdsjoeuvgoz
nslzmlhosrjarndj
menvuwiuymknunwm
uavfnvyrjeiwqmuu
yrfowuvasupngckz
taevqhlrcohlnwye
skcudnogbncusorn
omtnmkqnqedsajfv
yqmgsqdgsuysqcts
odsnbtyimikkbmdd
vuryaohxdvjllieb
dhaxldeywwsfamlo
opobvtchezqnxpak
pzfnegouvsrfgvro
rzkcgpxdslzrdktu
ksztdtqzxvhuryam
ctnqnhkcooqipgkh
pyqbbvrzdittqbgm
koennvmolejeftij
rvzlreqikqlgyczj
xrnujfoyhonzkdgd
mmsmhkxaiqupfjil
ypjwoemqizddvyfd
qgugcxnbhvgahykj
cviodlsrtimbkgmy
xbfbbechhmrjxhnw
psuipaoucfczfxkp
hdhwcpeuptgqqvim
gsxlruhjeaareilr
vgyqonnljuznyrhk
eewezahlumervpyu
iiolebrxfadtnigy
tdadlrodykrdfscn
ocvdtzjxrhtjurpo
gidljbuvuovkhhrf
qwfcpilbjwzboohd
xzohxonlezuiupbg
vslpbkkqgvgbcbix
pivzqrzfxosbstzn
fyqcfboevcqmbhhs
yqsrneacnlxswojx
heicqpxxyrwcbsjz
yzynmnnoumkmlbeh
bncadbjdvvmczylw
hlnjskgfzbgmigfn
fphpszymugpcykka
zbifcktanxpmufvy
saklpkhoyfeqbguy
nqtqfcfxmpivnjyo
locygrwerxlsvzqm
qqflecydqvlogjme
njklmixvgkzpgppf
ugzkpjwjflaswyma
lriousvkbeftslcy
nsvsauxzfbbotgmh
tblcpuhjyybrlica
hqwshxcilwtmxrsf
xojwroydfeoqupup
tikuzsrogpnohpib
layenyqgxdfggloc
nqsvjvbrpuxkqvmq
ivchgxkdlfjdzxmk
uoghiuosiiwiwdws
twsgsfzyszsfinlc
waixcmadmhtqvcmd
zkgitozgrqehtjkw
xbkmyxkzqyktmpfi
qlyapfmlybmatwxn
ntawlvcpuaebuypf
clhebxqdkcyndyof
nrcxuceywiklpemc
lmurgiminxpapzmq
obalwqlkykzflxou
huvcudpiryefbcye
zlxbddpnyuyapach
gqfwzfislmwzyegy
jhynkjtxedmemlob
hmrnvjodnsfiukex
pstmikjykzyavfef
wuwpnscrwzsyalyt
hksvadripgdgwynm
tvpfthzjleqfxwkh
xpmrxxepkrosnrco
qjkqecsnevlhqsly
jjnrfsxzzwkhnwdm
pehmzrzsjngccale
bsnansnfxduritrr
ejzxkefwmzmbxhlb
pceatehnizeujfrs
jtidrtgxopyeslzl
sytaoidnamfwtqcr
iabjnikomkgmyirr
eitavndozoezojsi
wtsbhaftgrbqfsmm
vvusvrivsmhtfild
qifbtzszfyzsjzyx
ifhhjpaqatpbxzau
etjqdimpyjxiuhty
fvllmbdbsjozxrip
tjtgkadqkdtdlkpi
xnydmjleowezrecn
vhcbhxqalroaryfn
scgvfqsangfbhtay
lbufpduxwvdkwhmb
tshipehzspkhmdoi
gtszsebsulyajcfl
dlrzswhxajcivlgg
kgjruggcikrfrkrw
xxupctxtmryersbn
hljjqfjrubzozxts
giaxjhcwazrenjzs
tyffxtpufpxylpye
jfugdxxyfwkzqmgv
kbgufbosjghahacw
xpbhhssgegmthwxb
npefofiharjypyzk
velxsseyxuhrpycy
sglslryxsiwwqzfw
susohnlpelojhklv
lfnpqfvptqhogdmk
vtcrzetlekguqyle
jlyggqdtamcjiuxn
olxxqfgizjmvigvl
cyypypveppxxxfuq
hewmxtlzfqoqznwd
jzgxxybfeqfyzsmp
xzvvndrhuejnzesx
esiripjpvtqqwjkv
xnhrwhjtactofwrd
knuzpuogbzplofqx
tihycsdwqggxntqk
xkfywvvugkdalehs
cztwdivxagtqjjel
dsaslcagopsbfioy
gmowqtkgrlqjimbl
ctcomvdbiatdvbsd
gujyrnpsssxmqjhz
nygeovliqjfauhjf
mmgmcvnuppkbnonz
bhipnkoxhzcotwel
wkwpgedgxvpltqid
mliajvpdocyzcbot
kqjhsipuibyjuref
zqdczykothbgxwsy
koirtljkuqzxioaz
audpjvhmqzvhzqas
cxyhxlhntyidldfx
iasgocejboxjgtkx
abehujmqotwcufxp
fmlrzqmazajxeedl
knswpkekbacuxfby
yvyalnvrxgstqhxm
sjnrljfrfuyqfwuw
ssaqruwarlvxrqzm
iaxbpeqqzlcwfqjz
uwyxshjutkanvvsc
uxwrlwbblcianvnb
nodtifgrxdojhneh
mloxjfusriktxrms
lkfzrwulbctupggc
gcrjljatfhitcgfj
tkdfxeanwskaivqs
ypyjxqtmitwubbgt
ssxbygzbjsltedjj
zdrsnoorwqfalnha
xlgmissaiqmowppd
azhbwhiopwpguiuo
fydlahgxtekbweet
qtaveuqpifprdoiy
kpubqyepxqleucem
wlqrgqmnupwiuory
rwyocktuqkuhdwxz
abzjfsdevoygctqv
zsofhaqqghncmzuw
lqbjwjqxqbfgdckc
bkhyxjkrqbbunido
yepxfjnnhldidsjb
builayfduxbppafc
wedllowzeuswkuez
gverfowxwtnvgrmo
tpxycfumxdqgntwf
lqzokaoglwnfcolw
yqsksyheyspmcdqt
vufvchcjjcltwddl
saeatqmuvnoacddt
dxjngeydvsjbobjs
ucrcxoakevhsgcep
cajgwjsfxkasbayt
hknzmteafsfemwuv
xxwhxwiinchqqudr
usfenmavvuevevgr
kxcobcwhsgyizjok
vhqnydeboeunnvyk
bgxbwbxypnxvaacw
bwjzdypacwgervgk
rrioqjluawwwnjcr
fiaeyggmgijnasot
xizotjsoqmkvhbzm
uzphtrpxwfnaiidz
kihppzgvgyoncptg
hfbkfrxwejdeuwbz
zgqthtuaqyrxicdy
zitqdjnnwhznftze
jnzlplsrwovxlqsn
bmwrobuhwnwivpca
uuwsvcdnoyovxuhn
nmfvoqgoppoyosaj
hxjkcppaisezygpe
icvnysgixapvtoos
vbvzajjgrmjygkhu
jinptbqkyqredaos
dpmknzhkhleawfvz
ouwwkfhcedsgqqxe
owroouiyptrijzgv
bewnckpmnbrmhfyu
evdqxevdacsbfbjb
catppmrovqavxstn
dqsbjibugjkhgazg
mkcldhjochtnvvne
sblkmhtifwtfnmsx
lynnaujghehmpfpt
vrseaozoheawffoq
ytysdzbpbazorqes
sezawbudymfvziff
vrlfhledogbgxbau
bipdlplesdezbldn
ermaenjunjtbekeo
eyaedubkthdecxjq
gbzurepoojlwucuy
rsiaqiiipjlouecx
beqjhvroixhiemtw
buzlowghhqbcbdwv
ldexambveeosaimo
fpyjzachgrhxcvnx
komgvqejojpnykol
fxebehjoxdujwmfu
jnfgvheocgtvmvkx
qmcclxxgnclkuspx
rsbelzrfdblatmzu
vexzwqjqrsenlrhm
tnfbkclwetommqmh
lzoskleonvmprdri
nnahplxqscvtgfwi
ubqdsflhnmiayzrp
xtiyqxhfyqonqzrn
omdtmjeqhmlfojfr
cnimgkdbxkkcnmkb
tapyijgmxzbmqnks
byacsxavjboovukk
awugnhcrygaoppjq
yxcnwrvhojpuxehg
btjdudofhxmgqbao
nzqlfygiysfuilou
nubwfjdxavunrliq
vqxmmhsbmhlewceh
ygavmcybepzfevrp
kgflmrqsvxprkqgq
iaqyqmcaedscmakk
cvbojnbfmrawxzkh
jjjrprbnlijzatuw
lcsudrrfnnggbrmk
qzgxbiavunawfibc
gnnalgfvefdfdwwg
nokmiitzrigxavsc
etzoxwzxqkkhvais
urxxfacgjccieufi
lqrioqhuvgcotuec
dydbaeyoypsbftra
hhrotenctylggzaf
evctqvzjnozpdxzu
tbpvithmorujxlcp
pllbtcbrtkfpvxcw
fzyxdqilyvqreowv
xdleeddxwvqjfmmt
fcldzthqqpbswoin
sgomzrpjfmvgwlzi
axjyskmtdjbxpwoz
hcvaevqxsmabvswh
lfdlsfcwkwicizfk
isjbwpzdognhoxvm
oqnexibqxlyxpluh
zqfbgodsfzwgcwuf
kvmnwruwsjllbldz
kghazimdyiyhmokj
uiktgpsxpoahofxn
zkdwawxargcmidct
ftbixlyiprshrjup
nofhmbxififwroeg
mcdaqrhplffxrcdt
fbjxnwojcvlawmlb
rizoftvwfdhiwyac
eduogrtyhxfwyars
zoikunqxgjwfqqwr
zxwbbpmvctzezaqh
nghujwyeabwdqnop
vcxamijpoyyksogn
jnckdbuteoqlsdae
jurfqqawafmsiqwv
inepmztrzehfafie
tznzkyvzodbrtscf
xewbavjeppflwscl
ucndzsorexjlnplo
jpxbctscngxgusvu
mfmygcllauzuoaok
oibkuxhjmhxhhzby
zjkslwagmeoisunw
avnnxmopdgvmukuu
jmaargejcwboqhkt
yacmpeosarsrfkrv
iqhgupookcaovwgh
ebjkdnxwtikqzufc
imdhbarytcscbsvb
ifyibukeffkbqvcr
aloighmyvwybtxhx
yszqwrutbkiwkxjg
xyholyzlltjhsuhp
gykhmrwucneoxcrf
badkdgqrpjzbabet
sunaucaucykwtkjj
pumqkglgfdhneero
usgtyuestahlydxq
xmfhflphzeudjsjm
knywgmclisgpootg
mtojnyrnvxtweuzb
uuxufbwfegysabww
vobhwwocqttlbsik
yuydfezeqgqxqmnd
wbqgqkwbibiilhzc
sfdmgxsbuzsawush
ilhbxcfgordyxwvp
ahqoavuysblnqaeg
plwgtvpgotskmsey
ewjcmzkcnautrrmp
tyekgzbznlikcyqj
bqzctiuaxpriuiga
bimvbfjkiupyqiys
mpqtbcxfhwymxncw
htemlptvqhharjgb
mqbsmsruwzzxgcxc
zjyedjwhnvteuaid
pzoelkoidwglpttc
efydnsvlfimvwxhx
gfyhgoeiyjcgfyze
deqtomhwopmzvjlt
casafubtkoopuaju
yylsfarntbucfulg
mgjwsormkjsrrxan
lkkenpupgmjpnqqd
tegweszyohsoluot
lihsfdwxmxvwdxna
rrefrjjxerphejwb
guuazonjoebhymtm
ysofqzmfmyneziki
lmjgaliatcpduoal
qzthcpjwtgahbebr
wvakvephyukmpemm
simxacxxzfoaeddw
aetgqmiqzxbvbviz
jxlmhdmqggevrxes
mmuglnjmuddzgaik
svopsqhtrslgycgc
xnvcsiiqrcjkvecn
kkvumxtvashxcops
bduflsdyeectvcgl
vfrxbwmmytjvqnsj
eeqtdneiyiaiofxw
crtbgknfacjtwkfl
uuutuoxdsxolpbhd
lcrztwzreaswovtn
htorkvnvujmjdqzj
wttzuzvrzlyhfzyf
oraewznfwgdsnhuk
rctlkqqvkwbgrcgk
cfehrsrqhzyiwtmz
kbvxwcumjkhvjpui
xxlocexbmniiakfo
gtknkkzvykmlqghl
kcjuxvkuimhwqrtk
vohekwkuyuoacuww
vorctgughscysyfo
zmjevqplngzswxyq
qhswdrhrijnatkyo
joakcwpfggtitizs
juzlwjijcmtswdtq
icbyaqohpkemhkip
rpdxgpzxncedmvzh
rozkmimbqhbhcddv
wkkypomlvyglpfpf
jcaqyaqvsefwtaya
ghvmtecoxlebdwnf
lqrcyiykkkpkxvqt
eqlarfazchmzotev
vqwndafvmpguggef
dbfxzrdkkrusmdke
cmjpjjgndozcmefj
hbrdcwjuyxapyhlo
mmforetykbosdwce
zynfntqwblbnfqik
sodwujfwlasznaiz
yyvrivjiqnxzqkfp
uldbskmmjbqllpnm
fyhhrmrsukeptynl
hpfjekktvdkgdkzl
bozhkoekcxzeorob
uvpptyfrzkvmtoky
hkhfprmjdpjvfkcb
igxzwktwsqhsivqu
qceomwysgkcylipb
cglateoynluyeqgc
xcsdfkpeguxgvpfh
owjhxlcncdgkqyia
rpbmrpcesiakqpna
lueszxiourxsmezb
zelvsowimzkxliwc
vzxbttoobtvdtkca
pfxvzphzwscqkzsi
edsjorainowytbzu
ipsegdaluoiphmnz
mkhueokfpemywvuw
urxdnumhylpafdlc
ggluurzavsxkvwkl
ctclphidqgteakox
tfobosynxsktajuk
jzrmemhxqmzhllif
eemwekimdfvqslsx
yjkwpzrbanoaajgq
rlxghzanuyeimfhx
hozbgdoorhthlqpv
obkbmflhyanxilnx
xojrippyxjmpzmsz
ukykmbfheixuviue
qivlmdexwucqkres
rmyxxipqkarpjmox
fgaftctbvcvnrror
raawxozucfqvasru
dinpjbdfjfizexdh
gybxubwnnbuyvjcr
qrqitdvyoneqyxcg
jqzcfggayzyoqteo
cikqpvxizpdbmppm
stfpldgyhfmucjjv
slzbcuihmimpduri
aufajwfrsorqqsnl
iylmzraibygmgmqj
lcdyfpcqlktudfmu
pmomzzsdpvgkkliw
zpplirgtscfhbrkj
mvhyerxfiljlotjl
ofkvrorwwhusyxjx
xngzmvcgkqfltjpe
yxfxaqipmysahqqq
sdqafdzgfdjuabup
qcqajmerahcdgxfv
xqimrqtupbapawro
qfvkqwidzzrehsbl
himixxvueksiqfdf
vgtfqpuzxxmhrvvd
adiioqeiejguaost
jnzxuycjxvxehbvm
xedbpxdhphamoodk
jsrioscmwlsfuxrg
mtsynnfxunuohbnf
enamqzfzjunnnkpe
uwcvfecunobyhces
ciygixtgbsccpftq
ewjgcronizkcsfjy
wztjkoipxsikoimv
jrgalyvfelwxforw
imylyalawbqwkrwb
yflwqfnuuvgjsgcj
wkysyzusldlojoue
zopllxnidcffcuau
bscgwxuprxaerskj
zvnvprxxjkhnkkpq
nejwxbhjxxdbenid
chryiccsebdbcnkc
guoeefaeafhlgvxh
nzapxrfrrqhsingx
mkzvquzvqvwsejqs
kozmlmbchydtxeeo
keylygnoqhmfzrfp
srwzoxccndoxylxe
uqjzalppoorosxxo
potmkinyuqxsfdfw
qkkwrhpbhypxhiun
wgfvnogarjmdbxyh
gkidtvepcvxopzuf
atwhvmmdvmewhzty
pybxizvuiwwngqej
zfumwnazxwwxtiry
keboraqttctosemx
vtlzxaqdetbhclib
wjiecykptzexuayl
ejatfnyjjdawepyk
mpcrobansyssvmju
gqukndzganeueabm
ukzscvomorucdnqd
wfydhtbzehgwfazx
mtwqdzlephqvxqmx
dltmlfxbjopefibh
atcfrowdflluqtbi
vowawlophlxaqonw
vblgdjzvwnocdipw
uzerzksmkvnlvlhm
ytjwhpaylohorvxd
siprvfxvnxcdgofz
cbhjupewcyjhvtgs
apqtozaofusmfqli
tmssrtlxfouowqnr
ntutrvwnzzgmokes
zrsgpwdzokztdpis
nrobvmsxtfmrqdhv
kadkaftffaziqdze
yrovbgcyqtlsnoux
modheiwuhntdecqs
gzhjypwddizemnys
gaputpwpcsvzxjho
bgmouxwoajgaozau
oxuapfrjcpyakiwt
kntwbvhuaahdixzj
epqjdjbnkxdnaccx
dspltdvznhypykri
tdrgqmbnagrxdwtt
njfqawzjggmemtbg
chpemsgwpzjpdnkk
fpsrobmbqbmigmwk
flxptsrqaazmprnl
nzdunrxlcbfklshm
miuwljvtkgzdlbnn
xbhjakklmbhsdmdt
xwxhsbnrwnegwcov
pwosflhodjaiexwq
fhgepuluczttfvqh
tldxcacbvxyamvkt
gffxatrjglkcehim
tzotkdrpxkucsdps
wxheftdepysvmzbe
qfooyczdzoewrmku
rvlwikuqdbpjuvoo
bcbrnbtfrdgijtzt
vaxqmvuogsxonlgq
ibsolflngegravgo
txntccjmqakcoorp
vrrbmqaxfbarmlmc
dzspqmttgsuhczto
pikcscjunxlwqtiw
lwzyogwxqitqfqlv
gsgjsuaqejtzglym
feyeqguxbgmcmgpp
gmttebyebdwvprkn
mzuuwbhzdjfdryxu
fganrbnplymqbzjx
cvsrbdcvhtxxdmro
scmgkjlkqukoamyp
fkgrqbyqpqcworqc
hjsrvkdibdjarxxb
sztzziuqroeidcus
pxdfvcpvwaddrzwv
phdqqxleqdjfgfbg
cqfikbgxvjmnfncy"""

function nice(string s)
    integer vowels = 0, double = 0
    for i=1 to length(s) do
        integer ch = s[i]
        if find(ch,"aeiou") then vowels += 1 end if
        if i>1 and ch=s[i-1] then double = 1 end if
    end for
    return vowels>=3 
       and double
       and match("ab",s)=0
       and match("cd",s)=0
       and match("pq",s)=0
       and match("xy",s)=0
end function
--?nice("ugknbfddgicrmopn")
--?nice("jchzalrnumimnmhp")
--?nice("haegwjzuvuyypxyu")
--?nice("dvszwmarrgswjxmb")

function nice2(string s)
    integer two = 0, rep = 0
    for i=2 to length(s) do
        if match(s[i-1..i],s,i+1) then two = 1 end if
        if i>=3 and s[i] = s[i-2] then rep = 1 end if
    end for
    return two and rep
end function
--?{nice2("xyxy"),1}
--?{nice2("aabcdefgaa"),0}
--?{nice2("aabcdcefgaa"),1}
--?{nice2("aaa"),0}
--?{nice2("aaaa"),1}
--?{nice2("aaaxyx"),0}
--?{nice2("aaaaxyx"),1}
--?{nice2("abcdefeghi"),0}
--?{nice2("abcdefeghiab"),1}
--?{nice2("qjhvhtzxzqqjkmpb"),1}
--?{nice2("xxyxx"),1}
--?{nice2("uurcxstgmygtbstg"),0}
--?{nice2("ieodomkazucvgmuy"),0}


procedure day5()
    sequence s = split(strings,"\n")
    integer count = 0, count2 = 0
    for i=1 to length(s) do
        count += nice(s[i])
        count2 += nice2(s[i])
    end for
    ?count      -- 238
    ?count2     -- 69
end procedure

--- Day 6: Probably a Fire Hazard ---
--Because your neighbors keep defeating you in the holiday house decorating contest year after year, you've decided to deploy one million lights in a 1000x1000 grid.
--
--Furthermore, because you've been especially nice this year, Santa has mailed you instructions on how to display the ideal lighting configuration.
--
--Lights in your grid are numbered from 0 to 999 in each direction; the lights at each corner are at 0,0, 0,999, 999,999, and 999,0. 
--The instructions include whether to turn on, turn off, or toggle various inclusive ranges given as coordinate pairs. 
--Each coordinate pair represents opposite corners of a rectangle, inclusive; a coordinate pair like 0,0 through 2,2 therefore refers to 9 lights in a 3x3 square. 
--The lights all start turned off.
--
--To defeat your neighbors this year, all you have to do is set up your lights by doing the instructions Santa sent you in order.
--
--For example:
--
--turn on 0,0 through 999,999 would turn on (or leave on) every light.
--toggle 0,0 through 999,0 would toggle the first line of 1000 lights, turning off the ones that were on, and turning on the ones that were off.
--turn off 499,499 through 500,500 would turn off (or leave off) the middle four lights.
--After following the instructions, how many lights are lit?

--- Part Two ---
--You just finish implementing your winning light pattern when you realize you mistranslated Santa's message from Ancient Nordic Elvish.
--
--The light grid you bought actually has individual brightness controls; each light can have a brightness of zero or more. The lights all start at zero.
--
--The phrase turn on actually means that you should increase the brightness of those lights by 1.
--
--The phrase turn off actually means that you should decrease the brightness of those lights by 1, to a minimum of zero.
--
--The phrase toggle actually means that you should increase the brightness of those lights by 2.
--
--What is the total brightness of all lights combined after following Santa's instructions?

constant instructions = split("""
turn off 660,55 through 986,197
turn off 341,304 through 638,850
turn off 199,133 through 461,193
toggle 322,558 through 977,958
toggle 537,781 through 687,941
turn on 226,196 through 599,390
turn on 240,129 through 703,297
turn on 317,329 through 451,798
turn on 957,736 through 977,890
turn on 263,530 through 559,664
turn on 158,270 through 243,802
toggle 223,39 through 454,511
toggle 544,218 through 979,872
turn on 313,306 through 363,621
toggle 173,401 through 496,407
toggle 333,60 through 748,159
turn off 87,577 through 484,608
turn on 809,648 through 826,999
toggle 352,432 through 628,550
turn off 197,408 through 579,569
turn off 1,629 through 802,633
turn off 61,44 through 567,111
toggle 880,25 through 903,973
turn on 347,123 through 864,746
toggle 728,877 through 996,975
turn on 121,895 through 349,906
turn on 888,547 through 931,628
toggle 398,782 through 834,882
turn on 966,850 through 989,953
turn off 891,543 through 914,991
toggle 908,77 through 916,117
turn on 576,900 through 943,934
turn off 580,170 through 963,206
turn on 184,638 through 192,944
toggle 940,147 through 978,730
turn off 854,56 through 965,591
toggle 717,172 through 947,995
toggle 426,987 through 705,998
turn on 987,157 through 992,278
toggle 995,774 through 997,784
turn off 796,96 through 845,182
turn off 451,87 through 711,655
turn off 380,93 through 968,676
turn on 263,468 through 343,534
turn on 917,936 through 928,959
toggle 478,7 through 573,148
turn off 428,339 through 603,624
turn off 400,880 through 914,953
toggle 679,428 through 752,779
turn off 697,981 through 709,986
toggle 482,566 through 505,725
turn off 956,368 through 993,516
toggle 735,823 through 783,883
turn off 48,487 through 892,496
turn off 116,680 through 564,819
turn on 633,865 through 729,930
turn off 314,618 through 571,922
toggle 138,166 through 936,266
turn on 444,732 through 664,960
turn off 109,337 through 972,497
turn off 51,432 through 77,996
turn off 259,297 through 366,744
toggle 801,130 through 917,544
toggle 767,982 through 847,996
turn on 216,507 through 863,885
turn off 61,441 through 465,731
turn on 849,970 through 944,987
toggle 845,76 through 852,951
toggle 732,615 through 851,936
toggle 251,128 through 454,778
turn on 324,429 through 352,539
toggle 52,450 through 932,863
turn off 449,379 through 789,490
turn on 317,319 through 936,449
toggle 887,670 through 957,838
toggle 671,613 through 856,664
turn off 186,648 through 985,991
turn off 471,689 through 731,717
toggle 91,331 through 750,758
toggle 201,73 through 956,524
toggle 82,614 through 520,686
toggle 84,287 through 467,734
turn off 132,367 through 208,838
toggle 558,684 through 663,920
turn on 237,952 through 265,997
turn on 694,713 through 714,754
turn on 632,523 through 862,827
turn on 918,780 through 948,916
turn on 349,586 through 663,976
toggle 231,29 through 257,589
toggle 886,428 through 902,993
turn on 106,353 through 236,374
turn on 734,577 through 759,684
turn off 347,843 through 696,912
turn on 286,699 through 964,883
turn on 605,875 through 960,987
turn off 328,286 through 869,461
turn off 472,569 through 980,848
toggle 673,573 through 702,884
turn off 398,284 through 738,332
turn on 158,50 through 284,411
turn off 390,284 through 585,663
turn on 156,579 through 646,581
turn on 875,493 through 989,980
toggle 486,391 through 924,539
turn on 236,722 through 272,964
toggle 228,282 through 470,581
toggle 584,389 through 750,761
turn off 899,516 through 900,925
turn on 105,229 through 822,846
turn off 253,77 through 371,877
turn on 826,987 through 906,992
turn off 13,152 through 615,931
turn on 835,320 through 942,399
turn on 463,504 through 536,720
toggle 746,942 through 786,998
turn off 867,333 through 965,403
turn on 591,477 through 743,692
turn off 403,437 through 508,908
turn on 26,723 through 368,814
turn on 409,485 through 799,809
turn on 115,630 through 704,705
turn off 228,183 through 317,220
toggle 300,649 through 382,842
turn off 495,365 through 745,562
turn on 698,346 through 744,873
turn on 822,932 through 951,934
toggle 805,30 through 925,421
toggle 441,152 through 653,274
toggle 160,81 through 257,587
turn off 350,781 through 532,917
toggle 40,583 through 348,636
turn on 280,306 through 483,395
toggle 392,936 through 880,955
toggle 496,591 through 851,934
turn off 780,887 through 946,994
turn off 205,735 through 281,863
toggle 100,876 through 937,915
turn on 392,393 through 702,878
turn on 956,374 through 976,636
toggle 478,262 through 894,775
turn off 279,65 through 451,677
turn on 397,541 through 809,847
turn on 444,291 through 451,586
toggle 721,408 through 861,598
turn on 275,365 through 609,382
turn on 736,24 through 839,72
turn off 86,492 through 582,712
turn on 676,676 through 709,703
turn off 105,710 through 374,817
toggle 328,748 through 845,757
toggle 335,79 through 394,326
toggle 193,157 through 633,885
turn on 227,48 through 769,743
toggle 148,333 through 614,568
toggle 22,30 through 436,263
toggle 547,447 through 688,969
toggle 576,621 through 987,740
turn on 711,334 through 799,515
turn on 541,448 through 654,951
toggle 792,199 through 798,990
turn on 89,956 through 609,960
toggle 724,433 through 929,630
toggle 144,895 through 201,916
toggle 226,730 through 632,871
turn off 760,819 through 828,974
toggle 887,180 through 940,310
toggle 222,327 through 805,590
turn off 630,824 through 885,963
turn on 940,740 through 954,946
turn on 193,373 through 779,515
toggle 304,955 through 469,975
turn off 405,480 through 546,960
turn on 662,123 through 690,669
turn off 615,238 through 750,714
turn on 423,220 through 930,353
turn on 329,769 through 358,970
toggle 590,151 through 704,722
turn off 884,539 through 894,671
toggle 449,241 through 984,549
toggle 449,260 through 496,464
turn off 306,448 through 602,924
turn on 286,805 through 555,901
toggle 722,177 through 922,298
toggle 491,554 through 723,753
turn on 80,849 through 174,996
turn off 296,561 through 530,856
toggle 653,10 through 972,284
toggle 529,236 through 672,614
toggle 791,598 through 989,695
turn on 19,45 through 575,757
toggle 111,55 through 880,871
turn off 197,897 through 943,982
turn on 912,336 through 977,605
toggle 101,221 through 537,450
turn on 101,104 through 969,447
toggle 71,527 through 587,717
toggle 336,445 through 593,889
toggle 214,179 through 575,699
turn on 86,313 through 96,674
toggle 566,427 through 906,888
turn off 641,597 through 850,845
turn on 606,524 through 883,704
turn on 835,775 through 867,887
toggle 547,301 through 897,515
toggle 289,930 through 413,979
turn on 361,122 through 457,226
turn on 162,187 through 374,746
turn on 348,461 through 454,675
turn off 966,532 through 985,537
turn on 172,354 through 630,606
turn off 501,880 through 680,993
turn off 8,70 through 566,592
toggle 433,73 through 690,651
toggle 840,798 through 902,971
toggle 822,204 through 893,760
turn off 453,496 through 649,795
turn off 969,549 through 990,942
turn off 789,28 through 930,267
toggle 880,98 through 932,434
toggle 568,674 through 669,753
turn on 686,228 through 903,271
turn on 263,995 through 478,999
toggle 534,675 through 687,955
turn off 342,434 through 592,986
toggle 404,768 through 677,867
toggle 126,723 through 978,987
toggle 749,675 through 978,959
turn off 445,330 through 446,885
turn off 463,205 through 924,815
turn off 417,430 through 915,472
turn on 544,990 through 912,999
turn off 201,255 through 834,789
turn off 261,142 through 537,862
turn off 562,934 through 832,984
turn off 459,978 through 691,980
turn off 73,911 through 971,972
turn on 560,448 through 723,810
turn on 204,630 through 217,854
turn off 91,259 through 611,607
turn on 877,32 through 978,815
turn off 950,438 through 974,746
toggle 426,30 through 609,917
toggle 696,37 through 859,201
toggle 242,417 through 682,572
turn off 388,401 through 979,528
turn off 79,345 through 848,685
turn off 98,91 through 800,434
toggle 650,700 through 972,843
turn off 530,450 through 538,926
turn on 428,559 through 962,909
turn on 78,138 through 92,940
toggle 194,117 through 867,157
toggle 785,355 through 860,617
turn off 379,441 through 935,708
turn off 605,133 through 644,911
toggle 10,963 through 484,975
turn off 359,988 through 525,991
turn off 509,138 through 787,411
toggle 556,467 through 562,773
turn on 119,486 through 246,900
turn on 445,561 through 794,673
turn off 598,681 through 978,921
turn off 974,230 through 995,641
turn off 760,75 through 800,275
toggle 441,215 through 528,680
turn off 701,636 through 928,877
turn on 165,753 through 202,780
toggle 501,412 through 998,516
toggle 161,105 through 657,395
turn on 113,340 through 472,972
toggle 384,994 through 663,999
turn on 969,994 through 983,997
turn on 519,600 through 750,615
turn off 363,899 through 948,935
turn on 271,845 through 454,882
turn off 376,528 through 779,640
toggle 767,98 through 854,853
toggle 107,322 through 378,688
turn off 235,899 through 818,932
turn on 445,611 through 532,705
toggle 629,387 through 814,577
toggle 112,414 through 387,421
toggle 319,184 through 382,203
turn on 627,796 through 973,940
toggle 602,45 through 763,151
turn off 441,375 through 974,545
toggle 871,952 through 989,998
turn on 717,272 through 850,817
toggle 475,711 through 921,882
toggle 66,191 through 757,481
turn off 50,197 through 733,656
toggle 83,575 through 915,728
turn on 777,812 through 837,912
turn on 20,984 through 571,994
turn off 446,432 through 458,648
turn on 715,871 through 722,890
toggle 424,675 through 740,862
toggle 580,592 through 671,900
toggle 296,687 through 906,775""","\n")

procedure day6()
    sequence lights = repeat(repeat(0,1000),1000)
    sequence light2 = repeat(repeat(0,1000),1000)
    for i=1 to length(instructions) do
        string verb
        integer a,b,c,d
        {{verb,a,b,c,d}} = scanf(instructions[i],"%s %d,%d through %d,%d")
        if c<a then ?9/0 end if
        if d<b then ?9/0 end if
        for x=a+1 to c+1 do
            for y=b+1 to d+1 do
                if verb="turn on" then
                    lights[x,y] = 1
                    light2[x,y] += 1
                elsif verb="toggle" then
                    lights[x,y] = not lights[x,y]
                    light2[x,y] += 2
                elsif verb="turn off" then
                    lights[x,y] = 0
                    light2[x,y] = max(0,light2[x,y]-1)
                else
                    ?9/0
                end if
            end for
        end for
    end for
    ?sum(lights)    -- 400410
    ?sum(light2)    -- 15343601
end procedure

--- Day 7: Some Assembly Required ---
--This year, Santa brought little Bobby Tables a set of wires and bitwise logic gates! 
--Unfortunately, little Bobby is a little under the recommended age range, and he needs help assembling the circuit.
--
--Each wire has an identifier (some lowercase letters) and can carry a 16-bit signal (a number from 0 to 65535). 
--A signal is provided to each wire by a gate, another wire, or some specific value. 
--Each wire can only get a signal from one source, but can provide its signal to multiple destinations. 
--A gate provides no signal until all of its inputs have a signal.
--
--The included instructions booklet describes how to connect the parts together: 
--x AND y -> z means to connect wires x and y to an AND gate, and then connect its output to wire z.
--
--For example:
--
--123 -> x means that the signal 123 is provided to wire x.
--x AND y -> z means that the bitwise AND of wire x and wire y is provided to wire z.
--p LSHIFT 2 -> q means that the value from wire p is left-shifted by 2 and then provided to wire q.
--NOT e -> f means that the bitwise complement of the value from wire e is provided to wire f.
--Other possible gates include OR (bitwise OR) and RSHIFT (right-shift). 
--If, for some reason, you'd like to emulate the circuit instead, almost all programming languages 
--(for example, C, JavaScript, or Python) provide operators for these gates.
--
--For example, here is a simple circuit:
--
--123 -> x
--456 -> y
--x AND y -> d
--x OR y -> e
--x LSHIFT 2 -> f
--y RSHIFT 2 -> g
--NOT x -> h
--NOT y -> i
--After it is run, these are the signals on the wires:
--
--d: 72
--e: 507
--f: 492
--g: 114
--h: 65412
--i: 65079
--x: 123
--y: 456
--In little Bobby's kit's instructions booklet (provided as your puzzle input), what signal is ultimately provided to wire a?

--- Part Two ---
--Now, take the signal you got on wire a, override wire b to that signal, and reset the other wires (including wire a). 
--What new signal is ultimately provided to wire a?
--constant wiring = split("""
--123 -> x
--456 -> y
--x AND y -> d
--x OR y -> e
--x LSHIFT 2 -> f
--y RSHIFT 2 -> g
--NOT x -> h
--NOT y -> i""","\n")
constant wiring = split("""
NOT dq -> dr
kg OR kf -> kh
ep OR eo -> eq
44430 -> b
NOT gs -> gt
dd OR do -> dp
eg AND ei -> ej
y AND ae -> ag
jx AND jz -> ka
lf RSHIFT 2 -> lg
z AND aa -> ac
dy AND ej -> el
bj OR bi -> bk
kk RSHIFT 3 -> km
NOT cn -> co
gn AND gp -> gq
cq AND cs -> ct
eo LSHIFT 15 -> es
lg OR lm -> ln
dy OR ej -> ek
NOT di -> dj
1 AND fi -> fj
kf LSHIFT 15 -> kj
NOT jy -> jz
NOT ft -> fu
fs AND fu -> fv
NOT hr -> hs
ck OR cl -> cm
jp RSHIFT 5 -> js
iv OR jb -> jc
is OR it -> iu
ld OR le -> lf
NOT fc -> fd
NOT dm -> dn
bn OR by -> bz
aj AND al -> am
cd LSHIFT 15 -> ch
jp AND ka -> kc
ci OR ct -> cu
gv AND gx -> gy
de AND dk -> dm
x RSHIFT 5 -> aa
et RSHIFT 2 -> eu
x RSHIFT 1 -> aq
ia OR ig -> ih
bk LSHIFT 1 -> ce
y OR ae -> af
NOT ca -> cb
e AND f -> h
ia AND ig -> ii
ck AND cl -> cn
NOT jh -> ji
z OR aa -> ab
1 AND en -> eo
ib AND ic -> ie
NOT eh -> ei
iy AND ja -> jb
NOT bb -> bc
ha OR gz -> hb
1 AND cx -> cy
NOT ax -> ay
ev OR ew -> ex
bn RSHIFT 2 -> bo
er OR es -> et
eu OR fa -> fb
jp OR ka -> kb
ea AND eb -> ed
k AND m -> n
et RSHIFT 3 -> ev
et RSHIFT 5 -> ew
hz RSHIFT 1 -> is
ki OR kj -> kk
NOT h -> i
lv LSHIFT 15 -> lz
as RSHIFT 1 -> bl
hu LSHIFT 15 -> hy
iw AND ix -> iz
lf RSHIFT 1 -> ly
fp OR fv -> fw
1 AND am -> an
ap LSHIFT 1 -> bj
u LSHIFT 1 -> ao
b RSHIFT 5 -> f
jq AND jw -> jy
iu RSHIFT 3 -> iw
ih AND ij -> ik
NOT iz -> ja
de OR dk -> dl
iu OR jf -> jg
as AND bd -> bf
b RSHIFT 3 -> e
jq OR jw -> jx
iv AND jb -> jd
cg OR ch -> ci
iu AND jf -> jh
lx -> a
1 AND cc -> cd
ly OR lz -> ma
NOT el -> em
1 AND bh -> bi
fb AND fd -> fe
lf OR lq -> lr
bn RSHIFT 3 -> bp
bn AND by -> ca
af AND ah -> ai
cf LSHIFT 1 -> cz
dw OR dx -> dy
gj AND gu -> gw
jg AND ji -> jj
jr OR js -> jt
bl OR bm -> bn
gj RSHIFT 2 -> gk
cj OR cp -> cq
gj OR gu -> gv
b OR n -> o
o AND q -> r
bi LSHIFT 15 -> bm
dy RSHIFT 1 -> er
cu AND cw -> cx
iw OR ix -> iy
hc OR hd -> he
0 -> c
db OR dc -> dd
kk RSHIFT 2 -> kl
eq LSHIFT 1 -> fk
dz OR ef -> eg
NOT ed -> ee
lw OR lv -> lx
fw AND fy -> fz
dz AND ef -> eh
jp RSHIFT 3 -> jr
lg AND lm -> lo
ci RSHIFT 2 -> cj
be AND bg -> bh
lc LSHIFT 1 -> lw
hm AND ho -> hp
jr AND js -> ju
1 AND io -> ip
cm AND co -> cp
ib OR ic -> id
NOT bf -> bg
fo RSHIFT 5 -> fr
ip LSHIFT 15 -> it
jt AND jv -> jw
jc AND je -> jf
du OR dt -> dv
NOT fx -> fy
aw AND ay -> az
ge LSHIFT 15 -> gi
NOT ak -> al
fm OR fn -> fo
ff AND fh -> fi
ci RSHIFT 5 -> cl
cz OR cy -> da
NOT ey -> ez
NOT ju -> jv
NOT ls -> lt
kk AND kv -> kx
NOT ii -> ij
kl AND kr -> kt
jk LSHIFT 15 -> jo
e OR f -> g
NOT bs -> bt
hi AND hk -> hl
hz OR ik -> il
ek AND em -> en
ao OR an -> ap
dv LSHIFT 1 -> ep
an LSHIFT 15 -> ar
fo RSHIFT 1 -> gh
NOT im -> in
kk RSHIFT 1 -> ld
hw LSHIFT 1 -> iq
ec AND ee -> ef
hb LSHIFT 1 -> hv
kb AND kd -> ke
x AND ai -> ak
dd AND do -> dq
aq OR ar -> as
iq OR ip -> ir
dl AND dn -> do
iu RSHIFT 5 -> ix
as OR bd -> be
NOT go -> gp
fk OR fj -> fl
jm LSHIFT 1 -> kg
NOT cv -> cw
dp AND dr -> ds
dt LSHIFT 15 -> dx
et RSHIFT 1 -> fm
dy RSHIFT 3 -> ea
fp AND fv -> fx
NOT p -> q
dd RSHIFT 2 -> de
eu AND fa -> fc
ba AND bc -> bd
dh AND dj -> dk
lr AND lt -> lu
he RSHIFT 1 -> hx
ex AND ez -> fa
df OR dg -> dh
fj LSHIFT 15 -> fn
NOT kx -> ky
gk OR gq -> gr
dy RSHIFT 2 -> dz
gh OR gi -> gj
lj AND ll -> lm
x OR ai -> aj
bz AND cb -> cc
1 AND lu -> lv
as RSHIFT 3 -> au
ce OR cd -> cf
il AND in -> io
dd RSHIFT 1 -> dw
NOT lo -> lp
c LSHIFT 1 -> t
dd RSHIFT 3 -> df
dd RSHIFT 5 -> dg
lh AND li -> lk
lf RSHIFT 5 -> li
dy RSHIFT 5 -> eb
NOT kt -> ku
at OR az -> ba
x RSHIFT 3 -> z
NOT lk -> ll
lb OR la -> lc
1 AND r -> s
lh OR li -> lj
ln AND lp -> lq
kk RSHIFT 5 -> kn
ea OR eb -> ec
ci AND ct -> cv
b RSHIFT 2 -> d
jp RSHIFT 1 -> ki
NOT cr -> cs
NOT jd -> je
jp RSHIFT 2 -> jq
jn OR jo -> jp
lf RSHIFT 3 -> lh
1 AND ds -> dt
lf AND lq -> ls
la LSHIFT 15 -> le
NOT fg -> fh
at AND az -> bb
au AND av -> ax
kw AND ky -> kz
v OR w -> x
kk OR kv -> kw
ks AND ku -> kv
kh LSHIFT 1 -> lb
1 AND kz -> la
NOT kc -> kd
x RSHIFT 2 -> y
et OR fe -> ff
et AND fe -> fg
NOT ac -> ad
jl OR jk -> jm
1 AND jj -> jk
bn RSHIFT 1 -> cg
NOT kp -> kq
ci RSHIFT 3 -> ck
ev AND ew -> ey
1 AND ke -> kf
cj AND cp -> cr
ir LSHIFT 1 -> jl
NOT gw -> gx
as RSHIFT 2 -> at
iu RSHIFT 1 -> jn
cy LSHIFT 15 -> dc
hg OR hh -> hi
ci RSHIFT 1 -> db
au OR av -> aw
km AND kn -> kp
gj RSHIFT 1 -> hc
iu RSHIFT 2 -> iv
ab AND ad -> ae
da LSHIFT 1 -> du
NOT bw -> bx
km OR kn -> ko
ko AND kq -> kr
bv AND bx -> by
kl OR kr -> ks
1 AND ht -> hu
df AND dg -> di
NOT ag -> ah
d OR j -> k
d AND j -> l
b AND n -> p
gf OR ge -> gg
gg LSHIFT 1 -> ha
bn RSHIFT 5 -> bq
bo OR bu -> bv
1 AND gy -> gz
s LSHIFT 15 -> w
NOT ie -> if
as RSHIFT 5 -> av
bo AND bu -> bw
hz AND ik -> im
bp AND bq -> bs
b RSHIFT 1 -> v
NOT l -> m
bp OR bq -> br
g AND i -> j
br AND bt -> bu
t OR s -> u
hz RSHIFT 5 -> ic
gk AND gq -> gs
fl LSHIFT 1 -> gf
he RSHIFT 3 -> hg
gz LSHIFT 15 -> hd
hf OR hl -> hm
1 AND gd -> ge
fo OR fz -> ga
id AND if -> ig
fo AND fz -> gb
gr AND gt -> gu
he OR hp -> hq
fq AND fr -> ft
ga AND gc -> gd
fo RSHIFT 2 -> fp
gl OR gm -> gn
hg AND hh -> hj
NOT hn -> ho
gl AND gm -> go
he RSHIFT 5 -> hh
NOT gb -> gc
hq AND hs -> ht
hz RSHIFT 3 -> ib
hz RSHIFT 2 -> ia
fq OR fr -> fs
hx OR hy -> hz
he AND hp -> hr
gj RSHIFT 5 -> gm
hf AND hl -> hn
hv OR hu -> hw
NOT hj -> hk
gj RSHIFT 3 -> gl
fo RSHIFT 3 -> fq
he RSHIFT 2 -> hf""","\n")

enum SET, DIRECT, NOT, IAND, AND, OR, LSHIFT, RSHIFT
constant tri_operators = {"AND","OR","LSHIFT","RSHIFT"}

procedure day7()
    sequence wires = {},
             wirer = {},
             rules = {}
--           wirev,
    integer k, l, m, res, op
    for i=1 to length(wiring) do
        string wi = wiring[i],
               {{lhs,wire}} = scanf(wi,"%s -> %s")
        if find(' ',wire) then ?9/0 end if
--      {k,wires} = get_wire(wire,wires)
        k = find(wire,wires)
        if k=0 then
            wires = append(wires,wire)
            wirer = append(wirer,0)
--          wirev = append(wires,0)
            k = length(wires)
        end if
        if wirer[k]!=0 then ?9/0 end if
--      if wirev[k]!=0 then ?9/0 end if
        sequence s = split(lhs)
        if length(s)=1 then
            res = to_number(lhs,-1)
            if res!=-1 then
                -- eg 44430 -> b
                rules = append(rules,{SET,res})
            else
                -- eg lx -> a
                l = find(lhs,wires)
                if l=0 then
                    wires = append(wires,lhs)
                    wirer = append(wirer,0)
                    l = length(wires)
                end if
                rules = append(rules,{DIRECT,l})
            end if
        elsif length(s)=2 then
            -- eg NOT hj -> hk
            if s[1]!="NOT" then ?9/0 end if
            if to_number(s[2],-1)!=-1 then ?9/0 end if
            l = find(s[2],wires)
            if l=0 then
                wires = append(wires,s[2])
                wirer = append(wirer,0)
                l = length(wires)
            end if
            rules = append(rules,{NOT,l})
        elsif length(s)=3 then
            op = find(s[2],tri_operators)
            if op=0 then ?9/0 end if
            op += IAND
            res = to_number(s[1],-1)
            if res!=-1 then
                if s[2]!="AND" then ?9/0 end if
                op = IAND
                l = res
            else
                l = find(s[1],wires)
                if l=0 then
                    wires = append(wires,s[1])
                    wirer = append(wirer,0)
                    l = length(wires)
                end if
            end if
            res = to_number(s[3],-1)
            if res!=-1 then
                if not find(s[2],{"LSHIFT","RSHIFT"}) then ?9/0 end if
                m = res
            else
                if not find(s[2],{"IAND","AND","OR"}) then ?9/0 end if
                m = find(s[3],wires)
                if m=0 then
                    wires = append(wires,s[3])
                    wirer = append(wirer,0)
                    m = length(wires)
                end if
            end if
            rules = append(rules,{op,l,m})
        else
            ?9/0
        end if
        wirer[k] = length(rules)
    end for
    if find(0,wirer) then ?9/0 end if
--  ?wires
    for parts=1 to 2 do
        sequence wirev = repeat(0,length(wires)),   -- value
                 wired = repeat(false,length(wires)) -- set?
        bool rescan = true
        while rescan do
            rescan = false
            for i=1 to length(wires) do
                if not wired[i] then
                    sequence rule = rules[wirer[i]]
                    op = rule[1]
                    switch op do
                        case SET:       wirev[i] = rule[2]
                                        wired[i] = true
                                        rescan = true
                        case DIRECT,
                             NOT:       k = rule[2]
                                        if wired[k] then
                                            wirev[i] = iff(op=DIRECT?wirev[k]
                                             :and_bits(#FFFF,not_bits(wirev[k])))
                                            wired[i] = true
                                            rescan = true
                                        end if
                        case IAND:      res = rule[2]
                                        k = rule[3]
                                        if wired[k] then
                                            wirev[i] = and_bits(res,wirev[k])
                                            wired[i] = true
                                            rescan = true
                                        end if
                        case AND,       
                             OR:        k = rule[2]
                                        if wired[k] then
                                            res = wirev[k]
                                            k = rule[3]
                                            if wired[k] then
                                                wirev[i] = iff(op=AND?and_bits(res,wirev[k])
                                                                     :or_bits(res,wirev[k]))
                                                wired[i] = true
                                                rescan = true
                                            end if
                                        end if
                        case LSHIFT,
                             RSHIFT:    k = rule[2]
                                        if wired[k] then
                                            res = wirev[k]
                                            k = rule[3]
                                            wirev[i] = iff(op=LSHIFT?res*power(2,k)
                                                                    :floor(res/power(2,k)))
                                            wired[i] = true
                                            rescan = true
                                        end if
                        default:
                            ?9/0
                    end switch
                end if
            end for
        end while
--  ?sort(wires)
--  ?wirer
--  ?rules
        if find(false,wired) then ?9/0 end if
        k = find("a",wires)
        ?{"a",k,wirev[k]}   -- {"a",171,3176}
                            -- {"a",171,14710}
        -- part 2:
        l = find("b",wires)
        rules[wirer[l]] = {SET,wirev[k]}
    end for 

end procedure

--- Day 8: Matchsticks ---
--Space on the sleigh is limited this year, and so Santa will be bringing his list as a digital copy. 
--He needs to know how much space it will take up when stored.
--
--It is common in many programming languages to provide a way to escape special characters in strings. 
--For example, C, JavaScript, Perl, Python, and even PHP handle special characters in very similar ways.
--
--However, it is important to realize the difference between the number of characters in the code 
--representation of the string literal and the number of characters in the in-memory string itself.
--
--For example:
--
--"" is 2 characters of code (the two double quotes), but the string contains zero characters.
--"abc" is 5 characters of code, but 3 characters in the string data.
--"aaa\"aaa" is 10 characters of code, but the string itself contains six "a" characters and a single, escaped quote character, for a total of 7 characters in the string data.
--"\x27" is 6 characters of code, but the string itself contains just one - an apostrophe ('), escaped using hexadecimal notation.
--Santa's list is a file that contains many double-quoted string literals, one on each line. 
--The only escape sequences used are \\ (which represents a single backslash), \" (which represents a lone double-quote character), 
--and \x plus two hexadecimal characters (which represents a single character with that ASCII code).
--
--Disregarding the whitespace in the file, what is the number of characters of code for string literals 
--minus the number of characters in memory for the values of the strings in total for the entire file?
--
--For example, given the four strings above, the total number of characters of string code (2 + 5 + 10 + 6 = 23) 
--minus the total number of characters in memory for string values (0 + 3 + 7 + 1 = 11) is 23 - 11 = 12.

--constant santaslist0 = split("""
--""
--"abc"
--"aaa\"aaa"
--"\x27"
--""","\n",no_empty:=true)

constant santaslist = split("""
"azlgxdbljwygyttzkfwuxv"
"v\xfb\"lgs\"kvjfywmut\x9cr"
"merxdhj"
"dwz"
"d\\gkbqo\\fwukyxab\"u"
"k\xd4cfixejvkicryipucwurq\x7eq"
"nvtidemacj\"hppfopvpr"
"kbngyfvvsdismznhar\\p\"\"gpryt\"jaeh"
"khre\"o\x0elqfrbktzn"
"nugkdmqwdq\x50amallrskmrxoyo"
"jcrkptrsasjp\\\"cwigzynjgspxxv\\vyb"
"ramf\"skhcmenhbpujbqwkltmplxygfcy"
"aqjqgbfqaxga\\fkdcahlfi\"pvods"
"pcrtfb"
"\x83qg\"nwgugfmfpzlrvty\"ryoxm"
"fvhvvokdnl\\eap"
"kugdkrat"
"seuxwc"
"vhioftcosshaqtnz"
"gzkxqrdq\\uko\"mrtst"
"znjcomvy\x16hhsenmroswr"
"clowmtra"
"\xc4"
"jpavsevmziklydtqqm"
"egxjqytcttr\\ecfedmmovkyn\"m"
"mjulrvqgmsvmwf"
"o\\prxtlfbatxerhev\xf9hcl\x44rzmvklviv"
"lregjexqaqgwloydxdsc\\o\"dnjfmjcu"
"lnxluajtk\x8desue\\k\x7abhwokfhh"
"wrssfvzzn\"llrysjgiu\"npjtdli"
"\x67lwkks"
"bifw\"ybvmwiyi\"vhol\"vol\xd4"
"aywdqhvtvcpvbewtwuyxrix"
"gc\xd3\"caukdgfdywj"
"uczy\\fk"
"bnlxkjvl\x7docehufkj\\\"qoyhag"
"bidsptalmoicyorbv\\"
"jorscv\"mufcvvfmcv\"ga"
"sofpwfal\\a"
"kcuqtbboaly\"uj\"k"
"n\\c"
"x\"\xcaj\\xwwvpdldz"
"eyukphh"
"wcyjq"
"vjx\"\"hjroj\"l\x4cjwbr"
"xcodsxzfqw\\rowqtuwvjnxupjnrh"
"yc"
"fpvzldgbdtca\"hqwa"
"ymjq\x8ahohvafubra\"hgqoknkuyph"
"kx\\mkaaklvcup"
"belddrzegcsxsyfhzyz"
"fuyswi"
"\\hubzebo\"ha\\qyr\"dv\\"
"mxvlz\"fwuvx\"cyk\""
"ftbh\"ro\\tmcpnpvh\"xx"
"ygi"
"rw\"\"wwn\\fgbjumq\"vgvoh\xd0\"mm"
"\"pat\"\x63kpfc\"\x2ckhfvxk\"uwqzlx"
"o"
"d\"hqtsfp\xceaswe\"\xc0lw"
"zajpvfawqntvoveal\"\"trcdarjua"
"xzapq"
"rkmhm"
"byuq"
"rwwmt\xe8jg\xc2\"omt"
"nfljgdmgefvlh\"x"
"rpjxcexisualz"
"doxcycmgaiptvd"
"rq\\\"mohnjdf\\xv\\hrnosdtmvxot"
"oqvbcenib\"uhy\\npjxg"
"pkvgnm\\ruayuvpbpd"
"kknmzpxqfbcdgng"
"piduhbmaympxdexz"
"vapczawekhoa\\or"
"tlwn\"avc\"bycg\"\"xuxea"
"\xcdvryveteqzxrgopmdmihkcgsuozips"
"kpzziqt"
"sdy\\s\"cjq"
"yujs"
"qte\"q"
"qyvpnkhjcqjv\"cclvv\"pclgtg\xeak\"tno"
"xwx"
"vibuvv"
"qq\""
"wwjduomtbkbdtorhpyalxswisq\"r"
"afuw\\mfjzctcivwesutxbk\"lk"
"e\xcef\\hkiu"
"ftdrgzvygcw\"jwsrcmgxj"
"zrddqfkx\x21dr\"ju\"elybk\"powj\"\"kpryz"
"dttdkfvbodkma\""
"lzygktugpqw"
"qu\x83tes\\u\"tnid\"ryuz"
"\\o\"pe\\vqwlsizjklwrjofg\xe2oau\\rd"
"mikevjzhnwgx\"fozrj\"h\""
"ligxmxznzvtachvvbahnff"
"d\\kq"
"tnbkxpzmcakqhaa"
"g\\yeakebeyv"
"cqkcnd\"sxjxfnawy\x31zax\x6ceha"
"m\x0dtqotffzdnetujtsgjqgwddc"
"masnugb\"etgmxul\x3bqd\\tmtddnvcy"
"floediikodfgre\x23wyoxlswxflwecdjpt"
"zu"
"r"
"\"ashzdbd\"pdvba\xeeumkr\\amnj"
"ckslmuwbtfouwpfwtuiqmeozgspwnhx"
"t\\qjsjek\xf9gjcxsyco\"r"
"hoed\x1b\\tcmaqch\"epdy"
"mgjiojwzc\\ypqcn\xb1njmp\"aeeblxt"
"\xdf\"h\x5enfracj"
"\x6fpbpocrb"
"jbmhrswyyq\\"
"wtyqtenfwatji\"ls\\"
"voy"
"awj"
"rtbj\"j"
"hynl"
"orqqeuaat\\xu\\havsgr\xc5qdk"
"g\"npyzjfq\"rjefwsk"
"rk\\kkcirjbixr\\zelndx\"bsnqvqj\""
"tecoz"
"dn\"uswngbdk\""
"qb\\"
"wpyis\\ebq"
"ppwue\\airoxzjjdqbvyurhaabetv"
"fxlvt"
"ql\"oqsmsvpxcg\"k"
"vqlhuec\\adw"
"qzmi\xffberakqqkk"
"tisjqff\"wf"
"yhnpudoaybwucvppj"
"xhfuf\\ehsrhsnfxcwtibd\"ubfpz"
"ihgjquzhf\""
"ff\x66dsupesrnusrtqnywoqcn\\"
"z\x77zpubbjmd"
"\"vhzlbwq\"xeimjt\\xe\x85umho\"m\"\"bmy"
"mmuvkioocmzjjysi\"mkfbec\""
"rpgghowbduw\x2fayslubajinoik\xd0hcfy"
"xrkyjqul\xdexlojgdphczp\"jfk"
"mg\x07cnr\x8b\x67xdgszmgiktpjhawho"
"kdgufhaoab"
"rlhela\"nldr"
"wzye\x87u"
"yif\x75bjhnitgoarmfgqwpmopu"
"pvlbyez\"wyy\x3dpgr"
"ezdm\"ovkruthkvdwtqwr\"ibdoawzgu"
"qubp"
"b\\kcpegcn\\zgdemgorjnk"
"gjsva\\kzaor\"\"gtpd"
"\"kt"
"rlymwlcodix"
"qqtmswowxca\"jvv"
"jni\xebwhozb"
"zhino\"kzjtmgxpi\"zzexijg"
"tyrbat\\mejgzplufxixkyg"
"lhmopxiao\x09\"p\xebl"
"xefioorxvate"
"nmcgd\x46xfujt\"w"
"\xe3wnwpat\"gtimrb"
"wpq\"xkjuw\xebbohgcagppb"
"fmvpwaca"
"mlsw"
"fdan\\\x9e"
"\"f\"fmdlzc"
"nyuj\\jnnfzdnrqmhvjrahlvzl"
"zn\"f\xcfsshcdaukkimfwk"
"uayugezzo\\\"e\"blnrgjaupqhik"
"efd\"apkndelkuvfvwyyatyttkehc"
"ufxq\\\"m\"bwkh\x93kapbqrvxxzbzp\\"
"fgypsbgjak\x79qblbeidavqtddfacq\\i\"h"
"kcfgpiysdxlgejjvgndb\\dovfpqodw"
"\"onpqnssmighipuqgwx\"nrokzgvg"
"vhjrrhfrba\"jebdanzsrdusut\\wbs"
"o\xdakymbaxakys"
"uwxhhzz\\mtmhghjn\\\\tnhzbejj"
"yd\\"
"bpgztp\\lzwpdqju\"it\x35qjhihjv"
"\\my\\b\"klnnto\\\xb3mbtsh"
"ezyvknv\"l\x2bdhhfjcvwzhjgmhwbqd\"\\"
"ftkz\"amoncbsohtaumhl\"wsodemopodq"
"ifv"
"dmzfxvzq"
"sped\"bvmf\"mmevl\"zydannpfny"
"fjxcjwlv\"pnqyrzatsjwsqfidb"
"muc\xfdqouwwnmuixru\\zlhjintplvtee"
"mraqgvmj"
"njopq\"ftcsryo"
"enoh\"n"
"t\"ntjhjc\"nzqh\xf7dcohhlsja\x7dtr"
"flbqcmcoun"
"dxkiysrn\\dyuqoaig"
"nehkzi\"h\"syktzfufotng\xdafqo"
"dzkjg\\hqjk\\\"zfegssjhn"
"sadlsjv"
"vmfnrdb\""
"ac\\bdp\"n"
"qt\x89h"
"lsndeugwvijwde\\vjapbm\\k\\nljuva"
"twpmltdzyynqt\\z\\tnund\x64hm"
"hpcyata\"ocylbkzdnhujh"
"hskzq\"knntuhscex\"q\\y\\vqj\x3an"
"eekwyufvji\\mqgeroekxeyrmymq"
"hl\"durthetvri\xebw\\jxu\"rcmiuy"
"\"fxdnmvnftxwesmvvq\"sjnf\xaabpg\"iary"
"\"\"nksqso"
"ruq\xbezugge\"d\"hwvoxmy\"iawikddxn\"x"
"rxxnlfay"
"stcu\"mv\xabcqts\\fasff"
"yrnvwfkfuzuoysfdzl\x02bk"
"qbdsmlwdbfknivtwijbwtatqfe"
"\"erqh\\csjph"
"ikfv"
"\xd2cuhowmtsxepzsivsvnvsb"
"vj"
"d"
"\\g"
"porvg\x62qghorthnc\"\\"
"tiks\\kr\"\x0fuejvuxzswnwdjscrk"
"xmgfel\"atma\\zaxmlgfjx\"ajmqf"
"oz\\rnxwljc\\\"umhymtwh"
"wlsxxhm\x7fqx\\gjoyrvccfiner\\qloluqv"
"k\\ieq"
"xidjj\"ksnlgnwxlddf\\s\\kuuleb"
"wjpnzgprzv\\maub\x0cj"
"r"
"y"
"\"yecqiei\"ire\\jdhlnnlde\xc5u"
"drvdiycqib"
"egnrbefezcrhgldrtb"
"plqodxv\\zm\"uodwjdocri\x55ucaezutm"
"f\"wexcw\x02ekewx\"alyzn"
"pqajwuk\\\\oatkfqdyspnrupo"
"rkczj\"fzntabpnygrhamk\\km\x68xfkmr"
"wejam\xbac\x37kns"
"qqmlwjk\"gh"
"fdcjsxlgx"
"\\cxvxy\"kb\"\"unubvrsq\\y\\awfhbmarj\\"
"geunceaqr"
"tpkg\"svvngk\\sizlsyaqwf"
"\"pa\\x\x18od\\emgje\\"
"ffiizogjjptubzqfuh\"cctieqcdh"
"yikhiyyrpgglpos"
"h\\"
"jotqojodcv"
"ervsz\x87ade\"fevq\\tcqowt"
"\\y\"fgrxtppkcseeg\\onxjarx\\hyhfn\x5fi"
"kxndlabn\\wwumctuzdcfiitrbnn"
"eoosynwhwm"
"\"c\x04"
"ny\xf6vuwlec"
"ubgxxcvnltzaucrzg\\xcez"
"pnocjvo\\yt"
"fcabrtqog\"a\"zj"
"o\\bha\\mzxmrfltnflv\xea"
"tbfvzwhexsdxjmxejwqqngzixcx"
"wdptrakok\"rgymturdmwfiwu"
"reffmj"
"lqm"
"\\oc"
"p\""
"ygkdnhcuehlx"
"vsqmv\"bqay\"olimtkewedzm"
"isos\x6azbnkojhxoopzetbj\xe1yd"
"yo\\pgayjcyhshztnbdv"
"fg\"h"
"vcmcojolfcf\\\\oxveua"
"w\"vyszhbrr\"jpeddpnrjlca\x69bdbopd\\z"
"jikeqv"
"\"dkjdfrtj"
"is"
"hgzx"
"z\""
"woubquq\\ag\""
"xvclriqa\xe6ltt"
"tfxinifmd"
"mvywzf\"jz"
"vlle"
"c\"rf\"wynhye\x25vccvb\""
"zvuxm"
"\xf2\"jdstiwqer\"h"
"kyogyogcknbzv\x9f\\\\e"
"kspodj\"edpeqgypc"
"oh\\x\\h"
"julb"
"bmcfkidxyilgoy\\xmu\"ig\\qg"
"veqww\"ea"
"fkdbemtgtkpqisrwlxutllxc\"mbelhs"
"e"
"ecn\x50ooprbstnq"
"\"\xe8\"ec\xeah\"qo\\g\"iuqxy\"e\"y\xe7xk\xc6d"
"lwj\"aftrcqj"
"jduij\x97zk\"rftjrixzgscxxllpqx\"bwwb"
"fqcditz"
"f\x19azclj\"rsvaokgvty\"aeq"
"erse\x9etmzhlmhy\x67yftoti"
"lsdw\xb3dmiy\\od"
"x\x6fxbljsjdgd\xaau"
"hjg\\w\"\x78uoqbsdikbjxpip\"w\"jnhzec"
"gk"
"\\zrs\\syur"
""","\n",no_empty:=true)

function clength(string s)
    if s[1]!='\"' or s[$]!='\"' then ?9/0 end if
    integer res = 0, skip = 0, ch
    for i=2 to length(s)-1 do
        if skip then
            skip -= 1
        else
            ch = s[i]
            if ch='\\' then
                skip = 1+2*(s[i+1]='x')
            end if
            res += 1
        end if
    end for
    if skip then ?9/0 end if
    return res
end function

--- Part Two ---
--Now, let's go the other way. In addition to finding the number of characters of code, you should now 
--encode each code representation as a new string and find the number of characters of the new encoded 
--representation, including the surrounding double quotes.
--
--For example:
--
--"" encodes to "\"\"", an increase from 2 characters to 6.
--"abc" encodes to "\"abc\"", an increase from 5 characters to 9.
--"aaa\"aaa" encodes to "\"aaa\\\"aaa\"", an increase from 10 characters to 16.
--"\x27" encodes to "\"\\x27\"", an increase from 6 characters to 11.
--Your task is to find the total number of characters to represent the newly encoded strings minus the 
--number of characters of code in each original string literal. For example, for the strings above, the 
--total encoded length (6 + 9 + 16 + 11 = 42) minus the characters in the original code representation 
--(23, just like in the first part of this puzzle) is 42 - 23 = 19.

function cenclen(string s)
    integer res = length(s)+2
    for i=1 to length(s) do 
        if find(s[i],`\"`) then res += 1 end if
    end for
    return res
end function

procedure day8()
    sequence l = repeat(0,length(santaslist)),
             m = repeat(0,length(santaslist)),
             n = repeat(0,length(santaslist))
    for i=1 to length(santaslist) do
        l[i] = length(santaslist[i])
        m[i] = clength(santaslist[i])
        n[i] = cenclen(santaslist[i])
    end for
--  ?l -- (2 + 5 + 10 + 6 = 23) 
--  ?m -- (0 + 3 + 7 + 1 = 11) is 23 - 11 = 12.
    ?sum(l)-sum(m) -- 1342
--  ?n -- {6,9,16,11}
    ?sum(n)-sum(l) -- 2074
end procedure

--- Day 9: All in a Single Night ---
--Every year, Santa manages to deliver all of his presents in a single night.
--
--This year, however, he has some new locations to visit; his elves have provided him the distances between every pair of locations. 
--He can start and end at any two (different) locations he wants, but he must visit each location exactly once. 
--What is the shortest distance he can travel to achieve this?
--
--For example, given the following distances:
--
--London to Dublin = 464
--London to Belfast = 518
--Dublin to Belfast = 141
--The possible routes are therefore:
--
--Dublin -> London -> Belfast = 982
--London -> Dublin -> Belfast = 605
--London -> Belfast -> Dublin = 659
--Dublin -> Belfast -> London = 659
--Belfast -> Dublin -> London = 605
--Belfast -> London -> Dublin = 982
--The shortest of these is London -> Dublin -> Belfast = 605, and so the answer is 605 in this example.
--
--What is the distance of the shortest route?

--constant distances = split("""
--London to Dublin = 464
--London to Belfast = 518
--Dublin to Belfast = 141""","\n")

constant distances = split("""
AlphaCentauri to Snowdin = 66
AlphaCentauri to Tambi = 28
AlphaCentauri to Faerun = 60
AlphaCentauri to Norrath = 34
AlphaCentauri to Straylight = 34
AlphaCentauri to Tristram = 3
AlphaCentauri to Arbre = 108
Snowdin to Tambi = 22
Snowdin to Faerun = 12
Snowdin to Norrath = 91
Snowdin to Straylight = 121
Snowdin to Tristram = 111
Snowdin to Arbre = 71
Tambi to Faerun = 39
Tambi to Norrath = 113
Tambi to Straylight = 130
Tambi to Tristram = 35
Tambi to Arbre = 40
Faerun to Norrath = 63
Faerun to Straylight = 21
Faerun to Tristram = 57
Faerun to Arbre = 83
Norrath to Straylight = 9
Norrath to Tristram = 50
Norrath to Arbre = 60
Straylight to Tristram = 27
Straylight to Arbre = 81
Tristram to Arbre = 90""","\n")

--with trace
function shortest_distance(string city, sequence tovisit, integer costs, cost_so_far)
    if tovisit={} then return cost_so_far end if
    string dest = tovisit[1]
    integer cost = getd({city,dest},costs)
    integer res = shortest_distance(dest,tovisit[2..$],costs,cost_so_far+cost)
    for i=2 to length(tovisit) do
        dest = tovisit[i]
        cost = getd({city,dest},costs)
        res = min(res,shortest_distance(dest,remove(tovisit,i),costs,cost_so_far+cost))
    end for
    return res
end function

function longest_distance(string city, sequence tovisit, integer costs, cost_so_far)
    if tovisit={} then return cost_so_far end if
    string dest = tovisit[1]
    integer cost = getd({city,dest},costs)
    integer res = longest_distance(dest,tovisit[2..$],costs,cost_so_far+cost)
    for i=2 to length(tovisit) do
        dest = tovisit[i]
        cost = getd({city,dest},costs)
        res = max(res,longest_distance(dest,remove(tovisit,i),costs,cost_so_far+cost))
    end for
    return res
end function

procedure day9()
    sequence cities = {}
    integer costs = new_dict()
    for i=1 to length(distances) do
        {{string c1, string c2, integer d}} = scanf(distances[i],"%s to %s = %d")
        if not find(c1,cities) then cities = append(cities,c1) end if
        if not find(c2,cities) then cities = append(cities,c2) end if
        setd({c1,c2},d,costs)
        setd({c2,c1},d,costs)
    end for
--trace(1)
    integer res = shortest_distance(cities[1],cities[2..$],costs,0)
    for i=2 to length(cities) do
        res = min(res,shortest_distance(cities[i],remove(cities,i),costs,0))
    end for
--  ?res -- 605
    ?res -- 141
--trace(1)
    res = longest_distance(cities[1],cities[2..$],costs,0)
    for i=2 to length(cities) do
        res = max(res,longest_distance(cities[i],remove(cities,i),costs,0))
    end for
--  ?res -- 982
    ?res -- 736
    destroy_dict(costs)
end procedure

--- Day 10: Elves Look, Elves Say ---
--Today, the Elves are playing a game called look-and-say. 
--They take turns making sequences by reading aloud the previous sequence and using that reading as the next sequence. 
--For example, 211 is read as "one two, two ones", which becomes 1221 (1 2, 2 1s).
--
--Look-and-say sequences are generated iteratively, using the previous value as input for the next step. 
--For each step, take the previous value, and replace each run of digits (like 111) with the number of digits (3) followed by the digit itself (1).
--
--For example:
--
--1 becomes 11 (1 copy of digit 1).
--11 becomes 21 (2 copies of digit 1).
--21 becomes 1211 (one 2 followed by one 1).
--1211 becomes 111221 (one 1, one 2, and two 1s).
--111221 becomes 312211 (three 1s, two 2s, and one 1).
--Starting with the digits in your puzzle input, apply this process 40 times. What is the length of the result?
--
--Your puzzle input is 3113322113.

function look_and_say(string s)
    string res = ""
    integer skip = 0
    for i=1 to length(s) do
        if skip then
            skip -= 1 
        else
            for j=i+1 to length(s) do
                if s[i]!=s[j] then exit end if
                skip += 1
            end for
            res &= ('1'+skip)&s[i]
        end if
    end for
    if skip then ?9/0 end if
    return res
end function

procedure day10()
--  clear_screen()
--  ?look_and_say("1")
--  ?look_and_say("11")
--  ?look_and_say("21")
--  ?look_and_say("1211")
--  ?look_and_say("111221")
    string res = "3113322113"
    for i=1 to 40 do
        res = look_and_say(res)
    end for
    ?length(res) -- 329356
    for i=1 to 10 do
        res = look_and_say(res)
    end for
    ?length(res) -- 4666278
end procedure

--- Day 11: Corporate Policy ---
--Santa's previous password expired, and he needs help choosing a new one.
--
--To help him remember his new password after the old one expires, Santa 
--has devised a method of coming up with a password based on the previous one. 
--Corporate policy dictates that passwords must be exactly eight lowercase 
--letters (for security reasons), so he finds his new password by incrementing 
--his old password string repeatedly until it is valid.
--
--Incrementing is just like counting with numbers: xx, xy, xz, ya, yb, and so on. 
--Increase the rightmost letter one step; if it was z, it wraps around to a, and 
--repeat with the next letter to the left until one doesn't wrap around.
--
--Unfortunately for Santa, a new Security-Elf recently started, and he has imposed 
--some additional password requirements:
--
--Passwords must include one increasing straight of at least three letters, like 
--abc, bcd, cde, and so on, up to xyz. They cannot skip letters; abd doesn't count.
--Passwords may not contain the letters i, o, or l, as these letters can be mistaken 
--for other characters and are therefore confusing.
--Passwords must contain at least two different, non-overlapping pairs of letters, 
--like aa, bb, or zz.
--For example:
--
--hijklmmn meets the first requirement (because it contains the straight hij) but fails the second requirement requirement (because it contains i and l).
--abbceffg meets the third requirement (because it repeats bb and ff) but fails the first requirement.
--abbcegjk fails the third requirement, because it only has one double letter (bb).
--The next password after abcdefgh is abcdffaa.
--The next password after ghijklmn is ghjaabcc, because you eventually skip all the passwords that start with ghi..., since i is not allowed.
--Given Santa's current password (your puzzle input), what should his next password be?
--
--Your puzzle input is vzbxkghb.

--- Part Two ---
--Santa's password expired again. What's the next one?

--Your puzzle input is still vzbxkghb.
--with trace
function next_pwd(string s)
    for i=length(s) to 1 by -1 do
        integer ch = s[i]
        if ch!='z' then
--          ch += 1+(find(ch,"iol")!=0)
            s[i] = ch+1+(find(ch,"hnk")!=0)
            return s
        end if
        s[i] = 'a'
    end for
    return ""
end function

function has_straight(string s)
    for i=1 to length(s)-2 do
        if s[i+1]=s[i]+1
        and s[i+2]=s[i+1]+1 then
            return true
        end if
    end for
    return false
end function

function has_iol(string s)
    for i=1 to length(s) do
        if find(s[i],"iol") then return true end if
    end for
    return false
end function

function two_doubles(string s)
    for i=1 to length(s)-1 do
        if s[i+1]=s[i] then
            for j=i+2 to length(s)-1 do
                if s[j]!=s[i]
                and s[j+1]=s[j] then
                    return true
                end if
            end for
            return false
        end if
    end for
    return false
end function

function next_password(string pwd)
    atom t1 = time()+1
    while length(pwd) do
        pwd = next_pwd(pwd)
        if has_straight(pwd)
        and two_doubles(pwd)
        and not has_iol(pwd) then
            return pwd
        end if
        if time()>t1 then
            printf(1,"%s\r",{pwd})
            t1 = time()+1
        end if
    end while
    return ""
end function

procedure day11()
    clear_screen()
--  abcdefgh
--  ?{has_straight("hijklmmn"),1}   -- {1,1}
--  ?{two_doubles("abbceffg"),1}    -- {1,1}
--  ?{has_straight("abbceffg"),0}   -- {0,0}
--  ?{two_doubles("abbcegjk"),0}    -- {0,0}
--  ?next_password("abcdefgh")      -- "abcdffaa"
--  ?next_password("ghijklmn")      -- "ghjaabcc"
    string pwd = next_password("vzbxkghb")
    ?pwd                                -- "vzbxxyzz"
    pwd = next_password(pwd)
    ?pwd                                -- "vzcaabcc"
end procedure

--- Day 12: JSAbacusFramework.io ---
--Santa's Accounting-Elves need help balancing the books after a recent order. 
--Unfortunately, their accounting software uses a peculiar storage format. 
--That's where you come in.
--
--They have a JSON document which contains a variety of things: arrays ([1,2,3]), 
--objects ({"a":1, "b":2}), numbers, and strings. 
--Your first job is to simply find all of the numbers throughout the document and add them together.
--
--For example:
--
--[1,2,3] and {"a":2,"b":4} both have a sum of 6.
--[[[3]]] and {"a":{"b":4},"c":-1} both have a sum of 3.
--{"a":[-1,1]} and [-1,{"a":1}] both have a sum of 0.
--[] and {} both have a sum of 0.
--You will not encounter any strings containing numbers.
--
--What is the sum of all numbers in the document?

--- Part Two ---
--Uh oh - the Accounting-Elves have realized that they double-counted everything red.
--
--Ignore any object (and all of its children) which has any property with the value "red". 
--Do this only for objects ({...}), not arrays ([...]).
--
--[1,2,3] still has a sum of 6.
--[1,{"c":"red","b":2},3] now has a sum of 4, because the middle object is ignored.
--{"d":"red","e":[1,2,3,4],"f":5} now has a sum of 0, because the entire structure is ignored.
--[1,"red",5] has a sum of 6, because "red" in an array has no effect.

--constant json = "[1,2,3]"
--constant json = `{"a":2,"b":4}`
--constant json = `[[[3]]]`
--constant json = `{"a":{"b":4},"c":-1}`
--constant json = `{"a":[-1,1]}`
--constant json = `[-1,{"a":1}]`
--constant json = `[]`
--constant json = `{}`
--constant json = `[1,{"c":"red","b":2},3]`
--constant json = `{"d":"red","e":[1,2,3,4],"f":5}`
--constant json = `[1,"red",5]`
constant json = """
{"e":[[{"e":86,"c":23,"a":{"a":[120,169,"green","red","orange"],"b":"red"},"g":"yellow","b":["yellow"],"d":"red","f":-19},
{"e":-47,"a":[2],"d":{"a":"violet"},"c":"green","h":"orange","b":{"e":59,"a":"yellow","d":"green","c":47,"h":"red",
"b":"blue","g":"orange","f":["violet",43,168,78]},"g":"orange","f":[{"e":[82,-41,2,"red","violet","orange","yellow"],
"c":"green","a":77,"g":"orange","b":147,"d":49,"f":"blue"},-1,142,136,["green","red",166,-21],"blue","orange",{"a":38}]},
"orange","yellow"],"green",-22,[37,[4,-40,["red","yellow",["yellow",177,"red","blue",139,[55,13,"yellow","violet",-21,140,
"yellow",117],"blue","blue",106],"blue",{"a":23}],183,92,"orange","green"],"orange"],-5],"c":[{"e":{"e":-13,"c":-11,
"a":{"a":49,"b":189},"g":144,"b":186,"d":{"e":[146,[32,"violet","red","orange",-22],"blue","violet",57,{"e":12,"a":"red",
"d":37,"c":-13,"h":"green","b":-27,"g":"orange","f":"orange","i":"red"},56,-1,"red",-25],"c":-14,"a":[["orange","green",
"green","red",-25],-16,104,177,"red"],"g":"red","b":"blue","d":2,"f":"green"},"f":[{"e":{"c":-15,"a":"green","b":144,"d":-32},
"c":"yellow","a":["blue","blue"],"b":"yellow","d":135,"f":"violet"}]},"a":{"e":"blue","a":[145,128,"orange","violet",23,
["orange",[78,"yellow","orange","orange","orange","green",122,-35,"blue"],159,114]],"d":"yellow","c":{"e":[100,"green",
{"e":"blue","a":36,"d":84,"j":"orange","c":"blue","h":118,"b":85,"g":"violet","f":"blue","i":27},"blue","blue"],"a":"red",
"d":"blue","j":[159,22,"violet","orange","blue","orange","blue",186,175,{"e":29,"a":150,"d":"green","c":129,"h":138,"b":-29,
"g":7,"f":"red","i":"violet"}],"c":"yellow","h":["blue",-9,41,{"e":144,"c":"violet","a":161,"b":116,"d":126,"f":197},173,123,
50,"red",154],"b":-23,"g":"orange","f":"green","i":"red"},"h":26,"b":30,"g":106,"f":{"c":{"e":-28,"c":["red","violet","blue",
"orange","yellow","violet",-30,134,0],"a":-37,"b":41,"d":143},"a":121,"b":"yellow","d":[198,"yellow"]}},"d":{"e":-2,
"a":"green","d":{"a":0,"b":"blue"},"j":"violet","c":[{"e":"violet","a":"orange","d":"violet","c":-36,"h":68,"b":195,
"g":41,"f":63},11,-20,{"e":[100,43,183],"a":"yellow","d":["orange","yellow","violet","yellow",143,162,-23,168,145,-33],
"j":80,"c":"orange","h":{"a":"orange"},"b":"violet","g":-21,"f":-38,"i":"green"},{"e":"red","a":81,"d":3,"c":"blue",
"h":[167,"blue","yellow",135,64,116,134,14,160],"b":"red","g":"blue","f":"green"},["red",[139,"orange","blue","blue",
"orange","blue"],"orange","red",113,26,"yellow","yellow",85]],"h":[[117],"yellow",{"e":187,"c":"orange","a":-22,
"b":["orange"],"d":68},154,["green","orange","blue",87,"green","orange",46,"violet"],{"a":{"e":178,"c":"blue","a":-2,
"g":99,"b":"orange","d":-34,"f":"green"}},"blue"],"b":"violet","g":[13,"yellow",43,"orange"],"f":{"e":-40,"a":"blue",
"d":50,"c":"violet","h":{"e":"orange","a":[-27,159,"violet","red",130,83,"red","violet",-27],"d":-42,"j":"blue","c":9,
"h":{"e":"yellow","a":"blue","d":177,"c":156,"h":"violet","b":0,"g":"orange","f":-43,"i":"orange"},"b":"blue","g":[114,
"blue",-4,"red","red","yellow","green"],"f":81,"i":"red"},"b":73,"g":176,"f":"red"},"i":{"e":["orange",-16,["violet",63,
"blue",-40,119,22,"orange","orange","violet","green"],-30,{"e":"yellow","c":172,"a":"green","g":"yellow","b":"green",
"d":"yellow","f":"red"},190,28,{"e":"orange","c":"red","a":"orange","b":51,"d":-31,"f":136},"orange",82],"a":"blue",
"d":"red","c":["blue",81,"blue","blue","green",191,"blue","blue",1],"h":{"e":"orange","c":{"e":"blue","a":"green","d":55,
"j":-36,"c":13,"h":"yellow","b":162,"g":82,"f":"red","i":"red"},"a":"violet","b":"yellow","d":-24,"f":190},"b":[{"e":"green",
"a":"green","d":-49,"j":"green","c":"orange","h":43,"b":"orange","g":35,"f":"violet","i":"blue"},"yellow",32,"yellow"],
"g":"blue","f":0}},"c":"blue","h":69,"b":166,"g":[[88,["blue",21,"yellow","violet"]],["red",169],"red"],"f":176},
{"e":["yellow",88,164,{"e":"red","c":"yellow","a":[20,"blue","violet"],"g":-31,"b":80,"d":"yellow","f":"green"},
{"e":"orange","c":"green","a":149,"b":"orange","d":-46,"f":[160,83,"orange","red",177,-11]},"green",[156,"red",
{"c":7,"a":[152,107,130],"b":{"c":"yellow","a":114,"b":38,"d":"blue"},"d":"orange"},{"a":49,"b":-34},34,-32,"green"]],
"a":134,"d":-12,"c":[-33,{"e":102,"a":"red","d":{"e":"orange","a":"green","d":43,"c":"violet","h":{"a":"violet"},"b":-24,
"g":"blue","f":"blue","i":[68,"blue"]},"j":-28,"c":87,"h":"violet","b":122,"g":"violet","f":"green","i":"violet"}],
"h":"violet","b":["orange",-14,{"e":37,"a":86,"d":{"e":186,"a":-25,"d":71,"c":"orange","h":86,"b":113,"g":27,"f":"green",
"i":"yellow"},"c":16,"h":"orange","b":"green","g":["yellow","yellow",["orange","violet","violet","green",58,"orange"],
["orange",131,"red","blue","orange",183,82,"orange","yellow","blue"],49,"orange","violet","violet","yellow","orange"],
"f":"yellow"},[141,"violet","red",-24,18,103,88,169,75],["yellow",["green",55,92,"yellow","orange",135,{"e":"green",
"c":141,"a":-11,"b":129,"d":"orange","f":"green"},"violet"],14,[{"a":130},["red","violet",182,"blue",149,"orange",-25,
"blue","blue"],61,-18,"orange",14,{"e":"red","a":135,"d":"yellow","j":"red","c":23,"h":89,"b":82,"g":"orange","f":"red",
"i":72},"red"],["red","blue","red",78,134,53,160],-20,98,{"e":[198,69,168,145,-29,"red","orange","orange","yellow"],
"a":"violet","d":"green","j":184,"c":[7,99,186,"blue"],"h":10,"b":"blue","g":166,"f":"yellow","i":177}],"green",{"e":"red",
"a":"green","d":-8,"j":-47,"c":{"e":"orange","c":74,"a":"yellow","b":"orange","d":34,"f":124},"h":152,"b":"red","g":"yellow",
"f":161,"i":["blue","red","orange","orange","orange",-38,"orange","red"]},"yellow","blue",75],"g":[67,["orange",109,114,32,
"green","green","yellow",["yellow","orange",-40,["green","orange","yellow",187,3,"yellow","violet","orange",195,"yellow"],
"blue","yellow","blue"]],[32,{"c":43,"a":"red","b":"blue","d":25}],{"c":"red","a":24,"b":139},{"e":"orange","a":153,"d":43,
"c":143,"h":["violet","yellow","green",159,165,{"a":"blue","b":"violet"}],"b":150,"g":["red","red","orange",[138,"green"]],
"f":"green"},"violet",-12,"red",["violet","green"]],"f":{"e":{"e":39,"a":"orange","d":{"e":[11],"c":"violet","a":"orange",
"g":49,"b":"red","d":0,"f":{"a":45}},"c":"violet","h":-30,"b":[93,-1,"red",[39,"red","green"],"green",[154,"blue","orange",
147,"orange","yellow"],106,["green",71,-9],-37],"g":"blue","f":"blue","i":176},"c":98,"a":164,"b":["violet","orange",[85,
{"e":"yellow","a":113,"d":176,"c":"green","h":"violet","b":"orange","g":166,"f":"green","i":"green"},[145,"green",-7,"violet"]],
{"e":["green","green"],"a":"red","d":79,"j":"blue","c":-41,"h":"yellow","b":"violet","g":"blue","f":148,"i":20}],"d":12,
"f":[-34,"yellow"]}},{"e":{"e":[{"a":159},["red",-46,{"a":11},166,116,{"e":-39,"c":-24,"a":194,"b":27,"d":91},-37,85,
["green"],61],"yellow",{"a":135},["orange","orange",128,"green",-20,97,{"e":108,"c":195,"a":"blue","g":51,"b":"green",
"d":"violet","f":28}]],"a":"green","d":164,"c":"violet","h":"orange","b":"green","g":{"e":"red","c":151,"a":"violet",
"b":46,"d":"yellow","f":["red"]},"f":-35,"i":"orange"},"a":{"e":7,"a":{"a":-28},"d":151,"c":{"c":147,"a":165,"b":[-5,
["violet","blue","orange","violet",3,"yellow",86,"orange",197,51],6,156,43,94,"blue",{"e":130,"c":"orange","a":-29,
"b":89,"d":-41,"f":"orange"},76]},"h":{"e":153,"a":"violet","d":"yellow","j":"green","c":{"c":"blue","a":"violet",
"b":113,"d":"yellow"},"h":{"e":"blue","a":["yellow",29,69],"d":"orange","c":"red","h":"green","b":164,"g":"blue",
"f":{"c":16,"a":191,"b":61}},"b":195,"g":"yellow","f":"green","i":"red"},"b":82,"g":[51,-47,186,{"e":4,"c":27,"a":60,
"b":"orange","d":32,"f":"violet"},{"e":"blue","a":72,"d":17,"j":"blue","c":"red","h":0,"b":"yellow","g":195,"f":["red",
"green",82,-31,"blue",-24,"yellow","red","violet"],"i":43},["green"]],"f":"blue"},"d":["violet",22,118],"j":-45,"c":174,
"h":79,"b":180,"g":{"c":-7,"a":{"e":["blue","violet"],"c":"blue","a":"violet","g":"red","b":"orange","d":"orange",
"f":{"a":"violet","b":33}},"b":183,"d":132},"f":["violet","violet","green",[[[66,"violet","violet","green","green"]],
[181,"yellow",167,134,"orange",{"e":"red","c":"violet","a":"violet","b":107,"d":-19},{"e":0,"c":166,"a":"green","b":"blue",
"d":"red"}],19,-31,108]],"i":["red","red",[159],[139,"blue",{"a":106},48,117,164,["blue",161,"green",174,"orange",152,"red",
"orange",["red","yellow","blue",-43]],105,22,"green"],[110]]},153,{"a":{"e":"orange","a":[{"e":"red","a":"yellow","d":"green",
"c":"violet","h":{"e":"blue","c":62,"a":148,"g":"violet","b":6,"d":"yellow","f":-1},"b":"yellow","g":-14,"f":58},"violet",
"yellow",{"e":4,"a":"blue","d":{"e":"green","a":-49,"d":"yellow","j":-39,"c":"orange","h":"red","b":"blue","g":59,
"f":"violet","i":46},"c":195,"h":22,"b":160,"g":"orange","f":"orange","i":38},"red",["orange","red","yellow",34,101,
"yellow"],40,["orange",{"e":148,"c":"red","a":85,"g":62,"b":-13,"d":-25,"f":"orange"},-47,34,{"e":"violet","c":80,
"a":"red","b":34,"d":100},58,185,"yellow","orange",["yellow","green","violet",84,"blue","orange",13]],183],"d":"red",
"j":[-2,"red","yellow",176,-24,140,"blue","yellow",155,{"e":-28,"c":"violet","a":{"a":"green","b":3},"b":"red","d":-16}],
"c":["violet",-16],"h":"blue","b":"green","g":["yellow","yellow","yellow",44,"orange",50,36,{"e":"green","a":162,"d":112,
"c":166,"h":92,"b":31,"g":"blue","f":-12}],"f":"yellow","i":["yellow","violet",[19,"red",["violet","violet",195]],["yellow",
[106],"red","orange","blue"],178,{"e":"violet","a":104,"d":"red","c":"yellow","h":{"c":-47,"a":"blue","b":84},"b":"green",
"g":0,"f":"blue","i":"red"},105]}},{"e":7,"c":[156],"a":{"a":{"e":{"e":"violet","a":["blue","yellow","orange"],"d":"green",
"c":[159,"blue","violet","red",61,3],"h":"red","b":"green","g":132,"f":130},"c":92,"a":"orange","b":"green","d":[186,122],
"f":"yellow"}},"g":["yellow","violet"],"b":"violet","d":{"e":{"c":"orange","a":127,"b":41,"d":[36,61,178,"yellow","green",
"red","violet",{"e":-18,"a":"yellow","d":"red","c":0,"h":"yellow","b":"yellow","g":6,"f":"yellow"},162]},"c":-6,"a":{"c":{"e":"red",
"c":78,"a":"blue","b":91,"d":49,"f":14},"a":["green"],"b":{"a":22},"d":{"a":"blue"}},"b":154,"d":"orange","f":{"a":170}},"f":-33},
"blue",82],"a":{"c":["green",["red","orange",{"e":-28,"a":{"a":"violet","b":110},"d":[[174,140,72],191,"yellow",108,195,{"a":"violet"},
147,53],"c":"yellow","h":"green","b":"violet","g":"red","f":["blue","orange","violet",[48,118],156,144,-46,110,["orange","yellow","blue",
"red"],149],"i":{"e":"orange","c":101,"a":{"e":111,"a":"blue","d":"orange","j":"orange","c":-40,"h":13,"b":"orange","g":"yellow","f":32,
"i":"yellow"},"g":{"e":"orange","a":"blue","d":195,"j":81,"c":185,"h":20,"b":4,"g":"green","f":112,"i":147},"b":-22,"d":199,"f":"yellow"}},
"yellow",19,128,-3,27,["orange",{"e":-8,"c":156,"a":"yellow","b":"red","d":20,"f":-37},[{"c":19,"a":"blue","b":150},"orange",-12,9]]],[12,
{"e":"blue","c":162,"a":["blue",184,"yellow","orange",{"a":"yellow","b":"green"},88,-19,60,"yellow"],"g":"yellow","b":191,"d":-6,"f":"violet"}],
{"c":"yellow","a":"orange","b":{"a":"violet","b":["orange","orange","violet",{"e":"red","a":"red","d":163,"c":153,"h":"green","b":6,"g":"blue",
"f":17,"i":63},163,[164,-41,"violet","violet",126]]},"d":-38}],"a":{"e":{"c":-1,"a":"orange","b":{"c":131,"a":{"e":-11,"c":120,"a":"green",
"b":198,"d":152,"f":37},"b":77,"d":{"e":8,"a":21,"d":"blue","c":"yellow","h":"violet","b":11,"g":"violet","f":{"e":148,"c":98,"a":80,"b":78,"d":68}}},
"d":"orange"},"a":["violet",[-30,117],[78,31],74,197,"red","orange",95],"d":"green","c":[96,"violet"],"h":{"e":{"c":"green","a":[76,16,125,"green",15,
"violet",130,60,"red"],"b":"orange","d":-38},"a":71,"d":158,"j":-16,"c":[["yellow","green",183,165,-28,4,102],-20,"blue","violet",{"e":"yellow",
"c":{"e":"orange","a":"yellow","d":"red","c":"orange","h":"orange","b":169,"g":"violet","f":48},"a":99,"b":["blue",-1,"blue"],"d":104,"f":20},83],
"h":"green","b":[-14,[28],"yellow",[93,"blue",-24,160,35,25,-32,"green"],{"e":[51,"red",64,"red","blue",-16,31,146,"blue","yellow"],"c":122,"a":"orange",
"b":"yellow","d":{"c":53,"a":179,"b":"blue","d":-44}},17,110],"g":151,"f":"orange","i":{"a":"violet","b":{"a":[-24]}}},"b":["violet",{"e":{"e":91,
"a":{"e":"blue","a":-25,"d":70,"c":"green","h":"violet","b":48,"g":"violet","f":"orange"},"d":"yellow","c":136,"h":90,"b":{"e":26,"c":"green","a":"blue",
"g":"violet","b":192,"d":198,"f":86},"g":"orange","f":"blue"},"a":137,"d":47,"c":11,"h":"yellow","b":"orange","g":"orange","f":{"e":"blue","a":45,
"d":"violet","j":146,"c":-38,"h":4,"b":157,"g":104,"f":-13,"i":"yellow"}},{"e":191,"a":"blue","d":"green","c":"blue","h":-19,"b":148,"g":"blue",
"f":{"e":57,"c":"red","a":167,"b":[-42,147,166,74,-32,"orange","violet","yellow"],"d":"green","f":71}},"green",[184,"yellow",[["yellow","yellow"],
"green",{"e":-24,"a":1,"d":44,"c":"yellow","h":"yellow","b":144,"g":"violet","f":"green","i":-7},86,119,52,"orange",["red","red",18,"orange",192,116],
120,109]],["violet",-14,"violet",{"e":-29,"c":{"e":"green","a":"red","d":"blue","j":68,"c":9,"h":"orange","b":25,"g":"red","f":10,"i":"green"},"a":-15,
"b":"blue","d":"violet","f":125},119,[127,"violet","green",39]]],"g":"green","f":-14},"b":23,"d":{"c":{"c":98,"a":"yellow","b":97},"a":-29,"b":{"a":192,
"b":["violet","yellow",65,{"c":{"e":"violet","c":"yellow","a":"violet","b":"blue","d":"orange"},"a":"red","b":176},192]},"d":"orange"}},"b":[{"e":"yellow",
"c":45,"a":81,"b":["orange"],"d":"violet","f":[-3,"red",146,186,"orange","red","blue",{"e":"green","c":22,"a":"yellow","b":"blue","d":-2,"f":"green"},0,180]},
[[-36,["orange",[166],"violet"],{"c":86,"a":[2,173,78,"violet","orange",["violet","yellow","blue",107,24,-1,"orange",13,"green","violet"]],"b":"violet","d":107},
100,["yellow",-22,[177,69,144,84,159,"violet"],"green"],{"e":"green","a":78,"d":173,"c":"blue","h":36,"b":[[-48,164,"red","blue",45],["green","orange",23,15,110,
49,"blue"],"violet",0,192,53],"g":["blue","violet"],"f":"orange","i":[{"e":186,"c":"orange","a":"green","b":174,"d":"yellow","f":46},"violet",188,"yellow",54,-6,
"blue","violet",0,{"e":166,"a":"yellow","d":"red","j":"blue","c":"red","h":97,"b":"violet","g":32,"f":173,"i":95}]},{"a":58,"b":"blue"},"green",["red",150,3,
"orange",32,106,[["blue"],118,{"c":178,"a":7,"b":185,"d":"violet"},"red",164,"red",[128,"red"],-44],{"e":"orange","a":"orange","d":130,"c":"yellow","h":"yellow",
"b":{"e":91,"a":161,"d":-44,"c":-45,"h":"blue","b":"orange","g":122,"f":"orange"},"g":"yellow","f":"blue"},139,{"a":97}]],"orange",["orange",0,"blue","red",
{"e":192,"c":92,"a":{"a":["red",164,"yellow",189,"blue",150,"green","violet",-35,33],"b":"red"},"g":"yellow","b":{"a":"blue"},"d":"red","f":-31},111,"yellow",
"red",[["green","green",42,-47,[88,142,"blue",59,-42,"violet"],"green"],"orange",["violet","yellow","violet",198,94,44,"orange","green","blue",26],"blue","violet"]],
{"a":118}],{"e":-35,"a":{"e":["orange",-1,121,"red"],"c":"violet","a":[[127,-18,-4,[-40,42,"violet",167,"orange",112,"orange"],30,31,"violet",37],{"c":"blue",
"a":"green","b":172},[141,154],146,"yellow"],"b":"blue","d":-3},"d":"red","c":-17,"h":-3,"b":["violet","yellow",19,"red",8,138,37],"g":{"c":{"e":-5,"c":[-23,21,
"green",-3,"red"],"a":163,"b":"blue","d":"red","f":["violet",136,"violet"]},"a":183,"b":-36,"d":"violet"},"f":["green",["green",{"e":"red","c":"yellow","a":10,
"g":"blue","b":56,"d":"red","f":["green","red","red"]},["violet","orange",{"e":7,"c":170,"a":"green","b":55,"d":115},"green","blue"]]]},{"e":{"e":{"a":"blue",
"b":[192,"blue",86,93]},"a":"green","d":"yellow","c":186,"h":["violet","orange","orange","violet","red","orange",139,"violet","green",{"e":"red","a":85,"d":"orange",
"c":"yellow","h":[46,35,"red","green",-11,"blue"],"b":"yellow","g":"yellow","f":"orange"}],"b":{"e":77,"a":"yellow","d":"green","c":144,"h":"green","b":{"e":[27,
"blue","yellow",-48,-21,-12,121,"violet"],"a":[-23],"d":"blue","j":{"e":"orange","c":"blue","a":"green","b":-34,"d":"green"},"c":"green","h":"green","b":61,
"g":["blue"],"f":19,"i":"violet"},"g":86,"f":"orange"},"g":"yellow","f":"orange"},"c":{"c":["yellow",82,"red","orange",{"e":34,"c":"green","a":"violet","b":182,
"d":"orange","f":{"e":-49,"a":184,"d":57,"j":"yellow","c":120,"h":"violet","b":170,"g":159,"f":-3,"i":99}},-37,{"e":84,"a":["violet",154,"violet",123,"violet",
148,105,"yellow",195],"d":"orange","c":{"a":140},"h":"yellow","b":159,"g":76,"f":186},183],"a":[{"e":"yellow","a":-2,"d":"green","c":{"c":68,"a":"red","b":"blue"},
"h":[140,99,-2,"green","orange","orange",-14,60,"red","green"],"b":"violet","g":1,"f":["yellow","violet"],"i":142},{"e":{"a":76,"b":-17},"c":46,"a":[76,1,79,36,-25,
"yellow",0],"g":"yellow","b":185,"d":54,"f":"green"}],"b":{"e":127,"a":[["violet"],115,114,"red","orange",83,-17,-2],"d":{"e":198,"c":"red","a":46,"b":77,"d":"green"},
"c":140,"h":"orange","b":89,"g":149,"f":"orange"}},"a":"blue","g":62,"b":"orange","d":"violet","f":{"e":-11,"a":[29,"yellow","yellow",187,"orange",{"e":147,"a":197,
"d":["green",182,-2,95,-8,110,-38],"c":"violet","h":187,"b":90,"g":22,"f":"yellow","i":"green"},{"a":["blue","red",140],"b":"violet"},"blue",76,59],"d":-26,
"c":[{"a":"orange","b":179},"red",{"e":"violet","c":"orange","a":"blue","g":"violet","b":25,"d":149,"f":-27},{"e":"green","a":"yellow","d":"violet",
"j":{"c":67,"a":179,"b":53},"c":145,"h":-4,"b":"blue","g":11,"f":"blue","i":"violet"}],"h":"red","b":"blue","g":{"e":"yellow","c":[93,12,118,-7,125,93,"yellow",182,
113,"yellow"],"a":"green","b":"green","d":"violet"},"f":"green","i":"green"}},[7]],"d":[[[42,67,{"e":"yellow","a":"orange","d":{"e":"orange","c":"green","a":-26,
"g":[68,162,"orange","red"],"b":105,"d":52,"f":"yellow"},"c":{"e":"orange","a":"orange","d":120,"c":"blue","h":[172,"orange",171,-40,139,161,"yellow",197],
"b":"yellow","g":[162,"orange",2],"f":"yellow","i":"orange"},"h":-21,"b":"green","g":{"e":33,"a":6,"d":"violet","c":193,"h":89,"b":56,"g":146,"f":{"c":-46,
"a":"green","b":161},"i":149},"f":65},[["yellow",31,-4],"red",-27,21,{"e":{"e":-25,"a":-1,"d":"violet","c":"violet","h":"blue","b":"green","g":"violet","f":"orange",
"i":"yellow"},"c":"orange","a":"orange","g":"orange","b":60,"d":{"e":"yellow","c":"green","a":"yellow","g":"violet","b":134,"d":149,"f":"yellow"},"f":"blue"},"violet",
[66,"green",25,106,"red","orange"],{"a":{"e":"orange","a":95,"d":"red","c":176,"h":179,"b":87,"g":195,"f":71,"i":"violet"},"b":14},55],"blue"],[[62,"violet",58,[-42,
"orange",{"e":186,"a":"orange","d":"green","j":100,"c":163,"h":-9,"b":"green","g":"orange","f":-8,"i":"orange"},"red",12,"orange",-3,162,"green"],"violet",94,"orange",
41,58,"violet"],[["green","green","red"],"red",128,"blue","yellow","yellow",{"e":"yellow","a":193,"d":["orange",134],"j":["green",45,195,123,50,61],"c":"violet",
"h":-39,"b":13,"g":"yellow","f":{"e":-33,"c":26,"a":83,"b":122,"d":"orange"},"i":"orange"},"blue",46,"yellow"],"yellow","yellow",30,[158,{"c":"green","a":68,"b":122},
{"e":95,"c":"orange","a":"green","b":115,"d":180,"f":"yellow"},[194,-29,"orange","violet",{"e":173,"a":193,"d":"green","j":"blue","c":"blue","h":"green","b":"yellow",
"g":"green","f":186,"i":"red"},135],"violet"]],"yellow",144,["violet","red",{"a":[121],"b":134},{"a":-23,"b":"violet"},[7],[101,181,"yellow",{"e":"violet","c":"green",
"a":56,"b":"green","d":175}]],"violet",{"c":"green","a":{"e":"green","c":-42,"a":-49,"b":[["orange","yellow",-17,"orange",-11,-41,"red",32],"blue",46,{"a":"yellow",
"b":"violet"}],"d":"red","f":["violet","violet",-11]},"b":["orange",{"e":62,"c":"violet","a":-5,"b":39,"d":[122,129,"violet","orange"]},"green"]}]],
"f":{"e":{"e":[{"e":{"a":"violet"},"c":171,"a":{"a":{"e":122,"a":"blue","d":164,"j":54,"c":"violet","h":-1,"b":148,"g":"blue","f":190,"i":-37}},"b":[{"a":158},"blue",
26,{"e":"violet","c":"green","a":64,"g":36,"b":"blue","d":"blue","f":"green"},"violet",125,"orange"],"d":"violet"},"yellow",{"c":{"e":-46,"c":121,"a":191,"g":"blue",
"b":67,"d":-25,"f":"blue"},"a":"orange","b":{"a":108,"b":["red",-48]}},{"e":116,"c":"green","a":-34,"g":59,"b":"yellow","d":37,"f":{"e":-3,"a":105,"d":"red","c":"red",
"h":"green","b":27,"g":189,"f":"violet"}},"red",["yellow",152,{"e":"red","a":[164,155,"green","yellow"],"d":79,"c":"violet","h":{"e":"blue","c":53,"a":"orange","b":-43,
"d":"violet","f":"orange"},"b":32,"g":"green","f":"green","i":23},"red","violet",-37,[["green","violet",131,-18,"green"],48,6,"red",83],152,181,75],{"e":[116,100,"red",
{"a":156},"green"],"c":"red","a":170,"g":[28,59,"violet","violet",144],"b":13,"d":{"a":"yellow","b":"blue"},"f":{"e":-45,"c":"orange","a":"orange","b":"green",
"d":["orange","orange",98,-13,"yellow",183,193,"green"],"f":"green"}},128,["green"]],"a":{"e":{"e":"green","a":"yellow","d":{"c":-48,"a":["violet",195,77,-13,"green","red"],
"b":"blue","d":"red"},"c":"violet","h":[-13,"green"],"b":27,"g":-37,"f":197},"c":68,"a":-23,"b":93,"d":"orange","f":{"a":"green","b":-4}},"d":[-48],"c":[["violet","blue",
"orange",{"e":42,"c":66,"a":["blue","blue","orange",144,130,"red","violet","red",112],"b":"blue","d":192},"orange",["orange",4,"violet",-47,"orange"],["violet","yellow",54,
{"c":47,"a":"yellow","b":"red"},{"a":"violet"},151,-30,"orange","red"],-31,"blue"],135,{"e":"red","a":[5,117],"d":119,"j":189,"c":{"e":134,"a":142,"d":"orange","j":189,
"c":"red","h":"violet","b":"yellow","g":122,"f":{"c":"orange","a":"violet","b":"yellow"},"i":107},"h":109,"b":15,"g":[157,135,122,-34,168,"green",-19,13,64],"f":{"e":"blue",
"c":174,"a":187,"g":"violet","b":36,"d":80,"f":188},"i":-10},60,"orange",146,{"e":-8,"a":{"a":63},"d":"green","c":67,"h":["blue","yellow","red","blue",["yellow",189,"orange",
"green"],"orange","violet"],"b":-29,"g":"orange","f":["violet","green","orange"]},{"e":"violet","c":"red","a":-45,"g":[45,"green",-24,-7,{"a":67,"b":"red"},"orange",188,
["red","blue","red"],47,133],"b":{"e":112,"a":76,"d":"yellow","j":93,"c":"orange","h":137,"b":154,"g":["orange","red","yellow",-26,"orange"],"f":-3,"i":"yellow"},
"d":{"e":"violet","c":48,"a":174,"b":"green","d":189},"f":[69,"red",{"a":"green","b":"blue"},"red",{"a":85}]},{"e":"violet","c":{"e":"violet","c":"red","a":-22,"b":3,
"d":{"e":185,"c":52,"a":"yellow","b":165,"d":"blue","f":"yellow"}},"a":45,"b":"green","d":"blue"}],"h":"orange","b":{"e":"red","c":68,"a":171,"g":-30,"b":"orange",
"d":"violet","f":{"c":22,"a":["green"],"b":148}},"g":{"e":77,"c":28,"a":["green","green",{"a":"violet","b":115},{"e":59,"a":198,"d":"violet","c":"yellow","h":-38,
"b":"violet","g":69,"f":"violet","i":-12},35],"b":"blue","d":{"e":[-20,"orange","green",116,"yellow",-21],"c":"red","a":"green","b":160,"d":["violet",-49,"yellow",
[46,"blue",196]]}},"f":[162,{"c":[-30,"violet"],"a":"blue","b":"blue","d":83},"blue"],"i":"green"},"a":["blue",{"e":{"e":131,"c":"yellow","a":"blue","g":{"e":"yellow",
"c":70,"a":{"e":53,"c":100,"a":162,"b":-7,"d":-14,"f":"orange"},"b":"yellow","d":"green","f":149},"b":[184,"green","blue",-38,193,75,156],"d":96,"f":{"e":177,"c":0,
"a":{"c":"red","a":-23,"b":"yellow","d":-37},"g":149,"b":"blue","d":61,"f":78}},"c":-21,"a":[{"e":{"a":"yellow"},"c":71,"a":{"e":-46,"a":"yellow","d":"green","c":78,
"h":59,"b":"green","g":189,"f":"red","i":"red"},"b":"yellow","d":{"e":"violet","c":"violet","a":"orange","b":189,"d":21,"f":71},"f":15},"green",150,"yellow"],"b":101,
"d":"blue","f":"blue"},"green",[[-10,{"c":61,"a":99,"b":"green"}],"violet",["blue",-41],54,[194,146,"green",90,"violet","violet",-5,"red"],{"e":114,"a":"green",
"d":{"e":"blue","a":"blue","d":["yellow",10,"blue",86,44,"violet","red","red"],"c":94,"h":{"e":"red","c":"blue","a":89,"g":197,"b":148,"d":91,"f":52},"b":"orange",
"g":"red","f":"green"},"c":[96,127,29],"h":"blue","b":"green","g":"yellow","f":{"e":"green","a":"blue","d":"orange","j":40,"c":"red","h":92,"b":-49,"g":-34,"f":8,"i":125},
"i":-30},{"a":154,"b":100}]],"d":{"c":{"a":"violet","b":"violet"},"a":"yellow","b":{"e":[83,"red",["green",{"a":"violet"},126,105,86],[["blue",-40,148,"blue"],168,"red",
"green",["green",41,93,"red",-19],32,"violet","violet","blue","yellow"],{"a":"yellow","b":"green"},[85,164],17,60,66,{"c":"yellow","a":"yellow","b":-10,"d":"yellow"}],
"a":[109,28,52,[118,"violet"],{"a":"blue"},10,163,"green",-21],"d":"green","c":"green","h":["violet","violet"],"b":"blue","g":{"e":-22,"c":["yellow",119,127],"a":"green",
"g":1,"b":[{"a":100,"b":"yellow"},63,41,168,152,"yellow",198,-14,30,103],"d":"violet","f":["blue",135,"yellow","green","yellow",["yellow",35,91,182]]},"f":"yellow",
"i":{"c":"green","a":[{"a":"yellow"},"green","orange",50,117,94,"red",89],"b":"red"}}},"j":{"e":{"e":{"a":70},"c":["blue","violet"],"a":113,"b":{"e":"yellow","c":-9,
"a":135,"b":"yellow","d":81},"d":{"e":189,"a":-19,"d":-14,"j":{"e":"green","a":1,"d":"violet","c":"red","h":106,"b":"green","g":-19,"f":192,"i":"green"},"c":195,
"h":"yellow","b":"orange","g":45,"f":"green","i":"violet"},"f":75},"a":"violet","d":"blue","c":"red","h":113,"b":[14,{"e":82,"a":{"e":59,"a":182,"d":"yellow","c":"blue",
"h":"yellow","b":"green","g":93,"f":"yellow","i":147},"d":58,"c":"violet","h":{"a":{"e":27,"a":"orange","d":181,"c":142,"h":195,"b":"yellow","g":44,"f":"yellow"}},"b":-14,
"g":"red","f":{"a":154},"i":90},"orange",{"a":"blue","b":-11},["yellow",[38,-34,"orange",57],"orange",98,"violet","violet",{"a":134},[24,"blue","blue",172,114],10],
[{"a":["yellow","green"]},166,"blue",["blue",{"e":"blue","c":-6,"a":"green","b":"green","d":"green","f":50},-44,{"e":"violet","a":"yellow","d":-27,"j":33,"c":"orange",
"h":146,"b":"green","g":30,"f":"violet","i":"violet"},"blue","red","violet",6]],113],"g":{"e":{"e":"red","a":125,"d":183,"j":74,"c":["green","yellow"],"h":12,"b":["green",
-38,"yellow"],"g":71,"f":"blue","i":"blue"},"a":["green",86,28,[55,127,"blue",172,"green",83,"green","violet",{"a":53},"blue"],{"a":181,"b":57},[28,"violet"],"red",
{"a":138},198],"d":"yellow","c":[{"e":"violet","c":65,"a":"green","b":{"e":"orange","a":68,"d":"orange","c":"green","h":161,"b":"green","g":"green","f":13},"d":-38},
"blue",{"e":73,"a":40,"d":"green","c":"red","h":"yellow","b":117,"g":178,"f":170},"yellow",188],"h":{"a":-21},"b":{"c":86,"a":["green","green",170,"blue",-40,"yellow",
"red",10],"b":[["green","yellow",2,"violet",-30,"yellow","red",-40,"orange","violet"],"red",58,165,"red"],"d":13},"g":{"a":63},"f":"violet"},"f":["green"],"i":[["yellow",
"yellow","red",{"e":-5,"c":124,"a":"yellow","g":"violet","b":"orange","d":"violet","f":149},-16,9],"violet",-43,{"c":9,"a":52,"b":179,"d":74},"violet",[{"e":-30,"a":82,
"d":"green","j":49,"c":{"e":"green","a":"violet","d":"yellow","j":"blue","c":37,"h":"violet","b":48,"g":12,"f":"green","i":"red"},"h":58,"b":["yellow","blue","blue",29,
"orange","green","green",0],"g":128,"f":"orange","i":91},[181,"red","green","violet","red","green","orange",{"e":"green","a":"yellow","d":"green","c":24,"h":194,"b":128,
"g":"red","f":162,"i":"violet"},191],"red","violet","yellow","red"],141,123]},"c":{"a":95},"h":{"a":138},"b":118,"g":"green","f":0,"i":"violet"}}
"""

include builtins\json.e 

--with trace
function sum_json(object json, bool skip_red=false)
    if atom(json) then return json end if
    if string(json) then return 0 end if
    atom res = 0
    if json[1]=JSON_OBJECT then
        for i=2 to length(json) do
            object ji2 = json[i][2]
            if skip_red then
                if ji2="red" then return 0 end if
            end if
            res += sum_json(ji2,skip_red)
        end for
    elsif json[1]=JSON_ARRAY then
        for i=2 to length(json) do
            res += sum_json(json[i],skip_red)
        end for
    elsif json[1]=JSON_KEYWORD then
        -- "true"/"false"/"null" --> 0
    else
        ?9/0 -- invalid json??
    end if
    return res
end function

procedure day12()
    clear_screen()
    object res = parse_json(json) 
--  ?res    -- {-2,1,2,3}
    ?sum_json(res) -- 111754
    ?sum_json(res,true) -- 65402
end procedure

--- Day 13: Knights of the Dinner Table ---
--In years past, the holiday feast with your family hasn't gone so well. Not everyone gets along! This year, you resolve, will be different. You're going to find the optimal seating arrangement and avoid all those awkward conversations.
--
--You start by writing up a list of everyone invited and the amount their happiness would increase or decrease if they were to find themselves sitting next to each other person. You have a circular table that will be just big enough to fit everyone comfortably, and so each person will have exactly two neighbors.
--
--For example, suppose you have only four attendees planned, and you calculate their potential happiness as follows:
--
--Alice would gain 54 happiness units by sitting next to Bob.
--Alice would lose 79 happiness units by sitting next to Carol.
--Alice would lose 2 happiness units by sitting next to David.
--Bob would gain 83 happiness units by sitting next to Alice.
--Bob would lose 7 happiness units by sitting next to Carol.
--Bob would lose 63 happiness units by sitting next to David.
--Carol would lose 62 happiness units by sitting next to Alice.
--Carol would gain 60 happiness units by sitting next to Bob.
--Carol would gain 55 happiness units by sitting next to David.
--David would gain 46 happiness units by sitting next to Alice.
--David would lose 7 happiness units by sitting next to Bob.
--David would gain 41 happiness units by sitting next to Carol.
--Then, if you seat Alice next to David, Alice would lose 2 happiness units (because David talks so much), but David would gain 46 happiness units (because Alice is such a good listener), for a total change of 44.
--
--If you continue around the table, you could then seat Bob next to Alice (Bob gains 83, Alice gains 54). Finally, seat Carol, who sits next to Bob (Carol gains 60, Bob loses 7) and David (Carol gains 55, David gains 41). The arrangement looks like this:
--
--   +41 +46
--+55   David    -2
--Carol     Alice
--+60    Bob      +54
--   -7  +83
--After trying every other seating arrangement in this hypothetical scenario, you find that this one is the most optimal, with a total change in happiness of 330.
--
--What is the total change in happiness for the optimal seating arrangement of the actual guest list?

--- Part Two ---
--In all the commotion, you realize that you forgot to seat yourself. 
--At this point, you're pretty apathetic toward the whole thing, and your happiness wouldn't 
--really go up or down regardless of who you sit next to. You assume everyone else would be 
--just as ambivalent about sitting next to you, too.
--
--So, add yourself to the list, and give all happiness relationships that involve you a score of 0.
--
--What is the total change in happiness for the optimal seating arrangement that actually includes yourself?

include builtins/punique.e

--sequence s = { 4,7,9,7,2,5,5,9,0,4,4,5,6,5}
--?unique(s, "STABLE") --> {4,7,9,2,5,0,6}
--?unique(s, "SORT") --> {0,2,4,5,6,7,9}
--?unique(s, "PRESORTED") --> {4,7,9,7,2,5,9,0,4,5,6,5}
--?unique(sort(s), "PRESORTED") --> {0,2,4,5,6,7,9}

--function unique(sequence s) -- (builtin in 0.8.2+)
--  if length(s) then
--      s = sort(s)
--      object prev = s[1]
--      integer outdx = 1
--      for i=2 to length(s) do
--          if s[i]!=prev then
--              prev = s[i]
--              outdx += 1
--              s[outdx] = prev
--          end if
--      end for
--      s = s[1..outdx]
--  end if
--  return s
--end function

function decode(string input)
    sequence res = split(input,"\n")
    string p1, gl, p2
    integer v
    for i=1 to length(res) do
        {{p1, gl, v, p2}} = scanf(res[i],"%s would %s %d happiness units by sitting next to %s.")
        res[i] = {{p1,p2},iff(gl="lose"?-v:+v)}
    end for
    return res
end function

--constant input = """
--Alice would gain 54 happiness units by sitting next to Bob.
--Alice would lose 79 happiness units by sitting next to Carol.
--Alice would lose 2 happiness units by sitting next to David.
--Bob would gain 83 happiness units by sitting next to Alice.
--Bob would lose 7 happiness units by sitting next to Carol.
--Bob would lose 63 happiness units by sitting next to David.
--Carol would lose 62 happiness units by sitting next to Alice.
--Carol would gain 60 happiness units by sitting next to Bob.
--Carol would gain 55 happiness units by sitting next to David.
--David would gain 46 happiness units by sitting next to Alice.
--David would lose 7 happiness units by sitting next to Bob.
--David would gain 41 happiness units by sitting next to Carol.""",
constant input = """
Alice would lose 2 happiness units by sitting next to Bob.
Alice would lose 62 happiness units by sitting next to Carol.
Alice would gain 65 happiness units by sitting next to David.
Alice would gain 21 happiness units by sitting next to Eric.
Alice would lose 81 happiness units by sitting next to Frank.
Alice would lose 4 happiness units by sitting next to George.
Alice would lose 80 happiness units by sitting next to Mallory.
Bob would gain 93 happiness units by sitting next to Alice.
Bob would gain 19 happiness units by sitting next to Carol.
Bob would gain 5 happiness units by sitting next to David.
Bob would gain 49 happiness units by sitting next to Eric.
Bob would gain 68 happiness units by sitting next to Frank.
Bob would gain 23 happiness units by sitting next to George.
Bob would gain 29 happiness units by sitting next to Mallory.
Carol would lose 54 happiness units by sitting next to Alice.
Carol would lose 70 happiness units by sitting next to Bob.
Carol would lose 37 happiness units by sitting next to David.
Carol would lose 46 happiness units by sitting next to Eric.
Carol would gain 33 happiness units by sitting next to Frank.
Carol would lose 35 happiness units by sitting next to George.
Carol would gain 10 happiness units by sitting next to Mallory.
David would gain 43 happiness units by sitting next to Alice.
David would lose 96 happiness units by sitting next to Bob.
David would lose 53 happiness units by sitting next to Carol.
David would lose 30 happiness units by sitting next to Eric.
David would lose 12 happiness units by sitting next to Frank.
David would gain 75 happiness units by sitting next to George.
David would lose 20 happiness units by sitting next to Mallory.
Eric would gain 8 happiness units by sitting next to Alice.
Eric would lose 89 happiness units by sitting next to Bob.
Eric would lose 69 happiness units by sitting next to Carol.
Eric would lose 34 happiness units by sitting next to David.
Eric would gain 95 happiness units by sitting next to Frank.
Eric would gain 34 happiness units by sitting next to George.
Eric would lose 99 happiness units by sitting next to Mallory.
Frank would lose 97 happiness units by sitting next to Alice.
Frank would gain 6 happiness units by sitting next to Bob.
Frank would lose 9 happiness units by sitting next to Carol.
Frank would gain 56 happiness units by sitting next to David.
Frank would lose 17 happiness units by sitting next to Eric.
Frank would gain 18 happiness units by sitting next to George.
Frank would lose 56 happiness units by sitting next to Mallory.
George would gain 45 happiness units by sitting next to Alice.
George would gain 76 happiness units by sitting next to Bob.
George would gain 63 happiness units by sitting next to Carol.
George would gain 54 happiness units by sitting next to David.
George would gain 54 happiness units by sitting next to Eric.
George would gain 30 happiness units by sitting next to Frank.
George would gain 7 happiness units by sitting next to Mallory.
Mallory would gain 31 happiness units by sitting next to Alice.
Mallory would lose 32 happiness units by sitting next to Bob.
Mallory would gain 95 happiness units by sitting next to Carol.
Mallory would gain 91 happiness units by sitting next to David.
Mallory would lose 66 happiness units by sitting next to Eric.
Mallory would lose 75 happiness units by sitting next to Frank.
Mallory would lose 99 happiness units by sitting next to George.""",
        rules = decode(input),
        people = unique(vslice(vslice(rules,1),1))

function calculateHappiness(sequence placed, rules)
    integer res = 0, l = length(placed), v
    sequence duo
    for i=1 to l do
        string diner = placed[i],
               right = placed[iff(i=l?1:i+1)]
        sequence two = {{diner,right},{right,diner}}
        for r=1 to length(rules) do
            {duo, v} = rules[r]
            if find(duo,two) then res += v end if
        end for
    end for
    return {res,placed}
end function

function generateTablePosition(sequence placed, toplace, rules)
    if toplace={} then
        return calculateHappiness(placed, rules)
    end if
    object res = NULL
    for i=1 to length(toplace) do
        res = max(res,generateTablePosition(append(placed,toplace[i]),remove(toplace,i),rules))
    end for
    return res
end function

function extend(sequence rules, people, string me)
    for i=1 to length(people) do
        string other = people[i]
        rules = append(rules,{{other,me},0})
        rules = append(rules,{{me,other},0})
    end for
    return rules
end function

procedure day13()
    ?generateTablePosition({}, people, rules)
--{330,{"David","Carol","Bob","Alice"}}
--{664,{"Mallory","David","Alice","Bob","George","Eric","Frank","Carol"}}
    ?generateTablePosition({}, append(people,"Me"), extend(rules,people,"Me"))
--{640,{"Me","Frank","Eric","George","Bob","Alice","David","Mallory","Carol"}}
end procedure

--- Day 14: Reindeer Olympics ---
--This year is the Reindeer Olympics! Reindeer can fly at high speeds, but must rest occasionally to recover their energy. 
--Santa would like to know which of his reindeer is fastest, and so he has them race.
--
--Reindeer can only either be flying (always at their top speed) or resting (not moving at all), and always spend whole seconds in either state.
--
--For example, suppose you have the following Reindeer:
--
--Comet can fly 14 km/s for 10 seconds, but then must rest for 127 seconds.
--Dancer can fly 16 km/s for 11 seconds, but then must rest for 162 seconds.
--After one second, Comet has gone 14 km, while Dancer has gone 16 km. 
--After ten seconds, Comet has gone 140 km, while Dancer has gone 160 km. 
--On the eleventh second, Comet begins resting (staying at 140 km), and Dancer continues on for a total distance of 176 km. 
--On the 12th second, both reindeer are resting. 
--They continue to rest until the 138th second, when Comet flies for another ten seconds. 
--On the 174th second, Dancer flies for another 11 seconds.
--
--In this example, after the 1000th second, both reindeer are resting, and Comet is in the lead at 1120 km (poor Dancer has only gotten 1056 km by that point). 
--So, in this situation, Comet would win (if the race ended at 1000 seconds).
--
--Given the descriptions of each reindeer (in your puzzle input), after exactly 2503 seconds, what distance has the winning reindeer traveled?

--- Part Two ---
--Seeing how reindeer move in bursts, Santa decides he's not pleased with the old scoring system.
--
--Instead, at the end of each second, he awards one point to the reindeer currently in the lead. 
--(If there are multiple reindeer tied for the lead, they each get one point.) 
--He keeps the traditional 2503 second time limit, of course, as doing otherwise would be entirely ridiculous.
--
--Given the example reindeer from above, after the first second, Dancer is in the lead and gets one point. 
--He stays in the lead until several seconds into Comet's second burst: after the 140th second, Comet pulls into the lead and gets his first point. 
--Of course, since Dancer had been in the lead for the 139 seconds before that, he has accumulated 139 points by the 140th second.
--
--After the 1000th second, Dancer has accumulated 689 points, while poor Comet, our old champion, only has 312. 
--So, with the new scoring system, Dancer would win (if the race ended at 1000 seconds).
--
--Again given the descriptions of each reindeer (in your puzzle input), after exactly 2503 seconds, how many points does the winning reindeer have?

--constant reindeer = split("""
--Comet can fly 14 km/s for 10 seconds, but then must rest for 127 seconds.
--Dancer can fly 16 km/s for 11 seconds, but then must rest for 162 seconds.""","\n"),
constant reindeer = split("""
Rudolph can fly 22 km/s for 8 seconds, but then must rest for 165 seconds.
Cupid can fly 8 km/s for 17 seconds, but then must rest for 114 seconds.
Prancer can fly 18 km/s for 6 seconds, but then must rest for 103 seconds.
Donner can fly 25 km/s for 6 seconds, but then must rest for 145 seconds.
Dasher can fly 11 km/s for 12 seconds, but then must rest for 125 seconds.
Comet can fly 21 km/s for 6 seconds, but then must rest for 121 seconds.
Blitzen can fly 18 km/s for 3 seconds, but then must rest for 50 seconds.
Vixen can fly 20 km/s for 4 seconds, but then must rest for 75 seconds.
Dancer can fly 7 km/s for 20 seconds, but then must rest for 119 seconds.""","\n"),
fmt = "%s can fly %d km/s for %d seconds, but then must rest for %d seconds."

procedure day14()
    sequence state = {}
    string name
    integer speed,secs,rest,flying,rmdr,pts,distance
    for i=1 to length(reindeer) do
        {{name,speed,secs,rest}} = scanf(reindeer[i],fmt)
        state = append(state,{name,speed,secs,rest,true,secs,0,0})
    end for
    for part=1 to 2 do
--      for i=1 to 1000 do
        for i=1 to 2503 do
            for j=1 to length(state) do
                {name,speed,secs,rest,flying,rmdr,pts,distance} = state[j]
                if flying then
                    distance += speed
                end if
                rmdr -= 1
                if rmdr=0 then
                    rmdr = iff(flying?rest:secs)
                    flying = not flying
                end if
                state[j] = {name,speed,secs,rest,flying,rmdr,pts,distance}
            end for
            if part=2 then
                integer farthest = largest(vslice(state,-1))
                for j=1 to length(state) do
                    if state[j][-1]=farthest then
                        state[j][-2] += 1
                    end if
                end for
            end if
--          if find(i,{1,10,1000}) then
--          if part=2 and find(i,{1,10,140,1000}) then
--              ?i
--              ?state
--{{"Comet",14,10,127,1,9,14},{"Dancer",16,11,162,1,10,16}}
--10
--{{"Comet",14,10,127,0,127,140},{"Dancer",16,11,162,1,1,160}}
--1000
--{{"Comet",14,10,127,0,96,1120},{"Dancer",16,11,162,0,38,1056}}
--          end if
        end for
        integer winner = largest(vslice(state,-part),return_index:=true) 
        ?state[winner]  -- {"Cupid",8,17,114,1,3,2696}
                        -- {"Rudolph",22,8,165,0,92,1084,2640}
--{"Comet",14,10,127,0,96,0,1120}
--{"Dancer",16,11,162,0,76,954,1056}
        if part=1 then
            for j=1 to length(state) do
                -- reset {flying,rmdr,points,distance}
                state[j][-4..-1] = {true,state[j][3],0,0}
            end for         
        end if
    end for
end procedure

--- Day 15: Science for Hungry People ---
--Today, you set out on the task of perfecting your milk-dunking cookie recipe. 
--All you have to do is find the right balance of ingredients.
--
--Your recipe leaves room for exactly 100 teaspoons of ingredients. 
--You make a list of the remaining ingredients you could use to finish the recipe (your puzzle input) and their properties per teaspoon:
--
--capacity (how well it helps the cookie absorb milk)
--durability (how well it keeps the cookie intact when full of milk)
--flavor (how tasty it makes the cookie)
--texture (how it improves the feel of the cookie)
--calories (how many calories it adds to the cookie)
--You can only measure ingredients in whole-teaspoon amounts accurately, and you have to be accurate so you can reproduce your results in the future. 
--The total score of a cookie can be found by adding up each of the properties (negative totals become 0) and then multiplying together everything except calories.
--
--For instance, suppose you have these two ingredients:
--
--Butterscotch: capacity -1, durability -2, flavor 6, texture 3, calories 8
--Cinnamon: capacity 2, durability 3, flavor -2, texture -1, calories 3
--Then, choosing to use 44 teaspoons of butterscotch and 56 teaspoons of cinnamon (because the amounts of each ingredient must add up to 100) 
--would result in a cookie with the following properties:
--
--A capacity of 44*-1 + 56*2 = 68
--A durability of 44*-2 + 56*3 = 80
--A flavor of 44*6 + 56*-2 = 152
--A texture of 44*3 + 56*-1 = 76
--Multiplying these together (68 * 80 * 152 * 76, ignoring calories for now) results in a total score of 62842880, 
--which happens to be the best score possible given these ingredients. 
--If any properties had produced a negative total, it would have instead become zero, causing the whole score to multiply to zero.
--
--Given the ingredients in your kitchen and their properties, what is the total score of the highest-scoring cookie you can make?

--- Part Two ---
--Your cookie recipe becomes wildly popular! 
--Someone asks if you can make another recipe that has exactly 500 calories per cookie (so they can use it as a meal replacement). 
--Keep the rest of your award-winning process the same (100 teaspoons, same ingredients, same scoring system).
--
--For example, given the ingredients above, if you had instead selected 40 teaspoons of butterscotch and 60 teaspoons of cinnamon 
--(which still adds to 100), the total calorie count would be 40*8 + 60*3 = 500. 
--The total score would go down, though: only 57600000, the best you can do in such trying circumstances.
--
--Given the ingredients in your kitchen and their properties, what is the total score of the highest-scoring cookie you can make 
--with a calorie total of 500?

function decode_ingredients(string fmt,sequence ingredients)
    for i=1 to length(ingredients) do
        {ingredients[i]} = scanf(ingredients[i],fmt)
    end for
    return ingredients
end function

constant ifmt = 
"%s: capacity %d, durability %d, flavor %d, texture %d, calories %d",
 ingredients = decode_ingredients(ifmt,split("""
Butterscotch: capacity -1, durability -2, flavor 6, texture 3, calories 8
Cinnamon: capacity 2, durability 3, flavor -2, texture -1, calories 3""","\n"))
-- ingredients = decode_ingredients(ifmt,split("""
--Frosting: capacity 4, durability -2, flavor 0, texture 0, calories 5
--Candy: capacity 0, durability 5, flavor -1, texture 0, calories 8
--Butterscotch: capacity -1, durability 0, flavor 5, texture 0, calories 6
--Sugar: capacity 0, durability 0, flavor -2, texture 2, calories 1""","\n"))

function scoreRecipe(sequence ingredients, teaspoons, integer calories)
    integer res = 1
    for i=2 to iff(calories=0?5:6) do -- capacity..texture|calories [ie part 1|2]
        integer property = 0
        for j=1 to length(ingredients) do
            property += ingredients[j][i]*teaspoons[j]
        end for
        res *= iff(i=6?property==calories:max(0,property))
    end for
    return {res, teaspoons}
end function

function generateRecipe(sequence ingredients, teaspoons, integer iidx, tleft, calories=0)
-- ingredients is eg {{"Butterscotch",-1,-2,6,3,8}} (name,capacity,durability,flavor,texture,calories)
-- teaspoons is initially repeat(0,length(ingredients)
-- iidx is the index of the next ingredient to consider
-- tleft is the remaining tespoons available (max 100), such that this never triggers:
    if sum(teaspoons[1..iidx])+tleft!=100 then ?9/0 end if
-- calories is !=0 to only consider cookies with that exact calorie count (ie part 2)
    
    if iidx=length(ingredients) then
        -- last ingredient, all in:
        teaspoons[iidx] = tleft
        return scoreRecipe(ingredients, teaspoons, calories)
    end if
    -- otherwise try 0..tleft of ingredients[iidx]
    teaspoons[iidx] = 0
    {integer res, sequence rt} = generateRecipe(ingredients,teaspoons,iidx+1,tleft,calories)
    for i=1 to tleft do
        teaspoons[iidx] = i
        {integer r, sequence t} = generateRecipe(ingredients,teaspoons,iidx+1,tleft-i,calories)
        if r>res then {res,rt} = {r,t} end if
    end for
    return {res,rt}
end function

procedure day15()
    integer l = length(ingredients)
--  ?generateRecipe(ingredients,repeat(0,l),1,100)      -- {62842880,{44,56}}
--  ?generateRecipe(ingredients,repeat(0,l),1,100,500)  -- {57600000,{40,60}}
    ?generateRecipe(ingredients,repeat(0,l),1,100)      -- {18965440,{24,29,31,16}}
    ?generateRecipe(ingredients,repeat(0,l),1,100,500)  -- {15862900,{21,23,31,25}}
end procedure

--- Day 16: Aunt Sue ---
--Your Aunt Sue has given you a wonderful gift, and you'd like to send her a thank you card. However, there's a small problem: she signed it "From, Aunt Sue".
--
--You have 500 Aunts named "Sue".
--
--So, to avoid sending the card to the wrong person, you need to figure out which Aunt Sue (which you conveniently number 1 to 500, for sanity) gave you the gift. 
--You open the present and, as luck would have it, good ol' Aunt Sue got you a My First Crime Scene Analysis Machine! Just what you wanted. Or needed, as the case may be.
--
--The My First Crime Scene Analysis Machine (MFCSAM for short) can detect a few specific compounds in a given sample, as well as how many distinct kinds of those compounds there are. 
--According to the instructions, these are what the MFCSAM can detect:
--
--children, by human DNA age analysis.
--cats. It doesn't differentiate individual breeds.
--Several seemingly random breeds of dog: samoyeds, pomeranians, akitas, and vizslas.
--goldfish. No other kinds of fish.
--trees, all in one group.
--cars, presumably by exhaust or gasoline or something.
--perfumes, which is handy, since many of your Aunts Sue wear a few kinds.
--In fact, many of your Aunts Sue have many of these. You put the wrapping from the gift into the MFCSAM. It beeps inquisitively at you a few times and then prints out a message on ticker tape:
--
--children: 3
--cats: 7
--samoyeds: 2
--pomeranians: 3
--akitas: 0
--vizslas: 0
--goldfish: 5
--trees: 3
--cars: 2
--perfumes: 1
--You make a list of the things you can remember about each Aunt Sue. Things missing from your list aren't zero - you simply don't remember the value.
--
--What is the number of the Sue that got you the gift?

--- Part Two ---
--As you're about to send the thank you note, something in the MFCSAM's instructions catches your eye. 
--Apparently, it has an outdated retroencabulator, and so the output from the machine isn't exact values - some of them indicate ranges.
--
--In particular, the cats and trees readings indicates that there are greater than that many (due to the unpredictable nuclear decay of 
--cat dander and tree pollen), while the pomeranians and goldfish readings indicate that there are fewer than that many (due to the modial 
--interaction of magnetoreluctance).
--
--What is the number of the real Aunt Sue?

function decode_aunts(string fmt,sequence aunts)
    for i=1 to length(aunts) do
        {aunts[i]} = scanf(aunts[i],fmt)
        if aunts[i][1]!=i then ?9/0 end if
    end for
    return aunts
end function

constant aunt_fmt = 
"Sue %d: %s: %d, %s: %d, %s: %d",
 aunts = decode_aunts(aunt_fmt,split("""
Sue 1: goldfish: 9, cars: 0, samoyeds: 9
Sue 2: perfumes: 5, trees: 8, goldfish: 8
Sue 3: pomeranians: 2, akitas: 1, trees: 5
Sue 4: goldfish: 10, akitas: 2, perfumes: 9
Sue 5: cars: 5, perfumes: 6, akitas: 9
Sue 6: goldfish: 10, cats: 9, cars: 8
Sue 7: trees: 2, samoyeds: 7, goldfish: 10
Sue 8: cars: 8, perfumes: 6, goldfish: 1
Sue 9: cats: 4, pomeranians: 0, trees: 0
Sue 10: trees: 2, children: 10, samoyeds: 10
Sue 11: akitas: 10, perfumes: 4, vizslas: 1
Sue 12: akitas: 1, trees: 0, goldfish: 3
Sue 13: perfumes: 6, goldfish: 10, cars: 8
Sue 14: cats: 8, akitas: 5, vizslas: 0
Sue 15: cars: 8, trees: 3, samoyeds: 5
Sue 16: vizslas: 6, cats: 6, pomeranians: 10
Sue 17: akitas: 6, cats: 2, perfumes: 9
Sue 18: children: 9, goldfish: 2, akitas: 10
Sue 19: trees: 3, perfumes: 0, goldfish: 6
Sue 20: vizslas: 3, akitas: 0, trees: 1
Sue 21: vizslas: 3, cars: 7, akitas: 3
Sue 22: perfumes: 7, children: 1, pomeranians: 7
Sue 23: trees: 10, cars: 9, akitas: 10
Sue 24: akitas: 5, goldfish: 6, vizslas: 6
Sue 25: samoyeds: 3, trees: 8, vizslas: 5
Sue 26: vizslas: 4, pomeranians: 2, trees: 1
Sue 27: cars: 9, goldfish: 2, trees: 4
Sue 28: vizslas: 6, goldfish: 10, perfumes: 7
Sue 29: vizslas: 6, pomeranians: 3, akitas: 6
Sue 30: trees: 0, samoyeds: 5, akitas: 9
Sue 31: vizslas: 1, perfumes: 0, trees: 6
Sue 32: cars: 7, vizslas: 1, children: 10
Sue 33: vizslas: 1, cars: 1, perfumes: 7
Sue 34: vizslas: 9, trees: 10, akitas: 9
Sue 35: akitas: 3, vizslas: 5, cars: 10
Sue 36: cats: 3, children: 9, samoyeds: 3
Sue 37: vizslas: 5, pomeranians: 7, cars: 6
Sue 38: cars: 10, akitas: 5, vizslas: 8
Sue 39: akitas: 5, trees: 9, children: 2
Sue 40: vizslas: 0, cats: 7, akitas: 0
Sue 41: cars: 9, trees: 10, perfumes: 8
Sue 42: akitas: 4, trees: 2, goldfish: 3
Sue 43: goldfish: 1, cats: 1, akitas: 8
Sue 44: goldfish: 8, akitas: 9, vizslas: 4
Sue 45: perfumes: 3, goldfish: 4, trees: 0
Sue 46: trees: 7, perfumes: 1, goldfish: 8
Sue 47: pomeranians: 10, cars: 7, trees: 2
Sue 48: trees: 2, akitas: 1, cars: 4
Sue 49: goldfish: 5, perfumes: 7, akitas: 8
Sue 50: akitas: 9, vizslas: 9, trees: 2
Sue 51: cars: 0, samoyeds: 0, vizslas: 8
Sue 52: trees: 0, perfumes: 6, pomeranians: 4
Sue 53: vizslas: 1, cats: 6, akitas: 3
Sue 54: samoyeds: 8, akitas: 1, vizslas: 4
Sue 55: goldfish: 10, perfumes: 2, pomeranians: 10
Sue 56: trees: 9, perfumes: 3, goldfish: 5
Sue 57: akitas: 3, perfumes: 0, cats: 2
Sue 58: perfumes: 4, vizslas: 4, cars: 8
Sue 59: goldfish: 7, children: 5, pomeranians: 8
Sue 60: cars: 1, trees: 1, perfumes: 10
Sue 61: trees: 4, samoyeds: 4, cars: 6
Sue 62: akitas: 10, trees: 2, vizslas: 6
Sue 63: goldfish: 3, perfumes: 7, vizslas: 10
Sue 64: pomeranians: 5, children: 10, cars: 0
Sue 65: vizslas: 10, cars: 8, perfumes: 3
Sue 66: children: 5, vizslas: 4, akitas: 10
Sue 67: children: 6, perfumes: 7, cars: 3
Sue 68: goldfish: 8, cars: 6, children: 1
Sue 69: vizslas: 5, perfumes: 3, cars: 9
Sue 70: goldfish: 0, cats: 6, perfumes: 0
Sue 71: trees: 2, samoyeds: 3, cars: 1
Sue 72: cats: 3, akitas: 8, vizslas: 7
Sue 73: akitas: 3, vizslas: 2, goldfish: 6
Sue 74: pomeranians: 10, samoyeds: 9, cats: 8
Sue 75: vizslas: 7, cars: 7, akitas: 10
Sue 76: children: 3, cats: 6, vizslas: 3
Sue 77: goldfish: 7, pomeranians: 10, trees: 0
Sue 78: vizslas: 9, children: 7, trees: 10
Sue 79: trees: 6, pomeranians: 8, samoyeds: 1
Sue 80: vizslas: 5, children: 6, pomeranians: 5
Sue 81: cars: 9, vizslas: 9, akitas: 9
Sue 82: vizslas: 3, cars: 8, akitas: 1
Sue 83: vizslas: 4, trees: 2, cats: 1
Sue 84: children: 3, akitas: 0, vizslas: 1
Sue 85: cats: 6, vizslas: 5, akitas: 2
Sue 86: cars: 3, akitas: 7, goldfish: 8
Sue 87: samoyeds: 8, vizslas: 3, goldfish: 8
Sue 88: vizslas: 4, children: 0, cats: 7
Sue 89: goldfish: 9, pomeranians: 10, samoyeds: 0
Sue 90: trees: 6, akitas: 3, cars: 7
Sue 91: samoyeds: 3, akitas: 7, perfumes: 10
Sue 92: cars: 7, pomeranians: 10, trees: 2
Sue 93: samoyeds: 1, children: 3, cars: 3
Sue 94: samoyeds: 8, akitas: 7, vizslas: 0
Sue 95: goldfish: 7, children: 2, cars: 6
Sue 96: cars: 3, perfumes: 9, akitas: 10
Sue 97: akitas: 9, cars: 10, vizslas: 10
Sue 98: trees: 4, goldfish: 8, pomeranians: 7
Sue 99: samoyeds: 6, pomeranians: 0, vizslas: 7
Sue 100: akitas: 7, perfumes: 8, vizslas: 3
Sue 101: cars: 5, perfumes: 1, trees: 0
Sue 102: akitas: 6, pomeranians: 10, trees: 0
Sue 103: trees: 3, perfumes: 5, cats: 9
Sue 104: goldfish: 10, perfumes: 8, akitas: 0
Sue 105: goldfish: 6, vizslas: 5, trees: 2
Sue 106: pomeranians: 9, samoyeds: 10, perfumes: 10
Sue 107: cars: 8, vizslas: 4, akitas: 2
Sue 108: cats: 0, goldfish: 7, trees: 0
Sue 109: cars: 3, pomeranians: 6, trees: 2
Sue 110: perfumes: 4, goldfish: 5, akitas: 10
Sue 111: cars: 3, perfumes: 4, pomeranians: 4
Sue 112: cats: 2, goldfish: 10, akitas: 0
Sue 113: cats: 10, children: 0, trees: 1
Sue 114: akitas: 10, vizslas: 3, goldfish: 0
Sue 115: samoyeds: 3, goldfish: 6, vizslas: 1
Sue 116: cars: 3, perfumes: 5, trees: 6
Sue 117: akitas: 9, samoyeds: 8, goldfish: 8
Sue 118: pomeranians: 5, perfumes: 10, trees: 1
Sue 119: goldfish: 6, perfumes: 3, children: 1
Sue 120: trees: 1, children: 3, pomeranians: 6
Sue 121: akitas: 7, cars: 10, vizslas: 9
Sue 122: trees: 4, akitas: 8, samoyeds: 10
Sue 123: cats: 4, cars: 8, vizslas: 9
Sue 124: cars: 10, children: 1, trees: 0
Sue 125: goldfish: 5, pomeranians: 5, trees: 2
Sue 126: goldfish: 1, vizslas: 8, akitas: 10
Sue 127: vizslas: 4, cars: 9, akitas: 1
Sue 128: goldfish: 8, perfumes: 3, cars: 9
Sue 129: goldfish: 9, pomeranians: 9, perfumes: 1
Sue 130: trees: 1, vizslas: 9, perfumes: 3
Sue 131: children: 6, trees: 8, vizslas: 8
Sue 132: cars: 1, vizslas: 3, children: 7
Sue 133: cars: 7, children: 1, perfumes: 6
Sue 134: trees: 8, vizslas: 3, samoyeds: 2
Sue 135: cats: 9, perfumes: 4, pomeranians: 7
Sue 136: perfumes: 0, akitas: 8, vizslas: 6
Sue 137: goldfish: 5, trees: 0, vizslas: 7
Sue 138: trees: 1, perfumes: 2, cars: 10
Sue 139: samoyeds: 8, goldfish: 8, trees: 0
Sue 140: vizslas: 10, perfumes: 9, goldfish: 0
Sue 141: perfumes: 7, cars: 9, cats: 5
Sue 142: trees: 2, samoyeds: 2, cars: 0
Sue 143: cars: 1, perfumes: 1, akitas: 1
Sue 144: vizslas: 9, cars: 7, pomeranians: 10
Sue 145: pomeranians: 2, samoyeds: 7, children: 7
Sue 146: vizslas: 6, cars: 9, goldfish: 7
Sue 147: trees: 2, vizslas: 1, cats: 9
Sue 148: perfumes: 9, trees: 4, pomeranians: 5
Sue 149: samoyeds: 8, children: 1, vizslas: 9
Sue 150: cats: 3, trees: 2, vizslas: 4
Sue 151: goldfish: 7, akitas: 10, trees: 3
Sue 152: perfumes: 4, vizslas: 7, cars: 4
Sue 153: pomeranians: 4, akitas: 0, vizslas: 3
Sue 154: samoyeds: 8, trees: 2, vizslas: 10
Sue 155: vizslas: 7, cats: 7, pomeranians: 5
Sue 156: goldfish: 10, pomeranians: 1, vizslas: 1
Sue 157: cars: 6, perfumes: 7, trees: 9
Sue 158: trees: 5, samoyeds: 9, goldfish: 3
Sue 159: pomeranians: 4, akitas: 6, vizslas: 8
Sue 160: goldfish: 7, children: 0, cats: 0
Sue 161: vizslas: 5, akitas: 0, samoyeds: 2
Sue 162: akitas: 4, children: 0, vizslas: 3
Sue 163: samoyeds: 2, perfumes: 0, goldfish: 9
Sue 164: cars: 9, vizslas: 8, akitas: 6
Sue 165: samoyeds: 9, vizslas: 9, perfumes: 5
Sue 166: cars: 5, pomeranians: 4, samoyeds: 8
Sue 167: cars: 10, perfumes: 3, samoyeds: 6
Sue 168: pomeranians: 8, goldfish: 9, trees: 9
Sue 169: vizslas: 7, akitas: 3, samoyeds: 4
Sue 170: cats: 2, goldfish: 0, vizslas: 4
Sue 171: perfumes: 3, goldfish: 10, cats: 3
Sue 172: goldfish: 7, akitas: 6, cars: 0
Sue 173: cars: 9, goldfish: 7, akitas: 5
Sue 174: goldfish: 6, cats: 0, vizslas: 8
Sue 175: perfumes: 7, cats: 10, cars: 10
Sue 176: samoyeds: 9, vizslas: 4, pomeranians: 10
Sue 177: perfumes: 0, trees: 0, cars: 10
Sue 178: vizslas: 6, children: 7, samoyeds: 1
Sue 179: vizslas: 8, children: 6, trees: 0
Sue 180: cars: 1, vizslas: 6, trees: 1
Sue 181: vizslas: 10, perfumes: 3, cars: 1
Sue 182: trees: 8, samoyeds: 9, cars: 7
Sue 183: cars: 6, vizslas: 2, perfumes: 7
Sue 184: trees: 5, samoyeds: 9, akitas: 0
Sue 185: cars: 8, goldfish: 8, trees: 4
Sue 186: samoyeds: 6, goldfish: 1, trees: 2
Sue 187: perfumes: 1, trees: 2, akitas: 7
Sue 188: samoyeds: 5, cars: 6, perfumes: 2
Sue 189: samoyeds: 8, goldfish: 3, perfumes: 5
Sue 190: akitas: 2, cats: 1, samoyeds: 1
Sue 191: trees: 5, akitas: 1, goldfish: 7
Sue 192: vizslas: 3, trees: 0, perfumes: 4
Sue 193: cars: 3, perfumes: 4, akitas: 3
Sue 194: perfumes: 4, vizslas: 8, children: 4
Sue 195: vizslas: 1, samoyeds: 3, cars: 6
Sue 196: cars: 5, perfumes: 6, vizslas: 2
Sue 197: vizslas: 8, akitas: 8, cats: 6
Sue 198: cars: 9, akitas: 2, pomeranians: 7
Sue 199: cats: 9, akitas: 6, cars: 10
Sue 200: vizslas: 10, pomeranians: 2, goldfish: 9
Sue 201: vizslas: 9, samoyeds: 4, akitas: 3
Sue 202: akitas: 5, cats: 2, vizslas: 0
Sue 203: perfumes: 1, children: 3, akitas: 10
Sue 204: trees: 4, vizslas: 7, akitas: 9
Sue 205: trees: 8, perfumes: 9, cars: 1
Sue 206: goldfish: 6, trees: 5, cars: 8
Sue 207: akitas: 3, vizslas: 8, trees: 8
Sue 208: vizslas: 4, perfumes: 7, akitas: 10
Sue 209: cars: 9, perfumes: 7, goldfish: 9
Sue 210: vizslas: 2, cats: 2, akitas: 10
Sue 211: akitas: 1, trees: 3, cars: 2
Sue 212: goldfish: 5, trees: 0, vizslas: 7
Sue 213: akitas: 3, perfumes: 1, vizslas: 5
Sue 214: perfumes: 3, pomeranians: 6, cars: 0
Sue 215: goldfish: 1, cats: 9, cars: 3
Sue 216: goldfish: 9, pomeranians: 6, samoyeds: 0
Sue 217: cars: 6, trees: 2, perfumes: 2
Sue 218: vizslas: 3, goldfish: 8, akitas: 5
Sue 219: cats: 9, perfumes: 7, cars: 5
Sue 220: pomeranians: 5, vizslas: 4, cats: 5
Sue 221: trees: 0, akitas: 7, goldfish: 10
Sue 222: akitas: 2, cars: 3, vizslas: 5
Sue 223: goldfish: 3, perfumes: 7, akitas: 4
Sue 224: samoyeds: 2, cars: 4, vizslas: 7
Sue 225: trees: 5, cars: 0, perfumes: 0
Sue 226: trees: 2, goldfish: 10, perfumes: 6
Sue 227: cars: 8, trees: 9, akitas: 6
Sue 228: goldfish: 10, trees: 10, perfumes: 0
Sue 229: children: 7, samoyeds: 4, goldfish: 6
Sue 230: vizslas: 9, perfumes: 1, children: 10
Sue 231: vizslas: 8, trees: 5, akitas: 9
Sue 232: akitas: 5, goldfish: 9, trees: 1
Sue 233: vizslas: 3, trees: 2, children: 9
Sue 234: samoyeds: 8, perfumes: 0, cats: 0
Sue 235: perfumes: 4, vizslas: 3, akitas: 5
Sue 236: pomeranians: 5, vizslas: 3, akitas: 9
Sue 237: cats: 1, trees: 7, vizslas: 5
Sue 238: children: 5, cats: 4, samoyeds: 5
Sue 239: trees: 3, akitas: 2, goldfish: 6
Sue 240: goldfish: 9, trees: 1, perfumes: 1
Sue 241: cars: 2, pomeranians: 1, samoyeds: 2
Sue 242: akitas: 2, trees: 3, cars: 4
Sue 243: vizslas: 6, akitas: 2, samoyeds: 7
Sue 244: trees: 0, perfumes: 5, cars: 7
Sue 245: goldfish: 10, perfumes: 5, vizslas: 8
Sue 246: akitas: 0, perfumes: 0, cars: 1
Sue 247: samoyeds: 8, goldfish: 0, cars: 6
Sue 248: perfumes: 0, children: 10, trees: 10
Sue 249: perfumes: 6, akitas: 5, cats: 5
Sue 250: vizslas: 7, akitas: 4, cats: 5
Sue 251: samoyeds: 4, akitas: 1, trees: 8
Sue 252: perfumes: 8, pomeranians: 5, cars: 1
Sue 253: akitas: 10, trees: 4, cats: 3
Sue 254: perfumes: 2, cats: 2, goldfish: 9
Sue 255: cars: 4, trees: 1, akitas: 4
Sue 256: samoyeds: 9, goldfish: 0, akitas: 9
Sue 257: vizslas: 9, perfumes: 2, goldfish: 2
Sue 258: perfumes: 1, cars: 9, samoyeds: 1
Sue 259: trees: 0, goldfish: 0, samoyeds: 3
Sue 260: perfumes: 7, cars: 1, goldfish: 0
Sue 261: cars: 0, trees: 5, goldfish: 6
Sue 262: akitas: 7, vizslas: 3, pomeranians: 5
Sue 263: trees: 1, vizslas: 3, goldfish: 3
Sue 264: akitas: 7, vizslas: 4, children: 0
Sue 265: samoyeds: 5, trees: 0, akitas: 4
Sue 266: perfumes: 9, goldfish: 9, cars: 8
Sue 267: cars: 7, perfumes: 10, pomeranians: 8
Sue 268: cars: 0, akitas: 7, perfumes: 4
Sue 269: pomeranians: 0, cars: 9, perfumes: 10
Sue 270: samoyeds: 10, perfumes: 10, cars: 9
Sue 271: akitas: 2, vizslas: 8, cats: 5
Sue 272: akitas: 3, children: 9, samoyeds: 10
Sue 273: perfumes: 2, cars: 10, goldfish: 8
Sue 274: cars: 3, children: 10, perfumes: 10
Sue 275: cats: 9, akitas: 5, trees: 0
Sue 276: akitas: 6, children: 2, vizslas: 1
Sue 277: pomeranians: 6, trees: 10, samoyeds: 3
Sue 278: cars: 7, perfumes: 10, trees: 1
Sue 279: cars: 6, pomeranians: 8, trees: 2
Sue 280: pomeranians: 9, cats: 0, perfumes: 7
Sue 281: vizslas: 10, goldfish: 9, pomeranians: 5
Sue 282: perfumes: 4, samoyeds: 7, cars: 9
Sue 283: cars: 9, vizslas: 6, trees: 5
Sue 284: cars: 7, trees: 1, vizslas: 4
Sue 285: samoyeds: 4, goldfish: 10, cats: 4
Sue 286: samoyeds: 0, akitas: 4, children: 5
Sue 287: trees: 1, perfumes: 3, goldfish: 10
Sue 288: pomeranians: 10, akitas: 3, cars: 2
Sue 289: trees: 7, pomeranians: 4, goldfish: 10
Sue 290: samoyeds: 10, perfumes: 0, cars: 9
Sue 291: akitas: 0, pomeranians: 7, vizslas: 4
Sue 292: cats: 2, vizslas: 8, goldfish: 5
Sue 293: vizslas: 6, pomeranians: 9, perfumes: 0
Sue 294: akitas: 6, cars: 7, vizslas: 5
Sue 295: goldfish: 0, akitas: 9, cats: 0
Sue 296: goldfish: 1, trees: 0, cars: 6
Sue 297: perfumes: 6, cats: 8, pomeranians: 6
Sue 298: cats: 0, goldfish: 6, perfumes: 2
Sue 299: cars: 4, akitas: 1, samoyeds: 10
Sue 300: goldfish: 9, samoyeds: 6, cats: 5
Sue 301: cars: 0, vizslas: 7, trees: 0
Sue 302: goldfish: 9, samoyeds: 1, children: 6
Sue 303: cars: 6, perfumes: 7, samoyeds: 8
Sue 304: trees: 8, goldfish: 9, children: 9
Sue 305: perfumes: 0, cars: 5, goldfish: 4
Sue 306: cats: 3, cars: 7, vizslas: 7
Sue 307: pomeranians: 4, perfumes: 6, cars: 2
Sue 308: cars: 9, akitas: 6, goldfish: 4
Sue 309: pomeranians: 2, vizslas: 10, goldfish: 10
Sue 310: children: 0, cats: 4, akitas: 7
Sue 311: children: 10, akitas: 8, vizslas: 2
Sue 312: children: 5, cars: 0, vizslas: 4
Sue 313: perfumes: 10, trees: 3, pomeranians: 9
Sue 314: samoyeds: 3, goldfish: 2, trees: 9
Sue 315: cars: 2, cats: 5, pomeranians: 10
Sue 316: cats: 6, pomeranians: 6, children: 9
Sue 317: cats: 2, vizslas: 3, perfumes: 1
Sue 318: akitas: 1, perfumes: 3, vizslas: 10
Sue 319: cars: 7, perfumes: 0, trees: 0
Sue 320: goldfish: 6, samoyeds: 6, pomeranians: 4
Sue 321: trees: 2, goldfish: 6, children: 0
Sue 322: goldfish: 0, trees: 2, akitas: 8
Sue 323: pomeranians: 2, samoyeds: 9, vizslas: 1
Sue 324: trees: 4, goldfish: 6, pomeranians: 6
Sue 325: trees: 2, pomeranians: 3, goldfish: 1
Sue 326: perfumes: 4, goldfish: 6, trees: 5
Sue 327: akitas: 3, cars: 8, cats: 2
Sue 328: cats: 6, vizslas: 0, akitas: 2
Sue 329: perfumes: 3, goldfish: 10, akitas: 3
Sue 330: goldfish: 3, vizslas: 1, akitas: 6
Sue 331: perfumes: 4, trees: 1, goldfish: 5
Sue 332: goldfish: 7, vizslas: 9, akitas: 1
Sue 333: children: 8, cars: 8, trees: 4
Sue 334: cars: 1, vizslas: 6, trees: 0
Sue 335: goldfish: 2, cars: 2, akitas: 1
Sue 336: goldfish: 5, akitas: 5, trees: 9
Sue 337: cars: 5, vizslas: 6, goldfish: 6
Sue 338: cats: 9, akitas: 3, goldfish: 9
Sue 339: akitas: 3, cats: 2, children: 7
Sue 340: goldfish: 0, pomeranians: 8, perfumes: 9
Sue 341: trees: 0, pomeranians: 1, goldfish: 5
Sue 342: goldfish: 10, trees: 3, vizslas: 4
Sue 343: cats: 3, samoyeds: 1, children: 6
Sue 344: perfumes: 3, children: 4, samoyeds: 2
Sue 345: children: 6, trees: 2, goldfish: 1
Sue 346: trees: 2, pomeranians: 3, goldfish: 5
Sue 347: akitas: 10, vizslas: 7, trees: 1
Sue 348: perfumes: 4, akitas: 2, vizslas: 7
Sue 349: perfumes: 8, goldfish: 3, vizslas: 5
Sue 350: trees: 4, pomeranians: 5, akitas: 10
Sue 351: perfumes: 5, cars: 9, trees: 0
Sue 352: akitas: 6, children: 8, trees: 10
Sue 353: samoyeds: 7, akitas: 6, vizslas: 4
Sue 354: children: 9, goldfish: 7, perfumes: 5
Sue 355: trees: 1, perfumes: 4, cars: 1
Sue 356: samoyeds: 1, perfumes: 4, pomeranians: 8
Sue 357: trees: 7, goldfish: 10, akitas: 0
Sue 358: akitas: 1, vizslas: 6, cars: 7
Sue 359: vizslas: 3, goldfish: 8, trees: 4
Sue 360: akitas: 10, vizslas: 2, trees: 3
Sue 361: samoyeds: 6, pomeranians: 1, perfumes: 0
Sue 362: samoyeds: 3, cars: 1, trees: 0
Sue 363: vizslas: 0, pomeranians: 9, akitas: 4
Sue 364: perfumes: 9, pomeranians: 8, vizslas: 9
Sue 365: vizslas: 7, cars: 4, perfumes: 10
Sue 366: cars: 0, samoyeds: 5, goldfish: 10
Sue 367: children: 4, vizslas: 5, akitas: 4
Sue 368: samoyeds: 9, perfumes: 4, vizslas: 6
Sue 369: perfumes: 5, cars: 4, samoyeds: 5
Sue 370: akitas: 3, vizslas: 2, perfumes: 1
Sue 371: cars: 8, cats: 7, children: 5
Sue 372: vizslas: 9, perfumes: 2, akitas: 10
Sue 373: trees: 10, pomeranians: 9, goldfish: 3
Sue 374: children: 4, cars: 10, perfumes: 2
Sue 375: children: 7, samoyeds: 5, cats: 0
Sue 376: akitas: 10, samoyeds: 5, vizslas: 5
Sue 377: goldfish: 8, trees: 3, perfumes: 3
Sue 378: goldfish: 10, vizslas: 0, perfumes: 2
Sue 379: trees: 1, vizslas: 7, pomeranians: 4
Sue 380: samoyeds: 8, vizslas: 3, trees: 2
Sue 381: goldfish: 2, perfumes: 5, samoyeds: 9
Sue 382: cats: 3, vizslas: 10, akitas: 5
Sue 383: cars: 7, goldfish: 5, akitas: 8
Sue 384: children: 6, goldfish: 10, trees: 1
Sue 385: cats: 2, akitas: 6, samoyeds: 7
Sue 386: cars: 10, children: 4, goldfish: 2
Sue 387: cats: 0, perfumes: 5, akitas: 9
Sue 388: pomeranians: 7, akitas: 0, samoyeds: 9
Sue 389: trees: 0, akitas: 9, vizslas: 8
Sue 390: cars: 0, trees: 10, perfumes: 9
Sue 391: cats: 9, goldfish: 10, perfumes: 10
Sue 392: cars: 3, vizslas: 6, cats: 3
Sue 393: vizslas: 10, perfumes: 4, goldfish: 5
Sue 394: perfumes: 4, akitas: 10, trees: 2
Sue 395: pomeranians: 5, cars: 4, perfumes: 3
Sue 396: pomeranians: 9, vizslas: 5, akitas: 2
Sue 397: cars: 10, goldfish: 8, trees: 2
Sue 398: perfumes: 7, children: 9, goldfish: 9
Sue 399: akitas: 6, cats: 2, goldfish: 7
Sue 400: goldfish: 9, perfumes: 0, cars: 2
Sue 401: children: 4, vizslas: 0, trees: 2
Sue 402: akitas: 4, cars: 8, pomeranians: 4
Sue 403: vizslas: 8, perfumes: 7, goldfish: 1
Sue 404: goldfish: 10, samoyeds: 7, vizslas: 3
Sue 405: akitas: 1, vizslas: 6, perfumes: 6
Sue 406: pomeranians: 8, goldfish: 6, cats: 3
Sue 407: goldfish: 2, vizslas: 4, akitas: 7
Sue 408: cars: 10, perfumes: 10, vizslas: 3
Sue 409: vizslas: 7, pomeranians: 4, perfumes: 4
Sue 410: goldfish: 4, vizslas: 7, trees: 5
Sue 411: cars: 8, trees: 0, goldfish: 4
Sue 412: cars: 8, perfumes: 5, vizslas: 4
Sue 413: vizslas: 3, akitas: 7, samoyeds: 6
Sue 414: trees: 0, perfumes: 6, cars: 10
Sue 415: pomeranians: 4, trees: 1, perfumes: 6
Sue 416: cars: 10, perfumes: 6, akitas: 2
Sue 417: perfumes: 6, samoyeds: 0, akitas: 0
Sue 418: children: 1, perfumes: 9, vizslas: 3
Sue 419: goldfish: 9, samoyeds: 3, perfumes: 8
Sue 420: goldfish: 4, cars: 10, vizslas: 7
Sue 421: samoyeds: 7, vizslas: 7, cats: 2
Sue 422: trees: 1, goldfish: 8, perfumes: 0
Sue 423: cars: 3, perfumes: 2, trees: 3
Sue 424: samoyeds: 6, vizslas: 0, akitas: 6
Sue 425: trees: 3, akitas: 7, goldfish: 1
Sue 426: cars: 9, trees: 1, perfumes: 0
Sue 427: pomeranians: 0, children: 5, perfumes: 8
Sue 428: cars: 0, perfumes: 6, children: 4
Sue 429: akitas: 7, pomeranians: 9, cats: 6
Sue 430: cats: 6, trees: 1, cars: 0
Sue 431: children: 8, akitas: 5, perfumes: 9
Sue 432: perfumes: 5, akitas: 10, trees: 9
Sue 433: akitas: 4, perfumes: 10, vizslas: 7
Sue 434: trees: 3, children: 10, samoyeds: 4
Sue 435: vizslas: 5, goldfish: 2, akitas: 2
Sue 436: samoyeds: 3, trees: 2, cars: 6
Sue 437: children: 9, akitas: 0, pomeranians: 3
Sue 438: perfumes: 10, akitas: 2, cars: 7
Sue 439: perfumes: 10, samoyeds: 6, akitas: 10
Sue 440: vizslas: 10, trees: 2, akitas: 8
Sue 441: perfumes: 8, akitas: 2, pomeranians: 7
Sue 442: cars: 8, trees: 3, goldfish: 6
Sue 443: cars: 1, goldfish: 5, vizslas: 5
Sue 444: vizslas: 2, akitas: 10, samoyeds: 4
Sue 445: vizslas: 2, akitas: 10, perfumes: 9
Sue 446: akitas: 3, vizslas: 8, goldfish: 1
Sue 447: vizslas: 7, pomeranians: 5, trees: 10
Sue 448: cats: 6, perfumes: 10, children: 6
Sue 449: trees: 2, cars: 5, goldfish: 8
Sue 450: trees: 0, goldfish: 6, samoyeds: 3
Sue 451: perfumes: 0, cars: 8, trees: 1
Sue 452: akitas: 4, trees: 8, perfumes: 9
Sue 453: goldfish: 1, perfumes: 7, akitas: 6
Sue 454: vizslas: 3, cars: 1, perfumes: 6
Sue 455: trees: 1, akitas: 7, goldfish: 10
Sue 456: samoyeds: 4, vizslas: 2, cars: 9
Sue 457: perfumes: 10, children: 1, trees: 8
Sue 458: perfumes: 0, vizslas: 9, cars: 8
Sue 459: cats: 0, children: 7, trees: 3
Sue 460: vizslas: 4, cats: 6, perfumes: 2
Sue 461: trees: 3, children: 5, cars: 8
Sue 462: goldfish: 7, vizslas: 7, children: 5
Sue 463: cars: 5, akitas: 3, goldfish: 5
Sue 464: vizslas: 0, pomeranians: 5, cars: 0
Sue 465: goldfish: 4, akitas: 0, cats: 5
Sue 466: cars: 5, trees: 1, goldfish: 6
Sue 467: perfumes: 10, trees: 8, cars: 1
Sue 468: perfumes: 4, akitas: 3, cars: 0
Sue 469: vizslas: 3, cars: 7, pomeranians: 1
Sue 470: perfumes: 1, vizslas: 7, akitas: 8
Sue 471: goldfish: 10, samoyeds: 10, pomeranians: 5
Sue 472: goldfish: 6, trees: 0, perfumes: 0
Sue 473: goldfish: 5, vizslas: 0, children: 5
Sue 474: cars: 3, vizslas: 7, perfumes: 10
Sue 475: vizslas: 5, trees: 9, goldfish: 8
Sue 476: akitas: 2, goldfish: 6, children: 7
Sue 477: samoyeds: 0, perfumes: 1, pomeranians: 5
Sue 478: trees: 2, goldfish: 9, vizslas: 0
Sue 479: perfumes: 1, cars: 6, goldfish: 9
Sue 480: pomeranians: 3, perfumes: 5, trees: 9
Sue 481: cats: 3, akitas: 0, vizslas: 8
Sue 482: pomeranians: 10, akitas: 8, trees: 5
Sue 483: goldfish: 6, akitas: 10, perfumes: 2
Sue 484: cats: 0, goldfish: 0, children: 9
Sue 485: children: 4, akitas: 10, vizslas: 8
Sue 486: vizslas: 3, goldfish: 9, children: 10
Sue 487: children: 8, cats: 6, vizslas: 10
Sue 488: cars: 7, akitas: 10, samoyeds: 5
Sue 489: vizslas: 9, akitas: 6, trees: 2
Sue 490: vizslas: 5, akitas: 1, children: 5
Sue 491: vizslas: 8, goldfish: 3, perfumes: 6
Sue 492: trees: 3, samoyeds: 1, pomeranians: 6
Sue 493: akitas: 1, vizslas: 5, cars: 8
Sue 494: akitas: 4, cars: 4, vizslas: 9
Sue 495: vizslas: 1, akitas: 2, cats: 2
Sue 496: trees: 7, vizslas: 5, akitas: 6
Sue 497: akitas: 8, trees: 2, perfumes: 6
Sue 498: akitas: 1, trees: 1, samoyeds: 4
Sue 499: cars: 0, akitas: 5, vizslas: 3
Sue 500: cats: 2, goldfish: 9, children: 8""","\n")),
{mfscam_what,mfscam_qtys} = columnize({{"children",3},
                                       {"cats",7},
                                       {"samoyeds",2},
                                       {"pomeranians",3},
                                       {"akitas",0},
                                       {"vizslas",0},
                                       {"goldfish",5},
                                       {"trees",3},
                                       {"cars",2},
                                       {"perfumes",1}}),
mfscam_cmpres = {0,1,0,-1,0,0,-1,1,0,0}
--In particular, the cats and trees readings indicates that there are greater than that many (due to the unpredictable nuclear decay of 
--cat dander and tree pollen), while the pomeranians and goldfish readings indicate that there are fewer than that many (due to the modial 


procedure day16()
    for part=1 to 2 do
        printf(1,"part%d: ",part)
        for i=1 to length(aunts) do
            bool valid = true
            sequence aunt = aunts[i]
            for j=2 to 6 by 2 do
                integer k = find(aunt[j],mfscam_what),
                        c = compare(aunt[j+1],mfscam_qtys[k])
                if c!=iff(part=1?0:mfscam_cmpres[k]) then
                    valid = false
                    exit
                end if
            end for
            if valid then ?aunt end if
            -- part1: {40,"vizslas",0,"cats",7,"akitas",0}
            -- part2: {241,"cars",2,"pomeranians",1,"samoyeds",2}
        end for
    end for
end procedure

--- Day 17: No Such Thing as Too Much EggNog ---
--The elves bought too much eggnog again - 150 liters this time. 
--To fit it all into your refrigerator, you'll need to move it into smaller containers. 
--You take an inventory of the capacities of the available containers.
--
--For example, suppose you have containers of size 20, 15, 10, 5, and 5 liters. 
--If you need to store 25 liters, there are four ways to do it:
--
--15 and 10
--20 and 5 (the first 5)
--20 and 5 (the second 5)
--15, 5, and 5
--Filling all containers entirely, how many different combinations of containers can exactly fit all 150 liters of eggnog?

--- Part Two ---
--While playing with all the containers in the kitchen, another load of eggnog arrives! The shipping and receiving department is requesting as many containers as you can spare.
--
--Find the minimum number of containers that can exactly fit all 150 liters of eggnog. How many different ways can you fill that number of containers and still hold exactly 150 litres?
--
--In the example above, the minimum number of containers was two. There were three ways to use that many containers, and so the answer there would be 3.

--constant containers = {20, 15, 10, 5, 5}
constant containers = {33,14,18,20,45,35,16,35,1,13,18,13,50,44,48,6,24,41,30,42}

function fill(sequence containers, integer cdx, left, count)
    if left=0 then
        return count+1
    end if
    if cdx<=length(containers) then
        count = fill(containers,cdx+1,left-containers[cdx],count)
        count = fill(containers,cdx+1,left,count)
    end if
    return count
end function

function fill2(sequence containers, integer cdx, left, count, c, minc)
    if left=0 then
        if minc=-1 or c<minc then
            count = 1
            minc = c
        elsif c=minc then
            count += 1
        end if
    elsif cdx<=length(containers) then
        {count,minc} = fill2(containers,cdx+1,left-containers[cdx],count,c+1,minc)
        {count,minc} = fill2(containers,cdx+1,left,count,c,minc)
    end if
    return {count,minc}
end function

procedure day17()
--  ?fill(containers,1,25,0)    -- 4
    ?fill(containers,1,150,0)   -- 1304
    ?fill2(containers,1,150,0,0,-1) -- {18,4}
end procedure

--- Day 18: Like a GIF For Your Yard ---
--After the million lights incident, the fire code has gotten stricter: now, at most ten thousand lights are allowed. 
--You arrange them in a 100x100 grid.
--
--Never one to let you down, Santa again mails you instructions on the ideal lighting configuration. 
--With so few lights, he says, you'll have to resort to animation.
--
--Start by setting your lights to the included initial configuration (your puzzle input). 
--A # means "on", and a . means "off".
--
--Then, animate your grid in steps, where each step decides the next configuration based on the current one. 
--Each light's next state (either on or off) depends on its current state and the current states of the eight 
--lights adjacent to it (including diagonals). 
--Lights on the edge of the grid might have fewer than eight neighbors; the missing ones always count as "off".
--
--For example, in a simplified 6x6 grid, the light marked A has the neighbors numbered 1 through 8, and the light 
--marked B, which is on an edge, only has the neighbors marked 1 through 5:
--
--1B5...
--234...
--......
--..123.
--..8A4.
--..765.
--The state a light should have next is based on its current state (on or off) plus the number of neighbors that are on:
--
--A light which is on stays on when 2 or 3 neighbors are on, and turns off otherwise.
--A light which is off turns on if exactly 3 neighbors are on, and stays off otherwise.
--All of the lights update simultaneously; they all consider the same current state before moving to the next.
--
--Here's a few steps from an example configuration of another 6x6 grid:
--
--Initial state:
--.#.#.#
--...##.
--#....#
--..#...
--#.#..#
--####..
--
--After 1 step:
--..##..
--..##.#
--...##.
--......
--#.....
--#.##..
--
--After 2 steps:
--..###.
--......
--..###.
--......
--.#....
--.#....
--
--After 3 steps:
--...#..
--......
--...#..
--..##..
--......
--......
--
--After 4 steps:
--......
--......
--..##..
--..##..
--......
--......
--After 4 steps, this example has four lights on.
--
--In your grid of 100x100 lights, given your initial configuration, how many lights are on after 100 steps?
--
--- Part Two ---
--You flip the instructions over; Santa goes on to point out that this is all just an implementation of Conway's Game of Life. 
--At least, it was, until you notice that something's wrong with the grid of lights you bought: four lights, one in each corner, 
--are stuck on and can't be turned off. The example above will actually run like this:
--
--Initial state:
--##.#.#
--...##.
--#....#
--..#...
--#.#..#
--####.#
--
--After 1 step:
--#.##.#
--####.#
--...##.
--......
--#...#.
--#.####
--
--After 2 steps:
--#..#.#
--#....#
--.#.##.
--...##.
--.#..##
--##.###
--
--After 3 steps:
--#...##
--####.#
--..##.#
--......
--##....
--####.#
--
--After 4 steps:
--#.####
--#....#
--...#..
--.##...
--#.....
--#.#..#
--
--After 5 steps:
--##.###
--.##..#
--.##...
--.##...
--#.#...
--##...#
--After 5 steps, this example now has 17 lights on.
--
--In your grid of 100x100 lights, given your initial configuration, but with the four corners 
--always in the on state, how many lights are on after 100 steps?
--/*
constant initial_lights = split("""
.#.#.#
...##.
#....#
..#...
#.#..#
####..""","\n")
--*/
--/*
constant initial_lights = split("""
##.#.#
...##.
#....#
..#...
#.#..#
####.#""","\n")
--*/
--/!*
constant initial_lights = split("""
###.##..##.#..#.##...#..#.####..#.##.##.##..###...#....#...###..#..###..###.#.#.#..#.##..#...##.#..#
.#...##.#####..##.......#..####.###.##.#..###.###.....#.#.####.##.###..##...###....#.##.....#.#.#.##
.....#.#.....#..###..####..#.....##.#..###.####.#.######..##......#####.#.##.#########.###..#.##.#.#
...###......#.#..###..#.#.....#.##..#.##..###...#.##.#..#..#.##.#..##......##.##.##.######...#....##
.###.....#...#.#...####.#.###..#..####.#..#.##..####...##.#...#..###...###...####..##....####.##..#.
..#....#...#.......#..###.###....#.##..#.....###.#.##.#....#.#....##.##..#.##.#..###.###.##.##..##.#
##..#####.#.#....#.#...#.#.####..#....#..#....#.#..#.#####...#..##.#.....#.##..##.####......#.#.##..
.#..##..#.#.###..##..##...#....##...#..#.#..##.##..###.####.....#.####.#.....##.#.##...#..####..#...
#.#####.......#####...#...####.#.#.#....#.###.#.##.#####..#.###.#..##.##.#.##....#.##..#....####.#.#
#.##...#####....##.#.#.....##......##.##...#.##.##...##...###.###.##.#.####.####.##..#.##.#.#.####..
#.##.##....###.###.#..#..##.##.#..#.#..##..#.#...#.##........###..#...##.#.#.##.......##.....#...###
###..#.#..##.##.#.#.#...#..#...##.##.#.########.......#.#...#....########..#.#.###..#.#..#.##..#####
####.#.#...#.##.##..#.#...#....#..###..#.#.#.####.#.##.##.#..##..##..#..#####.####.##..########..##.
.#.#...#..##.#..#..###.#..####.......##.#.#.#.##.#####..#..##...#.##...#..#....#..#..###..####.#....
..#.#...#....##...#####..#..#...###.###.....#.###.#....#.#..##...#.##.##.####.#.#.#..#.##.#....#.#..
#....###.####.##..#.#.###..###.##.##..#.#...###..#.##.#####.##.#######..#.#...##.#..........####.###
#.#####.#......#.#......#.....##...##.#.#########.#......##..##..##.#..##.##..#....##...###...#.#...
#..#..##..###.#.#.#.#.....###.#.####.##.##....#.#..##....#.#..#.####..###.##...#######.#####.##.#.#.
..###.#........##.#...###..#.##..#.#....##.#......#..#.##..#.#..#.#..#.####.#####..###.##..#.##.#...
##.###....#..##...#..#.#......##..#...#..#.####..#.##...##.####.#...#..###...#.#.#....###.##..#.#...
..##.##.#.##..##.#..#.###...##..##..#....##..##...####.#..####.###...#.....#..#.##..##..###..#.#...#
#.#....#.....#...##.#...####..#..##..##.####..##..##...####...#....##.#.#######..##.#......######.#.
#.#...###.######.######..##..##....#.#......#......#.#.##.#.##.#.#.#...#...#....#.#.#.#..#.##..#...#
####.###.#.#.##..#.##.#...#.##...#.##.##...#.....#.#..#.####.##..######.#..#.#..##....#.#.#..#.#.#.#
..##......#.#...#.##.##..##..##..#..##..#########.#..###..###.##...#..##.#..#.#.#.######..#....#.#..
..##.##.#...###.#...##..######.##.#..####..#..#.#.##.####.##.##.#...##....#...###.##.####..#....#.#.
####...###..#.#.##.#.#....###..##.#.#..########..#...#.#...#.##....##.##...#.....#.#.....#.....#....
.#.###############....#.##..###..#.####.#.##.##..#..#.#...###...##..##.##.#.....##...###.###.....#..
.###..#..##.##..####.#.###.##.##..#..##....#.#......#......##.#...#.#...#..##.#.#...#...#.##..#.##..
###.#.#.########.#.#..####.#..##.#.##.##.###.##..######...#..##.##.#..#.#...#.##..#####.....#.#.#..#
.##.##..#.#...#####.#.#.###...##...####...#......#...#..####..#.##..........#..#.#..###....######.##
..#####...#.#.#.#..#.##..#...#.#..#.##...##..##.##.#.##.#..#.#...#.......##.#...###.....#...#.#.#.##
##.##.#..######.##...#.....#.###.#..##.#.#.#..####.#....##.#....####...##....#.#.##.#..###.##.##..##
.###.##.#..#.###.####..#.##..####.#.#.##..###.#######.###.###...####........##....###.#...#.#.####.#
........#..#.#..##..########..........#.##.#..##.#...#.....####....##..#..#.#####.###...#...#.##.###
.....#..##.####...##.#####..######.##.#.###.####.##.##.#..##.##.######.##......#..#.####..##....#.##
##...####....#.##.##.###....#.#...#.####..##.#.##.#.#...####.#.#.#.#...##.###...##...###...######.##
.#....#.#.####...#.##.....##...###.#.#.##...##.#####....#.######.#.#....##..##...##....##.#.##.#.#.#
.###..###.#.......#.#######..#.#.#.######....#.#####.#.....#.#########...#....##...##.####.#..#.....
##.#..##..##.....#..##...#..##.##.#..#.#####.##.##.#.##.##...##.######.####..#.##..#####.##...##..#.
#.###...##.#.#.#.##....#.#.##.##..#....#...#.#.........#..#..####..####.####..#.##.##.#....####..##.
.#..######..#####.####.##.#.....#.#.#####..##..###.#.#.#..#.#...#.#######..##....##.##...#######..#.
#...#....#.#.##..#####..#########..#.....#...##.#.#.###...#####..##...##...####.......#######.#..###
.#......#...##.###..#....#...#.#.....#.#...##.#.#..#..###.##.###.#.##..##...#.##......#.###..#.#..##
.#....####...###..#.....##..#...#.#.###.#.#.##...#.##.##.#.#.#..####..###.#.#.#.##.#.#...#..#...####
......##.##.#...#####.##..#.###..#.#####..##.#..##.###......#...#...#..#......###.######...#.#.##..#
###..#...#.##..###.#....##...#..#####.#.#..#.###...#####.#....##..####.#.##...#.#...##..#.#.#.#..#.#
...##.#.##.##..#.#.#.###.#.#...#.....###.###.##...#.###.##...##..#..###.#..##.##..###.#....###..##..
.##.#..###..###.##.##...#..#####...#.....#####.##..####...#.##.#.#..##.#.#.#....###.....#....##.....
######.#..#.#..#....#.###...####.####.#.........#..##.#..##..##.....#..#.##.##...#...#####.#.##..#.#
.##.###...####....#.####...#####..#..#...#..#.....###.#..#.###..#.###.#.......##.####..#.##.#...##..
........#.#.##.#.....#####.###......##..#.##.#..#...####.#...#..###.#.#...##..#.#...#.####...#.#.###
.#..#.##..##...######.###.##.#.#...#.#.#.#.##..##..##.#.##..#....#.##...#.##.##...##....##.###.##.#.
##...#...#...###.#.#...#...#..###......##.#.#....##..##.#..##.#.######...#..##.#.##.#.#....#.##.##..
...#..###.#....#...#.##..##.#.##.#..###.##..#.##..####.#########....#.....##.#.##.##..##.##.######.#
#.##.#..##.......###...#.###....###.#..####..##.#####.##.###....##....#.###...####..#.#.#.##.....###
.......#...#...##.#...##.#.#..#.##..##.#....###...##.#####...#.........#.......###.##.#.#.###....##.
###.#.##.##.....#.#..#.#..####.####..#..###..........####.#.##...#######.###..#####..#.....#..###..#
#...##.##..####.##.###.#.#######..###.#..#######..#.##.####...#..#.##.####..####.#.#.......####.#...
...#.##..#..#..##........#.#..#..#.#....#.###.#.###..#.......###..#.....#....#..##.#...#.###...##.#.
###.##..#.##.#.#####..#.##.####....#####..###.#.#..#...#...###.#.##..#.#.#.....#.####.#.#.#.#.#.#...
..##..##..#..##.##.#...#..#....####....#...#..####..#.....######.###.####.#....##....##.#.#.###....#
.#.#.#.##..####..#.....#.####.#....#.....#....#.##..#.#..#.#...#.#.#.#..#..#..##.#....####.......#..
..##.##..###......#...#..##...#.###.####.#...#.####..#.#.#.....#.#...####...#.########.##.#.#.#..###
#....#.##.....##.###.##.###..#.####.....####.##...#..##.###...###..###.#....####.#..#..#..#.#..##.#.
.#.#.##....#.##......#.#..###.#....###....#......#.#.##.##.#########..##..#...#.####..#...####..#..#
.#.#.......##.#.##.#...#...#.##.#..#.#.#.##....#..###.###.##.#.#...##.#..#..##....#..###.#...#.#.##.
#.##.#....####...#..##..#.#.#.#.##.#...#####.#...#..#..#.####.####.#.#....#......##..##..###...#..##
..##.###..##.####..#..#..##...###.#.#.#######.####...####......##.##..#...#.##...##....#..#..#.....#
....#..#..#.#.####.#...##..#....####.#..####...#.#...###...#..#..##...#....##...#.....#.#..#.#.#...#
...#.#.#.##..##.###..#.######....####.###...##...###.#...##.####..#.#..#.#..#.##.....#.#.#..##......
.#.##.##.....##.#..###.###.##....#...###.#......#...##.###.#.##.##...###...###...#.######..#......#.
###..#...#......#..##...#....##.#..###.##.####..##..##....####.#...#.#....##..#.#######..#.#.#####..
##...#####..####..##....#.#.###.##.#..#.#..#.....###...###.#####.....#..##.#......#...#.###.##.##...
...#.#.#..#.###..#.#.#....##.#.#..####.##.#.####.#.#.#...#....##....#.##.####..###.#.#...##.#..#..##
#.#.#..#.##..##.##.#...##.#....#...###..##..#.#######.#.###..##......##.#..###.########.#.##..#.#.##
######.###....##..#..#...####....#.#.#..#...#..######.#.#.##..##....##....##.##.##...#..#.####.#.#..
#####.###..#..###......##...##.####.#.#.#.###.......##..##.####..##.####.#..#..####..#.####.#####...
##.#.#.###..##.#.##.#.#.#.##.#...##........###.#.##..####....###.#.####.####.#.......##.##.##...##..
#.#..###...#..##.....##.#..#.#..##..######.#####...###.#.......###...#..##..#..#..##.#.#....#..#..#.
#.#..####.###..#...#...#...#.###..#.#.#.#.#.#.#..#....#.##.##.##..###..####.#..##..##.###.###....##.
#..#.##.#####........#..#.##.#..##.#...#....#..#.##..###..##..##.##..#..##.#.#...#.#.##.#.##....#.#.
.......##..#.....#..#.#.....#.##...####.###..####..#.#.#.#..#.....#....##...#..#.##..###.#.#....#...
#...###########.##.....##...###.#.##.##..####.##...#.####.#####.#####.####...###.##...##..#.#.###..#
....#.#.###.####.###...#...#.#..###.#.#.##...#..#.#.#..#.####..#..###.######.#.####.###...###.#.##.#
.....#..#..########...#.#.#.#.#.#.#.#..###.##..####...##.#.#.#...##..#####.##.#...#.####.#######.##.
.......#...#.#..#..#...#..#..##.....#.##....##.##...##..##.##...##...#.#..#.##.#.###.#.####.#.#..##.
.####...#...#.#.#....##..........##.##.###.##.#.#..#.#.#......########.#...#.####.##.###..##...####.
#.#.#...##.###..##..#..#.....####.#.....##.##.#..#.#.###.#..#######...##..#.#..#.#..############.###
.##..####.#..#.....###..#..#.#.....#.#.#...##.##.#....#..#..###.#...#....#.#...####..#.....###.####.
..#...#.###.###....##.#..#.##..####.##.#.##.##.##...###.####..#.#.#.##.#.#.#..###..##.##.##.##.#..##
#...............##.....######.#.#####.##.#....#.#..#.##...#.##....#........##.##...#.##.##.#..#.##.#
#..##..#.#.#.##.#..#.#.##.##...#...#..#.#.##..#.#...###...##...###..#####.#.#..#..#.#..#.#.##...##.#
.#######.#.....##...#.#.####.######.#..#......#....##.#.#..#..###.#...###...#....#.#..#.##.#...#.#..
#.###......##.#.##..#.###.###..####..##....#..###......##..##..#####.####....#...###.....###.#..#...
###...#....###.#..#.###.##...###.##.......##.##.#.#.#....####....###..##.###...#..##....#.#.##..##..
.##.......##.######.#.#..#..##....#####.###.#.##.....####....#......####....#.##.#.##..#.##...##.#.#
.#.###...#.#.#.##.###..###...##..#.##.##..##..#.....###.#..#.##.##.####........##.#####.#.#....#...#
##...##..#.##.#######.###.#.##.#####....##.....##.#.....#.#.##.#....#.##.#....##.#..#.###..#..#.#...
.#..#.#.#.#...#.##...###.##.#.#...###.##...#.#..###....###.#.###...##..###..#..##.##....###...###.##""","\n")
--*!/

function cycle(sequence lights,bool cornerson=false)
    integer w = length(lights[1]),
            h = length(lights)
    if cornerson then
        lights[1][1] = '#'
        lights[1][w] = '#'
        lights[h][1] = '#'
        lights[h][w] = '#'
    end if
    sequence original = lights
    for y=1 to h do
        for x=1 to w do
            integer non = 0
            for i=-1 to 1 do
                for j=-1 to 1 do
                    if y+i>=1 and y+i<=h
                    and x+j>=1 and x+j<=w
                    and (i!=0 or j!=0) then
                        non += (original[y+i][x+j]='#')
                    end if
                end for
            end for
            if lights[y][x]='#' then
                if non!=2 and non!=3 then
                    lights[y][x]='.'
                end if
            else
                if non=3 then
                    lights[y][x]='#'
                end if
            end if
        end for                 
    end for
    if cornerson then
        lights[1][1] = '#'
        lights[1][w] = '#'
        lights[h][1] = '#'
        lights[h][w] = '#'
    end if
    return lights
end function

procedure day18()
    sequence lights = initial_lights
--  for i=1 to 4 do
--  for i=1 to 5 do
    for i=1 to 100 do
--      lights = cycle(lights)
        lights = cycle(lights,true)
--      puts(1,join(lights,"\n")&"\n\n")
    end for
    ?sum(sq_eq(lights,'#')) -- 821
                            -- 886
end procedure

--- Day 19: Medicine for Rudolph ---
--Rudolph the Red-Nosed Reindeer is sick! His nose isn't shining very brightly, and he needs medicine.
--
--Red-Nosed Reindeer biology isn't similar to regular reindeer biology; Rudolph is going to need custom-made medicine. 
--Unfortunately, Red-Nosed Reindeer chemistry isn't similar to regular reindeer chemistry, either.
--
--The North Pole is equipped with a Red-Nosed Reindeer nuclear fusion/fission plant, capable of constructing any Red-Nosed Reindeer molecule you need. 
--It works by starting with some input molecule and then doing a series of replacements, one per step, until it has the right molecule.
--
--However, the machine has to be calibrated before it can be used. 
--Calibration involves determining the number of molecules that can be generated in one step from a given starting point.
--
--For example, imagine a simpler machine that supports only the following replacements:
--
--H => HO
--H => OH
--O => HH
--Given the replacements above and starting with HOH, the following molecules could be generated:
--
--HOOH (via H => HO on the first H).
--HOHO (via H => HO on the second H).
--OHOH (via H => OH on the first H).
--HOOH (via H => OH on the second H).
--HHHH (via O => HH).
--So, in the example above, there are 4 distinct molecules (not five, because HOOH appears twice) after one replacement from HOH. 
--Santa's favorite molecule, HOHOHO, can become 7 distinct molecules (over nine replacements: six from H, and three from O).
--
--The machine replaces without regard for the surrounding characters. 
--For example, given the string H2O, the transition H => OO would result in OO2O.
--
--Your puzzle input describes all of the possible replacements and, at the bottom, the medicine molecule for which you need to calibrate the machine. 
--How many distinct molecules can be created after all the different ways you can do one replacement on the medicine molecule?

--- Part Two ---
--Now that the machine is calibrated, you're ready to begin molecule fabrication.
--
--Molecule fabrication always begins with just a single electron, e, and applying replacements one at a time, 
--just like the ones during calibration.
--
--For example, suppose you have the following replacements:
--
--e => H
--e => O
--H => HO
--H => OH
--O => HH
--If you'd like to make HOH, you start with e, and then make the following replacements:
--
--e => O to get O
--O => HH to get HH
--H => OH (on the second H) to get HOH
--So, you could make HOH after 3 steps. Santa's favorite molecule, HOHOHO, can be made in 6 steps.
--
--How long will it take to make the medicine? Given the available replacements and the medicine molecule in your puzzle input, 
--what is the fewest number of steps to go from e to the medicine molecule?

--(suggestion for rosettacode:)
--Bonus: Analyse the replacements/medicine to prove there is only one possible solution...

function decode_reps(string fmt,sequence reps)
    for i=1 to length(reps) do
        string {{r,w}} = scanf(reps[i],fmt)
        reps[i] = {r,w,length(w)-length(r),i}
    end for
    reps = sort_columns(reps,{-3,-4}) -- lessmost,stable
    return reps
end function

constant rep_fmt = "%s => %s",
--/*
 replacements = decode_reps(rep_fmt,split("""
H => HO
H => OH
O => HH
e => H
e => O""","\n")),
 M = "HOH"
-- M = "HOHOHO"
search: ... ThRnFAr SiRnFYFAr SiRnMgAr CRnFYFYFAr CRnFYMgAr CRnMgYFAr

--*/
--/!*
 replacements = decode_reps(rep_fmt,split("""
Al => ThF
Al => ThRnFAr
B => BCa
B => TiB
B => TiRnFAr
Ca => CaCa
Ca => PB
Ca => PRnFAr
Ca => SiRnFYFAr
Ca => SiRnMgAr
Ca => SiTh
F => CaF
F => PMg
F => SiAl
H => CRnAlAr
H => CRnFYFYFAr
H => CRnFYMgAr
H => CRnMgYFAr
H => HCa
H => NRnFYFAr
H => NRnMgAr
H => NTh
H => OB
H => ORnFAr
Mg => BF
Mg => TiMg
N => CRnFAr
N => HSi
O => CRnFYFAr
O => CRnMgAr
O => HP
O => NRnFAr
O => OTi
P => CaP
P => PTi
P => SiRnFAr
Si => CaSi
Th => ThCa
Ti => BP
Ti => TiTi
e => HF
e => NAl
e => OMg""","\n")),

--NRnBSiRnCaRnFArYFArFArF

--M0 = "ORnPBPMgArCaCaCaSiThCaCaSiThCaCaPBSiRnFArRnFArCaCaSiThCaCaSiThCaCaCaCaCaCaSiRnFYFArSiRnMgArCaSiRnPTiTiBFYPBFArSiRnCaSiRnTiRnFArSiAlArPTiBPTiRnCaSiAlArCaPTiTiBPMgYFArPTiRnFArSiRnCaCaFArRnCaFArCaSiRnSiRnMgArFYCaSiRnMgArCaCaSiThPRnFArPBCaSiRnMgArCaCaSiThCaSiRnTiMgArFArSiThSiThCaCaSiRnMgArCaCaSiRnFArTiBPTiRnCaSiAlArCaPTiRnFArPBPBCaCaSiThCaPBSiThPRnFArSiThCaSiThCaSiThCaPTiBSiRnFYFArCaCaPRnFArPBCaCaPBSiRnTiRnFArCaPRnFArSiRnCaCaCaSiThCaRnCaFArYCaSiRnFArBCaCaCaSiThFArPBFArCaSiRnFArRnCaCaCaFArSiRnFArTiRnPMgArF"
--,
 M = "ORnPBPMgArCaCaCaSiThCaCaSiThCaCaPBSiRnFArRnFArCaCaSiThCaCaSiThCaCaCaCaCaCaSiRnFYFArSi"&
     "RnMgArCaSiRnPTiTiBFYPBFArSiRnCaSiRnTiRnFArSiAlArPTiBPTiRnCaSiAlArCaPTiTiBPMgYFArPTiRn"&
     "FArSiRnCaCaFArRnCaFArCaSiRnSiRnMgArFYCaSiRnMgArCaCaSiThPRnFArPBCaSiRnMgArCaCaSiThCaSi"&
     "RnTiMgArFArSiThSiThCaCaSiRnMgArCaCaSiRnFArTiBPTiRnCaSiAlArCaPTiRnFArPBPBCaCaSiThCaPBS"&
     "iThPRnFArSiThCaSiThCaSiThCaPTiBSiRnFYFArCaCaPRnFArPBCaCaPBSiRnTiRnFArCaPRnFArSiRnCaCa"&
     "CaSiThCaRnCaFArYCaSiRnFArBCaCaCaSiThFArPBFArCaSiRnFArRnCaCaCaFArSiRnFArTiRnPMgArF"
--*!/
--if M0!=M then ?9/0 end if

procedure day19()
    sequence seen = {}
    string r,w,res
    integer k
    for i=1 to length(replacements) do
        {r,w} = replacements[i]
        k = match(r,M)
        while k do
            res = replace(M,w,k,k+length(r)-1)
            if not find(res,seen) then
                seen = append(seen,res)
            end if
            k = match(r,M,k+1)
        end while
    end for
    ?length(seen) -- 576
    --
    -- NB: **BIG ASSUMPTION** is that replacing most-reducing first will lead to the
    --                        best result. (I had to make it a stable sort as well.)
    -- Update: the creator wrote:
    -- My request for the "fewest number of steps" is a decoy - there is only one number of steps possible
    --
    integer steps = 0
    res = M
    while res!="e" do
        string wasres = res
        for i=1 to length(replacements) do
            {r,w} = replacements[i]
            k = match(w,res)
            if k then
                res = replace(res,r,k,k+length(w)-1)
                steps += 1
                exit
            end if
        end for
        if res=wasres then ?9/0 end if -- (avoid infinite loop)
    end while
    ?{"steps",steps} -- {"steps",207}
    -- Analytical
--  ?length(M) -- 506
    integer UC = sum(sq_le(M,'Z')),
--  ?match_all(
            Rn = length(split(M,"Rn"))-1,
            Ar = length(split(M,"Ar"))-1,
            Y = length(split(M,"Y"))-1
--  ?{UC,Rn,Ar,Y,UC-Rn-Ar-2*Y-1} -- {292,36,36,6,207}
    ?UC-Rn-Ar-2*Y-1 -- 207
end procedure

--- Day 20: Infinite Elves and Infinite Houses ---
--To keep the Elves busy, Santa has them deliver some presents by hand, door-to-door. 
--He sends them down a street with infinite houses numbered sequentially: 1, 2, 3, 4, 5, and so on.
--
--Each Elf is assigned a number, too, and delivers presents to houses based on that number:
--
--The first Elf (number 1) delivers presents to every house: 1, 2, 3, 4, 5, ....
--The second Elf (number 2) delivers presents to every second house: 2, 4, 6, 8, 10, ....
--Elf number 3 delivers presents to every third house: 3, 6, 9, 12, 15, ....
--There are infinitely many Elves, numbered starting with 1. 
--Each Elf delivers presents equal to ten times his or her number at each house.
--
--So, the first nine houses on the street end up like this:
--
--House 1 got 10 presents.
--House 2 got 30 presents.
--House 3 got 40 presents.
--House 4 got 70 presents.
--House 5 got 60 presents.
--House 6 got 120 presents.
--House 7 got 80 presents.
--House 8 got 150 presents.
--House 9 got 130 presents.
--The first house gets 10 presents: it is visited only by Elf 1, which delivers 1 * 10 = 10 presents. 
--The fourth house gets 70 presents, because it is visited by Elves 1, 2, and 4, for a total of 10 + 20 + 40 = 70 presents.
--
--What is the lowest house number of the house to get at least as many presents as the number in your puzzle input?
--
--Your puzzle input is 34000000.

--- Part Two ---
--The Elves decide they don't want to visit an infinite number of houses. 
--Instead, each Elf will stop after delivering presents to 50 houses. 
--To make up for it, they decide to deliver presents equal to eleven times their number at each house.
--
--With these changes, what is the new lowest house number of the house to get at least as many presents as the number in your puzzle input?

procedure day20()
    integer target = 34_000_000,
            limit = target/10
    sequence house = repeat(10,limit)
    for i=2 to limit do
        for j=i to limit by i do
            house[j] += i * 10
        end for
    end for
    for i=1 to limit do
        if house[i]>=target then
            ?i  -- 786240
            exit
        end if
    end for
    -- part 2:
    limit = floor(target/11)
    house = repeat(0,limit)
    for i=1 to limit do
        integer k = 0
        for j=i to limit by i do
            house[j] += i*11
            k += 1
            if k=50 then exit end if
        end for
    end for
    for i=1 to limit do
        if house[i]>=target then
            ?i  -- 831600
            exit
        end if
    end for
end procedure

--- Day 21: RPG Simulator 20XX ---
--Little Henry Case got a new video game for Christmas. It's an RPG, and he's stuck on a boss. 
--He needs to know what equipment to buy at the shop. He hands you the controller.
--
--In this game, the player (you) and the enemy (the boss) take turns attacking. 
--The player always goes first. Each attack reduces the opponent's hit points by at least 1. 
--The first character at or below 0 hit points loses.
--
--Damage dealt by an attacker each turn is equal to the attacker's damage score minus the defender's armor score. 
--An attacker always does at least 1 damage. 
--So, if the attacker has a damage score of 8, and the defender has an armor score of 3, the defender loses 5 hit points. 
--If the defender had an armor score of 300, the defender would still lose 1 hit point.
--
--Your damage score and armor score both start at zero. They can be increased by buying items in exchange for gold. 
--You start with no items and have as much gold as you need. 
--Your total damage or armor is equal to the sum of those stats from all of your items. You have 100 hit points.
--
--Here is what the item shop is selling:
--
--Weapons:  Cost  Damage  Armor
--Dagger      8     4       0
--Shortsword 10     5       0
--Warhammer  25     6       0
--Longsword  40     7       0
--Greataxe   74     8       0
--
--Armor:    Cost  Damage  Armor
--Leather    13     0       1
--Chainmail  31     0       2
--Splintmail 53     0       3
--Bandedmail 75     0       4
--Platemail 102     0       5
--
--Rings:    Cost  Damage  Armor
--Damage +1  25     1       0
--Damage +2  50     2       0
--Damage +3 100     3       0
--Defense +1 20     0       1
--Defense +2 40     0       2
--Defense +3 80     0       3
--You must buy exactly one weapon; no dual-wielding. Armor is optional, but you can't use more than one. 
--You can buy 0-2 rings (at most one for each hand). You must use any items you buy. 
--The shop only has one of each item, so you can't buy, for example, two rings of Damage +3.
--
--For example, suppose you have 8 hit points, 5 damage, and 5 armor, 
--       and that the boss has 12 hit points, 7 damage, and 2 armor:
--
--The player deals 5-2 = 3 damage; the boss goes down to 9 hit points.
--The boss deals 7-5 = 2 damage; the player goes down to 6 hit points.
--The player deals 5-2 = 3 damage; the boss goes down to 6 hit points.
--The boss deals 7-5 = 2 damage; the player goes down to 4 hit points.
--The player deals 5-2 = 3 damage; the boss goes down to 3 hit points.
--The boss deals 7-5 = 2 damage; the player goes down to 2 hit points.
--The player deals 5-2 = 3 damage; the boss goes down to 0 hit points.
--In this scenario, the player wins! (Barely.)
--
--You have 100 hit points. The boss's actual stats are in your puzzle input. 
--What is the least amount of gold you can spend and still win the fight?

--Hit Points: 104
--Damage: 8
--Armor: 1

--- Part Two ---
--Turns out the shopkeeper is working with the boss, and can persuade you to buy whatever items he wants. 
--The other rules still apply, and he still only has one of each item.
--
--What is the most amount of gold you can spend and still lose the fight?

enum DESC, COST, DAMAGE, ARMOUR
constant weapons = {{"Dagger",      8, 4, 0},
                    {"Shortsword", 10, 5, 0},
                    {"Warhammer",  25, 6, 0},
                    {"Longsword",  40, 7, 0},
                    {"Greataxe",   74, 8, 0}},
         armour = {{"Leather",    13, 0, 1},
                   {"Chainmail",  31, 0, 2},
                   {"Splintmail", 53, 0, 3},
                   {"Bandedmail", 75, 0, 4},
                   {"Platemail", 102, 0, 5}},
         rings = {{"Damage +1",  25, 1, 0},
                  {"Damage +2",  50, 2, 0},
                  {"Damage +3", 100, 3, 0},
                  {"Defense +1", 20, 0, 1},
                  {"Defense +2", 40, 0, 2},
                  {"Defense +3", 80, 0, 3}}

function cost(integer w,a,r1,r2)
    integer c = 0
    if w then c += weapons[w][COST] end if
    if a then c += armour[a][COST] end if
    if r1 then c += rings[r1][COST] end if
    if r2 then c += rings[r2][COST] end if
    return {c,w,a,r1,r2}
end function

function battle(integer hp, d, a, bhp, bd, ba, sequence buy)
    integer {c,w,ar,r1,r2} = buy
    if w then d += weapons[w][DAMAGE] end if
    if ar then a += armour[ar][ARMOUR] end if
    if r1 then d += rings[r1][DAMAGE]; a += rings[r1][ARMOUR] end if
    if r2 then d += rings[r2][DAMAGE]; a += rings[r2][ARMOUR] end if
    while true do
        -- player first
        bhp -= max(1,d-ba)
        if bhp<=0 then return true end if
        -- boss
        hp -= max(1,bd-a)
        if hp<=0 then return false end if
    end while
end function

procedure show_buy(sequence buy)
    integer {{},w,a,r1,r2} = buy
    buy[2] = iff(w?weapons[w][DESC]:"None")
    buy[3] = iff(a?armour[a][DESC]:"None")
    buy[4] = iff(r1?rings[r1][DESC]:"None")
    buy[5] = iff(r2?rings[r2][DESC]:"None")
    printf(1,"Cost:%d, Weapon:%s, Armour:%s, Ring1:%s, Ring2:%s\n",buy)
end procedure

procedure day21()
    sequence buys = {}
    for w=1 to 5 do
        for a=0 to 5 do
            buys = append(buys,cost(w,a,0,0)) -- no rings
            for r1=1 to 6 do
                buys = append(buys,cost(w,a,r1,0)) -- one rings
                for r2=r1+1 to 6 do
                    buys = append(buys,cost(w,a,r1,r2)) -- two rings
                end for
            end for
        end for
    end for
    buys = sort(buys) -- lowest cost first
--  ?buys
--  ?length(buys) -- 660
    for i=1 to length(buys) do
--      if battle(8,5,5,12,7,2,buys[i]) then
        if battle(100,0,0,104,8,1,buys[i]) then
            show_buy(buys[i])
--Cost:78, Weapon:Longsword, Armour:Leather, Ring1:Damage +1, Ring2:None
            exit
        end if
    end for
    -- part 2:
    for i=length(buys) to 1 by -1 do
        if not battle(100,0,0,104,8,1,buys[i]) then
            show_buy(buys[i])
--Cost:148, Weapon:Dagger, Armour:None, Ring1:Damage +3, Ring2:Defense +2
            exit
        end if
    end for
end procedure

--- Day 22: Wizard Simulator 20XX ---
--Little Henry Case decides that defeating bosses with swords and stuff is boring. 
--Now he's playing the game with a wizard. 
--Of course, he gets stuck on another boss and needs your help again.
--
--In this version, combat still proceeds with the player and the boss taking alternating turns. 
--The player still goes first. 
--Now, however, you don't get any equipment; instead, you must choose one of your spells to cast. 
--The first character at or below 0 hit points loses.
--
--Since you're a wizard, you don't get to wear armor, and you can't attack normally. 
--However, since you do magic damage, your opponent's armor is ignored, and so the boss effectively has zero armor as well. 
--As before, if armor (from a spell, in this case) would reduce damage below 1, it becomes 1 instead - that is, the boss' attacks always deal at least 1 damage.
--
--On each of your turns, you must select one of your spells to cast. 
--If you cannot afford to cast any spell, you lose. 
--Spells cost mana; you start with 500 mana, but have no maximum limit. 
--You must have enough mana to cast a spell, and its cost is immediately deducted when you cast it. 
--Your spells are Magic Missile, Drain, Shield, Poison, and Recharge.
--
--Magic Missile costs 53 mana. It instantly does 4 damage.
--Drain costs 73 mana. It instantly does 2 damage and heals you for 2 hit points.
--Shield costs 113 mana. It starts an effect that lasts for 6 turns. While it is active, your armor is increased by 7.
--Poison costs 173 mana. It starts an effect that lasts for 6 turns. At the start of each turn while it is active, it deals the boss 3 damage.
--Recharge costs 229 mana. It starts an effect that lasts for 5 turns. At the start of each turn while it is active, it gives you 101 new mana.
--Effects all work the same way. Effects apply at the start of both the player's turns and the boss' turns. 
--Effects are created with a timer (the number of turns they last); at the start of each turn, after they apply any effect they have, their timer is decreased by one. 
--If this decreases the timer to zero, the effect ends. You cannot cast a spell that would start an effect which is already active. 
--However, effects can be started on the same turn they end.
--
--For example, suppose the player has 10 hit points and 250 mana, and that the boss has 13 hit points and 8 damage:
--
---- Player turn --
--- Player has 10 hit points, 0 armor, 250 mana
--- Boss has 13 hit points
--Player casts Poison.
--
---- Boss turn --
--- Player has 10 hit points, 0 armor, 77 mana
--- Boss has 13 hit points
--Poison deals 3 damage; its timer is now 5.
--Boss attacks for 8 damage.
--
---- Player turn --
--- Player has 2 hit points, 0 armor, 77 mana
--- Boss has 10 hit points
--Poison deals 3 damage; its timer is now 4.
--Player casts Magic Missile, dealing 4 damage.
--
---- Boss turn --
--- Player has 2 hit points, 0 armor, 24 mana
--- Boss has 3 hit points
--Poison deals 3 damage. This kills the boss, and the player wins.
--

--Now, suppose the same initial conditions, except that the boss has 14 hit points instead:
--
---- Player turn --
--- Player has 10 hit points, 0 armor, 250 mana
--- Boss has 14 hit points
--Player casts Recharge.
--
---- Boss turn --
--- Player has 10 hit points, 0 armor, 21 mana
--- Boss has 14 hit points
--Recharge provides 101 mana; its timer is now 4.
--Boss attacks for 8 damage!
--
---- Player turn --
--- Player has 2 hit points, 0 armor, 122 mana
--- Boss has 14 hit points
--Recharge provides 101 mana; its timer is now 3.
--Player casts Shield, increasing armor by 7.
--
---- Boss turn --
--- Player has 2 hit points, 7 armor, 110 mana
--- Boss has 14 hit points
--Shield's timer is now 5.
--Recharge provides 101 mana; its timer is now 2.
--Boss attacks for 8 - 7 = 1 damage!
--
---- Player turn --
--- Player has 1 hit point, 7 armor, 211 mana
--- Boss has 14 hit points
--Shield's timer is now 4.
--Recharge provides 101 mana; its timer is now 1.
--Player casts Drain, dealing 2 damage, and healing 2 hit points.
--
---- Boss turn --
--- Player has 3 hit points, 7 armor, 239 mana
--- Boss has 12 hit points
--Shield's timer is now 3.
--Recharge provides 101 mana; its timer is now 0.
--Recharge wears off.
--Boss attacks for 8 - 7 = 1 damage!
--
---- Player turn --
--- Player has 2 hit points, 7 armor, 340 mana
--- Boss has 12 hit points
--Shield's timer is now 2.
--Player casts Poison.
--
---- Boss turn --
--- Player has 2 hit points, 7 armor, 167 mana
--- Boss has 12 hit points
--Shield's timer is now 1.
--Poison deals 3 damage; its timer is now 5.
--Boss attacks for 8 - 7 = 1 damage!
--
---- Player turn --
--- Player has 1 hit point, 7 armor, 167 mana
--- Boss has 9 hit points
--Shield's timer is now 0.
--Shield wears off, decreasing armor by 7.
--Poison deals 3 damage; its timer is now 4.
--Player casts Magic Missile, dealing 4 damage.
--
---- Boss turn --
--- Player has 1 hit point, 0 armor, 114 mana
--- Boss has 2 hit points
--Poison deals 3 damage. This kills the boss, and the player wins.

--You start with 50 hit points and 500 mana points. The boss's actual stats are in your puzzle input. 
--What is the least amount of mana you can spend and still win the fight? 
--(Do not include mana recharge effects as "spending" negative mana.)
--
--Hit Points: 51
--Damage: 9

--- Part Two ---
--On the next run through the game, you increase the difficulty to hard.
--
--At the start of each player turn (before any other effects apply), you lose 1 hit point. If this brings you to or below 0 hit points, you lose.
--
--With the same starting stats for you and the boss, what is the least amount of mana you can spend and still win the fight?

--/*
--with trace
constant verbose = false

procedure printv(integer fn, string fmt, sequence args={})
    if verbose then
        printf(fn,fmt,args)
    end if
end procedure

-- (uses DESC,COST from day21:)
constant spells = {{"Magic Missile", 53}, --0, 4, 0, 0},
                   {"Drain", 73}, --0, 2, 0, 2},
                   {"Shield", 113}, --6, 0, 6, 0, 0},
                   {"Poison", 173}, --6, 3, 0, 0, 0},
                   {"Recharge", 229}} --, 5, " mana. It starts an effect that lasts for 5 turns. At the start of each turn while it is active, it gives you 101 new mana.

enum PHP, PD, PA, BHP, BD, BA, MANA, SPEND, OVER, SPELL, SPELLS
if BA or PD then end if

function apply_spells(sequence state,bool hard)
    if hard then
        state[PHP] -= 1
        if state[PHP]<=0 then
            state[OVER] = -1
            return state
        end if
    end if
    sequence active_spells = state[SPELLS]
    for i=length(active_spells) to 1 by -1 do
        integer {spell,tleft} = active_spells[i]
        string desc = spells[spell][DESC],
               effect = ""
        tleft -= 1
        active_spells[i][2] = tleft
        switch spell do
            case 1: -- Magic Missile
                    ?9/0 -- should never happen!
            case 2: -- Drain
                    ?9/0 -- should never happen!
            case 3: -- Shield
                    -- (do nothing until it wears off)
                    effect = "" -- (nb causes break!)
            case 4: -- Poison
                    state[BHP] -= 3
                    if state[BHP]<=0 then state[OVER] = 1 end if
                    effect = " deals 3 damage"
            case 5: -- Recharge
                    state[MANA] += 101
                    effect = " provides 101 mana"
            else ?9/0
        end switch
        printv(1,"%s%s",{spells[spell][DESC],effect})
        if state[OVER] then
            printv(1,". This kills the boss, and the player wins.\n")
            exit
        end if
        string spacer = iff(spell=3?"'":"; it")
        printv(1,"%ss timer is now %d.\n",{spacer,tleft})
        if tleft=0 then
            effect = ""
            if spell=3 then
                state[PA] -= 7
                effect = ", decreasing armor by 7"
            end if
            printv(1,"%s wears off%s.\n",{desc,effect})
            active_spells[i..i] = {}
        end if
    end for
    state[SPELLS] = active_spells
    return state
end function

procedure show_turn(string who, sequence state)
    printv(1,"-- %s turn --\n",{who})
    printv(1," Player has %d hit points, %d armor, %d mana\n",{state[PHP],state[PA],state[MANA]})
    printv(1," Boss has %d hit points\n",{state[BHP]})
end procedure

function valid_spell(integer spell, sequence state)
    sequence active_spells = state[SPELLS]
    for i=1 to length(active_spells) do
        if spell=active_spells[i][1]
        and active_spells[i][2]>1 then
            return false
        end if
    end for
    return true
end function

procedure push_states(sequence state, integer states)
-- (note this quietly ignores losing states, where we cannot afford any spell)
if verbose then
?"push_states"
end if
    integer over = state[OVER]
    if over!=0 then
        if over=1 then
--?{state[SPEND],pq_size(states)}
            -- potential winner...
            state[SPELL] = 0
            pq_add({state,state[SPEND]},states)
        end if
        return
    end if
    integer mana = state[MANA]
    for i=1 to length(spells) do
        integer cost = spells[i][COST]
        if mana>=cost
        and valid_spell(i,state) then
            state[SPELL] = i
            pq_add({state,state[SPEND]},states)
        end if
    end for
end procedure

function battle2(sequence state, bool hard=false)
-- play up to a pair of moves (player then boss)
-- returns state updated for next round, possibly with [OVER]!=0.
    show_turn("Player",state)
    state = apply_spells(state,hard)
    if state[OVER]!=0 then return state end if
    integer spell = state[SPELL],
            cost = spells[spell][COST]
    string desc = spells[spell][DESC],
           effect = ""  
    if not valid_spell(spell,state) then ?9/0 end if
    switch spell do
        case 1: -- Magic Missile
                state[BHP] -= 4
                effect = ", dealing 4 damage"
        case 2: -- Drain
                state[BHP] -= 2
                state[PHP] += 2
                effect = ", dealing 2 damage, and healing 2 hit points"
        case 3: -- Shield
                state[PA] += 7
                effect = ", increasing armor by 7"
                state[SPELLS] = append(state[SPELLS],{3,6})
        case 4: -- Poison
                state[SPELLS] = append(state[SPELLS],{4,6})
        case 5: -- Recharge
                state[SPELLS] = append(state[SPELLS],{5,5})
        else ?9/0
    end switch
    if state[BHP]<=0 then
        state[OVER] = 1
        effect &= ". This kills the boss, and the player wins"
    end if
    printv(1,"Player casts %s%s\n",{desc,effect})
    state[MANA] -= cost
    state[SPEND] += cost
    if state[MANA]<0 then ?9/0 end if
    if state[OVER]!=0 then return state end if
    show_turn("Boss",state)
    state = apply_spells(state,hard)
    if state[OVER]!=0 then return state end if
    integer d = state[BD],
            a = state[PA]
    string sub = iff(a?sprintf("%d - %d = ",{d,a}):"")
    d = max(1,d-a)
    effect = ""
    state[PHP] -= d
    if state[PHP]<=0 then
        state[OVER] = -1
        effect = ", and wins"
    end if
    printv(1,"Boss attacks for %s%d damage%s\n",{sub,d,effect})
    return state
end function
--*/

--/*
-- MY TRULY AWFUL ATTEMPT....
procedure day22()
--  sequence test = {{10,4},
--                   {2,1}}
--  sequence state = {10,0,0,13,8,0,250,0,false,0,{}}
--  sequence test = {{10,5},
--                   {2,3},
--                   {1,2},
--                   {2,4},
--                   {1,1}}
--  sequence state = {10,0,0,14,8,0,250,0,false,0,{}}
--  while not state[OVER] do
--      if state[PHP]!=test[1][1] then ?9/0 end if
--      integer spell = test[1][2]
--      test = test[2..$]
--      state[SPELL] = spell
--      state = battle2(state)
----        if state[OVER] then exit end if
--  end while
--  if test!={} then ?9/0 end if
--  ?state

    -- Strategy: use a priority queue to order search space by mana spent.
    --           Note that we push [OVER]==1 onto the queue, only when we
    --           pop the lowest cost with that have we found the answer.
    --           (Obviously we do not push any [OVER]==-1 onto the queue)
--trace(1)
    sequence state = {50,0,0,51,9,0,500,0,false,0,{}}
    integer states = pq_new()
atom t0 = time(),
     t1 = time()+1
if 0 then
    push_states(state,states)
if pq_size(states)=0 then ?9/0 end if
    while true do
        state = pq_pop_data(states)
        if state[OVER] then exit end if
if time()>t1 then
    printf(1,"spending %d (size:%d)...\r",{state[SPEND],pq_size(states)})
    t1 = time()+1
end if
--      if state[PHP]!=test[1][1] then ?9/0 end if
--      integer spell = test[1][2]
--      test = test[2..$]
        state = battle2(state)
----        if state[OVER] then exit end if
        if state[OVER]!=-1 then
            push_states(state, states)
        end if
    end while
    pq_destroy(states,justclear:=true)
    printf(1,"minimum spend:%d (%s)\n",{state[SPEND],elapsed(time()-t0)})
--minimum spend:900 (1 minute and 39s)
--minimum spend:900 (7 minutes and 59s)
end if
    -- part 2:
    state = {50,0,0,51,9,0,500,0,false,0,{}}
    push_states(state,states)
    t0 = time()
    while true do
        state = pq_pop_data(states)
        if state[OVER] then exit end if
if time()>t1 then
    printf(1,"spending %d (size:%d)...\r",{state[SPEND],pq_size(states)})
    t1 = time()+1
end if
        state = battle2(state,true)
        push_states(state, states)
    end while
    pq_destroy(states)
    printf(1,"minimum spend(hard):%d (%s)\n",{state[SPEND],elapsed(time()-t0)})
--minimum spend(hard):847 (1 minute and 06s)    -- too low
--minimum spend(hard):1256 (23.7s)              -- too high
--*/
-- trans Python:
enum PLAYER,BOSS
--enum COST,DAMAGE,HEALTH,ARMOUR,TIMER,IDX,MANA
enum COST22,DAMAGE22,HEALTH,ARMOUR22,TIMER,IDX,MANA     -- (avoid clashes with above)
constant SPELLS = {{ 53,4,0,0,0,1,0}, -- missile
                   { 73,2,2,0,0,2,0}, -- drain
                   {113,0,0,7,6,3,0}, -- shield
                   {173,3,0,0,6,4,0}, -- poison
                   {229,0,0,0,5,5,101}}, -- recharge
         bossDamage = 9

--atom t0 = time()
function simulate(integer bhp, php, mana, turn, spent, minspend, pt2, sequence spells)
    if pt2 and turn=PLAYER then
        php -= 1
        if php<=0 then return minspend end if
    end if
    sequence active = repeat(false,length(SPELLS)), spell
    integer arm = 0
    for i=length(spells) to 1 by -1 do
        spell = spells[i]
        bhp -= spell[DAMAGE22]
        php += spell[HEALTH]
        arm += spell[ARMOUR22]
        mana += spell[MANA]
        if spell[TIMER]>1 then
            spells[i][TIMER] -= 1
            active[spell[IDX]] = true
        else
            spells[i..i] = {}
        end if
    end for 
    if bhp<=0 then
        if minspend=-1 or minspend>spent then
            minspend = spent
        end if
    elsif minspend=-1 or spent<minspend then
        if turn=PLAYER then
            for i=1 to length(SPELLS) do
                spell = SPELLS[i]
                integer cost = spell[COST22]
                if cost<=mana and not active[i] then
                    minspend = simulate(bhp,php,mana-cost,BOSS,spent+cost,minspend,pt2,append(spells,spell))
                end if
            end for
        else -- BOSS
            php -= max(1,bossDamage-arm)
            if php>0 then
                minspend = simulate(bhp,php,mana,PLAYER,spent,minspend,pt2,spells)
            end if
        end if
    end if
    return minspend
end function

procedure day22()
    ?simulate(51,50,500,PLAYER,0,-1,false,{})   -- 900
    ?simulate(51,50,500,PLAYER,0,-1,true,{})    -- 1216
--  ?elapsed(time()-t0) -- 0.2s
end procedure
--/* PHP (original, failed attempt below)
$state = array('boss' => 51,'d' => 9,'hp' => 50,'m' => 500,'a' => 0,'shield' => 0,'poison' => 0,'recharge' => 0,'manaspent' => 0,'move' => 'player');
$spells = array('missile' => array(53,4,0),'drain' => array(73,2,2),'shield' => array(113,6),'poison' => array(173,6),'recharge' => array(229,5));

$min = PHP_INT_MAX;
$moves = array($state);

while ($state = array_shift($moves)) {
        if ($state['move'] == 'player') # hard mode
                $state['hp']--;
                
        $state['a'] = ($state['shield']-- > 0 ? 7 : 0);
        if ($state['poison']-- > 0)
                $state['boss'] -= 3;
        if ($state['recharge']-- > 0)
                $state['m'] += 101;
        
        if ($state['hp'] <= 0 OR $state['manaspent'] >= $min)
                continue;
        if ($state['boss'] <= 0) {
                $min = min($min, $state['manaspent']);
                continue;
        }
        
        if ($state['move'] == 'boss') {
                $state['move'] = 'player';
                $state['hp'] -= max(1, $state['d'] - $state['a']);
                array_unshift($moves, $state);
        } else {
                $state['move'] = 'boss';
                foreach ($spells as $spell => $info) {
                        if ($info[0] >= $state['m']) continue;
                        $n = $state;
                        $n['m'] -= $info[0];
                        $n['manaspent'] += $info[0];
                        
                        switch ($spell) {
                                case 'missile':
                                case 'drain':
                                        $n['boss'] -= $info[1];
                                        $n['hp'] += $info[2];
                                        break;
                                default:
                                        if ($n[$spell] > 0) continue 2;
                                        $n[$spell] = $info[1];
                                        break;
                        
                        }
                        
                        array_unshift($moves, $n);
                }
        }
}

echo $min;
-- AND MY FAILED XLATE OF IT!:
--enum BOSS,D,HP,M,A,SHIELD,POISON,RECHARGE,SPENT,PLAYER
enum M,D,SHIELD,POISON,RECHARGE,BOSS,HP,A,SPENT,PLAYER
--sequence state = {51,9,10,500,0,0,0,0,0,1},
sequence state = {500,9,0,0,0,51,50,0,0,PLAYER},
--$state = array('boss' => 51,'d' => 9,'hp' => 50,'m' => 500,'a' => 0,'shield' => 0,'poison' => 0,'recharge' => 0,'manaspent' => 0,'move' => 'player');
         moves = {state}
enum MISSILE,DRAIN--,SHIELD,POISON,RECHARGE
constant spells = {{54,4,0},{73,2,2},{113,6,SHIELD},{173,6,POISON},{229,5,RECHARGE}}

--$spells = array('missile' => array(53,4,0),'drain' => array(73,2,2),'shield' => array(113,6),'poison' => array(173,6),'recharge' => array(229,5));
--$min = PHP_INT_MAX;
--$moves = array($state);
integer minspend = 999999999

atom t1 = time()+1
while length(moves) do
    state = moves[$]; moves = moves[1..-2]
if time()>t1 then
    ?state
    ?length(moves)
    t1 = time()+1
end if
    if state[PLAYER]==PLAYER then -- hard mode
        state[HP] -= 1
    end if
    state[SHIELD] -= 1
    state[A] = iff(state[SHIELD]>0?7:0)
    state[POISON] -= 1
    if state[POISON]>0 then state[BOSS] -= 3 end if
    state[RECHARGE] -= 1
    if state[RECHARGE]>0 then state[M] += 101 end if
        
    if state[HP]>0 and state[SPENT]<minspend then
        if state[BOSS]<=0 then
            minspend = min(minspend, state[SPENT])
--?minspend
        elsif state[PLAYER]==BOSS then
            state[PLAYER] = PLAYER
            state[HP] -= max(1, state[D]-state[A])
            moves = append(moves,state)
        else
            state[PLAYER] = BOSS
            for s=1 to length(spells) do
                integer {cost,d,x} = spells[s]
                if cost<=state[M] then
                    sequence n = state
                    n[M] -= cost
                    n[SPENT] += cost
--                  if s=MISSILE or s=DRAIN then
                    if s<=DRAIN then
                        n[BOSS] -= d
                        n[HP] += x
                        moves = append(moves,n)
--else
--if s!=x then ?9/0 end if
                    elsif n[x]<=0 then
--                  if n[x]<=0 then
                        n[x] = d
                        moves = append(moves,n)
                    end if
--end if
                end if
            end for
        end if
    end if
end while

?minspend

--*/

--- Day 23: Opening the Turing Lock ---
--Little Jane Marie just got her very first computer for Christmas from some unknown benefactor. 
--It comes with instructions and an example program, but the computer itself seems to be malfunctioning. 
--She's curious what the program does, and would like you to help her run it.
--
--The manual explains that the computer supports two registers and six instructions (truly, it goes on to remind the reader, a state-of-the-art technology). 
--The registers are named a and b, can hold any non-negative integer, and begin with a value of 0. The instructions are as follows:
--
--hlf r sets register r to half its current value, then continues with the next instruction.
--tpl r sets register r to triple its current value, then continues with the next instruction.
--inc r increments register r, adding 1 to it, then continues with the next instruction.
--jmp offset is a jump; it continues with the instruction offset away relative to itself.
--jie r, offset is like jmp, but only jumps if register r is even ("jump if even").
--jio r, offset is like jmp, but only jumps if register r is 1 ("jump if one", not odd).
--All three jump instructions work with an offset relative to that instruction. 
--The offset is always written with a prefix + or - to indicate the direction of the jump (forward or backward, respectively). 
--For example, jmp +1 would simply continue with the next instruction, while jmp +0 would continuously jump back to itself forever.
--
--The program exits when it tries to run an instruction beyond the ones defined.
--
--For example, this program sets a to 2, because the jio instruction causes it to skip the tpl instruction:
--
--inc a
--jio a, +2
--tpl a
--inc a
--What is the value in register b when the program in your puzzle input is finished executing?

--/*
constant pgm = split("""
inc a
jio a, +2
tpl a
inc a""","\n")
--*/
--/!*
constant pgm = split("""
jio a, +22
inc a
tpl a
tpl a
tpl a
inc a
tpl a
inc a
tpl a
inc a
inc a
tpl a
inc a
inc a
tpl a
inc a
inc a
tpl a
inc a
inc a
tpl a
jmp +19
tpl a
tpl a
tpl a
tpl a
inc a
inc a
tpl a
inc a
tpl a
inc a
inc a
tpl a
inc a
inc a
tpl a
inc a
tpl a
tpl a
jio a, +8
inc b
jie a, +4
tpl a
inc a
jmp +2
hlf a
jmp -7""","\n")
--*!/

procedure day23()
    ?"day23"
    integer pc = 1,
--          a = 0,
            a = 1,  -- part 2
            b = 0
    while pc<=length(pgm) do
        sequence ins = split(pgm[pc])
        string op = ins[1]
        if op="inc" then
            if ins[2]="a" then a += 1
            elsif ins[2]="b" then b += 1
            else ?9/0 end if
        elsif op="jio"
           or op="jie" then
            integer {{offset}} = scanf(ins[3],"%d"), r
            if ins[2]="a," then r = a
            elsif ins[2]="b," then r = b
            else ?9/0 end if
            if op="jio" then r = (r=1)
            elsif op="jie" then r = (and_bits(r,1)=0)
            else ?9/0 end if
            if r=1 then
                pc += offset-1
            end if
        elsif op="tpl" then
            if ins[2]="a" then a *= 3
            elsif ins[2]="b" then b *= 3
            else ?9/0 end if
        elsif op="jmp" then
            integer {{offset}} = scanf(ins[2],"%d")
            pc += offset-1
        elsif op="hlf" then
            if ins[2]="a" then a /= 2
            elsif ins[2]="b" then b /= 2
            else ?9/0 end if
        else ?9/0 end if
        pc += 1
    end while
--  ?a
    ?b -- 255
       -- 334
end procedure

--- Day 24: It Hangs in the Balance ---
--It's Christmas Eve, and Santa is loading up the sleigh for this year's deliveries. 
--However, there's one small problem: he can't get the sleigh to balance. 
--If it isn't balanced, he can't defy physics, and nobody gets presents this year.
--
--No pressure.
--
--Santa has provided you a list of the weights of every package he needs to fit on the sleigh. 
--The packages need to be split into three groups of exactly the same weight, and every package has to fit. 
--The first group goes in the passenger compartment of the sleigh, and the second and third go in containers on either side. 
--Only when all three groups weigh exactly the same amount will the sleigh be able to fly. Defying physics has rules, you know!
--
--Of course, that's not the only problem. 
--The first group - the one going in the passenger compartment - needs as few packages as possible so that Santa has some legroom left over. 
--It doesn't matter how many packages are in either of the other two groups, so long as all of the groups weigh the same.
--
--Furthermore, Santa tells you, if there are multiple ways to arrange the packages such that the fewest possible are in the first group, 
--you need to choose the way where the first group has the smallest quantum entanglement to reduce the chance of any "complications". 
--The quantum entanglement of a group of packages is the product of their weights, that is, the value you get when you multiply their weights together. 
--Only consider quantum entanglement if the first group has the fewest possible number of packages in it and all groups weigh the same amount.
--
--For example, suppose you have ten packages with weights 1 through 5 and 7 through 11. 
--For this situation, some of the unique first groups, their quantum entanglements, and a way to divide the remaining packages are as follows:
--
--  Group 1;             Group 2; Group 3
--  11 9       (QE= 99); 10 8 2;  7 5 4 3 1
--  10 9 1     (QE= 90); 11 7 2;  8 5 4 3
--  10 8 2     (QE=160); 11 9;    7 5 4 3 1
--  10 7 3     (QE=210); 11 9;    8 5 4 2 1
--  10 5 4 1   (QE=200); 11 9;    8 7 3 2
--  10 5 3 2   (QE=300); 11 9;    8 7 4 1
--  10 4 3 2 1 (QE=240); 11 9;    8 7 5
--  9 8 3      (QE=216); 11 7 2;  10 5 4 1
--  9 7 4      (QE=252); 11 8 1;  10 5 3 2
--  9 5 4 2    (QE=360); 11 8 1;  10 7 3
--  8 7 5      (QE=280); 11 9;    10 4 3 2 1
--  8 5 4 3    (QE=480); 11 9;    10 7 2 1
--  7 5 4 3 1  (QE=420); 11 9;    10 8 2
--
--Of these, although 10 9 1 has the smallest quantum entanglement (90), the configuration with only two packages, 11 9, in the passenger compartment 
--gives Santa the most legroom and wins. In this situation, the quantum entanglement for the ideal configuration is therefore 99. 
--Had there been two configurations with only two packages in the first group, the one with the smaller quantum entanglement would be chosen.
--
--What is the quantum entanglement of the first group of packages in the ideal configuration?

--- Part Two ---
--That's weird... the sleigh still isn't balancing.
--
--"Ho ho ho", Santa muses to himself. "I forgot the trunk".
--
--Balance the sleigh again, but this time, separate the packages into four groups instead of three. The other constraints still apply.
--
--Given the example packages above, this would be some of the new unique first groups, their quantum entanglements, and one way to divide the remaining packages:
--
--
----    11 4    (QE=44); 10 5;   9 3 2 1; 8 7
----    10 5    (QE=50); 11 4;   9 3 2 1; 8 7
----    9 5 1   (QE=45); 11 4;   10 3 2;  8 7
----    9 4 2   (QE=72); 11 3 1; 10 5;    8 7
----    9 3 2 1 (QE=54); 11 4;   10 5;    8 7
----    8 7     (QE=56); 11 4;   10 5;    9 3 2 1
--
--Of these, there are three arrangements that put the minimum (two) number of packages in the first group: 11 4, 10 5, and 8 7. 
--Of these, 11 4 has the lowest quantum entanglement, and so it is selected.
--
--Now, what is the quantum entanglement of the first group of packages in the ideal configuration?

--constant weights = {1,2,3,4,5,7,8,9,10,11},
constant weights = {1,3,5,11,13,17,19,23,29,31,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113},
         lw = length(weights)

atom t1 = time()+1
function thirds(sequence res, weights, chosen, string desc, integer needed, next, l, minl)
    if needed=0 then    -- got a full set
        if l<minl then minl = l res = {} end if
        if l==minl then
            res = append(res,chosen)
            if time()>t1 then
                printf(1,"collecting %s (%d[%d] so far)...\r",{desc,length(res),minl})
                t1 = time()+1
            end if
        end if
--  elsif next<=length(weights) then
    elsif next<=length(weights) and l<=minl then
        integer remain = needed-weights[next]
        if remain>=0 then
            -- get all combinations with and without the next item:
            chosen[next] = 1
            {res,minl} = thirds(res,weights,chosen,desc,remain,next+1,l+1,minl)
            chosen[next] = 0
            {res,minl} = thirds(res,weights,chosen,desc,needed,next+1,l,minl)
        end if
    end if
    return {res,minl}
end function

function entanglement(sequence weights, chosen)
    atom res = 1
    for i=1 to length(chosen) do
        if chosen[i] then res *= weights[i] end if
    end for
    return res
end function

procedure day24()
    --
    -- We are only really interested in the sets with the minimum number of packages.
    -- Note that in theory you should check that the remainder are "splittable" into
    -- 2 or 3 other equal-weight sets, and possibly re-run the collect phase with an
    -- "onlyl" of <failed>minl+1 etc, but I deleted my splittable() routine since no 
    -- cases of that actually occur in the given data, and hence never tried onlyl.
    --
    integer third = sum(weights)/3  -- (nb integer typecheck deliberate...)
    {sequence t, integer minl} = thirds({},weights,repeat(0,lw),"thirds",third,1,0,lw)
    printf(1,"collected %d thirds (of max length %d)\n",{length(t),minl})
--,ut=unique(t)
--if length(ut)!=length(t) then ?9/0 end if -- ok..
--  ?t
--looks good:
--  Day24:
--  {{1,1,2,1,3,2,2,3,1,3},
--   {1,1,2,2,1,3,1,2,3,3},
--   {1,2,1,1,2,3,3,1,2,3},
--   {1,2,1,1,3,2,2,1,3,3},
--   {1,2,1,2,1,1,3,2,3,3},
--   {1,2,2,2,3,1,2,3,1,3},
--   {1,2,3,3,2,3,1,1,2,3}}
--?minl -- 6
--?length(t) -- 291 possible shortest groups
    sequence qe = repeat(0,length(t))
    for i=1 to length(t) do
        qe[i] = entanglement(weights,t[i])
    end for
    printf(1,"smallest qe:%d\n",min(qe))    -- smallest qe:99
                                            -- smallest qe:11266889531
    -- part2:
    integer fourth = sum(weights)/4 -- (nb integer typecheck deliberate...)
    {t,minl} = thirds({},weights,repeat(0,lw),"fourths",fourth,1,0,lw)
    printf(1,"collected %d fourths (of max length %d)\n",{length(t),minl})
    qe = repeat(0,length(t))
    for i=1 to length(t) do
        qe[i] = entanglement(weights,t[i])
    end for
--?qe -- {44,50,56}
    printf(1,"smallest qe (part 2):%d\n",min(qe))   -- smallest qe (part 2):44
                                                    -- smallest qe (part 2):77387711
end procedure

    --- Day 25: Let It Snow ---
--Merry Christmas! Santa is booting up his weather machine; looks like you might get a white Christmas after all.
--
--The weather machine beeps! On the console of the machine is a copy protection message asking you to enter a code from the instruction manual. 
--Apparently, it refuses to run unless you give it that code. No problem; you'll just look up the code in the--
--
--"Ho ho ho", Santa ponders aloud. "I can't seem to find the manual."
--
--You look up the support number for the manufacturer and give them a call. Good thing, too - that 49th star wasn't going to earn itself.
--
--"Oh, that machine is quite old!", they tell you. "That model went out of support six minutes ago, and we just finished shredding all of the manuals. 
--I bet we can find you the code generation algorithm, though."
--
--After putting you on hold for twenty minutes (your call is very important to them, it reminded you repeatedly), they finally find an engineer that remembers how the code system works.
--
--The codes are printed on an infinite sheet of paper, starting in the top-left corner. 
--The codes are filled in by diagonals: starting with the first row with an empty first box, the codes are filled in diagonally up and to the right. 
--This process repeats until the infinite paper is covered. So, the first few codes are filled in in this order:
--
--     | 1   2   3   4   5   6  
--  ---+---+---+---+---+---+---+
--   1 |  1   3   6  10  15  21
--   2 |  2   5   9  14  20
--   3 |  4   8  13  19
--   4 |  7  12  18
--   5 | 11  17
--   6 | 16
--
--For example, the 12th code would be written to row 4, column 2; the 15th code would be written to row 1, column 5.
--
--The voice on the other end of the phone continues with how the codes are actually generated. The first code is 20151125. 
--After that, each code is generated by taking the previous one, multiplying it by 252533, and then keeping the remainder from dividing that value by 33554393.
--
--So, to find the second code (which ends up in row 2, column 1), start with the previous value, 20151125. Multiply it by 252533 to get 5088824049625. 
--Then, divide that by 33554393, which leaves a remainder of 31916031. That remainder is the second code.
--
--"Oh!", says the voice. "It looks like we missed a scrap from one of the manuals. Let me read it to you." You write down his numbers:
--
--     |    1         2         3         4         5         6
--  ---+---------+---------+---------+---------+---------+---------+
--   1 | 20151125  18749137  17289845  30943339  10071777  33511524
--   2 | 31916031  21629792  16929656   7726640  15514188   4041754
--   3 | 16080970   8057251   1601130   7981243  11661866  16474243
--   4 | 24592653  32451966  21345942   9380097  10600672  31527494
--   5 |    77061  17552253  28094349   6899651   9250759  31663883
--   6 | 33071741   6796745  25397450  24659492   1534922  27995004
--

--"Now remember", the voice continues, "that's not even all of the first few numbers; for example, you're missing the one 
--at 7,1 that would come before 6,2. But, it should be enough to let your-- oh, it's time for lunch! Bye!" The call disconnects.
--
--Santa looks nervous. Your puzzle input contains the message on the machine's console. What code do you give the machine?
--
--To continue, please consult the code grid in the manual.  Enter the code at row 3010, column 3019.

procedure day25()
    atom code = 20151125
    integer r = 1, c = 1, rs = 2
    while true do
        code = remainder(code*252533,33554393)
        if r=1 then
            r = rs
            rs += 1
            c = 1
        else
            r -= 1
            c += 1
            if r=3010 and c=3019 then
                ?code -- 8997277
                exit
            end if
        end if
    end while
end procedure

--constant DOD = repeat(1,25)
constant DOD = {0,0,0,0,0,0,0,0,0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}
--              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25

for d=1 to 25 do
    if DOD[d] then
        printf(1,"Day%d:\n",d)
        string fn = sprintf("day%d",d)
        integer rid = routine_id(fn)
        call_proc(rid,{})
    end if
end for

?"done"
{} = wait_key()

