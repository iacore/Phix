--
-- demo\rosetta\Convert_base.exw
-- =============================
--
--  to_base(integer i, base) takes a [decimal] integer and returns a string in the specified base.
--  from_base(string s, integer base) takes a string in the specified base and returns a [decimal] integer.
--
function to_base(integer i, base)
    sequence s = ""
    while i>0 do
        integer c = remainder(i,base)
        s = prepend(s,c+iff(c<10?'0':'a'-10))
        i = floor(i/base)
    end while
    if length(s)=0 then s = "0" end if
    return s
end function
 
function from_base(string s, integer base)
    integer res = 0
    for i=1 to length(s) do
        integer c = s[i]
        res = res*base+(c-iff(c<='9'?'0':'a'-10))
    end for
    return res
end function
 
?to_base(256,16)
?from_base("100",16)
?"done"
{} = wait_key()

--The following also handles fractions:
--/*
--http://rosettacode.org/wiki/Decimal_floating_point_number_to_binary#Phix
--=={{header|Phix}}==
--Handles bases 2..36. Does not handle any form of scientific notation.
--<lang Phix>
function dec_to(atom d, integer base)
-- convert d to a string in the specified base
-- eg dec_to(65535,16) => "FFFF"
    bool neg = d<0
    if neg then d = -d end if
    string res = ""
    integer whole = floor(d)
    d -= whole
    while true do
        integer ch = mod(whole,base)
        ch += iff(ch>9?'A'-10:'0')
        res = ch&res
        whole = floor(whole/base)
        if whole=0 then exit end if
    end while
    if d>0 then
        res &= '.'
        while d>0 do
            d *= base
            integer digit = floor(d)
            d -= digit
            digit += iff(digit>9?'A'-10:'0')
            res &= digit
        end while
    end if
    if neg then res = '-'&res end if
    return res
end function

function to_dec(string s, integer base)
-- convert the string s (in the specified base) 
-- back into a normal decimal/floating point.
-- eg to_dec("FFFF",16) => 65535
    bool neg = (s[1]='-')
    if neg then s = s[2..$] end if
    integer dot = find('.',s)
    if dot then s[dot..dot] = "" end if
    atom res = 0
    for i=1 to length(s) do
        integer digit = upper(s[i])
        digit -= iff(ch>='A'?'A'-10:'0')
        res = res*base + digit
    end for
    if dot then res /= power(base,length(s)-dot+1) end if
    if neg then res = -res end if
    return res
end function

procedure test(atom f, integer base=2)
    string s = dec_to(f,base)
    printf(1,"%.8g => 0(%d):%s\n", {f, base, s})
    f = to_dec(s,base)
    printf(1,"0(%d):%s => %.8g\n", {base, s, f})
end procedure
test(23.34375)
test(-23.34375)
test(11.90625)
test(-11.90625)
test(13)
test(0.1)
test(-5)
test(-0.25)
test(0)
test(65535,16)
?to_dec("23.7",10)
?dec_to(23.7,10)
--test(9.01)
--test(9)
--test(0.01)
--/*
"started"
23.34375 => 0(2):10111.01011
0(2):10111.01011 => 23.34375
-23.34375 => 0(2):-10111.01011
0(2):-10111.01011 => -23.34375
11.90625 => 0(2):1011.11101
0(2):1011.11101 => 11.90625
-11.90625 => 0(2):-1011.11101
0(2):-1011.11101 => -11.90625
13 => 0(2):1101
0(2):1101 => 13
0.1 => 0(2):0.0001100110011001100110011001100110011001100110011001101
0(2):0.0001100110011001100110011001100110011001100110011001101 => 0.1
-5 => 0(2):-101
0(2):-101 => -5
-0.25 => 0(2):-0.01
0(2):-0.01 => -0.25
0 => 0(2):0
0(2):0 => 0
65535 => 0(16):FFFF
0(16):FFFF => 65535
23.7
"23.699999999999999289457264239899814128875732421875"
</pre>
Aside: I was quite surprised to get 100% accuracy on these tests, but actually it is more of
a lucky coincidence in the way it is written, as the last test shows. The truth of the matter
is simply that you can extract a float to a binary text representation exactly, in a way that 
you just cannot do for most other (ie non-power-2) bases.
--*/
--*/

--and another one (positive integer only[?]):
-- (could perhaps be made to convert a string in any base to any other base...?)
-- (note this may be a tad slow: it performs string-maths - converting a 100-digit
--  input string is likely to perform some 10,000 individual mod and floor_div ops.
--  On the plus side it can theoretically handle 800 million+ digits with perfect
--  accuracy, far more on 64 bit, if you have enough RAM and patience that is ;-)
--/*
function to_base(string s, integer base)
-- convert the string s in base 10 to the specified base
-- eg to_dec("65535",16) => "FFFF"
--  bool neg = (s[1]='-')
--  if neg then s = s[2..$] end if
--  integer dot = find('.',s)
--  if dot then s[dot..dot] = "" end if
--  atom res = 0
--trace(1)
    string res = "" 
    while length(s) do
        integer q = 0, r = 0, digit
        for i=1 to length(s) do
            digit = upper(s[i])
            digit -= iff(digit>='A'?'A'-10:'0')
            q = q*10+digit
            r = mod(q,base)
            q = floor(q/base)
            q += iff(q>10?'A'-10:'0')
            s[i] = q
            q = r
        end for
--      res = res*base + digit
        r += iff(r>10?'A'-10:'0')
--nb: I was working with palindromes....
        res &= r
        while length(s) and s[1]='0' do
            s = s[2..$]
        end while
    end while
--  if dot then res /= power(base,length(s)-dot+1) end if ??
--  if neg then res = '-'&res end if [?not tested?]
    return res
end function
--*/

--/* from my last session on this, probably should extend(/loop over several bases) and add to p -test, but ran out of steam:
with javascript_semantics
?{to_number("10_000_000"),1000000}
--integer base = 62
integer base = 61
--integer base = 60 -- OK
--integer base = 37
string s = sprintf("%A",{{base,10_000_000}})
--?{s,"4C92"} -- 1e6, base 62
--?{s,"fxSK"} -- 1e7, base 62
?{s,"i3RQ"} -- 1e7, base 61
--?to_number("1_000_000",{},base)
?{to_number(s,{},base),1000000}
--with trace
include mpfr.e
mpz z = mpz_init()
--function from_base(string s, integer base)
--  integer res = 0
--  for i=1 to length(s) do
--      integer c = s[i]
--      res = res*base+(c-iff(c<='9'?'0':iff(c<='Z'?'A'-10:'a'-36)))
--  end for
--  return res
--end function
--?{from_base(s, base),"(fb)1_000,000"}
--?"ok(native atom)"
--procedure mpz_from_base(mpz z, string s, integer base)
--  mpz_set_si(z,0)
--  for i=1 to length(s) do
--      integer c = s[i]
--      c -= iff(c<='9'?'0':iff(c<='Z'?'A'-10:'a'-36))
--      mpz_mul_si(z,z,base)
--      mpz_add_si(z,z,c)
--  end for
--end procedure
--mpz_from_base(z,s,base)
--?{mpz_get_str(z),"(mfb)1_000,000"}
--?"ok(mpz)"
--?"this fails:"
mpz_set_str(z,s,base)
--?"ok"
?{mpz_get_str(z),"(mpz)1000000"}
mpz_set_str(z,"2.4e7")
?{mpz_get_str(z),"(mpz)2400000"}
--?"ok"
mpfr f = mpfr_init()
--?"this fails:"
mpfr_set_str(f,s,base)
--?"fixed"
?{mpfr_get_fixed(f),"1e7.0000000"}
--mpfr_set_str(f,"1234.5678")
mpfr_set_str(f,"1/10")
--string sb = mpfr_get_str(f,base)
--string sb = "Ju.ZCcda0b1"
--string sb = "KE.YclnVhAp"
string sb = "0.666666666A"
--string sb = "Ju"
--?sb
--?{sb,"0.666666666A"}
mpfr_set_str(f,sb,base)
?{mpfr_get_fixed(f,4),"0.1"} -- base 10 only...
--?mpfr_get_fixed(f,8,base,6) -- maybe...

mpfr_set_str(f,"1000001011.001111010011100001001101101110011000100001011110100101001010100100000111001000111",2)
?{mpfr_get_fixed(f,12),"523.239140374943"}
mpfr_set_str(f,"-110110100.011011111001110110110010001011010000111001010110000001000001100010010011011101001",2)
?{mpfr_get_fixed(f,3),"-436.436"}
--printf(1,"%d\n",0b110110100011011111001110110110010001011010000111001010110000001000001100010010011011101001)
--?length("011011111001110110110010001011010000111001010110000001000001100010010011011101001")
--printf(1,"%d\n",power(2,83))
--?-1055237498018660596984129257/4835703278458516698824704*2
--/*
: "mpfr"
1: -1055237498018660596984129257n
2: 4835703278458516698824704n
3: 0
4: 
{"523.239140374943","523.239140374943"}
{"-436.436","-436.436"}
1055237498018660648842624222
81
4835703278458518664468064
-218.218
{"523.239140374943","523.239140374943"}
{"-436.436","-436.436"}
{"523.239140374943","523.239140374943"}
{"-436.436","-436.436"}
{"523.239140374943","523.239140374943"}
{"-436.436","-436.436"}
"0.0s"
"done"

--*/
mpfr_set_str(f,"201101.0201101",3)
?{mpfr_get_fixed(f,12),"523.239140374943"}
mpfr_set_str(f,"-121011.102202211210021110012111201022222000202102010100101200200110122011122101110212",3)
?{mpfr_get_fixed(f,3),"-436.436"}
mpfr_set_str(f,"20B.3D384DB9885E94A90723EF9CBCB174B443E45FFC41152FE0293416F15E3AC303A0F3799ED81589C62",16)
?{mpfr_get_fixed(f,12),"523.239140374943"}
mpfr_set_str(f,"-1B4.6F9DB22D0E5604189374BC6A7EF9DB22D0E5604189374BC6A7EF9DB22D0E5604189374BC6A7EF9DB2",16)
?{mpfr_get_fixed(f,3),"-436.436"}
mpfr_set_str(f,"JA.6C9",27)
?{mpfr_get_fixed(f,12),"523.239140374943"}
mpfr_set_str(f,"-G4.BKML7C5DJ8Q0KB39AIICH4HACN02OJKGPLOPG2D1MFBQI6LJ33F645JELD7I0Q6FNHG88E9M9GE3QO276",27)
?{mpfr_get_fixed(f,3),"-436.436"}
?"woohoo!!"

--/*
         decimal         ternary                         binary
 0:            0            0                              0
 1:            1            1                              1
 2:         6643        100010001                    1100111110011
 3:      1422773      2200021200022              101011011010110110101
 4:      5415589     101012010210101            10100101010001010100101
 5:  90396755477 22122022220102222022122 1010100001100000100010000011000010101
 0:            0            0                              0
 1:            1            1                              1
 2:         6643        100010001                    1100111110011
 3:      1422773      2200021200022              101011011010110110101
 4:      5415589     101012010210101            10100101010001010100101
 5:  90396755477 22122022220102222022122 1010100001100000100010000011000010101

--*/
sequence t = {0, 1, 6643, 1422773, 5415589, 90396755477}
for i=1 to length(t) do
    atom a = t[i]
    printf(1,"%2d: %12d %=24a%=38b\n",{i-1,a,{3,a},a})
    mpz_set_d(z,a)
    string da = mpz_get_str(z),
           ta = mpz_get_str(z,3),
           ba = mpz_get_str(z,2)
    printf(1,"%2d: %12s %=24s%=38s\n",{i-1,da,ta,ba})
end for

t = {{ 3,"23"},
     { 4,"4091"},
     { 5,"7817"},
     { 6,"4836525320399"},
     { 7,"817337"},
     { 8,"14005650767869"},
     { 9,"1676456897"},
     {10,"357686312646216567629137"},
     {11,"2276005673"},
     {12,"13092430647736190817303130065827539"},
     {13,"812751503"},
     {14,"615419590422100474355767356763"},
     {15,"34068645705927662447286191"},
     {16,"1088303707153521644968345559987"},
     {17,"13563641583101"},
     {19,"546207129080421139"},
     {21,"391461911766647707547123429659688417"},
     {23,"116516557991412919458949"},
     {25,"8211352191239976819943978913"},
     {27,"10681632250257028944950166363832301357693"},
     {29,"4300289072819254369986567661"},
     {31,"645157007060845985903112107793191"}}
--clear_screen()
for i=1 to length(t) do
    {integer b, string d} = t[i]
    mpz_set_str(z,d)
    string tb = mpz_get_str(z,b)
    printf(1,"%3d %-42s %s\n",{b,d,tb})
end for


--/*
  3 23                                        (212, 3 digits)
  4 4091                                      (333323, 6 digits)
  5 7817                                      (222232, 6 digits)
  6 4836525320399                             (14141511414451435, 17 digits)
  7 817337                                    (6642623, 7 digits)
  8 14005650767869                            (313636165537775, 15 digits)
  9 1676456897                                (4284484465, 10 digits)
 10 357686312646216567629137                  (357686312646216567629137, 24 digits) [0.2s]
 11 2276005673                                (a68822827, 9 digits)
 12 13092430647736190817303130065827539       (471a34a164259ba16b324ab8a32b7817, 32 digits) [12.0s]
 13 812751503                                 (cc4c8c65, 8 digits)
 14 615419590422100474355767356763            (d967ccd63388522619883a7d23, 26 digits) [2.3s]
 15 34068645705927662447286191                (6c6c2ce2ceeea4826e642b, 22 digits) [0.6s]
 16 1088303707153521644968345559987           (dbc7fba24fe6aec462abf63b3, 25 digits) [2.0s]
 17 13563641583101                            (6c66cc4cc83, 11 digits)
 19 546207129080421139                        (cieg86gcea2c6h, 14 digits)
 21 391461911766647707547123429659688417      (g8agg2gca8cak4k68gea4g2k22h, 27 digits) [5.8s]
 23 116516557991412919458949                  (immgm6c6imci66a4h, 17 digits)
 25 8211352191239976819943978913              (me6om6oecgcc24c6eg6d, 20 digits) [1s]
 27 10681632250257028944950166363832301357693 (o2akk6ekg844kaia4mack6c2ecab, 28 digits) [12.0s]
 29 4300289072819254369986567661              (kcg66agsckeiasmckkj, 19 digits) [0.4s]
 31 645157007060845985903112107793191         (uuauikuc4ui6oceci642sd, 22 digits) [1.3s]
  3 23                                         212
  4 4091                                       333323
  5 7817                                       222232
  6 4836525320399                              14141511414451435
  7 817337                                     6642623
  8 14005650767869                             313636165537775
  9 1676456897                                 4284484465
 10 357686312646216567629137                   357686312646216567629137
 11 2276005673                                 a68822827
 12 13092430647736190817303130065827539        471a34a164259ba16b324ab8a32b7817
 13 812751503                                  cc4c8c65
 14 615419590422100474355767356763             d967ccd63388522619883a7d23
 15 34068645705927662447286191                 6c6c2ce2ceeea4826e642b
 16 1088303707153521644968345559987            dbc7fba24fe6aec462abf63b3
 17 13563641583101                             6c66cc4cc83
 19 546207129080421139                         cieg86gcea2c6h
 21 391461911766647707547123429659688417       g8agg2gca8cak4k68gea4g2k22h
 23 116516557991412919458949                   immgm6c6imci66a4h
 25 8211352191239976819943978913               me6om6oecgcc24c6eg6d
 27 10681632250257028944950166363832301357693  o2akk6ekg844kaia4mack6c2ecab
 29 4300289072819254369986567661               kcg66agsckeiasmckkj
 31 645157007060845985903112107793191          uuauikuc4ui6oceci642sd
"0.0s"
"done"
--*/

--/*
23.34375 => 0(2):10111.01011 => 23.34375
-23.34375 => 0(2):-10111.01011 => -23.34375
11.90625 => 0(2):1011.11101 => 11.90625
-11.90625 => 0(2):-1011.11101 => -11.90625
13 => 0(2):1101 => 13
0.1 => 0(2):0.0001100110011001100110011001100110011001100110011001101 => 0.1
-5 => 0(2):-101 => -5
-0.25 => 0(2):-0.01 => -0.25
0 => 0(2):0 => 0
65535 => 0(16):FFFF => 65535
23.7 => 0(35):N.OHHHHHHHHFIVE => 23.7 (error: -3.55271e-15)
23.7
"23.699999999999"

23.34375 => 10111.01011 => 23.34375
1011.11101 => 11.90625 => 1011.11101
---
"woohoo!!"
23.34375 => 10111.01011 => 23.34375 (1)
-23.34375 => -10111.01011 => -23.34375 (2)
11.90625 => 1011.11101 => 11.90625 (3)
-11.90625 => -1011.11101 => -11.90625 (4)
13 => 1101 => 13 (5)
0.1 => 0.0001100110011001100110011001100110011001100110011001101 => 0.100000 (6)
-5 => -101 => -5 (7)
-0.25 => -0.01 => -0.25 (8)
0 => 0 => 0 (9)
65535 => ffff => 65535 (10)
23.7 => n.ohhhhhhhhfj => 23.699999 (11)
"0.1s"
"done"

--*/
t = {23.34375, -23.34375, 11.90625, -11.90625, 13, 0.1, -5, -0.25, 0, 65535, 23.7}
for i=1 to length(t) do
    atom a = t[i]
    mpfr_set_d(f,a)
    integer ba = iff(i<10?2:iff(i=10?16:35))
--  string tb = mpfr_get_str(f,ba)
--trace(1)
    string tb = mpfr_get_fixed(f,0,ba)
    mpfr_set_str(f,tb,ba)
--  string td = mpfr_get_str(f)
    string td = mpfr_get_fixed(f)
    printf(1,"%.10g => %s => %s (%d)\n",{a,tb,td,i})
end for
printf(1,"%d == o(62)%A\n",{26,{62,26}})        -- displays 26 == 0b11010 == 0x1A

mpfr_set_str(f,"110.01",2)
printf(1,"0b%s == %s\n",{mpfr_get_fixed(f,0,2),mpfr_get_fixed(f)}) -- 0b110.01 == 6.25
printf(1,"0b%A == %g\n",{{2,6.25},6.25})
--?to_number("110.01","??",2) -- failure


--?747/32 -- spot on!!
--for i=1 to 10 do
--  ?{i,747*power(10,i)/32}
--end for
--*/
--/*
-- hmmm: (desktop/p2js/above discrpancies...)
65535 => ffff => 65535 (10)
23.7 => n.ohhhhhhhhhhhhhhi => 50.464706 (11)

65535 => ffff => 65535 (10)
23.7 => n.ohhhhhhhhfj => 23.699999 (11)
"0.1s"
"done"
23.7 => N.OHHHHHHHHFIVE => 23.7
--*/
