--
-- demo\rosetta\Count_examples.exw
-- ===============================
--
--  (This uses a few '&' instead of/as well as 'a', fairly obviously for everyone's sanity..)
--  Counts no of "{{he&der|" (nb not "=={{he&der|") and everything now via the web api.
--  Since downloading all the pages can be very slow, this uses a cache.
--  Limiting (notdone) by "Phix" fairly obviously speeds it up a hundredfold :-)
--
without js -- (fairly obviously this will never ever run in a browser!)
constant include_drafts = true,
         sort_by_count = false,
--       notdone = "Phix"
--       notdone = "Go"
         notdone = "" -- all

include rosettacode_cache.e

function count_tasks()
    sequence tasks = get_rc_category("Programming_Tasks")
    if include_drafts then
        tasks &= get_rc_category("Draft_Programming_Tasks")
        tasks = sort(tasks)
    end if
    if length(notdone) then
        tasks = filter(tasks,"out",get_rc_category(notdone))
    end if
    atom t1 = time()+1
    integer lt = length(tasks), total_count = 0
    sequence task_counts = repeat(0,lt)
    progress("%d tasks found\n",{lt})
    for i,ti in tasks do
        if time()>t1 then
            progress("analysing %s (%d/%d, %2.1f%%)...",{file_clean(ti),i,lt,(i/lt)*100})
            t1 = time()+1
        end if
        string contents = get_rc_raw(ti), prev = "", curr
        integer count = 0, start = 1
        while true do
            start = match(`{{hea`&`der|`,contents,start)
            if start=0 then exit end if
            --
            -- skip duplicates/we also have to cope with eg
            -- =={{he&der|Python}}==                                    \
            -- ==={{he&der|Python}} Original===                          } count
            -- ==={{he&der|Python}} Succinct===                          }  once
            -- ==={{he&der|Python}} Recursive ===                       /
            -- =={{he&der|Mathematica}} / {{he&der|Wolfram Language}}== \
            -- =={{he&der|Icon}} and {{he&der|Unicon}}==                 } count
            -- == {{he&der|Icon}} and {{he&der|Unicon}} ==              /   both
            -- == {{he&der|Java}}==
            -- etc. Note however that this /does/ count eg
            -- ==={{he&der|Applesoft BASIC}}===                         \
            -- ==={{he&der|BASIC256}}===                                 } count
            -- ==={{he&der|Commodore BASIC}}===                          }  'em
            -- ==={{he&der|IS-BASIC}}===                                 }  all
            -- ==={{he&der|Sinclair ZX81 BASIC}}===                     /
            --
            curr = contents[start..match(`}}`,contents,start+1)]
            if curr!=prev then
                count += 1
            end if
            prev = curr
            start += length(`{{hea`&`der|`)
        end while
        if sort_by_count then
            task_counts[i] = count
        elsif length(notdone) or i<=2 or i>=length(tasks)-1 or mod(i,500)=0 then
            progress("%s: %d\n",{file_clean(ti),count})
        end if
        total_count += count
        if get_key()=#1B then progress("escape keyed\n") exit end if
    end for
    curl_cleanup()
    if sort_by_count then
        for ti in reverse(custom_sort(task_counts,tagset(lt))) do
            progress("%s: %d\n",{file_clean(tasks[ti]),task_counts[ti]})
        end for
    end if
    return total_count
end function

progress("Total: %d\n",{count_tasks()})

?"done"
{} = wait_key()
--/*
-- Output as of 31/12/22: (first 2, every 500th, last 2)
1592 tasks found
100_doors: 352
100_prisoners: 82
First_class_environments: 32
Permutations: 124
Unix/ls: 76
Zsigmondy_numbers: 11
Zumkeller_numbers: 39
Total: 93626
"done"

(every 200th, as of 26/11:) [quickly check what others are showing]
1591 tasks found
100 doors: 348
100 prisoners: 82
Check output device is a terminal: 39
Engel expansion: 6
Hickerson series of almost integers: 46
Maximum difference between adjacent elements of list: 35
Permutations: 123
Self numbers: 28
Sutherland-Hodgman polygon clipping: 48
Zsigmondy numbers: 10
Zumkeller numbers: 39
Total: 93247
"done"

-- Output as of 24/7/19:
1175 tasks found
100_doors 294
15_Puzzle_Game 55
Compiler/virtual_machine_interpreter 14
General_FizzBuzz 51
Maximum_triangle_path_sum 46
Random_number_generator_(included) 89
String_concatenation 155
Zhang-Suen_thinning_algorithm 29
Zig-zag_matrix 99
Total: 64405

-- As of 2/9/19: (with notdone=="")
1194 tasks found
100_doors 295
15_Puzzle_Game 57
Compiler/code_generator 15
GUI_component_interaction 44
Man_or_boy_test 77
Quaternion_type 64
Stack 126
Zig-zag_matrix 99
Zumkeller_numbers 8
Total: 65185

--As of 20/9/21: (with notdone=="")
1441 tasks found
100_doors 332
100_prisoners 66
Closest-pair_problem 72
Feigenbaum_constant_calculation 41
K-d_tree 21
Nonoblock 30
Rate_counter 53
Stack 143
Web_scraping 84
Zig-zag_matrix 110
Zumkeller_numbers 36
Total: 83050
"done"

with notdone of Phix:
13 tasks found
15_puzzle_game_in_3D 3
Audio_overlap_loop 7
B-spline 4
IPC_via_named_pipe 9
IRC_gateway 2
Rosetta_Code/Run_examples 9
Runtime_evaluation 69
Runtime_evaluation/In_an_environment 57
Sierpinski_pentagon 28
URL_shortener 7
Uno_(Card_Game) 0
Using_the_Meetup.com_API 4
XML_validation 16
Total: 215
"done"

Note the following **must** happen (plus some more hidden unicode mungements):
A* search algorithm                 ==> A%2A_search_algorithm
Calendar - for "REAL" programmers   ==> Calendar_-_for_%22REAL%22_programmers
Execute Brain****                   ==> Execute_Brain%2A%2A%2A%2A
Primes: n*2^m+1                     ==> Primes%3A_n%2A2^m+1
Words containing "the" substring    ==> Words_containing_%22the%22_substring
(IE/EG you simply **cannot** have a file named "A*xx", try it and you'll see,
 that is, by attempting to rename a file within (say) Windows File Explorer.
 And certainly don't blame me if you start playing silly buggers with unicode 
 characters and "del A*xx" seems to work, but for all the *wrong* reasons.)
--*/
