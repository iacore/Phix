--
-- demo\rosetta\Curve_fit.exw
-- ==========================
--
-- For https://rosettacode.org/wiki/Logistic_Curve_Fitting_in_Epidemiology
--
-- SUG: add an IupGraph()
--
with javascript_semantics
constant K  = 7_800_000_000,    -- approx world population
         n0 = 27,               -- number of cases at day 0
         actual = {
    27, 27, 27, 44, 44, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60,
    61, 61, 66, 83, 219, 239, 392, 534, 631, 897, 1350, 2023,
    2820, 4587, 6067, 7823, 9826, 11946, 14554, 17372, 20615,
    24522, 28273, 31491, 34933, 37552, 40540, 43105, 45177,
    60328, 64543, 67103, 69265, 71332, 73327, 75191, 75723,
    76719, 77804, 78812, 79339, 80132, 80995, 82101, 83365,
    85203, 87024, 89068, 90664, 93077, 95316, 98172, 102133,
    105824, 109695, 114232, 118610, 125497, 133852, 143227,
    151367, 167418, 180096, 194836, 213150, 242364, 271106,
    305117, 338133, 377918, 416845, 468049, 527767, 591704,
    656866, 715353, 777796, 851308, 928436, 1000249, 1082054,
    1174652 }
 
function f(atom r)
    atom sq = 0
    for i=1 to length(actual) do
        atom eri = exp(r*(i-1)),
             guess = (n0*eri)/(1+n0*(eri-1)/K),
             diff = guess-actual[i]
        sq += diff*diff
    end for
    return sq
end function

function solve(integer f, atom guess=0.5, epsilon=0)
    atom f0 = f(guess),
         delta = iff(guess?guess:1),
         factor = 2 -- double until f0 best, then
                    -- halve until delta<=epsilon
                    --  or we hit precision limit
    while delta>epsilon             -- (predefined limit)
      and guess!=guess-delta do     -- (precision limit)
        atom nf = f(guess-delta)
        if nf<f0 then
            f0 = nf
            guess -= delta
        else
            nf = f(guess+delta)
            if nf<f0 then
                f0 = nf
                guess += delta
            else
                factor = 0.5
            end if
        end if
        delta *= factor
    end while
    return guess
end function

atom r = solve(f),
     R0 = exp(12 * r)
printf(1,"r = %.10f, R0 = %.8f\n",{r,R0})
--printf(1,"r = %.16f, R0 = %.16f\n",{r,R0})

?"done"
{} = wait_key()

--r = 0.1123021757, R0 = 3.84827928

--r = 0.1123021756832255, R0 = 3.8482792802552211
--r = 0.1123021757, R0 = 3.84827928
--r = 0.1123021756832255, R0 = 3.8482792802552211
--"done"
--C:\Program Files (x86)\Phix>p64 demo\rosetta\Curve_fit.exw
--r = 0.1123021757, R0 = 3.84827928
--r = 0.1123021757033456, R0 = 3.8482792811843564
--"done"                       3.8482792820761063

--printf(1,"f(%g):%g\n",{r,sq})
--?{guess,f(guess)}
--?{0.11230217572265622,f(0.11230217572265622)}
--  0.11230217570334565 -- 64 bit
--  0.1123021756832255  -- 32 bit
--  0.11230218 (Python/Go)
--"done"
--    12345678901234567
--R0 = 3.8482792820761063 (julia)
--     3.8482792802552211
--     3.8482793 (Python/Go)
--atom r = 0.5,
--   delta = 2
--
--for i=1 to 10 do
--  atom r0 = f(r),
--       rp = f(r+r/delta),
--       rm = f(r-r/delta)


 
--/*
    fmt.Printf("The logistic curve r for the world data is %.8f\n", r)
    fmt.Printf("R0 is then approximately equal to %.7f\n", math.Exp(12*r))
--*/

--Output:
--The logistic curve r for the world data is 0.11230218
--R0 is then approximately equal to 3.8482793

--=={{header|Phix}}==
--<lang Phix>
--/*
function linspace(atom start, stop, integer num)
    sequence res = repeat(0,num)
    for k=1 to num do
        res[k] = start + (stop-start)/(num-1)*k
    end for
    return res
end function
constant y = {
27, 27, 27, 44, 44, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60,
61, 61, 66, 83, 219, 239, 392, 534, 631, 897, 1350, 2023,
2820, 4587, 6067, 7823, 9826, 11946, 14554, 17372, 20615,
24522, 28273, 31491, 34933, 37552, 40540, 43105, 45177,
60328, 64543, 67103, 69265, 71332, 73327, 75191, 75723,
76719, 77804, 78812, 79339, 80132, 80995, 82101, 83365,
85203, 87024, 89068, 90664, 93077, 95316, 98172, 102133,
105824, 109695, 114232, 118610, 125497, 133852, 143227,
151367, 167418, 180096, 194836, 213150, 242364, 271106,
305117, 338133, 377918, 416845, 468049, 527767, 591704,
656866, 715353, 777796, 851308, 928436, 1000249, 1082054,
1174652,
},
x = linspace(0.0, 96, 97)
?x
?length(x)
?length(y)
--/*
</lang>
{{out}}
<pre>
</pre>
--*/
?"done"
{} = wait_key()
abort(0)
--*/

