--
-- demo\rosetta\Cyclotomic_Polynomial.exw
--
--{{trans|Julia}}
-- some routines nicked from demo/rosetta/Polynomial_long_division.exw:

function degree(sequence p)
    for i=length(p) to 1 by -1 do
        if p[i]!=0 then return i end if
    end for
    return -1
end function
 
--integer mops = 0
function poly_div(sequence n, d)
    while length(d)<length(n) do d &=0 end while
    integer dn = degree(n),
            dd = degree(d)
    if dd<0 then throw("divide by zero") end if
    sequence quot = repeat(0,dn)
    while dn>=dd do
        integer k = dn-dd
        integer qk = n[dn]/d[dd]
        quot[k+1] = qk
        sequence d2 = d[1..length(d)-k]
        for i=1 to length(d2) do
            n[-i] -= d2[-i]*qk
--mops += 1
        end for
        dn = degree(n)
    end while
--  return {quot,n} -- (n is now the remainder)
    if n!=repeat(0,length(n)) then ?9/0 end if
    while quot[$]=0 do quot = quot[1..$-1] end while
    return quot
end function
 
function poly(sequence si)
-- display helper
    string r = ""
    for t=length(si) to 1 by -1 do
        integer sit = si[t]
        if sit!=0 then
            if sit=1 and t>1 then
                r &= iff(r=""? "":" + ")
            elsif sit=-1 and t>1 then
                r &= iff(r=""?"-":" - ")
            else
                if r!="" then
                    r &= iff(sit<0?" - ":" + ")
                    sit = abs(sit)
                end if
                r &= sprintf("%d",sit)
            end if
            r &= iff(t>1?"x"&iff(t>2?sprintf("^%d",t-1):""):"")
        end if
    end for
    if r="" then r="0" end if
    return r
end function
--</Polynomial_long_division.exw> 
 
--# memoize cache for recursive calls
constant cyclotomics = new_dict({{1,{-1,1}},{2,{1,1}}})
 
function cyclotomic(integer n)
--
-- Calculate the nth cyclotomic polynomial.
-- See wikipedia article at bottom of section /wiki/Cyclotomic_polynomial#Fundamental_tools
-- The algorithm is reliable but slow for large n > 1000.
--
    sequence c
    if getd_index(n,cyclotomics)!=NULL then
        c = getd(n,cyclotomics)
    else
        if is_prime(n) then
            c = repeat(1,n)
        else  -- recursive formula seen in wikipedia article
            c = -1&repeat(0,n-1)&1
            sequence f = factors(n,-1)
            for i=1 to length(f) do
                c = poly_div(c,cyclotomic(f[i]))
            end for
        end if
        setd(n,c,cyclotomics)
    end if
    return c
end function
 
for i=1 to 30 do
    sequence z = cyclotomic(i)
    string s = poly(z)
    printf(1,"cp(%2d) = %s\n",{i,s})
    if i>1 and z!=reverse(z) then ?9/0 end if -- sanity check
end for
    
integer found = 0, n = 1, cheat = 0
--integer mmops = 0
sequence fn = repeat(false,10),
         nxt = {105,385,1365,1785,2805,3135,6545,6545,10465,10465}
atom t1 = time()+1
puts(1,"\n")
while found<10 do
--mops = 0
    sequence z = cyclotomic(n)
--if mops>mmops then
--  printf(1,"cp(%d) needed %d mops\n",{n,mops})
--  mmops = mops
--end if
    for i=1 to length(z) do
        atom azi = abs(z[i])
        if azi>=1 and azi<=10 and fn[azi]=0 then
            printf(1,"cp(%d) has a coefficient with magnitude %d\n",{n,azi})
            cheat = azi -- (comment this out to prevent cheating!)
            found += 1
            fn[azi] = true
            t1 = time()+1
        end if
    end for
    if cheat then {n,cheat} = {nxt[cheat],0} else n += iff(n=1?4:10) end if
--  n += 1
    if time()>t1 then
        printf(1,"working (%d) ...\r",n)
        t1 = time()+1
    end if
end while

?"done"
{} = wait_key()

--/* output:
cp( 1) = x - 1
cp( 2) = x + 1
cp( 3) = x^2 + x + 1
cp( 4) = x^2 + 1
cp( 5) = x^4 + x^3 + x^2 + x + 1
cp( 6) = x^2 - x + 1
cp( 7) = x^6 + x^5 + x^4 + x^3 + x^2 + x + 1
cp( 8) = x^4 + 1
cp( 9) = x^6 + x^3 + 1
cp(10) = x^4 - x^3 + x^2 - x + 1
cp(11) = x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1
cp(12) = x^4 - x^2 + 1
cp(13) = x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1
cp(14) = x^6 - x^5 + x^4 - x^3 + x^2 - x + 1
cp(15) = x^8 - x^7 + x^5 - x^4 + x^3 - x + 1
cp(16) = x^8 + 1
cp(17) = x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1
cp(18) = x^6 - x^3 + 1
cp(19) = x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1
cp(20) = x^8 - x^6 + x^4 - x^2 + 1
cp(21) = x^12 - x^11 + x^9 - x^8 + x^6 - x^4 + x^3 - x + 1
cp(22) = x^10 - x^9 + x^8 - x^7 + x^6 - x^5 + x^4 - x^3 + x^2 - x + 1
cp(23) = x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1
cp(24) = x^8 - x^4 + 1
cp(25) = x^20 + x^15 + x^10 + x^5 + 1
cp(26) = x^12 - x^11 + x^10 - x^9 + x^8 - x^7 + x^6 - x^5 + x^4 - x^3 + x^2 - x + 1
cp(27) = x^18 + x^9 + 1
cp(28) = x^12 - x^10 + x^8 - x^6 + x^4 - x^2 + 1
cp(29) = x^28 + x^27 + x^26 + x^25 + x^24 + x^23 + x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1
cp(30) = x^8 + x^7 - x^5 - x^4 - x^3 + x + 1

cp(1) has a coefficient with magnitude 1
cp(105) has a coefficient with magnitude 2
cp(385) has a coefficient with magnitude 3
cp(1365) has a coefficient with magnitude 4
cp(1785) has a coefficient with magnitude 5
cp(2805) has a coefficient with magnitude 6
cp(3135) has a coefficient with magnitude 7
cp(6545) has a coefficient with magnitude 8
cp(6545) has a coefficient with magnitude 9
cp(10465) has a coefficient with magnitude 10
--*/

--/* -- same result as poly() above:
function poly_print(sequence z)
    string s = ""
    for j=length(z) to 1 by -1 do
        integer zi = z[j]
        if zi!=0 then
            if s!="" then
                if zi<0 then
                    s &= " - "
                    zi = abs(zi)
                else
                    s &= " + "
                end if
            end if
            if zi!=1 or j=1 then
                s &= sprintf("%d",zi)
            end if
            if j!=1 then
                s &= "x"
                if j>2 then
                    s &= sprintf("^%d",j-1)
                end if
            end if          
        end if          
    end for
    return s
end function
--*/

--/* short and sweet but goes wrong at 67/91
--(from https://codegolf.stackexchange.com/questions/143906/cyclotomic-polynomial/143944#143944 - the original version of the js entry, believe it or not...)
function poly_mul(atom b, sequence x)
    integer lx = length(x)
    sequence y = {{-cos(b),-sin(b)},{1,0}},
             res = repeat({0,0},lx+1)
    for dx=1 to lx do
        atom {xr,xi} = x[dx]
        for dy=1 to 2 do
            atom {yr,yi} = y[dy]
            integer rdx = dx+dy-1
            res[rdx][1] += xr*yr - xi*yi
            res[rdx][2] += xi*yr + xr*yi
        end for
    end for
    return res
end function

function phi(integer v)
sequence z 
    if is_prime(v) then     -- (else fails at 67)
        z = repeat(1,v)
    else                    -- (still fails at 91)
        z = {{1,0}}
        for u=0 to v-1 do
            if(gcd(v,u)==1) then
                z = poly_mul(PI*2*u/v,z)
            end if
        end for
        z = sq_round(vslice(z,1))
    end if
    return z
end function
--*/

