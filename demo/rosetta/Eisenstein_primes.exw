--
-- demo\rosetta\Eisenstein_primes.exw
-- ==================================
--
with javascript_semantics
requires("1.0.3")
include complex.e
constant OMEGA = {-0.5, sqrt(3)*0.5}

// try to replicate Wren sort order for easy comparison
enum /*NORM,*/ IMAG=2, REAL, IS_PRIME
function new_Eisenstein(integer a,b)
    atom {real,imag} = complex_add(complex_mul(OMEGA,b),a)
    integer norm = a*a-a*b+b*b, c = max(abs(a),abs(b))
    bool p = iff(a=0 or b=0 or a=b?is_prime(c) and remainder(c,3)=2
                                  :is_prime(norm))
    return {norm,imag,real,p} -- nb in [NORM..IS_PRIME] order
end function

function Eisenstein()
    sequence eprimes = {}
    for a=-100 to 100 do
        for b=-100 to 100 do
            sequence e = new_Eisenstein(a, b)
            if e[IS_PRIME] then
                eprimes = append(eprimes,e)
            end if
        end for
    end for
    eprimes = sort(eprimes)
    sequence real = vslice(eprimes,REAL),
             imag = vslice(eprimes,IMAG),
             f100 = repeat("",100)
    for i=1 to 100 do -- convert for display
        integer pm = iff(imag[i]>=0?'+':'-')
        f100[i] = sprintf("%7.4f %c%7.4fi",{real[i],pm,abs(imag[i])})
    end for
    return {f100,real,imag}
end function

sequence {f100,real,imag} = Eisenstein()
printf(1,"First 100 Eisenstein primes nearest zero:\n%s\n",join_by(f100,1,4,"  "))

include xpGUI.e
function get_data(gdx graph) return {{real,imag}} end function
gdx graph = gGraph(get_data,"XMIN=-150,XMAX=150,YMIN=-100,YMAX=100"),
    dlg = gDialog(graph,"Eisenstein primes","SIZE=392x290")
gSetAttribute(graph,"GTITLE","with norm <= 100  (%d points)",{length(real)})
gSetAttributes(graph,"XTICK=50,YTICK=25,MARKSTYLE=DOT,GRID=NO")
gShow(dlg)
gMainLoop()

