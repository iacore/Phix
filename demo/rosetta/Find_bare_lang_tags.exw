
--
-- demo\rosetta\Find_bare_lang_tags.exw
-- ====================================
--
--with javascript_semantics
function slang(string s) return substitute(s,"l&ng","lang") end function
constant contents = apply({"""
Description

<l&ng>Pseudocode</l&ng>

=={{header|C}}==
<l&ng C>printf("Hello world!\n");</l&ng>

=={{header|Perl}}==
<l&ng>print "Hello world!\n"</l&ng>
""",
"""

=={{header|C}}==
<l&ng>printf("Hello again world!\n");</l&ng>

=={{header|Perl}}==
<l&ng perl>print "Hello again world!\n"</l&ng>

""",
"""

<l&ng>Some more pseudocode</l&ng>

=={{header|C}}==
<l&ng>printf("Hello once again world!\n");</l&ng>
"""},slang)
sequence counts = {}, langs = {}
procedure analyse(string src)
    string lang = "no language"
    sequence lines = split_any(src,"\r\n")
    for line in lines do
        sequence r = scanf(line,"=={"&"{he"&"ader|%s}"&"}==")
        if length(r)=1 then
            lang = r[1][1]
        else
            if match("<"&"lang>",line) then
                integer l = find(lang,langs)
                if l=0 then
                    langs = append(langs,lang)
                    counts = append(counts,1)
                else
                    counts[l] += 1
                end if
            end if
        end if
    end for
end procedure
--analyse(contents[1])
papply(contents,analyse)
printf(1,"%d bare language tags\n",{sum(counts)})
for i=1 to length(counts) do
    printf(1,"%d in %s\n",{counts[i],langs[i]})
end for
--?"done"
--wait_key()
--abort(0)
--/*
one task (as commented out above)
<pre>
2 bare language tags
1 in no language
1 in Perl
</pre>
three tasks
<pre>
5 bare language tags
2 in no language
1 in Perl
2 in C
</pre>
--*/
--
--  (Uses '&' instead of/as well as 'a', for everyone's sanity..)
--  Finds/counts no of "<l&ng>" as opposed to eg "<l&ng Phix>" tags.
--  Since downloading all the pages can be very slow, this uses a cache.
--
without js -- (fairly obviously this will never ever run in a browser!)
constant include_drafts = true,
         group_by_task = true,
--       group_by_task = false,
         group_by_lang = not group_by_task, -- (one or t'other)
--       bare_tag = `<l`&`ang>`,
         bare_tag = `<syntax`&`highlight>`,
         lang_hdr = `{`&`{he`&`ader|`

include rosettacode_cache.e -- see [[Rosetta_Code/Count_examples#Phix]]

function multi_lang(sequence s)
-- Convert eg {"Algol","Algol","C","C","C"} to "Algol[2],C[3]"
    integer i = 1, j = 2
    while i<length(s) do
        if s[i]=s[j] then
            while j<length(s) and s[i]=s[j+1] do j+=1 end while
            s[i..j] = {sprintf("%s[%d]",{s[i],j-i+1})}
        end if
        i += 1
        j = i+1
    end while
    return join(s,",")
end function

function multi_task(sequence s, tasks)
-- Similar to multi_lang() but with task[indexes]
    integer i = 1, j = 2
    while i<=length(s) do
        integer si = s[i]
        string tsi = html_clean(tasks[si])
        if j<=length(s) and si=s[j] then
            while j<length(s) and si=s[j+1] do j+=1 end while
            s[i..j] = {sprintf("%s[%d]",{tsi,j-i+1})}
        else
            s[i] = tsi
        end if
        i += 1
        j = i+1
    end while
    if length(s)>6 then s[3..-3] = {"..."} end if
    return join(s,",")
end function

function find_bare_lang_tags()
    sequence tasks = get_rc_category("Programming_Tasks")
    if include_drafts then
        tasks &= get_rc_category("Draft_Programming_Tasks")
        tasks = sort(tasks)
    end if
    integer blt = find("Rosetta Code/Find bare lang tags",tasks) -- not this one!
    tasks[blt..blt] = {}
    integer total_count = 0,
            lt = length(tasks),
            kept = 0
    progress("%d[+1] tasks found\n",{lt})
    sequence task_langs = {},
             task_counts = iff(group_by_task?repeat(0,lt):{}),
             task_things = iff(group_by_task?repeat({},lt):{})
    atom t1 = time()+.25
    for i=1 to length(tasks) do
        string ti = tasks[i], contents = get_rc_raw(ti), curr
        integer count = 0, start = 1, header
        while true do
            start = match(bare_tag,contents,start)
            if start=0 then exit end if
            -- look backward for the nearest header
            header = rmatch(lang_hdr,contents,start)
            if header=0 then
                curr = "no language"
            else
                header += length(lang_hdr)
                curr = file_clean(contents[header..match(`}}`,contents,header)-1])
            end if
            if group_by_lang then
                integer k = find(curr,task_langs)
                if k=0 then
                    task_langs = append(task_langs,curr)
                    task_things = append(task_things,{i})
                    task_counts = append(task_counts,1)
                else
                    task_things[k] = append(task_things[k],i)
                    task_counts[k] += 1
                end if
            else
                task_things[i] = append(task_things[i],curr)
            end if
            count += 1
            start += length(bare_tag)
        end while
        if count!=0 then
            if group_by_task then
                task_counts[i] = count
            end if
            kept += 1
        end if
        if time()>t1 then
            progress("%d tasks kept, %d to go\r",{kept,lt-i})
            t1 = time()+.25
        end if
        total_count += count
        if get_key()=#1B then progress("escape keyed\n") exit end if
    end for
    curl_cleanup()
    progress("%d tasks with bare %s tags\n",{kept,trim(bare_tag,"<>")})
    for ti,tc in task_counts do
      if tc!=0 then
        if group_by_task then
            progress("%s %d (%s)\n",{html_clean(tasks[ti]),tc,multi_lang(task_things[ti])})
        else -- (group_by_lang)
            progress("%s %d (%s)\n",{task_langs[ti],tc,multi_task(task_things[ti],tasks)})
        end if
      end if
    end for
    return total_count
end function

progress("Total: %d\n",{find_bare_lang_tags()})

?"done"
{} = wait_key()

--/*

-- Output as of 29/12/22, group_by_task:
--PS The output of [[Rosetta_Code/Find_bare_lang_tags#Phix]] identifies 19 Ecstasy tasks.
<pre>
1591[+1] tasks found
24 tasks with bare syntaxhighlight tags
100 doors 1 (Ecstasy)
Balanced brackets 1 (Ecstasy)
Base64 decode data 1 (Ecstasy)
Binary digits 1 (Ecstasy)
Binary strings 1 (Ecstasy)
Bitwise operations 1 (Ecstasy)
Boolean values 1 (Ecstasy)
Break OO privacy 1 (Ecstasy)
Call a function 7 (Ecstasy[7])
Call an object method 1 (Ecstasy)
Conjugate a Latin verb 1 (BQN)
Factorial 1 (Ecstasy)
Hello world/Line printer 1 (Slope)
LZW compression 1 (AWK)
Loop over multiple arrays simultaneously 1 (Ecstasy)
Loops/Foreach 1 (Ecstasy)
Named parameters 1 (Ecstasy)
Nested function 1 (Ecstasy)
Null object 1 (Ecstasy)
Number names 1 (Ecstasy)
Optional parameters 1 (Ecstasy)
Simple windowed application 1 (Guish)
String case 1 (BQN)
Variadic function 1 (Ecstasy)
Total: 30
</pre>
group_by_lang:
<pre>
1591[+1] tasks found
24 tasks with bare syntaxhighlight tags
Ecstasy 25 (100 doors,Balanced brackets,...,Optional parameters,Variadic function)
BQN 2 (Conjugate a Latin verb,String case)
Slope 1 (Hello world/Line printer)
AWK 1 (LZW compression)
Guish 1 (Simple windowed application)
Total: 30
</pre>
"done"

-- Output as of 26/7/19, group_by_task:
1174 tasks found
505 tasks with bare lang tags
Hello_world/Newbie 13 (Clojure[3],COBOL[3],Haskell[4],JavaScript[3])
Variables 10 (Cache ObjectScript[4],ChucK[3],Forth,ooRexx,uBasic/4tH)
Knight's_tour 9 (CoffeeScript,Mathprog[4],XSLT[4])
Comments 8 (EasyLang,FreeBASIC,Gri,PostScript,Scilab,Simula[2],smart BASIC)
100_doors 8 (4DOS Batch,Cache ObjectScript[2],EasyLang,PostScript,Scilab,uBasic/4tH,Ursa)
...
Total: 1094

group_by_lang:
1174 tasks found
505 tasks with bare lang tags
uBasic/4tH 83 (100_doors,99_Bottles_of_Beer,AKS_test_for_primes,...,Zeckendorf_number_representation,Zero_to_the_zero_power,Zig-zag_matrix)
EasyLang 81 (100_doors,15_Puzzle_Game,A+B,...,Tic-tac-toe,Towers_of_Hanoi,User_input/Text)
MK-61/52 75 (Ackermann_function,Arithmetic-geometric_mean,Arithmetic-geometric_mean/Calculate_Pi,...,Vector_products,Voronoi_diagram,Zero_to_the_zero_power)
Scilab 58 (100_doors,15_Puzzle_Game,AKS_test_for_primes,...,Welch's_t-test,Yin_and_yang,Zig-zag_matrix)
C 48 (Atomic_updates,Balanced_brackets,Best_shuffle,...,UTF-8_encode_and_decode,Variable-length_quantity,Write_float_arrays_to_a_text_file)
...
Smalltalk 1 (Address_of_a_variable)
smart BASIC 1 (Comments)
4DOS Batch 1 (100_doors)
Total: 1094
"done"
--*/
