--
-- demo\rosetta\Josephus.exw
-- =========================
--
-- I managed to identify nine algorihms in use on the page, so I translated all of them.
-- Kill ordering lists omitted for sanity.
--
-- Unclassified: Haskell, Python[4 aka learning iter in python], REXX[version 2] 
--               (plus Befunge, J, and Mathematica, which I'm happy to ignore)
--
-- Note all indexes and results are 1-based.
-- For skipping/linked_list/sliding_queue, prisoners do not have to be numbers, the
-- same would be true for contractacycle and contractalot with the tiniest of tweaks.

function skipping(sequence prisoners, integer step, survivors=1)
--
-- Method: all prisoners stay where they are, executioner walks round and round, skipping over ever increasing numbers of dead bodies
-- (slowest of the lot, by quite some margin)
--
    integer n = length(prisoners), nn = n, p = 0
    while n>survivors do
        integer found = 0
        while found<step do
            p = iff(p=nn?1:p+1)
            found += prisoners[p]!=-1
        end while
        prisoners[p] = -1
        n -= 1
    end while
    return remove_all(-1,prisoners)
end function
--?skipping({"Joe","Jack","William","John","James"},2,1) --> {"William"}

function linked_list(sequence prisoners, integer step, survivors)
--
-- Method: like skipping, all prisoners stay where they are, but the executioner uses the links to speed things up a bit.
--
    integer n = length(prisoners)
    sequence links = tagset(n,2)&1
    integer p = n, prvp
    while n>survivors do
        for i=1 to step do
            prvp = p
            p = links[p]
        end for
        prisoners[p] = -1
        links[prvp] = links[p]
        n -= 1
    end while
    return remove_all(-1,prisoners)
end function

function sliding_queue(sequence prisoners, integer step, survivors)
--
-- Method: all skipped prisoners rejoin the end of the queue which sidles left, executioner stays put until the queue gets too short.
--
    integer n = length(prisoners)
    while n>survivors do
        integer k = remainder(step-1,n)+1                   -- (mostly k==step)
        prisoners = prisoners[k+1..$]&prisoners[1..k-1]     -- rotate, dropping one.
        n -= 1
    end while
    return prisoners
end function

function contractacycle(integer n, integer k, s)
--
-- Method: executioner walks along killing every k'th prisoner; while he walks back the queue contracts to remove gaps.
--          (once the queue gets too small it obviously reverts to one at a time, a bit more like contractalot below)
--
    sequence living = tagset(n)
    integer startPosition = k, i, lasti
    while n!=s do -- Keep going round the circle until only s prisoners remain.
        integer circleSize = n
        if (n < k) then
            i = mod(startPosition-1,circleSize) + 1
            living = living[1..i-1]&living[i+1..$]
            n -= 1
            lasti = i
        else
            for i=startPosition to circleSize by k do
                living[i] = -1
                n -= 1
                if (n = s) then exit end if -- Not Groovy, see note
                lasti = i
            end for
            living = remove_all(-1,living)
        end if
        startPosition = lasti + k - circleSize
    end while
    return living
end function
-- Groovy does not have a n=s test, it probably is entirely unnecessary. The Grovy code is also somewhat neater, always using 
-- a loop and remove_all() - while not probihitively expensive, it may check lots of things for -1 that the slicing won't.

function contractalot(integer n, integer k, s)
--
-- Method: executioner walks round and round, queue contracts after every kill.
--
    sequence list = tagset(n)
    integer i = 1
    while n>s do
        i += k - 1
        if (i > n) then i := mod(i-1, n)+1 end if
        list [i..i] = {}
        n -= 1
    end while
    return list
end function

function recursive(integer n, k) 
--
-- Method: recursive mod maths madness - only handles the lone survivor case.
--
    return iff(n=1?1:1+mod(k-1+(recursive(n-1, k)),n))
end function

function iterative(integer n, k, m=0)
--
-- Method: iterative mod maths madness - but hey, it will be extremely fast. 
-- Unlike recursive, it can also deliver >1 survivor, one at a time.
--
-- Return m-th on the reversed kill list; m=0 is final survivor.
--
    for a = m+1 to n do
        m = mod(m+k, a) 
    end for
    return m + 1     -- (make result 1-based)
end function

function iterative2(integer n,k,s)
--
-- Method: more iterative maths madness
--
    integer a = k*(n-s) + 1,
         olda = a
    atom q = k/(k-1),
        nk = n*k
    while a <= nk do
        olda = a
        a = ceil(a*q)
    end while
    return nk - olda + 1 -- (make result 1-based)
end function
 
--===test driver===

constant show_all = true,
         show_slow = false,
         show_skipping = false,
         show_linkedlist = false,
         show_sliding_queue = false,
         show_contractacycle = false,
         show_contractalot = false,
         show_recursive = false,
         show_iterative = false,
         show_iterative2 = true

constant TAGSET = #01,
         ITER   = #02,
         ITER2  = #04,
         SLOW   = #08,
         ONES   = #10

constant tests = {{41,3,1,false},
                  {41,3,3,false},
                  {5,2,1,false},
                  {5,4,1,false},
                  {50,2,1,false},
                  {60,3,1,false},
                  {23482,3343,3,true},
                  {23482,3343,1,true},
                  {41,3,6,false}}

procedure test(string name, integer flags)
    atom t0 = time()
    integer rid = routine_id(name)
    for i=1 to length(tests) do
        integer {prisoners, step, survivors, slow} = tests[i]
        if (not and_bits(flags,ONES) or survivors=1)
        and (not slow or show_slow or not and_bits(flags,SLOW)) then
            sequence res
            if and_bits(flags,ONES) then
                -- (recursive does not take a 3rd param)
                res = {rid(prisoners,step)}
            elsif and_bits(flags,TAGSET) then
                res = rid(tagset(prisoners),step,survivors)
            elsif and_bits(flags,ITER) then
                res = {}
                for s=0 to survivors-1 do
                    res &= rid(prisoners,step,s)
                end for
            elsif and_bits(flags,ITER2) then
                res = {}
                for s=prisoners-survivors+1 to prisoners do
                    res &= rid(prisoners,step,s)
                end for
            else
                res = rid(prisoners,step,survivors)
            end if
            printf(1,"%s(%d,%d,%d) = %V\n",{name,prisoners,step,survivors,res})
        end if
    end for
    ?elapsed(time()-t0)
end procedure
if show_all or show_skipping        then test("skipping",TAGSET+SLOW)       end if
if show_all or show_linkedlist      then test("linked_list",TAGSET+SLOW)    end if
if show_all or show_sliding_queue   then test("sliding_queue",TAGSET+SLOW)  end if
if show_all or show_contractacycle  then test("contractacycle",SLOW)        end if
if show_all or show_contractalot    then test("contractalot",NULL)          end if
if show_all or show_recursive       then test("recursive",ONES)             end if
if show_all or show_iterative       then test("iterative",ITER)             end if
if show_all or show_iterative2      then test("iterative2",ITER2)           end if

?"done"
--include builtins\puts1h.e
--puts1("done\n")
{} = wait_key()
--getc0()
--abort(0)

--/* full output:
skipping(41,3,1) = {31}
skipping(41,3,3) = {16,31,35}
skipping(5,2,1) = {3}
skipping(5,4,1) = {1}
skipping(50,2,1) = {37}
skipping(60,3,1) = {41}
skipping(23482,3343,3) = {1088,1336,13318}
skipping(23482,3343,1) = {1336}
skipping(41,3,6) = {2,4,16,22,31,35}
"17s"
linked_list(41,3,1) = {31}
linked_list(41,3,3) = {16,31,35}
linked_list(5,2,1) = {3}
linked_list(5,4,1) = {1}
linked_list(50,2,1) = {37}
linked_list(60,3,1) = {41}
linked_list(23482,3343,3) = {1088,1336,13318}
linked_list(23482,3343,1) = {1336}
linked_list(41,3,6) = {2,4,16,22,31,35}
"0.6s"
sliding_queue(41,3,1) = {31}
sliding_queue(41,3,3) = {16,31,35}
sliding_queue(5,2,1) = {3}
sliding_queue(5,4,1) = {1}
sliding_queue(50,2,1) = {37}
sliding_queue(60,3,1) = {41}
sliding_queue(23482,3343,3) = {13318,1088,1336}
sliding_queue(23482,3343,1) = {1336}
sliding_queue(41,3,6) = {31,35,2,4,16,22}
"1.0s"
contractacycle(41,3,1) = {31}
contractacycle(41,3,3) = {16,31,35}
contractacycle(5,2,1) = {3}
contractacycle(5,4,1) = {1}
contractacycle(50,2,1) = {37}
contractacycle(60,3,1) = {41}
contractacycle(23482,3343,3) = {1088,1336,13318}
contractacycle(23482,3343,1) = {1336}
contractacycle(41,3,6) = {2,4,16,22,31,35}
"1.5s"
contractalot(41,3,1) = {31}
contractalot(41,3,3) = {16,31,35}
contractalot(5,2,1) = {3}
contractalot(5,4,1) = {1}
contractalot(50,2,1) = {37}
contractalot(60,3,1) = {41}
contractalot(23482,3343,3) = {1088,1336,13318}
contractalot(23482,3343,1) = {1336}
contractalot(41,3,6) = {2,4,16,22,31,35}
"0.9s"
recursive(41,3,1) = {31}
recursive(5,2,1) = {3}
recursive(5,4,1) = {1}
recursive(50,2,1) = {37}
recursive(60,3,1) = {41}
recursive(23482,3343,1) = {1336}
"0.0s"
iterative(41,3,1) = {31}
iterative(41,3,3) = {31,16,35}
iterative(5,2,1) = {3}
iterative(5,4,1) = {1}
iterative(50,2,1) = {37}
iterative(60,3,1) = {41}
iterative(23482,3343,3) = {1336,1088,13318}
iterative(23482,3343,1) = {1336}
iterative(41,3,6) = {31,16,35,4,22,2}
"0.0s"
iterative2(41,3,1) = {31}
iterative2(41,3,3) = {35,16,31}
iterative2(5,2,1) = {3}
iterative2(5,4,1) = {1}
iterative2(50,2,1) = {37}
iterative2(60,3,1) = {41}
iterative2(23482,3343,3) = {13318,1088,1336}
iterative2(23482,3343,1) = {1336}
iterative2(41,3,6) = {2,22,4,35,16,31}
"0.0s"
done
--*/
