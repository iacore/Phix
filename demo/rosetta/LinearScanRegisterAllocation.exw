--
-- demo\rosetta\LinearScanRegisterAllocation.exw
-- =============================================
--
-- Use live ranges, not live intervals...?
-- qu: can we extend ranges to load regs as early as possible?
-- linked list: largest end point first
-- AH: what we need to be doing here is populating the IR as we go...
-- First step: generate some asm (in memory) and time it
-- Second step: generate some better asm and time it (etc)
--
-- Plus, this (and graph colouring) do not take reference types into acount:
-- Suppose we have object o, then there is a machine-word sized holder for it,
-- which can contain an integer (top two bits same) or a reference:
--  mov eax,[o]
--  cmp eax,h4  -- #40000000    -- *#100000000 on 64 bit, held in r15
--  jl :an_integer
--      mov cl,[ebx+eax+4-1]    -- type byte (ebx is 0) [***AGI stall***]
--      mov ecx,[ebx+eax*4-8]   -- refcount                    ""
--      mov cl,[eax*4+edx-1]    -- char at s[edx]
--      mov esi,[eax*4+edx*4-4] -- dword sequence s[edx], more "" [see note 1]
--      fld qword[ebx+edx*4]    -- atom (tword on 64 bit)
--      (ret)
-- ::an_integer     
--      eax is -#C0000000..+#3FFFFFFF -- (similar just bigger on 64 bit)
--
-- note 1: you cannot actually do this, instead either the ref or the index must
--          be *4/shl2 (or both) first, which causes another potential AGI stall.
--
-- Admittedly, reference counted atoms have never really made any sense, except
--  for uniform treatment considerations. Having, for instance, any modification
--  to an atom store in a new location is probably no worse (or better) than an
--  inc/dec on a refcount, except not always knowing when it can be freed.
--  But I'm talking about a different (p2js compatible) language, really.
--
-- Question: are there float32 (don't care) or float64 values which can have a
--  similar(ish) "first two bits equal" treatment?
--
-- Question: can we allocate fixed-size float [array]s on the stack?? (as long
--           as they are not passed on/returned/stored anywhere, that is)
--
-- Question: is it worth completely rethinking the symbol table, maybe even
--           storing it in (and reloading in pDiag.e) a dictionary?
--
-- Question: how do we really feel about v2 completely dropping routine_id()?
--           (I suppose I should post a question on EuForum about that...)
--           (nb while call_proc/func() technically go, the code behind is
--            not going anywhere, aka use "rid()" not "call_proc(rid,{})")
--           (There is also a similar question for define_c_func/proc():
--            they would become more like compiler directives that actual
--            run-time code. It would not be possible to compile ... ffs,
--            the interpreter has to cope...
--            however c_func/proc() really is going, replaced completely by
--            compile/load-time-resolved #ilASM{ call "lib","name" } etc...)
--
without debug
include builtins\VM\pprntfN.e
include builtins\ppp.e
with debug
-- code = {{a,b,c,d},   -- 1
--         {a,e}        -- 2
--         {c,f}        -- 3
--         {b}          -- 4
--         {}           -- 5
--         {e,f}        -- 6
--         {}           -- 7
--         {g,d}        -- 8
--         {}           -- 9
--         {g}}         -- 10
constant vars = {a:='a',
                 b:='b',
                 c:='c',
                 d:='d',
                 e:='e',
                 f:='f',
                 g:='g'}
sequence varl = repeat(0,length(vars))
sequence code = {{a,b,c,d,0,0,0},   -- 1
                 {a,0,0,0,e,0,0},   -- 2
                 {0,0,c,0,0,f,0},   -- 3
                 {0,b,0,0,0,0,0},   -- 4
                 {0,0,0,0,0,0,0},   -- 5
                 {0,0,0,0,e,f,0},   -- 6
                 {0,0,0,0,0,0,0},   -- 7
                 {0,0,0,d,0,0,g},   -- 8
                 {0,0,0,0,0,0,0},   -- 9
                 {0,0,0,0,0,0,g}}   -- 10
sequence lode = sq_mul(code,0)

--sequence intervals    -- kept sorted/created in order of increasing start point 
--sequence ranges
enum LI_NAME, LI_STARTPOINT, LI_ENDPOINT, LI_REG, LI_LOCATION, LI_PREV_ACTIVE, LI_NEXT_ACTIVE, LI_PREV_END, LI_NEXT_END
--sequence intervals = {
--  {"a", 1, 2, 0, 0, 0, 0, 0, 0},
--  {"b", 1, 4, 0, 0, 0, 0, 0, 0},
--  {"c", 1, 3, 0, 0, 0, 0, 0, 0},
--  {"d", 1, 8, 0, 0, 0, 0, 0, 0},
--  {"e", 2, 6, 0, 0, 0, 0, 0, 0},
--  {"f", 3, 6, 0, 0, 0, 0, 0, 0},
--  {"g", 8, 10, 0, 0, 0, 0, 0, 0}
--}

--sequence vars = {},
--       varl = {}

function build_intervals(sequence code)
    sequence res = {}
    for i=1 to length(code) do
        sequence ci = code[i]
        for j=1 to length(ci) do
            if ci[j]!=0 then
--              string var = ci[j]
                integer var = ci[j]
                integer k = find(var,vars),
                        r = varl[k]
                if r then
                    res[r][LI_ENDPOINT] = i
                else
--                  k = length(res)+1
--                  vars = append(vars,var)
--                  varl = append(varl,k)
                    res = append(res,{var, i, i, 0, 0, 0, 0, 0, 0})
                    varl[k] = length(res)
                end if
            end if
        end for
    end for
    return res
end function
-- good, same:
--?build_intervals(code)
sequence intervals = build_intervals(code)
--?intervals


--enum R_NAME, R_NXT, R_PRV
enum R_NAME, R_NEXT
--sequence registers = {{"eax",2,0},{"ecx",3,1},{"edx",4,2},{"esi",5,3},{"edi",0,4}}
sequence registers = {{"eax",2},{"ecx",3},{"edx",4},{"esi",5},{"edi",0}}
--sequence registers = {{"eax",2,0},{"ecx",3,1},{"edx",4,2},{"esi",0,3}}
--sequence registers = {{"eax",2},{"ecx",3},{"edx",4},{"esi",0}}
--integer pool = 1
constant R = length(registers)

integer active = 0,     -- by start point
        ective = 0,     -- by end point
        active_len = 0,
        pool = 1

procedure add_to_active(integer j)
    integer next, prev = 0,
            sp = intervals[j][LI_STARTPOINT],
            ep = intervals[j][LI_ENDPOINT]
    -- first, the by startpoint list
    next = active
    while next and intervals[next][LI_STARTPOINT]<=sp do
        prev = next
        next = intervals[prev][LI_NEXT_ACTIVE]
    end while
    intervals[j][LI_NEXT_ACTIVE] = next
    intervals[j][LI_PREV_ACTIVE] = prev
    if prev then intervals[prev][LI_NEXT_ACTIVE] = j else active = j end if
    if next then intervals[next][LI_PREV_ACTIVE] = j end if
    -- then, the by endpoint list
    next = ective
    while next and intervals[next][LI_ENDPOINT]>=ep do
        prev = next
        next = intervals[prev][LI_NEXT_END]
    end while
    intervals[j][LI_NEXT_END] = next
    intervals[j][LI_PREV_END] = prev
    if prev then intervals[prev][LI_NEXT_END] = j else ective = j end if
    if next then intervals[next][LI_PREV_END] = j end if
    active_len += 1
end procedure

function remove_from_active(integer j)
    integer next,prev
    -- first by startpoint list
    next = intervals[j][LI_NEXT_ACTIVE]
    prev = intervals[j][LI_PREV_ACTIVE]
    intervals[j][LI_NEXT_ACTIVE] = 0
    intervals[j][LI_PREV_ACTIVE] = 0
    if next then intervals[next][LI_PREV_ACTIVE] = prev end if
    if prev then intervals[prev][LI_NEXT_ACTIVE] = next else active = next end if
    -- then by endpoint list
    next = intervals[j][LI_NEXT_END]
    prev = intervals[j][LI_PREV_END]
    intervals[j][LI_NEXT_END] = 0
    intervals[j][LI_PREV_END] = 0
    if next then intervals[next][LI_PREV_END] = prev end if
    if prev then intervals[prev][LI_NEXT_END] = next else ective = next end if
    active_len -= 1
    return next
end function

procedure ExpireOldIntervals(integer i)
    -- for each interval j in active, in order of increasing end point do
    integer j = ective, next, --prev,
            si = intervals[i][LI_STARTPOINT]
--  while j do
--      if intervals[j][LI_ENDPOINT]>=si then exit end if
    while j and intervals[j][LI_ENDPOINT]<si do

--?{j,intervals[j],"remove(ok)"}
--{} = wait_key()
        -- remove j from active
        next = remove_from_active(j)

        -- add register[j] to pool of free registers
--      free_reg(j)

        integer rj = intervals[j][LI_REG],
                var = intervals[j][LI_NAME],
                kv = find(var,vars)
?{kv,intervals[j]}
        lode[si][kv] = -2
--      registers[rj][R_PRV] = 0
        registers[rj][R_NEXT] = pool
--      if pool then    
--          registers[pool][R_PRV] = rj
--      end if
--?{"pool",pool,rj}
        pool = rj
--      active_len -= 1 (now done in remove_from_active)
--?{j,intervals[j]}
--      j = intervals[j][LI_NEXT_ACTIVE]
        j = next
    end while
end procedure

function get_free_reg()
    integer res = pool
--          next = registers[res][R_NEXT]
--          prev = registers[res][R_PREV]
    pool := registers[res][R_NEXT]
--  if prev then 
    registers[res][R_NEXT] = 0
--  registers[res][R_PREV] = 0
    return res
end function

procedure SpillAtInterval(integer i)
--  integer spill := last interval in active
    integer spill := ective,
            si = intervals[i][LI_STARTPOINT],
            var = intervals[i][LI_NAME],
            kv = find(var,vars)
--  if endpoint[spill] > endpoint[i] then
    if intervals[spill][LI_ENDPOINT] > intervals[i][LI_ENDPOINT] then
--              register[i] := register[spill]
        integer reg = intervals[spill][LI_REG]
        intervals[i][LI_REG] := reg
        lode[si][kv] = reg
--DEV
--              location[spill] := new stack location
--?"location?"
        intervals[spill][LI_LOCATION] := -1
        kv = find(intervals[spill][LI_NAME],vars)
        lode[si][kv] = -1
--              remove spill from active
        {} = remove_from_active(spill)
--              add i to active, sorted by increasing end point
        add_to_active(i)
    else
--DEV
--      location[i] := new stack location
--?"location2?"
        intervals[i][LI_LOCATION] := -1
    end if
end procedure


procedure LinearScanRegisterAllocation()--sequence intervals)
--procedure LinearScanRegisterAllocation(sequence ranges)
    active = 0      -- by start point
    ective = 0      -- by end point
    active_len = 0
    pool = 1
    -- for each live interval i, in order of increasing start point do
    for i=1 to length(intervals) do
        ExpireOldIntervals(i)
        if active_len=R then
            SpillAtInterval(i)
        else
--          register[i] := a register removed from pool of free registers
            integer reg = get_free_reg(),
                    si = intervals[i][LI_STARTPOINT],
                    kv = find(intervals[i][LI_NAME],vars)
            intervals[i][LI_REG] := reg
            lode[si][kv] = reg
--enum R_NAME, R_NXT, R_PRV
--sequence registers = {{"eax",2,0},{"ecx",3,1},{"edx",4,2},{"esi",5,3},{"edi",0,4}}
--integer pool = 1
--          add i to active, sorted by increasing end point
            add_to_active(i)
        end if
    end for
end procedure

LinearScanRegisterAllocation()
?"registers"
?registers
?{"pool",pool}
?"intervals"
pp(intervals,{pp_Nest,1})
?"code"
pp(code,{pp_Nest,1,pp_IntFmt,"%3d"})
?"lode"
pp(lode,{pp_Nest,1,pp_IntFmt,"%3d"})


?"done"
{} = wait_key()
abort(0)

LinearScanRegisterAllocation
    active := {}
    for each live interval i, in order of increasing start point do
--      ExpireOldIntervals(i)
--ExpireOldIntervals(i)
        for each interval j in active, in order of increasing end point do
            if endpoint[j] >= startpoint[i] then
                exit
            end if
            remove j from active
            add register[j] to pool of free registers
        end for
        if length(active) = R then
--          SpillAtInterval(i)
            spill := last interval in active
            if endpoint[spill] > endpoint[i] then
                register[i] := register[spill]
                location[spill] := new stack location
                remove spill from active
                add i to active, sorted by increasing end point
            else
                location[i] := new stack location
            end if
        else
            register[i] := a register removed from pool of free registers
            add i to active, sorted by increasing end point
        end if
    end for

type interval =
  { name: string;
    reg: regs;
    location: int;
    start_point: int;
    end_point: int;
  }

let make_interval(name, start, finish) =
  {
    name = name;
    reg = Spilled;
    location = -1;
    start_point = start;
    end_point = finish;
  }

let intervals = [|
  make_interval "a" 1 2;
  make_interval "b" 1 4;
  make_interval "c" 1 3;
  make_interval "d" 1 8;
  make_interval "e" 2 6;
  make_interval "f" 3 6;
  make_interval "g" 8 10;
|]

let () =
  let glob_pool = ref [EAX; EBX; ECX; EDX] in -- Our available registers, ideally this is passed in by the architecture stage
  let num_regs = List.length !glob_pool in
  let glob_active = ref [] in -- Again, I don't love mutable structures, so if anyone has suggestions to make this immutable, I would love to hear them
  let length = Array.length intervals in
  for i = 0 to length - 1 in
    let current = intervals.(i) in
    let (active, pool) = expire_old_intervals -- Not yet implemented
    let (active, pool) = match List.length active >= num_regs with -- Assign current interval, and modify active
      | true -> spill_interval -- not yet implemented
      | false -> -- Greedily assign a new register
        let new_reg, pool = get_reg pool in -- Can be a heuristic or a random choice of available registers
        let new_interval = {current with reg = new_reg} in
        let () = intervals.(i) <- new_interval in
          (new_interval, i)::active, pool -- We may need to undo what we've allocated, so we have to store the index to go back to
    in
    let () = glob_active := active in
    glob_pool := pool
  done;;
  Array.iter (fun interval -> printf "Interval %s with reg %s at location %d \n" interval.name (name interval.reg) interval.location) interval

let expire_old_intervals(active, current pool) =
  let still_active j = (fst j).end_point > current.start_point in -- Our active list is of the form interval * int
  let (new_active, regs_to_free) = List.partition (still_active) active in
  let rec add pool l = match l with
    | (head::tail) -> add (free_reg (fst head).reg pool) tail -- free_reg returns the pool with the register added, avoiding duplicates or spilled registers
    | [] ->  pool
  in
  new_active, add pool regs_to_free

let () =
  ...
  let (active, pool) = expire_old_intervals !glob_active current !glob_pool

Interval a with reg eax at location -1
Interval b with reg ebx at location -1
Interval c with reg ecx at location -1
Interval d with reg edx at location -1
Interval e with reg eax at location -1
Interval f with reg ecx at location -1
Interval g with reg ebx at location -1

let stack_location = ref 0

let spill_interval current =
  let current, i = current in
  let () = intervals.(i) <- {current with location = !stack_location}
  let () = stack_location := !stack_location + 4

let () =
  ...
  let () = spill_interval (current, i) in (active, pool)

let spill_interval active current =
  let current, i = current in
  let rev_sort = List.sort (fun a b -> -1 * (compare_endpoint (fst a) (fst b))) active in
  let spill, index = List.hd rev_sort in -- Latest endpoint in active
  let tail = List.tl rev_sort in
  let active = match spill.end_point >= current.end_point with -- Should we spill the old or current interval
    | true -> -- old
      let new_interval = {current with reg = spill.reg} in
      let () = intervals.(index) <- {spill with reg = Spilled; location = !stack_location} in -- Reassign old interval's value
      let () = intervals.(i) <- new_interval in -- assign new interval a register
        (new_interval, index)::tail -- remove old interval from active and add current
    | false -> -- current
      let () = intervals.(i) <- {current with location = !stack_location} in
        active
  in
  let () = stack_location := !stack_location + 4 in
  active

let () =
  ...
  let (active, pool) = ...
    (spill_interval active (current, i)), pool

let intervals = [|
  make_interval "a" 1 10;
  make_interval "b" 1 4;
  make_interval "c" 1 3;
  make_interval "d" 2 8;
  make_interval "e" 3 6;
  make_interval "f" 3 10;
  make_interval "g" 4 8;
|]
...
let glob_pool = ref [EAX; EBX; ECX]

Interval a with reg SPILLED at location 0
Interval b with reg ebx at location -1
Interval c with reg ecx at location -1
Interval d with reg eax at location -1
Interval e with reg ecx at location -1
Interval f with reg SPILLED at location 4
Interval g with reg ebx at location -1


Algorithm 1 Linear Scan Register Allocation
 1: procedure LSRA(Intervals) -- Intervals is sorted in order of increasing starting points
 2:   Active := {}
 3:   for LI in Intervals do -- traverse list of live intervals
 4:     EXPIREOLDINTERVALS(LI)
 5:     if |Active| = K then -- all registers are used, we have to spill
 6:       SPILLATINTERVAL(LI)
 7:     else -- still registers available, register can be assigned
 8:       LIregister := REGISTERPOOLGET()
 9:       Active := union(Active,LI)
10:     end if
11:   end for
12: end procedure
13: procedure EXPIREOLDINTERVALS(CurrentInterval)
14:   for LI in Active do -- traverse list of active intervals
15:     if LI.endpoint >= CurrentInterval.startpoint then
16:       return -- no old intervals anymore
17:     end if
18:     Active := Active \ LI -- expire old interval and release register
19:     REGISTERPOOLADD(LI.register)
20:   end for
21: end procedure
22: procedure SPILLATINTERVAL(Interval)
23:   Spill := Active.last -- spilling heuristic: widest distance of endpoint
24:   if Spill.endpoint > Interval.endpoint then -- interval Spill is spilled
25:     Interval.register := Spill.register
26:     Spill.location := NEWSTACKLOCATION()
27:     Active := union((Active \ Spill),Interval)
28:   else
29:     Interval.location := NEWSTACKLOCATION() -- passed interval is spilled
30:   end if
31: end procedure

-- IR code:
 1 A = ...
 2 B = ...
 3 C = ...
 4 ... = A
 5 ... = B
 6 D = ...
 7 E = ...
 8 ... = D
 9 ... = E
10 ... = C

A := [1, 4], B := [2, 5], C := [3, 10], D := [6, 8], E := [7, 9]

--> A, B allocated, C spilled, A, B expire, D, E allocated.

--DEV/docs:
-- since the whole code snippet is compiled at once before execution, it is in a strict sense not an interpreter, but rather a load-run compiler

int bit_count(long x)
{
  int n = 0;
  if (x) do
    n++;
  while (0 != (x = x&(x-1)));
  return(n);
}
Figure 3.2: A simple bit counting function in C

000000a0 <bit_count>:
... [ Prologue ]
b4: mov r0, #0
b8: str r0, [fp, #-4]
bc: ldr r0, [fp, #12]
c0: teq r0, #0
c4: beq f8 <bit_count+0x58>
c8: ldr r0, [fp, #-4]
cc: mov r1, r0
d0: add r0, r0, #1
d4: str r0, [fp, #-4]
d8: ldr r0, [fp, #12]
dc: sub r0, r0, #1
e0: ldr r1, [fp, #12]
e4: and r0, r1, r0
e8: str r0, [fp, #12]
ec: mov r1, #0
f0: cmp r1, r0
f4: bne c8 <bit_count+0x28>
f8: ldr r0, [fp, #-4]
... [ Epilogue ]
Figure 3.3: TCC-generated ARM object code for the function bit_count()

Listing 5.2 Function parsing / code generation procedure in our extended TCC
 1 static void gen_function(Sym *sym)
 2 {
 3   [ ... ]
 4   IR_Clear();                            // Phase 1: IR code generation
 5   IR_AddFuncParams(&sym->type);
 6   block(NULL, NULL, NULL, NULL, 0, 0);
 7   IR_LivenessAnalysis();                 // Phase 2: Liveness Analysis
 8   LS_RegisterAllocation();               // Phase 3: LSRA
 9   IR_RegisterAllocationParams();
10   IR_GenCode();                          // Phase 4: Code generation
11   [ ... ]
12 }

(add a vreg field (int) to symbol)

IR operation dest src1 src2 Code generation semantics
        Data-Processing Instructions
IR_ADD       X X X dest := src1 + src2
IR_SUB       X X X dest := src1 - src2
IR_RSUB      X X X dest := src2 - src1
IR_MUL       X X X dest := src1 * src2
IR_AND       X X X dest := src1 & src2
IR_OR        X X X dest := src1 | src2
IR_XOR       X X X dest := src1 ^ src2
IR_SHL       X X X dest := src1 << src2
IR_SHR       X X X dest := src1 >> src2
IR_SAR       X X X dest := src1 / (2 ^ src2)
IR_ASS       X X - dest := src1
        Conditional Instructions and Branches
IR_CMP      - X X compare(src1, src2)
IR_TSTZ     - X - test_for_zero(src1)
IR_SETIF    X X - dest := (CC == src1) ? 1 : 0
IR_BRANCHIF X X - if (CC == src1) jump to dest
IR_JMP      X - - jump to dest
        Function Call and Return Instructions
IR_RETVOID  - - - return without value
IR_RETVAL    - X - return with value src1
IR_PARAM    - X X set src2 as parameter
IR_CALLVOID - X - call function src1
IR_CALLVAL  X X - call function src1, store return value in dest
IR_PARMVOID - - - void parameter
        Special Instructions
IR_STORE    X X - mem[dest] := src1
Figure 5.1: Overview of IR operations

Figures 5.2 and 5.3 show an example of a small C code snippet and its corresponding IR listing.
Note that we have only virtual registers and immediate values as operands in this case, where
local variables are starting with VReg0 and compiler-generated temporaries start with VReg100.

void straight_example()
{
  int a, b, c;
  a = 200;
  b = (a*4) | b;
  a = (a+b)*(5+c+8*9);
  b += a;
  c += ((b*3-b)<<2) & 0xf0;
  -!-b;
}
Figure 5.2: Straight-line C code snippet

// a <= VR0, b <= VR1, c <= VR2
01: IR_ASS VR0, #200
02: IR_SHL VR100, VR0, #2
03: IR_OR VR1, VR100, VR1
04: IR_ADD VR102, VR0, VR1
05: IR_ADD VR103, VR2, #5
06: IR_ADD VR104, VR103, #72
07: IR_MUL VR0, VR102, VR104
08: IR_ADD VR1, VR1, VR0
09: IR_MUL VR107, VR1, #3
10: IR_SUB VR108, VR107, VR1
11: IR_SHL VR109, VR108, #2
12: IR_AND VR110, VR109, #240
13: IR_ADD VR2, VR2, VR110
14: IR_ADD VR1, VR1, #-1
Figure 5.3: The corresponding IR listing for function straight_example

int test(int a, int b);
int full_example(int n)
{
  int x=0, y=1;
  while (n-!-) {
  x += y;
  y += test(x+5, y-10);
}
return y;
}
Figure 5.4: C code snippet involving branches and function call

// n <= VR200, x <= VR0, y <= VR1
01: IR_ASS VR0, #0
02: IR_ASS VR1, #1
03: IR_ASS VR100, VR200
04: IR_ADD VR200, VR100, #-1
05: IR_TSTZ VR100
06: IR_BRANCHIF #15, [==]
07: IR_ADD VR0, VR0, VR1
08: IR_ADD VR103, VR0, #5
09: IR_PARAM -, #1, VR103
10: IR_SUB VR104, VR1, #10
11: IR_PARAM -, #2, VR104
12: IR_CALLVAL VR105, [test()]
13: IR_ADD VR1, VR1, VR105
14: IR_JMP #3
15: IR_RETVAL -, VR1
Figure 5.5: The corresponding IR listing for function full_example

Listing 6.1 Example of a code snippet where our simple live interval calculation fails
 1 void foo(...)
 2 {
 3   int var;
 4
 5   for (...) {
 6     if (...) {
 7       var = ...;
 8     } else {
 9       ... = var;
10     }
11   }
12 }

The first step of our algorithm yields the live interval [7, 9] (using source line numbers, in reality it would be
the corresponding numbers in the IR, of course). Since the later backwards jump isn't branching
into this interval, it is not extended, and the final determined live interval is still [7, 9]. This is
obviously wrong because the content of var can be still needed in a new interation of the loop.

Solution
We overcome the restriction by a special treatment for intervals that have their first definition
within an if/else-block within a loop in a third step. In this case the live interval is extended to
the most outer loop. For the example in Listing 6.1 the algorithm would yield the interval [5, 11].
The source code snippet for this solution is shown in Listing C.12.

ARM register usage
R0-R3 argument and return registers
R4-R10 registers used by LSRA for virtual register substitution
R11 frame pointer (fp)
R12 == spilling register 1 (ip)
R13 stack pointer (sp)
R14 == spilling register 2 (lr)
R15 program counter (pc)
(PL: R14 (lr) can only be used if saved)
(PL: R0-R3, R12, R14 must be saved by the calling code,
     R4-11, R13 must be saved/restored in every rtn,
     obvs eg Figure 9.2 only uses/does 4,5.)

typedef struct {
unsigned int vreg; /* virtual register */
unsigned int reg; /* assigned physical register */
unsigned int loc; /* spilling destination */
unsigned int start;
unsigned int end;
} LiveInterval;

#define MAX_LIVEINTERVALS 100000
LiveInterval LiveIntervals[MAX_LIVEINTERVALS];
int nIntervals;

LiveInterval* ActiveSet[K];
int nActive;

ActiveSet[nActive++] = &someliveinterval;
qsort(&ActiveSet[0], nActive, sizeof(ActiveSet[0]), licomp_endpoint);

typedef struct {
 int preg;
 int offset;
} VRegReplacement;
VRegReplacement RegMapping[MAX_VARS+MAX_TEMPS+MAX_PARAMS];
The array is defined in tccir.c and is filled out by the linear scan module for every live
interval with the following function:
void IR_ReplaceVReg(int vreg, int offset, int preg);
To code generator can simply access the concrete target location of a virtual register vreg
by accessing RegMapping[vreg].

Then the prolog looks like the following:
00000000 <prolog_demo>:
 0: e1a0c00d mov ip, sp ; step 1
 4: e92d0003 push {r0, r1} ; step 2
 8: e24dd010 sub sp, sp, #16 ;
 c: e92d5870 push {r4, r5, r6, fp, ip, lr} ; step 3
10: e1a0b00d mov fp, sp ; step 4
14: e24dd00c sub sp, sp, #12 ; step 5
......
Epilogue
The function epilog has the purpose of restoring all the callee-saved registers from the stack
and jumping back to the caller code (that is, the next instruction after the "branch-and-link"
instruction). Since the return address is also saved in a register, we can perform this with a
single block data load instruction:
.....
30: e89ba870 ldm fp, {r4, r5, r6, fp, sp, pc}
.....
(PL: note the above pushes lr (aka R14) and pops pc (aka R15))

Suppose we have the following general IR three-address code instruction
Dest → Src1 (op) Src2
and RSrc1, RSrc2 and RDest describe the physical register of the operands. If an operand RX
is not stored in a register, RX is set to NIL. Then the IR instruction is translated with the
following scheme:
* if RSrc1 = NIL, then
    generate code to evaluate Src1 into R12 (= spilling register 1)
    RSrc1 := 12
* if RSrc2 = NIL, then
    generate code to evaluate Src2 into R14 (= spilling register 2)
    RSrc2 := 14
* if RDest = NIL, then
    RDest := 14
* generate code for the data-processing instruction RDest := RSrc1 (op) RSrc2
* if RDest = 14, then
    generate code to store R14 into the memory location that is specified in Dest
This scheme is implemented with the following simplified code (see tccir.c:IR_GenCode()):

dest_reg = OperandInMemory(dest) ? LoadIntoReg(dest, 14) : RegMapping[dest->vreg].preg;
src1_reg = OperandInMemory(src1) ? LoadIntoReg(src1, 12) : RegMapping[src1->vreg].preg;
src2_reg = OperandInMemory(src2) ? LoadIntoReg(src2, 14) : RegMapping[src2->vreg].preg;
// generate ARM instruction with dest_reg, src1_reg and src2_reg
if (dest_reg == 14) StoreFromReg(dest, 14, 12);

Listing 8.1 correct code for the expression f(10, g(20))
......
44: e3a0000a mov r0, #10
48: e92d0001 push {r0}
4c: e3a00014 mov r0, #20
50: ebfffffe bl 0 <g>
54: e1a04000 mov r4, r0
58: e8bd0001 pop {r0}
5c: e1a01004 mov r1, r4
60: ebfffffe bl 20 <f>
......
(PL: compare the above with how Phix currently does it!)

Listing 9.1 Collatz Conjecture Check, C-Code
 1 int collatz(int an)
 2 {
 3   int iters = 1;
 4
 5   while (an != 1) {
 6     /* odd number, a[n] = a[n-1]*3 + 1 */
 7     if (an & 1) {
 8       an *= 3;
 9       an += 1;
10     }
11     else /* even number, a[n] = a[n-1]/2 */
12       an >>= 1;
13
14     iters++;
15   }
16
17   return iters;
18 }

00000000 <collatz>:
 0: mov ip, sp
 4: push {r0, r1}
 8: push {fp, ip, lr}
 c: mov fp, sp
10: sub sp, fp, #4
14: mov r0, #1
18: str r0, [fp, #-4]
1c: ldr r0, [fp, #12]
20: cmp r0, #1
24: beq 78 <collatz+0x78>
28: ldr r0, [fp, #12]
2c: and r0, r0, #1
30: teq r0, #0
34: beq 58 <collatz+0x58>
38: ldr r0, [fp, #12]
3c: mov r1, #3
40: mul r0, r1, r0
44: str r0, [fp, #12]
48: ldr r0, [fp, #12]
4c: add r0, r0, #1
50: str r0, [fp, #12]
54: b 64 <collatz+0x64>
58: ldr r0, [fp, #12]
5c: lsr r0, r0, #1
60: str r0, [fp, #12]
64: ldr r0, [fp, #-4]
68: mov r1, r0
6c: add r0, r0, #1
70: str r0, [fp, #-4]
74: b 1c <collatz+0x1c>
78: ldr r0, [fp, #-4]
7c: nop
80: ldm fp, {fp, sp, pc}
Figure 9.1: collatz(), tcc

00000000 <collatz>:
 0: push {r4, r5, lr}
 4: mov r4, #1
 8: cmp r0, #1
 c: beq 3c <collatz+0x3c>
10: and r5, r0, #1
14: teq r5, #0
18: beq 2c <collatz+0x2c>
1c: mov lr, #3
20: mul r0, lr, r0
24: add r0, r0, #1
28: b 30 <collatz+0x30>
2c: lsr r0, r0, #1
30: mov r5, r4
34: add r4, r5, #1
38: b 8 <collatz+0x8>
3c: mov r0, r4
40: pop {r4, r5, pc}
Figure 9.2: collatz(), tccls

00000000 <collatz>:
 0: mov r3, r0
 4: cmp r0, #1
 8: beq 30 <collatz+0x30>
 c: mov r0, #1
10: tst r3, #1
14: addne r3, r3, r3, lsl #1
18: addne r3, r3, #1
1c: lsreq r3, r3, #1
20: add r0, r0, #1
24: cmp r3, #1
28: bne 10 <collatz+0x10>
2c: mov pc, lr
30: mov r0, #1
34: mov pc, lr
Figure 9.4: collatz(), gcc -O1

Implementation Code Snippets
============================
C.1 IR Generation (tccgen.c / tccir.c)
======================================
Listing C.1 Assignment of virtual register to local variables
 1 ST_FUNC Sym *sym_push(int v, CType *type, int r, int c)
 2 {
 3   Sym *s;
 4   ...
 5   int vreg = -1;
 6
 7   if (((r & VT_VALMASK) == VT_LOCAL) && (r & VT_LVAL) &&
 8       ((type->t & VT_BTYPE) != VT_STRUCT))
 9     vreg = IR_GetVregVar();
10
11   ... /* after the other assignments to the "s" fields */
12   s->vreg = vreg;
13   ...
14 }

Listing C.2 IR code generation for binary operations
 1 static void ir_gen_opi(int op)
 2 {
 3   int irop;
 4
 5   switch (op) { /* map token operation code to IR operation code */
 6     case '+': irop = IR_OP_ADD; break;
 7     case '-': irop = IR_OP_SUB; break;
 8     ...
 9     case TOK_SAR: irop = IR_OP_SAR; break;
10
11     /* ... */
12   }
13
14   SValue dest;
15   memset(&dest, 0, sizeof(dest));
16   dest.vreg = IR_GetVregTemp();
17   dest.type.t = vtop[-1].type.t;
18   dest.r = 0;
19
20   IR_PutOp(irop, &vtop[-1], &vtop[0]);
21   vtop[-1].vreg = dest.vreg;
22   vtop[-1].r = 0;
23   vtop--;
24 }

Listing C.3 IR code generation for relational operators
 1 static void ir_gen_opi(int op)
 2 {
 3   int irop;
 4   ...
 5
 6   switch (op) { /* map token operation code to IR operation code */
 7     ...
 8     case TOK_EQ: case TOK_NE:
 9     case TOK_LT: case TOK_GT: case TOK_LE: case TOK_GE:
10     case TOK_ULT: case TOK_UGT: case TOK_ULE: case TOK_UGE:
11       IR_PutOp(IR_OP_CMP, &vtop[-1], &vtop[0], NULL);
12       vtop--;
13       vtop->r = VT_CMP;
14       vtop->c.i = op;
15       return;
16
17     /* ... */
18   }
19   ...
20 }

Listing C.4 IR code generation for division and modulo operators
 1 static void ir_gen_opi(int op)
 2 {
 3   int irop;
 4   ...
 5
 6   switch (op) { /* map token operation code to IR operation code */
 7     ...
 8     /* ARM platform specific: substitute / and % ops with function calls */
 9     case '/':
10     case TOK_PDIV:
11     case TOK_UDIV:
12     case '%':
13     case TOK_UMOD:
14       memset(&num, 0, sizeof(num));
15       num.vreg = -1;
16       num.c.i = 1;
17       IR_PutOp(IR_OP_FUNCPARAM, &vtop[-1], &num, NULL);
18       num.c.i = 2;
19       IR_PutOp(IR_OP_FUNCPARAM, &vtop[0], &num, NULL);
20       if ((op == '/') || (op == TOK_PDIV))
21         func = TOK___divsi3;
22       else if (op == TOK_UDIV)
23         func = TOK___udivsi3;
24       else if (op == '%')
25         func = TOK___aeabi_idivmod;
26       else if (op == TOK_UMOD)
27         func = TOK___aeabi_uidivmod;
         end if
28       vpush_global_sym(&func_old_type, func);
29
30       SValue dest;
31       memset(&dest, 0, sizeof(dest));
32       dest.vreg = IR_GetVregTemp();
33       dest.type.t = vtop[-2].type.t;
34       dest.r = 0;
35       IR_PutOp(IR_OP_FUNCCALLVAL, &vtop[0], NULL, &dest);
36       vtop-!-; vtop-!-; vtop-!-;
37       vpushi(0);
38       vtop->r = 0;
39       vtop[0].vreg = dest.vreg;
40       return;
41
42     /* ... */
43   }
44   ...
45 }

Listing C.5 IR code generation for first four parameters in function calls
 1 ST_FUNC void unary(void)
 2 {
 3   ...
 4   /* post operations */
 5   while (1) {
 6     if (tok == TOK_INC || tok == TOK_DEC) {
 7       ....
 8     } else ... {
 9       ...
10     } else if (tok == '(') {
11       ...
12       if (tok != ')') {
13         SValue num;
14         memset(&num, 0, sizeof(num));
15         num.vreg = -1;
16         for(;;) {
17           expr_eq();
18           gfunc_param_typed(s, sa);
19           if (nb_args < 4) {
20             IR_PutOp(IR_OP_FUNCPARAM, &vtop[0], &num, NULL);
21             vtop-!-;
22           }
23           nb_args++;
24           if (sa)
25             sa = sa->next;
26           if (tok == ')')
27             break;
28           skip(',');
29         }
30       }
31       if (sa)
32         tcc_error("too few arguments to function");
33       skip(')');
34       if (!nocode_wanted) {
35       }
36     } else ...
37   }
38 }

Listing C.6 IR code generation for parameters 5+ and function calls
 1 ST_FUNC void unary(void)
 2 {
 3   ...
 4   /* post operations */
 5   while (1) {
 6     if (tok == TOK_INC || tok == TOK_DEC) {
 7       ....
 8     } else ... {
 9       ...
10     } else if (tok == '(') {
11       int ret_vreg = -1;
12       ...
13       if (!nocode_wanted) {
14         int j;
15         SValue num;
16         memset(&num, 0, sizeof(num));
17         num.vreg = -1;
18         if (nb_args > 4) {
19           for (j=0; j<nb_args-4; j++) {
20             num.c.i = nb_args-j;
21             IR_PutOp(IR_OP_FUNCPARAM, &vtop[0], &num, NULL);
22             vtop-!-;
23           }
24         }
25         if (vtop[0].type.t == VT_VOID) {
26           IR_PutOp(IR_OP_FUNCCALLVOID, &vtop[0], NULL, NULL);
27         } else {
28           SValue dest;
29           memset(&dest, 0, sizeof(dest));
30
31           dest.type.t = VT_INT;
32           dest.vreg = ret_vreg = IR_GetVregTemp();
33           IR_PutOp(IR_OP_FUNCCALLVAL, &vtop[0], NULL, &dest);
34         }
35         vtop-!-;
36       } else {
37         vtop -= (nb_args + 1);
38       }
39       /* return value */
40       vsetc(&ret.type, ret.r, &ret.c);
41       vtop->vreg = ret_vreg;
42     --}
43     } else ...
44   }
45 }

Listing C.7 Backpatching IR adaption example for the while statement
(original code is in comments, replacement code is indented)
 1 static void block(int *bsym, int *csym, int *case_sym, int *def_sym,
 2                   int case_reg, int is_expr)
 3 {
 4   int a, b, c, d;
 5   ...
 6   if (tok == TOK_WHILE) {
 7     next();
 8     // d = ind; /* original */
 9     d = IR_GetPC();
10     skip('(');
11     gexpr();
12     skip(')');
13     // a = gtst(1, 0); /* original */
14     a = ir_gtst(1, 0);
15     b = 0;
16     block(&a, &b, case_sym, def_sym, case_reg, 0);
17     // gjmp_addr(d); /* original */
18     SValue dest;
19     memset(&dest, 0, sizeof(dest));
20     dest.vreg = -1;
21     dest.c.i = d;
22     d = IR_PutOp(IR_OP_JMP, NULL, NULL, &dest);
23     // gsym(a); /* original */
24     IR_BackpatchToHere(a);
25     // gsym_addr(b, d); /* original */
26     IR_Backpatch(b, d);
27   } else if (...)
28   ...
29 }

Listing C.8 Backpatching functions for IR listing
 1 void IR_Backpatch(int t, int target_addr) /* replacement for gsym_addr() */
 2 {
 3   SValue *cur;
 4   while (t) {
 5     cur = &(IR[t].dest);
 6     t = cur->c.i; /* select next element in linked list */
 7     cur->c.i = target_addr; /* patch entry */
 8   }
 9 }
10
11 void IR_BackpatchToHere(int t) /* replacement for gsym() */
12 {
13   IR_Backpatch(t, irpc);
14 }

Listing C.9 Redundant move optimization
 1 int IR_PutOp(int op, SValue *src1, SValue *src2, SValue *dest)
 2 {
 3   ...
 4   /* optimization: eliminate redundant moves */
 5   if ((op == IR_OP_ASS) && (IR_GetVregType(src1->vreg) == VREG_TEMPORARY) &&
 6       (src1->vreg == IR[irpc-1].dest.vreg) &&
-- 7       (src1->r & VT_LVAL) == 0) && (IR[irpc-1].op != IR_OP_FUNCCALLVAL))
 7       (src1->r & VT_LVAL == 0) && (IR[irpc-1].op != IR_OP_FUNCCALLVAL))
 8     IR[irpc-1].dest = IR[irpc].dest;
 9   ....
10 }

C.2 Liveness Analysis (tccir.c)
===============================
Listing C.10 Determination of basic liveness intervals during IR code generation
 1 typedef struct {
 2   int start;
 3   int end;
 4 } VRegInterval;
 5
 6 /* the basic interval for vreg X can be accessed with BaseIntervals[X] */
 7 VRegInterval BaseIntervals[MAX_VARS+MAX_TEMPS+MAX_PARAMS];
 8
 9 int irpc;
10
11 int IR_PutOp(int op, SValue *src1, SValue *src2, SValue *dest)
12 {
13   ...
14   /* destination operand */
15   if (OP_USES_DEST(op)) {
16     ...
17     /* set basic interval start (first usage) */
18     if (VREG_VALID(dest->vreg) && BaseIntervals[dest->vreg].start == 0)
19       BaseIntervals[dest->vreg].start = irpc;
20   }
21   ...
22   /* first source operand */
23   if (OP_USES_SRC1(op)) {
24     ...
25     /* extend basic interval end (last usage) */
26     if (VREG_VALID(src1->vreg))
27       BaseIntervals[src1->vreg].end = irpc;
28   }
29   ...
30   /* second source operand */
31   if (OP_USES_SRC2(op)) {
32     ...
33     /* extend basic interval end (last usage) */
34     if (VREG_VALID(src2->vreg))
35       BaseIntervals[src2->vreg].end = irpc;
36   }
37   ...
38 }

Listing C.11 Implementation of the simple liveness analysis, sets interval for given vreg
 1 static int FindLiveInterval(int vreg, unsigned int *start,
 2 unsigned int *end, int check_for_backwards_jumps)
 3 {
 4   int i, retval=0;
 5   Quadruple* quad;
 6
 7   /* lookup basic intervals calculated during IR code generation */
 8   *start = BaseIntervals[vreg].start;
 9   *end = BaseIntervals[vreg].end;
10   if (*start > 0 && *end > 0)
11     retval = 1;
12
13   if (!check_for_backwards_jumps)
14     return retval;
15
16   /* extend interval end if there is a later backwards jump
17      into the the base liveness interval */
18   i = *end;
19   quad = &IR[i];
20   for (;i<irpc;i++) {
21     if ((quad->op == IR_OP_JMP || quad->op == IR_OP_BRANCHIF) &&
22         (quad->dest.c.i <= *end) && (quad->dest.c.i > *start)) {
23       *end = i;
24     }
25     quad++;
26   }
27   ...
28   return retval;
29 }

Listing C.12 Solution for overcoming the simple liveness analysis restriction
 1 static int FindLiveInterval(int vreg, unsigned int *start,
 2                             unsigned int *end, int check_for_backwards_jumps)
 3 {
 4   ...
 5   /* special treatment for first definitions within conditional:
 6      extend interval to outermost loop */
 7   if (BaseIntervals[vreg].start_within_if) {
 8     quad = &IR[irpc-1];
 9     for (i=irpc-1; i>*start; i-!-) {
10       if ((quad->op == IR_OP_JMP || quad->op == IR_OP_BRANCHIF) &&
11           (quad->dest.c.i < *start)) {
12         *start = quad->dest.c.i;
13         if (i > *end) *end = i;
14         break;
15       }
16       quad-!-;
17     }
18     for (i=*start; i<*end; i++) {
19       quad = &IR[i];
20       if ((quad->op == IR_OP_JMP || quad->op == IR_OP_BRANCHIF) &&
21           (quad->dest.c.i < *start)) {
22         *start = quad->dest.c.i;
23         break;
24       }
25     }
26   }
27   ...
28 }

C.3 Linear Scan Register Allocation (tccls.c)
=============================================
Listing C.13 Register pool functions
 1 int register_pool[K];
 2
 3 int RegisterPool_Get()
 4 {
 5   int i;
 6   for (i=0; i<K; i++) {
 7     if (register_pool[i]) {
 8       register_pool = 0; /* remove register from pool */
 9       return i;
10     }
11   }
12   tcc_error("no register available for allocator, should never happen!");
13 }
14
15 void RegisterPool_Add(int reg)
16 {
17   register_pool[reg] = 1;
18 }

Listing C.14 Expiring intervals that are not relevant any more (part of the LSRA algorithm)
 1 static void ExpireOldIntervals(int i)
 2 {
 3   int j, removed_intervals=0;
 4   static LiveInterval dirty = {0, 0, 0, 0, ~0};
 5
 6   /* "foreach interval j in active, in order of increasing end point" */
 7   for (j=0; j<nActive; j++) {
 8     if (ActiveSet[j]->end >= LiveIntervals[i].start)
 9       break;
10     RegisterPool_Add(ActiveSet[j]->reg);
11     ActiveSet[j] = &dirty; /* mark as dirty for deletion through sort */
12     removed_intervals++;
13   }
14
15   /* remove entries from active set */
16   qsort(&ActiveSet[0], nActive, sizeof(ActiveSet[0]), licomp_endpoint);
17   nActive -= removed_intervals;
18 }

Listing C.15 Spilling a certain interval (part of the LSRA algorithm)
 1 static void SpillAtInterval(int i)
 2 {
 3   LiveInterval* Spill = ActiveSet[nActive-1]; /* "last interval in active" */
 4   if (Spill->end > LiveIntervals[i].end) {
 5     LiveIntervals[i].reg = Spill->reg;
 6     Spill->loc = NewStackLocation();
 7
 8     ActiveSet[nActive-1] = &LiveIntervals[i];
 9     /* sort by increasing end point */
10     qsort(&ActiveSet[0], nActive, sizeof(ActiveSet[0]), licomp_endpoint);
11   } else {
12     LiveIntervals[i].loc = NewStackLocation();
13   }
14 }

Listing C.16 The core function of the LSRA algorithm
 1 void LS_RegisterAllocation()
 2 {
 3   int i;
 4   for (i=0; i<R; i++)
 5     register_pool[i] = 1; /* initially, all registers are free */
 6
 7   nActive = 0; /* empty active set */
 8
 9   /* sort live intervals in order of increasing starting point */
10   qsort(&LiveIntervals[0], nIntervals,
11   sizeof(LiveIntervals[0]), licomp_startpoint);
12
13   /* "foreach live interval, in order of increasing start point" */
14   for (i=0; i<nIntervals; i++) {
15     ExpireOldIntervals(i);
16     if (nActive == R) {
17       SpillAtInterval(i);
18     } else {
19       LiveIntervals[i].reg = RegisterPool_Get();
20       ActiveSet[nActive++] = &LiveIntervals[i];
21       /* sort by increasing end point */
22       qsort(&ActiveSet[0], nActive,
23             sizeof(ActiveSet[0]), licomp_endpoint);
24     }
25   }
26
27   ...
28 }

C.4 Code Generation (tccir.c)
=============================
Listing C.17 Generation of Prologue and Epilogue code
 1 static void GenProlog() {
 2   int save_reg_list; /* criterion for optimizing fp and sp away */
 3   int ignore_fp_sp = (leaffunc && num_params <= 4 && loc == 0);
 4   save_reg_list = ((1 << regs_used)-1) << 4; /* save regs r4-r10 if needed */
 5   save_reg_list |= 0x5800; /* save r11=fp, r12=ip (sp), r14=lr (ret. addr.) */
 6   if (ignore_fp_sp) {
 7     save_reg_list &= ~((1 << 11) | (1 << 12));
 8   } else
 9     o(0xE1A0C00D); /* mov ip, sp */
10   if (num_params > 0 && (!leaffunc || num_params > 4)) {
11     o(0xE92D0000 | param_reg_list); /* push arguments */
12     o(0xE24DD000 | ((7-regs_used)*4)); /* adapt stack pointer */
13   }
14   o(0xE92D0000 | save_reg_list); /* context save */
15   if (!ignore_fp_sp)
16     o(0xE1A0B00D); /* mov fp, sp */
17   if (loc) {
18     int diff = (-loc + 3) & -4; /* align to multiple of 4 */
19     if (diff > 255) {
20       GenConstIntoReg(12, diff);
21       o(0xE04DD00C); /* substract with ip */
22     } else
23       o(0xE24DD000 | diff); /* stack adjustment; */
24   }
25 }
26
27 static void GenEpilog() {
28   int restore_reg_list; /* criterion for optimizing fp and sp away */
29   int ignore_fp_sp = (leaffunc && num_params <= 4 && loc == 0);
30   restore_reg_list = ((1 << regs_used)-1) << 4; /* rest. regs r4-r10 if needed */
31   restore_reg_list |= 0xA800; /* restore r11=fp, r13=sp, r15=pc */
32   if (ignore_fp_sp) {
33     restore_reg_list &= ~((1 << 11) | (1 << 13));
34   }
35
36   if (!ignore_fp_sp)
37     o(0xE89B0000 | restore_reg_list); /* context restore */
38   else
39     o(0xE8BD0000 | restore_reg_list); /* if fp and sp ignored, directly pop! */
40 }

Listing C.18 Generation of Data-Processing Instructions
 1 static void GenDataProcessingOp(int op, int dest_reg, int src1_reg,
 2                                 int src2_reg, int second_const, int cval)
 3 {
 4   static const int DataProcessingOpMap[] =
 5     /* add, sub, and, or, xor, [shl, shr, sar], mov, rsb, cmp, teq */
 6     { 4, 2, 0, 12, 1, 13,13,13,13, 3, 10, 9 };
 7   uint32_t opc = 0xE0000000; /* unconditional execution */
 8   int dpopc = DataProcessingOpMap[op]; /* data-processing opcode */
 9
10   if ((op == IR_OP_CMP) || (op == IR_OP_TSTZ))
11     opc |= (1<<20); /* set condition codes */
12   if (op == IR_OP_ASS) { /* source operand for mov must be in op2 field */
13     src2_reg = src1_reg;
14     src1_reg = 0;
15   }
16
17   opc |= (dpopc << 21); /* set data-processing opcode [I=0, S=0] */
18   opc |= (dest_reg << 12); /* set destination register */
19
20   if (op == IR_OP_SHL || op == IR_OP_SHR || op == IR_OP_SAR) { /* shifts */
21     opc |= src1_reg; /* set source register */
22     if (op == IR_OP_SHR) opc |= 1<<5;
23     if (op == IR_OP_SAR) opc |= 1<<6;
24     if (!second_const)
25       opc |= 1<<4 | (src2_reg << 8);
26     else
27       opc |= (cval & 0x1f) << 7;
28   } else {
29     opc |= (src1_reg << 16); /* set first source register (0 for mov) */
30     if (!second_const)
31       opc |= src2_reg; /* set second source register */
32     else {
33       if (cval < 0) { /* negative constants */
34         if (op == IR_OP_ADD || op == IR_OP_SUB) {
35           opc ^= 0x00C00000; cval = -cval;
36         } else if (op == IR_OP_ASS) {
37           opc ^= 0x00400000; cval = ~cval;
38         }
39       }
40       if (cval > 255 || cval < 0) {
41         GenConstIntoReg(14, cval);
42         opc |= 14;
43       } else {
44         opc |= 1<<25; /* set I bit */
45         opc |= cval & 0xff;
46       }
47     }
48   }
49   o(opc);
50 }

Listing C.19 Branch instruction patching
 1 ...
 2 #define MAX_QUADRUPLES 10000
 3 ...
 4 uint32_t IR_addrs[MAX_QUADRUPLES];
 5 ...
 6 void IR_GenCode()
 7 {
 8   /* first pass: generate code */
 9   for (i=0; i<irpc; i++) {
10     IR_addrs[i] = ind;
11     ...
12   }
13
14   ...
15   /* second pass: patch branch instructions */
16   for (i=0; i<irpc; i++) {
17     op = IR[i].op;
18     dest = &(IR[i].dest);
19     if ((op == IR_OP_BRANCHIF) || (op == IR_OP_JMP)) {
20       int instr_addr = IR_addrs[i];
21       int target_addr = IR_addrs[dest->c.i];
22       int offset = (target_addr-instr_addr-8)/4;
23       uint32_t *instr = &(cur_text_section->data[instr_addr]);
24       if ((offset >= 0x1000000) || (offset < -0x1000000))
25         tcc_error("branch offset too large (>=16MB)");
26       offset &= 0x00ffffff;
27       *instr |= offset;
28     }
29   }
30 }

Listing C.20 Function calls, parameter handling
 1 ...
 2 static int call_level; /* -1=not in any function call phase */
 3 int num_params_per_level[50];
 4 ...
 5
 6 static void FuncCallParam(int param_num, int src_reg, int isconst, int cval)
 7 {
 8   /* parameters 5+ are supplied on the stack */
 9   if (param_num > 4) {
10     if (isconst) {
11       GenConstIntoReg(src_reg=14, cval);
12     }
13     o(0xE52D0004|(src_reg<<12)); /* str r,[sp,#-4]! */
14     return;
15   }
16
17   /* new function call phase starts */
18   if (param_num == 1) {
19     call_level++;
20     /* for nested function calls, save arg regs (r0-r3) in-between */
21     if (call_level >= 1) {
22       int args_to_save = num_params_per_level[call_level-1];
23       if (args_to_save > 4)
24         args_to_save = 4;
25       o(0xE92D0000 | ((1<<args_to_save)-1)); /*P=1, U=0, W=1, L=0*/
26     }
27   /* special case: void function calls with return value, save r0 */
28   } else if (param_num == 0) {
29     call_level++;
30     if (call_level >= 1)
31       o(0xE92D0001);
32     num_params_per_level[call_level] = 1;
33     return;
34   }
35
36   GenDataProcessingOp(IR_OP_ASS, param_num-1, src_reg, -1, isconst, cval);
37   num_params_per_level[call_level] = param_num;
38 }
39
40 static void FuncCallAfter()
41 {
42   /* restore arg regs (r0-r3) if call was nested */
43   if (call_level >= 1) {
44     int args_to_restore = num_params_per_level[call_level-1];
45     o(0xE8BD0000 | ((1<<args_to_restore)-1)); /*P=0, U=1, W=1, L=1*/
46   }
47
48   call_level--;
49 }

Just to show what is theoretically possible (that's quite some speedup!): (p2js already achieves 0.2s from the hll code, gulp) [FIXED ALREADY]
without javascript_semantics
function identity(integer x)
    return x
end function
 
function total(integer num)
--/* 6.8s: [FIXED, now 0.2s, but still some possibilities]
    for i=1 to 100_000_000 do
        num += odd(i)
--some possible peephole optimisations here, he main thing we //need// to know is which/whether any instructions are jump targets:
--  ;   1523        num += odd(i)
--      mov ecx,[ebp-4] (i)                   ;#0043C37D: 213115 FC                  vu 02 20  1   4      
--      and ecx,1                             ;#0043C380: 203341 01                  uv 02 02  1   5      
--  <X  mov [ebp-8] (symtab[1550]),ecx        ;#0043C383: 211115 F8                  uv 00 22  1   6 02   
--  ^   mov eax,[ebp] (num)                   ;#0043C386: 213105 00                  vu 01 20  1   6      
--      add eax,ecx                           ;#0043C389: 001310                     uv 01 03  1   7      
--  <   mov edx,eax                           ;#0043C38B: 213320                     uv 04 01  1   8 01   
--      mov [ebp] (num),eax                   ;#0043C38D: 211105 00                  vu 00 21  1   8      
--  <   shl edx,1                             ;#0043C390: 321342                     u  04 04  1   9      
--  >   shl eax,1                             ;#0043C390: 321342                     u  04 04  1   9      
--      jno #0043C39B                         ;#0043C392: 161 07                     v  00 00  1   9      
--      mov edi,ebp                           ;#0043C394: 213375                     uv 80 20  1  10      
--      call #00459DD9 (:%e01tcfAddiii)       ;#0043C396: 350 3EDA0100               v  00 00  1  10      

    end for
--*/
--/!* 0.3s: (ah, seems it is really all down to the call/return mechanism...)
    for i=1 to 100_000_000 do
        num += and_bits(i,1)
    end for
--*!/
--/* 0.2s:
    for i=1 to 100_000_000 do
        #ilASM{ mov ecx,[i]
                mov eax,[num]
                and ecx,1
                add eax,ecx
                mov [num],eax
              }
    end for
--*/
--/* 0.1s: (proves that for loops are already fast enough)
    #ilASM{ mov ecx,1
            mov eax,[num]
            xor edx,edx
          @@:
            mov dl,cl
            add ecx,1
            and dl,1
            add eax,edx
            cmp ecx,100000000
            jle @b
            mov [num],eax
          } 
--*/
    return num
end function

procedure time_it(integer fn)
    atom t0 = time()
    integer res = fn(4)
    string funcname = get_routine_info(fn)[4]
    printf(1,"%s(4) = %d, taking %s\n",{funcname,res,elapsed(time()-t0)})
end procedure

time_it(identity)
time_it(total)

--/*
Integer Mod Optimization
========================
On most architectures, integer divide is a relatively expensive instruction. Power-of-two integer modulus expressions 
can be replaced with conditional and shift instructions to avoid the divide and multiply and increase run-time performance.

Example:
In the function below, the power-of-two integer modulus expression (x % 8) can be replaced with faster instructions.

int f (int x)
{
  return x % 8;
}
The code fragment below shows the function after the modulus expression has been optimized.

int f (int x)
{
  int temp = x & 7;
  return (x < 0) ? ((temp == 0) ? 0 : (temp | ~7)) : temp;
}
© 1990-2012 Nullstone Corporation. All Rights Reserved.

Tail Recursion
==============
A tail-recursive call can be replaced with a goto, which avoids the overhead of the call and return and can also reduce stack space usage.

Example:
In the code fragment below, the tail-recursive call to f() can be replaced with a goto.

int f (int i)
{
  if (i > 0)
    {
      g (i);
      return f (i - 1);
    }
  else
    return 0;
}
Below is the code fragment after tail recursion.

int f (int i)
{

 entry:

  if (i > 0)
    {
      g (i);
      i--;
      goto entry;
    }
  else
    return 0;
}
Notes:
Tail recursion can significantly improve the performance of small recursive benchmarks such as Hanoi.

Although more difficult than simple tail recursion, it is also possible to optimize a() calls b() calls a() tail recursion.

© 1990-2012 Nullstone Corporation. All Rights Reserved.

hmmm:
int i;
double val = 2.5, res[10];
double operation (double value, int i){ 
    double res;
    res = value*i + i;
    return res;
}
for(int i = 0; i < 10; i += 1){
    res[i] = operation(val, i);
    val = res[i];
    print(res[i]);
    print('\n');
}
to:
int i;
double val = 2.5, res[10];
for(int i = 0; i < 10; i += 1){
    val = val*i + i;
    res[i] = val;
    print(val);
    print('\n');
}

https://steemit.com/utopian-io/@drifter1/writing-a-simple-compiler-on-my-own-implementing-register-allocation-part-1
    introduces Variable Array, Adjacency Graph, Adjacency List, g_index/reg_name on the symbol table(??) & AST nodes


Common subexpression elimination/loop invariant hoisting
========================================================
I simply don't believe in this. Even advanced implementations only support a few simple operations, and everything
has to be done in small steps, for instance to hoist a common subexpression a+b*c out of a loop it first has to
recognise b*c as loop invariant and hoist/substitute that (tmp:=b*c), then repeat the whole process with a+tmp,
and of course you cannot do mul then add or vice versa but must check all supported operators on each iteration.
Why should a compiler encourage the programmer to write sloppy (and longer) code only to slow them down on every
edit/run cycle, and quite probably fail to recognise things the programmer assumes it will find? For instance,
why would anyone delierately choose to write this (although, I know, they often do), or encourage it:

insertEdge(temp_rel[g_index], getGraphIndex(temp_rel[left]));
insertEdge(temp_rel[g_index], getGraphIndex(temp_rel[right]));
insertEdge(getGraphIndex(temp_rel[left]), getGraphIndex(temp_rel[right]));
(196 characters)

instead of 

integer t = temp_rel[g_index],
        l = getGraphIndex(temp_rel[left]),
        r = getGraphIndex(temp_rel[right]);
insertEdge(t, l);
insertEdge(t, r);   
insertEdge(l, r);
(150 characters [plus 4 tabs])

Incidentally, very few compilers have the smarts/confidence to recognise/hoist any subscript expressions, or
for that matter any form of pointer dereferencing or field access. Personally I find the second form is much 
easier to read (especially with more descriptive names that t/r/l), and always easier to debug, since I can
actually see what t/l/r are in the ex.err file, instead of having to find temp_rel and mentally perform the
subscripts as well as (again, mentally perform) the two function calls - speaking of which, no compiler can
ever hoist/common-up a function call if it has *any* potential side effects, such as throwing an error.

Brazillian Numbers
==================

function same_digits(integer n, b)
    integer f = remainder(n,b)
    n = floor(n/b)
    while n>0 do
        if remainder(n,b)!=f then return false end if
        n = floor(n/b)
    end while
    return true
end function
 
function is_brazilian(integer n)
    if n>=7 then
        if remainder(n,2)=0 then return true end if
        for b=2 to n-2 do
            if same_digits(n,b) then return true end if
        end for
    end if
    return false
end function
 
integer n = 7, c = 0
atom t0 = time(), t1 = time()+1
while c<100000 do
    if time()>t1 then
        printf(1,"checking %d [count:%d]...\r",{n,c})
        t1 = time()+1
    end if
    c += is_brazilian(n)
    n += 1
end while
printf(1,"The %,dth Brazilian number: %d\n", {c,n-1})
?elapsed(time()-t0)

--*/

--/*
Benchmarks from RC:
(The idea here being to craft super-fast #ilASM{} versions, and get reg alloc/Phix v2 as near to that speed as possible...)
(obviously when I say #ilASM{} what I mean is grabbing a selected chunk from the list.asm and tweaking that.)
(mpfr might be good for improving cffi handling, whereas xx_primes_xx are probably only good for final tests/progress.)
(of course c_func() etc was all written before eg #ilASM{ call "kernel32.dll","GetProcAddress" } was valid, iygwim/swiagwt.)
https://rosettacode.org/wiki/Largest_difference_between_adjacent_primes#Phix    -- 12.7s, mostly get_primes_le()
https://rosettacode.org/wiki/Find_largest_left_truncatable_prime_in_a_given_base#Phix -- 38s odd, 54mins odd+even (no real rivals, bar F# @ 5hrs!)
https://rosettacode.org/wiki/Superpermutation_minimisation#Phix (to 11 is ~10s vs Julia 0.4s): 
--constant nMax = 12,
constant nMax = 11,
         validate_to = 7    -- (we need to kill [excessive] validaton, temporarily that is, I think)
 
string superperm
sequence count
integer pos
 
function factSum(int n)
    integer s = 0, f = 1
    for i=1 to n do
        f *= i
        s += f
    end for
    return s
end function
 
function r(int n)
    if (n == 0) then return false end if
    integer c = superperm[pos-n+1]
    count[n] -= 1
    if count[n]=0 then
        count[n] = n
        if not r(n-1) then return false end if
    end if
    pos += 1
    superperm[pos] = c
    return true
end function
 
procedure superPerm(int n)
    string chars = "123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[1..n]
    pos = n
    superperm = chars&repeat(' ',factSum(n)-n)
    count = tagset(n)
    while r(n) do end while
    if n=0 then
        if superperm!="" then ?9/0 end if
    elsif n<=validate_to then
        -- (I estimate it would take at least 5 days to validate 
        --  superPerm(12), feel free to try it on your own time)
        for i=1 to factorial(n) do
            if not match(permute(i,chars),superperm) then ?9/0 end if
        end for
    end if
end procedure 
 
puts(1,"") -- (exclude alloc_console time when using pw.exe)
atom t0 = time()
for n=0 to nMax do
    superPerm(n)
    integer l = length(superperm)
    if l>40 then superperm[20..-20] = "..." end if
--  superperm = shorten(superperm,"")
    string e = elapsed(time()-t0)
    printf(1,"superPerm(%2d) len = %d  %s (%s)\n", {n, l, superperm, e})
end for

https://rosettacode.org/wiki/List_rooted_trees#Phix -- 20s, no rivals
https://rosettacode.org/wiki/Sequence_of_primorial_primes#Phix -- (mainly mpfr) 49s, Julia 9s, Go 11s on tio.
https://rosettacode.org/wiki/Long_primes#Phix -- slow (59s), fast (0.7s, then 2min vs Pascals 6s)
https://rosettacode.org/wiki/First_perfect_square_in_base_n_with_n_unique_digits#Phix -- one identified as a good target, has #ilASM bash...
                                                                                      -- (even then, 7min 20s vs Pascal 12.3s!)
https://rosettacode.org/wiki/Humble_numbers#Phix -- the original "humbled": 18mins 
https://rosettacode.org/wiki/Fraction_reduction#Phix -- 10mins 13s vs Go (trans Phix!) 42s
https://rosettacode.org/wiki/Rare_numbers#Phix -- 10mins 42s vs Go 53s
https://rosettacode.org/wiki/Super-d_numbers#Phix -- killed at 8 after 3mins 47s, vs Go 11s (then 135s for 9), Julia 38s (then 380s for 9).
https://rosettacode.org/wiki/Self_numbers%5CPhix (previous bad attempt, 11s vs 2s for Go)
https://rosettacode.org/wiki/Ulam_numbers#Phix -- 1min 40s vs Go 13.5s                          (*** subscripts, I think ***)
https://rosettacode.org/wiki/Untouchable_numbers#Phix -- erm, 33mins 55s vs a reported 6.2s for Go...
https://rosettacode.org/wiki/Strange_unique_prime_triplets#Phix -- 11s ve 0.5 for Julia, C# (ha) 1.8s
https://rosettacode.org/wiki/Primes_whose_sum_of_digits_is_25#Phix -- (mpfr) 1 min 27s, C++ 10.6s, Go 25s, Julia 29s, Nim 12s, Pascal 9.9s
https://rosettacode.org/wiki/Steady_Squares#No_Search_Required_using_strings -- f56 &= '0'  -- 99999: 0.8s vs 7mins for the inner loop, F# is 57s   [[***]]
                                                                                            --        down to 12.2s with a little #ilASM!!!
https://rosettacode.org/wiki/Brazilian_numbers#Phix - 58s on desktop/Phix, 11s under p2js, Go(v1) about 16s, Go(v2) about 0.041s
demo\rosetta\knapsack0.exw -- w/o js and not using terminate, the [needed anyway!] deep_copy() takes 5.39s vs 0.91s without it.
                            -- (Obviously ideally solve by emitting better code for deep_copy(), rather than #ilASM-ing it.)
https://rosettacode.org/wiki/Composite_numbers_k_with_no_single_digit_factors_whose_factors_are_all_substrings_of_k#slightly_faster
                            -- Can do better than 47s, surely! Surprisingly using prime n was significantly slower than n += 2...
demo\rosetta\man_or_boy_test.exw -- v2 is five times faster under pwa/p2js than it is on desktop/Phix... (to 27: 9.4s vs 50s, to 28: 22s vs 1min 50s)
demo\rosetta\Powers_of_Two.exw -- some terribly slow strings, a fair atom at 5.5s and the exact same algorithm in #ilASM{} at just 0.6s.
https://rosettacode.org/wiki/Disarium_numbers#stretch -- worth giving a spin/updating with better times (2 hours 7s [on 64 bit only]) -- Go: 57s!!! (vs 48mins)
https://rosettacode.org/wiki/Paraffins#Phix - 6* faster under pwa/p2js than desktop/Phix, Go is 3* faster than p2js. [esp. c_func, methinks]
demo\rosetta\Taxicab_numbers.exw - 5 times slower switching from pqAdd() to pq_add()... (last example), plus some really slow dictionary-based attempts.
demo\rosetta\PandigitalSquares.exw - nearly 5 times slower with use_hll=true than false (2:26 vs 0:34 for bsaes to 25).
https://rosettacode.org/wiki/Prime_triangle#C looks like it might be worth trying/comparing against my effort... [>15*, Go is ~3* faster than Phix]
Adding some min()/max() tests to an earlier version of Babylon spiral shot runtime up from 0.8s to 4.5s... ("leaf node" stuff)
Try getting a [#ilASM-invoking] hll my_length() function to be [nearly] as fast as %opLen....
https://www.rosettacode.org/mw/index.php?title=Equal_prime_and_composite_sums#Phix - Phix 22.4s, C++ 0.331s! (Go not yet timed/tried)
http://rosettacode.org/mw/index.php?title=Ramanujan_primes#Phix - Phix 2.7s, Go 1.3s (as built here - but at 2.1MB... need to dump/diff, I guess)
https://rosettacode.org/wiki/Numbers_which_are_the_cube_roots_of_the_product_of_their_proper_divisors#Phix -- 8x slower than gcc/C++ [as I'd expect... (tio vs desktop)]
...Project Euler 74
tests/t68forin.exw count_primes() is about 15 times faster under Julia... (15s vs 3:45 on 32 bit, 2:39 on 64bit [presumably latter does far fewer %pLoadFlt])
Investigate xpGUI.e/gRotatePolygon() as well... I really didn't expect 33 vs 5 pts would be even slightly noticeable, but it really is.
That'll do for now...

48:017 054 300
0o017 0o054 0o300
#0F #2C #C0
00007FF7DD67E7F0                        480F2CC0                        cvttps2pi mm0,xmm0

146:017 072 013
0o146 0o017 0o072 0o013
#66 #0F #3A #0B
660F3A0B

DOH, of course:
{{{
mov ecx,[a]
...
add eax,ecx
}}}
is ***NOT*** any kind of saving over
{{{
add eax,[a]
}}}
In fact, larger code means slower code...
Oh dear, what a load of twaddle. That would only be true if eax was not being loaded/calculated **at all**...


OK, lets' try this:
In version 1, the primary focus (in terms of performance) of ir/asm code generation was "flat sequence".
In other words I was fixated on making the compiler itself fast, rather than the generated code fast.
A more tree-like structure is required, and all references variables marked as loop invariant when they
are. Where possible, any such loop invariants should be pre-loaded into a register and shifted (when
doing so is helpful). In fact, write-only variables (esp floats) could perhaps have the same treatment,
with an initial load into an fpu register and a proper :%pStoreFloat store at loop end, but could also
need the latter when performing a return statement. Likewise strings and sequences which are modified 
but don't change length, or fall foul of cow-semantics.
Perhaps, for the first draft/to get the ball rolling, we should in fact emulate a CPU, and maybe even
calculate actual cycles/AGI stalls etc in a way that would be less straightforward were we to use real
x86 binary. An emulated ARM CPU could also only be a good thing, at this stage. In fact it might be a
good thing to convert/load real machine code into such an emulator, and make that part of the next
generation debugger, removing (some) reliance on OllyDbg/fdbg/whatever for ARM, etc. Obviously there 
is no need to support every possible machine instruction, at least to begin with. I also think (/hope)
I am way past the point of trying/wanting to do any of this in a crummy console app.
Actually, there is probably nothing wrong with using a "flat tree" ir (to keep that speed aspect).
Likewise the generated "ir-asm" (ar) shouldn't be a (flat) jumble of mixed-length binary, but a list 
of actual instructions that can be re-ordered, etc. I'm favouring an {idx,len,mask...} per each idea,
where idx is an index into some constant table that (with mask) generates var-length machine code,
and again if we have consistent lengths we can retain our "flat" performance gains (and trash all of
that horrible blurph() and scanforShortJmp() nonsense, hopefully). All much easier in a CPU emulator.
--*/

-- *** an inline routine cannot inline recursion *** (I just made that up) The AST must have an
--  otherwise unused flag on every node that is set in the recursive test (and cleared on exit), 
--  should a depth-first scan ever hit an already marked node ==> compilation error. We could of
--  course re-use the "inline?" flag, if it has a spare bit, ie 0b00=no, 0b01=yes, 0b11=yes|set.
--  Said dfs can safely skip/ignore any non-inlined calls, so (re)name it "recursive_inline()".

--/* from https://rosettacode.org/wiki/Machine_code#Phix
atom mem = allocate(9)
poke(mem,{#8B,#44,#24,#04,#03,#44,#24,#08,#C3})
integer res
#ilASM{ mov eax,[mem]
        call :%pLoadMint -- eax:=(int32)eax, in case mem>#3FFFFFFF
        push 12
        push 7
        call eax
        add esp,8
        mov [res],eax }
?res
free(mem)
or (better listing):
integer res
#ilASM{ jmp @f
      ::add
    [32]
        mov eax,[esp+4]
        add eax,[esp+8]
    [64]
        mov rax,[rsp+8]
        add rax,[rsp+16]
    []  
        ret
      @@:
        push 12
        push 7
        call :add
    [32]
        add esp,8
        mov [res],eax
    [64]
        add rsp,16
        mov [res],rax
    []
      }
?res
--*/

--/*
-- a little ditty to analyse list.asm files:
--{{draft task}}
--Compiler/Categorised Assembly listing
--Erm, (allow targetting of the Compiler task output, state how it might be applied to "the real language"...)
--Assuming your toolchain has a facility to produce an assembly listing (most do not), 
--analyze/sort that file by instruction (by either mnemonic or binary code order) and 
--produce a summary listing of the machine ops it uses/has actually generated.
constant listdotasm = `demo\pGUI\list.asm`,
         loutdotasm = `lout.asm`
sequence lines = get_text(listdotasm,GT_LF_STRIPPED)
--sequence lines = get_text(listdotasm,GT_LF_STRIPPED)[1..60]
printf(1,"lines read:%d\n",length(lines))
integer maxi = length(lines)

function not_comments(integer i)
    if i>maxi then
        return false
    end if
    string line = lines[i]
    if length(line)=0 
    or line[1]=';' then
        return false
    end if
    if length(line)>7 and line[1..7]="symtab[" then
        maxi = i-1
        return false
    end if
    integer fch = line[trim_head(line,return_index:=true)]
    if fch='[' 
    or fch='#' then
        return false
    end if
    if length(line)<=2 then ?9/0 end if
    return true
end function

sequence ltag = filter(tagset(maxi),not_comments)
integer l = length(ltag)
printf(1,"after filtering:%d\n",l)
--for i=1 to length(lines) do
--  printf(1,"%2d: %s\n",{i,lines[i]})
--end for
--?ltag

function get_key(string line)
--string orig = line
    integer k = find(';',line),
            uv = line[k+39]
    assert(line[k+1]='#')
    assert(line[k+10]=':')
    if find(uv,"uvn") then
        line = line[1..k+38]
    end if
    sequence key = split(line[k+12..$])
    for i=1 to length(key) do
        if not find(':',key[i])
        and remainder(length(key[i]),3) then
            assert(i>1)
            key = key[1..i-1]
            exit
        end if
    end for
    return key
end function

sequence kdx = repeat(0,l),
         sort_keys = {}
for i=1 to l do
    integer lti = ltag[i]
    string li = lines[lti]
    sequence key = get_key(li)
    integer k = find(key,sort_keys)
    if k=0 then
        sort_keys = append(sort_keys,key)
        k = length(sort_keys)
    end if
    integer indent = trim_head(li,return_index:=true)
    kdx[i] = {k,indent,lti}
end for

-- now perform a tag sort on sort_keys, and replace all k in kdx
sequence tsk = tagset(length(sort_keys))
sequence ktag = custom_sort(sort_keys,deep_copy(tsk))
ktag = extract(tsk,ktag,true) -- and invert them
--?{"ktag",ktag}
for i=1 to l do
    kdx[i][1] = ktag[kdx[i][1]]
end for
-- (not strictly needed, but may help subsequent debugging:)
sort_keys = extract(sort_keys,ktag)

-- and finally tagsort the actual lines
sequence kt = extract(kdx,custom_sort(kdx,tagset(l)))
--?{"kdx",kdx}
--?{"sort_keys",sort_keys}
--?{"kt",kt}

integer fn = open(loutdotasm,'w'), kp = -1
for i=1 to length(kt) do
    integer {k,indent,lti} = kt[i]
    if k!=kp then
        kp = k
--      printf(fn,"%s\n",{lines[lti]})
        string {lhs,rhs} = split(lines[lti],';')
        printf(fn,"    %-37s ;%s\n",{trim(lhs),rhs})
    end if
end for
close(fn)
printf(1,"File %s created\n",{loutdotasm})
wait_key()
--*/
--/*
--output:
    add [edi+eax],edx                     ;#0055486B: 001024007                  uv 00 85  3  65      
    add [ebx+edi*4-8],ecx                 ;#0055197A: 001114273 F8               uv 00 8A  3 380      
    add ecx,eax                           ;#005506D1: 001301                     uv 02 03  1 243      
    add edi,eax                           ;#0055243D: 001307                     uv 80 81  1 115      
    add eax,ecx                           ;#005513EB: 001310                     uv 01 03  1 455      
    add ecx,ecx                           ;#00554EA4: 001311                     vu 02 02  1 272      
    add esi,ecx                           ;#0052D106: 001316                     uv 40 42  1  18      
    add eax,edx                           ;#00551FDA: 001320                     uv 01 05  1 136      
    add ecx,edx                           ;#00551848: 001321                     uv 02 06  1 275      
    add edx,edx                           ;#00555053: 001322                     uv 04 04  1 548      
    add esi,edx                           ;#005520D4: 001326                     uv 40 44  1 214      
    add edi,edx                           ;#005522A4: 001327                     uv 80 84  1 146      
    add ecx,esi                           ;#00553C3C: 001361                     vu 02 42  1 127      
    add edx,esi                           ;#00551A53: 001362                     uv 04 44  1 449      
    add edi,esi                           ;#00551943: 001367                     uv 80 C0  1 351      
    add eax,edi                           ;#005327C4: 001370                     uv 01 81  1 421      
    add ecx,edi                           ;#00551CD8: 001371                     vu 02 82  1 224      
    add edx,edi                           ;#005519FC: 001372                     uv 04 84  1 419      
    add esi,edi                           ;#00550F53: 001376                     uv 40 C0  1  68      
    add edx,[esp+8]                       ;#005519A3: 003124044 08               vu 04 14  2 388      
    add edx,[ebx+eax*4-12]                ;#005514CB: 003124203 F4               uv 04 0D  2 533      
    add edx,[ebx+edi*4-12]                ;#00551A1B: 003124273 F4               uv 04 8C  2 435      
    add esi,[esp+4]                       ;#00551AC2: 003164044 04               uv 40 50  2 498      
    or ah,ch                              ;#00550BA8: 010354                     vu 01 03  1  42      
    or [ebx+esi*4-4],eax                  ;#00554C1B: 011104263 FC               uv 00 49  3  17      
    or ecx,eax                            ;#005508ED: 011301                     uv 02 03  1 747      
    or ecx,ecx                            ;#00550C10: 011311                     uv 02 02  1  95      
    or ecx,[esp]                          ;#005508FC: 013014044                  uv 02 12  2 766      
    jo #00555521 (:%pStoreFlt)            ;#00550A97: 017200 844A0000            v  00 00  1 146      
    jno #00515B5B                         ;#00515A90: 017201 C5000000            v  00 00  1  51      
    jb #00555521 (:%pStoreFlt)            ;#00555956: 017202 C5FBFFFF            v  00 00  1 112      
    jae #005521DB                         ;#005522B8: 017203 1DFFFFFF            v  00 00  1 151      
    je #004DC6FB                          ;#004DC667: 017204 8E000000            v  00 00  1  39      
    jne #0052CC30                         ;#0052CB93: 017205 97000000            v  00 00  1  23      
    ja #0055223D                          ;#0055230E: 017207 29FFFFFF            v  00 00  1 180      
    js #00554F7B                          ;#00555308: 017210 6DFCFFFF            v  00 00  1 797      
    jl #004DCAB5                          ;#004DC990: 017214 1F010000            v  00 00  1 232      
    jge #005005C0                         ;#0050050A: 017215 B0000000            v  00 00  1   8      
    jle #004DCAB5                         ;#004DC7C3: 017216 EC020000            v  00 00  1 119      
    jg #004D3DD1                          ;#004D3BF8: 017217 D3010000            v  00 00  1 110      
    sete al                               ;#0052408A: 017224300                  np 01 00  2  11      
    sete cl                               ;#005323ED: 017224301                  np 02 00  2 220      
    sete dl                               ;#00552A12: 017224302                  np 04 00  2  13      
    setne al                              ;#00552952: 017225300                  np 01 00  2   6      
    setne bl                              ;#005548C3: 017225303                  np 08 00  2 113      
    setl al                               ;#0050C8AB: 017234300                  np 01 00  2 272      
    setl cl                               ;#00553216: 017234301                  np 02 00  2 197      
    setge al                              ;#00552CB3: 017235300                  np 01 00  2  10      
    setg al                               ;#00552DD2: 017237300                  np 01 00  2  10      
    setg cl                               ;#0052D283: 017237301                  np 02 00  2  79      
    shld edx,eax,4                        ;#00554529: 017244302 04               np 05 05  4  60      
    shld eax,edx,4                        ;#005544DE: 017244320 04               np 05 05  4  33      
    shld ecx,edx,4                        ;#00554525: 017244321 04               np 06 06  4  56      
    and ecx,eax                           ;#005508BA: 041301                     uv 02 03  1 723      
    and eax,esi                           ;#0052EE17: 041360                     uv 01 41  1  16      
    and ecx,[esp]                         ;#005508C9: 043014044                  uv 02 12  2 742      
    and eax,1                             ;#0052FC12: 045 01000000               uv 01 01  1  23 01   
    sub ah,dh                             ;#00550BAA: 050364                     uv 01 05  1  43      
    sub ecx,eax                           ;#00553D1C: 051301                     uv 02 03  1 169 02   
    sub edx,eax                           ;#0055DD7E: 051302                     uv 04 05  1  67      
    sub edi,eax                           ;#00555356: 051307                     uv 80 81  1 825 80   
    sub eax,ecx                           ;#00554E4F: 051310                     uv 01 03  1 237      
    sub edx,ecx                           ;#005552F2: 051312                     uv 04 06  1 779      
    sub esi,ecx                           ;#005507E7: 051316                     uv 40 42  1 533 40   
    sub esi,edx                           ;#005513E9: 051326                     vu 40 44  1 454      
    sub edi,edx                           ;#005521D6: 051327                     uv 80 84  1   3      
    sub ecx,esp                           ;#005545BE: 051341                     uv 02 12  1 182      
    sub eax,esi                           ;#00554E22: 051360                     vu 01 41  1 170      
    sub ecx,esi                           ;#005514FC: 051361                     vu 02 42  1 543      
    sub edi,esi                           ;#0050CAEF: 051367                     uv 80 C0  1 375      
    sub eax,edi                           ;#00531A8D: 051370                     uv 01 81  1 144       
    sub ecx,edi                           ;#00552121: 051371                     uv 02 82  1 247      
    sub edx,edi                           ;#00551102: 051372                     vu 04 84  1 194      
    sub ecx,[esp]                         ;#00551F4D: 053014044                  uv 02 12  2  93      
    sub eax,[edx-20]                      ;#005510DC: 053102 EC                  vu 01 05  2 186      
    sub ecx,[esp+16]                      ;#00551A66: 053114044 10               uv 02 12  2 463      
    sub edx,[esp+4]                       ;#00551A1F: 053124044 04               uv 04 14  2 437 04   
    sub edx,[esi-4]                       ;#0055485D: 053126 FC                  uv 04 44  2  59 04   
    sub eax,256                           ;#00553A7F: 055 00010000               uv 01 01  1  54      
    xor eax,eax                           ;#004D6CA1: 061300                     uv 01 01  1  44      
    xor ecx,eax                           ;#00550920: 061301                     uv 02 03  1 771      
    xor ecx,ecx                           ;#0052C6F0: 061311                     uv 02 02  1  15      
    xor edx,edx                           ;#00552A0E: 061322                     vu 04 04  1  11      
    xor ebx,ebx                           ;#004D6E53: 061333                     vu 08 08  1  18      
    xor ebp,ebp                           ;#0055498D: 061355                     uv 20 20  1 192      
    xor eax,esi                           ;#00550517: 061360                     uv 01 41  1  51      
    xor esi,esi                           ;#00555833: 061366                     vu 40 40  1 147       
    xor esi,edi                           ;#00554E58: 061376                     uv 40 C0  1 241 80   
    xor edi,edi                           ;#004DACFD: 061377                     uv 80 80  1  51      
    xor ecx,[esp]                         ;#0055092F: 063014044                  uv 02 12  2 790      
    cmp [esi+edi],cl                      ;#00551BEE: 070014076                  uv 00 C2  2 143      
    cmp [edi],eax                         ;#00550C06: 071007                     uv 00 81  2  89      
    cmp [eax],ebx                         ;#005549A1: 071030                     uv 00 09  2 200 01 *01*
    cmp [#00404A18] (ma_ip),ebx           ;#00552431: 071035 184A4000            vu 00 08  2 113      
    cmp [ebx+esi*4+4],eax                 ;#00554CE9: 071104263 04               uv 00 49  2  47      
    cmp [eax-12],ecx                      ;#0055173C: 071110 F4                  uv 00 03  2 157      
    cmp [ebx+edi*4-12],ecx                ;#00551953: 071114273 F4               uv 00 8A  2 362      
    cmp [esi+8],edx                       ;#00555115: 071126 08                  uv 00 44  2 629      
    cmp [edi+ecx*4+20],ebx                ;#00555318: 071134217 14               vu 00 8A  2 799      
    cmp [ebp+16],ebx                      ;#005548BD: 071135 10                  vu 00 28  2 111      
    cmp [esi+84],ebx                      ;#00554A8C: 071136 54                  uv 00 48  2 304      
    cmp ecx,eax                           ;#00515B89: 071301                     uv 00 03  1 107 02   
    cmp esi,eax                           ;#00500508: 071306                     uv 00 41  1   8      
    cmp edi,eax                           ;#004D3AB9: 071307                     uv 00 81  1  51      
    cmp eax,ecx                           ;#005157C1: 071310                     uv 00 03  1  82 01   
    cmp edx,ecx                           ;#0055502B: 071312                     vu 00 06  1 539      
    cmp esi,ecx                           ;#004E2A03: 071316                     uv 00 42  1  39      
    cmp edi,ecx                           ;#004D3B96: 071317                     uv 00 82  1  93      
    cmp eax,edx                           ;#005558E7: 071320                     uv 00 05  1  52      
    cmp ecx,edx                           ;#004D6885: 071321                     uv 00 06  1  83      
    cmp esi,edx                           ;#00550858: 071326                     uv 00 44  1 681      
    cmp edi,edx                           ;#005523BE: 071327                     uv 00 84  1  57      
    cmp eax,esi                           ;#00532FFE: 071360                     uv 00 41  1 818 40   
    cmp ecx,esi                           ;#004E1A39: 071361                     uv 00 42  1  56 02   
    cmp edi,esi                           ;#004D3911: 071367                     uv 00 C0  1  80      
    cmp eax,edi                           ;#004D3BF6: 071370                     uv 00 81  1 110      
    cmp ecx,edi                           ;#004E29F0: 071371                     uv 00 82  1  33 02   
    cmp esi,edi                           ;#0053387B: 071376                     uv 00 C0  1  31      
    cmp eax,[esi]                         ;#00550B87: 073006                     uv 00 41  2  26      
    cmp eax,[edi]                         ;#00550BE2: 073007                     uv 00 81  2  72      
    cmp ecx,[eax]                         ;#00554E6D: 073010                     uv 00 03  2 258      
    cmp edx,[esp]                         ;#005552FB: 073024044                  uv 00 14  2 794      
    cmp edi,[esp]                         ;#00550EBE: 073074044                  uv 00 90  2  30      
    cmp eax,[ebp+24]                      ;#005549AC: 073105 18                  uv 00 21  2 206    *20*
    cmp eax,[esi+4]                       ;#005553A8: 073106 04                  vu 00 41  2 893      
    cmp ecx,[esi+8]                       ;#00554DBD: 073116 08                  uv 00 42  2 138      
    cmp ecx,[edi-12]                      ;#00550CBF: 073117 F4                  uv 00 82  2 173      
    cmp edx,[esp+4]                       ;#00551265: 073124044 04               uv 00 14  2 305      
    cmp edi,[esp+4]                       ;#00551035: 073174044 04               uv 00 90  2 136      
    cmp eax,ecx                           ;#005155F1: 073301                     uv 00 03  1 206 01   
    cmp eax,edx                           ;#00515F9E: 073302                     uv 00 05  1 327 01   
    cmp eax,esi                           ;#00533402: 073306                     uv 00 41  1 119 01   
    cmp eax,edi                           ;#005529CA: 073307                     uv 00 81  1  28 01   
    cmp ecx,eax                           ;#00553C99: 073310                     uv 00 03  1 145 02   
    cmp ecx,edx                           ;#005164EF: 073312                     uv 00 06  1 615 02   
    cmp ecx,esi                           ;#00517ACA: 073316                     uv 00 42  1 115 02   
    cmp ecx,edi                           ;#00552D8C: 073317                     uv 00 82  1  39 02   
    cmp esi,eax                           ;#00532600: 073360                     uv 00 41  1 323 40   
    cmp esi,ecx                           ;#004E17B0: 073361                     uv 00 42  1  64 40   
    cmp esi,edx                           ;#0055DC10: 073362                     uv 00 44  1 109      
    cmp esi,edi                           ;#004E24C0: 073367                     uv 00 C0  1  43 40   
    cmp edi,eax                           ;#00515B64: 073370                     uv 00 81  1  95 80   
    cmp edi,ecx                           ;#004D3988: 073371                     uv 00 82  1 103 80   
    cmp edi,edx                           ;#0055DB88: 073372                     uv 00 84  1  77 80   
    cmp edi,esi                           ;#0052C8B1: 073376                     uv 00 C0  1  93 80   
    cmp eax,8384                          ;#004D6C11: 075 C0200000               vu 00 01  1  16      
    push eax                              ;#004D6C30: 120                        uv 00 01  1  24      
    push ecx                              ;#004D6B31: 121                        uv 00 02  1  86      
    push edx                              ;#004E668C: 122                        uv 00 04  1  53      
    push ebx                              ;#005551D0: 123                        uv 00 08  1 677      
    push esp                              ;#005544AD: 124                        vu 00 10  1  12      
    push ebp                              ;#005549A6: 125                        vu 00 20  1 202      
    push esi                              ;#004D6B02: 126                        uv 00 40  1  76      
    push edi                              ;#004D6B18: 127                        uv 00 80  1  81      
    pop eax                               ;#005559DD: 130                        uv 01 00  1 445      
    pop ecx                               ;#005553A7: 131                        uv 02 00  1 893      
    pop edx                               ;#005559B2: 132                        uv 04 00  1 374      
    pop ebp                               ;#005549E0: 135                        uv 20 00  1 228      
    pop esi                               ;#0055519E: 136                        uv 40 00  1 665      
    pop edi                               ;#0055519F: 137                        vu 80 00  1 665      
    pushad                                ;#00555417: 140                        np 00 FF  5 958      
    popad                                 ;#0055545A: 141                        np FF 00  5 986      
    or ax,1536                            ;#00553DAF: 146:015 0006               vu 01 01  1  31      
    sub ax,256                            ;#00553DCD: 146:055 0001               vu 01 01  1  34      
    xor ax,3072                           ;#00553DDD: 146:065 000C               uv 01 01  1  36      
    or word[esp],512                      ;#00553D99: 146:201014044 0002         vu 00 10  3  21      
    and word[esp],-3841                   ;#00553D93: 146:201044044 FFF0         uv 00 10  3  19      
    mov word[esi+edx],ax                  ;#00550ED6: 146:211004026              vu 00 45  1  35      
    mov word[ebx+eax*4],cx                ;#00550F64: 146:211014203              vu 00 0B  1  73      
    mov word[edi],cx                      ;#00550FA9: 146:211017                 uv 00 82  1  95      
    mov ax,word[esp]                      ;#00553DA2: 146:213004044              uv 01 10  1  30      
    mov ax,word[#00402218] (down53)       ;#00553DD7: 146:241 18224000           vu 01 00  1  35      
    mov word[#00402214] (near53),ax       ;#00553DA9: 146:243 14224000           uv 00 01  1  31      
    lodsw                                 ;#0055487D: 146:255                    np 41 40  2  84      
    mov word[edi], word 3338              ;#005544F6: 146:307007 0A0D            uv 00 80  1  44      
    push #004D69E0                        ;#004D69C9: 150 E0694D00               uv 00 00  1   2      
    push 43                               ;#0052CBAA: 152 2B                     uv 00 00  1  28      
    jo #004D6889                          ;#004D6892: 160 F5                     v  00 00  1  86      
    jno #0052C7BF                         ;#0052C7AC: 161 11                     v  00 00  1  46      
    jb #0055501E                          ;#0055501B: 162 01                     v  00 00  1 524      
    jnc #0055596A                         ;#005559E0: 163 88                     v  00 00  1 446      
    je #004D69FC                          ;#004D69F0: 164 0A                     v  00 00  1  10      
    jne #004D6BE0                         ;#004D6BCF: 165 0F                     v  00 00  1   5      
    jbe #005558E7                         ;#005558DB: 166 0A                     v  00 00  1  49      
    ja #005558B8                          ;#00555897: 167 1F                     v  00 00  1  29      
    js #00554959                          ;#00554936: 170 21                     v  00 00  1 151      
    jns #00555417                         ;#00555414: 171 01                     v  00 00  1 944      
    jpe #0055044A                         ;#0055044F: 172 F9                     v  00 00  1 187      
    jl #004D6C16                          ;#004D6C0A: 174 0A                     v  00 00  1  13      
    jge #0050C91B                         ;#0050C912: 175 07                     v  00 00  1 288      
    jle #004D6C49                         ;#004D6C39: 176 0E                     v  00 00  1  25      
    jg #00520A82                          ;#00520A02: 177 7E                     v  00 00  1  59      
    cmp byte[eax-1],#82                   ;#00552412: 200170 FF 82               u  00 01  2  93      
    cmp byte[ecx-1],#82                   ;#0055125B: 200171 FF 82               u  00 02  2 303      
    cmp byte[edx-1],#80                   ;#00555665: 200172 FF 80               u  00 04  2 129       
    cmp byte[ebx+eax*4-1],#82             ;#004DCAB8: 200174203 FF 82            u  00 09  2 309    *01*
    cmp byte[ebx+ecx*4-1],#12             ;#00552CC9: 200174213 FF 12            u  00 0A  2   3      
    cmp byte[ebx+edx*4-1],#12             ;#00555572: 200174223 FF 12            u  00 0C  2 116       
    cmp byte[ebx+esi*4-1],#12             ;#004D69EB: 200174263 FF 12            u  00 48  2   9      
    cmp byte[ebx+edi*4-1],#12             ;#004D6A07: 200174273 FF 12            u  00 88  2  14      
    cmp byte[esi-1],#80                   ;#00551B39: 200176 FF 80               u  00 40  2  84      
    cmp byte[edi-1],#12                   ;#0055227D: 200177 FF 12               u  00 80  2 130    *80*
    add al,55                             ;#005544E5: 200300 37                  vu 01 01  1  37      
    add cl,55                             ;#00554530: 200301 37                  vu 02 02  1  64      
    or al,16                              ;#005521D1: 200310 10                  uv 01 01  1   2      
    and ah,127                            ;#00550B9C: 200344 7F                  uv 01 01  1  40      
    and dh,4                              ;#00550B9F: 200346 04                  vu 04 04  1  40      
    sub al,7                              ;#005544ED: 200350 07                  uv 01 01  1  39      
    sub cl,1                              ;#0055549B: 200351 01                  uv 02 02  1 101       
    cmp al,4                              ;#00554866: 200370 04                  uv 00 01  1  64      
    cmp cl,#12                            ;#00550D4C: 200371 12                  uv 00 02  1 237      
    cmp dl,#82                            ;#00550CCD: 200372 82                  uv 00 04  1 177      
    cmp ah,#80                            ;#00552474: 200374 80                  uv 00 01  1 130      
    cmp dword[ebx+ecx*4],#00424354        ;#00555267: 201074213 54434200         vu 00 0A  2 742      
    cmp dword[ebx+edx*4],#00424354        ;#005553BF: 201074223 54434200         uv 00 0C  2 902      
    cmp dword[ebx+esi*4],#00424354        ;#00554CDF: 201074263 54434200         uv 00 48  2  32      
    cmp dword[esi],#00484253              ;#00554DB4: 201076 53424800            uv 00 40  2 123    *40*
    cmp dword[ecx+32],#00424345           ;#00555168: 201171 20 45434200         u  00 02  2 655      
    cmp dword[ebx+edx*4+236],#00424343    ;#005553D7: 201274223 EC000000 43434200 u  00 0C  2 918      
    cmp dword[ebx+esi*4+236],#00424343    ;#0055515A: 201274263 EC000000 43434200 u  00 48  2 640      
    cmp dword[ebx+edi*4+236],#00424343    ;#00554DDF: 201274273 EC000000 43434200 u  00 88  2 144      
    add ecx,2048                          ;#00554904: 201301 00080000            vu 02 02  1 139      
    add edx,240                           ;#00554D90: 201302 F0000000            vu 04 04  1 109      
    add esi,1024                          ;#004EA269: 201306 00040000            vu 40 40  1  71      
    add edi,1024                          ;#004F52B1: 201307 00040000            vu 80 80  1  71      
    and ecx,255                           ;#00552251: 201341 FF000000            vu 02 02  1 107      
    and edx,-4                            ;#0055110C: 201342 FCFFFFFF            uv 04 04  1 199      
    and esi,-2                            ;#00554DAA: 201346 FEFFFFFF            uv 40 40  1 120 40   
    sub edi,65536                         ;#00553AFC: 201357 00000100            uv 80 80  1  75      
    cmp ecx,h4                            ;#004D6C04: 201371 00000040            vu 00 02  1  12      
    cmp edx,h4                            ;#004D6CAB: 201372 00000040            uv 00 04  1  46 04   
    cmp esi,h4                            ;#004D6BC9: 201376 00000040            vu 00 40  1   4      
    cmp edi,h4                            ;#004D69FF: 201377 00000040            uv 00 80  1  13 80   
    cmp dword[#0040219C] (sinit),0        ;#0055481A: 203075 9C214000 00         u  00 00  2  50      
    add dword[eax-8],1                    ;#0055478A: 203100 F8 01               u  00 01  3  13    *01*
    add dword[ecx-8],1                    ;#0055122D: 203101 F8 01               u  00 02  3 286      
    add dword[ebx+eax*4-8],1              ;#004D6A4A: 203104203 F8 01            u  00 09  3  28    *01*
    add dword[ebx+ecx*4-8],1              ;#004D6C0C: 203104213 F8 01            u  00 0A  3  14      
    add dword[ebx+edx*4-8],1              ;#00551DA7: 203104223 F8 01            u  00 0C  3 297      
    add dword[ebx+esi*4-8],1              ;#004D6AF8: 203104263 F8 01            u  00 48  3  73      
    add dword[ebx+edi*4-8],1              ;#004D6C1F: 203104273 F8 01            u  00 88  3  20    *80*
    add dword[esi-8],1                    ;#00551248: 203106 F8 01               u  00 40  3 295      
    sub dword[ebx+eax*4-8],1              ;#004D6C3B: 203154203 F8 01            u  00 09  3  26      
    sub dword[ebx+ecx*4-8],1              ;#004D3343: 203154213 F8 01            u  00 0A  3 157      
    sub dword[ebx+edx*4-8],1              ;#004D6CB6: 203154223 F8 01            u  00 0C  3  48      
    sub dword[ebx+esi*4-8],1              ;#004D6A67: 203154263 F8 01            u  00 48  3  34      
    sub dword[eax+edi*4-8],1              ;#005556E9: 203154270 F8 01            u  00 81  3 133       
    sub dword[ebx+edi*4-8],1              ;#004D30DA: 203154273 F8 01            u  00 88  3  15      
    sub dword[esi-8],1                    ;#00551C00: 203156 F8 01               u  00 40  3 150      
    cmp dword[ecx+8],0                    ;#00554EDC: 203171 08 00               u  00 02  2 297      
    cmp dword[esp+12],0                   ;#00550EB3: 203174044 0C 00            u  00 10  2  28      
    cmp dword[ebx+esi*4-8],1              ;#00551C7C: 203174263 F8 01            u  00 48  2 201      
    cmp dword[edi+esi*4+20],0             ;#005550A2: 203174267 14 00            u  00 C0  2 568    *C0*
    cmp dword[ebx+edi*4-12],0             ;#00551A29: 203174273 F4 00            u  00 88  2 440      
    cmp dword[ebp+8],21                   ;#00554966: 203175 08 15               u  00 20  2 181      
    cmp dword[esi-8],1                    ;#0055213B: 203176 F8 01               u  00 40  2 266      
    cmp dword[edi-8],1                    ;#00551F6E: 203177 F8 01               u  00 80  2 101    *80*
    add eax,1                             ;#00552A08: 203300 01                  uv 01 01  1  10      
    add ecx,1                             ;#00552D89: 203301 01                  uv 02 02  1  38      
    add edx,-1                            ;#00554450: 203302 FF                  uv 04 04  1 148      
    add ebx,1                             ;#00551FE9: 203303 01                  vu 08 08  1 138      
    add esp,8                             ;#005559A2: 203304 08                  uv 10 10  1 365      
    add esi,1                             ;#004E17AD: 203306 01                  uv 40 40  1  63      
    add edi,1                             ;#0052C8AE: 203307 01                  uv 80 80  1  92      
    or esi,1                              ;#00555302: 203316 01                  vu 40 40  1 796      
    or edi,1                              ;#00554EB6: 203317 01                  vu 80 80  1 275      
    and eax,2                             ;#00542B27: 203340 02                  uv 01 01  1 638      
    sub eax,1                             ;#00533379: 203350 01                  uv 01 01  1  95      
    sub ecx,1                             ;#005334CE: 203351 01                  uv 02 02  1 161 02   
    sub edx,1                             ;#00554F7F: 203352 01                  vu 04 04  1 464      
    sub esp,4                             ;#005559D7: 203354 04                  uv 10 10  1 436      
    sub esi,1                             ;#00553A3F: 203356 01                  uv 40 40  1  44      
    sub edi,1                             ;#00515A86: 203357 01                  uv 80 80  1  49      
    xor eax,-1                            ;#00550A43: 203360 FF                  uv 01 01  1  90      
    cmp eax,0                             ;#00552B85: 203370 00                  uv 00 01  1  24      
    cmp ecx,0                             ;#004DC9D1: 203371 00                  uv 00 02  1 249      
    cmp edx,0                             ;#0055CF3C: 203372 00                  uv 00 04  1 738      
    cmp esi,0                             ;#00552B3C: 203376 00                  uv 00 40  1   6      
    cmp edi,0                             ;#004DC734: 203377 00                  uv 00 80  1  85      
    test eax,eax                          ;#00552D78: 205300                     uv 00 01  1  35      
    test ecx,ecx                          ;#004DC655: 205311                     uv 00 02  1  33 02   
    test edx,edx                          ;#004DC665: 205322                     uv 00 04  1  39 04   
    test esi,esi                          ;#0052B6BE: 205366                     uv 00 40  1  65 40   
    test edi,edi                          ;#004DC8DD: 205377                     uv 00 80  1 192 80   
    xchg [esp],edi                        ;#00551F39: 207074044                  np 80 90  3  87      
    xchg esi,ecx                          ;#005511CC: 207316                     np 42 42  3 261      
    xchg esi,edi                          ;#00550BF9: 207376                     np C0 C0  3  82      
    mov [edx],al                          ;#00551D66: 210002                     uv 00 05  1 269      
    mov [edx],cl                          ;#00551C1A: 210012                     uv 00 06  1 165 02   
    mov [eax+edi],cl                      ;#00551CA8: 210014070                  vu 00 83  1 209      
    mov [esi+edi],cl                      ;#00551BF9: 210014076                  uv 00 C2  1 147      
    mov [ebx+eax*4],cl                    ;#00550FA4: 210014203                  vu 00 0B  1  93      
    mov [edi+esi*4],cl                    ;#00551E95: 210014267                  uv 00 C2  1 365      
    mov [edi],cl                          ;#0055453B: 210017                     uv 00 82  1  67 02   
    mov [edi],bl                          ;#00550FA2: 210037                     uv 00 88  1  93      
    mov [ebx+eax*4+2],bl                  ;#00550F68: 210134203 02               uv 00 09  1  74      
    mov [ecx],eax                         ;#0055244B: 211001                     uv 00 03  1 119      
    mov [edx],eax                         ;#005549E7: 211002                     uv 00 05  1 236 04 *04*
    mov [esp],eax                         ;#00554418: 211004044                  uv 00 11  1  59      
    mov [esi+edi],eax                     ;#005553FF: 211004076                  uv 00 C1  1 937      
    mov [esi+edx*4],eax                   ;#0055106C: 211004226                  uv 00 45  1 149      
    mov [#00402008],eax                   ;#00556E32: 211005 08204000            uv 00 01  1 747      
    mov [esi],eax                         ;#005515ED: 211006                     uv 00 41  1  19      
    mov [edi],eax                         ;#004D6894: 211007                     uv 00 81  1  87      
    mov [eax],ecx                         ;#0055539E: 211010                     uv 00 03  1 891      
    mov [esp],ecx                         ;#0055441E: 211014044                  uv 00 12  1  63      
    mov [ebx+eax*4],ecx                   ;#0055119C: 211014203                  uv 00 0B  1 250      
    mov [eax+edi*4],ecx                   ;#00551D00: 211014270                  vu 00 83  1 237      
    mov [#00402E68] (dll_path),ecx        ;#00517C6F: 211015 682E4000            vu 00 02  1 195      
    mov [edi],ecx                         ;#00551C53: 211017                     vu 00 82  1 190      
    mov [eax],edx                         ;#0055543D: 211020                     vu 00 05  1 981      
    mov [eax+edx],edx                     ;#00555312: 211024020                  vu 00 05  1 798      
    mov [edi],edx                         ;#005555CC: 211027                     vu 00 84  1 120       
    mov [eax],ebx                         ;#005554EB: 211030                     uv 00 09  1 108       
    mov [did_iup_controls_open],ebx       ;#0052B3EC: 211035 24364000            uv 00 08  1  19      
    mov [edi],ebx                         ;#00554401: 211037                     vu 00 88  1  38      
    mov [ecx],esi                         ;#00551CE3: 211061                     uv 00 42  1 232      
    mov [ebx+eax*4],esi                   ;#00550F0A: 211064203                  uv 00 49  1  50      
    mov [#0040250C] (cdi_filename),esi    ;#00555FFB: 211065 0C254000            vu 00 40  1   8      
    mov [edi],esi                         ;#00552191: 211067                     vu 00 C0  1 291      
    mov [eax],edi                         ;#005547CE: 211070                     vu 00 81  1  32      
    mov [#00402E58] (libidx),edi          ;#00560070: 211075 582E4000            uv 00 80  1   2      
    mov [ecx+8],eax                       ;#00554EE0: 211101 08                  vu 00 03  1 298      
    mov [ebp+ebx],eax                     ;#00554A19: 211104035 00               vu 00 29  1 258      
    mov [esp+4],eax                       ;#00555194: 211104044 04               uv 00 11  1 663      
    mov [ebx+edx*4-12],eax                ;#005513F4: 211104223 F4               uv 00 0D  1 458      
    mov [edi+edx*4+20],eax                ;#00554EF0: 211104227 14               uv 00 85  1 316      
    mov [ebx+esi*4+4],eax                 ;#00554FEA: 211104263 04               vu 00 49  1 499      
    mov [ebp-12] (x2),eax                 ;#004D6D1E: 211105 F4                  uv 00 21  1  66      
    mov [esi+4],eax                       ;#005551B6: 211106 04                  uv 00 41  1 672      
    mov [edi+4],eax                       ;#005547CB: 211107 04                  uv 00 81  1  32      
    mov [eax-8],ecx                       ;#00555346: 211110 F8                  vu 00 03  1 819      
    mov [esp+8],ecx                       ;#00554F02: 211114044 08               vu 00 12  1 321      
    mov [edx+eax*4-12],ecx                ;#00551116: 211114202 F4               vu 00 07  1 202      
    mov [ebx+edx*4-8],ecx                 ;#00555593: 211114223 F8               uv 00 0E  1 117       
    mov [ebx+esi*4-4],ecx                 ;#00554C5A: 211114263 FC               uv 00 4A  1  59      
    mov [edi+esi*4+20],ecx                ;#005550DE: 211114267 14               uv 00 C2  1 593 02   
    mov [ebp] (ih),ecx                    ;#004D6C01: 211115 00                  uv 00 22  1  12 02   
    mov [esi+4],ecx                       ;#005548BA: 211116 04                  uv 00 42  1 111      
    mov [eax+4],edx                       ;#00555402: 211120 04                  uv 00 05  1 939    *01*
    mov [esp+28],edx                      ;#0055544F: 211124044 1C               vu 00 14  1 984      
    mov [ebx+eax*4-4],edx                 ;#005510BE: 211124203 FC               uv 00 0D  1 170 04   
    mov [ebx+esi*4+8],edx                 ;#00554FE6: 211124263 08               uv 00 4C  1 499 04   
    mov [ebx+edi*4-12],edx                ;#00551468: 211124273 F4               uv 00 8C  1 496      
    mov [ebp-8] (symtab[1723]),edx        ;#00552A15: 211125 F8                  uv 00 24  1  15      
    mov [esi+8],edx                       ;#005551BD: 211126 08                  uv 00 44  1 673      
    mov [edi-24],edx                      ;#00551121: 211127 E8                  uv 00 84  1 204      
    mov [eax+8],ebx                       ;#00555405: 211130 08                  vu 00 09  1 939      
    mov [edx-8],ebx                       ;#00555662: 211132 F8                  uv 00 0C  1 129 04 *04*
    mov [eax+edx+4],ebx                   ;#00555322: 211134020 04               uv 00 0D  1 801      
    mov [edi+esi*4+20],ebx                ;#00554659: 211134267 14               uv 00 C8  1  24    *C0*
    mov [eax+edi*4+16],ebx                ;#00554AA7: 211134270 10               uv 00 89  1 314      
    mov [ebp-8] (symtab[8394]),ebx        ;#004D6CB1: 211135 F8                  vu 00 28  1  46      
    mov [esi+4],ebx                       ;#005547FE: 211136 04                  uv 00 48  1  44    *40*
    mov [edx+20],ebp                      ;#005549C9: 211152 14                  uv 00 24  1 219 04 *04*
    mov [esi+20],ebp                      ;#005548CC: 211156 14                  uv 00 60  1 116      
    mov [eax-4],esi                       ;#00555343: 211160 FC                  uv 00 41  1 819      
    mov [ecx+4],esi                       ;#00555277: 211161 04                  uv 00 42  1 758      
    mov [edx+4],esi                       ;#00554E93: 211162 04                  uv 00 44  1 269      
    mov [eax+edx-4],esi                   ;#0055530E: 211164020 FC               uv 00 45  1 798      
    mov [esp+16],esi                      ;#005510E7: 211164044 10               uv 00 50  1 190      
    mov [edi+ecx*4+20],esi                ;#0055532A: 211164217 14               uv 00 C2  1 802      
    mov [edi+edx*4+20],esi                ;#00554E8D: 211164227 14               vu 00 C4  1 267      
    mov [ecx+edi*4+20],esi                ;#00554E12: 211164271 14               uv 00 C2  1 167      
    mov [ebx+edi*4+8],esi                 ;#00554FEE: 211164273 08               uv 00 C8  1 500      
    mov [ebp] (canvas),esi                ;#004D6BC6: 211165 00                  uv 00 60  1   4 40   
    mov [esi+24],esi                      ;#005551C3: 211166 18                  uv 00 40  1 674      
    mov [eax-4],edi                       ;#00554EBD: 211170 FC                  uv 00 81  1 278    *01*
    mov [esp+28],edi                      ;#00555504: 211174044 1C               vu 00 90  1 108       
    mov [ebx+eax*4+4],edi                 ;#00550F1D: 211174203 04               vu 00 89  1  54      
    mov [ebx+edx*4-8],edi                 ;#005524C7: 211174223 F8               uv 00 8C  1 159      
    mov [ebp-4] (name),edi                ;#004D6C1C: 211175 FC                  uv 00 A0  1  18 80   
    mov [esi+24],edi                      ;#005548D1: 211176 18                  uv 00 C0  1 117      
    mov [ebp-212] (i),eax                 ;#0055746B: 211205 2CFFFFFF            vu 00 21  1 989      
    mov [ebp-212] (i),ecx                 ;#005572A6: 211215 2CFFFFFF            uv 00 22  1 917      
    mov [ebx+esi*4+264],edx               ;#00554CFC: 211224263 08010000         vu 00 4C  1  52      
    mov [edi+esi*4+128],ebx               ;#00555223: 211234267 80000000         vu 00 C8  1 729      
    mov [ebp-180] (symtab[1515]),ebx      ;#00556FDA: 211235 4CFFFFFF            uv 00 28  1 811      
    mov [ebp-216] (symtab[1525]),esi      ;#00559A30: 211265 28FFFFFF            vu 00 60  1 268       
    mov [ebp-136] (varno),edi             ;#00557C39: 211275 78FFFFFF            uv 00 A0  1 124       
    mov ecx,eax                           ;#0052C941: 211301                     vu 02 01  1  26      
    mov edx,eax                           ;#004DC72B: 211302                     uv 04 01  1  83      
    mov esi,eax                           ;#004D3918: 211306                     vu 40 01  1  81      
    mov edi,eax                           ;#0052CC30: 211307                     uv 80 01  1  50      
    mov eax,ecx                           ;#0052CC8C: 211310                     uv 01 02  1  64      
    mov edx,ecx                           ;#00520A76: 211312                     uv 04 02  1  81      
    mov esi,ecx                           ;#00552D0E: 211316                     vu 40 02  1  18      
    mov edi,ecx                           ;#00529977: 211317                     uv 80 02  1  31      
    mov eax,esi                           ;#00552DBF: 211360                     vu 01 40  1   6      
    mov ecx,esi                           ;#0052C51F: 211361                     uv 02 40  1  10      
    mov edx,esi                           ;#004DC828: 211362                     uv 04 40  1 148      
    mov edi,esi                           ;#004DAC03: 211367                     uv 80 40  1   4      
    mov eax,edi                           ;#00521736: 211370                     uv 01 80  1 113      
    mov ecx,edi                           ;#005537FD: 211371                     uv 02 80  1 493      
    mov edx,edi                           ;#004DC68B: 211372                     uv 04 80  1  48      
    mov esi,edi                           ;#0055C1FE: 211376                     uv 40 80  1  35      
    mov al,[esi+edi]                      ;#0055249A: 212004076                  uv 01 C0  1 150      
    mov al,[edi]                          ;#00552443: 212007                     uv 01 80  1 118    *80*
    mov cl,[esi]                          ;#00551DEB: 212016                     uv 02 40  1 316      
    mov cl,[edi]                          ;#0055E2CB: 212017                     uv 02 80  1  18      
    mov al,[ebx+esi*4-1]                  ;#00551D70: 212104263 FF               uv 01 48  1 273      
    mov al,[esi-1]                        ;#00550B6E: 212106 FF                  uv 01 40  1  20    *40*
    mov cl,[ebx+eax*4-1]                  ;#00550D40: 212114203 FF               uv 02 09  1 235      
    mov dl,[edi-1]                        ;#00550CB4: 212127 FF                  uv 04 80  1 171      
    mov ah,[ebx+esi*4-1]                  ;#00552462: 212144263 FF               uv 01 48  1 126      
    mov ah,[edi-1]                        ;#00550B75: 212147 FF                  uv 01 80  1  22      
    mov ch,ah                             ;#00550B98: 212354                     uv 02 01  1  39      
    mov dh,ah                             ;#00550B9A: 212364                     vu 04 01  1  39      
    mov eax,[eax]                         ;#0055E39D: 213000                     uv 01 01  1   6    *01*
    mov eax,[edx]                         ;#00552393: 213002                     vu 01 04  1  35      
    mov eax,[esp]                         ;#00555136: 213004044                  vu 01 10  1 634      
    mov eax,[eax+edi*4]                   ;#005523D1: 213004270                  uv 01 81  1  63    *01*
    mov eax,[esi+edi*4]                   ;#0055249F: 213004276                  uv 01 C0  1 151      
    mov eax,[#00402008]                   ;#00554782: 213005 08204000            uv 01 00  1  10      
    mov eax,[esi]                         ;#00555511: 213006                     uv 01 40  1 109    *40*
    mov eax,[edi]                         ;#004D6E51: 213007                     uv 01 80  1  18 80 *80*
    mov ecx,[eax]                         ;#0055580A: 213010                     uv 02 01  1 146 01 *01*
    mov ecx,[ecx]                         ;#00550E73: 213011                     vu 02 02  1  17      
    mov ecx,[edx]                         ;#00550F2E: 213012                     vu 02 04  1  58      
    mov ecx,[esp]                         ;#00555535: 213014044                  uv 02 10  1 113       
    mov ecx,[#00404A0C] (canvas)          ;#004D6BFB: 213015 0C4A4000            uv 02 00  1  11      
    mov ecx,[edi]                         ;#0055462D: 213017                     uv 02 80  1  16    *80*
    mov edx,[eax]                         ;#00551B91: 213020                     vu 04 01  1 110      
    mov edx,[ecx]                         ;#00552441: 213021                     uv 04 02  1 116      
    mov edx,[esp+ecx]                     ;#00552257: 213024014                  uv 04 12  1 110    *02*
    mov edx,[esp]                         ;#0055509F: 213024044                  uv 04 10  1 566      
    mov edx,[esi+edi]                     ;#005553FC: 213024076                  vu 04 C0  1 936      
    mov edx,[esp+ecx*4]                   ;#00552403: 213024214                  uv 04 12  1  77      
    mov edx,[eax+edi*4]                   ;#00551CEA: 213024270                  uv 04 81  1 233      
    mov edx,[#0040324C]                   ;#0052B71A: 213025 4C324000            vu 04 00  1  82      
    mov edx,[esi]                         ;#00554938: 213026                     uv 04 40  1 152      
    mov edx,[edi]                         ;#0055589E: 213027                     vu 04 80  1  30      
    mov esi,[eax]                         ;#00551B05: 213060                     uv 40 01  1  59      
    mov esi,[esp]                         ;#005504FD: 213064044                  uv 40 10  1  46      
    mov esi,[esi+ecx*4]                   ;#0055E177: 213064216                  uv 40 42  1   6 40 *42*
    mov esi,[esi+edi*4]                   ;#00551F1C: 213064276                  uv 40 C0  1  81      
    mov esi,[#00404A10] (cddbuffer)       ;#004D6BC0: 213065 104A4000            uv 40 00  1   3      
    mov esi,[edi]                         ;#00550E71: 213067                     uv 40 80  1  17      
    mov edi,[eax]                         ;#00552139: 213070                     uv 80 01  1 265      
    mov edi,[edx]                         ;#00551A3C: 213072                     uv 80 04  1 445      
    mov edi,[esp]                         ;#005555B6: 213074044                  uv 80 10  1 120       
    mov edi,[esi+ecx*4]                   ;#005556DC: 213074216                  uv 80 42  1 133    *02*
    mov edi,[#00404A1C]                   ;#004D6C16: 213075 1C4A4000            uv 80 00  1  17      
    mov edi,[esi]                         ;#00554628: 213076                     uv 80 40  1  13    *40*
    mov edi,[edi]                         ;#00551F54: 213077                     vu 80 80  1  95      
    mov eax,[eax+8]                       ;#00553378: 213100 08                  uv 01 01  1 269 01 *01*
    mov eax,[esp+8]                       ;#00554F0E: 213104044 08               uv 01 10  1 324      
    mov eax,[ebx+ecx*4-12]                ;#00507484: 213104213 F4               uv 01 0A  1  11      
    mov eax,[esp+ecx*4+4]                 ;#0055165D: 213104214 04               vu 01 12  1  71      
    mov eax,[ebx+edx*4+40]                ;#005548F7: 213104223 28               vu 01 0C  1 137      
    mov eax,[ebx+esi*4-12]                ;#0052AF54: 213104263 F4               uv 01 48  1  11      
    mov eax,[edi+esi*4+20]                ;#00555038: 213104267 14               uv 01 C0  1 544      
    mov eax,[ecx+edi*4+20]                ;#00554E08: 213104271 14               uv 01 82  1 165 02 *02*
    mov eax,[ebx+edi*4-12]                ;#004DC9D9: 213104273 F4               uv 01 88  1 253 80 *80*
    mov eax,[ebp-8] (symtab[8394])        ;#004D6C31: 213105 F8                  vu 01 20  1  24      
    mov eax,[esi-8]                       ;#00552062: 213106 F8                  uv 01 40  1 184      
    mov eax,[edi-12]                      ;#004D6D03: 213107 F4                  uv 01 80  1  63    *80*
    mov ecx,[eax+4]                       ;#00554EF7: 213110 04                  uv 02 01  1 320      
    mov ecx,[ecx-12]                      ;#005512BB: 213111 F4                  uv 02 02  1 340      
    mov ecx,[edx-16]                      ;#005510D3: 213112 F0                  uv 02 04  1 185      
    mov ecx,[esp+12]                      ;#00554DB0: 213114044 0C               vu 02 10  1 120      
    mov ecx,[ebx+eax*4-12]                ;#0052864A: 213114203 F4               uv 02 09  1  92      
    mov ecx,[ebx+edx*4-8]                 ;#0055556E: 213114223 F8               uv 02 0C  1 116       
    mov ecx,[edi+edx*4+20]                ;#00554ED1: 213114227 14               uv 02 84  1 294      
    mov ecx,[ebx+esi*4-12]                ;#004DC7EC: 213114263 F4               uv 02 48  1 133 40 *40*
    mov ecx,[ebx+edi*4-12]                ;#004DC651: 213114273 F4               uv 02 88  1  32 80 *80*
    mov ecx,[ebp] (width)                 ;#004D6CC5: 213115 00                  vu 02 20  1  52      
    mov ecx,[esi-12]                      ;#00554A5B: 213116 F4                  uv 02 40  1 293 40 *40*
    mov ecx,[edi-12]                      ;#00551F87: 213117 F4                  vu 02 80  1 105      
    mov edx,[eax+8]                       ;#00554E77: 213120 08                  uv 04 01  1 261      
    mov edx,[edx+12]                      ;#00554BE6: 213122 0C                  uv 04 04  1  54    *04*
    mov edx,[esp+16]                      ;#00554EFE: 213124044 10               uv 04 10  1 321      
    mov edx,[ebx+eax*4-12]                ;#004DC661: 213124203 F4               uv 04 09  1  38 01 *01*
    mov edx,[esp+ecx*4+16]                ;#00551B51: 213124214 10               vu 04 12  1  90      
    mov edx,[esp+edx*4+4]                 ;#005515BB: 213124224 04               vu 04 14  1   2      
    mov edx,[ebx+esi*4-12]                ;#0055245E: 213124263 F4               vu 04 48  1 125      
    mov edx,[eax+edi*4+16]                ;#00554A94: 213124270 10               uv 04 81  1 309 01 *01*
    mov edx,[edx+edi*4-4]                 ;#005548EF: 213124272 FC               uv 04 84  1 134    *04*
    mov edx,[ebx+edi*4-12]                ;#004DC7E1: 213124273 F4               uv 04 88  1 128 80 *80*
    mov edx,[ebp-8] (symtab[8394])        ;#004D6CA8: 213125 F8                  uv 04 20  1  45      
    mov edx,[esi+12]                      ;#005553AB: 213126 0C                  uv 04 40  1 894      
    mov edx,[edi-12]                      ;#00550BBC: 213127 F4                  uv 04 80  1  54      
    mov ebx,[edi-4]                       ;#00551FCB: 213137 FC                  uv 08 80  1 133      
    mov ebp,[ebp+20] (prevebp)            ;#005549A9: 213155 14                  vu 20 20  1 203      
    mov esi,[eax-4]                       ;#00554DA7: 213160 FC                  uv 40 01  1 119      
    mov esi,[edx-8]                       ;#005556BB: 213162 F8                  vu 40 04  1 131       
    mov esi,[esp+12]                      ;#005549F5: 213164044 0C               uv 40 10  1 252      
    mov esi,[ebx+eax*4-12]                ;#00515260: 213164203 F4               uv 40 09  1  30 01 *01*
    mov esi,[ebx+ecx*4-12]                ;#004DC8E9: 213164213 F4               uv 40 0A  1 197 02 *02*
    mov esi,[esp+ecx*4+4]                 ;#005515FA: 213164214 04               uv 40 12  1   2      
    mov esi,[esi+edx*4+16]                ;#0055E28C: 213164226 10               uv 40 44  1   6 40 *44*
    mov esi,[ebx+esi*4+8]                 ;#00554CD7: 213164263 08               uv 40 48  1  30      
    mov esi,[ebx+edi*4-12]                ;#00528589: 213164273 F4               uv 40 88  1  57 80 *80*
    mov esi,[ebp-8] (symtab[8394])        ;#004D6C5E: 213165 F8                  uv 40 20  1  35      
    mov esi,[esi+4]                       ;#0055462A: 213166 04                  vu 40 40  1  13      
    mov edi,[eax-4]                       ;#00554E55: 213170 FC                  uv 80 01  1 240    *01*
    mov edi,[ecx-12]                      ;#00551212: 213171 F4                  uv 80 02  1 279    *02*
    mov edi,[edx-4]                       ;#005556BE: 213172 FC                  uv 80 04  1 131       
    mov edi,[esp+12]                      ;#00554EFA: 213174044 0C               vu 80 10  1 320      
    mov edi,[ebx+eax*4-12]                ;#004DC8D9: 213174203 F4               uv 80 09  1 191 01 *01*
    mov edi,[ebx+ecx*4-12]                ;#004DC908: 213174213 F4               uv 80 0A  1 203      
    mov edi,[esi+ecx*4-4]                 ;#00554A5E: 213174216 FC               uv 80 42  1 296 02 *02*
    mov edi,[ebx+edx*4-8]                 ;#005524B8: 213174223 F8               uv 80 0C  1 157      
    mov edi,[ebx+esi*4-12]                ;#00501542: 213174263 F4               uv 80 48  1  43 40 *40*
    mov edi,[ebx+edi*4+8]                 ;#00554D44: 213174273 08               uv 80 88  1  81      
    mov edi,[ebp+20] (prevebp)            ;#004D6D00: 213175 14                  vu 80 20  1  60      
    mov edi,[esi-20]                      ;#00551057: 213176 EC                  vu 80 40  1 142      
    mov edi,[edi-4]                       ;#00550B65: 213177 FC                  uv 80 80  1  17      
    mov eax,[ebx+esi*4+264]               ;#00554CF5: 213204263 08010000         uv 01 48  1  52      
    mov eax,[edi+esi*4+128]               ;#00555044: 213204267 80000000         uv 01 C0  1 546      
    mov eax,[ebp-216] (symtab[1525])      ;#00557318: 213205 28FFFFFF            vu 01 20  1 932      
    mov eax,[esi+176]                     ;#00555C11: 213206 B0000000            uv 01 40  1 119      
    mov eax,[edi-180]                     ;#005573D1: 213207 4CFFFFFF            uv 01 80  1 967    *80*
    mov ecx,[ebp-168] (symtab[1512])      ;#00556EEB: 213215 58FFFFFF            vu 02 20  1 780      
    mov edx,[ecx+184]                     ;#0055469F: 213221 B8000000            uv 04 02  1  46 02 *02*
    mov edx,[ebp-168] (symtab[1512])      ;#005570BC: 213225 58FFFFFF            uv 04 20  1 839      
    mov edx,[esi+184]                     ;#0055462F: 213226 B8000000            vu 04 40  1  16      
    mov esp,[esi+196]                     ;#0055463D: 213246 C4000000            uv 10 40  1  18      
    mov ebp,[esi+180]                     ;#00554635: 213256 B4000000            uv 20 40  1  17      
    mov esi,[ebp-184] (symtab[1516])      ;#00556FF1: 213265 48FFFFFF            vu 40 20  1 813      
    mov esi,[esi+160]                     ;#00554653: 213266 A0000000            vu 40 40  1  21      
    mov edi,[ebp-156] (msgs)              ;#00556C12: 213275 64FFFFFF            vu 80 20  1 642      
    mov edi,[esi+156]                     ;#0055464D: 213276 9C000000            uv 80 40  1  21      
    mov eax,ecx                           ;#00555542: 213301                     uv 01 02  1 114       
    mov eax,edx                           ;#0052BAD8: 213302                     uv 01 04  1   9      
    mov eax,ebx                           ;#00552DD0: 213303                     uv 01 08  1   9      
    mov eax,esp                           ;#00555B51: 213304                     vu 01 10  1  89      
    mov eax,ebp                           ;#0052B401: 213305                     uv 01 20  1   3      
    mov eax,esi                           ;#00551A9F: 213306                     uv 01 40  1 485      
    mov eax,edi                           ;#00555B08: 213307                     vu 01 80  1  77      
    mov ecx,eax                           ;#0055560E: 213310                     uv 02 01  1 125       
    mov ecx,edx                           ;#004D6882: 213312                     vu 02 04  1  80      
    mov ecx,ebp                           ;#004D6C81: 213315                     vu 02 20  1  39      
    mov ecx,esi                           ;#00550F5F: 213316                     vu 02 40  1  72      
    mov ecx,edi                           ;#00554403: 213317                     uv 02 80  1  39      
    mov edx,eax                           ;#004D6C42: 213320                     uv 04 01  1  29      
    mov edx,ecx                           ;#004D334A: 213321                     uv 04 02  1 160      
    mov edx,ebx                           ;#0055146D: 213323                     uv 04 08  1 497      
    mov edx,ebp                           ;#00553343: 213325                     uv 04 20  1 258      
    mov edx,esi                           ;#004D6A6E: 213326                     uv 04 40  1  37      
    mov edx,edi                           ;#004D30E1: 213327                     uv 04 80  1  18      
    mov ebx,esi                           ;#00551FE3: 213336                     uv 08 40  1 137      
    mov esp,edi                           ;#00554664: 213347                     uv 10 80  1  26      
    mov ebp,ecx                           ;#00554960: 213351                     uv 20 02  1 175      
    mov ebp,esi                           ;#00554817: 213356                     vu 20 40  1  47      
    mov esi,eax                           ;#0052BAE8: 213360                     uv 40 01  1  59      
    mov esi,ecx                           ;#005512FC: 213361                     uv 40 02  1 368      
    mov esi,edx                           ;#005521DE: 213362                     vu 40 04  1   5      
    mov esi,esp                           ;#005515C9: 213364                     uv 40 10  1   5      
    mov esi,ebp                           ;#00554931: 213365                     vu 40 20  1 150      
    mov esi,edi                           ;#00554FD6: 213367                     uv 40 80  1 495      
    mov edi,eax                           ;#005252B6: 213370                     uv 80 01  1  40 01   
    mov edi,ecx                           ;#00515AC5: 213371                     uv 80 02  1  60 02   
    mov edi,edx                           ;#0055445D: 213372                     uv 80 04  1 166      
    mov edi,esp                           ;#005547EF: 213374                     uv 80 10  1  40      
    mov edi,ebp                           ;#005005AC: 213375                     uv 80 20  1  45      
    mov edi,esi                           ;#004DBAE9: 213376                     uv 80 40  1  99 40   
    lea eax,[ebx+eax*4]                   ;#005523B9: 215004203                  vu 01 09  1  55      
    lea eax,[ebx+esi*4]                   ;#00551C87: 215004263                  uv 01 48  1 203      
    lea eax,[eax+edi*4]                   ;#005556EE: 215004270                  vu 01 81  1 133       
    lea eax,[ebx+edi*4]                   ;#00552092: 215004273                  uv 01 88  1 196      
    lea eax,[esi+edi*4]                   ;#00551B84: 215004276                  uv 01 C0  1 108      
    lea ecx,[esi+edx*4]                   ;#00551897: 215014226                  uv 02 44  1 295      
    lea ecx,[ebx+edi*4]                   ;#00551CD0: 215014273                  uv 02 88  1 223      
    lea edx,[edi+eax*4]                   ;#00551C11: 215024207                  vu 04 81  1 156      
    lea edx,[eax+edi*4]                   ;#00551C2C: 215024270                  uv 04 81  1 174 01 *01*
    lea esp,[esp+ecx*4]                   ;#005515CB: 215044214                  vu 10 12  1   5      
    lea esi,[eax+edx]                     ;#00555315: 215064020                  uv 40 05  1 799      
    lea esi,[esi+edi]                     ;#00551F26: 215064076                  uv 40 C0  1  83      
    lea esi,[ebx+eax*4]                   ;#00550B68: 215064203                  vu 40 09  1  17      
    lea esi,[esi+eax*4]                   ;#00551829: 215064206                  uv 40 41  1 258 01 *01*
    lea esi,[ebx+edx*4]                   ;#00551AA1: 215064223                  vu 40 0C  1 485      
    lea esi,[esi+edx*4]                   ;#00551FFA: 215064226                  vu 40 44  1 142      
    lea esi,[ebx+esi*4]                   ;#00551CC9: 215064263                  vu 40 48  1 219      
    lea esi,[esi+edi*4]                   ;#00552031: 215064276                  uv 40 C0  1 169      
    lea edi,[eax+edi]                     ;#00551D87: 215074070                  vu 80 81  1 289      
    lea edi,[ebx+eax*4]                   ;#0055203D: 215074203                  uv 80 09  1 171      
    lea edi,[edi+eax*4]                   ;#00550F8F: 215074207                  uv 80 81  1  83      
    lea edi,[esi+edx*4]                   ;#005512F9: 215074226                  vu 80 44  1 367      
    lea edi,[edi+edx*4]                   ;#00551756: 215074227                  vu 80 84  1 163      
    lea edi,[eax+edi*4]                   ;#00551472: 215074270                  uv 80 81  1 498      
    lea edi,[#00402000]                   ;#00554855: 215075 00204000            vu 80 00  1  57      
    lea eax,[ecx+1]                       ;#0055122A: 215101 01                  uv 01 02  1 285      
    lea eax,[edx-20]                      ;#005510D6: 215102 EC                  vu 01 04  1 185      
    lea eax,[edx+eax*4+1]                 ;#0055111A: 215104202 01               uv 01 05  1 203      
    lea eax,[ebp-20] (symtab[8408])       ;#004D6AD3: 215105 EC                  uv 01 20  1  64      
    lea eax,[esi+28]                      ;#005551C6: 215106 1C                  vu 01 40  1 674      
    lea ecx,[eax+4]                       ;#005557E5: 215110 04                  vu 02 01  1 144       
    lea ecx,[edx+17]                      ;#00550EC7: 215112 11                  uv 02 04  1  32      
    lea ecx,[ebx+edx*2+1]                 ;#005510ED: 215114123 01               uv 02 0C  1 191      
    lea ecx,[ebx+ecx*4+20]                ;#005554CF: 215114213 14               uv 02 0A  1 106 08 *08*
    lea ecx,[ebx+edx*4+20]                ;#00551053: 215114223 14               uv 02 0C  1 142      
    lea ecx,[ebp-4] (height)              ;#004D6C5B: 215115 FC                  vu 02 20  1  34      
    lea edx,[eax-1]                       ;#004DE83D: 215120 FF                  vu 04 01  1 209      
    lea edx,[ecx+1]                       ;#0052C7A7: 215121 01                  uv 04 02  1  45      
    lea edx,[ebp-4] (p0)                  ;#0050152F: 215125 FC                  uv 04 20  1  38      
    lea edx,[esi+1]                       ;#0050C621: 215126 01                  uv 04 40  1 131      
    lea esp,[ebx+ecx*4-8]                 ;#00554B1B: 215144213 F8               uv 10 0A  1 382 02 *02*
    lea esp,[esp+ecx*4+4]                 ;#00555D2A: 215144214 04               uv 10 12  1 159 02 *02*
    lea esi,[eax+16]                      ;#005547F9: 215160 10                  vu 40 01  1  41      
    lea esi,[eax+ecx*4+16]                ;#005548B1: 215164210 10               vu 40 03  1 109      
    lea esi,[ebp+ecx*4+32]                ;#0055489C: 215164215 20               vu 40 22  1 103      
    lea esi,[esi-4]                       ;#0055493A: 215166 FC                  vu 40 40  1 152      
    lea edi,[eax+21]                      ;#005554F4: 215170 15                  vu 80 01  1 108       
    lea edi,[edi+edx+1]                   ;#0055234D: 215174027 01               uv 80 84  1 204      
    lea edi,[edx+eax*4+4]                 ;#00551112: 215174202 04               uv 80 05  1 202 04 *04*
    lea edi,[ebx+esi*4-1]                 ;#0055E2AA: 215174263 FF               uv 80 48  1  11      
    lea edi,[ebp-12] (symtab[8395])       ;#004D6CC2: 215175 F4                  uv 80 20  1  52      
    lea edi,[edi-1]                       ;#005523B1: 215177 FF                  vu 80 80  1  53      
    lea eax,[ebp-156] (msgs)              ;#00556048: 215205 64FFFFFF            uv 01 20  1  24      
    lea eax,[edi+12240]                   ;#005548A0: 215207 D02F0000            uv 01 80  1 106    *80*
    lea ecx,[ebx+edx*4+240]               ;#005553D0: 215214223 F0000000         vu 02 0C  1 917      
    lea ecx,[ebx+esi*4+240]               ;#00555153: 215214263 F0000000         uv 02 48  1 639      
    lea ecx,[ebx+edi*4+240]               ;#00554DD8: 215214273 F0000000         vu 02 88  1 143      
    lea ecx,[ebp-168] (symtab[1512])      ;#00556E9E: 215215 58FFFFFF            vu 02 20  1 770      
    lea edx,[ebx+esi*4+240]               ;#00555072: 215224263 F0000000         uv 04 48  1 557      
    lea edx,[ebp-220] (symtab[1526])      ;#00559DAE: 215225 24FFFFFF            uv 04 20  1 284       
    lea esi,[ebx+edx*4+128]               ;#005553C9: 215264223 80000000         uv 40 0C  1 917      
    lea edi,[ebp-172] (symtab[1513])      ;#00556F56: 215275 54FFFFFF            uv 80 20  1 795      
    pop [#00404A0C] (canvas)              ;#004D30E8: 217005 0C4A4000            np 00 00  3  19      
    pop dword[edi]                        ;#00551DFA: 217007                     np 00 80  3 319      
    pop dword[eax+4]                      ;#005549E1: 217100 04                  np 00 01  3 230    *01*
    pop dword[ebx+esi*4+16]               ;#00554F5A: 217104263 10               np 00 48  3 345      
    pop dword[ebp-8] (symtab[8394])       ;#004D6C49: 217105 F8                  np 00 20  3  30      
    pop dword[esi-4]                      ;#005510A5: 217106 FC                  np 00 40  3 161      
    pop dword[edi-8]                      ;#0055112B: 217107 F8                  np 00 80  3 207      
    pop dword[ebp-220] (symtab[1526])     ;#0055741E: 217205 24FFFFFF            np 00 20  3 978      
    nop                                   ;#00554F70: 220                        uv 00 00  1 366      
    xchg eax,ecx                          ;#00550743: 221                        np 03 03  2 268      
    xchg eax,edi                          ;#005519F1: 227                        np 81 81  2 415      
    cdq                                   ;#004D6884: 231                        np 04 01  2  81      
    sahf                                  ;#00555948: 236                        np 00 01  2  96      
    mov eax,[#0040201C]                   ;#004D6CC8: 241 1C204000               uv 01 00  1  53      
    mov [#00404A34] (cb_redraw),eax       ;#004D304E: 243 344A4000               uv 00 01  1  10      
    test al,8                             ;#005521E0: 250 08                     uv 00 01  1   6      
    test eax,1                            ;#005554AE: 251 01000000               uv 00 01  1 102 01   
    stosb                                 ;#005520DE: 252                        np 80 81  3 224    *80*
    stosd                                 ;#00551CDB: 253                        np 80 81  3 227      
    lodsb                                 ;#00554865: 254                        np 41 40  2  62      
    lodsd                                 ;#0055130E: 255                        np 41 40  2 380      
    mov al,120                            ;#0052C796: 260 78                     uv 01 00  1  43      
    mov cl,12                             ;#00551F32: 261 0C                     uv 02 00  1  86      
    mov eax,1                             ;#004D6C4C: 270 01000000               uv 01 00  1  33      
    mov ecx,3                             ;#004D6BB1: 271 03000000               uv 02 00  1   1      
    mov edx,6084                          ;#004D6BB6: 272 C4170000               vu 04 00  1   1      
    mov esi,8385                          ;#004D6BD1: 276 C1200000               uv 40 00  1   6      
    mov edi,486                           ;#004D3014: 277 E6010000               uv 80 00  1   5      
    shl ch,7                              ;#00550BA2: 300345 07                  u  02 02  1  41      
    shl dh,4                              ;#00550BA5: 300346 04                  u  04 04  1  42      
    ror eax,2                             ;#00554791: 301310 02                  np 01 01  1  16      
    ror edx,2                             ;#00555445: 301312 02                  np 04 04  1 983      
    ror ebx,2                             ;#00551FF0: 301313 02                  np 08 08  1 140      
    ror esi,2                             ;#0055218B: 301316 02                  np 40 40  1 290      
    ror edi,2                             ;#005554FA: 301317 02                  np 80 80  1 108       
    shl eax,2                             ;#00551C29: 301340 02                  u  01 01  1 171      
    shl ecx,2                             ;#00555835: 301341 02                  u  02 02  1 147       
    shl edx,2                             ;#00555640: 301342 02                  u  04 04  1 127       
    shl esi,2                             ;#00552466: 301346 02                  u  40 40  1 127      
    shl edi,2                             ;#00555353: 301347 02                  u  80 80  1 824      
    shr eax,2                             ;#00554A4E: 301350 02                  u  01 01  1 287      
    shr ecx,2                             ;#00551501: 301351 02                  u  02 02  1 545      
    shr edx,2                             ;#00554862: 301352 02                  u  04 04  1  61      
    shr esi,2                             ;#005513ED: 301356 02                  u  40 40  1 456      
    shr edi,2                             ;#0055E2ED: 301357 02                  u  80 80  1  24      
    sar edx,31                            ;#0052BADA: 301372 1F                  u  04 04  1  10      
    ret 12                                ;#00554EF4: 302 0C00                   np 00 00  3 317      
    ret                                   ;#005558B7: 303                        np 00 00  2  40      
    mov [esi+ecx], byte 0                 ;#0055209F: 306004016 00               uv 00 42  1 199      
    mov [edi], byte 45                    ;#00554574: 306007 2D                  uv 00 80  1  82      
    mov [eax], dword 1                    ;#005555BC: 307000 01000000            uv 00 01  1 120       
    mov [edx], dword #00424354            ;#00554D6D: 307002 54434200            vu 00 04  1 103      
    mov [esp], dword -2                   ;#00554F49: 307004044 FEFFFFFF         uv 00 10  1 342      
    mov [#00402E50], dword 1              ;#00560060: 307005 502E4000 01000000   uv 00 00  1   1      
    mov [esi], dword #00484253            ;#005551B0: 307006 53424800            vu 00 40  1 671      
    mov [edi], dword h4                   ;#0052B44A: 307007 00000040            vu 00 80  1  16      
    mov [eax+8], dword 1                  ;#00555448: 307100 08 01000000         uv 00 01  1 984      
    mov [edx-8], dword 1                  ;#00555652: 307102 F8 01000000         uv 00 04  1 128       
    mov [esp+4], dword 2146435071         ;#00555997: 307104044 04 FFFFEF7F      uv 00 10  1 363      
    mov [ebx+edi*4+16], dword -1          ;#00554D9E: 307104273 10 FFFFFFFF      uv 00 88  1 116 80 *80*
    mov [ebp+28] (retaddr),#004D6BEC      ;#004D6BE0: 307105 1C EC6B4D00         uv 00 20  1   8      
    mov [esi+8], dword 21                 ;#00554801: 307106 08 15000000         vu 00 40  1  44      
    mov [edi-12], dword h4                ;#004D6D06: 307107 F4 00000040         vu 00 80  1  63      
    mov [eax+12276], dword 1012290370     ;#005547E0: 307200 F42F0000 4253563C   uv 00 01  1  35      
    mov [edx+272], dword #00424345        ;#00554D73: 307202 10010000 45434200   uv 00 04  1 104      
    mov [symtab[1559]], dword 14          ;#00559646: 307205 14FFFFFF 0E000000   uv 00 20  1 250       
    mov [edi-180], dword h4               ;#005573D7: 307207 4CFFFFFF 00000040   vu 00 80  1 967      
    int3                                  ;#00533A13: 314                        np 00 00 13   3      
    shl ecx,1                             ;#00555544: 321341                     u  02 02  1 114       
    shl edx,1                             ;#0052C7AA: 321342                     u  04 04  1  46      
    shl esi,1                             ;#0052BAEE: 321346                     u  40 40  1  61      
    shr eax,1                             ;#005559DE: 321350                     u  01 01  1 446      
    shr edx,1                             ;#00555300: 321352                     u  04 04  1 796      
    sar eax,1                             ;#00531BFE: 321370                     u  01 01  1 151       
    shl eax,cl                            ;#005558A0: 323340                     np 01 03  4  31      
    fcom st2                              ;#005559C4: 330322                     np 00 00  1 411      
    fcomp                                 ;#00555944: 330331                     np 00 00  1  89      
    fldcw word[esp]                       ;#00553D9F: 331054044                  np 00 10  8  22      
    fldcw word[#00402218] (down53)        ;#00553DF8: 331055 18224000            np 00 00  8  42      
    fnstcw word[esp]                      ;#00553D90: 331074044                  np 00 10  2  17    *10*
    fld st0                               ;#0055596C: 331300                     np 00 00  1 232      
    fld st1                               ;#005559C0: 331301                     np 00 00  1 390      
    fxch                                  ;#0055594B: 331311                     np 00 00  1  99      
    fchs                                  ;#005559F4: 331340                     np 00 00  1 669      
    fabs                                  ;#005559BE: 331341                     np 00 00  1 389      
    fld1                                  ;#00555976: 331350                     np 00 00  2 314      
    fldpi                                 ;#00554C0F: 331353                     np 00 00  5   6      
    fldz                                  ;#00555942: 331356                     np 00 00  2  87      
    f2xm1                                 ;#00555974: 331360                     np 00 00 57 257      
    fyl2x                                 ;#0055596A: 331361                     np 00 00 103 12       
    fprem                                 ;#0055044A: 331370                     np 00 00 64 115      
    frndint                               ;#0055596E: 331374                     np 00 00 20 233      
    fscale                                ;#0055597A: 331375                     np 00 00 32 319      
    fild dword[esp]                       ;#00555532: 333004044                  np 00 10  3 112       
    fild dword[esi]                       ;#0055551E: 333006                     np 00 40  3 110       
    fild dword[edi]                       ;#005543FC: 333007                     np 00 80  3  35      
    fist dword[esp]                       ;#0055552D: 333024044                  np 00 10  6 112       
    fistp dword[esp]                      ;#005559DA: 333034044                  np 00 10  6 439    *10*
    fild dword[esp+28]                    ;#00555618: 333104044 1C               np 00 10  3 125       
    fninit                                ;#00553D8B: 333343                     np 00 00 12   2      
    fsub st1,st0                          ;#00555970: 334351                     np 00 00  3 253      
    fld qword[ecx]                        ;#0055041B: 335001                     np 00 02  1  99      
    fld qword[esp]                        ;#00555987: 335004044                  np 00 10  1 354      
    fld qword[ebx+eax*4]                  ;#00550C64: 335004203                  np 00 09  1 136      
    fld qword[ebx+ecx*4]                  ;#005509CD: 335004213                  np 00 0A  1  56      
    fld qword[ebx+edx*4]                  ;#00550C51: 335004223                  np 00 0C  1 125      
    fld qword[ebx+esi*4]                  ;#005504EA: 335004263                  np 00 48  1  34      
    fld qword[ebx+edi*4]                  ;#00550D7C: 335004273                  np 00 88  1 265      
    fld qword[esi]                        ;#00550B92: 335006                     np 00 40  1  31      
    fld qword[edi]                        ;#00552287: 335007                     np 00 80  1 132      
    fstp qword[esp]                       ;#00555527: 335034044                  np 00 10  2 111    *10*
    fstp qword[ebx+edx*4]                 ;#0055557E: 335034223                  np 00 0C  2 116       
    fstp qword[ebx+esi*4]                 ;#00554C18: 335034263                  np 00 48  2  15    *40*
    fstp qword[eax+8]                     ;#005555CE: 335130 08                  np 00 01  2 120       
    fstp st0                              ;#0055597E: 335330                     np 00 00  1 352      
    fstp st1                              ;#00550451: 335331                     np 00 00  1 188      
    faddp st1,st0                         ;#00555978: 336301                     np 00 00  3 316      
    fmulp st1,st0                         ;#00554424: 336311                     np 00 00  3  67      
    fcompp                                ;#00550B94: 336331                     np 00 00  1  32      
    fsubp st1,st0                         ;#0055070C: 336351                     np 00 00  3 258      
    fdivp st1,st0                         ;#0055442B: 336371                     np 00 00 39  76      
    fild qword[esp]                       ;#00555788: 337054044                  np 00 10  3 140       
    fistp qword[esp]                      ;#00552291: 337074044                  np 00 10  6 137    *10*
    fnstsw ax                             ;#00555946: 337340                     np 01 00  6  90      
    call #00554602 (:>initFEH)            ;#004D3000: 350 FD150800               v  00 00  1   1      
    jmp #004FF2B9 (code:cdCanvasActivate) ;#004D6BE7: 351 CD860200               v  00 00  1   8      
    jmp #00552B96                         ;#00552B8D: 353 07                     v  00 00  1  25      
    rep movsb                             ;#005520DA: 363:244                    np C2 C2  4 218    *C0*
    rep movsd                             ;#005515CE: 363:245                    np C2 C2  4   8    *40*
    repe cmpsb                            ;#00550BCC: 363:246                    np C2 C2  5  58      
    rep stosb                             ;#00551945: 363:252                    np 82 83  3 354    *80*
    rep stosd                             ;#005548DF: 363:253                    np 82 83  3 123    *80*
    test byte[ebx+eax*4-1],#80            ;#004DC803: 366104203 FF 80            u  00 09  2 138      
    test byte[ebx+ecx*4-1],#80            ;#004DC5C8: 366104213 FF 80            u  00 0A  2   3      
    test byte[ebx+esi*4-1],#80            ;#005529E6: 366104263 FF 80            u  00 48  2   3      
    test byte[ebx+edi*4-1],#80            ;#0052B964: 366104273 FF 80            u  00 88  2  13      
    test dl,#80                           ;#00550CBA: 366302 80                  uv 00 04  1 172      
    test ah,65                            ;#0055598E: 366304 41                  uv 00 01  1 362      
    test dword[eax-4],16777215            ;#005556F3: 367100 FC FFFFFF00         u  00 01  2 134    *01*
    test dword[edx-4],16777215            ;#00555645: 367102 FC FFFFFF00         u  00 04  2 128    *04*
    test dword[ebx+edi*4+12],512          ;#00554A76: 367104273 0C 00020000      u  00 88  2 300      
    test ecx,2048                         ;#005548FB: 367301 00080000            uv 00 02  1 138      
    test esi,1                            ;#0055535E: 367306 01000000            uv 00 40  1 827      
    test edi,1                            ;#00554E65: 367307 01000000            uv 00 80  1 257      
    neg eax                               ;#00554572: 367330                     np 01 01  1  81      
    neg ecx                               ;#005509A5: 367331                     np 02 02  1  39      
    neg edx                               ;#005558EB: 367332                     np 04 04  1  53      
    imul ecx                              ;#004D687D: 367351                     np 05 03 10  70      
    imul esi                              ;#005558FA: 367356                     np 05 41 10  57      
    div ecx                               ;#00554583: 367361                     np 05 07 41  85      
    idiv ecx                              ;#0052BAE6: 367371                     np 05 07 46  13      
    cld                                   ;#005548E1: 374                        np 00 00  2 126      
    std                                   ;#005548DE: 375                        np 00 00  2 119      
    call [#0040103C] (ExitProcess)        ;#00554B35: 377025 3C104000            np 00 00  2 403      
    jmp dword[esp]                        ;#00555BE3: 377044044                  np 00 10  2 110      
    jmp dword[esi*4+#00557A38]            ;#00557A35: 377044265 387A5500         np 00 40  2 123       
    jmp dword[edi*4+#0052EF20]            ;#0052EF1D: 377044275 20EF5200         np 00 80  2  68      
    push dword[eax]                       ;#005549D1: 377060                     np 00 01  2 224      
    push dword[edx]                       ;#00550DEB: 377062                     np 00 04  2 331      
    push dword[esp]                       ;#0055563D: 377064044                  np 00 10  2 127    *10*
    push dword[#00404A14] (cdcanvas)      ;#004D6E93: 377065 144A4000            np 00 00  2  28      
    push dword[eax+4]                     ;#0055497B: 377160 04                  np 00 01  2 187    *01*
    push dword[ecx-12]                    ;#005512F3: 377161 F4                  np 00 02  2 365      
    push dword[esp+32]                    ;#0055494D: 377164044 20               np 00 10  2 162      
    push dword[ebp] (symtab[8400])        ;#004D69D8: 377165 00                  np 00 20  2   4      
    push dword[esi-4]                     ;#00551109: 377166 FC                  np 00 40  2 197      
    push dword[ebp-180] (symtab[1515])    ;#00556FD4: 377265 4CFFFFFF            np 00 20  2 809      
    call eax                              ;#00554A53: 377320                     np 00 01  2 288      
    call edx                              ;#005505D0: 377322                     np 00 04  2 140      
    call esi                              ;#00550618: 377326                     np 00 40  2 165      
    jmp eax                               ;#00555AEC: 377340                     np 00 01  2  71      
    jmp ecx                               ;#0055392B: 377341                     np 00 02  2 555      
v2:
    add [ebx+edi*4-8],ecx                 ;#005614FC: 001114273 F8               uv 00 8A  3 380      
    add ecx,eax                           ;#00560253: 001301                     uv 02 03  1 243      
    add edi,eax                           ;#00560DD3: 001307                     uv 80 81  1 300      
    add eax,ecx                           ;#00560F6D: 001310                     uv 01 03  1 455      
    add esi,ecx                           ;#00536C98: 001316                     uv 40 42  1  18      
    add ecx,edx                           ;#005613E0: 001321                     uv 02 06  1 279      
    add edi,edx                           ;#00561E7C: 001327                     uv 80 84  1 175      
    add ecx,esi                           ;#00562F8D: 001361                     vu 02 42  1 127      
    add ecx,edi                           ;#00561CA7: 001371                     uv 02 82  1 248      
    add edx,[ebx+eax*4-12]                ;#0056104D: 003124203 F4               uv 04 0D  2 533      
    or ah,ch                              ;#005607F8: 010354                     uv 01 03  1 147 02   
    or ecx,eax                            ;#0056046F: 011301                     uv 02 03  1 747      
    or ecx,ecx                            ;#00560792: 011311                     uv 02 02  1  95      
    or ecx,[esp]                          ;#0056047E: 013014044                  uv 02 12  2 766      
    jo #005600D2                          ;#005601CB: 017200 01FFFFFF            v  00 00  1 179      
    jno #0054D0B5                         ;#0054CFCE: 017201 E1000000            v  00 00  1 552      
    jae #00561D5D                         ;#00561E3A: 017203 1DFFFFFF            v  00 00  1 151      
    je #004DF1E9                          ;#004DEFCD: 017204 16020000            v  00 00  1  59      
    jne #004DDDE0                         ;#004DDD31: 017205 A9000000            v  00 00  1 252      
    ja #00561DBF                          ;#00561E90: 017207 29FFFFFF            v  00 00  1 180      
    jl #004DF1E9                          ;#004DF085: 017214 5E010000            v  00 00  1  94      
    jge #004E0DE5                         ;#004E10BF: 017215 20FDFFFF            v  00 00  1 396      
    jle #004E0E60                         ;#004E0F09: 017216 51FFFFFF            v  00 00  1 304      
    jg #004DE4B0                          ;#004DE0C6: 017217 E4030000            v  00 00  1  22      
    sete al                               ;#004DB487: 017224300                  np 01 00  2 200      
    sete dl                               ;#0055DBEC: 017224302                  np 04 00  2  13      
    setne al                              ;#00534593: 017225300                  np 01 00  2  10      
    setl al                               ;#005148C1: 017234300                  np 01 00  2 272      
    setl cl                               ;#00562535: 017234301                  np 02 00  2 197      
    setge al                              ;#0055DA91: 017235300                  np 01 00  2   5      
    setg al                               ;#0055DAB6: 017237300                  np 01 00  2   5      
    setg cl                               ;#00536E17: 017237301                  np 02 00  2  79      
    and ecx,eax                           ;#0056043C: 041301                     uv 02 03  1 723      
    and eax,esi                           ;#005389DD: 041360                     uv 01 41  1  16      
    and ecx,[esp]                         ;#0056044B: 043014044                  uv 02 12  2 742      
    and eax,255                           ;#00564E5B: 045 FF000000               uv 01 01  1  76      
    sub ah,dh                             ;#0056072C: 050364                     uv 01 05  1  43      
    sub ecx,eax                           ;#0056306D: 051301                     uv 02 03  1 169 02   
    sub edx,eax                           ;#0056D17F: 051302                     uv 04 05  1  67      
    sub esi,ecx                           ;#00560369: 051316                     uv 40 42  1 533 40   
    sub edx,ecx                           ;#005613C5: 051312                     uv 04 06  1 274      
    sub edi,edx                           ;#00561D58: 051327                     uv 80 84  1   3      
    sub ecx,esp                           ;#0056391B: 051341                     uv 02 12  1 182      
    sub ecx,esi                           ;#0056107E: 051361                     vu 02 42  1 543      
    sub edi,esi                           ;#00514B09: 051367                     uv 80 C0  1 375      
    sub eax,256                           ;#00562DC4: 055 00010000               uv 01 01  1  54      
    xor eax,eax                           ;#004E107B: 061300                     vu 01 01  1 383      
    xor ecx,eax                           ;#005604A2: 061301                     uv 02 03  1 771      
    xor ecx,ecx                           ;#0054C4E9: 061311                     uv 02 02  1   3      
    xor edx,edx                           ;#004E5BC2: 061322                     vu 04 04  1  22      
    xor ebx,ebx                           ;#004E0A5D: 061333                     vu 08 08  1  64      
    xor eax,esi                           ;#00560099: 061360                     uv 01 41  1  51      
    xor edi,edi                           ;#0056D7D8: 061377                     uv 80 80  1  14      
    xor ecx,[esp]                         ;#005604B1: 063014044                  uv 02 12  2 790      
    cmp [edi],eax                         ;#00560788: 071007                     uv 00 81  2  89      
    cmp [ebp+16],ebx                      ;#00562C3C: 071135 10                  uv 00 28  2 535      
    cmp ecx,eax                           ;#0054C980: 071301                     uv 00 03  1 229      
    cmp esi,eax                           ;#0051DBEB: 071306                     uv 00 41  1 101      
    cmp edi,eax                           ;#0054CA77: 071307                     uv 00 81  1 281      
    cmp eax,ecx                           ;#00538064: 071310                     uv 00 03  1 825 01   
    cmp esi,ecx                           ;#0054C8C0: 071316                     uv 00 42  1 197      
    cmp edi,ecx                           ;#004DD90D: 071317                     uv 00 82  1  39 80   
    cmp eax,edx                           ;#0056087F: 071320                     vu 00 05  1 206      
    cmp ecx,edx                           ;#004DF351: 071321                     uv 00 06  1  83      
    cmp esi,edx                           ;#005603DA: 071326                     uv 00 44  1 681      
    cmp edi,edx                           ;#00561E38: 071327                     uv 00 84  1 151      
    cmp eax,esi                           ;#004DD726: 071360                     uv 00 41  1 116      
    cmp edi,esi                           ;#0056BECA: 071367                     uv 00 C0  1 452      
    cmp eax,edi                           ;#004E0D23: 071370                     uv 00 81  1 209 80   
    cmp ecx,edi                           ;#004E6768: 071371                     uv 00 82  1 183      
    cmp esi,edi                           ;#0054CB4D: 071376                     uv 00 C0  1 323      
    cmp eax,[esi]                         ;#0056082A: 073006                     uv 00 41  2 164      
    cmp eax,[edi]                         ;#00560764: 073007                     uv 00 81  2  72      
    cmp ecx,[esi+4]                       ;#0056070D: 073116 04                  uv 00 42  2  28      
    cmp ecx,[edi-12]                      ;#00560841: 073117 F4                  uv 00 82  2 173      
    cmp edx,[esp+4]                       ;#00560205: 073124044 04               uv 00 14  2 217      
    cmp eax,ecx                           ;#0054CB3F: 073301                     uv 00 03  1 321      
    cmp eax,edx                           ;#004E0DBE: 073302                     uv 00 05  1 244 01   
    cmp eax,esi                           ;#004DF9C1: 073306                     uv 00 41  1 275 01   
    cmp eax,edi                           ;#004DE9E6: 073307                     uv 00 81  1  90 01   
    cmp ecx,eax                           ;#00562FEA: 073310                     uv 00 03  1 145 02   
    cmp ecx,edx                           ;#004E10BA: 073312                     uv 00 06  1 395 02   
    cmp ecx,esi                           ;#004E0C8E: 073316                     uv 00 42  1 182 02   
    cmp ecx,edi                           ;#0055DF6A: 073317                     uv 00 82  1  39 02   
    cmp esi,eax                           ;#0054CD97: 073360                     uv 00 41  1 443      
    cmp esi,ecx                           ;#004E0D75: 073361                     uv 00 42  1 229 40   
    cmp esi,edx                           ;#0056D011: 073362                     uv 00 44  1 109      
    cmp esi,edi                           ;#004E634D: 073367                     uv 00 C0  1 165      
    cmp edi,eax                           ;#0051DBD6: 073370                     uv 00 81  1  95 80   
    cmp edi,ecx                           ;#004DC43E: 073371                     uv 00 82  1 104 80   
    cmp edi,edx                           ;#004E178F: 073372                     uv 00 84  1 185 80   
    cmp edi,esi                           ;#004E0FA1: 073376                     uv 00 C0  1 338 80   
    cmp eax,h4                            ;#00533ABE: 075 00000040               uv 00 01  1  17 01   
    cmp eax,8552                          ;#004DF64E: 075 68210000               vu 00 01  1  82      
    push eax                              ;#004E131D: 120                        uv 00 01  1 525      
    push ecx                              ;#00565AD4: 121                        uv 00 02  1 401      
    push edx                              ;#0054D6AE: 122                        uv 00 04  1 129      
    push ebx                              ;#0056619D: 123                        vu 00 08  1 748      
    push esp                              ;#0056380A: 124                        vu 00 10  1  12      
    push esi                              ;#00565ABB: 126                        uv 00 40  1 396      
    push edi                              ;#00565AA2: 127                        uv 00 80  1 391      
    pop eax                               ;#00561C61: 130                        uv 01 00  1 227      
    pop ecx                               ;#00560B74: 131                        uv 02 00  1 116      
    pop edx                               ;#00560C52: 132                        vu 04 00  1 180      
    pop esi                               ;#00560F7A: 136                        vu 40 00  1 458      
    pop edi                               ;#00561F56: 137                        vu 80 00  1  63      
    pushad                                ;#005607AF: 140                        np 00 FF  5 103      
    popad                                 ;#005607B5: 141                        np FF 00  5 109      
    mov word[esi+edx],ax                  ;#00560A58: 146:211004026              vu 00 45  1  35      
    mov word[ebx+eax*4],cx                ;#00560AE6: 146:211014203              vu 00 0B  1  73      
    mov word[edi],cx                      ;#00560B2B: 146:211017                 uv 00 82  1  95      
    mov word[edi], word 3338              ;#00563853: 146:307007 0A0D            uv 00 80  1  44      
    push 4195                             ;#00518F08: 150 63100000               vu 00 00  1   5      
    push #0055DC23                        ;#00518F0D: 150 23DC5500               uv 00 00  1   6      
    push 5                                ;#004DDD0B: 152 05                     uv 00 00  1 247      
    jo #004DF355                          ;#004DF35E: 160 F5                     v  00 00  1  86      
    jno #00533C40                         ;#00533C36: 161 08                     v  00 00  1  61      
    jc #005603BD                          ;#005603A5: 162 16                     v  00 00  1 649      
    je #00565102                          ;#005650E5: 164 1B                     v  00 00  1 171      
    jne #005151D8                         ;#005151A7: 165 2F                     v  00 00  1 308      
    jbe #00561250                         ;#00561243: 166 0B                     v  00 00  1 110      
    ja #00560A7E                          ;#00560A74: 167 08                     v  00 00  1  46      
    js #00560362                          ;#0056034C: 170 14                     v  00 00  1 476      
    jl #004E12D2                          ;#004E12CB: 174 05                     v  00 00  1 506      
    jge #0054D298                         ;#0054D270: 175 26                     v  00 00  1 673      
    jle #004E1336                         ;#004E1326: 176 0E                     v  00 00  1 526      
    jg #0056CE64                          ;#0056CE59: 177 09                     v  00 00  1  13      
    cmp byte[ebx+eax*4-1],#12             ;#004DFAD9: 200174203 FF 12            u  00 09  2   9      
    cmp byte[ebx+ecx*4-1],#12             ;#005003D4: 200174213 FF 12            u  00 0A  2  34      
    cmp byte[ebx+edx*4-1],#12             ;#005607CB: 200174223 FF 12            u  00 0C  2 122       
    cmp byte[ebx+esi*4-1],#82             ;#0052F548: 200174263 FF 82            u  00 48  2   3      
    cmp byte[ebx+edi*4-1],#12             ;#0053456A: 200174273 FF 12            u  00 88  2   3      
    cmp byte[edi-1],#12                   ;#0056081B: 200177 FF 12               u  00 80  2 161      
    and ah,127                            ;#0056090D: 200344 7F                  vu 01 01  1 277      
    cmp al,#80                            ;#00561261: 200370 80                  vu 00 01  1 116      
    cmp cl,#12                            ;#0056B700: 200371 12                  uv 00 02  1  23 02   
    cmp dl,#82                            ;#00560870: 200372 82                  uv 00 04  1 196      
    cmp ah,#12                            ;#005606FF: 200374 12                  uv 00 01  1  24      
    add esi,1024                          ;#004F2249: 201306 00040000            vu 40 40  1  71      
    add edi,1024                          ;#004FD2A2: 201307 00040000            vu 80 80  1  71      
    sub edi,65536                         ;#00562E45: 201357 00000100            uv 80 80  1  75      
    cmp ecx,1                             ;#004DF5C4: 201371 01000000            uv 00 02  1  51      
    cmp ecx,h4                            ;#00565B86: 201371 00000040            uv 00 02  1 437      
    cmp edx,h4                            ;#004E0A25: 201372 00000040            uv 00 04  1  52      
    cmp esi,1                             ;#0052D263: 201376 01000000            uv 00 40  1  31      
    cmp esi,h4                            ;#004E126F: 201376 00000040            vu 00 40  1 485      
    cmp edi,1                             ;#004DF4EA: 201377 01000000            uv 00 80  1  14      
    cmp edi,h4                            ;#004E1415: 201377 00000040            vu 00 80  1 574      
    add dword[ebx+eax*4-8],1              ;#00565F19: 203104203 F8 01            u  00 09  3 624      
    add dword[ebx+ecx*4-8],1              ;#004EBEF7: 203104213 F8 01            u  00 0A  3 358      
    add dword[ebx+esi*4-8],1              ;#004DB04B: 203104263 F8 01            u  00 48  3  14    *40*
    add dword[ebx+edi*4-8],1              ;#004E141D: 203104273 F8 01            u  00 88  3 576      
    sub dword[ebx+eax*4-8],1              ;#004E1328: 203154203 F8 01            u  00 09  3 527      
    sub dword[ebx+ecx*4-8],1              ;#004DB1FD: 203154213 F8 01            u  00 0A  3  89      
    sub dword[ebx+edx*4-8],1              ;#004E13A4: 203154223 F8 01            u  00 0C  3 549      
    sub dword[ebx+esi*4-8],1              ;#004F795C: 203154263 F8 01            u  00 48  3 1631      
    sub dword[ebx+edi*4-8],1              ;#004E1162: 203154273 F8 01            u  00 88  3 430      
    cmp dword[esi-8],1                    ;#00560E58: 203176 F8 01               u  00 40  2 354      
    add eax,1                             ;#004E109B: 203300 01                  uv 01 01  1 389 01   
    add ecx,-1                            ;#004E33FB: 203301 FF                  uv 02 02  1 145      
    add edx,-1                            ;#005600F2: 203302 FF                  vu 04 04  1  42      
    add esp,4                             ;#005619A0: 203304 04                  uv 10 10  1 332      
    add esi,1                             ;#004DECAB: 203306 01                  uv 40 40  1 232      
    add edi,1                             ;#004E0F9E: 203307 01                  uv 80 80  1 337      
    and eax,1                             ;#0054D349: 203340 01                  uv 01 01  1 710 01   
    and edi,1                             ;#0052D21E: 203347 01                  vu 80 80  1  13      
    sub eax,1                             ;#00564FF1: 203350 01                  uv 01 01  1 137      
    sub ecx,2                             ;#0054D0A1: 203351 02                  uv 02 02  1 594 02   
    sub edx,1                             ;#00562C49: 203352 01                  vu 04 04  1 538      
    sub esp,8                             ;#00560074: 203354 08                  uv 10 10  1  36      
    sub esi,1                             ;#0054D164: 203356 01                  uv 40 40  1 631 40   
    sub edi,1                             ;#0054C8A4: 203357 01                  uv 80 80  1 191 80   
    xor eax,-1                            ;#005605C5: 203360 FF                  uv 01 01  1  90      
    cmp eax,0                             ;#0054D7FD: 203370 00                  uv 00 01  1 193      
    cmp ecx,1                             ;#004DF7A2: 203371 01                  uv 00 02  1 146 02   
    cmp edx,0                             ;#0056C339: 203372 00                  uv 00 04  1 738      
    cmp esi,0                             ;#004DE0DE: 203376 00                  uv 00 40  1  26 40   
    cmp edi,0                             ;#004DD3ED: 203377 00                  uv 00 80  1  33 80   
    test eax,eax                          ;#00513018: 205300                     uv 00 01  1  80 01   
    test ecx,ecx                          ;#005380FE: 205311                     uv 00 02  1 859 02   
    test edx,edx                          ;#00533C6E: 205322                     vu 00 04  1 117      
    test esi,esi                          ;#00537447: 205366                     uv 00 40  1 273 40   
    test edi,edi                          ;#004E44DD: 205377                     uv 00 80  1 192 80   
    xchg esi,ecx                          ;#00560D4E: 207316                     np 42 42  3 261      
    xchg esi,edi                          ;#00560875: 207376                     np C0 C0  3 197      
    mov [edx],al                          ;#00561A3B: 210002                     uv 00 05  1 383      
    mov [edx],cl                          ;#0056179C: 210012                     uv 00 06  1 165 02   
    mov [eax+edi],cl                      ;#0056182A: 210014070                  vu 00 83  1 209      
    mov [esi+edi],cl                      ;#0056177B: 210014076                  uv 00 C2  1 147      
    mov [ebx+eax*4],cl                    ;#00560B26: 210014203                  vu 00 0B  1  93      
    mov [edi+esi*4],cl                    ;#00561A17: 210014267                  uv 00 C2  1 365      
    mov [edi],cl                          ;#00563898: 210017                     uv 00 82  1  67 02   
    mov [edi],bl                          ;#00560B24: 210037                     uv 00 88  1  93      
    mov [ebx+eax*4+2],bl                  ;#00560AEA: 210134203 02               uv 00 09  1  74      
    mov [ecx],eax                         ;#00561FCD: 211001                     uv 00 03  1 119      
    mov [edx],eax                         ;#00560981: 211002                     uv 00 05  1 338 01   
    mov [#00402008],eax                   ;#0056618F: 211005 08204000            uv 00 01  1 747     
    mov [esi],eax                         ;#00560B93: 211006                     uv 00 41  1 125      
    mov [edi],eax                         ;#004DF484: 211007                     uv 00 81  1 159      
    mov [esp],eax                         ;#00563775: 211004044                  uv 00 11  1  59      
    mov [esi+edx*4],eax                   ;#00560BEE: 211004226                  uv 00 45  1 149      
    mov [eax],ecx                         ;#00561972: 211010                     uv 00 03  1 317      
    mov [esp],ecx                         ;#005603E1: 211014044                  uv 00 12  1 685      
    mov [ebx+eax*4],ecx                   ;#00560D1E: 211014203                  uv 00 0B  1 250      
    mov [eax+edi*4],ecx                   ;#00561882: 211014270                  vu 00 83  1 237      
    mov [#00402528] (lines),ecx           ;#0056D4B9: 211015 28254000            vu 00 02  1  45      
    mov [edi],ecx                         ;#0056001B: 211017                     vu 00 82  1  37      
    mov [eax],edx                         ;#0056191C: 211020                     uv 00 05  1 295    *01*
    mov [esi+edi*4],ebx                   ;#0056202D: 211034276                  uv 00 C8  1 155      
    mov [#00402450] (sline),ebx           ;#00536E59: 211035 50244000            uv 00 08  1  89      
    mov [edi],ebx                         ;#00561B78: 211037                     vu 00 88  1 141      
    mov [ecx],esi                         ;#00561865: 211061                     uv 00 42  1 232      
    mov [ebx+eax*4],esi                   ;#00560A8C: 211064203                  uv 00 49  1  50      (suspect)
    mov [#00404A24] (sortdir),esi         ;#004DE37A: 211065 244A4000            uv 00 40  1 170      
    mov [edi],esi                         ;#00561C44: 211067                     vu 00 C0  1 208      
    mov [#00404A08] (r_openFile),edi      ;#004E0A05: 211075 084A4000            uv 00 80  1  46 80   
    mov [esp+4],eax                       ;#00560D46: 211104044 04               uv 00 11  1 260      
    mov [ebx+edx*4-12],eax                ;#00560F76: 211104223 F4               uv 00 0D  1 458      
    mov [ebp-8] (name),eax                ;#004E1297: 211105 F8                  uv 00 21  1 495      
    mov [esi-16],eax                      ;#00561B53: 211106 F0                  vu 00 41  1 134      
    mov [eax-8],ecx                       ;#00561C4C: 211110 F8                  uv 00 03  1 210      
    mov [esp+20],ecx                      ;#00561420: 211114044 14               uv 00 12  1 296      
    mov [edx+eax*4-12],ecx                ;#00560C98: 211114202 F4               vu 00 07  1 202      
    mov [ebx+edx*4-8],ecx                 ;#0056116A: 211114223 F8               uv 00 0E  1  16       
    mov [ebp-4] (n),ecx                   ;#004DB43B: 211115 FC                  uv 00 22  1 185      
    mov [esi-12],ecx                      ;#00560BF1: 211116 F4                  vu 00 42  1 149      
    mov [esp+12],edx                      ;#005613F5: 211124044 0C               uv 00 14  1 282      
    mov [ebx+eax*4-4],edx                 ;#00560C40: 211124203 FC               uv 00 0D  1 170 04   
    mov [ebx+edi*4-12],edx                ;#00560FEA: 211124273 F4               uv 00 8C  1 496      
    mov [ebp+28] (retaddr),edx            ;#00564E31: 211125 1C                  uv 00 24  1  68 04 
    mov [esi-12],edx                      ;#00561B41: 211126 F4                  uv 00 44  1 131      
    mov [edi-12],edx                      ;#0056108A: 211127 F4                  uv 00 84  1 547      
    mov [ebp-8] (action),ebx              ;#00510C3A: 211135 F8                  uv 00 28  1  21      
    mov [esi-4],ebx                       ;#00561B59: 211136 FC                  vu 00 48  1 135      
    mov [ebp] (source),esi                ;#004DB048: 211165 00                  uv 00 60  1  12 40   
    mov [ebp-8] (userdata),esi            ;#004DB263: 211165 F8                  uv 00 60  1 107      
    mov [esp+12],edi                      ;#005615C0: 211174044 0C               uv 00 90  1 446 80   
    mov [ebx+eax*4+4],edi                 ;#00560A9F: 211174203 04               vu 00 89  1  54      
    mov [ebx+edx*4-8],edi                 ;#00562055: 211174223 F8            uv 00 8C  1 163      
    mov [ebp] (ih),edi                    ;#004E1412: 211175 00                  uv 00 A0  1 574 80   
    mov [esi-12],edi                      ;#00560E78: 211176 F4                  uv 00 C0  1 367      
    mov [ebp-144] (msg2),eax              ;#0056A053: 211205 70FFFFFF            vu 00 21  1 3547      
    mov [ebp-212] (i),ecx                 ;#0056B07D: 211215 2CFFFFFF            uv 00 22  1 4261      
    mov [ebp-132] (tidx),ebx              ;#0056A0FC: 211235 7CFFFFFF            uv 00 28  1 3581      
    mov [ebp-144] (msg2),esi              ;#0056A8A9: 211265 70FFFFFF            vu 00 60  1 3922      
    mov [ebp-212] (i),edi                 ;#0056B11D: 211275 2CFFFFFF            vu 00 A0  1 4283      
    mov ecx,eax                           ;#004E0D2A: 211301                     vu 02 01  1 210      
    mov edx,eax                           ;#0051CED2: 211302                     uv 04 01  1 157      
    mov esi,eax                           ;#004DE5D0: 211306                     uv 40 01  1  53      
    mov edi,eax                           ;#00514CFA: 211307                     uv 80 01  1  65      
    mov eax,ecx                           ;#00538943: 211310                     uv 01 02  1 1277      
    mov edx,ecx                           ;#004E4E85: 211312                     uv 04 02  1 164      
    mov esi,ecx                           ;#0054D2AD: 211316                     uv 40 02  1 684      
    mov edi,ecx                           ;#00528907: 211317                     uv 80 02  1  22      
    mov eax,esi                           ;#004DD649: 211360                     vu 01 40  1  69      
    mov ecx,esi                           ;#004E6756: 211361                     vu 02 40  1 180      
    mov edx,esi                           ;#0056D43D: 211362                     uv 04 40  1  27      
    mov edi,esi                           ;#0052A083: 211367                     uv 80 40  1  30      
    mov eax,edi                           ;#0051E73A: 211370                     uv 01 80  1  92      
    mov ecx,edi                           ;#00538F8C: 211371                     uv 02 80  1 273      
    mov edx,edi                           ;#004E4629: 211372                     uv 04 80  1  48      
    mov esi,edi                           ;#0056B5EF: 211376                     uv 40 80  1  35      
    mov al,[esi+edi]                      ;#0056201E: 212004076                  uv 01 C0  1 152      
    mov al,[edi]                          ;#00561FC5: 212007                     uv 01 80  1 118    *80*
    mov cl,[esi]                          ;#0056196D: 212016                     uv 02 40  1 316      
    mov cl,[edi]                          ;#0056D6CE: 212017                     uv 02 80  1  18      
    mov al,[ebx+esi*4-1]                  ;#005618F2: 212104263 FF               uv 01 48  1 273      
    mov al,[esi-1]                        ;#0056080B: 212106 FF                  uv 01 40  1 158    *40*
    mov cl,[ebx+eax*4-1]                  ;#005608C2: 212114203 FF               uv 02 09  1 235      
    mov dl,[edi-1]                        ;#00560836: 212127 FF                  uv 04 80  1 171      
    mov ah,[ebx+esi*4-1]                  ;#00561FE4: 212144263 FF               uv 01 48  1 126      
    mov ah,[edi-1]                        ;#005606F7: 212147 FF                  uv 01 80  1  22      
    mov ch,ah                             ;#0056090B: 212354                     uv 02 01  1 277      
    mov dh,ah                             ;#0056071C: 212364                     vu 04 01  1  39      
    mov eax,[eax]                         ;#0056D7A0: 213000                     uv 01 01  1   6    *01*
    mov eax,[edx]                         ;#00560DD5: 213002                     vu 01 04  1 300      
    mov eax,[esp]                         ;#00560057: 213004044                  uv 01 10  1  30      
    mov eax,[eax+edi*4]                   ;#00561F53: 213004270                  uv 01 81  1  63    *01*
    mov eax,[esi+edi*4]                   ;#00562026: 213004276                  vu 01 C0  1 153      
    mov eax,[#00402008]                   ;#00564D5F: 213005 08204000            uv 01 00  1   2      
    mov eax,[esi]                         ;#00560F41: 213006                     uv 01 40  1 448      
    mov eax,[edi]                         ;#0051EC4B: 213007                     uv 01 80  1  59 80 *80*
    mov ecx,[ecx]                         ;#005609F5: 213011                     vu 02 02  1  17      
    mov ecx,[edx]                         ;#00560AB0: 213012                     vu 02 04  1  58      
    mov ecx,[esp]                         ;#005604AB: 213014044                  uv 02 10  1 783      
    mov ecx,[#00404990] (filelist_dlg)    ;#004E12BC: 213015 90494000            uv 02 00  1 504      
    mov edx,[eax]                         ;#00561713: 213020                     vu 04 01  1 110      
    mov edx,[ecx]                         ;#00561FC3: 213021                     uv 04 02  1 116      
    mov edx,[esp+ecx]                     ;#00561DD9: 213024014                  uv 04 12  1 110    *02*
    mov edx,[esp]                         ;#0056066A: 213024044                  vu 04 10  1  12      
    mov edx,[esp+ecx*4]                   ;#00561D74: 213024214                  uv 04 12  1  10      
    mov edx,[eax+edi*4]                   ;#0056186C: 213024270                  uv 04 81  1 233      
    mov edx,[#0040250C] (cdi_varname)     ;#0056B1BF: 213025 0C254000            vu 04 00  1  19      
    mov edx,[esi]                         ;#00560B2E: 213026                     vu 04 40  1  95      
    mov edx,[edi]                         ;#0056000F: 213027                     uv 04 80  1  36      
    mov esi,[eax]                         ;#00561687: 213060                     uv 40 01  1  59      
    mov esi,[esp]                         ;#0056007F: 213064044                  uv 40 10  1  46      
    mov esi,[esi+ecx*4]                   ;#0056D57A: 213064216                  uv 40 42  1   6 40 *42*
    mov esi,[esi+edi*4]                   ;#00561A9E: 213064276                  uv 40 C0  1  81      
    mov esi,[#004029E8] (conditions)      ;#004DB042: 213065 E8294000            uv 40 00  1  11      
    mov esi,[edi]                         ;#00560D61: 213067                     uv 40 80  1 267      
    mov edi,[eax]                         ;#00560F93: 213070                     uv 80 01  1 473      
    mov edi,[edx]                         ;#005615BE: 213072                     uv 80 04  1 445      
    mov edi,[esp]                         ;#00561E71: 213074044                  uv 80 10  1 173      
    mov edi,[#00404998] (matrix)          ;#004E1F13: 213075 98494000            vu 80 00  1 637      
    mov edi,[edi]                         ;#00561AD6: 213077                     vu 80 80  1  95      
    mov eax,[eax+8]                       ;#005626A5: 213100 08                  uv 01 01  1 269 01 *01*
    mov eax,[esp+4]                       ;#00564FE8: 213104044 04               uv 01 10  1 136      
    mov eax,[ebx+ecx*4-12]                ;#0056BAD5: 213104213 F4               uv 01 0A  1 227    *02*
    mov eax,[esp+ecx*4+4]                 ;#005611DF: 213104214 04               vu 01 12  1  71      
    mov eax,[ebx+esi*4-12]                ;#004EA9BB: 213104263 F4               uv 01 48  1  30      
    mov eax,[ebx+edi*4-12]                ;#00560F56: 213104273 F4               uv 01 88  1 451      
    mov eax,[ebp-28] (k)                  ;#004E1098: 213105 E4                  uv 01 20  1 388      
    mov eax,[esi-8]                       ;#005611D4: 213106 F8                  uv 01 40  1  69      
    mov eax,[edi-100] <name>              ;#004E13E1: 213107 9C                  uv 01 80  1 567    *80*
    mov ecx,[eax-12]                      ;#005613C7: 213110 F4                  vu 02 01  1 274      
    mov ecx,[ecx-12]                      ;#00560E3D: 213111 F4                  uv 02 02  1 340      
    mov ecx,[edx-12]                      ;#00560EDC: 213112 F4                  uv 02 04  1 409      
    mov ecx,[esp+8]                       ;#00561373: 213114044 08               uv 02 10  1 237      
    mov ecx,[ebx+eax*4-12]                ;#004DEFC7: 213114203 F4               vu 02 09  1  58      
    mov ecx,[ebx+edx*4-12]                ;#00561626: 213114223 F4               uv 02 0C  1 486      
    mov ecx,[ebx+esi*4-12]                ;#0054C84F: 213114263 F4               uv 02 48  1 171    *40*
    mov ecx,[ebx+edi*4-12]                ;#00519CEF: 213114273 F4               uv 02 88  1 196 80 *80*
    mov ecx,[ebp] (filenames)             ;#004E0DCC: 213115 00                  vu 02 20  1 246      
    mov ecx,[esi-12]                      ;#00560E07: 213116 F4                  vu 02 40  1 314      
    mov ecx,[edi+4]                       ;#00560827: 213117 04                  vu 02 80  1 163      
    mov edx,[esp+8]                       ;#00561574: 213124044 08               uv 04 10  1 417      
    mov edx,[ebx+eax*4-12]                ;#004E45FF: 213124203 F4               uv 04 09  1  38 01 *01*
    mov edx,[esp+ecx*4+4]                 ;#005611A1: 213124214 04               uv 04 12  1  47       
    mov edx,[esp+edx*4+8]                 ;#005610A0: 213124224 08               uv 04 14  1 554    *04*
    mov edx,[ebx+esi*4-12]                ;#00560A03: 213124263 F4               vu 04 48  1  19      
    mov edx,[ebp-44] (sep)                ;#005380C0: 213125 D4                  vu 04 20  1 844      
    mov edx,[esi-16]                      ;#00560E5E: 213126 F0                  uv 04 40  1 356      
    mov edx,[edi-12]                      ;#0056073E: 213127 F4                  uv 04 80  1  54      
    mov ebx,[edi-4]                       ;#00561B4D: 213137 FC                  uv 08 80  1 133      
    mov ebp,[ebp+20] (prevebp)            ;#00562C46: 213155 14                  uv 20 20  1 538        
    mov esi,[eax+84]                      ;#00564D65: 213160 54                  uv 40 01  1   5 01 *01*
    mov esi,[esp+8]                       ;#00560D0F: 213164044 08               uv 40 10  1 244      
    mov esi,[ebx+eax*4-12]                ;#004E0F1F: 213164203 F4               uv 40 09  1 310 01 *01*
    mov esi,[ebx+ecx*4-12]                ;#0051C04E: 213164213 F4               uv 40 0A  1  53 02 *02*
    mov esi,[esp+ecx*4+4]                 ;#0056117C: 213164214 04            uv 40 12  1   2      
    mov esi,[esi+edx*4+16]                ;#0056D68F: 213164226 10               uv 40 44  1   6 40 *44*
    mov esi,[ebx+esi*4+8]                 ;#00564D6C: 213164263 08            uv 40 48  1   7      
    mov esi,[ebx+edi*4-12]                ;#004DED4B: 213164273 F4               uv 40 88  1 258 80 *80*
    mov esi,[ebp] (filenames)             ;#004E0921: 213165 00                  uv 40 20  1   1      
    mov edi,[ecx-12]                      ;#00560D94: 213171 F4                  uv 80 02  1 279    *02*
    mov edi,[esp+4]                       ;#00560D3E: 213174044 04               uv 80 10  1 259      
    mov edi,[ebx+eax*4-12]                ;#0054CBF4: 213174203 F4               uv 80 09  1 356 01 *01*
    mov edi,[ebx+ecx*4-12]                ;#0056B488: 213174213 F4               uv 80 0A  1 176 02 *02*
    mov edi,[ebx+edx*4-8]                 ;#00562046: 213174223 F8            uv 80 0C  1 161      
    mov edi,[ebx+esi*4-12]                ;#004E10CB: 213174263 F4               uv 80 48  1 400 40 *40*
    mov edx,[ebx+edi*4-12]                ;#004E477F: 213124273 F4               uv 04 88  1 128 80 *80*
    mov edi,[ebp+20] (prevebp)            ;#004E1563: 213175 14                  vu 80 20  1  69      
    mov edi,[ebp-12] (i)                  ;#004DF50E: 213175 F4                  uv 80 20  1  18      
    mov edi,[esi-20]                      ;#00560BD9: 213176 EC                  vu 80 40  1 142      
    mov edi,[edi-4]                       ;#00560802: 213177 FC                  uv 80 80  1 155      
    mov eax,[ebp-260] (error_handler)     ;#00569237: 213205 FCFEFFFF            vu 01 20  1 2891      
    mov eax,[esi+172]                     ;#00564F7E: 213206 AC000000            uv 01 40  1 121      
    mov eax,[edi-140]                     ;#0056A4E0: 213207 74FFFFFF            uv 01 80  1 3777    *80*
    mov ecx,[ebp-212] (i)                 ;#0056AE3E: 213215 2CFFFFFF            uv 02 20  1 4164      
    mov edx,[ebp-144] (msg2)              ;#0056A041: 213225 70FFFFFF            vu 04 20  1 3543      
    mov esi,[ebp-160] (e14ops)            ;#00568A22: 213265 60FFFFFF            uv 40 20  1 2517      
    mov edi,[ebp-212] (i)                 ;#0056B08F: 213275 2CFFFFFF            uv 80 20  1 4263      
    mov eax,ecx                           ;#00564E80: 213301                     uv 01 02  1  81      
    mov eax,edx                           ;#00533C5C: 213302                     uv 01 04  1  67      
    mov eax,ebx                           ;#004DB485: 213303                     uv 01 08  1 199      
    mov eax,esp                           ;#00564EAE: 213304                     vu 01 10  1  89      
    mov eax,ebp                           ;#0050F02A: 213305                     uv 01 20  1   4      
    mov eax,esi                           ;#00564EBA: 213306                     uv 01 40  1  91      
    mov eax,edi                           ;#00564E65: 213307                     vu 01 80  1  77      
    mov ecx,eax                           ;#005603F4: 213310                     vu 02 01  1 694      
    mov ecx,edx                           ;#004DF34E: 213312                     vu 02 04  1  80      
    mov ecx,ebp                           ;#004DD558: 213315                     vu 02 20  1  26      
    mov ecx,esi                           ;#00564E59: 213316                     vu 02 40  1  75      
    mov ecx,edi                           ;#005600E4: 213317                     vu 02 80  1  26      
    mov edx,eax                           ;#004DE3DA: 213320                     uv 04 01  1 185      
    mov edx,ecx                           ;#004E11CC: 213321                     uv 04 02  1 452      
    mov edx,ebx                           ;#0056108E: 213323                     uv 04 08  1 548      
    mov edx,ebp                           ;#0054D222: 213325                     uv 04 20  1 661      
    mov edx,esi                           ;#004E1D84: 213326                     uv 04 40  1 548      
    mov edx,edi                           ;#004E1169: 213327                     uv 04 80  1 433      
    mov ebx,esi                           ;#00561B65: 213336                     uv 08 40  1 137      
    mov esi,eax                           ;#004DF47E: 213360                     uv 40 01  1 157      
    mov esi,ecx                           ;#005602C3: 213361                     uv 40 02  1 267      
    mov esi,edx                           ;#00560936: 213362                     uv 40 04  1 291      
    mov esi,esp                           ;#00560F8F: 213364                     vu 40 10  1 471      
    mov edi,eax                           ;#0052D28A: 213370                     uv 80 01  1  37 01   
    mov edi,ecx                           ;#00562DF0: 213371                     uv 80 02  1  62 02   
    mov edi,edx                           ;#00560F84: 213372                     uv 80 04  1 469      
    mov edi,esp                           ;#005638A7: 213374                     vu 80 10  1  69      
    mov edi,ebp                           ;#0054D174: 213375                     uv 80 20  1 634      
    mov edi,esi                           ;#004E3A7D: 213376                     uv 80 40  1  99 40   
    lea eax,[ebx+eax*4]                   ;#00561F3B: 215004203                  vu 01 09  1  55      
    lea eax,[ebx+esi*4]                   ;#00561996: 215004263                  uv 01 48  1 329      
    lea eax,[ebx+edi*4]                   ;#00561CE6: 215004273                  uv 01 88  1 279      
    lea eax,[esi+edi*4]                   ;#00561216: 215004276                  uv 01 C0  1  90      
    lea ecx,[esi+edx*4]                   ;#00561419: 215014226                  uv 02 44  1 295      
    lea ecx,[ebx+edi*4]                   ;#00561852: 215014273                  uv 02 88  1 223      
    lea edx,[edi+eax*4]                   ;#00561A32: 215024207                  uv 04 81  1 376      
    lea edx,[eax+edi*4]                   ;#005617AE: 215024270                  uv 04 81  1 174 01 *01*
    lea esp,[esp+ecx*4]                   ;#0056114D: 215044214                  vu 10 12  1   5      
    lea esi,[ebx+eax*4]                   ;#005610D8: 215064203                  uv 40 09  1 570      
    lea esi,[esi+eax*4]                   ;#005613AB: 215064206                  uv 40 41  1 258 01 *01*
    lea esi,[ebx+edx*4]                   ;#00561623: 215064223                  vu 40 0C  1 485      
    lea esi,[esi+edx*4]                   ;#00561B7C: 215064226                  vu 40 44  1 142      
    lea esi,[ebx+esi*4]                   ;#00561A2A: 215064263                  uv 40 48  1 373      
    lea esi,[esi+edi*4]                   ;#00561BB3: 215064276                  uv 40 C0  1 169      
    lea edi,[eax+edi]                     ;#00561909: 215074070                  vu 80 81  1 289      
    lea edi,[ebx+eax*4]                   ;#005610BD: 215074203                  vu 80 09  1 561      
    lea edi,[edi+eax*4]                   ;#00560B11: 215074207                  uv 80 81  1  83      
    lea edi,[esi+edx*4]                   ;#00560E7B: 215074226                  vu 80 44  1 367      
    lea edi,[edi+edx*4]                   ;#005612D8: 215074227                  vu 80 84  1 163      
    lea edi,[eax+edi*4]                   ;#00560FF4: 215074270                  uv 80 81  1 498      
    lea eax,[ecx+1]                       ;#00560DAC: 215101 01                  uv 01 02  1 285      
    lea eax,[edx-20]                      ;#00560C58: 215102 EC                  vu 01 04  1 185      
    lea eax,[edx+eax*4+1]                 ;#00560C9C: 215104202 01               uv 01 05  1 203      
    lea eax,[ebp-84] (fi)                 ;#004E1040: 215105 AC                  uv 01 20  1 368      
    lea eax,[esi+1]                       ;#00560DC7: 215106 01                  uv 01 40  1 294      
    lea ecx,[edx+17]                      ;#00560A49: 215112 11                  uv 02 04  1  32      
    lea ecx,[ebx+edx*2+1]                 ;#00560C6F: 215114123 01               uv 02 0C  1 191      
    lea ecx,[ebx+edx*4+20]                ;#00560BD5: 215114223 14               uv 02 0C  1 142      
    lea ecx,[ebp-84] (fi)                 ;#004E1078: 215115 AC                  uv 02 20  1 383      
    lea edx,[eax-1]                       ;#004E67FF: 215120 FF                  vu 04 01  1 210      
    lea edx,[ecx+1]                       ;#004E0E3C: 215121 01                  uv 04 02  1 269      
    lea edx,[ebp-44] (symtab[4526])       ;#00514FC5: 215125 D4                  uv 04 20  1 206      
    lea edx,[esi+1]                       ;#0054C95A: 215126 01                  uv 04 40  1 223    *40*
    lea esi,[eax+1]                       ;#00560366: 215160 01                  uv 40 01  1 532      
    lea edi,[edx+eax*4+4]                 ;#00560C94: 215174202 04               uv 80 05  1 202 04 *04*
    lea edi,[ebx+esi*4-1]                 ;#0056D6AD: 215174263 FF            uv 80 48  1  11      
    lea edi,[ebp-8] (pHeight)             ;#004FECFA: 215175 F8                  vu 80 20  1  11      
    lea edi,[edi+4]                       ;#00560864: 215177 04                  vu 80 80  1 190      
    lea eax,[ebp-156] (msgs)              ;#005653A5: 215205 64FFFFFF            uv 01 20  1  24      
    lea ecx,[ebp-152] (gvarptr)           ;#005664C4: 215215 68FFFFFF            vu 02 20  1 863      
    lea edx,[ebp-220] (symtab[1620])      ;#0056915D: 215225 24FFFFFF            uv 04 20  1 2848      
    lea edi,[ebp-252] (lm)                ;#0056904F: 215275 04FFFFFF            uv 80 20  1 2812      
    pop [#00404A04] (tags)                ;#004E1113: 217005 044A4000            np 00 00  3 415      
    pop dword[ebp-16] (val)               ;#00515D05: 217105 F0                  np 00 20  3  62      
    pop dword[edi-4]                      ;#00560CBE: 217107 FC                  np 00 80  3 215      
    pop dword[ebp-144] (msg2)             ;#005698B3: 217205 70FFFFFF            np 00 20  3 3178      
    nop                                   ;#00560869: 220                        uv 00 00  1 192      
    xchg eax,ecx                          ;#005602C5: 221                        np 03 03  2 268      
    cdq                                   ;#004DF474: 231                        np 04 01  2 153      
    sahf                                  ;#005601FA: 236                        np 00 01  2 211      
    mov eax,[#00402F14] (dll_path)        ;#0051FE97: 241 142F4000               uv 01 00  1 269      
    mov [xcdCanvasGetSize],eax            ;#004F80C2: 243 F8404000               uv 00 01  1 1996      
    test al,16                            ;#00561D9A: 250 10                     uv 00 01  1  31      
    stosb                                 ;#00561022: 252                        np 80 81  3 515      
    stosd                                 ;#00561BC3: 253                        np 80 81  3 174      
    lodsb                                 ;#005617B5: 254                        np 41 40  2 176      
    lodsd                                 ;#00560F95: 255                        np 41 40  2 474      
    mov al,121                            ;#004E0E43: 260 79                     uv 01 00  1 271      
    mov cl,8                              ;#00561C99: 261 08                     uv 02 00  1 245      
    mov eax,1                             ;#004DB019: 270 01000000               uv 01 00  1   6      
    mov ecx,2                             ;#004E0F6F: 271 02000000               uv 02 00  1 327      
    mov edx,1186                          ;#0056C0EA: 272 A2040000               vu 04 00  1 574      
    mov esi,8524                          ;#004E119D: 276 4C210000               uv 40 00  1 444      
    mov edi,2                             ;#004DB160: 277 02000000               uv 80 00  1  64      
    shl ch,7                              ;#00560910: 300345 07                  u  02 02  1 278      
    ror eax,2                             ;#00560CA6: 301310 02                  np 01 01  1 205      
    shl eax,2                             ;#0056D797: 301340 02                  u  01 01  1   2      
    shl ecx,2                             ;#00560D8E: 301341 02                  u  02 02  1 275      
    shl esi,2                             ;#0056D68C: 301346 02                  u  40 40  1   3      
    shl edi,2                             ;#005637F8: 301347 02                  u  80 80  1   6      
    shr edi,2                             ;#0056B712: 301357 02                  u  80 80  1  27       
    sar edx,31                            ;#00533C20: 301372 1F                  u  04 04  1  10      
    ret 4                                 ;#00563873: 302 0400                   np 00 00  3  50      
    ret                                   ;#005608A1: 303                        np 00 00  2 224      
    mov [esi+ecx], byte 0                 ;#00561CF3: 306004016 00            uv 00 42  1 282      
    mov [edi], byte 45                    ;#005638D1: 306007 2D                  uv 00 80  1  82        
    mov [#00404A24] (sortdir), dword 1    ;#004E1123: 307005 244A4000 01000000   vu 00 00  1 418      
    mov [edi], dword 1                    ;#00560660: 307007 01000000            uv 00 80  1  11      
    mov [edi], dword h4                   ;#004E2940: 307007 00000040            vu 00 80  1  27      
    mov [esp+12], dword 1                 ;#00560D50: 307104044 0C 01000000      uv 00 10  1 264      
    mov [ebp] (s), dword 1                ;#004DB0BE: 307105 00 01000000         uv 00 20  1  36      
    mov [ebp+28] (retaddr),#004E131D      ;#004E1311: 307105 1C 1D134E00         vu 00 20  1 523      
    mov [ebp-4] (delimiter), dword 10     ;#004DB050: 307105 FC 0A000000         vu 00 20  1  16      
    mov [esi-8], dword 2                  ;#00561C2D: 307106 F8 02000000         vu 00 40  1 204      
    mov [edi-40], dword h4                ;#00522B7B: 307107 D8 00000040         vu 00 80  1 2354      
    mov [ebp-212] (i), dword 27           ;#0056A9EC: 307205 2CFFFFFF 1B000000   uv 00 20  1 3978      
    mov [edi-304], dword h4               ;#0056AFD9: 307207 D0FEFFFF 00000040   vu 00 80  1 4237      
    int3                                  ;#005609EE: 314                        np 00 00 13   2      
    shl ecx,1                             ;#00560617: 321341                     u  02 02  1 146      
    shl edx,1                             ;#004E10A3: 321342                     u  04 04  1 391      
    shl esi,1                             ;#004DF480: 321346                     u  40 40  1 158      
    sar eax,1                             ;#005603A3: 321370                     u  01 01  1 649      
    fcomp                                 ;#005601F6: 330331                     np 00 00  1 204      
    fld st0                               ;#005605FC: 331300                     np 00 00  1 124      
    fchs                                  ;#00560552: 331340                     np 00 00  1  57      
    fld1                                  ;#005637BF: 331350                     np 00 00  2 167      
    frndint                               ;#0056038A: 331374                     np 00 00 20 623      
    fild dword[esp]                       ;#005600D3: 333004044                  np 00 10  3  21    *10*
    fild dword[edi]                       ;#00563759: 333007                     np 00 80  3  35      
    fld qword[ebx+eax*4]                  ;#00560044: 335004203                  np 00 09  1  18      
    fld qword[ebx+ecx*4]                  ;#005603C7: 335004213                  np 00 0A  1 661      
    fld qword[ebx+edx*4]                  ;#005607D3: 335004223                  np 00 0C  1 125      
    fld qword[ebx+esi*4]                  ;#0056006C: 335004263                  np 00 48  1  34      
    fld qword[ebx+edi*4]                  ;#005608FE: 335004273                  np 00 88  1 265      
    fld qword[esi]                        ;#00560714: 335006                     np 00 40  1  31      
    fld qword[edi]                        ;#00560712: 335007                     np 00 80  1  30      
    fstp st0                              ;#00560219: 335330                     np 00 00  1 221      
    faddp st1,st0                         ;#00563783: 336301                     np 00 00  3  70      
    fmulp st1,st0                         ;#00560407: 336311                     np 00 00  3 714      
    fcompp                                ;#00560907: 336331                     np 00 00  1 270      
    fsubp st1,st0                         ;#0056028E: 336351                     np 00 00  3 258      
    fdivp st1,st0                         ;#005637C7: 336371                     np 00 00 39 176      
    fild qword[esp]                       ;#0056619F: 337054044                  np 00 10  3 750      
    fistp qword[esp]                      ;#005601F0: 337074044                  np 00 10  6 195      
    fnstsw ax                             ;#0056060C: 337340                     np 01 00  6 137      
    call #0056395F (:>initFEH)            ;#004DB000: 350 5A890800               v  00 00  1   1      
    call #00563BF6 (:%opFrame) (split)    ;#004DB1C9: 350 288A0800               v  00 00  1  79      
    call :%opFrame (columnize)            ;#004DB113: 350 DE8A0800               v  00 00  1  50      
    jmp #00528F64 (code:IupUpdate)        ;#004E1429: 351 367B0400               v  00 00  1 579      
    jmp #00563C83 (:%opRetf)              ;#004E142E: 351 50280800               v  00 00  1 580      
    jmp #0056D11A                         ;#0056D082: 351 93000000               v  00 00  1  14      
    jmp #004E0BAE                         ;#004E0B41: 353 6B                     v  00 00  1 117      
    rep movsb                             ;#00561583: 363:244                    np C2 C2  4 420      
    rep movsd                             ;#00561150: 363:245                    np C2 C2  4   8    *40*
    repe cmpsb                            ;#00560854: 363:246                    np C2 C2  5 178      
    rep stosb                             ;#005614C7: 363:252                    np 82 83  3 354    *80*
    test byte[ebx+eax*4-1],#80            ;#004E9DEA: 366104203 FF 80            u  00 09  2  20      
    test byte[ebx+ecx*4-1],#80            ;#004F10BC: 366104213 FF 80            u  00 0A  2  19      
    test byte[ebx+esi*4-1],#80            ;#004E092C: 366104263 FF 80            u  00 48  2   3      
    test byte[ebx+edi*4-1],#80            ;#00510E8A: 366104273 FF 80            u  00 88  2 143      
    neg ecx                               ;#00560527: 367331                     np 02 02  1  39      
    imul ecx                              ;#004DF46D: 367351                     np 05 03 10 142      
    idiv ecx                              ;#0056C337: 367371                     np 05 07 46 692      
    call [#00401080] (IsBadWritePtr)      ;#0056D6B4: 377025 80104000            np 00 00  2  13      
    jmp dword[esi*4+#00566DCB]            ;#00566DC8: 377044265 CB6D5600         np 00 40  2 1241      
    jmp dword[edi*4+#00538AE8]            ;#00538AE5: 377044275 E88A5300         np 00 80  2  69      
    push dword[edx]                       ;#0056096D: 377062                     np 00 04  2 331      
    push dword[esp]                       ;#00564D79: 377064044                  np 00 10  2  10      
    push dword[#004020D4] (pp_File)       ;#00547FA5: 377065 D4204000            np 00 00  2  19      
    push dword[ebp-48] (j)                ;#004E0F6C: 377165 D0                  np 00 20  2 325      
    push dword[ebp-136] (varno)           ;#005670EC: 377265 78FFFFFF            np 00 20  2 1303      
    call edx                              ;#005601C5: 377322                     np 00 04  2 176      
    call esi                              ;#0056023D: 377326                     np 00 40  2 234      
    jmp eax                               ;#00564E49: 377340                     np 00 01  2  71      
    jmp ecx                               ;#00562C6C: 377341                     np 00 02  2 557      


>

                    shr eax,2             ;#00564EA6: 301350 02                  u  01 01  1  88      
                    cmp dword[#00402618] (diaglooping),0  ;#00564EDC: 203075 18264000 00         u  00 00  2  96      
                    jmp dword[esp]        ;#00564F40: 377044044                  np 00 10  2 110      
                    cmp dword[#00402618] (diaglooping),2  ;#00564F43: 203075 18264000 02         u  00 00  2 112      
                    shr eax,2             ;#00564FB4: 301350 02                  u  01 01  1 128      
                        lea esp,[esp+ecx*4+4]  ;#00565087: 215144214 04               uv 10 12  1 159 02 *02*
>
                    shld eax,edx,4        ;#0056383B: 017244320 04               np 05 05  4  33      
                    shl edx,4             ;#0056383F: 301342 04                  u  04 04  1  37      
                    add al,55             ;#00563842: 200300 37                  vu 01 01  1  37      
                        sub al,7          ;#0056384A: 200350 07                  uv 01 01  1  39      
                    cmp dword[esp+20],0   ;#0056385F: 203174044 14 00            u  00 10  2  46      
                    shld ecx,edx,4        ;#00563882: 017244321 04               np 06 06  4  56      
                    shld edx,eax,4        ;#00563886: 017244302 04               np 05 05  4  60      
                    add cl,55             ;#0056388D: 200301 37                  vu 02 02  1  64      
                        sub cl,7          ;#00563895: 200351 07                  uv 02 02  1  66      
                    cmp dword[esp+36],0   ;#005638AE: 203174044 24 00            u  00 10  2  71      
                        neg eax           ;#005638CF: 367330                     np 01 01  1  81      
                    xor esi,esi           ;#005638DE: 061366                     uv 40 40  1  84      
                    div ecx               ;#005638E0: 367361                     np 05 07 41  85      
                    or esi,1              ;#005638F0: 203316 01                  uv 40 40  1 130      
                    add al,48             ;#005638F3: 200300 30                  vu 01 01  1 130      
                    div ecx               ;#00563900: 367361                     np 05 07 41 136      
                    byte[eax-1],#82       ;#00561F94: 200170 FF 82               u  00 01  2  93      
                cmp [#004029DC] (ma_ip),ebx  ;#00561FB3: 071035 DC294000            vu 00 08  2 113      
                cmp [#004029DC] (ma_ip),ebx  ;#0056200E: 071035 DC294000            uv 00 08  2 149      
                cmp [#004029DC] (ma_ip),ebx  ;#00562095: 071035 DC294000            uv 00 08  2 195      
                cmp [#004029DC] (ma_ip),ebx  ;#005620D7: 071035 DC294000            uv 00 08  2 213      
;C:\Program Files (x86)\Phix\builtins\VM\pFixup.e:
;=================================================
                or al,16                  ;#00561D53: 200310 10                  uv 01 01  1   2      
                and ecx,255               ;#00561DD3: 201341 FF000000            vu 02 02  1 107      
                    lea edi,[edi+edx+1]   ;#00561ECF: 215174027 01               uv 80 84  1 204      
                    lea esi,[esi+edi]     ;#00561AA8: 215064076                  uv 40 C0  1  83      
                xchg [esp],edi            ;#00561ABB: 207074044                  np 80 90  3  87      
                sub ecx,[esp]             ;#00561ACF: 053014044                  uv 02 12  2  93      
                cmp dword[edi-8],1        ;#00561AF0: 203177 F8 01               u  00 80  2 101    *80*
                    push dword[esp+44]    ;#00561B2D: 377164044 2C               np 00 10  2 120      
                shl edx,2                 ;#00561B50: 301342 02                  u  04 04  1 134      
                add eax,edx               ;#00561B5C: 001320                     uv 01 05  1 136      
                add ebx,1                 ;#00561B6B: 203303 01                  vu 08 08  1 138      
                ror ebx,2                 ;#00561B72: 301313 02                  np 08 08  1 140      
                push dword[esp+32]        ;#00561B9C: 377164044 20               np 00 10  2 156      
                    ror esi,2             ;#00561C3E: 301316 02                  np 40 40  1 207      
                add esi,edx               ;#00561C56: 001326                     uv 40 44  1 214      
                sub ecx,edi               ;#00561CA3: 051371                     uv 02 82  1 247      
                ror esi,2                 ;#00561D0D: 301316 02                  np 40 40  1 290      
                add esi,edx               ;#00561D24: 001326                     uv 40 44  1 297      
;C:\Program Files (x86)\Phix\builtins\VM\pRepeN.e:
;=================================================
                cmp byte[esi-1],#80       ;#005616BB: 200176 FF 80               u  00 40  2  84      
                cmp byte[esi-1],#82       ;#00561738: 200176 FF 82               u  00 40  2 121      
                cmp [#004029E4] (ma_ip),ebx  ;#00561756: 071035 E4294000            uv 00 08  2 139      
                cmp [esi+edi],cl          ;#00561770: 070014076                  uv 00 C2  2 143      
                sub dword[esi-8],1        ;#00561782: 203156 F8 01               u  00 40  3 150      
                cmp dword[ebx+esi*4-8],1  ;#005617FE: 203174263 F8 01            u  00 48  2 201      
                cmp [#004029E4] (ma_ip),ebx  ;#00561813: 071035 E4294000            uv 00 08  2 206      
                cmp [#004029E4] (ma_ip),ebx  ;#005618B4: 071035 E4294000            uv 00 08  2 254      
                    add dword[ebx+edx*4-8],1  ;#00561929: 203104223 F8 01            u  00 0C  3 297      
                pop dword[edi]            ;#0056197C: 217007                     np 00 80  3 319      
                cmp dword[ebx+esi*4-8],1  ;#00561999: 203174263 F8 01            u  00 48  2 330      
                pop dword[edi]            ;#005619DE: 217007                     np 00 80  3 349      
                cmp [#004029E4] (ma_ip),ebx  ;#005619EB: 071035 E4294000            uv 00 08  2 356      
                cmp dword[ebx+esi*4-8],1  ;#00561A10: 203174263 F8 01            u  00 48  2 363      
;C:\Program Files (x86)\Phix\builtins\VM\pRepsN.e:
;=================================================
                sub ecx,[esp]             ;#00561252: 053014044                  uv 02 12  2 113      
                            push dword[esp+56]  ;#005612AA: 377164044 38               np 00 10  2 141      
                    cmp [eax-12],ecx      ;#005612BE: 071110 F4                  uv 00 03  2 157      
                    cmp byte[eax-1],#80   ;#005612D4: 200170 FF 80               u  00 01  2 162      
                                push dword[esp+56]  ;#005612FC: 377164044 38               np 00 10  2 180      
                                push dword[esp+56]  ;#00561323: 377164044 38               np 00 10  2 206      
                    sub dword[esi-8],1    ;#0056136C: 203156 F8 01               u  00 40  3 234      
                    cmp byte[esi-1],#80   ;#0056142F: 200176 FF 80               u  00 40  2 302      
                    add edi,esi           ;#005614C5: 001367                     uv 80 C0  1 351      
                    cmp [ebx+edi*4-12],ecx  ;#005614D5: 071114273 F4               uv 00 8A  2 362      
                add edx,[esp+8]           ;#00561525: 003124044 08               vu 04 14  2 388      
                shl edx,2                 ;#0056152C: 301342 02                  u  04 04  1 390      
                    sub dword[esi-8],1    ;#0056156F: 203156 F8 01               u  00 40  3 412      
                    xchg eax,edi          ;#00561573: 227                        np 81 81  2 415      
                    add edx,edi           ;#0056157E: 001372                     uv 04 84  1 419      
                add edx,[ebx+edi*4-12]    ;#0056159D: 003124273 F4               uv 04 8C  2 435      
                sub edx,[esp+4]           ;#005615A1: 053124044 04               uv 04 14  2 437 04   
                cmp dword[ebx+edi*4-12],0  ;#005615AB: 203174273 F4 00            u  00 88  2 440      
                add edx,esi               ;#005615D5: 001362                     uv 04 44  1 449      
                sub ecx,[esp+16]          ;#005615E8: 053114044 10               uv 02 12  2 463      
                add esi,[esp+4]           ;#00561644: 003164044 04               uv 40 50  2 498      
                sub ecx,[esp+16]          ;#00561648: 053114044 10               vu 02 12  2 499      
;C:\Program Files (x86)\Phix\builtins\VM\pMkSqN.e:
;=================================================
;C:\Program Files (x86)\Phix\builtins\VM\pApnd.e:
;================================================
                cmp dword[esp+12],0       ;#00560A35: 203174044 0C 00            u  00 10  2  28      
                cmp edi,[esp]             ;#00560A40: 073074044                  uv 00 90  2  30      
                cmp dword[esp+12],0       ;#00560A65: 203174044 0C 00            u  00 10  2  41    *10*
                add esi,edi               ;#00560AD5: 001376                     uv 40 C0  1  68      
                cmp dword[esp+12],0       ;#00560B1D: 203174044 0C 00            u  00 10  2  91      
                cmp dword[esp+12],0       ;#00560B75: 203174044 0C 00            u  00 10  2 117      
                cmp edi,[esp+4]           ;#00560BB7: 073174044 04               uv 00 90  2 136      
                cmp edi,[esp+12]          ;#00560BCB: 073174044 0C               uv 00 90  2 140      
                cmp dword[esp+16],0       ;#00560BDC: 203174044 10 00            u  00 10  2 143      
                pop dword[esi-4]          ;#00560C27: 217106 FC                  np 00 40  3 161      
                sub eax,[edx-20]          ;#00560C5E: 053102 EC                  vu 01 05  2 186      
                sub edx,edi               ;#00560C84: 051372                     vu 04 84  1 194      
                shr edx,1                 ;#00560C89: 321352                     u  04 04  1 196      
                push dword[esi-4]         ;#00560C8B: 377166 FC                  np 00 40  2 197      
                and edx,-4                ;#00560C8E: 201342 FCFFFFFF            uv 04 04  1 199      
                cmp dword[esp+12],0       ;#00560D17: 203174044 0C 00            u  00 10  2 248      
                    cmp byte[ecx-1],#80   ;#00560DA6: 200171 FF 80               u  00 02  2 283      
                    add dword[ecx-8],1    ;#00560DAF: 203101 F8 01               u  00 02  3 286      
                    add dword[esi-8],1    ;#00560DCA: 203106 F8 01               u  00 40  3 295      
                cmp byte[esi-1],#82       ;#00560DD7: 200176 FF 82               u  00 40  2 301      
                cmp byte[ecx-1],#82       ;#00560DDD: 200171 FF 82               u  00 02  2 303      
                sub edx,[esi-20]          ;#00560E61: 053126 EC                  uv 04 44  2 357 04   
                shr edx,2                 ;#00560E67: 301352 02                  u  04 04  1 360      
                cmp byte[ecx-1],#82       ;#00560E71: 200171 FF 82               u  00 02  2 363      
                push dword[ecx-12]        ;#00560E75: 377161 F4                  np 00 02  2 365      
                cmp byte[edx-1],#82       ;#00560EE1: 200172 FF 82               u  00 04  2 410      
                cmp dword[ebx+edi*4-8],1  ;#00560F38: 203174273 F8 01            u  00 88  2 445      
                sub esi,edx               ;#00560F6B: 051326                     vu 40 44  1 454      
                shr esi,2                 ;#00560F6F: 301356 02                  u  40 40  1 456      
                cmp dword[ebx+edi*4-8],1  ;#00560FD4: 203174273 F8 01            u  00 88  2 491      
                cmp dword[ebx+edi*4-8],1  ;#0056105E: 203174273 F8 01            u  00 88  2 537      
                shr ecx,2                 ;#00561083: 301351 02                  u  02 02  1 545      
                    cmp byte[esi-1],#82   ;#005610E3: 200176 FF 82               u  00 40  2 572      
;C:\Program Files (x86)\Phix\builtins\VM\pJcc.e:
;===============================================
                and dh,4                  ;#00560721: 200346 04                  vu 04 04  1  40      
                shl dh,4                  ;#00560727: 300346 04                  u  04 04  1  42      
                test ah,#80               ;#00560733: 366304 80                  vu 00 01  1  48      
                test dl,#80               ;#0056083C: 366302 80                  uv 00 04  1 172      
</v2>

--*/

--/*
https://www.jaist.ac.jp/iscenter-new/mpc/altix/altixdata/opt/intel/vtune/doc/users_guide/mergedProjects/analyzer_ec/mergedProjects/reference_olh/pentium4_hh/lips/lipsexp_agi.htm
Explicit AGI Conflict
Exp_AGI indicates a pairing restriction violation.

The instruction for which Exp_AGI is issued has an explicit Address Generation Interlock (AGI) conflict with a previous instruction. 
The AGI conflict prevents the two instructions from pairing.

AGI conflicts cause a one-cycle delay on Pentium(R) processors.

 TIP
Reorder instruction sequences to eliminate AGI conflicts by finding one or more instruction(s) that can be inserted between the two instructions that cause the AGI conflict. 
Remember that depending on how the instructions pair, you may need to insert up to three instructions in order to prevent the AGI conflict.

Example:

Original                Cycle                   Optimized               Cycle

1. mov eax, [edi]       1                       1. mov eax, [edi]       1
2. add ebx, 2           1                       3. add ecx, 4           1
3. add ecx, 4           3                       4. mov [ebx+2], eax     2
4. mov [ebx], eax       3                       2. add ebx, 2           2

Instruction 2 (which is issued to the V pipe in cycle 1) writes to the EBX register. 
Instruction 4, which is issued to the V pipe, explicitly reads from the EBX register. This causes an AGI conflict. 
Instruction 3 (and its pair, Instruction 4) stalls one cycle before executing.
Total execution time: 3 cycles

Reorder the code sequence to prevent the AGI conflict. 
With the exception of Instruction 4, none of the instructions depend on the output of the other instructions. 
The address calculation in Instruction 4 depends on the output of Instruction 2. 
However, by pulling the address calculation within Instruction 4, it can execute prior.
Total execution time: 2 cycles

Implicit AGI Conflict
Imp_AGI indicates a pairing restriction violation.

The instruction for which Imp_AGI is issued has an implicit Address Generation Interlock (AGI) conflict with the previous instruction. 
The AGI conflict prevents the two instructions from pairing.

AGI conflicts cause a one-cycle delay on Pentium(R) processors.

 ADVICE:
Reorder instruction sequences to eliminate AGI conflicts by inserting one or more instruction(s) between the instructions that cause the AGI conflict. 
Depending on how the instructions pair, you may need to insert up to three instructions to prevent the AGI conflict.

Example:

Original                    Cycle               Optimized               Cycle

1. inc ecx                  1                   4. add esp, 4           1
2. mov [edx+4], ecx         2                   1. inc ecx              1
3. mov [edx], eax           2                   2. mov [edx+4], ecx     2
4. add esp, 4               3                   3. mov [edx], eax       2
5. ret                      5                   5. ret                  3

Instruction 4, which is issued to the U pipe in cycle 3, writes to the ESP register. 
Instruction 5 implicitly writes to the ESP register. This causes an AGI conflict. 
Instruction 5 stalls one cycle before executing.
Total execution time: 5 cycles

Instruction 4 does not depend on the output of Instructions 1-3; it can therefore execute first. 
By reordering the code sequence in this way, the AGI conflict is prevented.
Total execution time: 3 cycles

Hmm: https://neverendingsecurity.wordpress.com/2015/04/07/openreil-open-source-library-that-implements-translator-and-tools-for-reil-reverse-engineering-intermediate-language/
Interesting: https://stackoverflow.com/questions/67081866/why-are-the-variables-i-and-j-considered-dead-in-the-control-flow-graph
--*/

--/*
From: https://godbolt.org/z/xhvdx5v58
/* Type your code here, or load an example. */
int add_all(int a, int b) {
    return a + b;
}

int main() {
    int x = add_all(1, 2);
    return x;
}
===>
add_all:
        push    {r7}
        sub     sp, sp, #12
        add     r7, sp, #0
        str     r0, [r7, #4]
        str     r1, [r7]
        ldr     r2, [r7, #4]
        ldr     r3, [r7]
        add     r3, r3, r2
        mov     r0, r3
        adds    r7, r7, #12
        mov     sp, r7
        ldr     r7, [sp], #4
        bx      lr
main:
        push    {r7, lr}
        sub     sp, sp, #8
        add     r7, sp, #0
        movs    r1, #2
        movs    r0, #1
        bl      add_all
        str     r0, [r7, #4]
        ldr     r3, [r7, #4]
        mov     r0, r3
        adds    r7, r7, #8
        mov     sp, r7
        pop     {r7, pc}
or Raspbian buster:
add_all:
        str     fp, [sp, #-4]!
        add     fp, sp, #0
        sub     sp, sp, #12
        str     r0, [fp, #-8]
        str     r1, [fp, #-12]
        ldr     r2, [fp, #-8]
        ldr     r3, [fp, #-12]
        add     r3, r2, r3
        mov     r0, r3
        add     sp, fp, #0
        ldr     fp, [sp], #4
        bx      lr
main:
        push    {fp, lr}
        add     fp, sp, #4
        sub     sp, sp, #8
        mov     r1, #2
        mov     r0, #1
        bl      add_all
        str     r0, [fp, #-8]
        ldr     r3, [fp, #-8]
        mov     r0, r3
        sub     sp, fp, #4
        pop     {fp, pc}
or Arm v7-a clang:
add_all:
        sub     sp, sp, #8
        str     r0, [sp, #4]
        str     r1, [sp]
        ldr     r0, [sp, #4]
        ldr     r1, [sp]
        add     r0, r0, r1
        add     sp, sp, #8
        bx      lr
main:
        push    {r11, lr}
        mov     r11, sp
        sub     sp, sp, #8
        mov     r0, #0
        str     r0, [sp, #4]
        mov     r0, #1
        mov     r1, #2
        bl      add_all
        str     r0, [sp]
        ldr     r0, [sp]
        mov     sp, r11
        pop     {r11, lr}
        bx      lr
or x64 msvc:
add_all PROC
        mov     dword [rsp+16], edx
        mov     dword [rsp+8], ecx
        mov     eax, dword [rsp+16]
        mov     ecx, dword [rsp+8]
        add     ecx, eax
        mov     eax, ecx
        ret     0
add_all ENDP

main    PROC
        sub     rsp, 56                             ; 00000038H
        mov     edx, 2
        mov     ecx, 1
        call    add_all
--      mov     dword [rsp+32], eax
--      mov     eax, dword [rsp+32]
        add     rsp, 56                             ; 00000038H
        ret     0
main    ENDP
or x86 msvc:
_add_all PROC
        push    ebp
        mov     ebp, esp
        mov     eax, dword [ebp+8]
        add     eax, dword [ebp+12]
        pop     ebp
        ret     0
_add_all ENDP

_main   PROC
        push    ebp
        mov     ebp, esp
        push    ecx
        push    2
        push    1
        call    _add_all
        add     esp, 8
--      mov     dword [ebp-4], eax
--      mov     eax, dword [ebp-4]
        mov     esp, ebp
        pop     ebp
        ret     0
_main   ENDP

Help typos by suggesting similar names
If the compilation error is that variable "user_pos" is not defined, and there's a variable userpos in that scope, that's worth mentioning in the error message. 
Levenshtein distance provides an easy-to-compute way of finding the similarity of two strings, be they variables, functions, or attributes.

In case: https://langdev.stackexchange.com/questions/1503/how-can-an-abstract-syntax-tree-be-converted-into-linear-three-address-code
         https://langdev.stackexchange.com/questions/1064/how-to-transpile-goto-to-a-language-that-lacks-it

SUG (DOCS): Phix does not formally use a proper abstract syntax tree, instead the initial parse tree 
            is iteratively transformed into what it calls a code generation tree, including a variant
            of linear scan register allocation that works directly (/iteratively) on the tree, since 
            it is much easier to manipulate smaller nodes and accumulate information about some subset
            of them, that is compared to a single flat list of instuctions for the entire program.
            An individual bloack/node can be tagged with a set of variables it would be useful to have
            in registers on entry, a set that actually are, similar for exit, and registers damaged.
            Note that a block may have, sy, x in rdi on entry but in rsi on exit, and it becomes the
            containing block's responsibility to cope/ignore such. Loops are a slightly specialised
            version of blocks that are responsible for co-ordinating their own in/out register sets.
registers: x86 has just 5 (eax,ecx,edx,edi,esi)
           x64 has 13 (rax,rcx,rdx,rdi,rsi,r8..15)
           arm has 11+32 (r0..r10 plus s0..s31, with d0..d15 overlapping them in pairs) [use fmsr/fmrs for r<=>s]
Note that registers may hold the reference or [raw] address of a variable, and the cgt needs to record that,
eg: lea eax,[fred] ; address
    mov eax,[fred] ; reference
    shl eax,2      ; raw address.
Likewise the floating point registers (d0..15 on arm, ?? on x86/64) can hold an atom's value.
Need to do something about eliding refcount updates...
It is fairly foolish to store unnamed temporary variables in the symtab....
In fact a flat symtab is probably wrong too, for instance if we want "scope" in the debugger...
--*/
