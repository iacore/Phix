--
-- Numbrix.exw
-- ===========
--
with javascript_semantics
include sets.e
sequence board, placed, px, py
integer w, h, limit, missing
bool solved

function get_moves(integer n)
    sequence res = {}
    integer x = px[n], y = py[n]
    if x>1 and board[y,x-1]=0 then res &= {{x-1,y}} end if
    if y>1 and board[y-1,x]=0 then res &= {{x,y-1}} end if
    if y<h and board[y+1,x]=0 then res &= {{x,y+1}} end if
    if x<w and board[y,x+1]=0 then res &= {{x+1,y}} end if
    return res
end function

procedure solve()
    if missing=0 then
        solved = true
    else
        -- scan for next to place, which will be the lowest
        -- of those with either n+1 or n-1 already placed,
        -- and checking that all such can still be placed.
        integer place
        sequence moves
        for n=limit to 1 by -1 do
            if not placed[n] then
                bool either = false
                if n<limit and placed[n+1] then
                    place = n
                    either = true
                    moves = get_moves(n+1)
                end if
                if n>1 and placed[n-1] then
                    place = n
                    if either then
                        moves = intersection(moves,get_moves(n-1))
                    else
                        either = true
                        moves = get_moves(n-1)
                    end if
                end if
                if either and length(moves)=0 then
                    return -- fail/backtrack
                end if
            end if
        end for
        missing -= 1
        placed[place] = true
        for m in moves do
            integer {x,y} = m
            px[place] = x
            py[place] = y
            board[y,x] = place
            solve()
            if solved then return end if
            board[y,x] = 0
        end for
        placed[place] = false
        missing += 1
    end if
end procedure

procedure Numbrix(string s)
    atom t0 = time()
    board = split(s,'\n')
    for i,line in board do
        board[i] = apply(split(substitute(line,'.','0')),to_number)
    end for
    w = length(board[1])
    h = length(board)
    limit = w*h
    placed = repeat(false,limit)
    px = repeat(0,limit)
    py = repeat(0,limit)
    missing = 0
    for x=1 to w do
        for y=1 to h do
            integer byx = board[y][x]
            if byx then
                placed[byx] = true
                px[byx] = x
                py[byx] = y
            else
                missing += 1
            end if
        end for
    end for
    solved = false
    solve()
    printf(1,"%s\n\n",s)
    if not solved then
        puts(1,"No solutions\n\n")
    else
        integer nchars = length(sprintf("%d",limit))
        string fmt = sprintf(" %%%dd",nchars)
        printf(1,"solution found in %s:\n\n",elapsed(time()-t0))
--      board = apply(true,join_by,{board,1,w,{""},{""},{fmt}})
--      board = apply(true,join,{board,{""},{""},{fmt}})
        for i,line in board do
            board[i] = join(line,"",fmt:=fmt)
        end for
        printf(1,"%s\n\n",{join(board,"\n")})
    end if
end procedure
 
constant boards = {"""
  .  .  .  .  .  .  .  .  .
  .  . 46 45  . 55 74  .  .
  . 38  .  . 43  .  . 78  .
  . 35  .  .  .  .  . 71  .
  .  . 33  .  .  . 59  .  .
  . 17  .  .  .  .  . 67  .
  . 18  .  . 11  .  . 64  .
  .  . 24 21  .  1  2  .  .
  .  .  .  .  .  .  .  .  .""","""
  .  .  .  .  .  .  .  .  .
  . 11 12 15 18 21 62 61  .
  .  6  .  .  .  .  . 60  .
  . 33  .  .  .  .  . 57  .
  . 32  .  .  .  .  . 56  .
  . 37  .  1  .  .  . 73  .
  . 38  .  .  .  .  . 72  .
  . 43 44 47 48 51 76 77  .
  .  .  .  .  .  .  .  .  .""","""
 17  .  .  . 11  .  .  . 59
  . 15  .  .  6  .  . 61  .
  .  .  3  .  .  . 63  .  .
  .  .  .  . 66  .  .  .  .
 23 24  . 68 67 78  . 54 55
  .  .  .  . 72  .  .  .  .
  .  . 35  .  .  . 49  .  .
  . 29  .  . 40  .  . 47  .
 31  .  .  . 39  .  .  . 45""","""
 109   0   0   0   0   0   0   0   0   0   0   0   0   0  43 
   0   0   0   0   0   0   0  65   0   0   0   0   0   0   0 
   0   0 101 100   0  92   0  76   0  68   0  48   3   0   0 
   0   0 102  97   0   0  80   0  74   0   0  49   6   0   0 
   0   0   0   0   0   0  79   0  73   0   0   0   0   0   0 
   0   0 116   0   0   0   0   0   0   0   0   0  10   0   0 
   0   0   0 118 217   0   0   0   0   0  55  52   0   0   0 
   0 121 120   0   0   0   0 213   0   0   0   0  12  35   0 
   0   0   0 166 167   0   0   0   0   0 205 204   0   0   0 
   0   0 162   0   0   0   0   0   0   0   0   0  14   0   0 
   0   0   0   0   0   0 173   0 177   0   0   0   0   0   0 
   0   0 156 153   0   0 150   0 178   0   0 201  16   0   0 
   0   0 155 154   0 144   0 180   0 188   0 200  17   0   0 
   0   0   0   0   0   0   0 183   0   0   0   0   0   0   0 
 135   0   0   0   0   0   0   0   0   0   0   0   0   0  21"""}
papply(boards,Numbrix)
wait_key()
