--
-- demo\rosetta\Ormiston_pairs.exw
-- ===============================
--
--  Uses a segmented sieve, which is about half the speed of get_primes_le(), but uses far less memory
--  If permited, get_primes_le(1e10) would generate a result of 455,052,511 primes, more than 32 bit 
--  can cope with, and use over 6GB of ram, [and take about 11mins 44s, that is on this box at least,]
--  whereas this processes them on-the-fly, and only uses about 6MB of memory (ie 0.1% of 6GB).
--
with javascript_semantics

atom t0 = time()

procedure ormiston_pairs(atom limit)
    // Generate primes using the segmented sieve of Eratosthenes.
    // credit: https://gist.github.com/kimwalisch/3dc39786fab8d5b34fee
    integer segment_size = floor(sqrt(limit)),
            count = 0, i = 3, s = 3
    atom p1 = 2, n = 3, nc = 1e5, low = 0, t1 = time()+1

    sequence isprime = repeat(true,segment_size+1),
             primes = {},
             multiples = {},
             orm30 = repeat(0,30)

    while low<=limit do
        sequence sieve = repeat(true,segment_size+1)
        if time()>t1 then
            progress("Processing %,d/%,d (%3.2f%%)\r",{low,limit,(low/limit)*100})
            t1 = time()+1
        end if

        // current segment = [low, high]
        atom high = min(low+segment_size,limit)
        // generate sieving primes using simple sieve of Eratosthenes
        while i*i<=min(high,segment_size) do
            if isprime[i+1] then
                for j=i*i to segment_size by i do
                    isprime[j+1] = false
                end for
            end if
            i += 2
        end while
    
        // initialize sieving primes for segmented sieve
        while s*s<=high do
            if isprime[s+1] then
                   primes &= s
                multiples &= s*s-low
            end if
            s += 2
        end while

        // sieve the current segment
        for mi,j in multiples do
            integer k = primes[mi]*2
            while j<segment_size do
                sieve[j+1] = false
                j += k
            end while
            multiples[mi] = j - segment_size
        end for

        while n<=high do
            if sieve[n-low+1] then // n is a prime
                if remainder(n-p1,18)=0
                and sort(sprint(p1))=sort(sprint(n)) then
                    if p1>=nc then
                        string e = elapsed_short(time()-t0)
                        progress("%,d Ormiston pairs before %,d (%s)\n", {count, nc, e})
                        nc *= 10
                    end if
                    count += 1
                    if count<=30 then
                        orm30[count] = sprintf("[%5d %5d]",{p1, n})
                        if count=30 then
                            printf(1,"First 30 Ormiston pairs:\n%s\n",join_by(orm30,1,3))
                        end if  
                    end if  
                end if
                p1 = n
            end if
            n += 2
        end while
        low += segment_size
    end while
    string e = elapsed_short(time()-t0)
    progress("%,d Ormiston pairs before %,d (%s)\n", {count, nc, e})
end procedure
ormiston_pairs(iff(platform()=JS?1e8:1e10))
?"done"
wait_key()
--/*
{{out}}
With limit upped to 1e10
<pre>
First 30 Ormiston pairs:
[ 1913  1931]   [18379 18397]   [19013 19031]
[25013 25031]   [34613 34631]   [35617 35671]
[35879 35897]   [36979 36997]   [37379 37397]
[37813 37831]   [40013 40031]   [40213 40231]
[40639 40693]   [45613 45631]   [48091 48109]
[49279 49297]   [51613 51631]   [55313 55331]
[56179 56197]   [56713 56731]   [58613 58631]
[63079 63097]   [63179 63197]   [64091 64109]
[65479 65497]   [66413 66431]   [74779 74797]
[75913 75931]   [76213 76231]   [76579 76597]

40 Ormiston pairs before 100,000 (0s)
382 Ormiston pairs before 1,000,000 (0s)
3,722 Ormiston pairs before 10,000,000 (0s)
34,901 Ormiston pairs before 100,000,000 (5s)
326,926 Ormiston pairs before 1,000,000,000 (55s)
3,037,903 Ormiston pairs before 10,000,000,000 (21:57)
</pre>
Note that running this under pwa/p2js with a limit of 1e9 would get you a blank screen for 1min 25s, hence I've limited it to 1e8<br>
I have not the patience to see whether JavaScript would actually cope with 1e10, but it should (with a blank screen for at least half an hour).
--*/

-- faster version, but only 4* not the 12* of riplets. Not posted to rc.
--/*
--requires("1.0.3")
requires(WINDOWS)
requires(64,true)
include builtins/primesieve.e
atom t0 = time(), t1 = time()+1,
     p = primesieve_next_prime(),
     p1 = p, count = 0, nc = 1e5
sequence orm30 = repeat(0,30)

procedure showt()
    if count=30 then
        printf(1,"First 30 Ormiston pairs:\n%s\n",join_by(orm30,1,3))
    else
        string e = elapsed_short(time()-t0)
        progress("%,d Ormiston pairs before %,d (%s)\n",{count,nc,e})
        nc *= 10
    end if
end procedure

while p<1e10 do
    p1 = p
    p = primesieve_next_prime()
    if remainder(p-p1,18)=0
    and sort(sprint(p))=sort(sprint(p1)) then
        if p>=nc then showt() end if
        count += 1
        if count<=30 then
            orm30[count] = sprintf("[%5d %5d]",{p1,p})
            if count=30 then showt() end if
        end if  
    elsif time()>t1 then
        progress("%,d\r",{p})
        t1 = time()+1
    end if
end while
showt()

--*/
--/*
First 30 Ormiston pairs:
[ 1913  1931]   [18379 18397]   [19013 19031]
[25013 25031]   [34613 34631]   [35617 35671]
[35879 35897]   [36979 36997]   [37379 37397]
[37813 37831]   [40013 40031]   [40213 40231]
[40639 40693]   [45613 45631]   [48091 48109]
[49279 49297]   [51613 51631]   [55313 55331]
[56179 56197]   [56713 56731]   [58613 58631]
[63079 63097]   [63179 63197]   [64091 64109]
[65479 65497]   [66413 66431]   [74779 74797]
[75913 75931]   [76213 76231]   [76579 76597]

40 Ormiston pairs before 100,000 (0s)
382 Ormiston pairs before 1,000,000 (0s)
3,722 Ormiston pairs before 10,000,000 (0s)
34,901 Ormiston pairs before 100,000,000 (3s)
326,926 Ormiston pairs before 1,000,000,000 (34s)
3,037,903 Ormiston pairs before 10,000,000,000 (5:55)
--*/
