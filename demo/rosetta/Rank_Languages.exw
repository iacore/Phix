--
-- demo\rosetta\Rank_Languages.exw
-- ===============================
--
--  This contains output_html which the rc page does not.
--
include builtins\timedate.e
include builtins\libcurl.e

constant output_html = false,
--constant output_html = true,
         output_users = false,
         limit = 20,    -- 0 to list all (ignored if output_html is true)
         refresh_cache = timedelta(days:=21),   -- 0 for always
         languages = "http://rosettacode.org/wiki/Category:Programming_Languages",
         categories = "http://www.rosettacode.org/mw/index.php?title=Special:Categories&limit=5000"

function open_download(string filename, url)
    bool refetch = true
    filename = join_path({"rc_cache",filename})
    if file_exists(filename) then
        -- use existing file if <= refresh_cache (1 day) old
        sequence last_mod = get_file_date(filename)     -- (0.8.1+)
        atom delta = timedate_diff(last_mod,date())
--?{delta,refresh_cache,elapsed(delta),elapsed(refresh_cache)}
        refetch = (delta>refresh_cache)
    end if
    if refetch then
        printf(1,"Downloading %s...\n",{filename})
        CURLcode res = curl_easy_get_file(url,"",filename) -- (no proxy)
        if res!=CURLE_OK then
            string error = sprintf("%d",res)
            if res=CURLE_COULDNT_RESOLVE_HOST then
                error &= " [CURLE_COULDNT_RESOLVE_HOST]"
            end if
            printf(1, "Error %s downloading file\n", error)
            {} = wait_key()
            abort(0)
        end if  
    end if
    return get_text(filename)
end function

--/*
-- Note these are not merged, the output now has eg two "MiniZinc" entries.
constant cn = {{"Cach\xC3\xA9 ObjectScript","Cache ObjectScript"},
               {"D\xC3\xA9j\xC3\xA0 Vu","Deja Vu"},
               {"F\xC5\x8Drmul\xC3\xA6","Formulae"},
               {"\xCE\x9CC++","uC++"},
               {"\xD0\x9CiniZinc","MiniZinc"},
               {"\xD0\x9C\xD0\x9A-61/52","MK-61/52"},
               {"\xE0\xAE\x89\xE0\xAE\xAF\xE0\xAE\xBF\xE0\xAE\xB0\xE0\xAF\x8D/Uyir","Uyir"}},
         {corrupt_names,corrected_names} = columnize(cn)

function correct_name(string language_name)
    integer k = find(language_name,corrupt_names)
--  if k!=0 then
    if 0 then
        language_name = corrected_names[k]
    end if
    return language_name
end function
--*/

function html_clean(string ri)
    ri = substitute(ri,`&quot;`,`"`)
    ri = substitute(ri,`&#039;`,`'`)
    ri = substitute(ri,"\xE2\x80\x99","'")
    ri = substitute(ri,"\xC3\xB6","o")
    ri = substitute(ri,"%3A",":")
    ri = substitute(ri,"%E2%80%93","-")
    ri = substitute(ri,"%E2%80%99","'")
    ri = substitute(ri,"%27","'")
    ri = substitute(ri,"%2B","+")
    ri = substitute(ri,"%C3%A8","e")
    ri = substitute(ri,"%C3%A9","e")
    ri = substitute(ri,"%C3%B6","o")
    ri = substitute(ri,"%C5%91","o")
    ri = substitute(ri,"%22",`"`)
    ri = substitute(ri,"%2A","*")
    ri = substitute(ri,"\xC2\xB5","u")
    ri = substitute(ri,"\xC3\xA0","a")
    ri = substitute(ri,"\xC3\xA6","a")
    ri = substitute(ri,"\xC3\xA9","e")
    ri = substitute(ri,"\xC3\xB4","o")
    ri = substitute(ri,"\xC5\x8D","o")
    ri = substitute(ri,"\xCE\x9C","u")
    ri = substitute(ri,"\xD0\x9C\xD0\x9A","MK")
    ri = substitute(ri,"\xE0\xAE\x89\xE0\xAE\xAF\xE0\xAE\xBF\xE0\xAE\xB0\xE0\xAF\x8D/","")
    ri = substitute(ri,"APEX","Apex")
    ri = substitute(ri,"uC++ ","UC++")
    ri = substitute(ri,`CASIO BASIC`,`Casio BASIC`)
    ri = substitute(ri,`Visual BASIC`,`Visual Basic`)
    ri = substitute(ri,`INTERCAL`,`Intercal`)
    ri = substitute(ri,`SETL4`,`Setl4`)
    ri = substitute(ri,`QBASIC`,`QBasic`)
    ri = substitute(ri,`RED`,`Red`)
    ri = substitute(ri,`OCTAVE`,`Octave`)
    ri = substitute(ri,`OoREXX`,`OoRexx`)
    return ri
end function

include builtins/sets.e

constant cat_title = `title="Category:`

function extract_names()
sequence results = {} -- {rank,count,name}

    if get_file_type("rc_cache")!=FILETYPE_DIRECTORY then
        if not create_directory("rc_cache") then
            crash("cannot create rc_cache directory")
        end if
    end if
    -- 1) extract languages from eg title="Category:Phix"
    sequence language_names = {}
    string langs = open_download("languages.htm",languages),
--  string langs = open_download("Programming_Languages.htm",languages),
           language_name
    langs = langs[1..match(`<div class="printfooter">`,langs)-1]
    integer start = match("<h2>Subcategories</h2>",langs), k
    while true do
        k = match(cat_title,langs,start)
        if k=0 then exit end if
        k += length(cat_title)
        start = find('"',langs,k)
--      language_name = correct_name(langs[k..start-1])
        language_name = html_clean(langs[k..start-1])
        language_names = append(language_names,language_name)
    end while
--  printf(1,"%d lanbguages found\n",length(language_names))    -- 842

    -- 2) extract results from eg title="Category:Phix">Phix</a>?? (997 members)</li>
    --     but obviously only when we have found that language in the phase above.
    --     (note there is / ignore some wierd uncode-like stuff after the </a>...)
    string cats = open_download("categories.htm",categories)
    start = 1
    while true do
        k = match(cat_title,cats,start)
        if k=0 then exit end if
        k += length(cat_title)
        start = find('"',cats,k)
--      language_name = correct_name(cats[k..start-1])
        language_name = html_clean(cats[k..start-1])
        start = match("</a>",cats,start)+4
        if output_users then
            if length(language_name)>5 
            and language_name[-5..-1] = " User" then
                language_name = html_clean(language_name[1..-6])
            else
                language_name = ""
            end if
        end if
        if length(language_name)
        and find(language_name,language_names) then
            while not find(cats[start],"(<") do start += 1 end while -- (ignore)
            string members = cats[start..find('<',cats,start+1)]
            members = substitute(members,",","")
            sequence res = scanf(members,"(%d member%s)<")
            results = append(results,{0,res[1][1],language_name})
        end if      
    end while
--/* gave up (too many annoying little fiddly differences, got "d" down to 2 entries)...
    string rcpop = open_download("RC_POP.OUT","http://rosettacode.org/wiki/RC_POP.OUT"),
           second = `Edit section: output, sorted by programming language`,
           starter = `(total) number of entries (solutions) detected`
    integer edit = match(second,rcpop),
            begin = match(starter,rcpop,edit),
            finish = match(`</pre>`,rcpop,begin)
    if edit=0 or start=0 or finish=0 then ?9/0 end if
    rcpop = rcpop[begin+length(starter)..finish]
    sequence lines = split(rcpop,'\n')[1..$-2],
             langz = vslice(results,3)
    for i=1 to length(lines) do
        integer m = match(`entries)  `,lines[i])
        if m=0 then
            m = match(`entry)    `,lines[i])
            if m=0 then ?9/0 end if
        end if
        lines[i] = html_clean(lines[i][m+10..$])
    end for
    lines = sort(lines)
    langz = sort(langz)
    if lines!=langz then
        sequence d = difference(lines,langz) -- {`Perl 6`,`uC++`}
        ?d
        results = {}
        langs = ""
        cats = ""
        rcpop = ""
        ?9/0
    end if
    printf(1,"%d languages found\n",length(lines)-1)    -- 814
--?9/0
--?shorten(lines)
--  printf(1,"%d languages found\n",length(results))    -- 815
--*/
    results = sort_columns(results,{-2,3}) -- (descending 2nd column, then asc 3rd)

    --3) assign rank
    integer count, prev = 0, rank
    for i=1 to length(results) do
        count = results[i][2]
        if count=prev then
            results[i][1] = "="
        else
            rank = i
            results[i][1] = sprint(rank)
            prev = count
        end if
    end for

    return results
end function

procedure show(sequence results)
    for i=1 to iff(limit?limit:length(results)) do
        printf(1,"%3s: %,d - %s\n",results[i])
    end for
end procedure

constant html_header = """
<!DOCTYPE html>
<html lang="en">
 <head>
  <meta charset="utf-8" />
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>Rosettacode Rank Languages by %s</title>
 </head>
 <body>
  <h2>Rosettacode Rank Languages by %s</h2>
  Generated %s<br><br>
  <table border="1" cellpadding="4" style="border-collapse: collapse">
   <tr><th align=right>Rank</th><th align=right>Entries</th><th align=left>Name</th></tr>
""",
         html_line = """
   <tr><td align=right>%s</td><td align=right>%,d</td><td>%s</td></tr>
""",
         html_footer = """
  </table>
 </body>
</html>
"""

procedure create_html(sequence results)
    integer fn = open("popularity.html","w")
    string what = iff(output_users?"number of users"
                                  :"popularity")
    printf(fn,html_header,{what,what,format_timedate(date())})
    for i=1 to length(results) do
        printf(fn,html_line,results[i])
    end for
    puts(fn,html_footer)
    close(fn)
end procedure

sequence results = extract_names()
if output_html then
    create_html(results)
else
    show(results)
end if

?"done"
{} = wait_key()
--/*
--output (eg)
  1: 1,137 - Go
  2: 1,075 - Perl 6
  3: 1,054 - Python
  4: 1,042 - Kotlin
  5: 1,006 - Perl
  6: 998 - Julia
  7: 997 - Phix
  8: 989 - Racket
  9: 949 - C
 10: 934 - J
 11: 931 - Zkl
 12: 930 - Tcl
 13: 906 - Java
 14: 902 - REXX
 15: 875 - D
 16: 873 - Ruby
 17: 869 - Haskell
 18: 804 - Sidef
 19: 793 - Scala
 20: 775 - PicoLisp
--*/
