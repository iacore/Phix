--
-- demo\rosetta\Sierpinski_curve.exw
-- =================================
--
--  Draws curves lo to hi (simultaneously), initially {1,1}, max {8,8}
--  Press +/- to change hi, shift +/- to change lo, ctrl +/- for both.
--  ("=_" are also mapped to "+-", for the non-numpad +/-)
--
with javascript_semantics
include pGUI.e

Ihandle dlg, canvas
cdCanvas cddbuffer, cdcanvas

integer width, height,
        lm = 0, tm = 0, -- left and top margins
        lo = 1, hi = 1
atom cx, cy, h

procedure lineTo(atom newX, newY)
    cdCanvasVertex(cddbuffer, newX-width/2+h+lm, height-newY+2*h+tm)
    cx = newX
    cy = newY
end procedure

procedure lineN() lineTo(cx,cy-2*h) end procedure
procedure lineS() lineTo(cx,cy+2*h) end procedure
procedure lineE() lineTo(cx+2*h,cy) end procedure
procedure lineW() lineTo(cx-2*h,cy) end procedure
 
procedure lineNW() lineTo(cx-h,cy-h) end procedure
procedure lineNE() lineTo(cx+h,cy-h) end procedure
procedure lineSE() lineTo(cx+h,cy+h) end procedure
procedure lineSW() lineTo(cx-h,cy+h) end procedure

forward procedure sierN(integer level)
forward procedure sierE(integer level)
forward procedure sierS(integer level)
forward procedure sierW(integer level)

procedure sierN(integer level)
   if level=1 then
      lineNE()  lineN()
      lineNW()
   else
      sierN(level-1)  lineNE()
      sierE(level-1)  lineN()
      sierW(level-1)  lineNW()
      sierN(level-1) 
   end if
end procedure
 
procedure sierE(integer level)
   if level=1 then
      lineSE()  lineE()
      lineNE() 
   else
      sierE(level-1)  lineSE()
      sierS(level-1)  lineE()
      sierN(level-1)  lineNE()
      sierE(level-1) 
   end if
end procedure
 
procedure sierS(integer level)
   if level=1 then
      lineSW()  lineS()
      lineSE() 
   else
      sierS(level-1)  lineSW()
      sierW(level-1)  lineS()
      sierE(level-1)  lineSE()
      sierS(level-1) 
   end if
end procedure
 
procedure sierW(integer level)
   if level=1 then
      lineNW()  lineW()
      lineSW() 
   else
      sierW(level-1)  lineNW()
      sierN(level-1)  lineW()
      sierS(level-1)  lineSW()
      sierW(level-1) 
   end if
end procedure

procedure sierpinskiCurve(integer level)
   sierN(level)     lineNE()
   sierE(level)     lineSE()
   sierS(level)     lineSW()
   sierW(level)     lineNW()
end procedure

function redraw_cb(Ihandle /*ih*/)
    {width, height} = IupGetIntInt(canvas, "DRAWSIZE")
    if width>height then
        lm = floor((width-height)/2)
        tm = 0
        width = height
    else
        lm = 0
        tm = floor((height-width)/2)
        height = width
    end if
    cdCanvasActivate(cddbuffer)
    for level=lo to hi do
        cx = width/2
        cy = height
        h = cx/power(2,level+1)
        cdCanvasBegin(cddbuffer, CD_CLOSED_LINES)
        sierpinskiCurve(level)
        cdCanvasEnd(cddbuffer)
    end for
    cdCanvasFlush(cddbuffer)
    return IUP_DEFAULT
end function

function map_cb(Ihandle ih)
    cdcanvas = cdCreateCanvas(CD_IUP, ih)
    cddbuffer = cdCreateCanvas(CD_DBUFFER, cdcanvas)
    cdCanvasSetBackground(cddbuffer, CD_WHITE)
    cdCanvasSetForeground(cddbuffer, CD_BLUE)
    return IUP_DEFAULT
end function

procedure set_dlg_title()
    IupSetStrAttribute(dlg, "TITLE", "Sierpinski curve (%d..%d)",{lo,hi})
end procedure

function key_cb(Ihandle /*ih*/, atom c)
    if c=K_ESC then return IUP_CLOSE end if -- (standard practice for me)
    if c=K_F5 then return IUP_DEFAULT end if -- (let browser reload work)
    c = iup_XkeyBase(c)
    if find(c,"+=-_") then
        bool bCtrl = IupGetInt(NULL,"CONTROLKEY"),
             bShift = IupGetInt(NULL,"SHIFTKEY")
        if c='+' or c='=' then
            if bCtrl or not bShift then hi = min(8,hi+1) end if
            if bCtrl or     bShift then lo = min(lo+1,hi) end if
        elsif c='-' or c='_' then
            if bCtrl or     bShift then lo = max(1,lo-1) end if
            if bCtrl or not bShift then hi = max(lo,hi-1) end if
        end if
        set_dlg_title()
        cdCanvasClear(cddbuffer)
        IupUpdate(canvas)
    end if
    return IUP_CONTINUE
end function

procedure main()
    IupOpen()
    canvas = IupCanvas("RASTERSIZE=770x770")
    IupSetCallbacks(canvas, {"MAP_CB", Icallback("map_cb"),
                             "ACTION", Icallback("redraw_cb")})
    dlg = IupDialog(canvas)
    IupSetCallback(dlg, "KEY_CB", Icallback("key_cb"))
    set_dlg_title()
    IupShow(dlg)
    IupSetAttribute(canvas, "RASTERSIZE", NULL)
    if platform()!=JS then
        IupMainLoop()
        IupClose()
    end if
end procedure

main()

