--
-- demo\rosetta\SimpleHttpServer.exw
-- =================================
--
--  Windows only for now (should be relatively straightforward to get it working on linux)
--                       (it is the routines in builtins\sockets.e that are windows-only.)
--
--  Once this is running, open http://localhost:8080/ in your browser, or run
--  "curl http://localhost:8080" (that is, assuming you have installed curl).
-- 
free_console() -- (as per docs, ensures output not hidden when running on Edix/Edita)
include builtins\sockets.e      -- added for 0.8.1

constant MAX_QUEUE      = 100,
         ESCAPE         = #1B,
--/*
local headers = "HTTP/1.1 200 OK\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Length: %d\r\n\r\n%s"
local content = "<!doctype html><html><title>Goodbye, World!</title><h1>Goodbye, World!"
local server = assert(socket.bind("localhost", 8080))
--*/
         content = substitute("""
<!DOCTYPE html>
<html>
 <head>
  <title>Bye-bye baby bye-bye</title>
  <style>
   body { background-color: #111 }
   h1 { font-size:4cm; text-align: center; color: black;
        text-shadow: 0 0 2mm red}
  </style>
 </head>
 <body>
  <h1>Goodbye, world!</h1>
 </body>
</html>

""","\n","\r\n"),
         response = sprintf(substitute("""
HTTP/1.1 200 OK
Content-Type: text/html; charset=UTF-8
Content-Length: %d
Content-Encoding: identity
Connection: close

%s""","\n","\r\n"),{length(content),content})

puts(1,"server started, open http://localhost:8080/ in browser or curl, press Esc or Q to quit\n")
atom sock = socket(AF_INET,SOCK_STREAM,NULL),
     pSockAddr = sockaddr_in(AF_INET, "", 8080)
if bind(sock, pSockAddr)=SOCKET_ERROR then crash("bind (%v)",{get_socket_error()}) end if
if listen(sock,MAX_QUEUE)=SOCKET_ERROR then crash("listen (%v)",{get_socket_error()}) end if
--?{"sock",sock}
while not find(get_key(),{ESCAPE,'q','Q'}) do
    {integer code} = select({sock},{},{},250000)    -- (0.25s)
    if code=SOCKET_ERROR then crash("select (%v)",{get_socket_error()}) end if
--?{"code",code}
    if code>0 then  -- (not timeout)
--?{"code",code}
        atom peer = accept(sock),
             ip = getsockaddr(peer)
--?"recv"
--20/12/21: (no help whatsoever!)
--while true do
        {integer len, string request} = recv(peer)
--  if len=0 then exit end if
        printf(1,"Client IP: %s\n%s\n",{ip_to_string(ip),request})
        if length(request)>3 and request[1..4]="GET " then
--?"send"
            integer bytes_sent = send(peer,response)
            printf(1,"%d bytes successfully sent\n",bytes_sent)
        end if
--end while
--?"shutdown"
        shutdown(peer, SD_SEND) -- tell curl it's over
-- nice try, makes diddly squat difference....
--      shutdown(peer, SD_RECEIVE) -- tell curl it's over
--?"close"
        peer = closesocket(peer)  --    (as does this)
--??? (nope, triggers an error...[both])
--      shutdown(sock, SD_SEND) -- tell curl it's over
--      shutdown(sock, SD_RECEIVE) -- tell curl it's over

--?"fin"
    end if
end while
sock = closesocket(sock)
WSACleanup()

?"finished"
{} = wait_key()

--/* Output (server) - I added two '_' to the Accept line:

server started, open http://localhost:8080/ in browser or curl, press Esc or Q to quit
Client IP: 127.0.0.1
GET / HTTP/1.1
Host: localhost:8080
User-Agent: curl/7.55.1
Accept: *_/_*


352 bytes successfully sent
(After which, enter esc/q/Q/<Ctrl C> to terminate the server.)

While running "curl http://localhost:8080" gives:
<!DOCTYPE html>
<html>
 <head>
  <title>Bye-bye baby bye-bye</title>
  <style>
   body { background-color: #111 }
   h1 { font-size:4cm; text-align: center; color: black;
        text-shadow: 0 0 2mm red}
  </style>
 </head>
 <body>
  <h1>Goodbye, world!</h1>
 </body>
</html>

--*/

