--
-- demo/rosetta/Speech.exw
-- =======================
--

string text = "This is an example of speech synthesis"

include pComN.ew

procedure speak(atom pVoice, string text)
--  integer flags = or_bits(SPF_ASYNC,SPF_IS_XML)
    integer flags = SPF_IS_XML
    {} = cominvk(pVoice,ISpVoice_Speak,{unicode_string(text),flags,0})
end procedure

function get_status(atom pVoice)
--  atom pMem = allocate(20)
    atom pMem = allocate(80)
--  atom res = cominvk(pVoice,ISpVoice_GetStatus,{1,pMem,NULL})
?1
    object res = cominvk(pVoice,ISpVoice_GetStatus,{1,pMem,pMem+72})
?res
?2
--  ?peek({pMem,20})
    ?peek({pMem,80})
    free(pMem)
    return res
end function

if platform()=WINDOWS then
?text
    CoInitializeEx()
    atom pVoice = allocate(machine_word()),
         res = CoCreateInstance(CLSID_SpVoice,IID_ISpVoice,pVoice)
    if res!=S_OK then
        crash("Failed to initialize SpeechAPI. (%08x)\n",res)
    end if
    speak(pVoice,text)
while true do
--while false do
    ?get_status(pVoice)
    sleep(1)
end while

    pVoice = com_release(pVoice)
    CoUnInitialize()
    freeGUIDS()
else
    {} = system_exec(sprintf(`espeak "%s"`,text))
end if

?"done"
{} = wait_key()
abort(0)

--/*
typedef enum SPEVENTENUM
{
    SPEI_UNDEFINED,

    //--- TTS engine
    SPEI_START_INPUT_STREAM,
    SPEI_END_INPUT_STREAM,
    SPEI_VOICE_CHANGE,
    SPEI_TTS_BOOKMARK,
    SPEI_WORD_BOUNDARY,
    SPEI_PHONEME,
    SPEI_SENTENCE_BOUNDARY,
    SPEI_VISEME,
    SPEI_TTS_AUDIO_LEVEL,

    //--- Engine vendors use these reserved bits
    SPEI_TTS_PRIVATE,
    SPEI_MIN_TTS,
    SPEI_MAX_TTS,

    //--- Speech Recognition
    SPEI_END_SR_STREAM,
    SPEI_SOUND_START,
    SPEI_SOUND_END,
    SPEI_PHRASE_START,
    SPEI_RECOGNITION,
    SPEI_HYPOTHESIS,
    SPEI_SR_BOOKMARK,
    SPEI_PROPERTY_NUM_CHANGE,
    SPEI_PROPERTY_STRING_CHANGE,
    SPEI_FALSE_RECOGNITION,
    SPEI_INTERFERENCE,
    SPEI_REQUEST_UI,
    SPEI_RECO_STATE_CHANGE,
    SPEI_ADAPTATION,
    SPEI_START_SR_STREAM,
    SPEI_RECO_OTHER_CONTEXT,
    SPEI_SR_AUDIO_LEVEL,
    SPEI_SR_RETAINEDAUDIO,

    //--- Engine vendors use these reserved bits
    SPEI_SR_PRIVATE,
    SPEI_MIN_SR,
    SPEI_MAX_SR,

    //--- Reserved: Do not use
    SPEI_RESERVED1,
    SPEI_RESERVED2,
    SPEI_RESERVED3
} SPEVENTENUM;

typedef struct SPEVENT
{
    WORD         eEventId;      -- see SPEVENTENUM
    WORD         elParamType;
    ULONG        ulStreamNum;
    ULONGLONG    ullAudioStreamOffset;
    WPARAM       wParam;
    LPARAM       lParam;
} SPEVENT;

HRESULT GetEvents(
   ULONG     ulCount,
   SPEVENT  *pEventArray,
   ULONG    *pulFetched
);
--*/
