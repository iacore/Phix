--
-- demo/rosetta/SpliRT.exw 
-- =======================
--
--  *Spli*t *R*ectangle into *T*riangles
-- 
-- Extending the approach suggested by Nigel Galloway I devised a scheme that needs no checking,
-- and penned a wee little interactive visualisation demo of it, that can be run [http://phix.x10.mx/p2js/SpliRT.htm here].
-- Should you find a way to make it draw similar triangles, shout out and let me know n and canvas size!
--
with javascript_semantics
include pGUI.e
constant title = "Divide rectange into unequal triangles",
help_text = """
Press F1 to see this help text.
Let the rectangle/canvas be ABCD (clockwise) and 
P be the leftmost point where Red and Blue touch, and 
Q (if needed, aka n!=3) the rightmost vertex of the Green triangle.
The Red triangle (ACD) is a right angle triangle (no others will be).
The Blue triangle (BPC) is an isoceles triangle except when the canvas 
is square and n=3, in which case P is 1/3 along AC (nearer A) making 
BPC acture and ABP (Green) obtuse (and therefore non-similar). 
For a non-square rectangle and n=3 one of BPC and ABP is always 
acute and the other obtuse (and therefore non-similar).
The green triangle (AQP when n!=3, AQ==AB*0.6) is non-isoceles.
The remainder (QBP) is split equally along QB to create the remaining 
n-3 triangles, drawn in black and white, and all of them are acute and non-isoceles and non-similar.
In that way, none of the triangles can be similar for any n and do not need checking.

Press +/- to alter n, resize the window to change the canvas/rectangle 
size, which of course can be used to make it square or not square (the
canvas is initially square since that can be a bit fiddly).
"""
integer n = 5

Ihandle dlg, canvas
cdCanvas cddbuffer, cdcanvas

procedure draw_triangle(sequence t, integer colour)
    cdCanvasSetForeground(cddbuffer, colour)
    cdCanvasBegin(cddbuffer,CD_FILL)
    for c=1 to 3 do
        atom {x,y} = t[c]
        cdCanvasVertex(cddbuffer, x, y)
    end for
    cdCanvasEnd(cddbuffer)
end procedure

function redraw_cb(Ihandle /*ih*/)
    integer {w,h} = IupGetIntInt(canvas,"DRAWSIZE")
    atom px = w/2, py = h/2
    string details = sprintf(" (n=%d, rectangle %dx%d)",{n,w,h})
    IupSetStrAttribute(dlg,"TITLE",title&details)
    cdCanvasActivate(cddbuffer)
    cdCanvasClear(cddbuffer)

    if n<3 then
        cdCanvasSetForeground(cddbuffer, CD_RED)
        cdCanvasSetTextAlignment(cddbuffer, CD_CENTER)
        cdCanvasText(cddbuffer,px,py,"NOT POSSIBLE!")
    else
        draw_triangle({{0,0},{0,h},{w,0}},CD_RED)
        if n=3 and w=h then {px,py} = {w/3,h*2/3} end if
        draw_triangle({{px,py},{w,h},{w,0}},CD_BLUE)
        if n=3 then
            draw_triangle({{0,h},{px,py},{w,h}},CD_GREEN)
        else
            atom qx = w*0.6,
                 qd = (w-qx)/(n-3)
            draw_triangle({{0,h},{px,py},{qx,h}},CD_GREEN)
            atom bw = CD_WHITE
            for i=4 to n do
                bw = iff(bw=CD_WHITE?CD_BLACK:CD_WHITE)
                draw_triangle({{qx,h},{px,py},{qx+qd,h}},bw)
                qx += qd
            end for
        end if
    end if
    cdCanvasFlush(cddbuffer)
    return IUP_DEFAULT
end function

function map_cb(Ihandle ih)
    cdcanvas = cdCreateCanvas(CD_IUP, ih)
    cddbuffer = cdCreateCanvas(CD_DBUFFER, cdcanvas)
    cdCanvasSetBackground(cddbuffer, CD_WHITE)
    return IUP_DEFAULT
end function

function help_cb(Ihandln /*ih*/)
    IupMessage(title,help_text,bWrap:=false)
    return IUP_IGNORE -- (don't open browser help!)
end function

function key_cb(Ihandle /*dlg*/, atom c)
    if c=K_ESC then return IUP_CLOSE end if -- (standard practice for me)
    if c=K_F5 then return IUP_DEFAULT end if -- (let browser reload work)
    if c=K_F1 then return help_cb(NULL) end if
    if c='-' then n-= 1 IupRedraw(dlg) end if
    if c='+' then n+= 1 IupRedraw(dlg) end if
    return IUP_CONTINUE
end function

IupOpen()
canvas = IupCanvas("RASTERSIZE=500x500")
IupSetCallbacks(canvas, {"MAP_CB", Icallback("map_cb"),
                         "ACTION", Icallback("redraw_cb")})
dlg = IupDialog(canvas,`TITLE="%s"`,{title})
IupSetCallback(dlg, "K_ANY", Icallback("key_cb"))
IupShow(dlg)
IupSetAttribute(canvas, "RASTERSIZE", NULL)
IupSetAttributeHandle(NULL,"PARENTDIALOG",dlg)
if platform()!=JS then
    IupMainLoop()
    IupClose()
end if

