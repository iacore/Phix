--
-- demo\rosetta\Three_word_location.exw
-- ====================================
--
with javascript_semantics
 
function toWord(integer w)
    return sprintf("W%05d", w)
end function
 
function fromWord(string ws)
    sequence r = scanf(ws,"W%05d")
    integer res = r[1][1]
    return res
end function
 
printf(1,"Starting figures:\n")
atom lat =  28.3852,
     lon = -81.5638
printf(1,"  latitude = %0.4f, longitude = %0.4f\n", {lat, lon})
 
-- convert lat and lon to positive integers
integer ilat := floor((lat+90)*10000),
        ilon := floor((lon+180)*10000)
 
-- build 43 bit BigInt comprising 21 bits (lat) and 22 bits (lon)
-- (std phix atoms have 53/64 bits of precision on 32/64 bit, both plenty)
atom latlon := (ilat << 22) + ilon
 
-- isolate relevant bits
integer w1 = (latlon >> 28) && 0x7fff,
        w2 = (latlon >> 14) && 0x3fff,
        w3 = latlon && 0x3fff
 
-- convert to word format
string w1s = toWord(w1),
       w2s = toWord(w2),
       w3s = toWord(w3)
 
-- and print the results
printf(1,"\nThree word location is:\n")
printf(1,"  %s %s %s\n", {w1s, w2s, w3s})
 
-- now reverse the procedure
w1 = fromWord(w1s)
w2 = fromWord(w2s)
w3 = fromWord(w3s)
 
-- NB: or_bits (likewise ||), being expressly 32-bit, is NOT appropriate here...
latlon = (w1 << 28) + (w2 << 14) + w3
ilat = latlon >> 22
ilon = latlon && 0x3fffff
lat = ilat/10000 - 90
lon = ilon/10000 - 180
 
-- and print the results
printf(1,"\nAfter reversing the procedure:\n")
printf(1,"  latitude = %0.4f, longitude = %0.4f\n", {lat, lon})


?"done"
{} = wait_key()
--/* output:
Starting figures:
  latitude = 28.3852, longitude = -81.5638

Three word location is:
  W18497 W11324 W01322

After reversing the procedure:
  latitude = 28.3852, longitude = -81.5638
--*/



--/* some thoughts. Go for a 4-word location accurate to 1.1m:
=== four word location ===
-- My unix_dict() has 25107 words, just over 3000 shy of what would be needed. At first I considered dropping
-- the precision, but increasing it and using 4 words means we need 16385 of them. Filtering unix_dict() to
-- words of length 4..8 is 16900, and in theory I could also filter out up to 500 potentially offensive words.
-- (with slightly better leeway 5..9 is 17807)
--?16900-16385 -- 515
--?17807-16385 -- 1422
--function l58(string w) integer l = length(w) return l>=5 and l<=8 end function
--sequence d = filter(unix_dict(),l58)
--function l48(string w) integer l = length(w) return l>=4 and l<=8 end function
--sequence d = filter(unix_dict(),l48)
--sequence d = unix_dict()
--?length(d) -- 25107
--?length(d) -- 14713 -- (5..8, useless)
--?shorten(d)
--sequence l = repeat(0,22)
--for i=1 to length(d) do
--  integer ldx = length(d[i])
--  l[ldx] += 1
--end for
--?l
--{26,133,796,2187,3162,3873,4060,3618,3094,1973,1121,592,280,116't',44',',17,7,4,0,1,2,1}
--  1   2   3    4    5    6    7    8    9   10
--?sum(l[4..7]) -- 13282
--?sum(l[5..8]) -- 14713
--?sum(l[4..8]) -- 16900
--?power(2,14) -- 16384 (by the skin of our teeth = YEAH!)
--?sum(l[5..9]) -- 17807 (but I might prefer that)

--?power(2,15) -- 32768
--for t=1 to 
--atom l = 1800000
--atom l = 180000
--for p=1 to 10 do
--  l/=2
--  ?l
--end for
--?1800000/64 -- 28125
--?180000/16 -- 11250
--*/
