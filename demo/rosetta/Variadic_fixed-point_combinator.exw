--
-- Variadic_fixed-point_combinator.exw
-- ===================================
--
-- https://rosettacode.org/wiki/Variadic_fixed-point_combinator#Phix
--
--include builtins\closures.e

function Y(sequence a)
    for i,ai in a do
        a[i] = define_lambda(ai,{a})
--      a[i] = define_lambda(ai,{0},bSoleOwner:=true) -- [test errors on correct line, 23 here]
    end for
    -- using {a} above would stash partially-updated copies,
    --  so instead use a dummy {0} and blat all at the end
    --   (fairly obviously, the use of "a,{a}" is probably 
    --    specific to a variadic fixed point Y combinator)
    set_captures(a,{a})
    return a
end function

function e(sequence f, integer n)
    return n==0 or call_lambda(f[2],n-1)
end function

function o(sequence f, integer n)
    return n!=0 and call_lambda(f[1],n-1)
end function

function c1(sequence f3, integer n, d)
    if n=1 then return d end if
    return call_lambda(f3[2+odd(n)],{n,d+1})
end function

function c2(sequence f3, integer n, d)
    return call_lambda(f3[1],{floor(n/2),d})
end function

function c3(sequence f3, integer n, d)
    return call_lambda(f3[1],{3*n+1,d})
end function

sequence f2 = Y({e,o}),
         f3 = Y({c1,c2,c3})

object even_func = f2[1],
        odd_func = f2[2],
         collatz = f3[1]

for x=1 to 10 do
    bool bE = call_lambda(even_func,x),
         bO = call_lambda(odd_func,x)
    integer c = call_lambda(collatz,{x,0})
    printf(1,"%2d: even:%t, odd:%t, collatz:%d\n",{x,bE,bO,c})
end for

?"done"
wait_key()
