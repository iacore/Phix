--
-- demo\rosetta\Word_break_problem.exw
-- ===================================
--
with javascript_semantics
procedure populate_dict(sequence s)
    for i=1 to length(s) do setd(s[i],0) end for
end procedure
 
populate_dict(split("a bc abc cd b"))
 
function prrec(sequence wordstarts, integer idx, sequence sofar, bool show)
    if idx>length(wordstarts) then
        if show then
            ?sofar
        end if
        return 1
    end if
    integer res = 0
    for i=1 to length(wordstarts[idx]) do
        string w = wordstarts[idx][i]
        res += prrec(wordstarts,idx+length(w),append(deep_copy(sofar),w),show)
    end for
    return res
end function
 
function flattens(sequence s)
-- remove all nesting and empty sequences from a nested sequence of strings
    sequence res = {}, si
    for i=1 to length(s) do
        si = s[i]
        if string(si) then
            res = append(res,si)
        else
            res &= flattens(si)
        end if
    end for
    return res
end function
 
procedure test(string s)
    integer l = length(s),
            wordend = 1 -- (pretend a word just ended at start)
    sequence wordstarts = repeat({},l), 
             wordends = repeat(0,l)
    for i=1 to l do
        if wordend then
            for j=i to l do
                object pkey = getd_partial_key(s[i..j])
                if string(pkey) and length(pkey)>j-i and s[i..j]=pkey[1..j-i+1] then
                    if length(pkey)=j-i+1 then
                        -- exact match
                        wordstarts[i] = append(wordstarts[i],pkey)
                        wordends[j] += 1
                    end if
                else
                    exit
                end if  
            end for
        end if
        wordend = wordends[i]
    end for
    bool worthwhile = true
    while worthwhile do
        worthwhile = false
        wordend = 1 -- (pretend a word just ended at start)
        for i=1 to l do
            if wordend then
                -- eliminate any words that end before a wordstarts of {}.
                for j=length(wordstarts[i]) to 1 by -1 do
                    integer wl = length(wordstarts[i][j])
                    if i+wl<=l and wordstarts[i+wl]={} then
                        integer wedx = i+wl-1
                        wordends[wedx] -= 1
                        wordstarts[i][j..j] = {}
                        worthwhile = true
                    end if
                end for
            else
                -- elimitate all words that start here.
                for j=1 to length(wordstarts[i]) do
                    integer wl = length(wordstarts[i][j])
                    if i+wl<=l then
                        integer wedx = i+wl-1
                        wordends[wedx] -= 1
                        worthwhile = true
                    end if
                end for
                wordstarts[i] = {}
            end if
            wordend = wordends[i]
        end for
    end while
    if sum(wordends)=0 then
        printf(1,"%s: not possible\n",{s})
    else
        integer count = prrec(wordstarts,1,{},false)
        if count=1 then
            printf(1,"%s: 1 solution: %s\n",{s,join(flattens(wordstarts))})
        elsif count>20 then
            printf(1,"%s: %d solution(s): (too many to show)\n",{s,count})
            pp({wordstarts,wordends})
        else
            printf(1,"%s: %d solution(s):\n",{s,count})
            count = prrec(wordstarts,1,{},true)
        end if
    end if
end procedure
 
papply({"abcd","abbc","abcbcd","acdbc","abcdd"},test)

{} = wait_key()

--/*
-- Some largely unsuccessful experiments with applying a real dictionary.
-- In my experiments with this, the first thing I missed was a dictionary with conjugations, plurals, past participles, etc. 
-- For instance separate would be there but there would be no separate entry for separated. 
-- I also didn't know that unixdict.txt has 'b'..'z' as separate words, and no jabberwocky... 
--
with javascript_semantics

procedure populate_dict(sequence s)
--?s
--?length(s)
    for i=1 to length(s) do
        string si = s[i]
        if (length(si)!=1 or find(si,{"a","i"}))
        and not find(si,{"sis","se","sst","nan","st","nd","ad","ct","io","ut","wa","ed",
                         "ere","par","bet","pa","en","re","rebut","orin","cf"}) then
            setd(si,0)
        end if
    end for
end procedure
 
--/*
function valid_word(string word)
--  if length(word)=1 then return iff(find(word,{"a","i"})?word:0) end if
--  if find(word,{"sis","sst","se"}) then return false end if  -- hack
    object res = getd_partial_key(word)
--/!*
    if res=NULL and find(word[$],"sd")
    and getd_index(word[1..$-1])!=NULL then
--      return word
--      res = getd_partial_key(word[1..$-1])
--      if res!=NULL then res &= 's' end if
    end if
--  for i=1 to length(word) do
--      integer ch = word[i]
--      if ch<'a'
--      or ch>'z' then
--          return false
--      end if
--  end for
--  return true
--?{word,res}
--*!/
    return res
end function
--*/
 
--populate_dict(split("a bc abc cd b"))
--/!*
--integer fn = open("demo\\unixdict.txt","r")
--sequence words = get_text(fn,GT_LF_STRIPPED)
--close(fn)
--for i=length(words) to 1 by -1 do
--  if not valid_word(words[i]) then
--      words[i] = words[$]
--      words = words[1..$-1]
--  end if
--end for
populate_dict(unix_dict()&{"sequence","experiments","missed","conjugations","plurals","participles"})

--*!/ 
 
function prrec(sequence wordstarts, integer idx, sequence sofar, bool show)
    if idx>length(wordstarts) then
        if show then
            ?sofar
        end if
        return 1
    end if
    integer res = 0
    for i=1 to length(wordstarts[idx]) do
        string w = wordstarts[idx][i]
--      res += prrec(wordstarts,idx+length(w),append(sofar,w),show)
        res += prrec(wordstarts,idx+length(w),append(deep_copy(sofar),w),show)
    end for
    return res
end function
 
function flattens(sequence s)
-- remove all nesting and empty sequences from a nested sequence of strings
sequence res = {}, si
    for i=1 to length(s) do
        si = s[i]
        if string(si) then
            res = append(res,si)
        else
            res &= flattens(si)
        end if
    end for
    return res
end function
 
procedure test(string s)
    integer l = length(s)
    sequence wordstarts = repeat({},l), wordends = repeat(0,l)
    integer wordend = 1 -- (pretend a word just ended at start)
    s = lower(s)
    for i=1 to l do
        if wordend then
            for j=i to l do
                object pkey = getd_partial_key(s[i..j])
--              object pkey = valid_word(s[i..j])
                if string(pkey) and length(pkey)>j-i and s[i..j]=pkey[1..j-i+1] then
                    if length(pkey)=j-i+1 then
                        -- exact match
                        wordstarts[i] = append(wordstarts[i],pkey)
                        wordends[j] += 1
                    end if
                else
                    exit
                end if  
            end for
        end if
        wordend = wordends[i]
    end for
    bool worthwhile = true
    while worthwhile do
        worthwhile = false
        wordend = 1 -- (pretend a word just ended at start)
        for i=1 to l do
            if wordend then
                -- eliminate any words that end before a wordstarts of {}.
                for j=length(wordstarts[i]) to 1 by -1 do
                    integer wl = length(wordstarts[i][j])
                    if i+wl<=l and wordstarts[i+wl]={} then
                        wordends[i+wl-1] -= 1
                        wordstarts[i][j..j] = {}
                        worthwhile = true
                    end if
                end for
            else
                -- elimitate all words that start here.
                for j=1 to length(wordstarts[i]) do
                    integer wl = length(wordstarts[i][j])
                    if i+wl<=l then
                        wordends[i+wl-1] -= 1
                        worthwhile = true
                    end if
                end for
                wordstarts[i] = {}
            end if
            wordend = wordends[i]
        end for
    end while
--?{wordstarts,wordends}
    if sum(wordends)=0 then
        printf(1,"%s: not possible",{s})
    else
        integer count = prrec(wordstarts,1,{},false)
        if count=1 then
            printf(1,"%s:\n 1 solution: %s\n",{s,join(flattens(wordstarts))})
--      elsif count>20 then
--          printf(1,"%s: %d solution(s): (too many to show)\n",{s,count})
--          pp({wordstarts,wordends})
        else
            printf(1,"%s: %d solution(s):\n",{s,count})
            if count>20 then
                printf(1,"(only showing first 20)\n")
                wordstarts = wordstarts[1..20]
            end if
            count = prrec(wordstarts,1,{},true)
        end if
    end if
end procedure
--
--sequence t = split("given an input string and a dictionary of words segment the input string into a space separated sequence of dictionary words if possible")
--sequence t = split("in my experiments with this the first thing i missed was a dictionary with conjugations plurals past participles etc for instance separate "&
--                 "would be there but there would be no separate entry for separated")
--
--for i=1 to length(t) do
--  string ti = t[i]
--  ?{ti,getd_index(ti)}
--end for
--?{"",getd_index("")}

--constant tests = {"abcd","abbc","abcbcd","acdbc","abcdd"}
constant tests = {"wordsisstringofspaceseparatedwords",
--"givenaninputstringandadictionaryofwordssegmenttheinputstringintoaspaceseparatedsequenceofdictionarywordsifpossible"}
"InmyexperimentswiththisthefirstthingImissedwasadictionarywithconjugationspluralspastparticiplesetc",
"forinstanceseparatewouldbetherebuttherewouldbenoseparateentryforseparated"}
for i=1 to length(tests) do test(tests[i]) end for

?"done"
{} = wait_key()
--*/
