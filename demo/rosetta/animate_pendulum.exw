--
-- demo\rosetta\animate_pendulum.exw
-- =================================
--
-- Author Pete Lomax, March 2017
--
-- Port of animate_pendulum.exw from arwen to pGUI, which is now
--  preserved as a comment below (in the distro version only).
--
-- With help from lesterb, updates now in timer_cb not redraw_cb,
-- variables better named, and velocity problem sorted, July 2018.
--
with javascript_semantics
include pGUI.e

constant full = false   -- set true for full swing to near-vertical.
                        -- false performs swing to horizontal only.
                        -- (adjusts the starting angle, pivot point,
                        --  and canvas size, only.)

Ihandle dlg, canvas, timer
cdCanvas cdcanvas

constant g = 50

atom angle = iff(full?PI-0.01:PI/2),  -- (near_vertical | horiz)
     velocity = 0
integer w = 0, h = 0, len = 0

function redraw_cb(Ihandle /*ih*/)
    {w, h} = IupGetIntInt(canvas, "DRAWSIZE")
    cdCanvasActivate(cdcanvas)
    cdCanvasClear(cdcanvas)
    -- new suspension point:
    integer sX = floor(w/2)
    integer sY = floor(h/iff(full?2:16))  -- (mid | top)
    -- repaint:
    integer eX = floor(len*sin(angle)+sX)
    integer eY = floor(len*cos(angle)+sY)
    cdCanvasSetForeground(cdcanvas, CD_CYAN)
    cdCanvasLine(cdcanvas, sX, h-sY, eX, h-eY)
    cdCanvasSetForeground(cdcanvas, CD_DARK_GREEN)
    cdCanvasSector(cdcanvas, sX, h-sY, 5, 5, 0, 360)
    cdCanvasSetForeground(cdcanvas, CD_BLUE)
    cdCanvasSector(cdcanvas, eX, h-eY, 35, 35, 0, 360)
    cdCanvasFlush(cdcanvas)
    return IUP_DEFAULT
end function

function timer_cb(Ihandle /*ih*/)
    if w!=0 then
        integer newlen = floor(w/2)-30
        if newlen!=len then
            len = newlen
            atom tmp = 2*g*len*(cos(angle))
            velocity = iff(tmp<0?0:sqrt(tmp)*sign(velocity))
        end if
        atom dt = 0.2/w
        atom acceleration = -len*sin(angle)*g
        velocity += dt*acceleration
        angle += dt*velocity
        IupUpdate(canvas)
    end if
    return IUP_IGNORE
end function

function map_cb(Ihandle /*ih*/)
    IupGLMakeCurrent(canvas)
    if platform()=JS then
        cdcanvas = cdCreateCanvas(CD_IUP, canvas)
    else
        atom res = IupGetDouble(NULL, "SCREENDPI")/25.4
        cdcanvas = cdCreateCanvas(CD_GL, "10x10 %g", {res})
    end if
    cdCanvasSetBackground(cdcanvas, CD_PARCHMENT)
    return IUP_DEFAULT
end function

function canvas_resize_cb(Ihandle /*canvas*/)
    integer {canvas_width, canvas_height} = IupGetIntInt(canvas, "DRAWSIZE")
    atom res = IupGetDouble(NULL, "SCREENDPI")/25.4
    cdCanvasSetAttribute(cdcanvas, "SIZE", "%dx%d %g", {canvas_width, canvas_height, res})
    return IUP_DEFAULT
end function

procedure main()
    IupOpen()

    canvas = IupGLCanvas()
    IupSetAttribute(canvas, "RASTERSIZE", iff(full?"640x640":"640x340")) -- (fit 360|180)
    IupSetCallback(canvas, "MAP_CB", Icallback("map_cb"))
    IupSetCallback(canvas, "ACTION", Icallback("redraw_cb"))
    IupSetCallback(canvas, "RESIZE_CB", Icallback("canvas_resize_cb"))

    timer = IupTimer(Icallback("timer_cb"), 20)

    dlg = IupDialog(canvas)
    IupSetAttribute(dlg, "TITLE", "Animated Pendulum")

    IupShow(dlg)
    IupSetAttribute(canvas, "RASTERSIZE", NULL)
    if platform()!=JS then
        IupMainLoop()
        IupClose()
    end if
end procedure

main()
--/*
--
-- demo\rosetta\animate_pendulum.exw
-- =================================
--
-- Author Pete Lomax, August 2015
--
-- This has now been ported to pGUI, see animate_pendulum2.exw
--
include ..\arwen\arwen.ew
include ..\arwen\axtra.ew

constant main = create(Window, "Animated Pendulum", 0, 0, 20, 20, 625, 400, 0),
         mainDC = getPrivateDC(main),
         backDC = c_func(xCreateCompatibleDC, {NULL}),  -- the background
         viewDC = c_func(xCreateCompatibleDC, {NULL}),  -- with animation
         grey = #909090

constant MainTimer = createTimer()

integer dw = 0, dh = 0      -- client area width and height
atom bmBack, bmView
integer bmX = 0, bmY = 0    -- actual size of the bitmaps

constant dt = 1E-3
constant g = 50

integer sX = 0, sY = 0      -- suspension point of pendulum
integer len
atom alpha = PI/2,
     omega = 0, 
     epsilon

function mainHandler(integer id, integer msg, atom wParam, object lParam)
integer eX, eY              -- moving end of pendulum
--integer x, y
--sequence rect

    if msg=WM_SIZE then
        {{},{},dw,dh} = getClientRect(main)
--setText(main,sprintf("w:%d  h:%d  (%f)",{dw, dh, dw/dh}))
        if dw>bmX or dh>bmY then
            -- we need bigger bitmaps
            bmBack = c_func(xCreateCompatibleBitmap, {mainDC, dw, dh})
            {} = deleteObject(selectObject(backDC,bmBack))
            -- clear the background
            setPenColor(grey)
            drawRectangleh(backDC, True, 0, 0, dw, dh)
--          -- draw an outer box
--      setPenColor(#909090)
--  drawRectangleh(backDC, False, 0, 0, dw, dh)

            bmView = c_func(xCreateCompatibleBitmap, {mainDC, dw, dh})
            {} = deleteObject(selectObject(viewDC,bmView))
            {bmX,bmY} = {dw,dh}
        end if
        -- new suspension point and length
        sX = floor(dw/2)
        sY = floor(dh/8)
        len = sX-20
--6/6/18:
--      alpha = PI/2
--      omega = 0
--      omega = ??
--DEV attempt to force box ratio. works, ish, until you drag a corner "diagonally against the grain".
--  elsif msg=WM_SIZING then
--setText(main,sprint({wParam,lParam}))
--      rect = lParam
----        if wParam=2 then    -- WMSZ_RIGHT 
----for i=1 to 2 do -- no help
--          x = rect[3]-rect[1]-16
--          y = rect[4]-rect[2]-38
----            y = floor(x/1.7)+38
--          rect[3] = rect[1]+floor(y*1.7)+16
--          rect[4] = rect[2]+floor(x/1.7)+38
----end for
----        elsif wParam=6 then -- WMSZ_BOTTOM 
----            x = floor(y*1.7)+16
----        end if
--      return rect
    elsif msg=WM_PAINT then
        -- start with a fresh copy of the background
        void = c_func(xBitBlt,{viewDC,0,0,dw,dh,backDC,0,0,SRCCOPY})
        eX = floor(len*sin(alpha)+sX)
        eY = floor(len*cos(alpha)+sY)
        drawLinesh(viewDC,{Red,{sX,sY,eX,eY},Yellow})
        drawEllipseh(viewDC,eX-15,eY-15,eX+15,eY+15)
        void = c_func(xBitBlt,{mainDC,0,0,dw,dh,viewDC,0,0,SRCCOPY})
    elsif msg=WM_TIMER then
        epsilon = -len*sin(alpha)*g
        omega += dt*epsilon
        alpha += dt*omega
--?alpha/omega
        repaintWindow(main)
    elsif msg=WM_SHOWWINDOW then
        startTimer(MainTimer,main,33)
    elsif msg=WM_CHAR
      and wParam=VK_ESCAPE then
        closeWindow(main)
        if id or object(lParam) then end if -- suppress warnings
    end if
    return 0
end function
setHandler({main},routine_id("mainHandler"))

WinMain(main, SW_NORMAL)
--*/
