--
-- demo\winclip.exw
-- ================
--
-- INCOMPLETE. a copy of window.exw and some code I found on MSDN...
--
requires(WINDOWS)

--/*
atom hinst 
integer uFormat = -1 
bool fAuto = true

function IsDisplayableFormat(integer uFormat) 
    return find(uFormat,{CF_OWNERDISPLAY,CF_TEXT,CF_ENHMETAFILE,CF_BITMAP})!=0
end function
 
procedure InitMenu(atom hwnd, hmenu) 
    UINT uFormat; 
    char szFormatName[80]; 
    LPCSTR lpFormatName; 
    UINT fuFlags; 
    UINT idMenuItem; 
 
    // If a menu is not the display menu, no initialization is necessary. 
 
    if (GetMenuItemID(hmenu, 0) != IDM_AUTO) 
        return; 
 
    // Delete all menu items except the first. 
 
    while GetMenuItemCount(hmenu)>1 do
        DeleteMenu(hmenu, 1, MF_BYPOSITION); 
    end while 

    // Check or uncheck the Auto menu item. 
 
    fuFlags = fAuto ? MF_BYCOMMAND | MF_CHECKED : MF_BYCOMMAND | MF_UNCHECKED; 
    CheckMenuItem(hmenu, IDM_AUTO, fuFlags); 
 
    // If there are no clipboard formats, return. 
 
    if CountClipboardFormats()!=0
    and OpenClipboard(hwnd) then
 
        // Add a separator and then a menu item for each format. 
 
        AppendMenu(hmenu, MF_SEPARATOR, 0, NULL); 
        uFormat = EnumClipboardFormats(0); 
 
        while (uFormat) 
        { 
            // Call an application-defined function to get the name 
            // of the clipboard format. 
 
            lpFormatName = GetPredefinedClipboardFormatName(uFormat); 
    
            // For registered formats, get the registered name. 
 
            if (lpFormatName == NULL) 
            {
                    // Note that, if the format name is larger than the
                    // buffer, it is truncated. 
                if (GetClipboardFormatName(uFormat, szFormatName, sizeof(szFormatName))) 
                    lpFormatName = szFormatName; 
                else 
                    lpFormatName = "(unknown)"; 
            } 
 
            // Add a menu item for the format. For displayable 
            // formats, use the format ID for the menu ID. 
 
            if (IsDisplayableFormat(uFormat)) 
            { 
                fuFlags = MF_STRING; 
                idMenuItem = uFormat; 
            } 
            else 
            { 
                fuFlags = MF_STRING | MF_GRAYED; 
                idMenuItem = 0; 
            } 
            AppendMenu(hmenu, fuFlags, idMenuItem, lpFormatName); 
 
            uFormat = EnumClipboardFormats(uFormat); 
        } 
        CloseClipboard(); 
    end if
end procedure
 
procedure SetAutoView(HWND hwnd) 

    static UINT auPriorityList[] = { 
        CF_OWNERDISPLAY, 
        CF_TEXT, 
        CF_ENHMETAFILE, 
        CF_BITMAP 
    }; 
 
    uFormat = GetPriorityClipboardFormat(auPriorityList, 4); 
    fAuto = TRUE; 
 
    InvalidateRect(hwnd, NULL, TRUE); 
    UpdateWindow(hwnd); 
end procedure

LRESULT APIENTRY MainWndProc(hwnd, uMsg, wParam, lParam) 
HWND hwnd; 
UINT uMsg; 
WPARAM wParam; 
LPARAM lParam; 
{ 
    static HWND hwndNextViewer; 
 
    HDC hdc; 
    HDC hdcMem; 
    PAINTSTRUCT ps; 
    LPPAINTSTRUCT lpps; 
    RECT rc; 
    LPRECT lprc; 
    HGLOBAL hglb; 
    LPSTR lpstr; 
    HBITMAP hbm; 
    HENHMETAFILE hemf; 
    HWND hwndOwner; 
 
    switch uMsg do

        case WM_PAINT: 
            hdc = BeginPaint(hwnd, &ps); 
 
            // Branch depending on the clipboard format. 
 
            switch (uFormat) 
            { 
                case CF_OWNERDISPLAY: 
                    hwndOwner = GetClipboardOwner(); 
                    hglb = GlobalAlloc(GMEM_MOVEABLE, sizeof(PAINTSTRUCT)); 
                    lpps = GlobalLock(hglb);
                    memcpy(lpps, &ps, sizeof(PAINTSTRUCT)); 
                    GlobalUnlock(hglb); 
 
                    SendMessage(hwndOwner, WM_PAINTCLIPBOARD, (WPARAM) hwnd, (LPARAM) hglb); 
 
                    GlobalFree(hglb); 
                    break; 
 
                case CF_BITMAP: 
                    hdcMem = CreateCompatibleDC(hdc); 
                    if (hdcMem != NULL) 
                    { 
                        if (OpenClipboard(hwnd)) 
                        { 
                            hbm = (HBITMAP) GetClipboardData(uFormat); 
                            SelectObject(hdcMem, hbm); 
                            GetClientRect(hwnd, &rc); 
 
                            BitBlt(hdc, 0, 0, rc.right, rc.bottom, hdcMem, 0, 0, SRCCOPY); 
                            CloseClipboard(); 
                        } 
                        DeleteDC(hdcMem); 
                    } 
                    break; 
 
                case CF_TEXT: 
                    if (OpenClipboard(hwnd)) 
                    { 
                        hglb = GetClipboardData(uFormat); 
                        lpstr = GlobalLock(hglb); 
 
                        GetClientRect(hwnd, &rc); 
                        DrawText(hdc, lpstr, -1, &rc, DT_LEFT); 
 
                        GlobalUnlock(hglb); 
                        CloseClipboard(); 
                    } 
                    break; 
 
                case CF_ENHMETAFILE: 
                    if (OpenClipboard(hwnd)) 
                    { 
                        hemf = GetClipboardData(uFormat); 
                        GetClientRect(hwnd, &rc); 
                        PlayEnhMetaFile(hdc, hemf, &rc); 
                        CloseClipboard(); 
                    } 
                    break; 
 
                case 0: 
                    GetClientRect(hwnd, &rc); 
                    DrawText(hdc, "The clipboard is empty.", -1, &rc, DT_CENTER | DT_SINGLELINE | DT_VCENTER); 
                    break; 
 
                default: 
                    GetClientRect(hwnd, &rc); 
                    DrawText(hdc, "Unable to display format.", -1, &rc, DT_CENTER | DT_SINGLELINE | DT_VCENTER); 
            } 
            EndPaint(hwnd, &ps); 
 
        case WM_SIZE: 
            if uFormat==CF_OWNERDISPLAY then

                hwndOwner = GetClipboardOwner(); 
                hglb = GlobalAlloc(GMEM_MOVEABLE, sizeof(RECT)); 
                lprc = GlobalLock(hglb); 
                GetClientRect(hwnd, lprc); 
                GlobalUnlock(hglb); 
 
                SendMessage(hwndOwner, WM_SIZECLIPBOARD, (WPARAM) hwnd, (LPARAM) hglb); 
 
                GlobalFree(hglb); 
            end if
 
        case WM_CREATE: 
 
            // Add the window to the clipboard viewer chain. 
 
            hwndNextViewer = SetClipboardViewer(hwnd); 
            break; 
 
        case WM_CHANGECBCHAIN: 
 
            // If the next window is closing, repair the chain. 
            // Otherwise, pass the message to the next link. 
 
            if wParam==hwndNextViewer then
                hwndNextViewer = lParam; 
            elsif hwndNextViewer!=NULL then
                SendMessage(hwndNextViewer, uMsg, wParam, lParam)
            end if
 
            break; 
 
        case WM_DESTROY: 
            ChangeClipboardChain(hwnd, hwndNextViewer); 
            PostQuitMessage(0); 
            break; 
 
        case WM_DRAWCLIPBOARD:  // clipboard contents changed. 
 
            // Update the window by using Auto clipboard format. 
 
            SetAutoView(hwnd)
 
            // Pass the message to the next window in clipboard 
            // viewer chain. 
 
            SendMessage(hwndNextViewer, uMsg, wParam, lParam); 
            break; 
 
        case WM_INITMENUPOPUP: 
            if (!HIWORD(lParam)) then
                InitMenu(hwnd, wParam)
            end if
 
        case WM_COMMAND: 
            switch (LOWORD(wParam)) do

                case IDM_EXIT: 
                    DestroyWindow(hwnd); 
 
                case IDM_AUTO: 
                    SetAutoView(hwnd)
 
                default: 
                    fAuto = FALSE; 
                    uFormat = LOWORD(wParam); 
                    InvalidateRect(hwnd, NULL, TRUE); 
            end switch
 
        default: 
            return DefWindowProc(hwnd, uMsg, wParam, lParam); 
    end switch
    return NULL
end function
 
--*/

include builtins\cffi.e
constant tWNDCLASSEX = """
typedef struct tagWNDCLASSEX {
  UINT      cbSize;
  UINT      style;
  WNDPROC   lpfnWndProc;
  int       cbClsExtra;
  int       cbWndExtra;
  HINSTANCE hInstance;
  HICON     hIcon;
  HCURSOR   hCursor;
  HBRUSH    hbrBackground;
  LPCTSTR   lpszMenuName;
  LPCTSTR   lpszClassName;
  HICON     hIconSm;
} WNDCLASSEX, *PWNDCLASSEX;
"""
constant idWNDCLASSEX = define_struct(tWNDCLASSEX)

constant tPOINT = """
typedef struct tagPOINT {
  LONG x;
  LONG y;
} POINT, *PPOINT;
"""
--constant idPOINT = define_struct(tPOINT)
{} = define_struct(tPOINT)

constant tMESSAGE = """
typedef struct tagMSG {
  HWND   hwnd;
  UINT   message;
  WPARAM wParam;
  LPARAM lParam;
  DWORD  time;
  POINT  pt;
} MSG, *PMSG, *LPMSG;
"""
constant idMESSAGE = define_struct(tMESSAGE)

constant tRECT = """
typedef struct _RECT {
  LONG left;
  LONG top;
  LONG right;
  LONG bottom;
} RECT, *PRECT;
"""
constant idRECT = define_struct(tRECT)         

constant tPAINTSTRUCT = """
typedef struct tagPAINTSTRUCT {
  HDC  hdc;
  BOOL fErase;
  RECT rcPaint;
  BOOL fRestore;
  BOOL fIncUpdate;
  BYTE rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT;
"""
constant idPAINTSTRUCT = define_struct(tPAINTSTRUCT)

constant CS_HREDRAW = 2,
         CS_VREDRAW = 1,
         SW_SHOWNORMAL = 1,
         WM_CREATE = #01,
         WM_PAINT  = #0F,
         WM_DESTROY = #02,
         WM_CHAR = 258,
         VK_ESCAPE = 27,
         SND_FILENAME = #00020000,
         SND_ASYNC    = #00000001,
         DT_SINGLELINE = #0020,
         DT_CENTER     = #0001,
         DT_VCENTER    = #0004,
         WS_OVERLAPPED  = #00000000,
         WS_CAPTION     = #00C00000,
         WS_SYSMENU     = #00080000,
         WS_THICKFRAME  = #00040000,
         WS_MINIMIZEBOX = #00020000,
         WS_MAXIMIZEBOX = #00010000,
         IDC_ARROW = 32512,
         WHITE_BRUSH = 0,
         CW_USEDEFAULT = #80000000,
         WS_OVERLAPPEDWINDOW = or_all({WS_OVERLAPPED, WS_CAPTION, WS_SYSMENU,
                                       WS_THICKFRAME, WS_MINIMIZEBOX,
                                       WS_MAXIMIZEBOX}),
         DT_SINGLECENTER = or_all({DT_SINGLELINE, DT_CENTER, DT_VCENTER}),
         SND_FILEASYNC = or_bits(SND_FILENAME,SND_ASYNC)

integer xLoadIcon, xLoadCursor, xGetStockObject, xRegisterClassEx,
        xCreateWindowEx, xShowWindow, xUpdateWindow, xGetMessage,
        xTranslateMessage, xDispatchMessage, xPlaySound, xBeginPaint,
        xGetClientRect, xDrawText, xEndPaint, xPostQuitMessage, xDefWindowProc,
        xGetLastError

procedure not_found(sequence name)
    crash("Couldn't find " & name)
end procedure

function link_dll(sequence name)
    -- dynamically link a dll
    atom lib = open_dll(name)
    if lib=NULL then not_found(name) end if
    return lib
end function

function link_c_func(atom dll, sequence name, sequence args, atom result)
    -- dynamically link a C routine as a function
    integer handle = define_c_func(dll, name, args, result)
    if handle=-1 then not_found(name) end if
    return handle
end function

function link_c_proc(atom dll, sequence name, sequence args)
    -- dynamically link a C routine as a procedure
    integer handle = define_c_proc(dll, name, args)
    if handle=-1 then not_found(name) end if
    return handle
end function

procedure link_dll_routines()
    -- get handles to all dll routines that we need

    atom user32 = link_dll("user32.dll"),
         gdi32 = link_dll("gdi32.dll"),
         winmm = link_dll("winmm.dll"),
         kernel32 = link_dll("kernel32.dll")

    xLoadIcon = link_c_func(user32, "LoadIconA", {C_POINTER, C_INT}, C_INT)
    xLoadCursor = link_c_func(user32, "LoadCursorA", {C_POINTER, C_INT}, C_INT)
    xGetStockObject = link_c_func(gdi32, "GetStockObject", {C_INT}, C_INT)
    xRegisterClassEx = link_c_func(user32, "RegisterClassExA", {C_POINTER}, C_INT)
    xCreateWindowEx = link_c_func(user32, "CreateWindowExA",
                                  {C_INT, C_INT,C_INT,C_INT,C_INT,C_INT,C_INT,C_INT,C_INT,C_INT,C_INT,C_INT},
                                  C_INT)
    xShowWindow = link_c_proc(user32, "ShowWindow", {C_INT, C_INT})
    xUpdateWindow = link_c_proc(user32, "UpdateWindow", {C_INT})
    xGetMessage = link_c_func(user32, "GetMessageA",
                             {C_INT, C_INT, C_INT, C_INT}, C_INT)
    xTranslateMessage = link_c_proc(user32, "TranslateMessage", {C_INT})
    xDispatchMessage = link_c_proc(user32, "DispatchMessageA", {C_INT})
    xPlaySound = link_c_proc(winmm, "PlaySound", {C_INT, C_INT, C_INT})
    xBeginPaint = link_c_func(user32, "BeginPaint", {C_INT, C_POINTER}, C_INT)
    xGetClientRect = link_c_proc(user32, "GetClientRect", {C_INT, C_POINTER})
    xDrawText = link_c_proc(user32, "DrawTextA",
                           {C_INT, C_INT, C_INT, C_INT, C_INT})
    xEndPaint = link_c_proc(user32, "EndPaint", {C_INT, C_INT})
    xPostQuitMessage = link_c_proc(user32, "PostQuitMessage", {C_INT})
    xDefWindowProc = link_c_func(user32, "DefWindowProcA",
                                {C_INT, C_INT, C_INT, C_INT}, C_INT)
    xGetLastError = link_c_func(kernel32,"GetLastError",{},C_INT)
end procedure

link_dll_routines()

function WndProc(atom hwnd, iMsg, wParam, lParam)
    -- callback routine to handle Window class

    if iMsg=WM_CHAR and wParam=VK_ESCAPE then
        iMsg = WM_DESTROY
    end if
    switch iMsg do

        case WM_CREATE:

            atom wav_file = allocate_string(`\Windows\Media\tada.wav`)
            c_proc(xPlaySound, {wav_file,NULL,SND_FILEASYNC})
            free(wav_file)

        case WM_PAINT:

            atom pPAINTSTRUCT = allocate_struct(idPAINTSTRUCT),
                 pRECT = allocate_struct(idRECT),
                 hdc = c_func(xBeginPaint, {hwnd, pPAINTSTRUCT}),
                 Phix = allocate_string("A Plain Vanilla Window using Phix!")
            c_proc(xGetClientRect, {hwnd, pRECT})
            c_proc(xDrawText, {hdc, Phix, -1, pRECT, DT_SINGLECENTER})
            c_proc(xEndPaint, {hwnd, pPAINTSTRUCT})
            free({pPAINTSTRUCT,pRECT,Phix})

        case WM_DESTROY:

            c_proc(xPostQuitMessage, {0})

        default:

            return c_func(xDefWindowProc, {hwnd, iMsg, wParam, lParam})

    end switch
    return 0
end function

procedure win_main()

    atom pWndclass = allocate_struct(idWNDCLASSEX),
         szAppName = allocate_string("HelloWin"),
         WndProcAddress = call_back(WndProc),
         icon_handle = c_func(xLoadIcon, {instance(), 10})

    set_struct_field(idWNDCLASSEX,pWndclass,"cbSize",get_struct_size(idWNDCLASSEX))
    set_struct_field(idWNDCLASSEX,pWndclass,"style",or_bits(CS_HREDRAW, CS_VREDRAW))
    set_struct_field(idWNDCLASSEX,pWndclass,"lpfnWndProc",WndProcAddress)
    set_struct_field(idWNDCLASSEX,pWndclass,"hIcon",icon_handle)
    set_struct_field(idWNDCLASSEX,pWndclass,"hIconSm",icon_handle)
    set_struct_field(idWNDCLASSEX,pWndclass,"hCursor",c_func(xLoadCursor, {NULL, IDC_ARROW}))
    set_struct_field(idWNDCLASSEX,pWndclass,"hbrBackground",c_func(xGetStockObject, {WHITE_BRUSH}))
    set_struct_field(idWNDCLASSEX,pWndclass,"lpszClassName",szAppName)

    if c_func(xRegisterClassEx, {pWndclass})=0 then
        crash("RegisterClassEx error #%08x",{c_func(xGetLastError,{})})
    end if
    sequence cwargs = {0,                   -- extended style
                       szAppName,           -- window class name
                       "Phix for Windows",  -- window caption
                       WS_OVERLAPPEDWINDOW, -- window style
                       CW_USEDEFAULT,       -- initial x position
                       CW_USEDEFAULT,       -- initial y position
                       CW_USEDEFAULT,       -- initial x size
                       CW_USEDEFAULT,       -- initial y size
                       NULL,                -- parent window handle
                       NULL,                -- window menu handle
                       0,                   -- hInstance // program instance handle
                       NULL}
    atom hwnd = c_func(xCreateWindowEx,cwargs)
    if hwnd=0 then
        crash("CreateWindowEx error #%08x",{c_func(xGetLastError,{})})
    end if
    free({szAppName,pWndclass})

    c_proc(xShowWindow, {hwnd, SW_SHOWNORMAL})
    c_proc(xUpdateWindow, {hwnd})

    atom pMSG = allocate_struct(idMESSAGE)
    while c_func(xGetMessage, {pMSG, NULL, 0, 0}) do
        c_proc(xTranslateMessage, {pMSG})
        c_proc(xDispatchMessage, {pMSG})
    end while
    free(pMSG)
end procedure

win_main()


