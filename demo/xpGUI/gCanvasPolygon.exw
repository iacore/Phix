--
-- demo\xpGUI\gCanvasPolygon.exw
-- =============================
--
--  Initial implementation of gCanvasPolygon(), named xPolygon() here, with some extra stuff.
--
-- DEV may now well be "working" in xpGUI.js, except for tiny canvas size...
-- DEV does not work on 64-bit GTK... I might /never/ have had that right. [Seems much better 20/8/23...]
--
-- Tests ((32|64)x(WinApi|gUsekGtk), ie fourfold):
--  Is the default window filled and 240x163?
--  Can it be resized (including shrinking)?
--  Are the edges properly anti-aliased and shapes filled? (more of a to-do, that one, on WinAPI anyway)
--   (work for the latter probably best done in aaline.exw rather than here...)
--
--/*
Hmm:
// Stop drawing controls
SendMessage(Handle, WM_SETREDRAW, WPARAM(False), 0);

// Update all controls…

// Restart drawing controls
SendMessage(Handle, WM_SETREDRAW, WPARAM(True), 0);
// Force a repaint of the window and all of its child controls
RedrawWindow(Handle, NULL, NULL, RDW_ERASE | RDW_FRAME | RDW_INVALIDATE | RDW_ALLCHILDREN);
--*/

--requires(64,true)
with javascript_semantics
include xpGUI.e
--gUseGTK()

bool bDrawCtrls = true -- toggle using 'c'
bool bFilled = true -- toggle using 'f'
bool bMargin1 = true -- (non-togglable) [DEV yet, that is...]

-- the nearest end/ctrl point to the mouse position
-- ie if ndi!=0 then {x,y} = poly[ndi][ndx..+1]...
integer ndi = 0, ndx = 0, angle = 0

function set_nearest(sequence poly, atom x, y)
    integer ni=0, nx=0, nd
    for i,p in poly do
        for dx=1 to length(p) by 2 do
            integer xd = p[dx]-x,
                    yd = p[dx+1]-y,
                    d = xd*xd + yd*yd
            if d<100 and (ni=0 or nd>d) then
                {ni,nx,nd} = {i,dx,d}
            end if
        end for
    end for
    if ndi!=ni or ndx!=nx then
        {ndi,ndx} = {ni,nx} 
        return true -- redraw
    end if
    return false
end function

function ncolour(integer i, dx)
    -- helper: nearest in green, else endpoints red and ctrlpoints blue
    bool near = (ndi==i and ndx==dx)
    return iff(near?XPG_GREEN:iff(dx=1?XPG_RED:XPG_BLUE))
end function

/*global procedure gCanvasPolygon()*/ 
--/*
procedure xPolygon(gdx canvas, sequence poly)
--procedure xPolygon(gdx canvas, sequence poly, atom colour=-1, fillcolour=-1, bool filled=true, integer style=-1, width=-1)
--  much credit and thanks to http://alienryderflex.com/polygon/ (but not much final code)
--  if filled and (pwidth!=1 or (width!=-1 and width!=1)) then
--      width = 1
--  end if
    integer l = length(poly), start = 1;
    -- draw outline and if filled collect all y unit axis intersections
    sequence intersect = {}
    for i=1 to l do
        sequence pi = poly[i]
        integer lpi = length(pi)
        if lpi==0 then -- (new loop)
            start = i+1
        else
            integer j = iff(i=l or poly[i+1]={}?start:i+1)
            atom {iX,iY} = pi,
                 {aX,aY} = iff(lpi>2?pi[3..4]:{0,0}),
                 {bX,bY} = iff(lpi>4?pi[5..6]:{aX,aY}),
                 {jX,jY} = poly[j]
            if lpi==2 then  // straight line
                gCanvasLine(canvas,iX,iY,jX,jY)
            else
                gCanvasCubicBezier(canvas,iX,iY,aX,aY,bX,bY,jX,jY)
            end if
            if bFilled then
                -- collect y unit intersections.
                -- avoid any direct vertex hits:
                if integer(iY) then iY += 0.00001 end if
                if integer(jY) then jY += 0.00001 end if
                if lpi=2 then -- line
                    if iY>jY then {iY,iX,jY,jX} = {jY,jX,iY,iX} end if
                    atom dx = jX-iX,
                         dy = jY-iY
                    for y=ceil(iY) to floor(jY) do
                        intersect = append(intersect,{y,iX+dx/dy*(y-iY)})
                    end for
                else -- bezier
                    sequence curve = {{iX,iY,aX,aY,bX,bY,jX,jY}}
                    while length(curve) do -- main bisect loop
                        {iX,iY,aX,aY,bX,bY,jX,jY} = curve[$]
                        -- (these two may be superfluous...)
                        if integer(iY) then iY += 0.00001 end if
                        if integer(jY) then jY += 0.00001 end if
                        --   -- l,m,r are the first mid-points,
                        atom lx = (iX+aX)/2,  ly = (iY+aY)/2,
                             mx = (aX+bX)/2,  my = (aY+bY)/2,
                             rx = (bX+jX)/2,  ry = (bY+jY)/2,
                             -- n,p are the secondary mid-points,
                             nx = (lx+mx)/2,  ny = (ly+my)/2,
                             px = (mx+rx)/2,  py = (my+ry)/2,
                             -- q is the (single) found point on the curve.
                             qx = (nx+px)/2,  qy = (ny+py)/2,
                             -- the size of the square containing s,q,e:
                             sx = max({iX,qx,jX})-min({iX,qx,jX}),
                             sy = max({iY,qy,jY})-min({iY,qy,jY})
                        if sx>=1 or sy>=1 then
                            -- bisect curve[$] until it is subpixel
                            curve[$] = {qx,qy,px,py,rx,ry,jX,jY}
                            curve  &= {{iX,iY,lx,ly,nx,ny,qx,qy}}
                        else
                            curve = curve[1..$-1] -- discard/done
                            if ceil(iY)!=ceil(jY) then -- straddler
                                integer y = floor(max(iY,jY))
                                atom iy = iX + (iX-jX)/(iY-jY)*(y-iY)
                                intersect = append(intersect,{y,iy})
                            end if -- straddles
                        end if -- subpixel
                    end while -- bisect loop
                end if -- line/bezier segment
            end if -- bFilled
        end if -- (not new loop)
    end for
    if bFilled then
        assert(even(length(intersect)))
        intersect = sort(intersect)
        for i=1 to length(intersect) by 2 do
            atom {y1,x1} = intersect[i],
                 {y2,x2} = intersect[i+1]
            assert(y1==y2 and integer(y1))
            x1 = ceil(x1)
--          x1 = floor(x1) -- no...
--          x1 = floor(x1+1) -- ok... (but that proves nothing...)
--          x2 = floor(x2) -- but also no...
            x2 = ceil(x2) -- (note added to docs re scattered +1s)
--          x2 = floor(x2+1) -- ok... (ditto)
            if x1<x2 then
--          if x1<=x2 then -- (hmm, does not seem to make any difference...)
                gCanvasLine(canvas,x1,y1,x2,y1)
            end if
        end for
    end if
end procedure
--*/

sequence polys = {{{399,200},{399,399},{0,399},{0,200},{200,0}},                -- house
                  {{399,200},{399,399},{0,399},{0,200,100,100,300,100}},        -- domed roof
                  {{399,399},{0,399,0,299,100,100},{200,0,299,100,399,299}},    -- bishops mitre
                  {{399,0},{399,399,299,399,100,299},{0,200,100,100,299,0}},    -- bishops mitre side-on
                  {{399,200,399,299,299,399},
                   {199,399,100,399,0,299},{0,200},{200,0}},                    -- boaty mcboatface
                  {{399,299,399,350,299,399},{199,399,100,399,0,350},
                   {0,299,0,250,50,150},{100,100,150,50,250,50},
                   {299,100,350,150,399,250}},                                  -- blobby mcblobface
                  {{399,199,399,299,299,399},{199,399,99,399,0,299},
                   {0,199,0,99,99,0},{199,0,299,0,399,99},{},
                   {300,199,300,249,249,300},{199,300,149,300,100,249},
                   {100,200,100,149,149,100},{200,100,249,100,300,149}},        -- polomint/doughnut
                  {{150,200},{225,200},{225,375},{250,375},{250,399},
                   {150,399},{150,375},{175,375},{175,225},{150,225},{},
                   {200,125,212,125,225,131},{225,137,225,144,212,150},
                   {200,150,187,150,175,144},{175,137,175,131,187,125}},        -- lower-case letter i
                  {{100,50,125,50,150,75},{150,100,150,125,125,150},
                   {100,150,75,150,50,125},{50,100,50,75,75,50}},               -- small circle
                  {{150,200},{225,200},{225,375},{250,375},{250,399},
                   {150,399},{150,375},{175,375},{175,225},{150,225}},          -- i w/o dot
--                {{150,200}, {-594,134}, {225,375}, {250,375}, {250,399}, 
--                 {150,399},{150,375}, {175,375}, {175,225}, {150,225}}, -- (off-screen test)
--                {{1,182,6,121,26,92}, {55,61,79,34,114,8}, {182,0}, {200,200}, {},
--                 {314,364,277,390,246,400}, {197,401,94,399,20,316}, {7,251}}
                  {{0,117,8,72,42,48}, {66,34,91,20,128,5}, {195,0}, {214,129}, {},
                   {337,234,287,256,244,258}, {214,258,156,260,34,231}, {5,161}},
--                {{174,153}, {394,397}, {357,397}, {4,3,392,3,318,152},{},
--                 {154,133}, {40,15,352,20,289,138}, {},
--                 {293,6}, {32,396}, {2,397}, {262,5},{},
--                 {293,6}, {216,117}, {197,108}, {262,5},{},
--                 {182,393}, {152,395,198,323,384,158}, {147,204}, {149,186,268,162,381,166}}

--                {{221,202}, {394,397}, {357,397}, {4,3,395,1,366,171}, {}, 
--                 {206,183}, {58,25,337,25,324,161}, {}, 
--                 {362,9}, {32,396}, {2,397}, {322,6}, {},
--                 {353,12}, {260,122}, {229,121}, {324,11}, {}, 
--                 {182,393}, {161,394,204,300,388,174}, {140,245}, {146,224,272,190,385,162}}
--                {{230,206}, {377,378}, {339,379}, {41,25,388,21,393,193}, {},
--                 {209,180}, {102,50,325,50,370,182}, {},
--                 {282,107}, {71,381}, {34,381}, {262,87}, {},
--                 {354,24}, {238,162}, {218,144}, {317,23}, {},
--                 {185,382}, {150,383,180,336,307,190}, {156,255}, {188,215,220,195,342,195}}
--                {{230,206}, {377,378}, {339,379}, {41,25,388,21,393,193}, {},
--                 {209,180}, {102,50,325,50,370,182}, {},
--                 {283,111}, {71,381}, {34,381}, {261,93}, {},
--                 {354,24}, {237,169}, {214,153}, {317,23}, {},
--                 {185,382}, {150,383,180,336,307,190}, {156,255}, {188,215,220,195,342,195}, {},
--                 {268,352,164,371,360,202}, {279,223,392,164,223,346}}
--                {{246,216}, {381,376}, {349,378}, {41,25,420,19,393,193}, {},
--                 {220,185}, {102,50,335,52,370,182}, {},
--                 {296,121}, {71,381}, {34,381}, {275,99}, {},
--                 {388,25}, {249,174}, {221,162}, {347,24}, {},
--                 {173,380}, {131,381,174,327,327,192}, {160,265}, {185,227,221,205,359,193}, {},
--                 {280,385,145,380,394,230}, {322,216,467,199,210,363}}        
--                {{246,216}, {381,376}, {349,378}, {41,25,420,19,393,193}, {},
--                 {220,185}, {102,50,335,52,370,182}, {},
--                 {298,124}, {71,381}, {34,381}, {276,105}, {},
--                 {388,25}, {251,177}, {229,159}, {347,24}, {},
--                 {173,380}, {144,380,174,327,327,192}, {160,265}, {185,227,221,205,359,193}, {},
--                 {282,381,142,395,383,225}, {322,216,454,199,214,364}}
--                {{246,216}, {381,377}, {349,378}, {41,25,420,19,393,193}, {},
--                 {220,185}, {102,50,335,52,370,182}, {},
--                 {298,124}, {71,381}, {34,381}, {276,105}, {},
--                 {388,24}, {251,177}, {229,159}, {347,24}, {},
--                 {168,381}, {134,382}, {194,318,201,307,303,198}, {160,265}, {185,227,221,205,359,193}, {},
--                 {282,381,142,395,383,225}, {322,216,454,199,214,364}}
                  {{243,216}, {387,377}, {349,378}, {18,24,424,1,393,193}, {}, 
                   {219,190}, {82,48,335,52,380,154}, {},
                   {298,124}, {71,381}, {34,381}, {276,105}, {},
                   {388,24}, {251,177}, {229,159}, {347,24}, {},
                   {168,381}, {134,382}, {194,318,201,307,303,198}, {160,265}, {185,227,221,205,359,193}, {},
                   {282,381,142,395,383,225}, {322,216,454,199,214,364}}
--/*
                  {{243,216}, {387,377}, {349,378}, {18,24,424,1,393,193}, {}, 
                   {219,190}, {82,48,335,52,380,154}, {}, 
                   {298,124}, {71,381}, {34,381}, {276,105}, {},
                   {388,24}, {251,177}, {229,159}, {347,24}, {}, 
                   {168,381}, {134,382}, {175,338,187,324,303,198}, {169,260}, {185,227,221,205,346,193}, {},
                   {282,381,142,395,383,225}, {322,216,454,199,214,364}}
--*/

--                {{15,46,11,8,90,17},{37,42}}, -- fail case
--                {{23,33,11,8,90,17}, {78,38}}, -- fail case [now fixed!]
--{{399,199,399,299,299,399}, {199,399,99,399,0,299}, {0,199,0,99,99,0},
-- {199,0,299,0,399,99}, {}, {300,199,300,249,249,300},
-- {199,300,149,300,100,249}, {100,200,36,179,132,102},
-- {200,100,249,100,300,149}},
                 }

integer polydx = length(polys)

--procedure redraw(gdx canvas)
procedure redraw(gdx canvas, integer w,h)
    sequence poly = polys[polydx]
    if bMargin1 then
        poly = sq_add(poly,1)
    end if
--if 0 then
----    integer {w,h} = gGetAttribute(canvas,"SIZE")
--  integer cx = floor(w/2),
--          cy = floor(h/2)
--{cx,cy,w,h} = {215,130,430,260}
--  gCanvasArc(canvas,cx,cy,w,h,55,165,XPG_CHORD+XPG_FILLED,-1,-1,XPG_AMBER)
----{{1,182,5,121,25,99}, {55,61,79,34,114,8}, {182,0}, {200,200}}
--  gCanvasText(canvas,w*.35,h*.85,"chord",XPG_CENTRE,0,XPG_BLACK)
--  gCanvasArc(canvas,cx,cy,w,h,185,265,XPG_SECTOR+XPG_FILLED,-1,-1,XPG_OLIVE)
----{{314,364,266,401,175,404}, {125,387,54,354,21,306}, {7,251}}
--  gCanvasText(canvas,w*.3,h*.25,"sector",XPG_CENTRE,0,XPG_BLACK)
--end if

    if angle then
--      poly = gRotatePolygon(poly,angle)
        poly = gRotatePolygon(poly,{angle,w/2,h/2})
    end if
    gCanvasPolygon(canvas,poly,bFilled)
    if bDrawCtrls then
        integer l = length(poly), start = 1;
        for i=1 to l do
            sequence pi = poly[i]
            integer lpi = length(pi)
            if lpi==0 then -- (new loop)
                start = i+1
            else
                integer j = iff(i=l or poly[i+1]={}?start:i+1)
                sequence pj = poly[j]
                atom {iX,iY} = pi,
                     {aX,aY} = iff(lpi>2?pi[3..4]:{0,0}),
                     {bX,bY} = iff(lpi>4?pi[5..6]:{aX,aY}),
                     {jX,jY} = pj
                if lpi>2 then
                    gCanvasCircle(canvas,aX,aY,5,colour:=ncolour(i,3))
                  if lpi==6 then
                    gCanvasCircle(canvas,bX,bY,5,colour:=ncolour(i,5))
                  end if
                    gCanvasLine(canvas,iX,iY,aX,aY,XPG_DOTTED,colour:=XPG_RED)
                    gCanvasLine(canvas,jX,jY,bX,bY,XPG_DOTTED,colour:=XPG_RED)
                end if
                gCanvasCircle(canvas,iX,iY,5,colour:=ncolour(i,1))
                gCanvasCircle(canvas,jX,jY,5,colour:=ncolour(j,1))
            end if -- (not new loop)
        end for
    end if
end procedure

procedure set_dialog_size(gdx dlg)
    integer {sx,sy} = iff(bMargin1?{404,434}:{402,432})
--?{dlg,"SIZE",{sx,sy}}
    gSetAttribute(dlg,`SIZE`,{sx,sy})
end procedure

function key_handler(gdx id, integer c)
--?{"key_handler",id,c,{sprintf("#%x",c),gGetKeyName(c)}}
--function key_handler(gdx dlg, integer c, ctrl, shift, alt)
--function key_handler(gdx dlg, integer c, bool ctrl, shift, alt)
--?{"key_handler",c,{sprintf("#%x",c),gGetKeyName(c)},ctrl,shift,alt,gVersion(true)}
--sleep(1)
--DEV: (test whether still actually needed...)
--  if c=VK_ESC then return XPG_CLOSE end if -- (standard practice for me)
--  if c=VK_F5 then return XPG_DEFAULT end if -- (let browser reload work)
    if c='?' then
        pp(polys[polydx])
--DEV cycle through our set of test polygons. [DONE]
--  Also rotate on/off[=VK_CR], 
--  dump[='?', DONE], 
--  filled[='f'], snaptogrid[='g'], delete[=VK_DEL(green)], clear[='?c']
--      wuline = not wuline
--      set_title()
--      gRedraw(gGetDialog(id))
--      gRedraw(id)
    elsif c=' ' or c='+' then
        polydx += 1
        if polydx>length(polys) then polydx = 1 end if
        gRedraw(id)
    elsif c='-' then
        polydx -= 1
        if polydx=0 then polydx = length(polys) end if
        gRedraw(id)
    else
        c = lower(c)
        if c='c' then
            bDrawCtrls = not bDrawCtrls
            gRedraw(id)
        elsif c='f' then
            bFilled = not bFilled
            gRedraw(id)
--DEV fixme...
--      elsif c='m' then
--          bMargin1 = not bMargin1
--          set_dialog_size(gGetDialog(id))
--          gRedraw(id)
        elsif c='r' or c='t' then
            angle += iff(c='r'?+1:-1)
?{"angle",angle}
ndi = 0 -- (drag/drop won't work if angle!=0...)
            gRedraw(id)
        elsif c='0' then
            angle = 0
            gRedraw(id)
        end if
    end if
--if alt then return XPG_IGNORE end if
--DEV/SUG make XPG_CONTINUE act as CLOSE/DEFAULT/IGNORE??? (and o/c document that)
--DEV/SUG make XPG_DEFAULT act as CLOSE/CONTINUE/IGNORE??? (and o/c document that)
    return XPG_CONTINUE
end function

sequence slstate -- single left click state: {{ix,iy},{dx,dy}} where:
                 -- {ix,iy} is the initial position before any movement
                 -- and {dx,dy} is mousedown position, so mousemove can
                 -- (/should) set the position to initial + now - down.

procedure mousemove(gdx canvas, integer x,y, bool left,middle,right)
    if left then
        if ndi then
            -- retrieve initial and mouse down x,y:
            integer {{ix,iy},{dx,dy}} = slstate
            polys[polydx][ndi][ndx] = ix+x-dx
            polys[polydx][ndi][ndx+1] = iy+y-dy
            gRedraw(canvas)
        end if
--  elsif set_nearest(polys[polydx],x,y) then
    elsif angle=0 and set_nearest(polys[polydx],x,y) then
        gRedraw(canvas)
    end if
--? show x,y in the window title
--  ?{"mousemove",x,y}
--  ?{"mousemove",x,y,left,middle,right}
--  ?{"mousemove",x,y,left,middle,right,{ndi,ndx}}
--  ?{"mousemove",x,y,left,middle,right,ctrl,shift,alt}
end procedure
--*!/
--/!* -- works fine:
function click(gdx canvas, sequence status, integer x, y)
--procedure click(gdx canvas, sequence status)
    integer {button,pressed,ctrl,shift,alt} = status
--  printf(1,"click(button:%c, pressed:%c, ctrl:%d, shift:%d, alt:%d, x:%d, y:%d)\n",
--           {button,pressed,ctrl,shift,alt,x,y})
    if button='L' and pressed='S' and ndi then
        slstate = {polys[polydx][ndi][ndx..ndx+1],{x,y}}
--      ?{"slstate",slstate}
    end if
--down: select nearest (green) point if any, else create a new point (if shift and length(poly)>0 then add a spline point)
--  up: just clear the flag, for mousemove
--  printf(1,"click(button:%c, pressed:%c, ctrl:%d, shift:%d, alt:%d)\n",
--           {button,pressed,ctrl,shift,alt})
    return false
end function
--*!/

--gdx canvas = gCanvas(redraw,`SIZE=400x400`),

gdx canvas = gCanvas(redraw),
--  dialog = gDialog(canvas,`gCanvasPolygon`,`SIZE=%dx%d`,{sx,sy})
    dialog = gDialog(canvas,`gCanvasPolygon`)
set_dialog_size(dialog)
gSetAttribute(canvas,"BGCLR",XPG_PARCHMENT)
gSetHandlers(canvas,{`KEY`,key_handler,
                     `CLICK`,click,
                     `MOUSEMOVE`,mousemove})
gShow(dialog)
gMainLoop()

-- Some test code I couldn't quite bear to delete:
--/*
integer count = 0
constant f56 = 0.8333333333333333, -- 5/6
         g56 = 0.8333333333333334, -- 5/6
         f76 = 1.1666666666666666, -- 7/6
         g76 = 1.1666666666666667, -- 7/6
         g23 = 0.6666666666666667, -- 2/3
       f1112 = 0.91666666666666669 -- 11/12
constant er = {
{  1, 0.5 ,0.5 , 0.5 ,0.5 , 0,0,-1    ,-1    },
{  2, 0.5 ,0.5 , 0.5 ,0.75, 0,0,-1    ,-1    },
{  3, 0.5 ,0.5 , 0.5 ,1   , 0,0,-1    ,-1    },
{  4, 0.5 ,0.5 , 0.5 ,1.25, 0,1,-1    , 0.5  },
{  5, 0.5 ,0.5 , 0.5 ,1.5 , 0,1,-1    , 0.5  },
{  6, 0.5 ,0.75, 0.5 ,0.5 , 0,0,-1    ,-1    },
{  7, 0.5 ,0.75, 0.5 ,0.75, 0,0,-1    ,-1    },
{  8, 0.5 ,0.75, 0.5 ,1   , 0,0,-1    ,-1    },
{  9, 0.5 ,0.75, 0.5 ,1.25, 0,1,-1    , 0.5  },
{ 10, 0.5 ,0.75, 0.5 ,1.5 , 0,1,-1    , 0.5  },
{ 11, 0.5 ,1   , 0.5 ,0.5 , 0,0,-1    ,-1    },
{ 12, 0.5 ,1   , 0.5 ,0.75, 0,0,-1    ,-1    },
{ 13, 0.5 ,1   , 0.5 ,1   , 0,0,-1    ,-1    },
{ 14, 0.5 ,1   , 0.5 ,1.25, 0,1,-1    , 0.5  },
{ 15, 0.5 ,1   , 0.5 ,1.5 , 0,1,-1    , 0.5  },
{ 16, 0.5 ,1.25, 0.5 ,0.5 , 0,1,-1    , 0.5  },
{ 17, 0.5 ,1.25, 0.5 ,0.75, 0,1,-1    , 0.5  },
{ 18, 0.5 ,1.25, 0.5 ,1   , 0,1,-1    , 0.5  },
{ 19, 0.5 ,1.25, 0.5 ,1.25, 0,0,-1    ,-1    },
{ 20, 0.5 ,1.25, 0.5 ,1.5 , 0,0,-1    ,-1    },
{ 21, 0.5 ,1.5 , 0.5 ,0.5 , 0,1,-1    , 0.5  },
{ 22, 0.5 ,1.5 , 0.5 ,0.75, 0,1,-1    , 0.5  },
{ 23, 0.5 ,1.5 , 0.5 ,1   , 0,1,-1    , 0.5  },
{ 24, 0.5 ,1.5 , 0.5 ,1.25, 0,0,-1    ,-1    },
{ 25, 0.5 ,1.5 , 0.5 ,1.5 , 0,0,-1    ,-1    },
{ 26, 0.5 ,0.5 , 0.75,0.5 , 0,0,-1    ,-1    },
{ 27, 0.5 ,0.5 , 0.75,0.75, 0,0,-1    ,-1    },
{ 28, 0.5 ,0.5 , 0.75,1   , 0,0,-1    ,-1    },
{ 29, 0.5 ,0.5 , 0.75,1.25, 0,1,-1    , 2/3  },
{ 30, 0.5 ,0.5 , 0.75,1.5 , 0,1,-1    , 0.625},
{ 31, 0.5 ,0.75, 0.75,0.5 , 0,0,-1    ,-1    },
{ 32, 0.5 ,0.75, 0.75,0.75, 0,0,-1    ,-1    },
{ 33, 0.5 ,0.75, 0.75,1   , 0,0,-1    ,-1    },
{ 34, 0.5 ,0.75, 0.75,1.25, 0,1,-1    , 0.625},
{ 35, 0.5 ,0.75, 0.75,1.5 , 0,1,-1    , 7/12 },
{ 36, 0.5 ,1   , 0.75,0.5 , 0,0,-1    ,-1    },
{ 37, 0.5 ,1   , 0.75,0.75, 0,0,-1    ,-1    },
{ 38, 0.5 ,1   , 0.75,1   , 0,0,-1    ,-1    },
{ 39, 0.5 ,1   , 0.75,1.25, 0,1,-1    , 0.5  },
{ 40, 0.5 ,1   , 0.75,1.5 , 0,1,-1    , 0.5  },
{ 41, 0.5 ,1.25, 0.75,0.5 , 0,1,-1    , 7/12 },
{ 42, 0.5 ,1.25, 0.75,0.75, 0,1,-1    , 0.625},
{ 43, 0.5 ,1.25, 0.75,1   , 0,1,-1    , 0.75 },
{ 44, 0.5 ,1.25, 0.75,1.25, 0,0,-1    ,-1    },
{ 45, 0.5 ,1.25, 0.75,1.5 , 0,0,-1    ,-1    },
{ 46, 0.5 ,1.5 , 0.75,0.5 , 0,1,-1    , 0.625},
{ 47, 0.5 ,1.5 , 0.75,0.75, 0,1,-1    , 2/3  },
{ 48, 0.5 ,1.5 , 0.75,1   , 0,1,-1    , 0.75 },
{ 49, 0.5 ,1.5 , 0.75,1.25, 0,0,-1    ,-1    },
{ 50, 0.5 ,1.5 , 0.75,1.5 , 0,0,-1    ,-1    },
{ 51, 0.5 ,0.5 , 1   ,0.5 , 0,0,-1    ,-1    },
{ 52, 0.5 ,0.5 , 1   ,0.75, 0,0,-1    ,-1    },
{ 53, 0.5 ,0.5 , 1   ,1   , 0,0,-1    ,-1    },
{ 54, 0.5 ,0.5 , 1   ,1.25, 0,1,-1    , f56  },
{ 55, 0.5 ,0.5 , 1   ,1.5 , 0,1,-1    , 0.75 },
{ 56, 0.5 ,0.75, 1   ,0.5 , 0,0,-1    ,-1    },
{ 57, 0.5 ,0.75, 1   ,0.75, 0,0,-1    ,-1    },
{ 58, 0.5 ,0.75, 1   ,1   , 0,0,-1    ,-1    },
{ 59, 0.5 ,0.75, 1   ,1.25, 0,1,-1    , 0.75 },
{ 60, 0.5 ,0.75, 1   ,1.5 , 0,1,-1    , 2/3  },
{ 61, 0.5 ,1   , 1   ,0.5 , 0,0,-1    ,-1    },
{ 62, 0.5 ,1   , 1   ,0.75, 0,0,-1    ,-1    },
{ 63, 0.5 ,1   , 1   ,1   , 0,0,-1    ,-1    },
{ 64, 0.5 ,1   , 1   ,1.25, 0,1,-1    , 0.5  },
{ 65, 0.5 ,1   , 1   ,1.5 , 0,1,-1    , 0.5  },
{ 66, 0.5 ,1.25, 1   ,0.5 , 0,1,-1    , 2/3  },
{ 67, 0.5 ,1.25, 1   ,0.75, 0,1,-1    , 0.75 },
{ 68, 0.5 ,1.25, 1   ,1   , 0,1,-1    , 1    },
{ 69, 0.5 ,1.25, 1   ,1.25, 0,0,-1    ,-1    },
{ 70, 0.5 ,1.25, 1   ,1.5 , 0,0,-1    ,-1    },
{ 71, 0.5 ,1.5 , 1   ,0.5 , 0,1,-1    , 0.75 },
{ 72, 0.5 ,1.5 , 1   ,0.75, 0,1,-1    , f56  },
{ 73, 0.5 ,1.5 , 1   ,1   , 0,1,-1    , 1    },
{ 74, 0.5 ,1.5 , 1   ,1.25, 0,0,-1    ,-1    },
{ 75, 0.5 ,1.5 , 1   ,1.5 , 0,0,-1    ,-1    },
{ 76, 0.5 ,0.5 , 1.25,0.5 , 1,0, 0.5  ,-1    },
{ 77, 0.5 ,0.5 , 1.25,0.75, 1,0, 2/3  ,-1    },
{ 78, 0.5 ,0.5 , 1.25,1   , 1,0, f56  ,-1    },
{ 79, 0.5 ,0.5 , 1.25,1.25, 1,1, 1    , 1    },
{ 80, 0.5 ,0.5 , 1.25,1.5 , 1,1, f76  , 0.875},
{ 81, 0.5 ,0.75, 1.25,0.5 , 1,0, 7/12 ,-1    },
{ 82, 0.5 ,0.75, 1.25,0.75, 1,0, 0.75 ,-1    },
{ 83, 0.5 ,0.75, 1.25,1   , 1,0, 11/12,-1    },
{ 84, 0.5 ,0.75, 1.25,1.25, 1,1, 13/12, 0.875},
{ 85, 0.5 ,0.75, 1.25,1.5 , 1,1, 1.25 , 0.75 },
{ 86, 0.5 ,1   , 1.25,0.5 , 1,0, g23  ,-1    },
{ 87, 0.5 ,1   , 1.25,0.75, 1,0, g56  ,-1    },
{ 88, 0.5 ,1   , 1.25,1   , 1,0, 1    ,-1    },
{ 89, 0.5 ,1   , 1.25,1.25, 1,1, g76  , 0.5  },
{ 90, 0.5 ,1   , 1.25,1.5 , 1,1, 4/3  , 0.5  },
{ 91, 0.5 ,1.25, 1.25,0.5 , 1,1, 0.75 , 0.75 },
{ 92, 0.5 ,1.25, 1.25,0.75, 1,1, f1112, 0.875},
{ 93, 0.5 ,1.25, 1.25,1   , 1,1, 13/12, 1.25 },
{ 94, 0.5 ,1.25, 1.25,1.25, 1,0, 1.25 ,-1    },
{ 95, 0.5 ,1.25, 1.25,1.5 , 1,0, 17/12,-1    },
{ 96, 0.5 ,1.5 , 1.25,0.5 , 1,1, 5/6  , 0.875},
{ 97, 0.5 ,1.5 , 1.25,0.75, 1,1, 1    , 1    },
{ 98, 0.5 ,1.5 , 1.25,1   , 1,1, g76  , 1.25 },
{ 99, 0.5 ,1.5 , 1.25,1.25, 1,0, 4/3  ,-1    },
{100, 0.5 ,1.5 , 1.25,1.5 , 1,0, 1.5  ,-1    },
{101, 0.5 ,0.5 , 1.5 ,0.5 , 1,0, 0.5  ,-1    },
{102, 0.5 ,0.5 , 1.5 ,0.75, 1,0, 0.625,-1    },
{103, 0.5 ,0.5 , 1.5 ,1   , 1,0, 0.75 ,-1    },
{104, 0.5 ,0.5 , 1.5 ,1.25, 1,1, 0.875, f76  },
{105, 0.5 ,0.5 , 1.5 ,1.5 , 1,1, 1    , 1    },
{106, 0.5 ,0.75, 1.5 ,0.5 , 1,0, 0.625,-1    },
{107, 0.5 ,0.75, 1.5 ,0.75, 1,0, 0.75 ,-1    },
{108, 0.5 ,0.75, 1.5 ,1   , 1,0, 0.875,-1    },
{109, 0.5 ,0.75, 1.5 ,1.25, 1,1, 1    , 1    },
{110, 0.5 ,0.75, 1.5 ,1.5 , 1,1, 1.125, f56  },
{111, 0.5 ,1   , 1.5 ,0.5 , 1,0, 0.75 ,-1    },
{112, 0.5 ,1   , 1.5 ,0.75, 1,0, 0.875,-1    },
{113, 0.5 ,1   , 1.5 ,1   , 1,0, 1    ,-1    },
{114, 0.5 ,1   , 1.5 ,1.25, 1,1, 1.125, 0.5  },
{115, 0.5 ,1   , 1.5 ,1.5 , 1,1, 1.25 , 0.5  },
{116, 0.5 ,1.25, 1.5 ,0.5 , 1,1, 0.875, f56  },
{117, 0.5 ,1.25, 1.5 ,0.75, 1,1, 1    , 1    },
{118, 0.5 ,1.25, 1.5 ,1   , 1,1, 1.125, 1.5  },
{119, 0.5 ,1.25, 1.5 ,1.25, 1,0, 1.25 ,-1    },
{120, 0.5 ,1.25, 1.5 ,1.5 , 1,0, 1.375,-1    },
{121, 0.5 ,1.5 , 1.5 ,0.5 , 1,1, 1    , 1    },
{122, 0.5 ,1.5 , 1.5 ,0.75, 1,1, 1.125, f76  },
{123, 0.5 ,1.5 , 1.5 ,1   , 1,1, 1.25 , 1.5  },
{124, 0.5 ,1.5 , 1.5 ,1.25, 1,0, 1.375,-1    },
{125, 0.5 ,1.5 , 1.5 ,1.5 , 1,0, 1.5  ,-1    },
{126, 0.75,0.5 , 0.5 ,0.5 , 0,0,-1    ,-1    },
{127, 0.75,0.5 , 0.5 ,0.75, 0,0,-1    ,-1    },
{128, 0.75,0.5 , 0.5 ,1   , 0,0,-1    ,-1    },
{129, 0.75,0.5 , 0.5 ,1.25, 0,1,-1    , 7/12 },
{130, 0.75,0.5 , 0.5 ,1.5 , 0,1,-1    , 0.625},
{131, 0.75,0.75, 0.5 ,0.5 , 0,0,-1    ,-1    },
{132, 0.75,0.75, 0.5 ,0.75, 0,0,-1    ,-1    },
{133, 0.75,0.75, 0.5 ,1   , 0,0,-1    ,-1    },
{134, 0.75,0.75, 0.5 ,1.25, 0,1,-1    , 0.625},
{135, 0.75,0.75, 0.5 ,1.5 , 0,1,-1    , 2/3  },
{136, 0.75,1   , 0.5 ,0.5 , 0,0,-1    ,-1    },
{137, 0.75,1   , 0.5 ,0.75, 0,0,-1    ,-1    },
{138, 0.75,1   , 0.5 ,1   , 0,0,-1    ,-1    },
{139, 0.75,1   , 0.5 ,1.25, 0,1,-1    , 0.75 },
{140, 0.75,1   , 0.5 ,1.5 , 0,1,-1    , 0.75 },
{141, 0.75,1.25, 0.5 ,0.5 , 0,1,-1    , 2/3  },
{142, 0.75,1.25, 0.5 ,0.75, 0,1,-1    , 0.625},
{143, 0.75,1.25, 0.5 ,1   , 0,1,-1    , 0.5  },
{144, 0.75,1.25, 0.5 ,1.25, 0,0,-1    ,-1    },
{145, 0.75,1.25, 0.5 ,1.5 , 0,0,-1    ,-1    },
{146, 0.75,1.5 , 0.5 ,0.5 , 0,1,-1    , 0.625},
{147, 0.75,1.5 , 0.5 ,0.75, 0,1,-1    , 7/12 },
{148, 0.75,1.5 , 0.5 ,1   , 0,1,-1    , 0.5  },
{149, 0.75,1.5 , 0.5 ,1.25, 0,0,-1    ,-1    },
{150, 0.75,1.5 , 0.5 ,1.5 , 0,0,-1    ,-1    },
{151, 0.75,0.5 , 0.75,0.5 , 0,0,-1    ,-1    },
{152, 0.75,0.5 , 0.75,0.75, 0,0,-1    ,-1    },
{153, 0.75,0.5 , 0.75,1   , 0,0,-1    ,-1    },
{154, 0.75,0.5 , 0.75,1.25, 0,1,-1    , 0.75 },
{155, 0.75,0.5 , 0.75,1.5 , 0,1,-1    , 0.75 },
{156, 0.75,0.75, 0.75,0.5 , 0,0,-1    ,-1    },
{157, 0.75,0.75, 0.75,0.75, 0,0,-1    ,-1    },
{158, 0.75,0.75, 0.75,1   , 0,0,-1    ,-1    },
{159, 0.75,0.75, 0.75,1.25, 0,1,-1    , 0.75 },
{160, 0.75,0.75, 0.75,1.5 , 0,1,-1    , 0.75 },
{161, 0.75,1   , 0.75,0.5 , 0,0,-1    ,-1    },
{162, 0.75,1   , 0.75,0.75, 0,0,-1    ,-1    },
{163, 0.75,1   , 0.75,1   , 0,0,-1    ,-1    },
{164, 0.75,1   , 0.75,1.25, 0,1,-1    , 0.75 },
{165, 0.75,1   , 0.75,1.5 , 0,1,-1    , 0.75 },
{166, 0.75,1.25, 0.75,0.5 , 0,1,-1    , 0.75 },
{167, 0.75,1.25, 0.75,0.75, 0,1,-1    , 0.75 },
{168, 0.75,1.25, 0.75,1   , 0,1,-1    , 0.75 },
{169, 0.75,1.25, 0.75,1.25, 0,0,-1    ,-1    },
{170, 0.75,1.25, 0.75,1.5 , 0,0,-1    ,-1    },
{171, 0.75,1.5 , 0.75,0.5 , 0,1,-1    , 0.75 },
{172, 0.75,1.5 , 0.75,0.75, 0,1,-1    , 0.75 },
{173, 0.75,1.5 , 0.75,1   , 0,1,-1    , 0.75 },
{174, 0.75,1.5 , 0.75,1.25, 0,0,-1    ,-1    },
{175, 0.75,1.5 , 0.75,1.5 , 0,0,-1    ,-1    },
{176, 0.75,0.5 , 1   ,0.5 , 0,0,-1    ,-1    },
{177, 0.75,0.5 , 1   ,0.75, 0,0,-1    ,-1    },
{178, 0.75,0.5 , 1   ,1   , 0,0,-1    ,-1    },
{179, 0.75,0.5 , 1   ,1.25, 0,1,-1    , 11/12},
{180, 0.75,0.5 , 1   ,1.5 , 0,1,-1    , 0.875},
{181, 0.75,0.75, 1   ,0.5 , 0,0,-1    ,-1    },
{182, 0.75,0.75, 1   ,0.75, 0,0,-1    ,-1    },
{183, 0.75,0.75, 1   ,1   , 0,0,-1    ,-1    },
{184, 0.75,0.75, 1   ,1.25, 0,1,-1    , 0.875},
{185, 0.75,0.75, 1   ,1.5 , 0,1,-1    , 5/6  },
{186, 0.75,1   , 1   ,0.5 , 0,0,-1    ,-1    },
{187, 0.75,1   , 1   ,0.75, 0,0,-1    ,-1    },
{188, 0.75,1   , 1   ,1   , 0,0,-1    ,-1    },
{189, 0.75,1   , 1   ,1.25, 0,1,-1    , 0.75 },
{190, 0.75,1   , 1   ,1.5 , 0,1,-1    , 0.75 },
{191, 0.75,1.25, 1   ,0.5 , 0,1,-1    , 5/6  },
{192, 0.75,1.25, 1   ,0.75, 0,1,-1    , 0.875},
{193, 0.75,1.25, 1   ,1   , 0,1,-1    , 1    },
{194, 0.75,1.25, 1   ,1.25, 0,0,-1    ,-1    },
{195, 0.75,1.25, 1   ,1.5 , 0,0,-1    ,-1    },
{196, 0.75,1.5 , 1   ,0.5 , 0,1,-1    , 0.875},
{197, 0.75,1.5 , 1   ,0.75, 0,1,-1    , 11/12},
{198, 0.75,1.5 , 1   ,1   , 0,1,-1    , 1    },
{199, 0.75,1.5 , 1   ,1.25, 0,0,-1    ,-1    },
{200, 0.75,1.5 , 1   ,1.5 , 0,0,-1    ,-1    },
{201, 0.75,0.5 , 1.25,0.5 , 1,0, 0.5  ,-1    },
{202, 0.75,0.5 , 1.25,0.75, 1,0, 0.625,-1    },
{203, 0.75,0.5 , 1.25,1   , 1,0, 0.75 ,-1    },
{204, 0.75,0.5 , 1.25,1.25, 1,1, 0.875, 13/12},
{205, 0.75,0.5 , 1.25,1.5 , 1,1, 1    , 1    },
{206, 0.75,0.75, 1.25,0.5 , 1,0, 0.625,-1    },
{207, 0.75,0.75, 1.25,0.75, 1,0, 0.75 ,-1    },
{208, 0.75,0.75, 1.25,1   , 1,0, 0.875,-1    },
{209, 0.75,0.75, 1.25,1.25, 1,1, 1    , 1    },
{210, 0.75,0.75, 1.25,1.5 , 1,1, 1.125, 11/12},
{211, 0.75,1   , 1.25,0.5 , 1,0, 0.75 ,-1    },
{212, 0.75,1   , 1.25,0.75, 1,0, 0.875,-1    },
{213, 0.75,1   , 1.25,1   , 1,0, 1    ,-1    },
{214, 0.75,1   , 1.25,1.25, 1,1, 1.125, 0.75 },
{215, 0.75,1   , 1.25,1.5 , 1,1, 1.25 , 0.75 },
{216, 0.75,1.25, 1.25,0.5 , 1,1, 0.875, 11/12},
{217, 0.75,1.25, 1.25,0.75, 1,1, 1    , 1    },
{218, 0.75,1.25, 1.25,1   , 1,1, 1.125, 1.25 },
{219, 0.75,1.25, 1.25,1.25, 1,0, 1.25 ,-1    },
{220, 0.75,1.25, 1.25,1.5 , 1,0, 1.375,-1    },
{221, 0.75,1.5 , 1.25,0.5 , 1,1, 1    , 1    },
{222, 0.75,1.5 , 1.25,0.75, 1,1, 1.125, 13/12},
{223, 0.75,1.5 , 1.25,1   , 1,1, 1.25 , 1.25 },
{224, 0.75,1.5 , 1.25,1.25, 1,0, 1.375,-1    },
{225, 0.75,1.5 , 1.25,1.5 , 1,0, 1.5  ,-1    },
{226, 0.75,0.5 , 1.5 ,0.5 , 1,0, 0.5  ,-1    },
{227, 0.75,0.5 , 1.5 ,0.75, 1,0, 7/12 ,-1    },
{228, 0.75,0.5 , 1.5 ,1   , 1,0, 2/3  ,-1    },
{229, 0.75,0.5 , 1.5 ,1.25, 1,1, 0.75 , 1.25 },
{230, 0.75,0.5 , 1.5 ,1.5 , 1,1, f56  , 1.125},
{231, 0.75,0.75, 1.5 ,0.5 , 1,0, 2/3  ,-1    },
{232, 0.75,0.75, 1.5 ,0.75, 1,0, 0.75 ,-1    },
{233, 0.75,0.75, 1.5 ,1   , 1,0, 5/6  ,-1    },
{234, 0.75,0.75, 1.5 ,1.25, 1,1, 11/12, 1.125},
{235, 0.75,0.75, 1.5 ,1.5 , 1,1, 1    , 1    },
{236, 0.75,1   , 1.5 ,0.5 , 1,0, 5/6  ,-1    },
{237, 0.75,1   , 1.5 ,0.75, 1,0, 11/12,-1    },
{238, 0.75,1   , 1.5 ,1   , 1,0, 1    ,-1    },
{239, 0.75,1   , 1.5 ,1.25, 1,1, 13/12, 0.75 },
{240, 0.75,1   , 1.5 ,1.5 , 1,1, 7/6  , 0.75 },
{241, 0.75,1.25, 1.5 ,0.5 , 1,1, 1    , 1    },
{242, 0.75,1.25, 1.5 ,0.75, 1,1, 13/12, 1.125},
{243, 0.75,1.25, 1.5 ,1   , 1,1, 7/6  , 1.5  },
{244, 0.75,1.25, 1.5 ,1.25, 1,0, 1.25 ,-1    },
{245, 0.75,1.25, 1.5 ,1.5 , 1,0, 4/3  ,-1    },
{246, 0.75,1.5 , 1.5 ,0.5 , 1,1, 7/6  , 1.125},
{247, 0.75,1.5 , 1.5 ,0.75, 1,1, 1.25 , 1.25 },
{248, 0.75,1.5 , 1.5 ,1   , 1,1, 4/3  , 1.5  },
{249, 0.75,1.5 , 1.5 ,1.25, 1,0, 17/12,-1    },
{250, 0.75,1.5 , 1.5 ,1.5 , 1,0, 1.5  ,-1    },
{251, 1   ,0.5 , 0.5 ,0.5 , 0,0,-1    ,-1    },
{252, 1   ,0.5 , 0.5 ,0.75, 0,0,-1    ,-1    },
{253, 1   ,0.5 , 0.5 ,1   , 0,0,-1    ,-1    },
{254, 1   ,0.5 , 0.5 ,1.25, 0,1,-1    , g23  },
{255, 1   ,0.5 , 0.5 ,1.5 , 0,1,-1    , 0.75 },
{256, 1   ,0.75, 0.5 ,0.5 , 0,0,-1    ,-1    },
{257, 1   ,0.75, 0.5 ,0.75, 0,0,-1    ,-1    },
{258, 1   ,0.75, 0.5 ,1   , 0,0,-1    ,-1    },
{259, 1   ,0.75, 0.5 ,1.25, 0,1,-1    , 0.75 },
{260, 1   ,0.75, 0.5 ,1.5 , 0,1,-1    , 5/6  },
{261, 1   ,1   , 0.5 ,0.5 , 0,0,-1    ,-1    },
{262, 1   ,1   , 0.5 ,0.75, 0,0,-1    ,-1    },
{263, 1   ,1   , 0.5 ,1   , 0,0,-1    ,-1    },
{264, 1   ,1   , 0.5 ,1.25, 0,1,-1    , 1    },
{265, 1   ,1   , 0.5 ,1.5 , 0,1,-1    , 1    },
{266, 1   ,1.25, 0.5 ,0.5 , 0,1,-1    , 5/6  },
{267, 1   ,1.25, 0.5 ,0.75, 0,1,-1    , 0.75 },
{268, 1   ,1.25, 0.5 ,1   , 0,1,-1    , 0.5  },
{269, 1   ,1.25, 0.5 ,1.25, 0,0,-1    ,-1    },
{270, 1   ,1.25, 0.5 ,1.5 , 0,0,-1    ,-1    },
{271, 1   ,1.5 , 0.5 ,0.5 , 0,1,-1    , 0.75 },
{272, 1   ,1.5 , 0.5 ,0.75, 0,1,-1    , g23  },
{273, 1   ,1.5 , 0.5 ,1   , 0,1,-1    , 0.5  },
{274, 1   ,1.5 , 0.5 ,1.25, 0,0,-1    ,-1    },
{275, 1   ,1.5 , 0.5 ,1.5 , 0,0,-1    ,-1    },
{276, 1   ,0.5 , 0.75,0.5 , 0,0,-1    ,-1    },
{277, 1   ,0.5 , 0.75,0.75, 0,0,-1    ,-1    },
{278, 1   ,0.5 , 0.75,1   , 0,0,-1    ,-1    },
{279, 1   ,0.5 , 0.75,1.25, 0,1,-1    , 5/6  },
{280, 1   ,0.5 , 0.75,1.5 , 0,1,-1    , 0.875},
{281, 1   ,0.75, 0.75,0.5 , 0,0,-1    ,-1    },
{282, 1   ,0.75, 0.75,0.75, 0,0,-1    ,-1    },
{283, 1   ,0.75, 0.75,1   , 0,0,-1    ,-1    },
{284, 1   ,0.75, 0.75,1.25, 0,1,-1    , 0.875},
{285, 1   ,0.75, 0.75,1.5 , 0,1,-1    , 11/12},
{286, 1   ,1   , 0.75,0.5 , 0,0,-1    ,-1    },
{287, 1   ,1   , 0.75,0.75, 0,0,-1    ,-1    },
{288, 1   ,1   , 0.75,1   , 0,0,-1    ,-1    },
{289, 1   ,1   , 0.75,1.25, 0,1,-1    , 1    },
{290, 1   ,1   , 0.75,1.5 , 0,1,-1    , 1    },
{291, 1   ,1.25, 0.75,0.5 , 0,1,-1    , 11/12},
{292, 1   ,1.25, 0.75,0.75, 0,1,-1    , 0.875},
{293, 1   ,1.25, 0.75,1   , 0,1,-1    , 0.75 },
{294, 1   ,1.25, 0.75,1.25, 0,0,-1    ,-1    },
{295, 1   ,1.25, 0.75,1.5 , 0,0,-1    ,-1    },
{296, 1   ,1.5 , 0.75,0.5 , 0,1,-1    , 0.875},
{297, 1   ,1.5 , 0.75,0.75, 0,1,-1    , 5/6  },
{298, 1   ,1.5 , 0.75,1   , 0,1,-1    , 0.75 },
{299, 1   ,1.5 , 0.75,1.25, 0,0,-1    ,-1    },
{300, 1   ,1.5 , 0.75,1.5 , 0,0,-1    ,-1    },
{301, 1   ,0.5 , 1   ,0.5 , 0,0,-1    ,-1    },
{302, 1   ,0.5 , 1   ,0.75, 0,0,-1    ,-1    },
{303, 1   ,0.5 , 1   ,1   , 0,0,-1    ,-1    },
{304, 1   ,0.5 , 1   ,1.25, 0,1,-1    , 1    },
{305, 1   ,0.5 , 1   ,1.5 , 0,1,-1    , 1    },
{306, 1   ,0.75, 1   ,0.5 , 0,0,-1    ,-1    },
{307, 1   ,0.75, 1   ,0.75, 0,0,-1    ,-1    },
{308, 1   ,0.75, 1   ,1   , 0,0,-1    ,-1    },
{309, 1   ,0.75, 1   ,1.25, 0,1,-1    , 1    },
{310, 1   ,0.75, 1   ,1.5 , 0,1,-1    , 1    },
{311, 1   ,1   , 1   ,0.5 , 0,0,-1    ,-1    },
{312, 1   ,1   , 1   ,0.75, 0,0,-1    ,-1    },
{313, 1   ,1   , 1   ,1   , 0,0,-1    ,-1    },
{314, 1   ,1   , 1   ,1.25, 0,1,-1    , 1    },
{315, 1   ,1   , 1   ,1.5 , 0,1,-1    , 1    },
{316, 1   ,1.25, 1   ,0.5 , 0,1,-1    , 1    },
{317, 1   ,1.25, 1   ,0.75, 0,1,-1    , 1    },
{318, 1   ,1.25, 1   ,1   , 0,1,-1    , 1    },
{319, 1   ,1.25, 1   ,1.25, 0,0,-1    ,-1    },
{320, 1   ,1.25, 1   ,1.5 , 0,0,-1    ,-1    },
{321, 1   ,1.5 , 1   ,0.5 , 0,1,-1    , 1    },
{322, 1   ,1.5 , 1   ,0.75, 0,1,-1    , 1    },
{323, 1   ,1.5 , 1   ,1   , 0,1,-1    , 1    },
{324, 1   ,1.5 , 1   ,1.25, 0,0,-1    ,-1    },
{325, 1   ,1.5 , 1   ,1.5 , 0,0,-1    ,-1    },
{326, 1   ,0.5 , 1.25,0.5 , 1,0, 0.5  ,-1    },
{327, 1   ,0.5 , 1.25,0.75, 1,0, 0.5  ,-1    },
{328, 1   ,0.5 , 1.25,1   , 1,0, 0.5  ,-1    },
{329, 1   ,0.5 , 1.25,1.25, 1,1, 0.5  , 7/6  },
{330, 1   ,0.5 , 1.25,1.5 , 1,1, 0.5  , 1.125},
{331, 1   ,0.75, 1.25,0.5 , 1,0, 0.75 ,-1    },
{332, 1   ,0.75, 1.25,0.75, 1,0, 0.75 ,-1    },
{333, 1   ,0.75, 1.25,1   , 1,0, 0.75 ,-1    },
{334, 1   ,0.75, 1.25,1.25, 1,1, 0.75 , 1.125},
{335, 1   ,0.75, 1.25,1.5 , 1,1, 0.75 , 13/12},
{336, 1   ,1   , 1.25,0.5 , 1,0, 1    ,-1    },
{337, 1   ,1   , 1.25,0.75, 1,0, 1    ,-1    },
{338, 1   ,1   , 1.25,1   , 1,0, 1    ,-1    },
{339, 1   ,1   , 1.25,1.25, 1,1, 1    , 1    },
{340, 1   ,1   , 1.25,1.5 , 1,1, 1    , 1    },
{341, 1   ,1.25, 1.25,0.5 , 1,1, 1.25 , 13/12},
{342, 1   ,1.25, 1.25,0.75, 1,1, 1.25 , 1.125},
{343, 1   ,1.25, 1.25,1   , 1,1, 1.25 , 1.25 },
{344, 1   ,1.25, 1.25,1.25, 1,0, 1.25 ,-1    },
{345, 1   ,1.25, 1.25,1.5 , 1,0, 1.25 ,-1    },
{346, 1   ,1.5 , 1.25,0.5 , 1,1, 1.5  , 1.125},
{347, 1   ,1.5 , 1.25,0.75, 1,1, 1.5  , 7/6  },
{348, 1   ,1.5 , 1.25,1   , 1,1, 1.5  , 1.25 },
{349, 1   ,1.5 , 1.25,1.25, 1,0, 1.5  ,-1    },
{350, 1   ,1.5 , 1.25,1.5 , 1,0, 1.5  ,-1    },
{351, 1   ,0.5 , 1.5 ,0.5 , 1,0, 0.5  ,-1    },
{352, 1   ,0.5 , 1.5 ,0.75, 1,0, 0.5  ,-1    },
{353, 1   ,0.5 , 1.5 ,1   , 1,0, 0.5  ,-1    },
{354, 1   ,0.5 , 1.5 ,1.25, 1,1, 0.5  , 4/3  },
{355, 1   ,0.5 , 1.5 ,1.5 , 1,1, 0.5  , 1.25 },
{356, 1   ,0.75, 1.5 ,0.5 , 1,0, 0.75 ,-1    },
{357, 1   ,0.75, 1.5 ,0.75, 1,0, 0.75 ,-1    },
{358, 1   ,0.75, 1.5 ,1   , 1,0, 0.75 ,-1    },
{359, 1   ,0.75, 1.5 ,1.25, 1,1, 0.75 , 1.25 },
{360, 1   ,0.75, 1.5 ,1.5 , 1,1, 0.75 , 7/6  },
{361, 1   ,1   , 1.5 ,0.5 , 1,0, 1    ,-1    },
{362, 1   ,1   , 1.5 ,0.75, 1,0, 1    ,-1    },
{363, 1   ,1   , 1.5 ,1   , 1,0, 1    ,-1    },
{364, 1   ,1   , 1.5 ,1.25, 1,1, 1    , 1    },
{365, 1   ,1   , 1.5 ,1.5 , 1,1, 1    , 1    },
{366, 1   ,1.25, 1.5 ,0.5 , 1,1, 1.25 , 7/6  },
{367, 1   ,1.25, 1.5 ,0.75, 1,1, 1.25 , 1.25 },
{368, 1   ,1.25, 1.5 ,1   , 1,1, 1.25 , 1.5  },
{369, 1   ,1.25, 1.5 ,1.25, 1,0, 1.25 ,-1    },
{370, 1   ,1.25, 1.5 ,1.5 , 1,0, 1.25 ,-1    },
{371, 1   ,1.5 , 1.5 ,0.5 , 1,1, 1.5  , 1.25 },
{372, 1   ,1.5 , 1.5 ,0.75, 1,1, 1.5  , 4/3  },
{373, 1   ,1.5 , 1.5 ,1   , 1,1, 1.5  , 1.5  },
{374, 1   ,1.5 , 1.5 ,1.25, 1,0, 1.5  ,-1    },
{375, 1   ,1.5 , 1.5 ,1.5 , 1,0, 1.5  ,-1    },
{376, 1.25,0.5 , 0.5 ,0.5 , 1,0, 0.5  ,-1    },
{377, 1.25,0.5 , 0.5 ,0.75, 1,0, 7/12 ,-1    },
{378, 1.25,0.5 , 0.5 ,1   , 1,0, 2/3  ,-1    },
{379, 1.25,0.5 , 0.5 ,1.25, 1,1, 0.75 , 0.75 },
{380, 1.25,0.5 , 0.5 ,1.5 , 1,1, f56  , 0.875},
{381, 1.25,0.75, 0.5 ,0.5 , 1,0, 2/3  ,-1    },
{382, 1.25,0.75, 0.5 ,0.75, 1,0, 0.75 ,-1    },
{383, 1.25,0.75, 0.5 ,1   , 1,0, 5/6  ,-1    },
{384, 1.25,0.75, 0.5 ,1.25, 1,1, 11/12, 0.875},
{385, 1.25,0.75, 0.5 ,1.5 , 1,1, 1    , 1    },
{386, 1.25,1   , 0.5 ,0.5 , 1,0, 5/6  ,-1    },
{387, 1.25,1   , 0.5 ,0.75, 1,0, 11/12,-1    },
{388, 1.25,1   , 0.5 ,1   , 1,0, 1    ,-1    },
{389, 1.25,1   , 0.5 ,1.25, 1,1, 13/12, 1.25 },
{390, 1.25,1   , 0.5 ,1.5 , 1,1, 7/6  , 1.25 },
{391, 1.25,1.25, 0.5 ,0.5 , 1,1, 1    , 1    },
{392, 1.25,1.25, 0.5 ,0.75, 1,1, 13/12, 0.875},
{393, 1.25,1.25, 0.5 ,1   , 1,1, 7/6  , 0.5  },
{394, 1.25,1.25, 0.5 ,1.25, 1,0, 1.25 ,-1    },
{395, 1.25,1.25, 0.5 ,1.5 , 1,0, 4/3  ,-1    },
{396, 1.25,1.5 , 0.5 ,0.5 , 1,1, 7/6  , 0.875},
{397, 1.25,1.5 , 0.5 ,0.75, 1,1, 1.25 , 0.75 },
{398, 1.25,1.5 , 0.5 ,1   , 1,1, 4/3  , 0.5  },
{399, 1.25,1.5 , 0.5 ,1.25, 1,0, 17/12,-1    },
{400, 1.25,1.5 , 0.5 ,1.5 , 1,0, 1.5  ,-1    },
{401, 1.25,0.5 , 0.75,0.5 , 1,0, 0.5  ,-1    },
{402, 1.25,0.5 , 0.75,0.75, 1,0, 0.625,-1    },
{403, 1.25,0.5 , 0.75,1   , 1,0, 0.75 ,-1    },
{404, 1.25,0.5 , 0.75,1.25, 1,1, 0.875, f1112},
{405, 1.25,0.5 , 0.75,1.5 , 1,1, 1    , 1    },
{406, 1.25,0.75, 0.75,0.5 , 1,0, 0.625,-1    },
{407, 1.25,0.75, 0.75,0.75, 1,0, 0.75 ,-1    },
{408, 1.25,0.75, 0.75,1   , 1,0, 0.875,-1    },
{409, 1.25,0.75, 0.75,1.25, 1,1, 1    , 1    },
{410, 1.25,0.75, 0.75,1.5 , 1,1, 1.125, 13/12},
{411, 1.25,1   , 0.75,0.5 , 1,0, 0.75 ,-1    },
{412, 1.25,1   , 0.75,0.75, 1,0, 0.875,-1    },
{413, 1.25,1   , 0.75,1   , 1,0, 1    ,-1    },
{414, 1.25,1   , 0.75,1.25, 1,1, 1.125, 1.25 },
{415, 1.25,1   , 0.75,1.5 , 1,1, 1.25 , 1.25 },
{416, 1.25,1.25, 0.75,0.5 , 1,1, 0.875, 13/12},
{417, 1.25,1.25, 0.75,0.75, 1,1, 1    , 1    },
{418, 1.25,1.25, 0.75,1   , 1,1, 1.125, 0.75 },
{419, 1.25,1.25, 0.75,1.25, 1,0, 1.25 ,-1    },
{420, 1.25,1.25, 0.75,1.5 , 1,0, 1.375,-1    },
{421, 1.25,1.5 , 0.75,0.5 , 1,1, 1    , 1    },
{422, 1.25,1.5 , 0.75,0.75, 1,1, 1.125, f1112},
{423, 1.25,1.5 , 0.75,1   , 1,1, 1.25 , 0.75 },
{424, 1.25,1.5 , 0.75,1.25, 1,0, 1.375,-1    },
{425, 1.25,1.5 , 0.75,1.5 , 1,0, 1.5  ,-1    },
{426, 1.25,0.5 , 1   ,0.5 , 1,0, 0.5  ,-1    },
{427, 1.25,0.5 , 1   ,0.75, 1,0, 0.75 ,-1    },
{428, 1.25,0.5 , 1   ,1   , 1,0, 1    ,-1    },
{429, 1.25,0.5 , 1   ,1.25, 1,1, 1.25 , 13/12},
{430, 1.25,0.5 , 1   ,1.5 , 1,1, 1.5  , 1.125},
{431, 1.25,0.75, 1   ,0.5 , 1,0, 0.5  ,-1    },
{432, 1.25,0.75, 1   ,0.75, 1,0, 0.75 ,-1    },
{433, 1.25,0.75, 1   ,1   , 1,0, 1    ,-1    },
{434, 1.25,0.75, 1   ,1.25, 1,1, 1.25 , 1.125},
{435, 1.25,0.75, 1   ,1.5 , 1,1, 1.5  , 7/6  },
{436, 1.25,1   , 1   ,0.5 , 1,0, 0.5  ,-1    },
{437, 1.25,1   , 1   ,0.75, 1,0, 0.75 ,-1    },
{438, 1.25,1   , 1   ,1   , 1,0, 1    ,-1    },
{439, 1.25,1   , 1   ,1.25, 1,1, 1.25 , 1.25 },
{440, 1.25,1   , 1   ,1.5 , 1,1, 1.5  , 1.25 },
{441, 1.25,1.25, 1   ,0.5 , 1,1, 0.5  , 7/6  },
{442, 1.25,1.25, 1   ,0.75, 1,1, 0.75 , 1.125},
{443, 1.25,1.25, 1   ,1   , 1,1, 1    , 1    },
{444, 1.25,1.25, 1   ,1.25, 1,0, 1.25 ,-1    },
{445, 1.25,1.25, 1   ,1.5 , 1,0, 1.5  ,-1    },
{446, 1.25,1.5 , 1   ,0.5 , 1,1, 0.5  , 1.125},
{447, 1.25,1.5 , 1   ,0.75, 1,1, 0.75 , 13/12},
{448, 1.25,1.5 , 1   ,1   , 1,1, 1    , 1    },
{449, 1.25,1.5 , 1   ,1.25, 1,0, 1.25 ,-1    },
{450, 1.25,1.5 , 1   ,1.5 , 1,0, 1.5  ,-1    },
{451, 1.25,0.5 , 1.25,0.5 , 0,0,-1    ,-1    },
{452, 1.25,0.5 , 1.25,0.75, 0,0,-1    ,-1    },
{453, 1.25,0.5 , 1.25,1   , 0,0,-1    ,-1    },
{454, 1.25,0.5 , 1.25,1.25, 0,1,-1    , 1.25 },
{455, 1.25,0.5 , 1.25,1.5 , 0,1,-1    , 1.25 },
{456, 1.25,0.75, 1.25,0.5 , 0,0,-1    ,-1    },
{457, 1.25,0.75, 1.25,0.75, 0,0,-1    ,-1    },
{458, 1.25,0.75, 1.25,1   , 0,0,-1    ,-1    },
{459, 1.25,0.75, 1.25,1.25, 0,1,-1    , 1.25 },
{460, 1.25,0.75, 1.25,1.5 , 0,1,-1    , 1.25 },
{461, 1.25,1   , 1.25,0.5 , 0,0,-1    ,-1    },
{462, 1.25,1   , 1.25,0.75, 0,0,-1    ,-1    },
{463, 1.25,1   , 1.25,1   , 0,0,-1    ,-1    },
{464, 1.25,1   , 1.25,1.25, 0,1,-1    , 1.25 },
{465, 1.25,1   , 1.25,1.5 , 0,1,-1    , 1.25 },
{466, 1.25,1.25, 1.25,0.5 , 0,1,-1    , 1.25 },
{467, 1.25,1.25, 1.25,0.75, 0,1,-1    , 1.25 },
{468, 1.25,1.25, 1.25,1   , 0,1,-1    , 1.25 },
{469, 1.25,1.25, 1.25,1.25, 0,0,-1    ,-1    },
{470, 1.25,1.25, 1.25,1.5 , 0,0,-1    ,-1    },
{471, 1.25,1.5 , 1.25,0.5 , 0,1,-1    , 1.25 },
{472, 1.25,1.5 , 1.25,0.75, 0,1,-1    , 1.25 },
{473, 1.25,1.5 , 1.25,1   , 0,1,-1    , 1.25 },
{474, 1.25,1.5 , 1.25,1.25, 0,0,-1    ,-1    },
{475, 1.25,1.5 , 1.25,1.5 , 0,0,-1    ,-1    },
{476, 1.25,0.5 , 1.5 ,0.5 , 0,0,-1    ,-1    },
{477, 1.25,0.5 , 1.5 ,0.75, 0,0,-1    ,-1    },
{478, 1.25,0.5 , 1.5 ,1   , 0,0,-1    ,-1    },
{479, 1.25,0.5 , 1.5 ,1.25, 0,1,-1    , 17/12},
{480, 1.25,0.5 , 1.5 ,1.5 , 0,1,-1    , 1.375},
{481, 1.25,0.75, 1.5 ,0.5 , 0,0,-1    ,-1    },
{482, 1.25,0.75, 1.5 ,0.75, 0,0,-1    ,-1    },
{483, 1.25,0.75, 1.5 ,1   , 0,0,-1    ,-1    },
{484, 1.25,0.75, 1.5 ,1.25, 0,1,-1    , 1.375},
{485, 1.25,0.75, 1.5 ,1.5 , 0,1,-1    , 4/3  },
{486, 1.25,1   , 1.5 ,0.5 , 0,0,-1    ,-1    },
{487, 1.25,1   , 1.5 ,0.75, 0,0,-1    ,-1    },
{488, 1.25,1   , 1.5 ,1   , 0,0,-1    ,-1    },
{489, 1.25,1   , 1.5 ,1.25, 0,1,-1    , 1.25 },
{490, 1.25,1   , 1.5 ,1.5 , 0,1,-1    , 1.25 },
{491, 1.25,1.25, 1.5 ,0.5 , 0,1,-1    , 4/3  },
{492, 1.25,1.25, 1.5 ,0.75, 0,1,-1    , 1.375},
{493, 1.25,1.25, 1.5 ,1   , 0,1,-1    , 1.5  },
{494, 1.25,1.25, 1.5 ,1.25, 0,0,-1    ,-1    },
{495, 1.25,1.25, 1.5 ,1.5 , 0,0,-1    ,-1    },
{496, 1.25,1.5 , 1.5 ,0.5 , 0,1,-1    , 1.375},
{497, 1.25,1.5 , 1.5 ,0.75, 0,1,-1    , 17/12},
{498, 1.25,1.5 , 1.5 ,1   , 0,1,-1    , 1.5  },
{499, 1.25,1.5 , 1.5 ,1.25, 0,0,-1    ,-1    },
{500, 1.25,1.5 , 1.5 ,1.5 , 0,0,-1    ,-1    },
{501, 1.5 ,0.5 , 0.5 ,0.5 , 1,0, 0.5  ,-1    },
{502, 1.5 ,0.5 , 0.5 ,0.75, 1,0, 0.625,-1    },
{503, 1.5 ,0.5 , 0.5 ,1   , 1,0, 0.75 ,-1    },
{504, 1.5 ,0.5 , 0.5 ,1.25, 1,1, 0.875, 5/6  },
{505, 1.5 ,0.5 , 0.5 ,1.5 , 1,1, 1    , 1    },
{506, 1.5 ,0.75, 0.5 ,0.5 , 1,0, 0.625,-1    },
{507, 1.5 ,0.75, 0.5 ,0.75, 1,0, 0.75 ,-1    },
{508, 1.5 ,0.75, 0.5 ,1   , 1,0, 0.875,-1    },
{509, 1.5 ,0.75, 0.5 ,1.25, 1,1, 1    , 1    },
{510, 1.5 ,0.75, 0.5 ,1.5 , 1,1, 1.125, 7/6  },
{511, 1.5 ,1   , 0.5 ,0.5 , 1,0, 0.75 ,-1    },
{512, 1.5 ,1   , 0.5 ,0.75, 1,0, 0.875,-1    },
{513, 1.5 ,1   , 0.5 ,1   , 1,0, 1    ,-1    },
{514, 1.5 ,1   , 0.5 ,1.25, 1,1, 1.125, 1.5  },
{515, 1.5 ,1   , 0.5 ,1.5 , 1,1, 1.25 , 1.5  },
{516, 1.5 ,1.25, 0.5 ,0.5 , 1,1, 0.875, 7/6  },
{517, 1.5 ,1.25, 0.5 ,0.75, 1,1, 1    , 1    },
{518, 1.5 ,1.25, 0.5 ,1   , 1,1, 1.125, 0.5  },
{519, 1.5 ,1.25, 0.5 ,1.25, 1,0, 1.25 ,-1    },
{520, 1.5 ,1.25, 0.5 ,1.5 , 1,0, 1.375,-1    },
{521, 1.5 ,1.5 , 0.5 ,0.5 , 1,1, 1    , 1    },
{522, 1.5 ,1.5 , 0.5 ,0.75, 1,1, 1.125, 5/6  },
{523, 1.5 ,1.5 , 0.5 ,1   , 1,1, 1.25 , 0.5  },
{524, 1.5 ,1.5 , 0.5 ,1.25, 1,0, 1.375,-1    },
{525, 1.5 ,1.5 , 0.5 ,1.5 , 1,0, 1.5  ,-1    },
{526, 1.5 ,0.5 , 0.75,0.5 , 1,0, 0.5  ,-1    },
{527, 1.5 ,0.5 , 0.75,0.75, 1,0, 2/3  ,-1    },
{528, 1.5 ,0.5 , 0.75,1   , 1,0, f56  ,-1    },
{529, 1.5 ,0.5 , 0.75,1.25, 1,1, 1    , 1    },
{530, 1.5 ,0.5 , 0.75,1.5 , 1,1, f76  , 1.125},
{531, 1.5 ,0.75, 0.75,0.5 , 1,0, 7/12 ,-1    },
{532, 1.5 ,0.75, 0.75,0.75, 1,0, 0.75 ,-1    },
{533, 1.5 ,0.75, 0.75,1   , 1,0, 11/12,-1    },
{534, 1.5 ,0.75, 0.75,1.25, 1,1, 13/12, 1.125},
{535, 1.5 ,0.75, 0.75,1.5 , 1,1, 1.25 , 1.25 },
{536, 1.5 ,1   , 0.75,0.5 , 1,0, g23  ,-1    },
{537, 1.5 ,1   , 0.75,0.75, 1,0, 5/6  ,-1    },
{538, 1.5 ,1   , 0.75,1   , 1,0, 1    ,-1    },
{539, 1.5 ,1   , 0.75,1.25, 1,1, 7/6  , 1.5  },
{540, 1.5 ,1   , 0.75,1.5 , 1,1, 4/3  , 1.5  },
{541, 1.5 ,1.25, 0.75,0.5 , 1,1, 0.75 , 1.25 },
{542, 1.5 ,1.25, 0.75,0.75, 1,1, f1112, 1.125},
{543, 1.5 ,1.25, 0.75,1   , 1,1, 13/12, 0.75 },
{544, 1.5 ,1.25, 0.75,1.25, 1,0, 1.25 ,-1    },
{545, 1.5 ,1.25, 0.75,1.5 , 1,0, 17/12,-1    },
{546, 1.5 ,1.5 , 0.75,0.5 , 1,1, 5/6  , 1.125},
{547, 1.5 ,1.5 , 0.75,0.75, 1,1, 1    , 1    },
{548, 1.5 ,1.5 , 0.75,1   , 1,1, 7/6  , 0.75 },
{549, 1.5 ,1.5 , 0.75,1.25, 1,0, 4/3  ,-1    },
{550, 1.5 ,1.5 , 0.75,1.5 , 1,0, 1.5  ,-1    },
{551, 1.5 ,0.5 , 1   ,0.5 , 1,0, 0.5  ,-1    },
{552, 1.5 ,0.5 , 1   ,0.75, 1,0, 0.75 ,-1    },
{553, 1.5 ,0.5 , 1   ,1   , 1,0, 1    ,-1    },
{554, 1.5 ,0.5 , 1   ,1.25, 1,1, 1.25 , 7/6  },
{555, 1.5 ,0.5 , 1   ,1.5 , 1,1, 1.5  , 1.25 },
{556, 1.5 ,0.75, 1   ,0.5 , 1,0, 0.5  ,-1    },
{557, 1.5 ,0.75, 1   ,0.75, 1,0, 0.75 ,-1    },
{558, 1.5 ,0.75, 1   ,1   , 1,0, 1    ,-1    },
{559, 1.5 ,0.75, 1   ,1.25, 1,1, 1.25 , 1.25 },
{560, 1.5 ,0.75, 1   ,1.5 , 1,1, 1.5  , 4/3  },
{561, 1.5 ,1   , 1   ,0.5 , 1,0, 0.5  ,-1    },
{562, 1.5 ,1   , 1   ,0.75, 1,0, 0.75 ,-1    },
{563, 1.5 ,1   , 1   ,1   , 1,0, 1    ,-1    },
{564, 1.5 ,1   , 1   ,1.25, 1,1, 1.25 , 1.5  },
{565, 1.5 ,1   , 1   ,1.5 , 1,1, 1.5  , 1.5  },
{566, 1.5 ,1.25, 1   ,0.5 , 1,1, 0.5  , 4/3  },
{567, 1.5 ,1.25, 1   ,0.75, 1,1, 0.75 , 1.25 },
{568, 1.5 ,1.25, 1   ,1   , 1,1, 1    , 1    },
{569, 1.5 ,1.25, 1   ,1.25, 1,0, 1.25 ,-1    },
{570, 1.5 ,1.25, 1   ,1.5 , 1,0, 1.5  ,-1    },
{571, 1.5 ,1.5 , 1   ,0.5 , 1,1, 0.5  , 1.25 },
{572, 1.5 ,1.5 , 1   ,0.75, 1,1, 0.75 , 7/6  },
{573, 1.5 ,1.5 , 1   ,1   , 1,1, 1    , 1    },
{574, 1.5 ,1.5 , 1   ,1.25, 1,0, 1.25 ,-1    },
{575, 1.5 ,1.5 , 1   ,1.5 , 1,0, 1.5  ,-1    },
{576, 1.5 ,0.5 , 1.25,0.5 , 0,0,-1    ,-1    },
{577, 1.5 ,0.5 , 1.25,0.75, 0,0,-1    ,-1    },
{578, 1.5 ,0.5 , 1.25,1   , 0,0,-1    ,-1    },
{579, 1.5 ,0.5 , 1.25,1.25, 0,1,-1    , 4/3  },
{580, 1.5 ,0.5 , 1.25,1.5 , 0,1,-1    , 1.375},
{581, 1.5 ,0.75, 1.25,0.5 , 0,0,-1    ,-1    },
{582, 1.5 ,0.75, 1.25,0.75, 0,0,-1    ,-1    },
{583, 1.5 ,0.75, 1.25,1   , 0,0,-1    ,-1    },
{584, 1.5 ,0.75, 1.25,1.25, 0,1,-1    , 1.375},
{585, 1.5 ,0.75, 1.25,1.5 , 0,1,-1    , 17/12},
{586, 1.5 ,1   , 1.25,0.5 , 0,0,-1    ,-1    },
{587, 1.5 ,1   , 1.25,0.75, 0,0,-1    ,-1    },
{588, 1.5 ,1   , 1.25,1   , 0,0,-1    ,-1    },
{589, 1.5 ,1   , 1.25,1.25, 0,1,-1    , 1.5  },
{590, 1.5 ,1   , 1.25,1.5 , 0,1,-1    , 1.5  },
{591, 1.5 ,1.25, 1.25,0.5 , 0,1,-1    , 17/12},
{592, 1.5 ,1.25, 1.25,0.75, 0,1,-1    , 1.375},
{593, 1.5 ,1.25, 1.25,1   , 0,1,-1    , 1.25 },
{594, 1.5 ,1.25, 1.25,1.25, 0,0,-1    ,-1    },
{595, 1.5 ,1.25, 1.25,1.5 , 0,0,-1    ,-1    },
{596, 1.5 ,1.5 , 1.25,0.5 , 0,1,-1    , 1.375},
{597, 1.5 ,1.5 , 1.25,0.75, 0,1,-1    , 4/3  },
{598, 1.5 ,1.5 , 1.25,1   , 0,1,-1    , 1.25 },
{599, 1.5 ,1.5 , 1.25,1.25, 0,0,-1    ,-1    },
{600, 1.5 ,1.5 , 1.25,1.5 , 0,0,-1    ,-1    },
{601, 1.5 ,0.5 , 1.5 ,0.5 , 0,0,-1    ,-1    },
{602, 1.5 ,0.5 , 1.5 ,0.75, 0,0,-1    ,-1    },
{603, 1.5 ,0.5 , 1.5 ,1   , 0,0,-1    ,-1    },
{604, 1.5 ,0.5 , 1.5 ,1.25, 0,1,-1    , 1.5  },
{605, 1.5 ,0.5 , 1.5 ,1.5 , 0,1,-1    , 1.5  },
{606, 1.5 ,0.75, 1.5 ,0.5 , 0,0,-1    ,-1    },
{607, 1.5 ,0.75, 1.5 ,0.75, 0,0,-1    ,-1    },
{608, 1.5 ,0.75, 1.5 ,1   , 0,0,-1    ,-1    },
{609, 1.5 ,0.75, 1.5 ,1.25, 0,1,-1    , 1.5  },
{610, 1.5 ,0.75, 1.5 ,1.5 , 0,1,-1    , 1.5  },
{611, 1.5 ,1   , 1.5 ,0.5 , 0,0,-1    ,-1    },
{612, 1.5 ,1   , 1.5 ,0.75, 0,0,-1    ,-1    },
{613, 1.5 ,1   , 1.5 ,1   , 0,0,-1    ,-1    },
{614, 1.5 ,1   , 1.5 ,1.25, 0,1,-1    , 1.5  },
{615, 1.5 ,1   , 1.5 ,1.5 , 0,1,-1    , 1.5  },
{616, 1.5 ,1.25, 1.5 ,0.5 , 0,1,-1    , 1.5  },
{617, 1.5 ,1.25, 1.5 ,0.75, 0,1,-1    , 1.5  },
{618, 1.5 ,1.25, 1.5 ,1   , 0,1,-1    , 1.5  },
{619, 1.5 ,1.25, 1.5 ,1.25, 0,0,-1    ,-1    },
{620, 1.5 ,1.25, 1.5 ,1.5 , 0,0,-1    ,-1    },
{621, 1.5 ,1.5 , 1.5 ,0.5 , 0,1,-1    , 1.5  },
{622, 1.5 ,1.5 , 1.5 ,0.75, 0,1,-1    , 1.5  },
{623, 1.5 ,1.5 , 1.5 ,1   , 0,1,-1    , 1.5  },
{624, 1.5 ,1.5 , 1.5 ,1.25, 0,0,-1    ,-1    },
{625, 1.5 ,1.5 , 1.5 ,1.5 , 0,0,-1    ,-1    },
}
--with trace
----trace(1)
--string t = sprintf("%+.3F",0.625),
--     u = sprintf("%_.3F",0.625)
------trace(0)
--?t
--?u
----wait_key()
--/*
>>>
--*/
if 01 then
for x1 in {0.5,0.75,1,1.25,1.5} do
 for x2 in {0.5,0.75,1,1.25,1.5} do
--  if x2!=x1 then
   for y1 in {0.5,0.75,1,1.25,1.5} do
    for y2 in {0.5,0.75,1,1.25,1.5} do
--   if y2!=y1 then
-- cx, cy, ix, iy
--      bool cx = (integer(x1) or integer(x2) or ceil(x1)!=ceil(x2)),
--           cy = (integer(y1) or integer(y2) or ceil(y1)!=ceil(y2))
--      atom minx = min(x1,x2),
--           maxx = max(x1,x2),
--           miny = min(y1,y2),
--           maxy = max(y1,y2)
--      atom dx = maxx-minx,
--           dy = maxy-miny
--      atom slope = (y2 - y1) / (x2 - x1)
--      bool cx = ceil(minx)!=ceil(maxx),
--           cy = ceil(miny)!=ceil(maxy)
--      bool cx = ceil(min(x1,x2))!=ceil(max(x1,x2)),
--           cy = ceil(min(y1,y2))!=ceil(max(y1,y2))
        bool cx = ceil(x1)!=ceil(x2),
             cy = ceil(y1)!=ceil(y2)

        atom dx = x2-x1,
             dy = y2-y1

        atom ix = iff(cx?y1 + dy/dx*(floor(max(x1,x2))-x1):-1),
             iy = iff(cy?x1 + dx/dy*(floor(max(y1,y2))-y1):-1)
--      atom ix = -1, iy = -1
--      if cx then
--          ix = iff(dy?x1 + (y1-floor(y1))*dx/dy:x1)
--          ix = miny + dy*(ceil(minx)-minx)/dx
--          ix = y1 + (y2-y1)*(ceil(minx)-minx)/dx
--          ix = y1 + slope*(floor(maxx)-x1)
--          ix = y1 + (y2-y1)/(x2-x1)*(floor(maxx)-x1)
--          ix = y1 + (y2-y1)/(x2-x1)*(floor(max(x1,x2))-x1)
--          ix = y1 + dy/dx*(floor(max(x1,x2))-x1)
--      end if
--      if cy then
--          iy = iff(dx?y1 + (x1-floor(x1))*dy/dx:y1)
--          iy = iff(dx?y1 + (x2-x1)*dy/dx:y1)
--          iy = iff(dx?y1 + (floor(max(x1,x2)-min(x1,x2))*dy/dx:y1)
--          iy = y1 + iff(dx?floor(maxx-minx)*dy/dx:0)
--          iy = minx + dx*(ceil(miny)-miny)/dy
--          iy = x1 + (x2-x1)*(ceil(miny)-miny)/dy
--          iy = x1 + (x2-x1)*(floor(maxy)-y1)/(y2-y1)
--          iy = x1 + (x2-x1)*(floor(max(y1,y2))-y1)/(y2-y1)
--          iy = x1 + dx/dy*(floor(max(y1,y2))-y1)
--      end if
count += 1
        sequence res = {count,x1,y1,x2,y2,cx,cy,ix,iy}, ec = er[count]
        printf(1,"{%3d, %.2F,%.2F, %.2F,%.2F, %d,%d,%_.3F,%_.3F},\n",res)
--if count>length(er) or er[count]!=res then ?res & {{dx,dy}} wait_key() end if
if ec!=res then
--if false then
--  ?{ec,{dx,dy},sq_sub(ec,res)}
    ?{ec,sq_sub(ec,res)}
--?{iy,ec[$],iy-ec[$],iy-0.8333333333333333}
    if wait_key()='!' then ?9/0 end if
end if
--if (count>length(er) or er[count]!=res) and count>50 then wait_key() end if
--   end if
    end for
   end for
--  end if
 end for
end for
?count -- 400 = 20*20
end if
--*/

