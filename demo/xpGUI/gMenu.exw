--
--  demo\xpGUI\gMenu.exw
--  ====================
--
--   Creates a dialog with a menu with three submenus, and a popup menu.
--   One of the submenus has a submenu, which has another submenu.
--
-- working notes:
-- see file:///E:/downloads/misc/js/vanillajs/menu/fixed-header-with-responsive-drop-down-sliding-menu/dist/index.html
-- gMenu not defined [FIXED, the above has now been incorporated into pGUI.js and pGUI.css]
-- gShow[with bModal:=true] not defined
-- Once Shift+Alt is keyed, cursor keys should do something...
-- Menu actions are not yet invoked... [FIXED]
-- resize problems galore...
--
with javascript_semantics -- (some problems remain as noted above)
--requires("1.0.3")
--requires(64,true)
with trace
include xpGUI.e
--gUseGTK()

constant POPUP_ITEMS = {{"Cut",CUT:=$},
                        {"Copy",COPY:=$},
                        {"Paste",PASTE:=$},
                        {"Delete",DELETE:=$},
                        "|",
                        {"Reload",RELOAD:=$},
                        "-",
                        {"Exit",EXIT:=$}},

         MAIN_MENU = {{"&File",{{"&New",NEW:=$},
                                {"&Open",OPEN:=$},
                                {"&ReOpen",REOPEN:=$},
                                {"&Save",SAVE:=$},
                                {"Save&As",SAVEAS:=$},
                                {"FileLis&t",FILELIST:=$},
                                {"&Close",CLOSE:=$},
                                "|",
                                {"PrintPre&view",PREVIEW:=$},
                                {"&Print",PRINT:=$},
                                "|",
                                {"Recent&Files",RECENT:=$,{}},
                                {"E&xit",EXIT}}},
                      {"&Edit",EDIT_MENU:=$, -- (optional id)
                               {{"Copy",COPY},
                                {"Paste",PASTE,{{"Normal",NORMAL:=$},
                                          {"html-stripped",STRIPPED:=$}}},
                                "|",
                                {"Create",{{"Line",LINE:=$},
                                           {"?Circle",{{"?Normal",NORMALC:=$},
                                                       {"?Dotted",DOTTEDC:=$},
                                                       "|",
                                                       {"?Filled",FILLEDC:=$}}},
                                           "|",
                                           {"Triangle",{{"Equilateral",EQUILATERAL:=$},
                                                        {"Isoceles",ISOCELES:=$},
                                                        {"Scalenus",SCALENUS:=$}}}}}}},
                      {"&Help",HELP:=$}}

-- Each entry is one of {string menu_item, integer id} for a "leaf" menu entry, or 
--  any of "|","-",'|','-' for a separator (which are all treated identically), or 
-- {string submenu, [integer id,] sequence children}, and obviously with children following the same rules.
--
-- There is no id on the &File menu, so you cannot enable/disable it, and won't be notified when it opens and closes.
--  (Likewise the Paste, Create, Circle, and Triangle sub-menus don't ever get any notifications, of any kind.)
-- It would also not be possible to set/get the checked status, except for the two facts that you cannot have such
--  on a [sub]menu, only menu items, and also it is an outright error not to have an id on "leaf" items anyway.
--
-- The '?' of "?Normal" makes that menu item checkable, but influenced by similar on the immediate parent submenu.
-- The '?' of "?Circle" makes the submenu items into a radio, which ends if any separator is found, so "?Filled" is a
--  separate standalone checked menu item. (Max 1 radio grouping per [sub]menu, must precede any checked items.)
--
-- Images must be set separately, and for that you would (again) need a (unique-per-gMenu-call/result) id set on
--  any menu entries that you want to set an image on...
--

-- Aside: this handler is shared by POPUP_ITEMS and MAIN_MENU, which might not always be the best idea, and
--        it would certainly be entirely the programmer's responsibility to ensure that, say, NEW != CUT.

function menu_handler(gdx menu, integer id, bool bHighlight)
--function menu_handler(gdx menu, integer id)
    string s = gMenuGetAttribute(menu,id,"TITLE"),
           h = iff(bHighlight?" (highlight)":
               iff(not find(id,{NORMALC,DOTTEDC,FILLEDC})?"":
               iff(gMenuGetAttribute(menu,id,"CHECKED")?" (Checked)":" (unchecked)")))
    printf(1,"%s%s (menu=%d, id=%d)\n",{s,h,menu,id})
    if id=CLOSE and not bHighlight then
--      integer mitem = EDIT_MENU
--      integer mitem = OPEN
        integer mitem = PASTE
        bool bActive = gMenuGetAttribute(menu,mitem,"ACTIVE")
--?{"CLOSE:",bActive,CLOSE,EDIT_MENU}
        gMenuSetAttribute(menu,mitem,"ACTIVE",not bActive)
    end if
    return iff(id=EXIT and not bHighlight?XPG_CLOSE:XPG_DEFAULT)
end function

gdx menu = gMenu(MAIN_MENU,menu_handler),
    text = gText(`VALUE = "Right click here for a Cut Copy Paste Delete Reload Exit popup", EXPAND = YES`),
    txt2 = gText(`VALUE = "Right click here for a different menu popup", EXPAND = YES`),
    popup_menus = {NULL,NULL}

function text_click(gdx id, sequence status, integer x, y)
    if status[1..2]="RR" then -- (right button released)
        integer tn = find(id,{text,txt2})
--DEV temp (right click not yet working on a gText...)
if tn=0 then tn=rand(2) end if
        if popup_menus[tn] = NULL then
            popup_menus[tn] = gMenu({POPUP_ITEMS,MAIN_MENU}[tn],menu_handler)
--DEV bRadio...
--          popup_menus[tn] = gMenu({POPUP_ITEMS,MAIN_MENU}[tn],menu_handler,tn=1)
        end if  
--DEV
--      gShow[with bModal:=true](popup_menu, XPG_MOUSEPOS, XPG_MOUSEPOS)
--?{"gPopupMenu",tn}
--      gPopupMenu(popup_menus[tn], XPG_MOUSEPOS, XPG_MOUSEPOS)
--      gPopupMenu(popup_menus[tn],x,y) -- (nb these are client offsets...)
--      gPopupMenu(id,popup_menus[tn])
        gPopupMenu(popup_menus[tn])
--?"gShow[with bModal:=true] returns"
        return XPG_IGNORE
    end if
    return XPG_DEFAULT
end function

--function txt2_click(gdx /*id*/, sequence status, integer x, y)
--  if status[1..2]="RR" then -- (right button released)
--      if popup_menu2 = NULL then
--          popup_menu2 = gMenu(MAIN_MENU,menu_handler) -- (a fresh separate copy)
--      end if  
----        gShow[with bModal:=true](popup_menu2, XPG_MOUSEPOS, XPG_MOUSEPOS)
--      gShow(popup_menu2, XPG_MOUSEPOS, XPG_MOUSEPOS)
----?"gShow[with bModal:=true] returns"
--      return XPG_IGNORE
--  end if
--  return XPG_DEFAULT
--end function

--gdx vbox = gVbox({menu,text,txt2}),
--gdx vbox = gVbox({menu}),
gdx vbox = gVbox({menu}),
--   dlg = gDialog(vbox,`TITLE="gSubmenu Example", SIZE[*charsize] = QUARTERxEIGHTH`)
--   dlg = gDialog(vbox,`gSubmenu Example`,`SIZE = QUARTERxEIGHTH`)
--   dlg = gDialog(vbox,`gSubMenu`,`SIZE = 240x80`)
--   dlg = gDialog(vbox,`gMenu`,`SIZE = 240x38`)
--DEV:...
     dlg = gDialog(vbox,`gMenu`,`SIZE=240x120`)
gSetHandler({text,txt2,dlg},"CLICK",text_click)
--gSetHandler(txt2,"CLICK",txt2_click)

--gSetAttributeHandle(dlg,"MENU",menu)
--popup_menu = menu
--gSetAttributeHandle(NULL,?PARENTDIALOG?,dlg)
gShow(dlg)
--?gMenuGetAttribute(menu,COPY,"TITLE")
gMenuSetAttribute(menu,COPY,"TITLE","Mimic")
--?gMenuGetAttribute(menu,COPY,"TITLE")
gMainLoop()

