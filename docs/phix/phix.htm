<!DOCTYPE html>
<html dir="ltr" lang="en">
 <head>
  <title>Introduction</title>
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <link rel="stylesheet" type="text/css" href="Combined.css" />
  <script type="text/javascript" src="Common.js"></script>
 </head>
 <body class="library">
  <div class="bannerfiller">
  </div>
  <div class="banner">
    <br>
    <font style="font:oblique 8em georgia,cursive; color: navy; margin:0 0; padding-left: 15px;">Phix</font>
  </div>
  <div id="page">
   <div id="body">
    <div class="centreheader">
     <h1 style="font:oblique 3em georgia,cursive; color: navy;">The Phix Programming Language Reference Manual</h1>
     <h3>Version 1.0.5</h3>
     <br><br>
    </div>
    <img id="sidebarResize" class="sidebarsizer" src="images/sprites/sidebar.close.png" title="Expand/Shrink" alt="Expand/Shrink" onload="setStart2(this);" onclick="changeImage(this);" />
    <div id="leftNav">
     <div id="tocnav">
      <div class="toclevel0 current" data-toclevel="0">
       <a href="phix.htm">I<b></b>ntroduction</a>
      </div>
      <div class="toclevel1" data-toclevel="1">
       <a href="html/example.htm">E<b></b>xample P<b></b>rogram</a>
      </div>
      <div class="toclevel1" data-toclevel="1">
       <a href="html/installation.htm">I<b></b>nstallation</a>
      </div>
      <div class="toclevel1" data-toclevel="1">
       <a href="html/licence.htm">L<b></b>icence</a>
      </div>
      <div class="toclevel0" data-toclevel="0">
       <a href="html/language.htm">C<b></b>ore L<b></b>anguage</a>
      </div>
      <div class="toclevel0" data-toclevel="0">
       <a href="html/library.htm">L<b></b>ibrary R<b></b>outines</a>
      </div>
      <div class="toclevel0" data-toclevel="0">
       <a href="html/otherlibs.htm">O<b></b>ther L<b></b>ibraries</a>
      </div>
      <div class="toclevel0" data-toclevel="0">
       <a href="html/rectools.htm">R<b></b>ecommended T<b></b>ools</a>
      </div>
      <div class="toclevel0" data-toclevel="0">
       <a href="html/internals.htm">I<b></b>nternals</a>
      </div>
      <div class="toclevel0" data-toclevel="0">
       <a href="html/glossary.htm">G<b></b>lossary</a>
      </div>
      <div class="toclevel0" data-toclevel="0">
       <a href="html/helping_hands.htm">H<b></b>elping h<b></b>ands</a>
      </div>
     </div>
     <div id="toc-resizable-ew" class="toc-resizable-ew"></div>
    </div>
    <div id="content" class="content">
     <div class="topic">
      <h1 class="title">Introduction</h1>
      <div id="mainSection">
<!-- DEV rework this
Why Phix?
There are thousands of programming languages...
Phix has 
A clear, simple, and consistent syntax, along with straightforward human-readable error messages.
A very fast edit/run cycle. Some languages may be a little faster, especially on pointless benchmarks, but
when they have a much slower edit/compile/run cycle (as most do), they //feel// much slower. Besides,
the best of both worlds can be achieved with a little inline assembler or the use of pre-built dll/so.
No operator or builtin overloading. Sure, system level hooks can be neat, but introduce doubt and uncertainty.
Phix code will always do what you think it will, and besides it is not exactly difficult to introduce a shim
such as "procedure my_crash(string msg) loggit(msg) crash(msg) end procedure" and invoke that instead, or even
better give it a name that properly describes what it is or might actually be doing.
Supports functional and object orientated programming paradigms alonside the more traditional imperative style,
but does not force their inappropriate use.
Runs on the traditional desktop (Windows and Linux, 32 and 64 bit), //and// in a web browser (via pwa/p2js).
-->
       Phix has several advantages over other programming languages:
       <ul>
        <li>A remarkably simple, yet flexible and powerful language definition that is easy to learn and use.
        </li>
        <li>A high-performance interpreter/compiler/transpiler much faster than most.
        </li>
        <li>Fully managed dynamic data storage with no requirement to allocate or free memory.
        </li>
        <li>Variables can grow or shrink to any size without any manual housekeeping.
        </li>
        <li>Extensive run-time checking for: out-of-bounds subscripts, uninitialized variables, bad parameter and variable assignments and many more.
            There are no mysterious machine exceptions -- you always get a full English description of any problem that occurs  within your program 
            at run-time, with the exact source line it occurs on, along with a full call-stack listing and a dump of all of your variable values. 
            Programs can be debugged quickly, easily, and more thoroughly.
        </li>
        <li>A source level debugger allows execution of programs line-by-line.
            Tracing can begin (or end) on any line or for any condition, under full programmer control.
        </li>
        <li>A built-in execution profiler identifies which lines of code take up the highest percentage of execution time, or are executed the most often.
        </li>
        <li>Features of the underlying hardware are usually hidden. Programs are not typically aware of word-lengths, bit-representations, byte-order etc.
        </li>
        <li>However, Phix also satisfies anyone with a deeper curiosity. There is no hidden wall between the language and the operating system to fully 
            understand how things actually work. Phix can create low-level listing files which show the exact addresses and assembly instructions generated, 
            and also includes a program (filedump.exw) that shows every bit and byte in full detail (within reason, for example icons and other such data are 
            shown in raw hex), for Windows PE, Linux ELF, and other format files.
        </li>
        <li>Self-hosted so there is no need to know another language, or obtain any other development tools, to enhance or fix the language itself. You can
            easily download, install, and recompile Phix in less than two minutes! (See the short webcast at <a href="javascript:ExternalLink('ext001');" 
            id="ext001" style="color:#9B5565">http://phix.x10.mx/tutorial.php</a>, and also <a href="html/rectools.htm">Recommended Tools</a>.)
        </li>
        <li>Standalone executables can be created simply by adding a "-c" flag to the normal interpret command (or via Ctrl F5 if using Edita). 
            (The detailed assembly listing mentioned above is likewise just a "-d".)
            There are no complicated compiler options to remember and there is no separate linking phase. A simple <a href="format.htm">format</a> directive 
            in the source allows for easy cross-compilation to any other supported system.
        </li>
        <li>Phix programs are naturally generic. The <a href="html/example.htm">example program</a> shows a single routine that will sort any type of data
            -- integers, floating-point numbers, strings etc. Phix achieves many of the benefits of object-oriented programming (which it has too, in an
            entirely optional fashion), yet in a much simpler way.
        </li>
        <li>Phix programs are naturally cross-platform, as long as you are not doing something obviously operating-system-specific such as reading the Windows 
            registry, most programs should run unaltered on Windows, Linux, in a Web Browser [albeit not file i/o etc for the latter], and, hopefully soon, on 
            a Raspberry Pi.
        </li>
        <li>It is <b><i>not</i></b> permitted to override builtins (at least not globally) or (re)define operators in Phix.
            While there are a few neat little tricks that sort of thing can achieve, the mental drain of always having to worry whether some builtin routine 
            or operator is doing what you expect becomes <a href="html/library.htm#bo">significantly reduced</a>, besides the superior and far friendlier 
            compile-time and run-time error messages make modifying several files far less terrifying in Phix than it is in other programming languages.
        </li>
        <li>The Edita programmers editor is freely available, and written in Phix with everything you might expect, including multiple and user-definable 
            syntax colouring, multilingual support, intellisense, autocompletion, code folding, integrated help, window painter, full source code, and more.
        </li>
        <li>Complete with around five hundred<i>(!)</i> demo programs, some of which are trivial learing aids and several dozen of which are production-quality
            full-blown GUI applications. Even wi#th all that, it&rsquo;s still only a 30MB download, with virtually no other dependencies [full disclosure:
            you almost certainly <i>will</i> want IUP on Linux, and maybe twenty-something of those demos do need some other bits &rsquo;n pieces installing].
        </li>
       </ul>
      </div>
     </div>
    </div>
   </div>
   <div class="clear"></div>
  </div>
  <br>
  <br>
 </body>
</html>
