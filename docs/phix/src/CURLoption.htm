<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">CURLoption type</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include builtins\libcurl.e
          <br>
          <br>
          CURLoption
          <i>identifier</i>
          <br>
          <i>-- or --</i>
          <br>
          <a href="integer.htm#bool">bool</a> res = CURLoption(<a href="integer.htm">integer</a> x)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
          options for <a href="curl_easy_setopt.htm">curl_easy_setopt</a>() - note that types below for the third parameter are
          suggestive only; it is of course (always) an <a href="object.htm">object</a>, and certainly, for instance, when this 
          page says string for that argument, an atom char* pointer is just as valid.
          <br>
          <br>
          The options go from 1 to 244 (if you ignore the +k*10000 encoding it uses internally), with several no longer used.
          <br>
          <br>
          The one-liners below with "See CURLOPT_XXX" have <b>not</b> been tested, or properly documented here (which is most of them!).
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          <a href="notpgui.htm"><span class="illegal">Not supported</span></a>.
         </td>
        </tr>
        <tr>
         <td>
          <b>CURLoption</b>
         </td>
         <td>
          A CURLoption is one of the following:
         </td>
        </tr>
        <tr>
         <td>
          <b>BEHAVIOR OPTIONS</b>
         </td>
         <td>
          <small><br><a name="CURLOPT_VERBOSE"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_VERBOSE</small>
         </td>
         <td>
          Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_VERBOSE,
                                                                        <a href="integer.htm#bool">bool</a> onoff)
          <br>
          <br>
            Set verbose mode on/off. The parameter (onoff) should be 0/1 (or false/true). Default 0 (false), meaning disabled.
          <br>
          <br>
            Set the onoff parameter to 1 (true) to make the library display a lot of verbose information about its operations on this handle.
          <br>
            Very useful for libcurl and/or protocol debugging and understanding.
          <br>
            The verbose information will be sent to stderr, or the stream set with CURLOPT_STDERR.
          <br>
          <br>
            You hardly ever want this set in production use, you will almost always want this when you debug/report problems.
          <br>
          <br>
            To also get all the protocol data sent and received, consider using the <a href="#CURLOPT_DEBUGFUNCTION">CURLOPT_DEBUGFUNCTION</a>.
          <br>
          <br>
            Protocols: All
          <br>
          <br>
            See also: CURLOPT_STDERR, <a href="#CURLOPT_DEBUGFUNCTION">CURLOPT_DEBUGFUNCTION</a>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_HEADER</small>
         </td>
         <td>
          Include the header in the body output, aka pass headers to the data stream.
          <br>
          <br>
          Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_HEADER,
                                                                        <a href="integer.htm#bool">bool</a> onoff)
          <br>
          <br>
          Pass true (1) in onoff to ask libcurl to include the headers in the write callback (<a href="#CURLOPT_WRITEFUNCTION">CURLOPT_WRITEFUNCTION</a>). <br>
          This option is relevant for protocols that actually have headers or other meta-data (like HTTP and FTP).
          <br>
          <br>
          When asking to get the headers passed to the same callback as the body, it is not possible to accurately separate 
          them again without detailed knowledge about the protocol in use.
          <br>
          <br>
          Further: the <a href="#CURLOPT_WRITEFUNCTION">CURLOPT_WRITEFUNCTION</a> callback is limited to only ever get a maximum of 
          CURL_MAX_WRITE_SIZE bytes passed to it (16KB), while a header can be longer and the <a href="#CURLOPT_HEADERFUNCTION">CURLOPT_HEADERFUNCTION</a> 
          supports getting called with headers up to CURL_MAX_HTTP_HEADER bytes big (100KB).
          <br>
          <br>
          It is often better to use <a href="#CURLOPT_HEADERFUNCTION">CURLOPT_HEADERFUNCTION</a> to get the header data separately.
          <br>
          <br>
          While named confusingly similar, <a href="#CURLOPT_HTTPHEADER">CURLOPT_HTTPHEADER</a> is used to set custom HTTP headers!
          <br>
          <br>
          Default: 0
          <br>
          <br>
          Protocols: Most
          <br>
          <br>
          Return value (if set with <a href="curl_easy_setopt.htm">curl_easy_setoptf</a>()): CURLE_OK
          <br>
          <br>
          See also:
          <a href="#CURLOPT_HEADERFUNCTION">CURLOPT_HEADERFUNCTION</a>, <a href="#CURLOPT_HTTPHEADER">CURLOPT_HTTPHEADER</a>
          <small><br><a name="CURLOPT_NOPROGRESS"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_NOPROGRESS</small>
         </td>
         <td>
            Shut off or Turn on the progress meter.
          <br>
          <br>
          Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_NOPROGRESS,
                                                                        <a href="integer.htm#bool">bool</a> onoff)
          <br>
          <br>
            If onoff is set to true(1), it tells the library to shut off the progress meter completely for requests done with this handle.
          <br>
            It will also prevent the <a href="#CURLOPT_XFERINFOFUNCTION">CURLOPT_XFERINFOFUNCTION</a> from getting called.
          <br>
          <br>
            Default: true(1), meaning it normally runs without a progress meter.
          <br>
          <br>
            Protocols: All
          <br>
          <br>
            Availability: Always
          <br>
          <br>
            See also: <a href="#CURLOPT_XFERINFOFUNCTION">CURLOPT_XFERINFOFUNCTION</a>,
                      <a href="#CURLOPT_VERBOSE">CURLOPT_VERBOSE</a>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_NOSIGNAL</small>
         </td>
         <td>
            Do not install signal handlers. See CURLOPT_NOSIGNAL
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_WILDCARDMATCH</small>
         </td>
         <td>
            Transfer multiple files according to a file name pattern. See CURLOPT_WILDCARDMATCH
         </td>
        </tr>
        <tr>
         <td>
          <b>CALLBACK OPTIONS</b>
         </td>
         <td>
          <small><br><a name="CURLOPT_WRITEFUNCTION"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_WRITEFUNCTION</small>
         </td>
         <td>
            Callback for writing data.
          <br>
          <br>
            Synopsis/Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-b5aj-4273-937k-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-b5aj-4273-937k-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
include builtins\libcurl.e
 
function write_callback(atom pData, integer size, integer nmemb, atom pUserdata);
integer bytes_written = size*nmemb
    ... peek(pData,bytes_processed) ...
    return bytes_written
end function
constant write_cb = call_back({'+',routine_id("write_callback")})

curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_cb)
</eucode-->
<pre>
<font color="#008080">include</font><font color="#000000"> builtins\libcurl.e</font>
<font color="#C0C0C0"> </font>
<font color="#008080">function</font><font color="#000000"> write_callback</font><font color="#0000FF">(</font><font color="#004080">atom</font><font color="#000000"> pData</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> size</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> nmemb</font><font color="#0000FF">,</font><font color="#004080"> atom</font><font color="#000000"> pUserdata</font><font color="#0000FF">);</font>
<font color="#004080">integer</font><font color="#000000"> bytes_written</font><font color="#0000FF"> =</font><font color="#000000"> size</font><font color="#0000FF">*</font><font color="#000000">nmemb</font>
<font color="#0000FF">    ...</font><font color="#7060A8"> peek</font><font color="#0000FF">(</font><font color="#000000">pData</font><font color="#0000FF">,</font><font color="#000000">bytes_processed</font><font color="#0000FF">) ...</font>
<font color="#008080">    return</font><font color="#000000"> bytes_written</font>
<font color="#008080">end function
constant</font><font color="#000000"> write_cb</font><font color="#0000FF"> =</font><font color="#5E005E"> call_back</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">'+'</font><font color="#0000FF">,</font><font color="#5E005E">routine_id</font><font color="#800080">(</font><font color="#008000">"write_callback"</font><font color="#800080">)</font><font color="#800000">}</font><font color="#0000FF">)
</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_WRITEFUNCTION</font><font color="#0000FF">,</font><font color="#000000"> write_cb</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
          Pass a pointer to your callback function, which should match the prototype shown above.
          <br>
          <br>
          This callback function gets called by libcurl as soon as there is data received that needs to be saved.
          <br>
          pData points to the delivered data, and the size of that data is size multiplied with nmemb.
          <br>
          <br>
          The callback function will be passed as much data as possible in all invokes, but you must not make any assumptions.
          <br>
          It may be one byte, it may be thousands. The maximum amount of body data that will be passed to the write callback is 
          defined in the curl.h header file: CURL_MAX_WRITE_SIZE (the usual default is 16K). If CURLOPT_HEADER is enabled, which 
          makes header data get passed to the write callback, you can get up to CURL_MAX_HTTP_HEADER bytes (usually 100K).
          <br>
          Note that builtins\libcurl.e defines neither CURL_MAX_WRITE_SIZE nor CURL_MAX_HTTP_HEADER, since they would not reflect how the dll/so was built.
          <br>
          <br>
          This function may be called with zero bytes data if the transferred file is empty.
          <br>
          <br>
          The data passed to this function will not be zero terminated!
          <br>
          <br>
          Set the pUserdata argument with the
          <a href="#CURLOPT_WRITEDATA">CURLOPT_WRITEDATA</a> option.
          <br>
          <br>
          Your callback should return the number of bytes actually taken care of.
          <br>
          If that amount differs from the amount passed to your callback function, it will signal an error condition to the library.
          <br>
          This will cause the transfer to get aborted and the libcurl function used will return CURLE_WRITE_ERROR.
          <br>
          <br>
          If your callback function returns CURL_WRITEFUNC_PAUSE it will cause this transfer to become paused. See curl_easy_pause for further details.
          <br>
          <br>
          Set this option to NULL to get the internal default function used instead of your callback.
          <br>
          The internal default function will write the data to the FILE * given with
          <a href="#CURLOPT_WRITEDATA">CURLOPT_WRITEDATA</a>.
          <br>
          <br>
          Default: libcurl will use 'fwrite' as a callback by default.
          <br>
          <br>
          Protocols: All
          <br>
          <br>
          Availability: Support for the CURL_WRITEFUNC_PAUSE return code was added in version 7.18.0.
          <br>
          <br>
          <!--
            EXAMPLE

A common technique is to use this callback to store the incoming data into a dynamically growing allocated buffer. 
Like in the getinmemory example: https://curl.haxx.se/libcurl/c/getinmemory.html
            <br>
          <br>
-->
          See also:
          <a href="#CURLOPT_WRITEDATA">CURLOPT_WRITEDATA</a>, 
          <a href="#CURLOPT_READFUNCTION">CURLOPT_READFUNCTION</a>
          <small><br><a name="CURLOPT_WRITEDATA"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_WRITEDATA</small>
         </td>
         <td>
            Custom data pointer to pass to the write callback.
          <br>
          <br>
          Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_WRITEDATA,
                                                                        <a href="atom.htm">atom</a> pdata)
          <br>
          <br>
            pdata: A data pointer to pass to the write callback.
          <br>
            If you use the <a href="#CURLOPT_WRITEFUNCTION">CURLOPT_WRITEFUNCTION</a> option, 
            this is the pointer you get in that callback&rsquo;s 4th argument.
          <br>
            If you don&rsquo;t use a write callback, you must make pointer a 'FILE *' (cast to 'void *') as libcurl will pass this to fwrite(3) when writing data.
          <br>
            [PL: from a Phix/libcurl.e perspective, you cannot use results from
          <a href="open.htm">open</a>(), but you may be able to obtain handles for stderr etc,
             or perhaps even from something like builtins\VM\pfileioN.e that returns handles [see fdtbl] - all completely untested, of course.]
          <br>
            The internal
          <a href="#CURLOPT_WRITEFUNCTION">CURLOPT_WRITEFUNCTION</a> will write the data to the FILE * given with this option, or 
            to stdout if this option has not been set.
          <br>
          <br>
            If you are using libcurl as a win32 DLL, you MUST use the
          <a href="#CURLOPT_WRITEFUNCTION">CURLOPT_WRITEFUNCTION</a> if you set this option or 
            you will experience crashes.
          <br>
          <br>
            Default: By default, this is a FILE * to stdout.
          <br>
          <br>
            Protocols: Used for all protocols.
          <br>
          <br>
            Example: A common technique is to use the write callback to store the incoming data into a dynamically growing allocated buffer, and then this 
            CURLOPT_WRITEDATA is used to point to a struct or the buffer to store data in.
          <br>
            [DEV see builtins/libcurl.e, curle_easy_perform_ex() for the basic idea, though that does not actually use CURLOPT_WRITEDATA. I should try and 
            write a proper thread-safe example.]
          <br>
          <br>
            Availability: Available in all libcurl versions. This option was formerly known as CURLOPT_FILE, the name CURLOPT_WRITEDATA was introduced in 7.9.7.
          <br>
          <br>
            See also:
          <a href="#CURLOPT_WRITEFUNCTION">CURLOPT_WRITEFUNCTION</a>, <a href="#CURLOPT_READDATA">CURLOPT_READDATA</a>
          <small><br><a name="CURLOPT_READFUNCTION"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_READFUNCTION</small>
         </td>
         <td>
            Set the read callback for data uploads.
            <br>
            <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_READFUNCTION,
                                                                          <a href="atom.htm">atom</a> read_callback)
            <br>
            <br>
            Pass a pointer to your callback function, as shown in the prototype above and the more detailed example below.
            <br>
            <br>
            This callback function gets called by libcurl as soon as it needs to read data in order to send it to the peer - 
            like if you ask it to upload or post data to the server. <br>
            The data area pointed at by the pointer buffer should be filled up with at most (size*nitems) bytes by your function.
            <br>
            <br>
            Set the userdata argument with the <a href="#CURLOPT_READDATA">CURLOPT_READDATA</a> option.
            <br>
            <br>
            Your function must return the actual number of bytes that it stored in the data area pointed at by the pointer buffer. <br>
            Returning 0 will signal end-of-file to the library and cause it to stop the current transfer.
            <br>
            <br>
            If you stop the current transfer by returning 0 prematurely (i.e before the server expected it, like when you&rsquo;ve 
            said you will upload N bytes and you upload less than N bytes), you may experience that the server "hangs" waiting for 
            the rest of the data that won&rsquo;t come.
            <br>
            <br>
            The read callback may return CURL_READFUNC_ABORT to stop the current operation immediately, resulting in a 
            CURLE_ABORTED_BY_CALLBACK error code from the transfer.
            <br>
            <br>
            The callback can return CURL_READFUNC_PAUSE to cause reading from this connection to pause. 
            See curl_easy_pause for further details.
            <br>
            <br>
            Bugs: when doing TFTP uploads, you must return the exact amount of data that the callback wants, or it will be considered 
            the final packet by the server end and the transfer will end there.
            <br>
            <br>
            If you set this callback pointer to NULL, or don&rsquo;t set it at all, the default internal read function will be used. 
            It is doing an fread() on the FILE * userdata set with <a href="#CURLOPT_READDATA">CURLOPT_READDATA</a>. [which is most 
            likely to be invalid on Phix]
            <br>
            <br>
            Default: The default internal read callback is fread().
            <br>
            <br>
            Protocols: This is used for all protocols when doing uploads.
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75b38-q838-4476-937k-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75b38-q838-4476-937k-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
include builtins\libcurl.e
 
function read_callback(atom pbuffer, integer size, nmemb, atom userdata)
-- copy a maximum of isize*nmemb bytes into pbuffer
-- (you could just declare integer fn as the 4th parameter, but it can
--  also be a pointer to some allocated memory, or maybe an index, etc.)
    integer fn = userdata,
            bytes_written = 0
    for i=1 to isize*nmemb do
        integer byte = getc(fn)
        if fn=-1 then exit end if
        poke(pbuffer,byte)
        pbuffer += 1
        byte_written += 1
    end for
    printf(2, "*** We read %d bytes from file\n", bytes_written)
    return bytes_written
end function
constant read_cb = call_back({'+',routine_id("read_callback")})
 
procedure setup(string uploadthis)
    integer fn = open(uploadthis,"rb")
 
    -- set callback to use
    curl_easy_setopt(curl, CURLOPT_READFUNCTION, read_cb)
 
    -- pass in suitable argument to callback
    curl_easy_setopt(curl, CURLOPT_READDATA, fn)
 
    CURLcode result = curl_easy_perform(curl)
end procedure
</eucode-->
<pre>
<font color="#008080">include</font><font color="#000000"> builtins\libcurl.e</font>
<font color="#C0C0C0"> </font>
<font color="#008080">function</font><font color="#000000"> read_callback</font><font color="#0000FF">(</font><font color="#004080">atom</font><font color="#000000"> pbuffer</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> size</font><font color="#0000FF">,</font><font color="#000000"> nmemb</font><font color="#0000FF">,</font><font color="#004080"> atom</font><font color="#000000"> userdata</font><font color="#0000FF">)</font>
<font color="#000080"><i>-- copy a maximum of isize*nmemb bytes into pbuffer
-- (you could just declare integer fn as the 4th parameter, but it can
--  also be a pointer to some allocated memory, or maybe an index, etc.)</i></font>
<font color="#004080">    integer</font><font color="#000000"> fn</font><font color="#0000FF"> =</font><font color="#000000"> userdata</font><font color="#0000FF">,</font>
<font color="#000000">            bytes_written</font><font color="#0000FF"> =</font><font color="#000000"> 0</font>
<font color="#008080">    for</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">1</font><font color="#008080"> to</font><font color="#000000"> isize</font><font color="#0000FF">*</font><font color="#000000">nmemb</font><font color="#008080"> do</font>
<font color="#004080">        integer</font><font color="#000000"> byte</font><font color="#0000FF"> =</font><font color="#7060A8"> getc</font><font color="#0000FF">(</font><font color="#000000">fn</font><font color="#0000FF">)</font>
<font color="#008080">        if</font><font color="#000000"> fn</font><font color="#0000FF">=-</font><font color="#000000">1</font><font color="#008080"> then exit end if</font>
<font color="#7060A8">        poke</font><font color="#0000FF">(</font><font color="#000000">pbuffer</font><font color="#0000FF">,</font><font color="#000000">byte</font><font color="#0000FF">)</font>
<font color="#000000">        pbuffer</font><font color="#0000FF"> +=</font><font color="#000000"> 1
        byte_written</font><font color="#0000FF"> +=</font><font color="#000000"> 1</font>
<font color="#008080">    end for</font>
<font color="#5E005E">    printf</font><font color="#0000FF">(</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#008000"> "*** We read %d bytes from file\n"</font><font color="#0000FF">,</font><font color="#000000"> bytes_written</font><font color="#0000FF">)</font>
<font color="#008080">    return</font><font color="#000000"> bytes_written</font>
<font color="#008080">end function
constant</font><font color="#000000"> read_cb</font><font color="#0000FF"> =</font><font color="#5E005E"> call_back</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">'+'</font><font color="#0000FF">,</font><font color="#5E005E">routine_id</font><font color="#800080">(</font><font color="#008000">"read_callback"</font><font color="#800080">)</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#008080">procedure</font><font color="#000000"> setup</font><font color="#0000FF">(</font><font color="#004080">string</font><font color="#000000"> uploadthis</font><font color="#0000FF">)</font>
<font color="#004080">    integer</font><font color="#000000"> fn</font><font color="#0000FF"> =</font><font color="#7060A8"> open</font><font color="#0000FF">(</font><font color="#000000">uploadthis</font><font color="#0000FF">,</font><font color="#008000">"rb"</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>    -- set callback to use</i></font>
<font color="#5E005E">    curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_READFUNCTION</font><font color="#0000FF">,</font><font color="#000000"> read_cb</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>    -- pass in suitable argument to callback</i></font>
<font color="#5E005E">    curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_READDATA</font><font color="#0000FF">,</font><font color="#000000"> fn</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#5E005E">    CURLcode</font><font color="#000000"> result</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
<font color="#008080">end procedure</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: CURL_READFUNC_PAUSE return code was added in 7.18.0 and CURL_READFUNC_ABORT was added in 7.12.1.
            <br>
            <br>
            Return value (if set with <a href="curl_easy_setopt.htm">curl_easy_setoptf</a>()): CURLE_OK
            <br>
            <br>
            See also:
            <a href="#CURLOPT_READDATA">CURLOPT_READDATA</a>, <a href="#CURLOPT_WRITEFUNCTION">CURLOPT_WRITEFUNCTION</a>, 
            CURLOPT_SEEKFUNCTION, CURLOPT_UPLOAD, CURLOPT_POST, CURLOPT_UPLOAD_BUFFERSIZE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_READDATA</small>
         </td>
         <td>
            Set the custom data [pointer] to pass to the read callback (see the example just above).
            <br>
            <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_READDATA,
                                                                          <a href="atom.htm">atom</a> userdata)
            <br>
            <br>
            userdata: an atom or data pointer to pass to the file read function.
            <br>
            <br>
            If you use the <a href="#CURLOPT_READFUNCTION">CURLOPT_READFUNCTION</a> option, this is what you get as input in the 4th argument to the callback.<br>
            If you do not specify a read callback but instead rely on the default internal read function, this data must be a valid readable FILE * (cast to 
            'void *') - which is not easily available in Phix.
            <br>
            <br>
            If you are using libcurl as a win32 DLL, you MUST use a <a href="#CURLOPT_READFUNCTION">CURLOPT_READFUNCTION</a> 
            if you set this option or you will experience crashes.
            <br>
            <br>
            Default: By default, this is a FILE * to stdin.
            <br>
            <br>
            Protocols: This is used for all protocols when sending data.
            <br>
            <br>
            Availability: This option was once known by the older name CURLOPT_INFILE, the name CURLOPT_READDATA was introduced in 7.9.7.
            <br>
            <br>
            Return value (if set with <a href="curl_easy_setopt.htm">curl_easy_setoptf</a>()): CURLE_OK
            <br>
            <br>
            See also: <a href="#CURLOPT_READFUNCTION">CURLOPT_READFUNCTION</a>, <a href="#CURLOPT_WRITEDATA">CURLOPT_WRITEDATA</a>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_IOCTLFUNCTION</small>
         </td>
         <td>
            Callback for I/O operations. See CURLOPT_IOCTLFUNCTION
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_IOCTLDATA</small>
         </td>
         <td>
            Data pointer to pass to the I/O callback. See CURLOPT_IOCTLDATA
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SEEKFUNCTION</small>
         </td>
         <td>
            Callback for seek operations. See CURLOPT_SEEKFUNCTION
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SEEKDATA</small>
         </td>
         <td>
            Data pointer to pass to the seek callback. See CURLOPT_SEEKDATA
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SOCKOPTFUNCTION</small>
         </td>
         <td>
            Callback for sockopt operations. See CURLOPT_SOCKOPTFUNCTION
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SOCKOPTDATA</small>
         </td>
         <td>
            Data pointer to pass to the sockopt callback. See CURLOPT_SOCKOPTDATA
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_OPENSOCKETFUNCTION</small>
         </td>
         <td>
            Callback for socket creation. See CURLOPT_OPENSOCKETFUNCTION
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_OPENSOCKETDATA</small>
         </td>
         <td>
            Data pointer to pass to the open socket callback. See CURLOPT_OPENSOCKETDATA
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_CLOSESOCKETFUNCTION</small>
         </td>
         <td>
            Callback for closing socket. See CURLOPT_CLOSESOCKETFUNCTION
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_CLOSESOCKETDATA</small>
         </td>
         <td>
            Data pointer to pass to the close socket callback. See CURLOPT_CLOSESOCKETDATA
            <small><br><a name="CURLOPT_PROGRESSFUNCTION"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small><span class="illegal">CURLOPT_PROGRESSFUNCTION</span></small>
         </td>
         <td>
            OBSOLETE callback for progress meter: use <a href="#CURLOPT_XFERINFOFUNCTION">CURLOPT_XFERINFOFUNCTION</a> instead.<br>
            (Should you really need to use this, be advised that dltotal .. ulnow are/were doubles (64-bit floats) and will require
             similar treatment (to that shown in <a href="#CURLOPT_XFERINFOFUNCTION">CURLOPT_XFERINFOFUNCTION</a>), albeit with 
             something like <a href="poke.htm">poke8</a>(m,dltotal) [64-bit] or 
             <a href="poke.htm">poke4</a>(m,{dltotal,dltotal_hi}) [32-bit] and 
             s8 = <a href="peek.htm">peek</a>({m,8}) and
             dltotal = <a href="floatNN_to_atom.htm">float64_to_atom</a>(s8), noticably messier, especially on 64-bit.)
            <small><br><a name="CURLOPT_PROGRESSDATA"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROGRESSDATA</small>
         </td>
         <td>
            Custom data pointer to pass to the progress meter callback.
          <br>
          <br>
            Synopsis/Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-q9jw-6745-333j-8b2483c22724');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-q9jw-6745-333j-8b2483c22724" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
include builtins\libcurl.e
 
user_data = allocate_string(filename) -- (for instance)
curl_easy_setopt(curl, CURLOPT_PROGRESSDATA, user_data)
</eucode-->
<pre>
<font color="#008080">include</font><font color="#000000"> builtins\libcurl.e</font>
<font color="#C0C0C0"> </font>
<font color="#000000">user_data</font><font color="#0000FF"> =</font><font color="#5E005E"> allocate_string</font><font color="#0000FF">(</font><font color="#000000">filename</font><font color="#0000FF">)</font><font color="#000080"><i> -- (for instance)</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_PROGRESSDATA</font><font color="#0000FF">,</font><font color="#000000"> user_data</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            The pointer is not used by libcurl but is passed as the first argument to the progress callback as set with 
            <a href="#CURLOPT_XFERINFOFUNCTION">CURLOPT_XFERINFOFUNCTION</a>.
            <br>
            <br>
            CURLOPT_PROGRESSDATA is identical to <a href="#CURLOPT_XFERINFODATA">CURLOPT_XFERINFODATA</a>.
            <br>
            <br>
            Default: NULL.
            <br>
            <br>
            Protocols: All.
            <br>
            <br>
            Availability: Always.
            <br>
            <br>
            Return value (if set with <a href="curl_easy_setopt.htm">curl_easy_setoptf</a>()): CURLE_OK
          <small><br><a name="CURLOPT_XFERINFODATA"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_XFERINFODATA</small>
         </td>
         <td>
            Custom data pointer to pass to the progress meter callback.
          <br>
          <br>
            Synopsis/Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-q9jw-6745-333j-8b2483c22724');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-q9jw-6745-333j-8b2483c22724" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
include builtins\libcurl.e
 
user_data = allocate_string(filename) -- (for instance)
curl_easy_setopt(curl, CURLOPT_XFERINFODATA, user_data)
</eucode-->
<pre>
<font color="#008080">include</font><font color="#000000"> builtins\libcurl.e</font>
<font color="#C0C0C0"> </font>
<font color="#000000">user_data</font><font color="#0000FF"> =</font><font color="#5E005E"> allocate_string</font><font color="#0000FF">(</font><font color="#000000">filename</font><font color="#0000FF">)</font><font color="#000080"><i> -- (for instance)</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_XFERINFODATA</font><font color="#0000FF">,</font><font color="#000000"> user_data</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            The pointer is not used by libcurl but is passed as the first argument to the progress callback as set with 
            <a href="#CURLOPT_XFERINFOFUNCTION">CURLOPT_XFERINFOFUNCTION</a>.
            <br>
            <br>
            This is an alias for <a href="#CURLOPT_PROGRESSDATA">CURLOPT_PROGRESSDATA</a>.
            <br>
            <br>
            Default: NULL.
            <br>
            <br>
            Protocols: All.
            <br>
            <br>
            Availability: 7.32.0.
            <br>
            <br>
            Return value (if set with <a href="curl_easy_setopt.htm">curl_easy_setoptf</a>()): CURLE_OK
          <small><br><a name="CURLOPT_XFERINFOFUNCTION"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_XFERINFOFUNCTION</small>
         </td>
         <td>
            Callback for progress meter.
          <br>
          <br>
            Synopsis/Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-c7kw-4273-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-c7kw-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
include builtins\libcurl.e

function curl_xferinfo_callback64(atom clientp, dltotal, dlnow, ultotal, ulnow)
--
-- On 64-bit, int64 are handled just as you might expect ...
--
    atom percentage = iff(dltotal=0?0:dlnow*100/dltotal)
    string filename = peek_string(clientp)
    sequence args = {filename, dlnow, dltotal, percentage}
    printf(1, "Downloading %s:  Current=%d   Total=%d  (%d%%)\n  ", args)
    return 0 -- signify success
end function

function curl_xferinfo_callback32(atom clientp, dltotal, dltotal_hi, dlnow, dlnow_hi,
                                                ultotal, ultotal_hi, ulnow, ulnow_hi)
--
-- ... whereas on 32-bit, parameters dltotal..ulnow are passed as int64, 
--      however call_back() grabs 32 bits at a time off the system stack, 
--      so we need to stitch them back together (if any are >32 values).
--      (No precision loss unless downloading bigger than 8000TB files!)
--
    if dltotal_hi!=0 then dltotal += dltotal_hi*#100000000 end if
    if   dlnow_hi!=0 then   dlnow +=   dlnow_hi*#100000000 end if
    if ultotal_hi!=0 then ultotal += ultotal_hi*#100000000 end if
    if   ulnow_hi!=0 then   ulnow +=   ulnow_hi*#100000000 end if

    return curl_xferinfo_callback64(clientp, dltotal, dlnow, ultotal, ulnow)
end function

constant r_xferinfo64 = routine_id("curl_xferinfo_callback64"),
         r_xferinfo32 = routine_id("curl_xferinfo_callback32"),
         r_xferinfo = iff(machine_bits()=64?r_xferinfo64:r_xferinfo32),
         xferinfo_cb = call_back({'+', r_xferinfo})

atom clientp = allocate_string(filename)
curl_easy_setopt(curl, CURLOPT_XFERINFODATA, clientp)
curl_easy_setopt(curl, CURLOPT_XFERINFOFUNCTION, xferinfo_cb)
curl_easy_setopt(curl, CURLOPT_NOPROGRESS,false)
</eucode-->
<pre>
<font color="#008080">include</font><font color="#000000"> builtins\libcurl.e
</font>
<font color="#008080">function</font><font color="#000000"> curl_xferinfo_callback64</font><font color="#0000FF">(</font><font color="#004080">atom</font><font color="#000000"> clientp</font><font color="#0000FF">,</font><font color="#000000"> dltotal</font><font color="#0000FF">,</font><font color="#000000"> dlnow</font><font color="#0000FF">,</font><font color="#000000"> ultotal</font><font color="#0000FF">,</font><font color="#000000"> ulnow</font><font color="#0000FF">)</font>
<font color="#000080"><i>--
-- On 64-bit, int64 are handled just as you might expect ...
--</i></font>
<font color="#004080">    atom</font><font color="#000000"> percentage</font><font color="#0000FF"> =</font><font color="#7060A8"> iff</font><font color="#0000FF">(</font><font color="#000000">dltotal</font><font color="#0000FF">=</font><font color="#000000">0</font><font color="#0000FF">?</font><font color="#000000">0</font><font color="#0000FF">:</font><font color="#000000">dlnow</font><font color="#0000FF">*</font><font color="#000000">100</font><font color="#0000FF">/</font><font color="#000000">dltotal</font><font color="#0000FF">)</font>
<font color="#004080">    string</font><font color="#000000"> filename</font><font color="#0000FF"> =</font><font color="#5E005E"> peek_string</font><font color="#0000FF">(</font><font color="#000000">clientp</font><font color="#0000FF">)</font>
<font color="#004080">    sequence</font><font color="#000000"> args</font><font color="#0000FF"> = {</font><font color="#000000">filename</font><font color="#0000FF">,</font><font color="#000000"> dlnow</font><font color="#0000FF">,</font><font color="#000000"> dltotal</font><font color="#0000FF">,</font><font color="#000000"> percentage</font><font color="#0000FF">}</font>
<font color="#5E005E">    printf</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000"> "Downloading %s:  Current=%d   Total=%d  (%d%%)\n  "</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">)</font>
<font color="#008080">    return</font><font color="#000000"> 0</font><font color="#000080"><i> -- signify success</i></font>
<font color="#008080">end function

function</font><font color="#000000"> curl_xferinfo_callback32</font><font color="#0000FF">(</font><font color="#004080">atom</font><font color="#000000"> clientp</font><font color="#0000FF">,</font><font color="#000000"> dltotal</font><font color="#0000FF">,</font><font color="#000000"> dltotal_hi</font><font color="#0000FF">,</font><font color="#000000"> dlnow</font><font color="#0000FF">,</font><font color="#000000"> dlnow_hi</font><font color="#0000FF">,</font>
<font color="#000000">                                                ultotal</font><font color="#0000FF">,</font><font color="#000000"> ultotal_hi</font><font color="#0000FF">,</font><font color="#000000"> ulnow</font><font color="#0000FF">,</font><font color="#000000"> ulnow_hi</font><font color="#0000FF">)</font>
<font color="#000080"><i>--
-- ... whereas on 32-bit, parameters dltotal..ulnow are passed as int64, 
--      however call_back() grabs 32 bits at a time off the system stack, 
--      so we need to stitch them back together (if any are &gt;32 values).
--      (No precision loss unless downloading bigger than 8000TB files!)
--</i></font>
<font color="#008080">    if</font><font color="#000000"> dltotal_hi</font><font color="#0000FF">!=</font><font color="#000000">0</font><font color="#008080"> then</font><font color="#000000"> dltotal</font><font color="#0000FF"> +=</font><font color="#000000"> dltotal_hi</font><font color="#0000FF">*</font><font color="#000000">#100000000</font><font color="#008080"> end if
    if  </font><font color="#000000"> dlnow_hi</font><font color="#0000FF">!=</font><font color="#000000">0</font><font color="#008080"> then  </font><font color="#000000"> dlnow</font><font color="#0000FF"> +=  </font><font color="#000000"> dlnow_hi</font><font color="#0000FF">*</font><font color="#000000">#100000000</font><font color="#008080"> end if
    if</font><font color="#000000"> ultotal_hi</font><font color="#0000FF">!=</font><font color="#000000">0</font><font color="#008080"> then</font><font color="#000000"> ultotal</font><font color="#0000FF"> +=</font><font color="#000000"> ultotal_hi</font><font color="#0000FF">*</font><font color="#000000">#100000000</font><font color="#008080"> end if
    if  </font><font color="#000000"> ulnow_hi</font><font color="#0000FF">!=</font><font color="#000000">0</font><font color="#008080"> then  </font><font color="#000000"> ulnow</font><font color="#0000FF"> +=  </font><font color="#000000"> ulnow_hi</font><font color="#0000FF">*</font><font color="#000000">#100000000</font><font color="#008080"> end if

    return</font><font color="#000000"> curl_xferinfo_callback64</font><font color="#0000FF">(</font><font color="#000000">clientp</font><font color="#0000FF">,</font><font color="#000000"> dltotal</font><font color="#0000FF">,</font><font color="#000000"> dlnow</font><font color="#0000FF">,</font><font color="#000000"> ultotal</font><font color="#0000FF">,</font><font color="#000000"> ulnow</font><font color="#0000FF">)</font>
<font color="#008080">end function

constant</font><font color="#000000"> r_xferinfo64</font><font color="#0000FF"> =</font><font color="#5E005E"> routine_id</font><font color="#0000FF">(</font><font color="#008000">"curl_xferinfo_callback64"</font><font color="#0000FF">),</font>
<font color="#000000">         r_xferinfo32</font><font color="#0000FF"> =</font><font color="#5E005E"> routine_id</font><font color="#0000FF">(</font><font color="#008000">"curl_xferinfo_callback32"</font><font color="#0000FF">),</font>
<font color="#000000">         r_xferinfo</font><font color="#0000FF"> =</font><font color="#7060A8"> iff</font><font color="#0000FF">(</font><font color="#7060A8">machine_bits</font><font color="#800000">()</font><font color="#0000FF">=</font><font color="#000000">64</font><font color="#0000FF">?</font><font color="#000000">r_xferinfo64</font><font color="#0000FF">:</font><font color="#000000">r_xferinfo32</font><font color="#0000FF">),</font>
<font color="#000000">         xferinfo_cb</font><font color="#0000FF"> =</font><font color="#5E005E"> call_back</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">'+'</font><font color="#0000FF">,</font><font color="#000000"> r_xferinfo</font><font color="#800000">}</font><font color="#0000FF">)
</font>
<font color="#004080">atom</font><font color="#000000"> clientp</font><font color="#0000FF"> =</font><font color="#5E005E"> allocate_string</font><font color="#0000FF">(</font><font color="#000000">filename</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_XFERINFODATA</font><font color="#0000FF">,</font><font color="#000000"> clientp</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_XFERINFOFUNCTION</font><font color="#0000FF">,</font><font color="#000000"> xferinfo_cb</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_NOPROGRESS</font><font color="#0000FF">,</font><font color="#004600">false</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Pass a pointer to your callback function, which should match the prototypes shown above.
          <br>
          <br>
            This function gets called by libcurl instead of its internal equivalent with a frequent interval.
          <br>
            While data is being transferred it will be called very frequently, and during slow periods like when nothing is being transferred 
            it can slow down to about one call per second.
          <br>
          <br>
            clientp is the pointer set with <a href="#CURLOPT_XFERINFODATA">CURLOPT_XFERINFODATA</a>, it is not used by libcurl but is only 
            passed along from the application to the callback.
          <br>
          <br>
            The callback gets told how much data libcurl will transfer and has transferred, in number of bytes.
          <br>
            dltotal is the total number of bytes libcurl expects to download in this transfer.
          <br>
            dlnow is the number of bytes downloaded so far.
          <br>
            ultotal is the total number of bytes libcurl expects to upload in this transfer.
          <br>
            ulnow is the number of bytes uploaded so far.
          <br>
          <br>
            Unknown/unused argument values passed to the callback will be set to zero (like if you only download data, the upload size will remain 0).
          <br>
            Many times the callback will be called one or more times first, before it knows the data sizes so a program must be made to handle that.
          <br>
          <br>
            Returning a non-zero value from this callback will cause libcurl to abort the transfer and return 
            <a href="CURLcode.htm#CURLE_ABORTED_BY_CALLBACK">CURLE_ABORTED_BY_CALLBACK</a>.
          <br>
          <br>
            If you transfer data with the multi interface, this function will not be called during periods of idleness unless 
            you call the appropriate libcurl function that performs transfers.
          <br>
          <br>
          <a href="#CURLOPT_NOPROGRESS">CURLOPT_NOPROGRESS</a> must be set to 0 to make this function actually get called.
          <br>
          <br>
            Default: By default, libcurl has an internal progress meter, which is rarely wanted by users.
          <br>
          <br>
            Protocols: All
          <br>
          <br>
            Availability: Added in 7.32.0. This callback replaces <a href="#CURLOPT_PROGRESSFUNCTION"><span class="illegal">CURLOPT_PROGRESSFUNCTION</span></a>
          <br>
          <br>
            See also: <a href="#CURLOPT_XFERINFODATA">CURLOPT_XFERINFODATA</a>,
                      <a href="#CURLOPT_NOPROGRESS">CURLOPT_NOPROGRESS</a>
          <small><br><a name="CURLOPT_HEADERFUNCTION"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_HEADERFUNCTION</small>
         </td>
         <td>
            Specify a callback that receives header data.
          <br>
          <br>
            Synopsis/Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-d3jn-4273-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-d3jn-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
include builtins\libcurl.e
 
function header_callback(atom pData, integer size, integer nmemb, atom pUserdata);
integer bytes_processed = size*nmemb
  ... peek(pData,bytes_processed) ...
  return bytes_processed
end function
constant header_cb = call_back({'+',routine_id("header_callback")})

curl_easy_setopt(curl, CURLOPT_HEADERFUNCTION, header_cb)
</eucode-->
<pre>
<font color="#008080">include</font><font color="#000000"> builtins\libcurl.e</font>
<font color="#C0C0C0"> </font>
<font color="#008080">function</font><font color="#000000"> header_callback</font><font color="#0000FF">(</font><font color="#004080">atom</font><font color="#000000"> pData</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> size</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> nmemb</font><font color="#0000FF">,</font><font color="#004080"> atom</font><font color="#000000"> pUserdata</font><font color="#0000FF">);</font>
<font color="#004080">integer</font><font color="#000000"> bytes_processed</font><font color="#0000FF"> =</font><font color="#000000"> size</font><font color="#0000FF">*</font><font color="#000000">nmemb</font>
<font color="#0000FF">  ...</font><font color="#7060A8"> peek</font><font color="#0000FF">(</font><font color="#000000">pData</font><font color="#0000FF">,</font><font color="#000000">bytes_processed</font><font color="#0000FF">) ...</font>
<font color="#008080">  return</font><font color="#000000"> bytes_processed</font>
<font color="#008080">end function
constant</font><font color="#000000"> header_cb</font><font color="#0000FF"> =</font><font color="#5E005E"> call_back</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">'+'</font><font color="#0000FF">,</font><font color="#5E005E">routine_id</font><font color="#800080">(</font><font color="#008000">"header_callback"</font><font color="#800080">)</font><font color="#800000">}</font><font color="#0000FF">)
</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_HEADERFUNCTION</font><font color="#0000FF">,</font><font color="#000000"> header_cb</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            The specified function gets called by libcurl as soon as it has received header data.
          <br>
            The header callback will be called once for each header and only complete header lines are passed on to the callback.
          <br>
            Parsing headers is very easy using this. The size of the data pointed to by buffer is size multiplied with nmemb.
          <br>
            Do not assume that the header line is zero terminated!
          <br>
            The pointer named pUserdata is the one you set with the CURLOPT_HEADERDATA option.
          <br>
            This callback function must return the number of bytes actually taken care of.
          <br>
            If that amount differs from the amount passed in to your function, it will signal an error to the library.
          <br>
            This will cause the transfer to get aborted and the libcurl function in progress will return CURLE_WRITE_ERROR.
          <br>
          <br>
            A complete HTTP header that is passed to this function can be up to CURL_MAX_HTTP_HEADER (100K) bytes.
          <br>
          <br>
            If this option is not set, or if it is set to NULL, but CURLOPT_HEADERDATA is set to anything but NULL, 
            the function used to accept response data will be used instead.
          <br>
            That is, it will be the function specified with <a href="#CURLOPT_WRITEFUNCTION">CURLOPT_WRITEFUNCTION</a>, 
            or if it is not specified or NULL - the default, stream-writing function.
          <br>
          <br>
            It is important to note that the callback will be invoked for the headers of all responses received after 
            initiating a request and not just the final response.
          <br>
            This includes all responses which occur during authentication negotiation.
          <br>
            If you need to operate on only the headers from the final response, you will need to collect headers 
            in the callback yourself and use HTTP status lines, for example, to delimit response boundaries.
          <br>
          <br>
            When a server sends a chunked encoded transfer, it may contain a trailer.
          <br>
            That trailer is identical to a HTTP header and if such a trailer is received it is passed to the application using this callback as well.
          <br>
            There are several ways to detect it being a trailer and not an ordinary header:
          <br>
            1) it comes after the response-body.
          <br>
            2) it comes after the final header line (CR LF)
          <br>
            3) a Trailer: header among the regular response-headers mention what header(s) to expect in the trailer.
          <br>
          <br>
            For non-HTTP protocols like FTP, POP3, IMAP and SMTP this function will get called with the server responses to the commands that libcurl sends.
          <br>
          <br>
            Default: Nothing.
          <br>
          <br>
            Protocols: Used for all protocols with headers or meta-data concept: HTTP, FTP, POP3, IMAP, SMTP and more.
          <br>
          <br>
            Availability: Always
          <br>
          <br>
            See also: CURLOPT_HEADERDATA,
          <a href="#CURLOPT_WRITEFUNCTION">CURLOPT_WRITEFUNCTION</a>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_HEADERDATA</small>
         </td>
         <td>
            Data pointer to pass to the header callback. See CURLOPT_HEADERDATA
          <small><br><a name="CURLOPT_DEBUGFUNCTION"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_DEBUGFUNCTION</small>
         </td>
         <td>
            Callback for debug information.
          <br>
          <br>
          Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_DEBUGFUNCTION,
                                                                        <a href="atom.htm">atom</a> debug_cb)
          <br>
          <br>
            where debug_cb conforms to the following declaration:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-d3jn-3742-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-d3jn-3742-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
function debug_callback(atom curl, integer infotype, atom pData, 
                                   integer data_size, atom pUserPtr)
  ...
  return 0
end function
constant debug_cb = call_back({'+',routine_id("debug_callback")})
</eucode-->
<pre>
<font color="#008080">function</font><font color="#000000"> debug_callback</font><font color="#0000FF">(</font><font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> infotype</font><font color="#0000FF">,</font><font color="#004080"> atom</font><font color="#000000"> pData</font><font color="#0000FF">, </font>
<font color="#004080">                                   integer</font><font color="#000000"> data_size</font><font color="#0000FF">,</font><font color="#004080"> atom</font><font color="#000000"> pUserPtr</font><font color="#0000FF">)
  ...</font>
<font color="#008080">  return</font><font color="#000000"> 0</font>
<font color="#008080">end function
constant</font><font color="#000000"> debug_cb</font><font color="#0000FF"> =</font><font color="#5E005E"> call_back</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">'+'</font><font color="#0000FF">,</font><font color="#5E005E">routine_id</font><font color="#800080">(</font><font color="#008000">"debug_callback"</font><font color="#800080">)</font><font color="#800000">}</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            The infotype recieved will be one of the following provided constants:
            <br>
            <br>
<!--eucode>
global enum
  CURLINFO_TEXT = 0,     -- 0 informational text.
  CURLINFO_HEADER_IN,    -- 1 header data received from the peer.
  CURLINFO_HEADER_OUT,   -- 2 header data sent to the peer.
  CURLINFO_DATA_IN,      -- 3 protocol data received from the peer.
  CURLINFO_DATA_OUT,     -- 4 protocol data sent to the peer.
  CURLINFO_SSL_DATA_IN,  -- 5 SSL/TLS data received from the peer.
  CURLINFO_SSL_DATA_OUT, -- 6 SSL/TLS data sent to the peer.
  CURLINFO_END
</eucode-->
<pre>
<font color="#008080">global enum</font>
<font color="#004600">  CURLINFO_TEXT</font><font color="#0000FF"> =</font><font color="#000000"> 0</font><font color="#0000FF">,    </font><font color="#000080"><i> -- 0 informational text.</i></font>
<font color="#004600">  CURLINFO_HEADER_IN</font><font color="#0000FF">,   </font><font color="#000080"><i> -- 1 header data received from the peer.</i></font>
<font color="#004600">  CURLINFO_HEADER_OUT</font><font color="#0000FF">,  </font><font color="#000080"><i> -- 2 header data sent to the peer.</i></font>
<font color="#004600">  CURLINFO_DATA_IN</font><font color="#0000FF">,     </font><font color="#000080"><i> -- 3 protocol data received from the peer.</i></font>
<font color="#004600">  CURLINFO_DATA_OUT</font><font color="#0000FF">,    </font><font color="#000080"><i> -- 4 protocol data sent to the peer.</i></font>
<font color="#004600">  CURLINFO_SSL_DATA_IN</font><font color="#0000FF">, </font><font color="#000080"><i> -- 5 SSL/TLS data received from the peer.</i></font>
<font color="#004600">  CURLINFO_SSL_DATA_OUT</font><font color="#0000FF">,</font><font color="#000080"><i> -- 6 SSL/TLS data sent to the peer.</i></font>
<font color="#004600">  CURLINFO_END</font>
</pre>
          <br>
            CURLOPT_DEBUGFUNCTION replaces the standard debug function used when
          <a href="#CURLOPT_VERBOSE">CURLOPT_VERBOSE</a> is in effect.
          <br>
            This callback receives debug information, as specified in the infotype argument. This function must return 0.
          <br>
            The data pointed to by pData WILL NOT be zero terminated, but will be exactly of the size as told by the data_size argument.
          <br>
          <br>
            The pUserPtr argument is the pointer set with CURLOPT_DEBUGDATA.
          <br>
          <br>
            Protocols: All
          <br>
          <br>
            Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-d3jn-3742-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-d3jn-3742-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
procedure dump(string text, integer fn, atom pData, integer data_size)
 
    printf(fn, "%s, %10.10d bytes (0x%8.8x)\n", {text, data_size, data_size})
 
    integer width=0x10
    for i=1 to data_size by width do
        printf(fn, "%4.4x: ", i)
 
        /* show hex to the left */
        for c=1 to width do
            if (i+c-1)<=data_size then
                printf(fn, "%02x ", peek(pData+i+c-1))
            else
                puts(fn,"   ")
            end if
        end for
 
        /* show data on the right */
        for c=1 to width do
            if (i+c-1)>data_size then exit end if
            integer ch = peek(pData+i+c-1)
            if ch<0x20 or ch>=0x80 then ch = '.' end if
            puts(fn, ch)
        end for
 
        puts(fn,'\n')
    end for
end procedure
 
constant stderr = 2

function debug_callback(atom /*curl*/, integer infotype, atom pData, 
                                       integer data_size, atom /*pUserPtr*/)
    string text
    switch infotype do
--      case CURLINFO_TEXT:
--          printf(stderr, "== Info: %s", {peek_string(pData)})
--          fallthrough
--      default: /* in case a new one is introduced to shock us */
--          return 0
        case CURLINFO_HEADER_OUT:   text = "=> Send header"
        case CURLINFO_DATA_OUT:     text = "=> Send data"
        case CURLINFO_SSL_DATA_OUT: text = "=> Send SSL data"
        case CURLINFO_HEADER_IN:    text = "<= Recv header"
        case CURLINFO_DATA_IN:      text = "<= Recv data"
        case CURLINFO_SSL_DATA_IN:  text = "<= Recv SSL data"
        case CURLINFO_TEXT:
            printf(stderr, "== Info: %s", {peek_string(pData)})
            fallthrough
        default: /* in case a new one is introduced to shock us */
            return 0
    end switch
    dump(text, stderr, pData, data_size)
    return 0
end function
constant debug_cb = call_back({'+',routine_id("debug_callback")})

atom curl = curl_easy_init()

curl_easy_setopt(curl, CURLOPT_DEBUGFUNCTION, debug_cb)
 
/* the DEBUGFUNCTION has no effect until we enable VERBOSE */
curl_easy_setopt(curl, CURLOPT_VERBOSE, true)
 
/* example.com is redirected, so we tell libcurl to follow redirection */
curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, true)
 
curl_easy_setopt(curl, CURLOPT_URL, "http://example.com/")
integer res = curl_easy_perform(curl)
/* Check for errors */
if res!=CURLE_OK then
    printf(stderr, "curl_easy_perform() failed: %s\n",{curl_easy_strerror(res)})
end if
 
/* always cleanup */
curl_easy_cleanup(curl)
</eucode-->
<pre>
<font color="#008080">procedure</font><font color="#000000"> dump</font><font color="#0000FF">(</font><font color="#004080">string</font><font color="#000000"> text</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> fn</font><font color="#0000FF">,</font><font color="#004080"> atom</font><font color="#000000"> pData</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> data_size</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#5E005E">    printf</font><font color="#0000FF">(</font><font color="#000000">fn</font><font color="#0000FF">,</font><font color="#008000"> "%s, %10.10d bytes (0x%8.8x)\n"</font><font color="#0000FF">,</font><font color="#800000"> {</font><font color="#000000">text</font><font color="#0000FF">,</font><font color="#000000"> data_size</font><font color="#0000FF">,</font><font color="#000000"> data_size</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#004080">    integer</font><font color="#000000"> width</font><font color="#0000FF">=</font><font color="#000000">0x10</font>
<font color="#008080">    for</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">1</font><font color="#008080"> to</font><font color="#000000"> data_size</font><font color="#008080"> by</font><font color="#000000"> width</font><font color="#008080"> do</font>
<font color="#5E005E">        printf</font><font color="#0000FF">(</font><font color="#000000">fn</font><font color="#0000FF">,</font><font color="#008000"> "%4.4x: "</font><font color="#0000FF">,</font><font color="#000000"> i</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>        /* show hex to the left */</i></font>
<font color="#008080">        for</font><font color="#000000"> c</font><font color="#0000FF">=</font><font color="#000000">1</font><font color="#008080"> to</font><font color="#000000"> width</font><font color="#008080"> do
            if</font><font color="#0000FF"> (</font><font color="#000000">i</font><font color="#0000FF">+</font><font color="#000000">c</font><font color="#0000FF">-</font><font color="#000000">1</font><font color="#0000FF">)&lt;=</font><font color="#000000">data_size</font><font color="#008080"> then</font>
<font color="#5E005E">                printf</font><font color="#0000FF">(</font><font color="#000000">fn</font><font color="#0000FF">,</font><font color="#008000"> "%02x "</font><font color="#0000FF">,</font><font color="#7060A8"> peek</font><font color="#800000">(</font><font color="#000000">pData</font><font color="#0000FF">+</font><font color="#000000">i</font><font color="#0000FF">+</font><font color="#000000">c</font><font color="#0000FF">-</font><font color="#000000">1</font><font color="#800000">)</font><font color="#0000FF">)</font>
<font color="#008080">            else</font>
<font color="#7060A8">                puts</font><font color="#0000FF">(</font><font color="#000000">fn</font><font color="#0000FF">,</font><font color="#008000">"   "</font><font color="#0000FF">)</font>
<font color="#008080">            end if
        end for</font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>        /* show data on the right */</i></font>
<font color="#008080">        for</font><font color="#000000"> c</font><font color="#0000FF">=</font><font color="#000000">1</font><font color="#008080"> to</font><font color="#000000"> width</font><font color="#008080"> do
            if</font><font color="#0000FF"> (</font><font color="#000000">i</font><font color="#0000FF">+</font><font color="#000000">c</font><font color="#0000FF">-</font><font color="#000000">1</font><font color="#0000FF">)&gt;</font><font color="#000000">data_size</font><font color="#008080"> then exit end if</font>
<font color="#004080">            integer</font><font color="#000000"> ch</font><font color="#0000FF"> =</font><font color="#7060A8"> peek</font><font color="#0000FF">(</font><font color="#000000">pData</font><font color="#0000FF">+</font><font color="#000000">i</font><font color="#0000FF">+</font><font color="#000000">c</font><font color="#0000FF">-</font><font color="#000000">1</font><font color="#0000FF">)</font>
<font color="#008080">            if</font><font color="#000000"> ch</font><font color="#0000FF">&lt;</font><font color="#000000">0x20</font><font color="#008080"> or</font><font color="#000000"> ch</font><font color="#0000FF">&gt;=</font><font color="#000000">0x80</font><font color="#008080"> then</font><font color="#000000"> ch</font><font color="#0000FF"> =</font><font color="#008000"> '.'</font><font color="#008080"> end if</font>
<font color="#7060A8">            puts</font><font color="#0000FF">(</font><font color="#000000">fn</font><font color="#0000FF">,</font><font color="#000000"> ch</font><font color="#0000FF">)</font>
<font color="#008080">        end for</font>
<font color="#C0C0C0"> </font>
<font color="#7060A8">        puts</font><font color="#0000FF">(</font><font color="#000000">fn</font><font color="#0000FF">,</font><font color="#008000">'\n'</font><font color="#0000FF">)</font>
<font color="#008080">    end for
end procedure</font>
<font color="#C0C0C0"> </font>
<font color="#008080">constant</font><font color="#000000"> stderr</font><font color="#0000FF"> =</font><font color="#000000"> 2
</font>
<font color="#008080">function</font><font color="#000000"> debug_callback</font><font color="#0000FF">(</font><font color="#004080">atom</font><font color="#000080"><i> /*curl*/</i></font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> infotype</font><font color="#0000FF">,</font><font color="#004080"> atom</font><font color="#000000"> pData</font><font color="#0000FF">, </font>
<font color="#004080">                                       integer</font><font color="#000000"> data_size</font><font color="#0000FF">,</font><font color="#004080"> atom</font><font color="#000080"><i> /*pUserPtr*/</i></font><font color="#0000FF">)</font>
<font color="#004080">    string</font><font color="#000000"> text</font>
<font color="#008080">    switch</font><font color="#000000"> infotype</font><font color="#008080"> do</font>
<font color="#000080"><i>--      case CURLINFO_TEXT:
--          printf(stderr, "== Info: %s", {peek_string(pData)})
--          fallthrough
--      default: /* in case a new one is introduced to shock us */
--          return 0</i></font>
<font color="#008080">        case</font><font color="#004600"> CURLINFO_HEADER_OUT</font><font color="#0000FF">:  </font><font color="#000000"> text</font><font color="#0000FF"> =</font><font color="#008000"> "=&gt; Send header"</font>
<font color="#008080">        case</font><font color="#004600"> CURLINFO_DATA_OUT</font><font color="#0000FF">:    </font><font color="#000000"> text</font><font color="#0000FF"> =</font><font color="#008000"> "=&gt; Send data"</font>
<font color="#008080">        case</font><font color="#004600"> CURLINFO_SSL_DATA_OUT</font><font color="#0000FF">:</font><font color="#000000"> text</font><font color="#0000FF"> =</font><font color="#008000"> "=&gt; Send SSL data"</font>
<font color="#008080">        case</font><font color="#004600"> CURLINFO_HEADER_IN</font><font color="#0000FF">:   </font><font color="#000000"> text</font><font color="#0000FF"> =</font><font color="#008000"> "&lt;= Recv header"</font>
<font color="#008080">        case</font><font color="#004600"> CURLINFO_DATA_IN</font><font color="#0000FF">:     </font><font color="#000000"> text</font><font color="#0000FF"> =</font><font color="#008000"> "&lt;= Recv data"</font>
<font color="#008080">        case</font><font color="#004600"> CURLINFO_SSL_DATA_IN</font><font color="#0000FF">: </font><font color="#000000"> text</font><font color="#0000FF"> =</font><font color="#008000"> "&lt;= Recv SSL data"</font>
<font color="#008080">        case</font><font color="#004600"> CURLINFO_TEXT</font><font color="#0000FF">:</font>
<font color="#5E005E">            printf</font><font color="#0000FF">(</font><font color="#000000">stderr</font><font color="#0000FF">,</font><font color="#008000"> "== Info: %s"</font><font color="#0000FF">,</font><font color="#800000"> {</font><font color="#5E005E">peek_string</font><font color="#800080">(</font><font color="#000000">pData</font><font color="#800080">)</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#008080">            fallthrough
        default</font><font color="#0000FF">:</font><font color="#000080"><i> /* in case a new one is introduced to shock us */</i></font>
<font color="#008080">            return</font><font color="#000000"> 0</font>
<font color="#008080">    end switch</font>
<font color="#000000">    dump</font><font color="#0000FF">(</font><font color="#000000">text</font><font color="#0000FF">,</font><font color="#000000"> stderr</font><font color="#0000FF">,</font><font color="#000000"> pData</font><font color="#0000FF">,</font><font color="#000000"> data_size</font><font color="#0000FF">)</font>
<font color="#008080">    return</font><font color="#000000"> 0</font>
<font color="#008080">end function
constant</font><font color="#000000"> debug_cb</font><font color="#0000FF"> =</font><font color="#5E005E"> call_back</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">'+'</font><font color="#0000FF">,</font><font color="#5E005E">routine_id</font><font color="#800080">(</font><font color="#008000">"debug_callback"</font><font color="#800080">)</font><font color="#800000">}</font><font color="#0000FF">)
</font>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()
</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_DEBUGFUNCTION</font><font color="#0000FF">,</font><font color="#000000"> debug_cb</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>/* the DEBUGFUNCTION has no effect until we enable VERBOSE */</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_VERBOSE</font><font color="#0000FF">,</font><font color="#004600"> true</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>/* example.com is redirected, so we tell libcurl to follow redirection */</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_FOLLOWLOCATION</font><font color="#0000FF">,</font><font color="#004600"> true</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "http://example.com/"</font><font color="#0000FF">)</font>
<font color="#004080">integer</font><font color="#000000"> res</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
<font color="#000080"><i>/* Check for errors */</i></font>
<font color="#008080">if</font><font color="#000000"> res</font><font color="#0000FF">!=</font><font color="#004600">CURLE_OK</font><font color="#008080"> then</font>
<font color="#5E005E">    printf</font><font color="#0000FF">(</font><font color="#000000">stderr</font><font color="#0000FF">,</font><font color="#008000"> "curl_easy_perform() failed: %s\n"</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#5E005E">curl_easy_strerror</font><font color="#800080">(</font><font color="#000000">res</font><font color="#800080">)</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#008080">end if</font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>/* always cleanup */</i></font>
<font color="#5E005E">curl_easy_cleanup</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: Always
          <br>
          <br>
            See also:
          <a href="#CURLOPT_VERBOSE">CURLOPT_VERBOSE</a>, CURLOPT_DEBUGDATA
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_DEBUGDATA</small>
         </td>
         <td>
            Data pointer to pass to the debug callback. See CURLOPT_DEBUGDATA
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSL_CTX_FUNCTION</small>
         </td>
         <td>
            Callback for SSL context logic. See CURLOPT_SSL_CTX_FUNCTION
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSL_CTX_DATA</small>
         </td>
         <td>
            Data pointer to pass to the SSL context callback. See CURLOPT_SSL_CTX_DATA
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_CONV_TO_NETWORK_FUNCTION</small>
         </td>
         <td>
            Callback for code base conversion. See CURLOPT_CONV_TO_NETWORK_FUNCTION
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_CONV_FROM_NETWORK_FUNCTION</small>
         </td>
         <td>
            Callback for code base conversion. See CURLOPT_CONV_FROM_NETWORK_FUNCTION
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_CONV_FROM_UTF8_FUNCTION</small>
         </td>
         <td>
            Callback for code base conversion. See CURLOPT_CONV_FROM_UTF8_FUNCTION
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_INTERLEAVEFUNCTION</small>
         </td>
         <td>
            Callback for RTSP interleaved data. See CURLOPT_INTERLEAVEFUNCTION
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_INTERLEAVEDATA</small>
         </td>
         <td>
            Data pointer to pass to the RTSP interleave callback. See CURLOPT_INTERLEAVEDATA
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_CHUNK_BGN_FUNCTION</small>
         </td>
         <td>
            Callback for wildcard download start of chunk. See CURLOPT_CHUNK_BGN_FUNCTION
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_CHUNK_END_FUNCTION</small>
         </td>
         <td>
            Callback for wildcard download end of chunk. See CURLOPT_CHUNK_END_FUNCTION
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_CHUNK_DATA</small>
         </td>
         <td>
            Data pointer to pass to the chunk callbacks. See CURLOPT_CHUNK_DATA
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_FNMATCH_FUNCTION</small>
         </td>
         <td>
            Callback for wildcard matching. See CURLOPT_FNMATCH_FUNCTION
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_FNMATCH_DATA</small>
         </td>
         <td>
            Data pointer to pass to the wildcard matching callback. See CURLOPT_FNMATCH_DATA
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SUPPRESS_CONNECT_HEADERS</small>
         </td>
         <td>
            Suppress proxy CONNECT response headers from user callbacks. See CURLOPT_SUPPRESS_CONNECT_HEADERS
         </td>
        </tr>
        <tr>
         <td>
          <b>ERROR OPTIONS</b>
         </td>
         <td>
          <small><br><a name="CURLOPT_ERRORBUFFER"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_ERRORBUFFER</small>
         </td>
         <td>
            Set error message buffer.
          <br>
          <br>
          Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_ERRORBUFFER,
                                                                        <a href="atom.htm">atom</a> pErrorBuffer)
          <br>
          <br>
            Pass a pointer to a buffer that libcurl may store human readable error messages in on failures or problems.
          <br>
            This may be more helpful than just the return code from
          <a href="curl_easy_perform.htm">curl_easy_perform</a> and related functions.
          <br>
            The buffer must be at least CURL_ERROR_SIZE bytes big.
          <br>
          <br>
            You must keep the associated buffer available until libcurl no longer needs it.
          <br>
            Failing to do so will cause very odd behavior or even crashes.
          <br>
            libcurl will need it until you call
          <a href="curl_easy_cleanup.htm">curl_easy_cleanup</a>() or you set the same option again to use a different pointer.
          <br>
          <br>
            Consider
          <a href="#CURLOPT_VERBOSE">CURLOPT_VERBOSE</a> and 
          <a href="#CURLOPT_DEBUGFUNCTION">CURLOPT_DEBUGFUNCTION</a> to better debug and trace why errors happen.
          <br>
          <br>
            If the library does not return an error, the buffer may not have been touched. Do not rely on the contents in those cases.
          <br>
          <br>
            Default: NULL
          <br>
          <br>
            Protocols: All
          <br>
          <br>
            Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-e4wq-4273-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-e4wq-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom pErrorBuffer = allocate(CURL_ERROR_SIZE)
curl_easy_setopt(curl, CURLOPT_ERRORBUFFER, pErrorBuffer)
...
curl_easy_cleanup(curl)
free(pErrorBuffer)
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> pErrorBuffer</font><font color="#0000FF"> =</font><font color="#5E005E"> allocate</font><font color="#0000FF">(</font><font color="#004600">CURL_ERROR_SIZE</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_ERRORBUFFER</font><font color="#0000FF">,</font><font color="#000000"> pErrorBuffer</font><font color="#0000FF">)
...</font>
<font color="#5E005E">curl_easy_cleanup</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
<font color="#7060A8">free</font><font color="#0000FF">(</font><font color="#000000">pErrorBuffer</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: Always
          <br>
          <br>
            See also: <a href="#CURLOPT_DEBUGFUNCTION">CURLOPT_DEBUGFUNCTION</a>,
          <a href="#CURLOPT_VERBOSE">CURLOPT_VERBOSE</a>,
          <a href="CURLcode.htm#curl_easy_strerror">curl_easy_strerror</a>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_STDERR</small>
         </td>
         <td>
            stderr replacement stream. See CURLOPT_STDERR
          <small><br><a name="CURLOPT_FAILONERROR"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_FAILONERROR</small>
         </td>
         <td>
            Fail on HTTP 4xx errors.
          <br>
          <br>
          Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_FAILONERROR,
                                                                        <a href="integer.htm#bool">bool</a> fail)
          <br>
          <br>
            A parameter of true (1) tells the library to fail the request if the HTTP code returned is equal to or larger than 400.
          <br>
            The default action would be to return the page normally, ignoring that code.
          <br>
          <br>
            This method is not fail-safe and there are occasions where non-successful response codes will slip through, 
            especially when authentication is involved (response codes 401 and 407).
          <br>
          <br>
            You might get some amounts of headers transferred before this situation is detected, like when a "100-continue" is received 
            as a response to a POST/PUT and a 401 or 407 is received immediately afterwards.
          <br>
          <br>
            When this option is used and an error is detected, it will cause the connection to get closed and
          <a href="CURLcode.htm#CURLE_HTTP_RETURNED_ERROR">CURLE_HTTP_RETURNED_ERROR</a> is returned.
          <br>
          <br>
            Default: false (0), do not fail on error.
          <br>
          <br>
            Protocols: HTTP
          <br>
          <br>
            Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-f7sj-4273-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-f7sj-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom curl = curl_easy_init()
curl_easy_setopt(curl, CURLOPT_URL, "https://example.com/")
curl_easy_setopt(curl, CURLOPT_FAILONERROR, true)
CURLcode ret = curl_easy_perform(curl)
if ret=CURLE_HTTP_RETURNED_ERROR then
    /* a HTTP response error problem */
end if
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "https://example.com/"</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_FAILONERROR</font><font color="#0000FF">,</font><font color="#004600"> true</font><font color="#0000FF">)</font>
<font color="#5E005E">CURLcode</font><font color="#000000"> ret</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
<font color="#008080">if</font><font color="#000000"> ret</font><font color="#0000FF">=</font><font color="#004600">CURLE_HTTP_RETURNED_ERROR</font><font color="#008080"> then</font>
<font color="#000080"><i>    /* a HTTP response error problem */</i></font>
<font color="#008080">end if</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: Along with HTTP.
          <br>
          <br>
            Return value: <a href="curl_easy_setopt.htm">curl_easy_setoptf</a>() returns <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if HTTP is enabled, and
          <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not, whereas
            <a href="curl_easy_setopt.htm">curl_easy_setopt</a> terminates in error if HTTP is not supported.
          <br>
          <br>
            See also: CURLOPT_HTTP200ALIASES, CURLOPT_KEEP_SENDING_ON_ERROR
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_KEEP_SENDING_ON_ERROR</small>
         </td>
         <td>
            Keep sending on HTTP >= 300 errors. CURLOPT_KEEP_SENDING_ON_ERROR
         </td>
        </tr>
        <tr>
         <td>
          <b>NETWORK OPTIONS</b>
         </td>
         <td>
          <small><br><a name="CURLOPT_URL"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_URL</small>
         </td>
         <td>
            Synopsis: <a href="CURLcode.htm">CURLcode</a> res = <a href="curl_easy_setopt.htm">curl_easy_setoptf</a>(<a href="atom.htm">atom</a> curl, CURLOPT_URL,
                                                                                                                     <a href="string.htm">string</a> URL)<br>
            or: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_URL,
                                                                    <a href="string.htm">string</a> URL)
          <br>
          <br>
            Specify the URL to work with. The parameter should be a string (or char *) which must be URL-encoded in the following format:
          <br>
          <br>
            scheme:/
          <wbr>/host:port/path
          <br>
          <br>
            For a greater explanation of the format please see
          <a href="javascript:ExternalLink('ext375');" id="ext375" style="color:#9B5565">http://www.ietf.org/rfc/rfc3986.txt</a>.
          <br>
          <br>
            libcurl doesn&rsquo;t validate the syntax or use this variable until the transfer is issued.
          <br>
            Even if you set a crazy value here, <a href="curl_easy_setopt.htm">curl_easy_setopt</a> will still return
          <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a>.
          <br>
          <br>
            If the given URL is missing a scheme name (such as "http://" or "ftp://" etc) then libcurl will make a guess based on the host.
          <br>
            If the outermost sub-domain name matches DICT, FTP, IMAP, LDAP, POP3 or SMTP then that protocol will be used, otherwise HTTP will be used.
          <br>
            Since 7.45.0 guessing can be disabled by setting a default protocol, see CURLOPT_DEFAULT_PROTOCOL for details.
          <br>
          <br>
            Should the protocol, either that specified by the scheme or deduced by libcurl from the host name, not be supported by libcurl then
          <a href="CURLcode.htm#CURLE_UNSUPPORTED_PROTOCOL">CURLE_UNSUPPORTED_PROTOCOL</a> will be returned from either the
          <a href="curl_easy_perform.htm">curl_easy_perform</a> or 
            <a href="curl_multi_perform.htm">curl_multi_perform</a> functions when you call them.
          <br>
            Use
          <a href="curl_version_info.htm">curl_version_info</a> for detailed information of which protocols are supported by the build of libcurl you are using.
          <br>
          <br>
            CURLOPT_PROTOCOLS can be used to limit what protocols libcurl will use for this transfer, independent of what libcurl has been compiled to support.
          <br>
            That may be useful if you accept the URL from an external source and want to limit the accessibility.
          <br>
          <br>
            CURLOPT_URL is the only option that must be set before a transfer is started.
          <br>
          <br>
            The host part of the URL contains the address of the server that you want to connect to.
          <br>
            This can be the fully qualified domain name of the server, the local network name of the machine on your network or 
            the IP address of the server or machine represented by either an IPv4 or IPv6 address. For example:
            <br>
            <br>
            <pre>
http://www.example.com/

http://hostname/

http://192.168.0.1/

http://[2001:1890:1112:1::20]/
            </pre>
            <br>
            <br>
            It is also possible to specify the user name, password and any supported login options as part of the host, for the following protocols, 
            when connecting to servers that require authentication:
            <br>
            <br>
            <pre>
http://user:password@www.example.com

ftp://user:password@ftp.example.com

smb://domain%2fuser:password@server.example.com

imap://user:password;options@mail.example.com

pop3://user:password;options@mail.example.com

smtp://user:password;options@mail.example.com
            </pre>
            <br>
            <br>
            At present only IMAP, POP3 and SMTP support login options as part of the host.
          <br>
            For more information about the login options in URL syntax please see RFC 2384, RFC 5092 and IETF draft draft-earhart-url-smtp-00.txt (Added in 7.31.0).
          <br>
          <br>
            The port is optional and when not specified libcurl will use the default port based on the determined or specified protocol:
          <br>
            80 for HTTP, 21 for FTP and 25 for SMTP, etc. The following examples show how to specify the port:
            <br>
            <br>
            <pre>
http://www.example.com:8080/ - [1]

smtp://mail.example.com:587/ - [2]
            </pre>
            <br>
            <br>
            [1] This will connect to a web server using port 8080 rather than 80.
          <br>
            [2] This will connect to a SMTP server on the alternative mail port.
          <br>
          <br>
            The path part of the URL is protocol specific and whilst some examples are given below this list is not conclusive:
          <h3>HTTP</h3>

            The path part of a HTTP request specifies the file to retrieve and from what directory.
          <br>
            If the directory is not specified then the web server&rsquo;s root directory is used.
          <br>
            If the file is omitted then the default document will be retrieved for either the directory specified or the root directory.
          <br>
            The exact resource returned for each URL is entirely dependent on the server&rsquo;s configuration.
          <br>
            <br>
            <pre>
http://www.example.com - [1]

http://www.example.com/index.html - [2]

http://www.example.com/contactus/ - [3]
            </pre>
            <br>
            <br>
            [1] This gets the main page from the web server.
          <br>
            [2] This returns the main page by explicitly requesting it.
          <br>
            [3] This returns the default document from the contactus directory.
          <h3>FTP</h3>

            The path part of an FTP request specifies the file to retrieve and from what directory.
          <br>
            If the file part is omitted then libcurl downloads the directory listing for the directory specified.
          <br>
            If the directory is omitted then the directory listing for the root / home directory will be returned.
            <br>
            <br>
            <pre>
ftp://ftp.example.com - [1]

ftp://ftp.example.com/readme.txt - [2]

ftp://ftp.example.com/libcurl/readme.txt - [3]

ftp://user:password@ftp.example.com/readme.txt - [4]

ftp://user:password@ftp.example.com//readme.txt - [5]
            </pre>
            <br>
            <br>
            [1] This retrieves the directory listing for the root directory.
          <br>
            [2] This downloads the file readme.txt from the root directory.
          <br>
            [3] This downloads readme.txt from the libcurl directory.
          <br>
            [4] This retrieves the readme.txt file from the user&rsquo;s home directory.
          <br>
            When a username and password is specified, everything that is specified in the path part is relative to the user&rsquo;s home directory.
          <br>
            To retrieve files from the root directory or a directory underneath the root directory then the absolute path must be specified by prepending 
            an additional forward slash to the beginning of the path.
          <br>
            [5] This retrieves the readme.txt from the root directory when logging in as a specified user.
          <h3>SMTP</h3>

            The path part of a SMTP request specifies the host name to present during communication with the mail server.
          <br>
            If the path is omitted then libcurl will attempt to resolve the local computer&rsquo;s host name.
          <br>
            However, this may not return the fully qualified domain name that is required by some mail servers and specifying this path 
            allows you to set an alternative name, such as your machine&rsquo;s fully qualified domain name, which you might have obtained 
            from an external function such as gethostname or getaddrinfo.
            <br>
            <br>
            <pre>
smtp://mail.example.com - [1]

smtp://mail.example.com/client.example.com - [2]
            </pre>
            <br>
            <br>
            [1] This connects to the mail server at example.com and sends your local computer&rsquo;s host name in the HELO / EHLO command.
          <br>
            [2] This will send client.example.com in the HELO / EHLO command to the mail server at example.com.
          <h3>POP3</h3>

            The path part of a POP3 request specifies the message ID to retrieve.
          <br>
            If the ID is not specified then a list of waiting messages is returned instead.
            <br>
            <br>
            <pre>
pop3://user:password@mail.example.com - [1]

pop3://user:password@mail.example.com/1 - [2]
            </pre>
            <br>
            <br>
            [1] This lists the available messages for the user
          <br>
            [2] This retrieves the first message for the user
          <h3>IMAP</h3>

            The path part of an IMAP request not only specifies the mailbox to list (Added in 7.30.0) or select, 
            but can also be used to check the UIDVALIDITY of the mailbox, to specify the UID, SECTION (Added in 7.30.0) 
            and PARTIAL octets (Added in 7.37.0) of the message to fetch and to specify what messages to search for (Added in 7.37.0).
            <br>
            <br>
            <pre>
imap://user:password@mail.example.com - [1]

imap://user:password@mail.example.com/INBOX - [2]

imap://user:password@mail.example.com/INBOX/;UID=1 - [3]

imap://user:password@mail.example.com/INBOX;UIDVALIDITY=50/;UID=2 - [4]

imap://user:password@mail.example.com/INBOX/;UID=3/;SECTION=TEXT - [5]

imap://user:password@mail.example.com/INBOX/;UID=4/;PARTIAL=0.1024 - [6]

imap://user:password@mail.example.com/INBOX?NEW - [7]

imap://user:password@mail.example.com/INBOX?SUBJECT%20shadows - [8]
            </pre>
            <br>
            <br>
            [1] Performs a top level folder list
          <br>
            [2] Performs a folder list on the user&rsquo;s inbox
          <br>
            [3] Selects the user&rsquo;s inbox and fetches message 1
          <br>
            [4] Selects the user&rsquo;s inbox, checks the UIDVALIDITY of the mailbox is 50 and fetches message 2 if it is
          <br>
            [5] Selects the user&rsquo;s inbox and fetches the text portion of message 3
          <br>
            [6] Selects the user&rsquo;s inbox and fetches the first 1024 octets of message 4
          <br>
            [7] Selects the user&rsquo;s inbox and checks for NEW messages
          <br>
            [8] Selects the user&rsquo;s inbox and searches for messages containing "shadows" in the subject line
          <br>
          <br>
            For more information about the individual components of an IMAP URL please see RFC 5092.
          <h3>SCP</h3>

            The path part of a SCP request specifies the file to retrieve and from what directory.
          <br>
            The file part may not be omitted. The file is taken as an absolute path from the root directory on the server.
          <br>
            To specify a path relative to the user&rsquo;s home directory on the server, prepend &tilde;/ to the path portion.
          <br>
            If the user name is not embedded in the URL, it can be set with the
            <a href="#CURLOPT_USERPWD">CURLOPT_USERPWD</a> or 
            <a href="#CURLOPT_USERNAME">CURLOPT_USERNAME</a> option.
            <br>
            <br>
            <pre>
scp://user@example.com/etc/issue - [1]

scp://example.com/~/my-file - [2]
            </pre>
            <br>
            <br>
            [1] This specifies the file /etc/issue
          <br>
            [2] This specifies the file my-file in the user&rsquo;s home directory on the server
          <h3>SFTP</h3>

            The path part of a SFTP request specifies the file to retrieve and from what directory.
          <br>
            If the file part is omitted then libcurl downloads the directory listing for the directory specified.
          <br>
            If the path ends in a / then a directory listing is returned instead of a file.
          <br>
            If the path is omitted entirely then the directory listing for the root / home directory will be returned.
          <br>
            If the user name is not embedded in the URL, it can be set with the
            <a href="#CURLOPT_USERPWD">CURLOPT_USERPWD</a> or 
            <a href="#CURLOPT_USERNAME">CURLOPT_USERNAME</a> option.
            <br>
            <br>
            <pre>
sftp://user:password@example.com/etc/issue - [1]

sftp://user@example.com/~/my-file - [2]

sftp://ssh.example.com/~/Documents/ - [3]
            </pre>
            <br>
            <br>
            [1] This specifies the file /etc/issue
          <br>
            [2] This specifies the file my-file in the user&rsquo;s home directory
          <br>
            [3] This requests a directory listing of the Documents directory under the user&rsquo;s home directory
          <h3>SMB</h3>

            The path part of a SMB request specifies the file to retrieve and from what share and directory or the share to upload to and as such, may not be omitted.
          <br>
            If the user name is not embedded in the URL, it can be set with the
            <a href="#CURLOPT_USERPWD">CURLOPT_USERPWD</a> or 
            <a href="#CURLOPT_USERNAME">CURLOPT_USERNAME</a> option.
          <br>
            If the user name is embedded in the URL then it must contain the domain name and as such, the backslash must be URL encoded as %2f.
            <br>
            <br>
            <pre>
smb://server.example.com/files/issue - [1]

smb://server.example.com/files/ -T issue - [2]
            </pre>
            <br>
            <br>
            [1] This specifies the file "issue" located in the root of the "files" share
          <br>
            [2] This specifies the file "issue" will be uploaded to the root of the "files" share.
          <h3>LDAP</h3>

            The path part of a LDAP request can be used to specify the: Distinguished Name, Attributes, Scope, Filter and Extension for a LDAP search.
          <br>
            Each field is separated by a question mark and when that field is not required an empty string with the question mark separator should be included.
            <br>
            <br>
            <pre>
ldap://ldap.example.com/o=My%20Organisation - [1]

ldap://ldap.example.com/o=My%20Organisation?postalAddress - [2]

ldap://ldap.example.com/?rootDomainNamingContext - [3]
            </pre>
            <br>
            <br>
            [1] This will perform a LDAP search with the DN as My Organisation.
          <br>
            [2] This will perform the same search but will only return postalAddress attributes.
          <br>
            [3] This specifies an empty DN and requests information about the rootDomainNamingContext attribute for an Active Directory server.
          <br>
          <br>
            For more information about the individual components of a LDAP URL please see RFC 4516.
          <h3>RTMP</h3>

            There&rsquo;s no official URL spec for RTMP so libcurl uses the URL syntax supported by the underlying librtmp library.
          <br>
            It has a syntax where it wants a traditional URL, followed by a space and a series of space-separated name=value pairs.
          <br>
          <br>
            While space is not typically a "legal" letter, libcurl accepts them.
          <br>
            When a user wants to pass in a '#' (hash) character it will be treated as a fragment and get cut off by libcurl if provided literally.
          <br>
            You will instead have to escape it by providing it as backslash and its ASCII value in hexadecimal: "\23".
          <br>
          <br>
            The application does not have to keep the string around after setting this option.
          <h3>DEFAULT</h3>

            There is no default URL. If this option isn&rsquo;t set, no transfer can be performed.
          <h3>SECURITY CONCERNS</h3>

            Applications may at times find it convenient to allow users to specify URLs for various purposes and that string would then end up fed to this option.
          <br>
          <br>
            Getting a URL from an external untrusted party will bring reasons for several security concerns:
          <br>
          <br>
            If you have an application that runs as or in a server application, getting an unfiltered URL can easily trick your application 
            to access a local resource instead of a remote. Protecting yourself against localhost accesses is very hard when accepting user provided URLs.
          <br>
          <br>
            Such custom URLs can also access other ports than you planned as port numbers are part of the regular URL format.
          <br>
            The combination of a local host and a custom port number can allow external users to play tricks with your local services.
          <br>
          <br>
            Accepting external URLs may also use other protocols than http:// or other common ones. Restrict what accept with CURLOPT_PROTOCOLS.
          <br>
          <br>
            User provided URLs can also be made to point to sites that redirect further on (possibly to other protocols too).
          <br>
            Consider your CURLOPT_FOLLOWLOCATION and CURLOPT_REDIR_PROTOCOLS settings.
          <br>
          <br>
            Protocols: All
          <br>
          <br>
            Availability: POP3 and SMTP were added in 7.31.0
          <br>
          <br>
            Return value: <a href="curl_easy_setopt.htm">curl_easy_setoptf</a>() returns
            <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> on success or 
            <a href="CURLcode.htm#CURLE_OUT_OF_MEMORY">CURLE_OUT_OF_MEMORY</a> if there was insufficient heap space,
            whereas <a href="curl_easy_setopt.htm">curl_easy_setopt</a>() terminates on failure.
          <br>
          <br>
            Note that <a href="curl_easy_setopt.htm">curl_easy_setopt</a> won&rsquo;t actually parse the given string so given a bad URL, 
            it will not be detected until <a href="curl_easy_perform.htm">curl_easy_perform</a> or similar is called.
          <br>
          <br>
            See also:
          <a href="#CURLOPT_VERBOSE">CURLOPT_VERBOSE</a>, CURLOPT_PROTOCOLS, CURLOPT_FORBID_REUSE, CURLOPT_FRESH_CONNECT,
          <a href="curl_easy_perform.htm">curl_easy_perform</a>, CURLINFO_REDIRECT_URL, CURLOPT_PATH_AS_IS
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PATH_AS_IS</small>
         </td>
         <td>
            Disable squashing /../ and /./ sequences in the path. See CURLOPT_PATH_AS_IS
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROTOCOLS</small>
         </td>
         <td>
            Allowed protocols. See CURLOPT_PROTOCOLS
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_REDIR_PROTOCOLS</small>
         </td>
         <td>
            Protocols to allow redirects to. See CURLOPT_REDIR_PROTOCOLS
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_DEFAULT_PROTOCOL</small>
         </td>
         <td>
            Default protocol. See CURLOPT_DEFAULT_PROTOCOL
          <small><br><a name="CURLOPT_PROXY"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY</small>
         </td>
         <td>
            Proxy to use.
            <br>
            <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_PROXY,
                                                                          <a href="string.htm">string</a> proxy)
          <br>
          <br>
            Set the proxy to use for the upcoming request. The parameter should be a string (or char *) holding the host name or dotted numerical IP address.
          <br>
            A numerical IPv6 address must be written within [brackets].
          <br>
          <br>
            To specify port number in this string, append :[port] to the end of the host name.
          <br>
            The proxy&rsquo;s port number may optionally be specified with the separate option CURLOPT_PROXYPORT.
          <br>
            If not specified, libcurl will default to using port 1080 for proxies.
          <br>
          <br>
            The proxy string may be prefixed with [scheme]:/
          <wbr>/ to specify which kind of proxy is used.
          <br>
            http:// - HTTP Proxy. Default when no scheme or proxy type is specified.
          <br>
            https:// - HTTPS Proxy. (Added in 7.52.0 for OpenSSL, GnuTLS and NSS)
          <br>
            socks4:// - SOCKS4 Proxy.
          <br>
            socks4a:// - SOCKS4a Proxy. Proxy resolves URL hostname.
          <br>
            socks5:// - SOCKS5 Proxy.
          <br>
            socks5h:// - SOCKS5 Proxy. Proxy resolves URL hostname.
          <br>
          <br>
            Without a scheme prefix, <a href="#CURLOPT_PROXYTYPE">CURLOPT_PROXYTYPE</a> can be used to specify which kind of proxy the string identifies.
          <br>
          <br>
            When you tell the library to use a HTTP proxy, libcurl will transparently convert operations to HTTP even if you specify an FTP URL etc.
          <br>
            This may have an impact on what other features of the library you can use, such as CURLOPT_QUOTE and similar FTP specifics that don&rsquo;t 
            work unless you tunnel through the HTTP proxy. Such tunneling is activated with CURLOPT_HTTPPROXYTUNNEL.
          <br>
          <br>
            Setting the proxy string to "" (an empty string) will explicitly disable the use of a proxy, even if there is an environment variable set for it.
          <br>
          <br>
            A proxy host string can also include protocol scheme (http://) and embedded user + password.
          <br>
          <br>
            The application does not have to keep the string around after setting this option.
          <h3>Environment variables</h3>
            
            libcurl respects the proxy environment variables named http_proxy, ftp_proxy, sftp_proxy etc.
          <br>
            If set, libcurl will use the specified proxy for that URL scheme.
          <br>
            So for a "FTP://" URL, the ftp_proxy is considered.
          <br>
            all_proxy is used if no protocol specific proxy was set.
          <br>
          <br>
            If no_proxy (or NO_PROXY) is set, it can specify a list of host names to not use a proxy for (even if one of the previous mention variables are set).
          <br>
            That is the exact equivalent of setting the CURLOPT_NOPROXY option.
          <br>
          <br>
            The CURLOPT_PROXY and CURLOPT_NOPROXY options override environment variables.
          <br>
          <br>
            Default: Default is NULL, meaning no proxy is used.
          <br>
          <br>
            When you set a host name to use, do not assume that there&rsquo;s any particular single port number used widely for proxies. Specify it!
          <br>
          <br>
            Protocols: All except file://. Note that some protocols don&rsquo;t do very well over proxy.
          <br>
          <br>
            Availability
          <br>
            Since 7.14.1 the proxy environment variable names can include the protocol scheme.
          <br>
            Since 7.21.7 the proxy string supports the socks protocols as "schemes".
          <br>
            Since 7.50.2, unsupported schemes in proxy strings cause libcurl to return error.
          <br>
          <br>
            Return value: curl_easy_setoptf() returns
            <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if proxies are supported,
            <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not, or 
            <a href="CURLcode.htm#CURLE_OUT_OF_MEMORY">CURLE_OUT_OF_MEMORY</a> if there was insufficient heap space,
            whereas curl_easy_setopt() terminates on failure.
          <br>
          <br>
            See also: CURLOPT_PROXYPORT, CURLOPT_HTTPPROXYTUNNEL, <a href="#CURLOPT_PROXYTYPE">CURLOPT_PROXYTYPE</a>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PRE_PROXY</small>
         </td>
         <td>
            Socks proxy to use. See CURLOPT_PRE_PROXY
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXYPORT</small>
         </td>
         <td>
            Proxy port to use. See CURLOPT_PROXYPORT
          <small><br><a name="CURLOPT_PROXYTYPE"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXYTYPE</small>
         </td>
         <td>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_PROXYTYPE,
                                                                          <a href="integer.htm">integer</a> proxytype)
          <br>
          <br>
            Pass one of the values below to set the type of the proxy.
          <br>
            CURLPROXY_HTTP - HTTP Proxy. Default.
          <br>
            CURLPROXY_HTTPS - HTTPS Proxy. (Added in 7.52.0 for OpenSSL, GnuTLS and NSS)
          <br>
            CURLPROXY_HTTP_1_0 - HTTP 1.0 Proxy. This is very similar to CURLPROXY_HTTP except it uses HTTP/1.0 for any CONNECT tunnelling.
          <br>
            It does not change the HTTP version of the actual HTTP requests, controlled by CURLOPT_HTTP_VERSION.
          <br>
            CURLPROXY_SOCKS4 - SOCKS4 Proxy.
          <br>
            CURLPROXY_SOCKS4A - SOCKS4a Proxy. Proxy resolves URL hostname.
          <br>
            CURLPROXY_SOCKS5 - SOCKS5 Proxy.
          <br>
            CURLPROXY_SOCKS5_HOSTNAME - SOCKS5 Proxy. Proxy resolves URL hostname.
          <br>
          <br>
            Often it is more convenient to specify the proxy type with the scheme part of the <a href="#CURLOPT_PROXY">CURLOPT_PROXY</a> string.
          <br>
          <br>
            Default: CURLPROXY_HTTP
          <br>
          <br>
            Protocols: Most
          <br>
          <br>
            See also: <a href="#CURLOPT_PROXY">CURLOPT_PROXY</a>, CURLOPT_PROXYPORT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_NOPROXY</small>
         </td>
         <td>
            Filter out hosts from proxy use. CURLOPT_NOPROXY
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_HTTPPROXYTUNNEL</small>
         </td>
         <td>
            Tunnel through the HTTP proxy. CURLOPT_HTTPPROXYTUNNEL
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_CONNECT_TO</small>
         </td>
         <td>
            Connect to a specific host and port. See CURLOPT_CONNECT_TO
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SOCKS5_AUTH</small>
         </td>
         <td>
            Socks5 authentication methods. See CURLOPT_SOCKS5_AUTH
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SOCKS5_GSSAPI_SERVICE</small>
         </td>
         <td>
            Socks5 GSSAPI service name. CURLOPT_SOCKS5_GSSAPI_SERVICE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SOCKS5_GSSAPI_NEC</small>
         </td>
         <td>
            Socks5 GSSAPI NEC mode. See CURLOPT_SOCKS5_GSSAPI_NEC
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY_SERVICE_NAME</small>
         </td>
         <td>
            Proxy authentication service name. CURLOPT_PROXY_SERVICE_NAME
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SERVICE_NAME</small>
         </td>
         <td>
            Authentication service name. CURLOPT_SERVICE_NAME
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_INTERFACE</small>
         </td>
         <td>
            Bind connection locally to this. See CURLOPT_INTERFACE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_LOCALPORT</small>
         </td>
         <td>
            Bind connection locally to this port. See CURLOPT_LOCALPORT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_LOCALPORTRANGE</small>
         </td>
         <td>
            Bind connection locally to port range. See CURLOPT_LOCALPORTRANGE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_DNS_CACHE_TIMEOUT</small>
         </td>
         <td>
            Timeout for DNS cache. See CURLOPT_DNS_CACHE_TIMEOUT
          <small><br><a name="CURLOPT_DNS_USE_GLOBAL_CACHE"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small><span class="illegal">CURLOPT_DNS_USE_GLOBAL_CACHE</span></small>
         </td>
         <td>
            OBSOLETE Enable/Disable global DNS cache.
            <br>
            <br>
            Synopsis: <a href="CURLcode.htm">CURLcode</a> res = <a href="curl_easy_setopt.htm">curl_easy_setoptf</a>(<a href="atom.htm">atom</a> curl, 
                                                                                                                     <span class="illegal">CURLOPT_DNS_USE_GLOBAL_CACHE</span>,
                                                                                                                     <a href="integer.htm#bool">bool</a> enable)
            <br>
            <br>
            If the enable value is 1 (true), it tells curl to use a global DNS cache that will survive between easy handle creations and deletions. <br>
            This is not thread-safe and this will use a global variable.
            <br>
            <br>
            WARNING: this option is considered obsolete. Stop using it. Switch over to using the share interface instead! <br>
            See <a href="#CURLOPT_SHARE">CURLOPT_SHARE</a> and <a href="curl_share_init.htm">curl_share_init</a>.
            <br>
            <br>
            Default: 0
            <br>
            <br>
            Protocols: All
            <br>
            <br>
            Availability: Subject for removal in the future. Do not use!
            <br>
            <br>
            Return value: Returns <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if the option is supported, and 
            <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not.
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_BUFFERSIZE</small>
         </td>
         <td>
            Ask for alternate buffer size. See CURLOPT_BUFFERSIZE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PORT</small>
         </td>
         <td>
            Port number to connect to. See CURLOPT_PORT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_TCP_FASTOPEN</small>
         </td>
         <td>
            Enable TFO, TCP Fast Open. See CURLOPT_TCP_FASTOPEN
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_TCP_NODELAY</small>
         </td>
         <td>
            Disable the Nagle algorithm. See CURLOPT_TCP_NODELAY
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_ADDRESS_SCOPE</small>
         </td>
         <td>
            IPv6 scope for local addresses. See CURLOPT_ADDRESS_SCOPE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_TCP_KEEPALIVE</small>
         </td>
         <td>
            Enable TCP keep-alive. See CURLOPT_TCP_KEEPALIVE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_TCP_KEEPIDLE</small>
         </td>
         <td>
            Idle time before sending keep-alive. See CURLOPT_TCP_KEEPIDLE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_TCP_KEEPINTVL</small>
         </td>
         <td>
            Interval between keep-alive probes. See CURLOPT_TCP_KEEPINTVL
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_UNIX_SOCKET_PATH</small>
         </td>
         <td>
            Path to a Unix domain socket. See CURLOPT_UNIX_SOCKET_PATH
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_ABSTRACT_UNIX_SOCKET</small>
         </td>
         <td>
            Path to an abstract Unix domain socket. See CURLOPT_ABSTRACT_UNIX_SOCKET
         </td>
        </tr>
        <tr>
         <td>
          <b>NAMES and PASSWORDS OPTIONS</b>
         </td>
         <td>
             (Authentication)
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_NETRC</small>
         </td>
         <td>
            Enable .netrc parsing. See CURLOPT_NETRC
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_NETRC_FILE</small>
         </td>
         <td>
            .netrc file name. See CURLOPT_NETRC_FILE
          <small><br><a name="CURLOPT_USERPWD"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_USERPWD</small>
         </td>
         <td>
            Set the user name and password to use in authentication.
          <br>
          <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_USERPWD, 
                                                                          <a href="string.htm">string</a> userpwd)
          <br>
          <br>
            Pass a string (or char *) as parameter, pointing to a login details string for the connection, 
            the format of which is: <i>&lt;user name&gt;</i>:<i>&lt;password&gt;</i>.
          <br>
          <br>
            When using Kerberos V5 authentication with a Windows based server, you should specify the user name part with the domain name in order for 
            the server to successfully obtain a Kerberos Ticket. If you don&rsquo;t then the initial part of the authentication handshake may fail.
          <br>
          <br>
            When using NTLM, the user name can be specified simply as the user name without the domain name should the server be part of a single domain and forest.
          <br>
          <br>
            To specify the domain name use either Down-Level Logon Name or UPN (User Principal Name) formats. 
            For example, EXAMPLE\user and user@example.com respectively.
          <br>
          <br>
            Some HTTP servers (on Windows) support inclusion of the domain for Basic authentication as well.
          <br>
          <br>
            When using HTTP and CURLOPT_FOLLOWLOCATION, libcurl might perform several requests to possibly different hosts.
          <br>
            libcurl will only send this user and password information to hosts using the initial host name (unless CURLOPT_UNRESTRICTED_AUTH is set), 
            so if libcurl follows locations to other hosts it will not send the user and password to those.
          <br>
            This is enforced to prevent accidental information leakage.
          <br>
          <br>
            Use <a href="#CURLOPT_HTTPAUTH">CURLOPT_HTTPAUTH</a> to specify the authentication method for HTTP based connections or 
            CURLOPT_LOGIN_OPTIONS to control IMAP, POP3 and SMTP options.
          <br>
          <br>
            The user and password strings are not URL decoded, so there&rsquo;s no way to send in a user name containing a colon using this option.
          <br>
            Use <a href="#CURLOPT_USERNAME">CURLOPT_USERNAME</a> for that, or include it in the URL.
          <br>
          <br>
            The application does not have to keep the string around after setting this option.
          <br>
          <br>
            Default: NULL
          <br>
          <br>
            Protocols: Most
          <br>
          <br>
            Example: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(curl, CURLOPT_USERPWD, "clark:kent")
          <br>
          <br>
            Availability: Always
          <br>
          <br>
            Return value: curl_easy_setoptf() returns <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> on success or 
            <a href="CURLcode.htm#CURLE_OUT_OF_MEMORY">CURLE_OUT_OF_MEMORY</a> if there was insufficient heap space,
            whereas curl_easy_setopt() terminates on error.
          <br>
          <br>
            See also: <a href="#CURLOPT_USERNAME">CURLOPT_USERNAME</a>, <a href="#CURLOPT_PASSWORD">CURLOPT_PASSWORD</a>, CURLOPT_PROXYUSERPWD
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXYUSERPWD</small>
         </td>
         <td>
            Proxy user name and password. See CURLOPT_PROXYUSERPWD
          <small><br><a name="CURLOPT_USERNAME"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_USERNAME</small>
         </td>
         <td>
            Set the user name to use in authentication.
            <br>
            <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_USERNAME, 
                                                                          <a href="string.htm">string</a> username)
            <br>
            <br>
            Pass a string (or char *) as parameter, pointing to the (zero terminated) user name to use for the transfer.
            <br>
            <br>
            CURLOPT_USERNAME sets the user name to be used in protocol authentication. <br>
            You should not use this option together with the (older) <a href="#CURLOPT_USERPWD">CURLOPT_USERPWD</a> option.
            <br>
            <br>
            When using Kerberos V5 authentication with a Windows based server, you should include the domain name in order 
            for the server to successfully obtain a Kerberos Ticket. <br>
            If you don&rsquot then the initial part of the authentication handshake may fail.
            <br>
            <br>
            When using NTLM, the user name can be specified simply as the user name without the domain name should the server be part of a single domain and forest.
            <br>
            <br>
            To include the domain name use either Down-Level Logon Name or UPN (User Principal Name) formats. <br>
            For example, EXAMPLE\user and user@example.com respectively.
            <br>
            <br>
            Some HTTP servers (on Windows) support inclusion of the domain for Basic authentication as well.
            <br>
            <br>
            To specify the password and login options, along with the user name, use the <a href="#CURLOPT_PASSWORD">CURLOPT_PASSWORD</a> and CURLOPT_LOGIN_OPTIONS options.
            <br>
            <br>
            The application does not have to keep the string around after setting this option.
            <br>
            <br>
            Default: blank
            <br>
            <br>
            Protocols: Most
            <br>
            <br>
            Example: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(curl, CURLOPT_USERNAME, "clark")
            <br>
            <br>
            Availability: Added in 7.19.1
            <br>
            <br>
            Return value: curl_easy_setoptf() returns <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> on success,
            <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if the option is not supported, or
            <a href="CURLcode.htm#CURLE_OUT_OF_MEMORY">CURLE_OUT_OF_MEMORY</a> if there was insufficient heap space,
            whereas curl_easy_setopt() terminates on error.
            <br>
            <br>
            See also: <a href="#CURLOPT_USERPWD">CURLOPT_USERPWD</a>, <a href="#CURLOPT_PASSWORD">CURLOPT_PASSWORD</a>, 
            <a href="#CURLOPT_HTTPAUTH">CURLOPT_HTTPAUTH</a>, <a href="#CURLOPT_PROXYAUTH">CURLOPT_PROXYAUTH</a>
          <small><br><a name="CURLOPT_PASSWORD"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PASSWORD</small>
         </td>
         <td>
            Set the password to use in authentication.
            <br>
            <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_PASSWORD, 
                                                                          <a href="string.htm">string</a> pwd)
            <br>
            <br>
            Pass a string (or char *) as parameter, pointing to the (zero terminated) password to use for the transfer.
            <br>
            <br>
            The CURLOPT_PASSWORD option should be used in conjunction with the <a href="#CURLOPT_USERNAME">CURLOPT_USERNAME</a> option.
            <br>
            <br>
            The application does not have to keep the string around after setting this option.
            <br>
            <br>
            Default: blank
            <br>
            <br>
            Protocols: Most
            <br>
            <br>
            Example: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(curl, CURLOPT_PASSWORD, "qwerty")
            <br>
            <br>
            Availability: Added in 7.19.1
            <br>
            <br>
            Return value: curl_easy_setoptf() returns <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> on success,
            <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if the option is not supported, or
            <a href="CURLcode.htm#CURLE_OUT_OF_MEMORY">CURLE_OUT_OF_MEMORY</a> if there was insufficient heap space,
            whereas curl_easy_setopt() terminates on error.
            <br>
            <br>
            See also: <a href="#CURLOPT_USERPWD">CURLOPT_USERPWD</a>, <a href="#CURLOPT_USERNAME">CURLOPT_USERNAME</a>, 
            <a href="#CURLOPT_HTTPAUTH">CURLOPT_HTTPAUTH</a>, <a href="#CURLOPT_PROXYAUTH">CURLOPT_PROXYAUTH</a>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_LOGIN_OPTIONS</small>
         </td>
         <td>
            Login options. See CURLOPT_LOGIN_OPTIONS
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXYUSERNAME</small>
         </td>
         <td>
            Proxy user name. See CURLOPT_PROXYUSERNAME
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXYPASSWORD</small>
         </td>
         <td>
            Proxy password. See CURLOPT_PROXYPASSWORD
          <small><br><a name="CURLOPT_HTTPAUTH"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_HTTPAUTH</small>
         </td>
         <td>
            Set HTTP server authentication methods to try.
            <br>
            <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_HTTPAUTH, 
                                                                          <a href="atom.htm">atom</a> bitmask)
            <br>
            <br>
            bitmask: tells libcurl which authentication method(s) you want it to use speaking to the remote server.<br>
            <br>
            <br>
            The available bits are listed below. If more than one bit is set, libcurl will first query the site to see 
            which authentication methods it supports and then pick the best one you allow it to use. <br>
            For some methods, this will induce an extra network round-trip. <br>
            Set the actual name and password with the <a href="#CURLOPT_USERPWD">CURLOPT_USERPWD</a> option or with the 
            <a href="#CURLOPT_USERNAME">CURLOPT_USERNAME</a> and the <a href="#CURLOPT_PASSWORD">CURLOPT_PASSWORD</a> options.
            <br>
            <br>
            For authentication with a proxy, see <a href="#CURLOPT_PROXYAUTH">CURLOPT_PROXYAUTH</a>.
            <br>
            <br>
            <dl>
             <dt>
              CURLAUTH_BASIC - HTTP Basic authentication. 
             </dt>
             <dd>
              This is the default choice, and the only method that is in wide-spread use and supported virtually everywhere. <br>
              This sends the user name and password over the network in plain text, easily captured by others.
             </dd>
            </dl>
            <dl>
             <dt>
              CURLAUTH_DIGEST - HTTP Digest authentication.
             </dt>
             <dd>
              Digest authentication is defined in RFC 2617 and is a more secure way to do authentication over public networks than the regular old-fashioned Basic method.
             </dd>
            </dl>
            <dl>
             <dt>
              CURLAUTH_DIGEST_IE - HTTP Digest authentication with an IE flavor.
             </dt>
             <dd>
              Digest authentication is defined in RFC 2617 and is a more secure way to do authentication over public networks than the regular old-fashioned Basic method. <br>
              The IE flavor is simply that libcurl will use a special "quirk" that IE is known to have used before version 7 and that some servers require the client to use.
             </dd>
            </dl>
            <dl>
             <dt>
              CURLAUTH_BEARER - HTTP Bearer token authentication, used primarily in OAuth 2.0 protocol.
             </dt>
             <dd>
              You can set the Bearer token to use with CURLOPT_XOAUTH2_BEARER.
             </dd>
            </dl>
            <dl>
             <dt>
              CURLAUTH_NEGOTIATE - HTTP Negotiate (SPNEGO) authentication.
             </dt>
             <dd>
              Negotiate authentication is defined in RFC 4559 and is the most secure way to perform authentication over HTTP.
              <br>
              <br>
              You need to build libcurl with a suitable GSS-API library or SSPI on Windows for this to work.
             </dd>
            </dl>
            <dl>
             <dt>
              CURLAUTH_NTLM - HTTP NTLM authentication.
             </dt>
             <dd>
              A proprietary protocol invented and used by Microsoft. It uses a challenge-response and hash concept similar to Digest, to prevent the password from being eavesdropped.
              <br>
              <br>
              You need to build libcurl with either OpenSSL, GnuTLS or NSS support for this option to work, or build libcurl on Windows with SSPI support.
             </dd>
            </dl>
            <dl>
             <dt>
              CURLAUTH_NTLM_WB - NTLM delegating to winbind helper.
             </dt>
             <dd>
              Authentication is performed by a separate binary application that is executed when needed. The name of the application is specified at compile time but is typically /usr/bin/ntlm_auth
              <br>
              <br>
              Note that libcurl will fork when necessary to run the winbind application and kill it when complete, calling waitpid() to await its exit when done. On POSIX operating systems, killing the process will cause a SIGCHLD signal to be raised (regardless of whether CURLOPT_NOSIGNAL is set), which must be handled intelligently by the application. In particular, the application must not unconditionally call wait() in its SIGCHLD signal handler to avoid being subject to a race condition. This behavior is subject to change in future versions of libcurl.
             </dd>
            </dl>
            <dl>
             <dt>
              CURLAUTH_ANY - This is a convenience macro that sets all bits and thus makes libcurl pick any it finds suitable.
             </dt>
             <dd>
              libcurl will automatically select the one it finds most secure.
             </dd>
            </dl>
            <dl>
             <dt>
              CURLAUTH_ANYSAFE - This is a convenience macro that sets all bits except Basic and thus makes libcurl pick any it finds suitable.
             </dt>
             <dd>
              libcurl will automatically select the one it finds most secure.
             </dd>
            </dl>
            <dl>
             <dt>
              CURLAUTH_ONLY - This is a meta symbol.
             </dt>
             <dd>
              OR this value together with a single specific auth value to force libcurl to probe for un-restricted auth and if not, only that single auth algorithm is acceptable.
             </dd>
            </dl>
            <br>
            <br>
            Default: CURLAUTH_BASIC
            <br>
            <br>
            Protocols: HTTP
            <br>
            <br>
            Example: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(curl, CURLOPT_HTTPAUTH, CURLAUTH_ANY)
            <br>
            <br>
            Availability: Option Added in 7.10.6. CURLAUTH_DIGEST_IE was added in 7.19.3 CURLAUTH_ONLY was added in 7.21.3 
                          CURLAUTH_NTLM_WB was added in 7.22.0
                          CURLAUTH_BEARER was added in 7.61.0
            <br>
            <br>
            Return value: curl_easy_setoptf() returns <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if the option is supported,
            <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not, or
            <a href="CURLcode.htm#CURLE_NOT_BUILT_IN">CURLE_NOT_BUILT_IN</a> if the bitmask specified no supported 
            authentication methods, whereas curl_easy_setopt() terminates on error.
            <br>
            <br>
            See also: <a href="#CURLOPT_USERPWD">CURLOPT_USERPWD</a>, <a href="#CURLOPT_USERNAME">CURLOPT_USERNAME</a>, 
            <a href="#CURLOPT_PASSWORD">CURLOPT_PASSWORD</a>, <a href="#CURLOPT_PROXYAUTH">CURLOPT_PROXYAUTH</a>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_TLSAUTH_USERNAME</small>
         </td>
         <td>
            TLS authentication user name. See CURLOPT_TLSAUTH_USERNAME
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY_TLSAUTH_USERNAME</small>
         </td>
         <td>
            Proxy TLS authentication user name. See CURLOPT_PROXY_TLSAUTH_USERNAME
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_TLSAUTH_PASSWORD</small>
         </td>
         <td>
            TLS authentication password. See CURLOPT_TLSAUTH_PASSWORD
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY_TLSAUTH_PASSWORD</small>
         </td>
         <td>
            Proxy TLS authentication password. See CURLOPT_PROXY_TLSAUTH_PASSWORD
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_TLSAUTH_TYPE</small>
         </td>
         <td>
            TLS authentication methods. See CURLOPT_TLSAUTH_TYPE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY_TLSAUTH_TYPE</small>
         </td>
         <td>
           Proxy TLS authentication methods. See CURLOPT_PROXY_TLSAUTH_TYPE
          <small><br><a name="CURLOPT_PROXYAUTH"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXYAUTH</small>
         </td>
         <td>
            Set HTTP proxy authentication methods to try.
            <br>
            <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_PROXYAUTH, 
                                                                          <a href="atom.htm">atom</a> bitmask)
            <br>
            <br>
            bitmask: tells libcurl which HTTP authentication method(s) you want it to use for your proxy authentication.<br>
            The bitmask can be constructed by or-ing together the bits fully listed and described under <a href="#CURLOPT_HTTPAUTH">CURLOPT_HTTPAUTH</a>.
            If more than one bit is set, libcurl will first query the site to see what authentication methods it supports and 
            then pick the best one you allow it to use. <br>
            For some methods, this will induce an extra network round-trip. <br>
            Set the actual name and password with the <a href="#CURLOPT_USERPWD">CURLOPT_USERPWD</a> option or with the 
            <a href="#CURLOPT_USERNAME">CURLOPT_USERNAME</a> and the <a href="#CURLOPT_PASSWORD">CURLOPT_PASSWORD</a> options.
            <br>
            <br>
            Default: CURLAUTH_BASIC
            <br>
            <br>
            Protocols: HTTP
            <br>
            <br>
            Example: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(curl, CURLOPT_PROXYAUTH, CURLAUTH_ANY)
            <br>
            <br>
            Availability: Added in 7.10.7
            <br>
            <br>
            Return value: curl_easy_setoptf() returns <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if the option is supported,
            <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not, or
            <a href="CURLcode.htm#CURLE_NOT_BUILT_IN">CURLE_NOT_BUILT_IN</a> if the bitmask specified no supported 
            authentication methods, whereas curl_easy_setopt() terminates on error.
            <br>
            <br>
            See also: <a href="#CURLOPT_PROXY">CURLOPT_PROXY</a>, <a href="#CURLOPT_PROXYTYPE">CURLOPT_PROXYTYPE</a>, 
            CURLOPT_PROXYUSERPWD, CURLOPT_PROXYPORT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SASL_IR</small>
         </td>
         <td>
            Enable SASL initial response. See CURLOPT_SASL_IR
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_XOAUTH2_BEARER</small>
         </td>
         <td>
            OAuth2 bearer token. See CURLOPT_XOAUTH2_BEARER
         </td>
        </tr>
        <tr>
         <td>
          <b>HTTP OPTIONS</b>
         </td>
         <td>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_AUTOREFERER</small>
         </td>
         <td>
            Automatically set Referer: header. See CURLOPT_AUTOREFERER
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_ACCEPT_ENCODING</small>
         </td>
         <td>
            Accept-Encoding and automatic decompressing data. See CURLOPT_ACCEPT_ENCODING
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_TRANSFER_ENCODING</small>
         </td>
         <td>
            Request Transfer-Encoding. See CURLOPT_TRANSFER_ENCODING
          <small><br><a name="CURLOPT_FOLLOWLOCATION"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_FOLLOWLOCATION</small>
         </td>
         <td>
            Follow HTTP 3xx redirects.
          <br>
          <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_FOLLOWLOCATION, 
                                                                          <a href="integer.htm#bool">bool</a> enable)
          <br>
          <br>
            A parameter of true (1) tells the library to follow any Location: header that the server sends as part of a HTTP header in a 3xx response.
          <br>
            The Location: header can specify a relative or an absolute URL to follow.
          <br>
          <br>
            libcurl will issue another request for the new URL and follow new Location: headers all the way until no more such headers are returned.
          <br>
            CURLOPT_MAXREDIRS can be used to limit the number of redirects libcurl will follow.
          <br>
          <br>
            libcurl limits what protocols it automatically follows to.
          <br>
            The accepted protocols are set with CURLOPT_REDIR_PROTOCOLS.
          <br>
            By default libcurl will allow all protocols on redirect except those disabled for security reasons: 
            Since 7.19.4 FILE and SCP are disabled, and since 7.40.0 SMB and SMBS are also disabled.
          <br>
          <br>
            When following a Location:, the 3xx response code that redirected it also dictates which request method it will use in the subsequent request: 
            For 301, 302 and 303 responses libcurl will switch method to GET unless CURLOPT_POSTREDIR instructs libcurl otherwise.
          <br>
            All other 3xx codes will make libcurl send the same method again.
          <br>
          <br>
            For users who think the existing location following is too naive, too simple or just lacks features, it is very easy to instead implement 
            your own redirect follow logic with the use of <a href="curl_easy_getinfo.htm">curl_easy_getinfo</a>()&rsquo;s 
            CURLINFO_REDIRECT_URL option instead of using CURLOPT_FOLLOWLOCATION.
          <br>
          <br>
            Default: false (0), disabled
          <br>
          <br>
            Protocols: HTTP(S)
          <br>
          <br>
            Example
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-g9bd-4273-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-g9bd-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom curl = curl_easy_init()
curl_easy_setopt(curl, CURLOPT_URL, "https://example.com/")
/* example.com is redirected, so we tell libcurl to follow redirection */
curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, true)
CURLcode ret = curl_easy_perform(curl)
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "https://example.com/"</font><font color="#0000FF">)</font>
<font color="#000080"><i>/* example.com is redirected, so we tell libcurl to follow redirection */</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_FOLLOWLOCATION</font><font color="#0000FF">,</font><font color="#004600"> true</font><font color="#0000FF">)</font>
<font color="#5E005E">CURLcode</font><font color="#000000"> ret</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: Along with HTTP
          <br>
          <br>
            Return value: curl_easy_setoptf() returns <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if HTTP is supported, and
          <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not, whereas
            curl_easy_setopt() terminates in error if HTTP is not supported.
          <br>
          <br>
            See also: CURLOPT_REDIR_PROTOCOLS, CURLOPT_PROTOCOLS, CURLOPT_POSTREDIR, CURLINFO_REDIRECT_URL, CURLINFO_REDIRECT_COUNT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_UNRESTRICTED_AUTH</small>
         </td>
         <td>
            Do not restrict authentication to original host. CURLOPT_UNRESTRICTED_AUTH
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_MAXREDIRS</small>
         </td>
         <td>
            Maximum number of redirects to follow. See CURLOPT_MAXREDIRS
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_POSTREDIR</small>
         </td>
         <td>
            How to act on redirects after POST. See CURLOPT_POSTREDIR
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PUT</small>
         </td>
         <td>
            Issue a HTTP PUT request. See CURLOPT_PUT
          <small><br><a name="CURLOPT_POST"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_POST</small>
         </td>
         <td>
            Issue a HTTP POST request.
          <br>
          <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_POST, 
                                                                          <a href="integer.htm#bool">bool</a> post)
          <br>
          <br>
            A parameter set to true(1) tells libcurl to do a regular HTTP post.
          <br>
            This will also make the library use a "Content-Type: application/x-www-form-urlencoded" header.
          <br>
            (This is by far the most commonly used POST method).
          <br>
          <br>
          Use one of <a href="#CURLOPT_POSTFIELDS">CURLOPT_POSTFIELDS</a> or <a href="#CURLOPT_COPYPOSTFIELDS">CURLOPT_COPYPOSTFIELDS</a> 
          options to specify what data to post and <a href="#CURLOPT_POSTFIELDSIZE">CURLOPT_POSTFIELDSIZE</a> or 
          CURLOPT_POSTFIELDSIZE_LARGE to set the data size.
          <br>
          <br>
            Optionally, you can provide data to POST using the <a href="#CURLOPT_READFUNCTION">CURLOPT_READFUNCTION</a> and 
            <a href="#CURLOPT_READDATA">CURLOPT_READDATA</a> options but then you must make sure to not set
          <a href="#CURLOPT_POSTFIELDS">CURLOPT_POSTFIELDS</a> to anything but NULL.
          <br>
            When providing data with a callback, you must transmit it using chunked transfer-encoding or you must set the size of the data 
            with the <a href="#CURLOPT_POSTFIELDSIZE">CURLOPT_POSTFIELDSIZE</a> or CURLOPT_POSTFIELDSIZE_LARGE options.
          <br>
            To enable chunked encoding, you simply pass in the appropriate Transfer-Encoding header, see the post-callback.c example.
          <br>
          <br>
            You can override the default POST Content-Type: header by setting your own with <a href="#CURLOPT_HTTPHEADER">CURLOPT_HTTPHEADER</a>.
          <br>
          <br>
            Using POST with HTTP 1.1 implies the use of a "Expect: 100-continue" header.
          <br>
            You can disable this header with <a href="#CURLOPT_HTTPHEADER">CURLOPT_HTTPHEADER</a> as usual.
          <br>
          <br>
            If you use POST to a HTTP 1.1 server, you can send data without knowing the size before starting the POST if you use chunked encoding.
          <br>
            You enable this by adding a header like "Transfer-Encoding: chunked" with <a href="#CURLOPT_HTTPHEADER">CURLOPT_HTTPHEADER</a>.
          <br>
            With HTTP 1.0 or without chunked transfer, you must specify the size in the request.
          <br>
          <br>
            When setting CURLOPT_POST to 1, it will automatically set CURLOPT_NOBODY to 0.
          <br>
          <br>
            If you issue a POST request and then want to make a HEAD or GET using the same re-used handle, you must explicitly set 
            the new request type using CURLOPT_NOBODY or CURLOPT_HTTPGET or similar.
          <br>
          <br>
            Default: false(0), disabled
          <br>
          <br>
            Protocols: HTTP
          <br>
          <br>
            Example
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-he1p-4273-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-he1p-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom curl = curl_easy_init()
curl_easy_setopt(curl, CURLOPT_URL, "http://example.com/foo.bin")
curl_easy_setopt(curl, CURLOPT_POST, true)
 
/* set up the read callback with CURLOPT_READFUNCTION */
 
ret = curl_easy_perform(curl)
 
curl_easy_cleanup(curl)
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "http://example.com/foo.bin"</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_POST</font><font color="#0000FF">,</font><font color="#004600"> true</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>/* set up the read callback with CURLOPT_READFUNCTION */</i></font>
<font color="#C0C0C0"> </font>
<font color="#000000">ret</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#5E005E">curl_easy_cleanup</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: Along with HTTP
          <br>
          <br>
            Return value: curl_easy_setoptf() returns <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if HTTP is supported, and
          <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not, whereas curl_easy_setopt() terminates
            in error if HTTP is not supported.
          <br>
          <br>
            See also:
          <a href="#CURLOPT_POSTFIELDS">CURLOPT_POSTFIELDS</a>, CURLOPT_HTTPPOST
          <small><br><a name="CURLOPT_POSTFIELDS"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_POSTFIELDS</small>
         </td>
         <td>
            Specify data to POST to server.
          <br>
          <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_POSTFIELDS, 
                                                                          <a href="string.htm">nullable_string</a> postdata)
          <br>
          <br>
            Specify the full data to send in a HTTP POST operation.
          <br>
            You must make sure that the data is formatted the way you want the server to receive it.
          <br>
            libcurl will not convert or encode it for you in any way.
          <br>
            For example, the web server may assume that this data is url-encoded.
          <br>
          <br>
            The data pointed to is NOT copied by the library: as a consequence, it must be preserved by the calling application until the associated transfer finishes.
          <br>
            This behaviour can be changed (so libcurl does copy the data) by setting the <a href="#CURLOPT_COPYPOSTFIELDS">CURLOPT_COPYPOSTFIELDS</a> option.
          <br>
          <br>
            This POST is a normal application/x-www-form-urlencoded kind (and libcurl will set that Content-Type by default when this option is used), 
            which is commonly used by HTML forms.
          <br>
            Change Content-Type with <a href="#CURLOPT_HTTPHEADER">CURLOPT_HTTPHEADER</a>.
          <br>
          <br>
            You can use curl_easy_escape to url-encode your data, if necessary.
          <br>
            It returns a pointer to an encoded string that can be passed as postdata.
          <br>
          <br>
            Using CURLOPT_POSTFIELDS implies CURLOPT_POST.
          <br>
          <br>
            If CURLOPT_POSTFIELDS is explicitly set to NULL then libcurl will get the POST data from the read callback.
          <br>
            If you want to send a zero-byte POST set CURLOPT_POSTFIELDS to an empty string, or set CURLOPT_POST to 1 and
          <a href="#CURLOPT_POSTFIELDSIZE">CURLOPT_POSTFIELDSIZE</a> to 0.
          <br>
          <br>
            Using POST with HTTP 1.1 implies the use of a "Expect: 100-continue" header, and libcurl will add that header automatically 
            if the POST is either known to be larger than 1024 bytes or if the expected size is unknown.
          <br>
            You can disable this header with <a href="#CURLOPT_HTTPHEADER">CURLOPT_HTTPHEADER</a> as usual.
          <br>
          <br>
            To make multipart/formdata posts (aka RFC 2388-posts), check out the CURLOPT_HTTPPOST option combined with curl_formadd.
          <br>
          <br>
            Default: NULL
          <br>
          <br>
            Protocols: HTTP
          <br>
          <br>
            Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-j5ab-4273-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-j5ab-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom curl = curl_easy_init()
string data = "data to send"
curl_easy_setopt(curl, CURLOPT_URL, "http://example.com");
/* size of the POST data */
curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, length(data))
/* pass in a pointer to the data - libcurl will not copy */
curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data)
curl_easy_perform(curl)
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#004080">string</font><font color="#000000"> data</font><font color="#0000FF"> =</font><font color="#008000"> "data to send"</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "http://example.com"</font><font color="#0000FF">);</font>
<font color="#000080"><i>/* size of the POST data */</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_POSTFIELDSIZE</font><font color="#0000FF">,</font><font color="#7060A8"> length</font><font color="#800000">(</font><font color="#000000">data</font><font color="#800000">)</font><font color="#0000FF">)</font>
<font color="#000080"><i>/* pass in a pointer to the data - libcurl will not copy */</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_POSTFIELDS</font><font color="#0000FF">,</font><font color="#000000"> data</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: Always
          <br>
          <br>
            See also:
            <a href="#CURLOPT_POSTFIELDSIZE">CURLOPT_POSTFIELDSIZE</a>, 
            <a href="#CURLOPT_READFUNCTION">CURLOPT_READFUNCTION</a>
            <small><br><a name="CURLOPT_POSTFIELDSIZE"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_POSTFIELDSIZE</small>
         </td>
         <td>
            The POST data is this big.
          <br>
          <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_POSTFIELDSIZE, 
                                                                          <a href="integer.htm">integer</a> postdatasize)
          <br>
          <br>
            If you want to post data to the server without having libcurl do a strlen() to measure the data size, this option must be used.
          <br>
            When this option is used you can post fully binary data, which otherwise is likely to fail.
          <br>
            If set to -1, the library will use strlen() to get the size.
          <br>
          <br>
            If you post more than 2GB, use CURLOPT_POSTFIELDSIZE_LARGE.
          <br>
          <br>
            Default: -1
          <br>
          <br>
            Protocols: HTTP (NB does not work on https)
          <br>
          <br>
            Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-k177-4273-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-k177-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom curl = curl_easy_init()
string data = "data to send"
curl_easy_setopt(curl, CURLOPT_URL, "http://example.com")
/* size of the POST data */
curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, length(data)) 
curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data)
curl_easy_perform(curl)
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#004080">string</font><font color="#000000"> data</font><font color="#0000FF"> =</font><font color="#008000"> "data to send"</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "http://example.com"</font><font color="#0000FF">)</font>
<font color="#000080"><i>/* size of the POST data */</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_POSTFIELDSIZE</font><font color="#0000FF">,</font><font color="#7060A8"> length</font><font color="#800000">(</font><font color="#000000">data</font><font color="#800000">)</font><font color="#0000FF">) </font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_POSTFIELDS</font><font color="#0000FF">,</font><font color="#000000"> data</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: Along with HTTP
          <br>
          <br>
            Return value: curl_easy_setoptf() returns <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if HTTP is supported, and
          <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not, whereas curl_easy_setopt() terminates
            in error if HTTP is not supported.
          <br>
          <br>
            See also:
            <a href="#CURLOPT_POSTFIELDS">CURLOPT_POSTFIELDS</a>,
            <a href="#CURLOPT_POSTFIELDSIZE_LARGE">CURLOPT_POSTFIELDSIZE_LARGE</a>
            <small><br><a name="CURLOPT_POSTFIELDSIZE_LARGE"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_POSTFIELDSIZE_LARGE</small>
         </td>
         <td>
          The POST data is this big.
          <br>
          <br>
          Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_POSTFIELDSIZE_LARGE, 
                                                                        <a href="atom.htm">atom</a> postdatasize)
          <br>
          <br>
          If you want to post data to the server without having libcurl do a strlen() to measure the data size, this option must be used. <br>
          When this option is used you can post fully binary data, which otherwise is likely to fail. <br>
          If this size is set to -1, the library will use strlen() to get the size.
          <br>
          <br>
          Default: -1
          <br>
          <br>
          Protocols: HTTP(S)
          <br>
          <br>
          Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_83a11j23-k158-4777-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_83a11j23-k158-4777-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom curl = curl_easy_init()
atom pData = large_chunk    -- (or string)
atom length_of_data         -- set somehow
curl_easy_setopt(curl, CURLOPT_URL, "http://example.com")
curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE_LARGE, length_of_data)
curl_easy_setopt(curl, CURLOPT_POSTFIELDS, pData)
curl_easy_perform(curl)
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#004080">atom</font><font color="#000000"> pData</font><font color="#0000FF"> =</font><font color="#000000"> large_chunk   </font><font color="#000080"><i> -- (or string)</i></font>
<font color="#004080">atom</font><font color="#000000"> length_of_data        </font><font color="#000080"><i> -- set somehow</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "http://example.com"</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_POSTFIELDSIZE_LARGE</font><font color="#0000FF">,</font><font color="#000000"> length_of_data</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_POSTFIELDS</font><font color="#0000FF">,</font><font color="#000000"> pData</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
          Availability: Along with HTTP
          <br>
          <br>
          Return value: curl_easy_setoptf() returns <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if HTTP is supported, and
          <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not, whereas curl_easy_setopt() terminates
          in error if HTTP is not supported.
          <br>
          <br>
          See also:
          <a href="#CURLOPT_POSTFIELDS">CURLOPT_POSTFIELDS</a>,
          <a href="#CURLOPT_COPYPOSTFIELDS">CURLOPT_COPYPOSTFIELDS</a>,
          <a href="#CURLOPT_POSTFIELDSIZE">CURLOPT_POSTFIELDSIZE</a>
          <small><br><a name="CURLOPT_COPYPOSTFIELDS"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_COPYPOSTFIELDS</small>
         </td>
         <td>
            Send a POST with this data - and copy it.
          <br>
          <br>
          Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_COPYPOSTFIELDS, 
                                                                        <a href="string.htm">atom_string</a> pData)
          <br>
          <br>
          Pass a char* as parameter, which should be the full data to post in a HTTP POST operation. <br>
          It behaves as the CURLOPT_POSTFIELDS option, but the original data is instead copied by the library, 
          allowing the application to overwrite the original data after setting this option.
          <br>
          <br>
          Because data are copied, care must be taken when using this option in conjunction with CURLOPT_POSTFIELDSIZE or CURLOPT_POSTFIELDSIZE_LARGE: 
          If the size has not been set prior to CURLOPT_COPYPOSTFIELDS, the data is assumed to be a zero terminated string; else the stored size informs 
          the library about the byte count to copy. In any case, the size must not be changed after CURLOPT_COPYPOSTFIELDS, unless another 
          CURLOPT_POSTFIELDS or CURLOPT_COPYPOSTFIELDS option is issued.
          <br>
          <br>
          Default: NULL
          <br>
          <br>
          Protocols: HTTP(S)
          <br>
          <br>
          Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_83a11j23-k158-4777-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_83a11j23-k158-4777-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom curl = curl_easy_init()
string buffer = "data to send"
atom length_of_data = length(buffer)
curl_easy_setopt(curl, CURLOPT_URL, "http://example.com")
curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, length_of_data)
curl_easy_setopt(curl, CURLOPT_COPYPOSTFIELDS, pData)
curl_easy_perform(curl)
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#004080">string</font><font color="#000000"> buffer</font><font color="#0000FF"> =</font><font color="#008000"> "data to send"</font>
<font color="#004080">atom</font><font color="#000000"> length_of_data</font><font color="#0000FF"> =</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">buffer</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "http://example.com"</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_POSTFIELDSIZE</font><font color="#0000FF">,</font><font color="#000000"> length_of_data</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#000000"> CURLOPT_COPYPOSTFIELDS</font><font color="#0000FF">,</font><font color="#000000"> pData</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div><small>
          Availability: Added in 7.17.1
          <br>
          <br>
          Return value: curl_easy_setoptf() returns <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if the option is supported, and
          <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not, or 
          <a href="CURLcode.htm#CURLE_OUT_OF_MEMORY">CURLE_OUT_OF_MEMORY</a> if there was insufficient heap space,
          whereas curl_easy_setopt() terminates in error if anything goes wrong.
          <br>
          <br>
          See also:
          <a href="#CURLOPT_POSTFIELDS">CURLOPT_POSTFIELDS</a>,
          <a href="#CURLOPT_POSTFIELDSIZE">CURLOPT_POSTFIELDSIZE</a>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_HTTPPOST</small>
         </td>
         <td>
            Multipart formpost HTTP POST. See CURLOPT_HTTPPOST
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_REFERER</small>
         </td>
         <td>
            Referer: header. See CURLOPT_REFERER
            <small><br><a name="CURLOPT_USERAGENT"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_USERAGENT</small>
         </td>
         <td>
            Set HTTP user-agent header.
          <br>
          <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_USERAGENT, 
                                                                          <a href="string.htm">string</a> user_agent)
          <br>
          <br>
            The string will be used to set the User-Agent: header in the HTTP request sent to the remote server.
          <br>
            This can be used to fool servers or scripts.
          <br>
            You can also set any custom header with <a href="#CURLOPT_HTTPHEADER">CURLOPT_HTTPHEADER</a>.
          <br>
          <br>
            The application does not have to keep the string around after setting this option.
          <br>
          <br>
            Default: NULL, no User-Agent: header is used by default.
          <br>
          <br>
            Protocols: HTTP, HTTPS
          <br>
          <br>
            Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-l3mx-4273-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-l3mx-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom curl = curl_easy_init()
curl_easy_setopt(curl, CURLOPT_URL, "http://example.com")
curl_easy_setopt(curl, CURLOPT_USERAGENT, "Dark Secret Ninja/1.0")
curl_easy_perform(curl)
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "http://example.com"</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_USERAGENT</font><font color="#0000FF">,</font><font color="#008000"> "Dark Secret Ninja/1.0"</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: As long as HTTP is supported
          <br>
          <br>
            Return value: curl_easy_setoptf() returns <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if HTTP is supported, 
            <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not, or 
            <a href="CURLcode.htm#CURLE_OUT_OF_MEMORY">CURLE_OUT_OF_MEMORY</a> if there was insufficient heap space,
            whereas curl_easy_setopt() terminates in error if either HTTP is not supported or there was insufficient
            heap space.
          <br>
          <br>
            See also: CURLOPT_REFERER, <a href="#CURLOPT_HTTPHEADER">CURLOPT_HTTPHEADER</a>
            <small><br><a name="CURLOPT_HTTPHEADER"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_HTTPHEADER</small>
         </td>
         <td>
            Set custom HTTP headers.
          <br>
          <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_HTTPHEADER, 
                                                                          <a href="atom.htm">atom</a> headers)
          <br>
          <br>
            Pass an slist (linked list of strings) of HTTP headers to pass to the server and/or proxy in your HTTP request.
          <br>
            The same list can be used for both host and proxy requests!
          <br>
          <br>
            The linked list should be a fully valid list of struct curl_slist structs properly filled in.
          <br>
            Use <a href="curl_slist_append.htm">curl_slist_append</a> to create the list and 
            <a href="curl_slist_free_all.htm">curl_slist_free_all</a> to clean up an entire list.
          <br>
            If you add a header that is otherwise generated and used by libcurl internally, your added one will be used instead.
          <br>
            If you add a header with no content as in 'Accept:' (no data on the right side of the colon), the internally used header will get disabled.
          <br>
            With this option you can add new headers, replace internal headers and remove internal headers.
          <br>
            To add a header with no content (nothing to the right side of the colon), use the form 'MyHeader;' (note the ending semicolon).
          <br>
          <br>
            The headers included in the linked list must not be CRLF-terminated, because libcurl adds CRLF after each header item.
          <br>
            Failure to comply with this will result in strange bugs because the server will most likely ignore part of the headers you specified.
          <br>
          <br>
            The first line in a request (containing the method, usually a GET or POST) is not a header and cannot be replaced using this option.
          <br>
            Only the lines following the request-line are headers.
          <br>
            Adding this method line in this list of headers will only cause your request to send an invalid header.
          <br>
            Use
          <a href="#CURLOPT_CUSTOMREQUEST">CURLOPT_CUSTOMREQUEST</a> to change the method.
          <br>
          <br>
            When this option is passed to curl_easy_setopt, libcurl will not copy the entire list so you must keep it around until you no longer 
            use this handle for a transfer before you call <a href="curl_slist_free_all.htm">curl_slist_free_all</a> on the list.
          <br>
          <br>
            Pass a NULL to this option to reset back to no custom headers.
          <br>
          <br>
            The most commonly replaced headers have "shortcuts" in the options CURLOPT_COOKIE, CURLOPT_USERAGENT and CURLOPT_REFERER. We recommend using those.
          <br>
          <br>
            There is an alternative option that sets or replaces headers only for requests that are sent with CONNECT to a proxy: CURLOPT_PROXYHEADER.
          <br>
            Use CURLOPT_HEADEROPT to control the behavior.
          <br>
          <h3>Security concerns</h3>
            By default, this option makes libcurl send the given headers in all HTTP requests done by this handle.
          <br>
            You should therefore use this option with caution if you for example connect to the remote site using a proxy and a CONNECT request,
          <br>
            you should to consider if that proxy is supposed to also get the headers.
          <br>
            They may be private or otherwise sensitive to leak.
          <br>
          <br>
            Use CURLOPT_HEADEROPT to make the headers only get sent to where you intend them to get sent.
          <br>
          <br>
            Default: NULL
          <br>
          <br>
            Protocols: HTTP
          <br>
          <br>
            Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-m4nq-4273-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-m4nq-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom curl = curl_easy_init()
curl_easy_setopt(curl, CURLOPT_URL, "http://example.com")
atom headers = NULL
headers = curl_slist_append(headers, "Shoesize: 10")
headers = curl_slist_append(headers, "Accept:")
curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers)

curl_easy_perform(curl)
 
/* always cleanup */
curl_easy_cleanup(curl)
curl_slist_free_all(headers)
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "http://example.com"</font><font color="#0000FF">)</font>
<font color="#004080">atom</font><font color="#000000"> headers</font><font color="#0000FF"> =</font><font color="#004600"> NULL</font>
<font color="#000000">headers</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_slist_append</font><font color="#0000FF">(</font><font color="#000000">headers</font><font color="#0000FF">,</font><font color="#008000"> "Shoesize: 10"</font><font color="#0000FF">)</font>
<font color="#000000">headers</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_slist_append</font><font color="#0000FF">(</font><font color="#000000">headers</font><font color="#0000FF">,</font><font color="#008000"> "Accept:"</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_HTTPHEADER</font><font color="#0000FF">,</font><font color="#000000"> headers</font><font color="#0000FF">)
</font>
<font color="#5E005E">curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>/* always cleanup */</i></font>
<font color="#5E005E">curl_easy_cleanup</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_slist_free_all</font><font color="#0000FF">(</font><font color="#000000">headers</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: As long as HTTP is enabled
          <br>
          <br>
            Return value: curl_easy_setoptf() returns <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if HTTP is supported, and
          <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not, whereas curl_easy_setopt() terminates
            in error if HTTP is not supported.
          <br>
          <br>
            See also:
          <a href="#CURLOPT_CUSTOMREQUEST">CURLOPT_CUSTOMREQUEST</a>, CURLOPT_HEADEROPT, CURLOPT_PROXYHEADER, CURLOPT_HEADER
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_HEADEROPT</small>
         </td>
         <td>
            Control custom headers. See CURLOPT_HEADEROPT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXYHEADER</small>
         </td>
         <td>
            Custom HTTP headers sent to proxy. See CURLOPT_PROXYHEADER
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_HTTP200ALIASES</small>
         </td>
         <td>
            Alternative versions of 200 OK. See CURLOPT_HTTP200ALIASES
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_COOKIE</small>
         </td>
         <td>
            Cookie(s) to send. See CURLOPT_COOKIE
            <small><br><a name="CURLOPT_COOKIEFILE"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_COOKIEFILE</small>
         </td>
         <td>
            File name to read cookies from.
          <br>
          <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_COOKIEFILE, 
                                                                          <a href="string.htm">string</a> filename)
          <br>
          <br>
            Specify the file name of your file holding cookie data to read.
          <br>
            The cookie data can be in either the old Netscape / Mozilla cookie data format or just regular HTTP headers (Set-Cookie style) dumped to a file.
          <br>
          <br>
            It also enables the cookie engine, making libcurl parse and send cookies on subsequent requests with this handle.
          <br>
          <br>
            Given an empty or non-existing file or by passing the empty string ("") to this option, you can enable the cookie engine without reading any initial cookies.
          <br>
          <br>
            This option only reads cookies. To make libcurl write cookies to file, see CURLOPT_COOKIEJAR.
          <br>
          <br>
            Exercise caution if you are using this option and multiple transfers may occur.
          <br>
            If you use the Set-Cookie format and don&rsquo;t specify a domain then the cookie is sent for any domain (even after redirects are followed) 
            and cannot be modified by a server-set cookie.
          <br>
            If a server sets a cookie of the same name then both will be sent on a future transfer to that server, likely not what you intended.
          <br>
            To address these issues set a domain in Set-Cookie (doing that will include sub-domains) or use the Netscape format.
          <br>
          <br>
            If you use this option multiple times, you just add more files to read. Subsequent files will add more cookies.
          <br>
          <br>
            The application does not have to keep the string around after setting this option.
          <br>
          <br>
            Default: NULL
          <br>
          <br>
            Protocols: HTTP
          <br>
          <br>
            Example
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-n2gh-4273-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-n2gh-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
include builtins\libcurl.e
 
atom curl = curl_easy_init()
curl_easy_setopt(curl, CURLOPT_URL, "http://example.com/foo.bin")

-- get cookies from an existing file
curl_easy_setopt(curl, CURLOPT_COOKIEFILE, "/tmp/cookies.txt")

object ret = curl_easy_perform(curl)
curl_easy_cleanup(curl)
</eucode-->
<pre>
<font color="#008080">include</font><font color="#000000"> builtins\libcurl.e</font>
<font color="#C0C0C0"> </font>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "http://example.com/foo.bin"</font><font color="#0000FF">)
</font>
<font color="#000080"><i>-- get cookies from an existing file</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_COOKIEFILE</font><font color="#0000FF">,</font><font color="#008000"> "/tmp/cookies.txt"</font><font color="#0000FF">)
</font>
<font color="#004080">object</font><font color="#000000"> ret</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_cleanup</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: As long as HTTP is supported
          <br>
          <br>
            Return value: curl_easy_setoptf() returns <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if HTTP is supported, and
          <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not, whereas curl_easy_setopt() terminates
            in error if HTTP is not supported.
          <br>
          <br>
            See also: CURLOPT_COOKIE, CURLOPT_COOKIEJAR
            <small><br><a name="CURLOPT_COOKIEJAR"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_COOKIEJAR</small>
         </td>
         <td>
            File name to write cookies to.
          <br>
          <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_COOKIEJAR, 
                                                                          <a href="string.htm">string</a> filename)
          <br>
          <br>
            This will make libcurl write all internally known cookies to the specified file when <a href="curl_easy_cleanup.htm">curl_easy_cleanup</a> is called.
          <br>
            If no cookies are known, no file will be created.
          <br>
            Specify "-" as filename to instead have the cookies written to stdout.
          <br>
            Using this option also enables cookies for this session, so if you for example follow a location it will make matching cookies get sent accordingly.
          <br>
          <br>
            Note that libcurl doesn&rsquo;t read any cookies from the cookie jar.
          <br>
            If you want to read cookies from a file, use CURLOPT_COOKIEFILE.
          <br>
          <br>
            If the cookie jar file can&rsquo;t be created or written to (when the <a href="curl_easy_cleanup.htm">curl_easy_cleanup</a> is called), libcurl 
            will not and cannot report an error for this.
          <br>
            Using
          <a href="#CURLOPT_VERBOSE">CURLOPT_VERBOSE</a> or <a href="#CURLOPT_DEBUGFUNCTION">CURLOPT_DEBUGFUNCTION</a> will get a warning to display, 
            but that is the only visible feedback you get about this possibly lethal situation.
          <br>
          <br>
            Since 7.43.0 cookies that were imported in the Set-Cookie format without a domain name are not exported by this option.
          <br>
          <br>
            The application does not have to keep the string around after setting this option.
          <br>
          <br>
            Default: NULL
          <br>
          <br>
            Protocols: HTTP
          <br>
          <br>
            Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-oops-4273-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-oops-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom curl = curl_easy_init()
curl_easy_setopt(curl, CURLOPT_URL, "http://example.com/foo.bin")
 
/* export cookies to this file when closing the handle */
curl_easy_setopt(curl, CURLOPT_COOKIEJAR, "/tmp/cookies.txt");
 
ret = curl_easy_perform(curl)
 
/* close the handle, write the cookies! */
curl_easy_cleanup(curl)
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "http://example.com/foo.bin"</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>/* export cookies to this file when closing the handle */</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_COOKIEJAR</font><font color="#0000FF">,</font><font color="#008000"> "/tmp/cookies.txt"</font><font color="#0000FF">);</font>
<font color="#C0C0C0"> </font>
<font color="#000000">ret</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>/* close the handle, write the cookies! */</i></font>
<font color="#5E005E">curl_easy_cleanup</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: Along with HTTP
          <br>
          <br>
            Return value: curl_easy_setoptf() returns
            <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if HTTP is supported,
            <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not, or 
            <a href="CURLcode.htm#CURLE_OUT_OF_MEMORY">CURLE_OUT_OF_MEMORY</a> if there was insufficient heap space,
            whereas curl_easy_setopt() terminates in error for either failure condition.
          <br>
          <br>
            See also: CURLOPT_COOKIEFILE, CURLOPT_COOKIE,
          <a href="#CURLOPT_COOKIELIST">CURLOPT_COOKIELIST</a>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_COOKIESESSION</small>
         </td>
         <td>
            Start a new cookie session. See CURLOPT_COOKIESESSION
            <small><br><a name="CURLOPT_COOKIELIST"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_COOKIELIST</small>
         </td>
         <td>
            Add to (feed cookie into cookie engine) or manipulate cookies held in memory.
          <br>
          <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_COOKIELIST, 
                                                                          <a href="string.htm">string</a> cookie)
          <br>
          <br>
            The cookie can be either a single line in Netscape / Mozilla format or just regular HTTP-style header (Set-Cookie: ...) format.
          <br>
            This will also enable the cookie engine.
          <br>
            This adds that single cookie to the internal cookie store.
          <br>
          <br>
            Exercise caution if you are using this option and multiple transfers may occur.
          <br>
            If you use the Set-Cookie format and don&rsquo;t specify a domain then the cookie is sent for any domain (even after redirects are followed) 
            and cannot be modified by a server-set cookie.
          <br>
            If a server sets a cookie of the same name (or maybe you&rsquo;ve imported one) then both will be sent on a future transfer to that server, 
            likely not what you intended.
          <br>
            To address these issues set a domain in Set-Cookie (doing that will include sub-domains) or use the Netscape format as shown in EXAMPLE.
          <br>
          <br>
            Additionally, there are commands available that perform actions if you pass in these exact strings:
          <br>
            "ALL" - erases all cookies held in memory
          <br>
            "SESS" - erases all session cookies held in memory
          <br>
            "FLUSH" - writes all known cookies to the file specified by CURLOPT_COOKIEJAR
          <br>
            "RELOAD" - loads all cookies from the files specified by CURLOPT_COOKIEFILE
          <br>
          <br>
            Default: NULL
          <br>
          <br>
            Protocols: HTTP
          <br>
          <br>
            Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-p5js-4273-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-p5js-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
/* This example shows an inline import of a cookie in Netscape format.
You can set the cookie as HttpOnly to prevent XSS attacks by prepending
#HttpOnly_ to the hostname. That may be useful if the cookie will later
be imported by a browser.
*/
 
string my_cookie = "example.com\tFALSE\t/\tFALSE\t0\tfoo\tbar"
                -- Hostname = example.com,
                -- Include subdomains = FALSE,
                -- Path = \,
                -- Secure = FALSE,
                -- Expiry = 0, (==Session)
                -- Name = foo,
                -- Value = bar

/* my_cookie is imported immediately via CURLOPT_COOKIELIST. */
curl_easy_setopt(curl, CURLOPT_COOKIELIST, my_cookie)
 
/* The list of cookies in cookies.txt will not be imported until right
before a transfer is performed. Cookies in the list that have the same
hostname, path and name as in my_cookie are skipped. That is because
libcurl has already imported my_cookie and it's considered a "live"
cookie. A live cookie won't be replaced by one read from a file.
*/
curl_easy_setopt(curl, CURLOPT_COOKIEFILE, "cookies.txt")   /* import */
 
/* Cookies are exported after curl_easy_cleanup is called. The server
may have added, deleted or modified cookies by then. The cookies that
were skipped on import are not exported.
*/
curl_easy_setopt(curl, CURLOPT_COOKIEJAR, "cookies.txt")  /* export */
 
curl_easy_perform(curl)  /* cookies imported from cookies.txt */
 
curl_easy_cleanup(curl)  /* cookies exported to cookies.txt */
</eucode-->
<pre>
<font color="#000080"><i>/* This example shows an inline import of a cookie in Netscape format.
You can set the cookie as HttpOnly to prevent XSS attacks by prepending
#HttpOnly_ to the hostname. That may be useful if the cookie will later
be imported by a browser.
*/</i></font>
<font color="#C0C0C0"> </font>
<font color="#004080">string</font><font color="#000000"> my_cookie</font><font color="#0000FF"> =</font><font color="#008000"> "example.com\tFALSE\t/\tFALSE\t0\tfoo\tbar"</font>
<font color="#000080"><i>                -- Hostname = example.com,
                -- Include subdomains = FALSE,
                -- Path = \,
                -- Secure = FALSE,
                -- Expiry = 0, (==Session)
                -- Name = foo,
                -- Value = bar

/* my_cookie is imported immediately via CURLOPT_COOKIELIST. */</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_COOKIELIST</font><font color="#0000FF">,</font><font color="#000000"> my_cookie</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>/* The list of cookies in cookies.txt will not be imported until right
before a transfer is performed. Cookies in the list that have the same
hostname, path and name as in my_cookie are skipped. That is because
libcurl has already imported my_cookie and it's considered a "live"
cookie. A live cookie won't be replaced by one read from a file.
*/</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_COOKIEFILE</font><font color="#0000FF">,</font><font color="#008000"> "cookies.txt"</font><font color="#0000FF">)  </font><font color="#000080"><i> /* import */</i></font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>/* Cookies are exported after curl_easy_cleanup is called. The server
may have added, deleted or modified cookies by then. The cookies that
were skipped on import are not exported.
*/</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_COOKIEJAR</font><font color="#0000FF">,</font><font color="#008000"> "cookies.txt"</font><font color="#0000FF">) </font><font color="#000080"><i> /* export */</i></font>
<font color="#C0C0C0"> </font>
<font color="#5E005E">curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">) </font><font color="#000080"><i> /* cookies imported from cookies.txt */</i></font>
<font color="#C0C0C0"> </font>
<font color="#5E005E">curl_easy_cleanup</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">) </font><font color="#000080"><i> /* cookies exported to cookies.txt */</i></font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability:
          <br>
            ALL was added in 7.14.1
          <br>
            SESS was added in 7.15.4
          <br>
            FLUSH was added in 7.17.1
          <br>
            RELOAD was added in 7.39.0
          <br>
          <br>
            Return value: curl_easy_setoptf() returns
            <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if the option is supported,
            <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not, or 
            <a href="CURLcode.htm#CURLE_OUT_OF_MEMORY">CURLE_OUT_OF_MEMORY</a> if there was insufficient heap space,
            whereas curl_easy_setopt() terminates in error for either failure condition.
          <br>
          <br>
            See also: CURLOPT_COOKIEFILE, CURLOPT_COOKIEJAR, CURLOPT_COOKIE, CURLINFO_COOKIELIST
            <small><br><a name="CURLOPT_HTTPGET"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_HTTPGET</small>
         </td>
         <td>
            Ask for a HTTP GET request.
          <br>
          <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_HTTPGET, 
                                                                          <a href="integer.htm#bool">bool</a> useget)
          <br>
          <br>
            If useget is true (1), this forces the HTTP request to get back to using GET.
          <br>
            Usable if a POST, HEAD, PUT, etc has been used previously using the same curl handle.
          <br>
          <br>
            When setting CURLOPT_HTTPGET to 1, it will automatically set CURLOPT_NOBODY to 0 and CURLOPT_UPLOAD to 0.
          <br>
          <br>
            Default: false (0)
          <br>
          <br>
            Protocols: HTTP(S)
          <br>
          <br>
            Example
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-q1jz-4273-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-q1jz-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
curl = curl_easy_init()
curl_easy_setopt(curl, CURLOPT_URL, "http://example.com")
 
/* use a GET to fetch this */
curl_easy_setopt(curl, CURLOPT_HTTPGET, true)
 
/* Perform the request */
curl_easy_perform(curl)
</eucode-->
<pre>
<font color="#000000">curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "http://example.com"</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>/* use a GET to fetch this */</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_HTTPGET</font><font color="#0000FF">,</font><font color="#004600"> true</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>/* Perform the request */</i></font>
<font color="#5E005E">curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: Along with HTTP
          <br>
          <br>
            Return value: curl_easy_setoptf() returns
          <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if HTTP is supported, and
          <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not,
            whereas curl_easy_setopt() terminates in error if HTTP is not supported.
          <br>
          <br>
            See also: CURLOPT_NOBODY, CURLOPT_UPLOAD
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_REQUEST_TARGET</small>
         </td>
         <td>
            Set the request target. CURLOPT_REQUEST_TARGET
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_HTTP_VERSION</small>
         </td>
         <td>
            HTTP version to use. CURLOPT_HTTP_VERSION
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_IGNORE_CONTENT_LENGTH</small>
         </td>
         <td>
            Ignore Content-Length. See CURLOPT_IGNORE_CONTENT_LENGTH
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_HTTP_CONTENT_DECODING</small>
         </td>
         <td>
            Disable Content decoding. See CURLOPT_HTTP_CONTENT_DECODING
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_HTTP_TRANSFER_DECODING</small>
         </td>
         <td>
            Disable Transfer decoding. See CURLOPT_HTTP_TRANSFER_DECODING
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_EXPECT_100_TIMEOUT_MS</small>
         </td>
         <td>
            100-continue timeout. See CURLOPT_EXPECT_100_TIMEOUT_MS
            <small><br><a name="CURLOPT_PIPEWAIT"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PIPEWAIT</small>
         </td>
         <td>
            Wait on connection to pipeline on it. (Wait for pipelining/multiplexing)
            <br>
            <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_PIPEWAIT, 
                                                                          <a href="integer.htm">integer</a> wait)
            <br>
            <br>
            Set wait to 1 to tell libcurl to prefer to wait for a connection to confirm or deny that it can do pipelining or multiplexing before continuing.
            <br>
            <br>
            When about to perform a new transfer that allows pipelining or multiplexing, libcurl will check for existing connections to re-use and pipeline on. <br>
            If no such connection exists it will immediately continue and create a fresh new connection to use.
            <br>
            <br>
            By setting this option to 1 - and having CURLMOPT_PIPELINING enabled for the multi handle this transfer is associated with - libcurl will 
            instead wait for the connection to reveal if it is possible to pipeline/multiplex on before it continues. <br>
            This enables libcurl to much better keep the number of connections to a minimum when using pipelining or multiplexing protocols.
            <br>
            <br>
            The effect thus becomes that with this option set, libcurl prefers to wait and re-use an existing connection for pipelining rather than the opposite: 
            prefer to open a new connection rather than waiting.
            <br>
            <br>
            The waiting time is as long as it takes for the connection to get up and for libcurl to get the necessary response back that informs it about its 
            protocol and support level.
            <br>
            <br>
            Default: 0 (off)
            <br>
            <br>
            Protocols: HTTP(S)
            <br>
            <br>
            Availability: Added in 7.43.0
            <br>
            <br>
            Return value: <a href="curl_easy_setopt.htm">curl_easy_setoptf</a>() returns <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if 
            the option is supported, and <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not, whereas
            <a href="curl_easy_setopt.htm">curl_easy_setopt</a> terminates in error if it is not supported.
            <br>
            <br>
            See also: CURLOPT_FORBID_REUSE, CURLOPT_FRESH_CONNECT, CURLMOPT_PIPELINING, CURLMOPT_MAX_HOST_CONNECTIONS
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_STREAM_DEPENDS</small>
         </td>
         <td>
            This HTTP/2 stream depends on another. See CURLOPT_STREAM_DEPENDS
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_STREAM_DEPENDS_E</small>
         </td>
         <td>
            This HTTP/2 stream depends on another exclusively. See CURLOPT_STREAM_DEPENDS_E
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_STREAM_WEIGHT</small>
         </td>
         <td>
            Set this HTTP/2 stream&rsquo;s weight. See CURLOPT_STREAM_WEIGHT
         </td>
        </tr>
        <tr>
         <td>
          <b>SMTP OPTIONS</b>
         </td>
         <td>
            <small><br><a name="CURLOPT_MAIL_FROM"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_MAIL_FROM</small>
         </td>
         <td>
            Specify the SMTP sender address.
            <br>
            <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_MAIL_FROM, 
                                                                          <a href="string.htm">string</a> from)
            <br>
            <br>
            Pass a string (or char *) as parameter, pointing to the (zero terminated) the sender&rsquo;s email address when sending SMTP mail with libcurl.
            <br>
            <br>
            An originator email address should be specified with angled brackets (&lt;&gt;) around it, which if not specified will be added automatically.
            <br>
            <br>
            If this parameter is not specified then an empty address will be sent to the mail server which may cause the email to be rejected.
            <br>
            <br>
            The application does not have to keep the string around after setting this option.
            <br>
            <br>
            Default: blank
            <br>
            <br>
            Protocols: SMTP
            <br>
            <br>
            Example: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(curl, CURLOPT_MAIL_FROM, "president@example.com")
            <br>
            <br>
            Availability: Added in 7.20.0
            <br>
            <br>
            Return value: curl_easy_setoptf() returns <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> on success,
            <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if the option is not supported, or
            <a href="CURLcode.htm#CURLE_OUT_OF_MEMORY">CURLE_OUT_OF_MEMORY</a> if there was insufficient heap space,
            whereas curl_easy_setopt() terminates on error.
            <br>
            <br>
            See also: <a href="#CURLOPT_MAIL_RCPT">CURLOPT_MAIL_RCPT</a>, CURLOPT_MAIL_AUTH
            <small><br><a name="CURLOPT_MAIL_RCPT"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_MAIL_RCPT</small>
         </td>
         <td>
            Set the list of SMTP mail recipients.
            <br>
            <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_MAIL_RCPT, 
                                                                          <a href="atom.htm">atom</a> slist_recipients)
            <br>
            <br>
            Pass a pointer to a linked list of recipients to pass to the server in your SMTP mail request. <br>
            The linked list should be a fully valid list of struct curl_slist structs properly filled in. <br>
            Use <a href="curl_slist_append.htm">curl_slist_append</a>() to create the list and 
            <a href="curl_slist_free_all.htm">curl_slist_free_all</a>() to clean up an entire list.
            <br>
            <br>
            When performing a mail transfer, each recipient should be specified within a pair of angled brackets (&lt;&gt;), however, 
            should you not use an angled bracket as the first character libcurl will assume you provided a single email address 
            and enclose that address within brackets for you.
            <br>
            <br>
            When performing an address verification (VRFY command), each recipient should be specified as the user name or user 
            name and domain (as per Section 3.5 of RFC 5321).
            <br>
            <br>
            When performing a mailing list expand (EXPN command), each recipient should be specified using the mailing list 
            name, such as "Friends" or "London-Office".
            <br>
            <br>
            Default: NULL
            <br>
            <br>
            Protocols: SMTP
            <br>
            <br>
            Example:<small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_18a75j93-b773-4848-123w-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_18a75j93-b773-4848-123w-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom curl = curl_easy_init(),
     list = NULL
list = curl_slist_append(list, "root@localhost")
list = curl_slist_append(list, "person@example.com");
curl_easy_setopt(curl, CURLOPT_URL, "smtp://example.com/");
curl_easy_setopt(curl, CURLOPT_MAIL_RCPT, list);
integer ret = curl_easy_perform(curl)
curl_slist_free_all(list)
curl_easy_cleanup(curl)
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">(),</font>
<font color="#000000">     list</font><font color="#0000FF"> =</font><font color="#004600"> NULL</font>
<font color="#000000">list</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_slist_append</font><font color="#0000FF">(</font><font color="#000000">list</font><font color="#0000FF">,</font><font color="#008000"> "root@localhost"</font><font color="#0000FF">)</font>
<font color="#000000">list</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_slist_append</font><font color="#0000FF">(</font><font color="#000000">list</font><font color="#0000FF">,</font><font color="#008000"> "person@example.com"</font><font color="#0000FF">);</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "smtp://example.com/"</font><font color="#0000FF">);</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_MAIL_RCPT</font><font color="#0000FF">,</font><font color="#000000"> list</font><font color="#0000FF">);</font>
<font color="#004080">integer</font><font color="#000000"> ret</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_slist_free_all</font><font color="#0000FF">(</font><font color="#000000">list</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_cleanup</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: Added in 7.20.0. The VRFY and EXPN logic was added in 7.34.0
            <br>
            <br>
            Return value: curl_easy_setoptf() returns
            <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if the option is supported, and
            <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not,
            whereas curl_easy_setopt() terminates on failure.
            <br>
            <br>
            See also: <a href="#CURLOPT_MAIL_FROM">CURLOPT_MAIL_FROM</a>,
            CURLOPT_MAIL_AUTH
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_MAIL_AUTH</small>
         </td>
         <td>
            Authentication address. See CURLOPT_MAIL_AUTH
         </td>
        </tr>
        <tr>
         <td>
          <b>TFTP OPTIONS</b>
         </td>
         <td>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_TFTP_BLKSIZE</small>
         </td>
         <td>
            TFTP block size. See CURLOPT_TFTP_BLKSIZE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_TFTP_NO_OPTIONS</small>
         </td>
         <td>
            Do not send TFTP options requests. See CURLOPT_TFTP_NO_OPTIONS
         </td>
        </tr>
        <tr>
         <td>
          <b>FTP OPTIONS</b>
         </td>
         <td>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_FTPPORT</small>
         </td>
         <td>
            Use active FTP. See CURLOPT_FTPPORT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_QUOTE</small>
         </td>
         <td>
            Commands to run before transfer. See CURLOPT_QUOTE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_POSTQUOTE</small>
         </td>
         <td>
            Commands to run after transfer. See CURLOPT_POSTQUOTE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PREQUOTE</small>
         </td>
         <td>
            Commands to run just before transfer. See CURLOPT_PREQUOTE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_APPEND</small>
         </td>
         <td>
            Append to remote file. See CURLOPT_APPEND
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_FTP_USE_EPRT</small>
         </td>
         <td>
            Use EPTR. See CURLOPT_FTP_USE_EPRT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_FTP_USE_EPSV</small>
         </td>
         <td>
            Use EPSV. See CURLOPT_FTP_USE_EPSV
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_FTP_USE_PRET</small>
         </td>
         <td>
            Use PRET. See CURLOPT_FTP_USE_PRET
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_FTP_CREATE_MISSING_DIRS</small>
         </td>
         <td>
            Create missing directories on the remote server. See CURLOPT_FTP_CREATE_MISSING_DIRS
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_FTP_RESPONSE_TIMEOUT</small>
         </td>
         <td>
            Timeout for FTP responses. See CURLOPT_FTP_RESPONSE_TIMEOUT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_FTP_ALTERNATIVE_TO_USER</small>
         </td>
         <td>
            Alternative to USER. See CURLOPT_FTP_ALTERNATIVE_TO_USER
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_FTP_SKIP_PASV_IP</small>
         </td>
         <td>
            Ignore the IP address in the PASV response. See CURLOPT_FTP_SKIP_PASV_IP
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_FTPSSLAUTH</small>
         </td>
         <td>
            Control how to do TLS. See CURLOPT_FTPSSLAUTH
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_FTP_SSL_CCC</small>
         </td>
         <td>
            Back to non-TLS again after authentication. See CURLOPT_FTP_SSL_CCC
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_FTP_ACCOUNT</small>
         </td>
         <td>
            Send ACCT command. See CURLOPT_FTP_ACCOUNT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_FTP_FILEMETHOD</small>
         </td>
         <td>
            Specify how to reach files. See CURLOPT_FTP_FILEMETHOD
         </td>
        </tr>
        <tr>
         <td>
          <b>RTSP OPTIONS</b>
         </td>
         <td>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_RTSP_REQUEST</small>
         </td>
         <td>
            RTSP request. See CURLOPT_RTSP_REQUEST
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_RTSP_SESSION_ID</small>
         </td>
         <td>
            RTSP session-id. See CURLOPT_RTSP_SESSION_ID
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_RTSP_STREAM_URI</small>
         </td>
         <td>
            RTSP stream URI. See CURLOPT_RTSP_STREAM_URI
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_RTSP_TRANSPORT</small>
         </td>
         <td>
            RTSP Transport: header. See CURLOPT_RTSP_TRANSPORT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_RTSP_CLIENT_CSEQ</small>
         </td>
         <td>
            Client CSEQ number. See CURLOPT_RTSP_CLIENT_CSEQ
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_RTSP_SERVER_CSEQ</small>
         </td>
         <td>
            CSEQ number for RTSP Server->Client request. See CURLOPT_RTSP_SERVER_CSEQ
         </td>
        </tr>
        <tr>
         <td>
          <b>PROTOCOL OPTIONS</b>
         </td>
         <td>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_TRANSFERTEXT</small>
         </td>
         <td>
            Use text transfer. See CURLOPT_TRANSFERTEXT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY_TRANSFER_MODE</small>
         </td>
         <td>
            Add transfer mode to URL over proxy. See CURLOPT_PROXY_TRANSFER_MODE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_CRLF</small>
         </td>
         <td>
            Convert newlines. See CURLOPT_CRLF
         </td>
        </tr>
        <tr>
         <td>
          <a name="CURLOPT_RANGE"></a>
          <small>CURLOPT_RANGE</small>
         </td>
         <td>
            Specify byte range to request
            <br>
            <br>
            Synopsis: <a href="CURLcode.htm">CURLcode</a> res = <a href="curl_easy_setopt.htm">curl_easy_setoptf</a>(<a href="atom.htm">atom</a> curl, CURLOPT_RANGE,
                                                                                                                     <a href="string.htm">string</a> range)
            <br> 
            <br> 
            The range parameter should be in the format "X-Y", where either X or Y may be left out and X and Y are byte indexes.
            <br>
            <br>
            HTTP transfers also support several intervals, separated with commas as in "X-Y,N-M". <br>
            Using this kind of multiple intervals will cause the HTTP server to send the response document in pieces (using standard MIME separation techniques). <br>
            Unfortunately, the HTTP standard (RFC 7233 section 3.1) allows servers to ignore range requests so even when you set CURLOPT_RANGE for a request, 
            you may end up getting the full response sent back.
            <br>
            <br>
            For RTSP, the formatting of a range should follow RFC 2326 Section 12.29. For RTSP, byte ranges are not permitted. 
            Instead, ranges should be given in npt, utc, or smpte formats.
            <br>
            <br>
            For HTTP PUT uploads this option should not be used, since it may conflict with other options.
            <br>
            <br>
            Pass a NULL to this option to disable the use of ranges.
            <br>
            <br>
            The application does not have to keep the string around after setting this option.
            <br>
            <br>
            Default: NULL
            <br>
            <br>
            Protocols: HTTP, FTP, FILE, RTSP and SFTP. (NB https not supported)
            <br>
            <br>
            Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j35-rn9d-2785-986j-fcb483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j35-rn9d-2785-986j-fcb483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom curl = curl_easy_init()
curl_easy_setopt(curl, CURLOPT_URL, "ftp://example.com");
 
/* get the first 200 bytes */
curl_easy_setopt(curl, CURLOPT_RANGE, "0-199");
 
/* Perform the request */
ret = curl_easy_perform(curl)
curl_easy_cleanup(curl)
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "http://example.com/foo.bin"</font><font color="#0000FF">)</font>
<font color="#000080"><i>/* DELETE the given path */</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_CUSTOMREQUEST</font><font color="#0000FF">,</font><font color="#008000"> "DELETE"</font><font color="#0000FF">);</font>
<font color="#000000">ret</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_cleanup</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: FILE since 7.18.0, RTSP since 7.20.0
          <br>
          <br>
            Return value: Returns CURLE_OK on success or CURLE_OUT_OF_MEMORY if there was insufficient heap space.
            <br>
            <br>
            See also: <a href="#CURLOPT_RESUME_FROM">CURLOPT_RESUME_FROM</a>
         </td>
        </tr>
        <tr>
         <td>
          <a name="CURLOPT_RESUME_FROM"></a>
          <small>CURLOPT_RESUME_FROM</small>
         </td>
         <td>
            Resume a transfer / specify offset to resume transfer from.
            <br>
            <br>
            Synopsis: <a href="CURLcode.htm">CURLcode</a> res = <a href="curl_easy_setopt.htm">curl_easy_setoptf</a>(<a href="atom.htm">atom</a> curl, CURLOPT_RESUME_FROM, startfrom)
            <br>
            <br>
            The startfrom parameter contains the offset in number of bytes that you want the transfer to start from. <br>
            Set this option to 0 to make the transfer start from the beginning (effectively disabling resume). <br>
            For FTP, set this option to -1 to make the transfer start from the end of the target file (useful to continue an interrupted upload).
            <br>
            <br>
            When doing uploads with FTP, the resume position is where in the local/source file libcurl should try to resume the upload from and 
            it will then append the source file to the remote target file.
            <br>
            <br>
            If you need to resume a transfer beyond the 2GB limit, use <a href="#CURLOPT_RESUME_FROM_LARGE">CURLOPT_RESUME_FROM_LARGE</a> instead.
            <br>
            <br>
            Default: 0, not used
            <br>
            <br>
            Protocols: HTTP, FTP, SFTP, FILE (NB does not work on https)
            <br>
            <br>
            Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-r3nd-4273-986j-fcb483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-r3nd-4273-986j-fcb483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom curl = curl_easy_init()
curl_easy_setopt(curl, CURLOPT_URL, "http://example.com/foo.bin")
 
/* resume upload at byte index 200 */
curl_easy_setopt(curl, CURLOPT_RESUME_FROM, 200)
 
/* ask for upload */
curl_easy_setopt(curl, CURLOPT_UPLOAD, 1)
 
/* set total data amount to expect */
curl_easy_setopt(curl, CURLOPT_INFILESIZE, size_of_file)
 
/* Perform the request */
ret = curl_easy_perform(curl)
curl_easy_cleanup(curl)
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "http://example.com/foo.bin"</font><font color="#0000FF">)</font>
<font color="#000080"><i>/* DELETE the given path */</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_CUSTOMREQUEST</font><font color="#0000FF">,</font><font color="#008000"> "DELETE"</font><font color="#0000FF">);</font>
<font color="#000000">ret</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_cleanup</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: Always
          <br>
          <br>
            Return value: CURLE_OK
          <br>  
          <br>
            See also: <a href="#CURLOPT_RESUME_FROM_LARGE">CURLOPT_RESUME_FROM_LARGE</a>,
                      <a href="#CURLOPT_RANGE">CURLOPT_RANGE</a>,
                     CURLOPT_INFILESIZE(3),
         </td>
        </tr>
        <tr>
         <td>
          <a name="CURLOPT_RESUME_FROM_LARGE"></a>
          <small>CURLOPT_RESUME_FROM_LARGE</small>
         </td>
         <td>
            Resume a transfer / specify offset to resume transfer from.
            <br>
            <br>
            Synopsis: 
            Synopsis: <a href="CURLcode.htm">CURLcode</a> res = <a href="curl_easy_setopt.htm">curl_easy_setoptf</a>(<a href="atom.htm">atom</a> curl, 
                                                                                                                     CURLOPT_RESUME_FROM_LARGE, startfrom)
            <br>
            <br>
            The startfrom (64bit) parameter contains the offset in number of bytes that you want the transfer to start from. <br>
            Of course on 32bit that is seamlessly mapped to two adjacent 32-bit ints, technically limited to 53 bits of precision, 
            but that&rsquo;s still over 9,000TB which is not likely to be an issue any time soon, and besides, you could always 
            round down to the nearest 2048 bytes anyway (ie perhaps causing it to re-transfer up to 2047 bytes, to be absolutely 
            sure there are no gaps or missing bytes).<br>
            Set this option to 0 to make the transfer start from the beginning (effectively disabling resume). <br>
            For FTP, set this option to -1 to make the transfer start from the end of the target file (useful to continue an interrupted upload).
            <br>
            <br>
            When doing uploads with FTP, the resume position is where in the local/source file libcurl should try to resume the upload from 
            and it will then append the source file to the remote target file.
            <br>
            <br>
            Default: 0, not used
            <br>
            <br>
            Protocols: HTTP, FTP, SFTP, FILE (NB does not work on HTTPS)
            <br>
            <br>
            Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-r3nd-1111-986j-fcb483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-r3nd-1111-986j-fcb483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom resume_position = GET_IT_SOMEHOW,
     file_size = GET_IT_SOMEHOW_AS_WELL;
atom curl = curl_easy_init()
curl_easy_setopt(curl, CURLOPT_URL, "ftp://example.com");
 
/* resuming upload at this position, possibly beyond 2GB */
curl_easy_setopt(curl, CURLOPT_RESUME_FROM_LARGE, resume_position);
 
/* ask for upload */
curl_easy_setopt(curl, CURLOPT_UPLOAD, 1);
 
/* set total data amount to expect */
curl_easy_setopt(curl, CURLOPT_INFILESIZE_LARGE, file_size);
 
/* Perform the request */
ret = curl_easy_perform(curl)
curl_easy_cleanup(curl)
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "http://example.com/foo.bin"</font><font color="#0000FF">)</font>
<font color="#000080"><i>/* DELETE the given path */</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_CUSTOMREQUEST</font><font color="#0000FF">,</font><font color="#008000"> "DELETE"</font><font color="#0000FF">);</font>
<font color="#000000">ret</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_cleanup</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: Added in 7.11.0
            <br>
            <br>
            Return value: Returns CURLE_OK if the option is supported, and CURLE_UNKNOWN_OPTION if not.
            <br>
            <br>
            See also: <a href="#CURLOPT_RESUME_FROM">CURLOPT_RESUME_FROM</a>,
                      <a href="#CURLOPT_RANGE">CURLOPT_RANGE</a>,
                     CURLOPT_INFILESIZE_LARGE
            <small><br><a name="CURLOPT_CUSTOMREQUEST"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_CUSTOMREQUEST</small>
         </td>
         <td>
            Custom request/method.
          <br>
          <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_CUSTOMREQUEST, 
                                                                          <a href="string.htm">nullable_string</a> request)
          <br>
          <br>
            When you change the request method by setting CURLOPT_CUSTOMREQUEST to something, you don&rsquo;t actually change 
            how libcurl behaves or acts in regards to the particular request method, it will only change the actual string sent in the request.
          <br>
          <br>
            Restore to the internal default by setting this to NULL.
          <br>
          <br>
            This option can be used to specify the request:
          <br>
          <br>
            HTTP
          <br>
            Instead of GET or HEAD when performing HTTP based requests. This is particularly useful, for example, for performing a HTTP DELETE request.
          <br>
          <br>
            For example:
          <br>
            When you tell libcurl to do a HEAD request, but then specify a GET though a custom request libcurl will still act as if it sent a HEAD.
          <br>
            To switch to a proper HEAD use CURLOPT_NOBODY, to switch to a proper POST use CURLOPT_POST or CURLOPT_POSTFIELDS and to switch to a proper GET use CURLOPT_HTTPGET.
          <br>
          <br>
            Many people have wrongly used this option to replace the entire request with their own, including multiple headers and POST contents.
          <br>
            While that might work in many cases, it will cause libcurl to send invalid requests and it could possibly confuse the remote server badly.
          <br>
            Use CURLOPT_POST and CURLOPT_POSTFIELDS to set POST data.
          <br>
            Use <a href="#CURLOPT_HTTPHEADER">CURLOPT_HTTPHEADER</a> to replace or extend the set of headers sent by libcurl.
          <br>
            Use CURLOPT_HTTP_VERSION to change HTTP version.
          <br>
          <br>
            FTP
          <br>
            Instead of LIST and NLST when performing FTP directory listings.
          <br>
          <br>
            IMAP
          <br>
            Instead of LIST when issuing IMAP based requests.
          <br>
          <br>
            POP3
          <br>
            Instead of LIST and RETR when issuing POP3 based requests.
          <br>
          <br>
            For example:
          <br>
            When you tell libcurl to use a custom request it will behave like a LIST or RETR command was sent where it expects data to be returned by the server.
          <br>
            As such CURLOPT_NOBODY should be used when specifying commands such as DELE and NOOP for example.
          <br>
          <br>
            SMTP
          <br>
            Instead of a HELP or VRFY when issuing SMTP based requests.
          <br>
          <br>
            For example:
          <br>
            Normally a multiline response is returned which can be used, in conjunction with <a href="#CURLOPT_MAIL_RCPT">CURLOPT_MAIL_RCPT</a>, to specify an EXPN request.
          <br>
            If the CURLOPT_NOBODY option is specified then the request can be used to issue NOOP and RSET commands.
          <br>
          <br>
            The application does not have to keep the string around after setting this option.
          <br>
          <br>
            Default: NULL
          <br>
          <br>
            Protocols: HTTP, FTP, IMAP, POP3 and SMTP
          <br>
          <br>
            Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-r3nd-4273-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-r3nd-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom curl = curl_easy_init()
curl_easy_setopt(curl, CURLOPT_URL, "http://example.com/foo.bin")
/* DELETE the given path */
curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, "DELETE");
ret = curl_easy_perform(curl)
curl_easy_cleanup(curl)
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "http://example.com/foo.bin"</font><font color="#0000FF">)</font>
<font color="#000080"><i>/* DELETE the given path */</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_CUSTOMREQUEST</font><font color="#0000FF">,</font><font color="#008000"> "DELETE"</font><font color="#0000FF">);</font>
<font color="#000000">ret</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_cleanup</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: IMAP is supported since 7.30.0, POP3 since 7.26.0 and SMTP since 7.34.0.
          <br>
          <br>
            Return value: curl_easy_setoptf() returns
          <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if the option is supported,
          <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not, 
            or <a href="CURLcode.htm#CURLE_OUT_OF_MEMORY">CURLE_OUT_OF_MEMORY</a> if there was insufficient heap space,
            whereas curl_easy_setopt() terminates in error for either failure condition.
          <br>
          <br>
            See also: <a href="#CURLOPT_HTTPHEADER">CURLOPT_HTTPHEADER</a>, CURLOPT_NOBODY, CURLOPT_REQUEST_TARGET
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_FILETIME</small>
         </td>
         <td>
            Request file modification date and time. See CURLOPT_FILETIME
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_DIRLISTONLY</small>
         </td>
         <td>
            List only. See CURLOPT_DIRLISTONLY
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_NOBODY</small>
         </td>
         <td>
            Do not get the body contents. See CURLOPT_NOBODY
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_INFILESIZE</small>
         </td>
         <td>
            Size of file to send. CURLOPT_INFILESIZE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_INFILESIZE_LARGE</small>
         </td>
         <td>
            Size of file to send. CURLOPT_INFILESIZE_LARGE
              <small><br><a name="CURLOPT_UPLOAD"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_UPLOAD</small>
         </td>
         <td>
            Enable data upload.
            <br>
            <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_UPLOAD, 
                                                                          <a href="integer.htm#bool">bool</a> upload)
            <br>
            <br>
            Setting upload to 1 tells the library to prepare for and perform an upload. <br>
            The <a href="#CURLOPT_READDATA">CURLOPT_READDATA</a> and CURLOPT_INFILESIZE or CURLOPT_INFILESIZE_LARGE options are also interesting for uploads. <br>
            If the protocol is HTTP, uploading means using the PUT request unless you tell libcurl otherwise.
            <br>
            <br>
            Using PUT with HTTP 1.1 implies the use of a "Expect: 100-continue" header. 
            You can disable this header with <a href="#CURLOPT_HTTPHEADER">CURLOPT_HTTPHEADER</a> as usual.
            <br>
            <br>
            If you use PUT to an HTTP 1.1 server, you can upload data without knowing the size before starting the transfer if you use chunked encoding. 
            You enable this by adding a header like "Transfer-Encoding: chunked" with <a href="#CURLOPT_HTTPHEADER">CURLOPT_HTTPHEADER</a>. 
            With HTTP 1.0 or without chunked transfer, you must specify the size.
            <br>
            <br>
            Default: 0, default is download
            <br>
            <br>
            Protocols: Most
            <br>
            <br>
            Availability: Always
            <br>
            <br>
            Return value (if set with <a href="curl_easy_setopt.htm">curl_easy_setoptf</a>()): CURLE_OK
            <br>
            <br>
            See also: CURLOPT_PUT, <a href="#CURLOPT_READFUNCTION">CURLOPT_READFUNCTION</a>, CURLOPT_INFILESIZE_LARGE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_MIMEPOST</small>
         </td>
         <td>
            Post/send MIME data. See CURLOPT_MIMEPOST
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_MAXFILESIZE</small>
         </td>
         <td>
            Maximum file size to get. See CURLOPT_MAXFILESIZE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_MAXFILESIZE_LARGE</small>
         </td>
         <td>
            Maximum file size to get. See CURLOPT_MAXFILESIZE_LARGE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_TIMECONDITION</small>
         </td>
         <td>
            Make a time conditional request. See CURLOPT_TIMECONDITION
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_TIMEVALUE</small>
         </td>
         <td>
            Time value for the time conditional request. See CURLOPT_TIMEVALUE
         </td>
        </tr>
        <tr>
         <td>
          <b>CONNECTION OPTIONS</b>
         </td>
         <td>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_TIMEOUT</small>
         </td>
         <td>
            Timeout for the entire request. See CURLOPT_TIMEOUT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_TIMEOUT_MS</small>
         </td>
         <td>
            Millisecond timeout for the entire request. See CURLOPT_TIMEOUT_MS
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_LOW_SPEED_LIMIT</small>
         </td>
         <td>
            Low speed limit to abort transfer. See CURLOPT_LOW_SPEED_LIMIT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_LOW_SPEED_TIME</small>
         </td>
         <td>
            Time to be below the speed to trigger low speed abort. See CURLOPT_LOW_SPEED_TIME
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_MAX_SEND_SPEED_LARGE</small>
         </td>
         <td>
            Cap the upload speed to this. See CURLOPT_MAX_SEND_SPEED_LARGE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_MAX_RECV_SPEED_LARGE</small>
         </td>
         <td>
            Cap the download speed to this. See CURLOPT_MAX_RECV_SPEED_LARGE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_MAXCONNECTS</small>
         </td>
         <td>
            Maximum number of connections in the connection pool. See CURLOPT_MAXCONNECTS
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_FRESH_CONNECT</small>
         </td>
         <td>
            Use a new connection. CURLOPT_FRESH_CONNECT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_FORBID_REUSE</small>
         </td>
         <td>
            Prevent subsequent connections from re-using this. See CURLOPT_FORBID_REUSE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_CONNECTTIMEOUT</small>
         </td>
         <td>
            Timeout for the connection phase. See CURLOPT_CONNECTTIMEOUT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_CONNECTTIMEOUT_MS</small>
         </td>
         <td>
            Millisecond timeout for the connection phase. See CURLOPT_CONNECTTIMEOUT_MS
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_IPRESOLVE</small>
         </td>
         <td>
            IP version to resolve to. See CURLOPT_IPRESOLVE
            <small><br><a name="CURLOPT_CONNECT_ONLY"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_CONNECT_ONLY</small>
         </td>
         <td>
            Only connect, nothing else (stop when connected to target server).
          <br>
          <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_CONNECT_ONLY, 
                                                                          <a href="integer.htm#bool">bool</a> only)
          <br>
          <br>
            If the parameter is true(1), it tells the library to perform all the required proxy authentication and connection setup, but no data transfer, and then return.
          <br>
          <br>
            The option can be used to simply test a connection to a server, but is more useful when used with the
            <a href="curl_easy_getinfo.htm#CURLINFO_ACTIVESOCKET">CURLINFO_ACTIVESOCKET</a> option to
            <a href="curl_easy_getinfo.htm">curl_easy_getinfo</a>() as the library can set up the connection and 
            then the application can obtain the most recently used socket for special data transfers.
          <br>
          <br>
            Default: false(0)
          <br>
          <br>
            Protocols: HTTP, SMTP, POP3 and IMAP
          <br>
          <br>
            Example
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-s1lt-4273-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-s1lt-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom curl = curl_easy_init()
curl_easy_setopt(curl, CURLOPT_URL, "http://example.com")
curl_easy_setopt(curl, CURLOPT_CONNECT_ONLY, true)
CURLcode ret = curl_easy_perform(curl);
if ret=CURLE_OK then
    /* only connected! */
end if
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "http://example.com"</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_CONNECT_ONLY</font><font color="#0000FF">,</font><font color="#004600"> true</font><font color="#0000FF">)</font>
<font color="#5E005E">CURLcode</font><font color="#000000"> ret</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">);</font>
<font color="#008080">if</font><font color="#000000"> ret</font><font color="#0000FF">=</font><font color="#004600">CURLE_OK</font><font color="#008080"> then</font>
<font color="#000080"><i>    /* only connected! */</i></font>
<font color="#008080">end if</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: Added in 7.15.2
          <br>
          <br>
            Return value: curl_easy_setoptf() returns
          <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if the option is supported, and
          <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not,
            whereas curl_easy_setopt() terminates in error if the option is not supported.
          <br>
          <br>
            See also:
          <a href="#CURLOPT_VERBOSE">CURLOPT_VERBOSE</a>, CURLOPT_HTTPPROXYTUNNEL, curl_easy_recv, curl_easy_send
            <small><br><a name="CURLOPT_USE_SSL"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_USE_SSL</small>
         </td>
         <td>
            Request using SSL / TLS for the transfer.
          <br>
          <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_USE_SSL, 
                                                                          <a href="integer.htm">integer</a> level)
          <br>
          <br>
            Pass one of the values from below, to make libcurl use your desired level of SSL for the transfer.
            <br>
            <br>
            These are all protocols that start out plain text and get "upgraded" to SSL using the STARTTLS command.
            <br>
            <br>
            This is for enabling SSL/TLS when you use FTP, SMTP, POP3, IMAP etc.
            <br>
            <br>
            CURLUSESSL_NONE - Don&rsquo;t attempt to use SSL.<br>
            CURLUSESSL_TRY - Try using SSL, proceed as normal otherwise.<br>
            CURLUSESSL_CONTROL - Require SSL for the control connection or fail with CURLE_USE_SSL_FAILED.<br>
            CURLUSESSL_ALL - Require SSL for all communication or fail with CURLE_USE_SSL_FAILED.
            <br>
            <br>
            Default: CURLUSESSL_NONE
            <br>
            <br>
            Protocols: FTP, SMTP, POP3, IMAP
            <br>
            <br>
            Example: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(curl, CURLOPT_USE_SSL, CURLUSESSL_ALL)
            <br>
            <br>
            Availability: Added in 7.11.0. This option was known as CURLOPT_FTP_SSL up to 7.16.4, and the constants were known as CURLFTPSSL_*
            <br>
            <br>
            Return value: curl_easy_setoptf() returns <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> on success, or
            <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if the option is not supported,
            whereas curl_easy_setopt() terminates on error.
            <br>
            <br>
            See also: CURLOPT_SSLVERSION, CURLOPT_PROXY_SSLVERSION, CURLOPT_SSL_OPTIONS
            <small><br><a name="CURLOPT_RESOLVE"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_RESOLVE</small>
         </td>
         <td>
            Provide fixed/fake custom host name to IP address resolves.
          <br>
          <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_RESOLVE, 
                                                                          <a href="atom.htm">atom</a> hosts)
          <br>
          <br>
            Pass an slist (linked list of strings) with host name resolve information to use for requests with this handle.
          <br>
            The linked list should be a fully valid list of struct curl_slist structs properly filled in.
          <br>
            Use <a href="curl_slist_append.htm">curl_slist_append</a> to create the list and 
            <a href="curl_slist_free_all.htm">curl_slist_free_all</a> to clean up an entire list.
          <br>
          <br>
            Each single name resolve string should be written using the format HOST:PORT:ADDRESS where
          <br>
            HOST is the name libcurl will try to resolve,
          <br>
            PORT is the port number of the service where libcurl wants to connect to the HOST and
          <br>
            ADDRESS is the numerical IP address.
          <br>
            If libcurl is built to support IPv6, ADDRESS can of course be either IPv4 or IPv6 style addressing.
          <br>
          <br>
            This option effectively pre-populates the DNS cache with entries for the host+port pair so redirects and everything
          <br>
            that operations against the HOST+PORT will instead use your provided ADDRESS.
          <br>
            Addresses set with CURLOPT_RESOLVE will not time-out from the DNS cache like ordinary entries.
          <br>
          <br>
            The provided ADDRESS set by this option will be used even if CURLOPT_IPRESOLVE is set to make libcurl use another IP version.
          <br>
          <br>
            Remove names from the DNS cache again, to stop providing these fake resolves, by including a string in the linked list 
            that uses the format "-HOST:PORT".
          <br>
            The host name must be prefixed with a dash, and the host name and port number must exactly match what was already added previously.
          <br>
          <br>
            Support for providing the ADDRESS within [brackets] was added in 7.57.0.
          <br>
          <br>
            Default: NULL
          <br>
          <br>
            Protocols: All
          <br>
          <br>
            Example: (see also demo/libcurl/read_cookies.exw)
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-test-4273-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-test-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom hosts = NULL
hosts = curl_slist_append(hosts, "example.com:80:127.0.0.1")
 
atom curl = curl_easy_init()
curl_easy_setopt(curl, CURLOPT_RESOLVE, hosts)
curl_easy_setopt(curl, CURLOPT_URL, "http://example.com")
 
/* always cleanup */
curl_easy_cleanup(curl)

curl_slist_free_all(hosts)
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> hosts</font><font color="#0000FF"> =</font><font color="#004600"> NULL</font>
<font color="#000000">hosts</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_slist_append</font><font color="#0000FF">(</font><font color="#000000">hosts</font><font color="#0000FF">,</font><font color="#008000"> "example.com:80:127.0.0.1"</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_RESOLVE</font><font color="#0000FF">,</font><font color="#000000"> hosts</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "http://example.com"</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>/* always cleanup */</i></font>
<font color="#5E005E">curl_easy_cleanup</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)
</font>
<font color="#5E005E">curl_slist_free_all</font><font color="#0000FF">(</font><font color="#000000">hosts</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: Added in 7.21.3. Removal support added in 7.42.0.
          <br>
          <br>
            Return value: curl_easy_setoptf() returns
          <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if the option is supported, and
          <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not,
            whereas curl_easy_setopt() terminates in error if the option is not supported.
          <br>
          <br>
            See also: CURLOPT_IPRESOLVE, CURLOPT_DNS_CACHE_TIMEOUT, CURLOPT_CONNECT_TO
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_DNS_INTERFACE</small>
         </td>
         <td>
            Bind name resolves to this interface. See CURLOPT_DNS_INTERFACE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_DNS_LOCAL_IP4</small>
         </td>
         <td>
            Bind name resolves to this IP4 address. See CURLOPT_DNS_LOCAL_IP4
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_DNS_LOCAL_IP6</small>
         </td>
         <td>
            Bind name resolves to this IP6 address. See CURLOPT_DNS_LOCAL_IP6
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_DNS_SERVERS</small>
         </td>
         <td>
            Preferred DNS servers. See CURLOPT_DNS_SERVERS
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_ACCEPTTIMEOUT_MS</small>
         </td>
         <td>
            Timeout for waiting for the server&rsquo;s connect back to be accepted. See CURLOPT_ACCEPTTIMEOUT_MS
         </td>
        </tr>
        <tr>
         <td>
          <b>SSL</b>
         </td>
         <td>
             and SECURITY OPTIONS
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSLCERT</small>
         </td>
         <td>
            Client cert. See CURLOPT_SSLCERT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY_SSLCERT</small>
         </td>
         <td>
            Proxy client cert. See CURLOPT_PROXY_SSLCERT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSLCERTTYPE</small>
         </td>
         <td>
            Client cert type. See CURLOPT_SSLCERTTYPE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY_SSLCERTTYPE</small>
         </td>
         <td>
            Proxy client cert type. See CURLOPT_PROXY_SSLCERTTYPE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSLKEY</small>
         </td>
         <td>
            Client key. See CURLOPT_SSLKEY
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY_SSLKEY</small>
         </td>
         <td>
            Proxy client key. See CURLOPT_PROXY_SSLKEY
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSLKEYTYPE</small>
         </td>
         <td>
            Client key type. See CURLOPT_SSLKEYTYPE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY_SSLKEYTYPE</small>
         </td>
         <td>
            Proxy client key type. See CURLOPT_PROXY_SSLKEYTYPE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_KEYPASSWD</small>
         </td>
         <td>
            Client key password. See CURLOPT_KEYPASSWD
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY_KEYPASSWD</small>
         </td>
         <td>
            Proxy client key password. See CURLOPT_PROXY_KEYPASSWD
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSL_ENABLE_ALPN</small>
         </td>
         <td>
            Enable use of ALPN. See CURLOPT_SSL_ENABLE_ALPN
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSL_ENABLE_NPN</small>
         </td>
         <td>
            Enable use of NPN. See CURLOPT_SSL_ENABLE_NPN
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSLENGINE</small>
         </td>
         <td>
            Use identifier with SSL engine. See CURLOPT_SSLENGINE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSLENGINE_DEFAULT</small>
         </td>
         <td>
            Default SSL engine. See CURLOPT_SSLENGINE_DEFAULT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSL_FALSESTART</small>
         </td>
         <td>
            Enable TLS False Start. See CURLOPT_SSL_FALSESTART
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSLVERSION</small>
         </td>
         <td>
            SSL version to use. See CURLOPT_SSLVERSION
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY_SSLVERSION</small>
         </td>
         <td>
            Proxy SSL version to use. See CURLOPT_PROXY_SSLVERSION
            <small><br><a name="CURLOPT_SSL_VERIFYHOST"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSL_VERIFYHOST</small>
         </td>
         <td>
            Verify the host name in the SSL certificate.
          <br>
          <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_SSL_VERIFYHOST,
                                                                          <a href="integer.htm#bool">bool</a> verify)
          <br>
          <br>
            This option determines whether libcurl verifies that the server certificate is for the server it is known as.
          <br>
          <small>(aside: an internal mapping of 1:=2 occurs automatically, to cover some deprecated debug option; the
            value of 2 is also accepted, and treated as true)</small>
          <br>
          <br>
            When negotiating TLS and SSL connections, the server sends a certificate indicating its identity.
          <br>
          <br>
            When true, that certificate must indicate that the server is the server to which you meant to connect, or the connection fails.
          <br>
            Simply put, it means it has to have the same name in the certificate as is in the URL you operate against.
          <br>
          <br>
            Curl considers the server the intended one when the Common Name field or a Subject Alternate Name field in the certificate matches 
            the host name in the URL to which you told Curl to connect.
          <br>
          <br>
            When false, the connection succeeds regardless of the names in the certificate. Use that ability with caution!
          <br>
          <br>
            The default value for this option is true.
          <br>
          <br>
            This option controls checking the server&rsquo;s certificate&rsquo;s claimed identity.
          <br>
            The server could be lying.
          <br>
            To control lying, see <a href="#CURLOPT_SSL_VERIFYPEER">CURLOPT_SSL_VERIFYPEER</a>.
          <br>
          <br>
            Limitations:
          <br>
            DarwinSSL: If verify value is 0, then SNI is also disabled. SNI is a TLS extension that sends the hostname to the server.
          <br>
            The server may use that information to do such things as sending back a specific certificate for the hostname, or forwarding 
            the request to a specific origin server. Some hostnames may be inaccessible if SNI is not sent.
          <br>
            NSS: If <a href="#CURLOPT_SSL_VERIFYPEER">CURLOPT_SSL_VERIFYPEER</a> is zero, 
            CURLOPT_SSL_VERIFYHOST is also set to zero and cannot be overridden.
          <br>
          <br>
            Protocols: All TLS based protocols: HTTPS, FTPS, IMAPS, POP3S, SMTPS etc.
          <br>
          <br>
            Availability: If built TLS enabled.
          <br>
          <br>
            Return value: curl_easy_setoptf() returns
          <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if TLS is supported, and
          <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not,
            whereas curl_easy_setopt() terminates in error if TLS is not supported.
          <br>
          <br>
            See also: <a href="#CURLOPT_SSL_VERIFYPEER">CURLOPT_SSL_VERIFYPEER</a>, <a href="#CURLOPT_CAINFO">CURLOPT_CAINFO</a>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY_SSL_VERIFYHOST</small>
         </td>
         <td>
            Verify the host name in the proxy SSL certificate. See CURLOPT_PROXY_SSL_VERIFYHOST
            <small><br><a name="CURLOPT_SSL_VERIFYPEER"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSL_VERIFYPEER</small>
         </td>
         <td>
            Verify the SSL certificate.
          <br>
          <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_SSL_VERIFYPEER,
                                                                          <a href="integer.htm#bool">bool</a> verify)
          <br>
          <br>
            Pass true(1) or false(0) as parameter to enable or disable.
          <br>
          <br>
            This option determines whether curl verifies the authenticity of the peer&rsquo;s certificate.
          <br>
            A value of 1 means curl verifies; 0 (zero) means it does not.
          <br>
          <br>
            When negotiating a TLS or SSL connection, the server sends a certificate indicating its identity.
          <br>
            Curl verifies whether the certificate is authentic, i.e. that you can trust that the server is who the certificate says it is.
          <br>
            This trust is based on a chain of digital signatures, rooted in certification authority (CA) certificates you supply.
          <br>
            curl uses a default bundle of CA certificates (the path for that is determined at build time) and you can specify alternate certificates
            with the <a href="#CURLOPT_CAINFO">CURLOPT_CAINFO</a> option or the CURLOPT_CAPATH option.
          <br>
          <br>
            When CURLOPT_SSL_VERIFYPEER is enabled, and the verification fails to prove that the certificate is authentic, the connection fails.
          <br>
            When the option is zero, the peer certificate verification succeeds regardless.
          <br>
          <br>
            Authenticating the certificate is not enough to be sure about the server.
          <br>
            You typically also want to ensure that the server is the server you mean to be talking to.
          <br>
            Use CURLOPT_SSL_VERIFYHOST for that.
          <br>
            The check that the host name in the certificate is valid for the host name you are connecting to is done 
            independently of the CURLOPT_SSL_VERIFYPEER option.
          <br>
          <br>
            WARNING: disabling verification of the certificate allows bad guys to man-in-the-middle the communication without you knowing it.
          <br>
            Disabling verification makes the communication insecure.
          <br>
            Just having encryption on a transfer is not enough as you cannot be sure that you are communicating with the correct end-point.
          <br>
          <br>
            Default: By default, curl assumes a value of 1.
          <br>
          <br>
            Protocols: All TLS based protocols: HTTPS, FTPS, IMAPS, POP3S, SMTPS etc.
          <br>
          <br>
            Availability: If built TLS enabled.
          <br>
          <br>
            Return value: curl_easy_setoptf() returns
          <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if the option is supported, and
          <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not,
            wheras curl_easy_setopt() terminates in error if the option is not supported.
          <br>
          <br>
            See also: CURLOPT_SSL_VERIFYHOST, CURLOPT_PROXY_SSL_VERIFYPEER, CURLOPT_PROXY_SSL_VERIFYHOST
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY_SSL_VERIFYPEER</small>
         </td>
         <td>
            Verify the proxy SSL certificate. See CURLOPT_PROXY_SSL_VERIFYPEER
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSL_VERIFYSTATUS</small>
         </td>
         <td>
            Verify the SSL certificate&rsquo;s status. See CURLOPT_SSL_VERIFYSTATUS
            <small><br><a name="CURLOPT_CAINFO"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_CAINFO</small>
         </td>
         <td>
            Set the path to the Certificate Authority (CA) bundle.
            <br>
            <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_CAINFO,
                                                                          <a href="string.htm">string</a> path)
            <br>
            <br>
            Pass a string (or char*) to a (zero terminated) string naming a file holding one or more certificates to verify the peer with.
            <br>
            <br>
            If <a href="#CURLOPT_SSL_VERIFYPEER">CURLOPT_SSL_VERIFYPEER</a> is zero and you avoid verifying the server&rsquo;s certificate, 
            CURLOPT_CAINFO need not even indicate an accessible file.
            <br>
            <br>
            This option is by default set to the system path where libcurl&rsquo;s cacert bundle is assumed to be stored, as established at build time.
            <br>
            <br>
            If curl is built against the NSS SSL library, the NSS PEM PKCS#11 module (libnsspem.so) needs to be available for this option to work properly. <br>
            Starting with curl-7.55.0, if both CURLOPT_CAINFO and CURLOPT_CAPATH are unset, NSS-linked libcurl tries to load libnssckbi.so, which contains 
            a more comprehensive set of trust information than supported by nss-pem, because libnssckbi.so also includes information about distrusted certificates.
            <br>
            <br>
            (iOS and macOS) When curl uses Secure Transport this option is supported. 
            If the option is not set, then curl will use the certificates in the system and user Keychain to verify the peer.
            <br>
            <br>
            (Schannel) This option is supported for Schannel in Windows 7 or later but we recommend not using it until Windows 8 since it works better starting then. 
            If the option is not set, then curl will use the certificates in the Windows&rsquo; store of root certificates (the default for Schannel).
            <br>
            <br>
            The application does not have to keep the string around after setting this option.
            <br>
            <br>
            Default: Built-in system specific. When curl is built with Secure Transport or Schannel, this option is not set by default.
            <br>
            <br>
            Protocols: All TLS based protocols: HTTPS, FTPS, IMAPS, POP3S, SMTPS etc.
            <br>
            <br>
            Example: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(curl, CURLOPT_CAINFO, "/etc/certs/cabundle.pem")
            <br>
            <br>
            Availability: For the SSL engines that don&rsquo;t support certificate files the CURLOPT_CAINFO option is ignored. Schannel support added in libcurl 7.60.
            <br>
            <br>
            Return value: curl_easy_setoptf() returns
            <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if the option is supported,
            <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not, or 
            <a href="CURLcode.htm#CURLE_OUT_OF_MEMORY">CURLE_OUT_OF_MEMORY</a> if there was insufficient heap space,
            whereas curl_easy_setopt() terminates on failure.
            <br>
            <br>
            See also: CURLOPT_CAPATH, <a href="#CURLOPT_SSL_VERIFYPEER">CURLOPT_SSL_VERIFYPEER</a>, CURLOPT_SSL_VERIFYHOST
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY_CAINFO</small>
         </td>
         <td>
            Proxy CA cert bundle. See CURLOPT_PROXY_CAINFO
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_ISSUERCERT</small>
         </td>
         <td>
            Issuer certificate. See CURLOPT_ISSUERCERT
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_CAPATH</small>
         </td>
         <td>
            Path to CA cert bundle. See CURLOPT_CAPATH
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY_CAPATH</small>
         </td>
         <td>
            Path to proxy CA cert bundle. See CURLOPT_PROXY_CAPATH
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_CRLFILE</small>
         </td>
         <td>
            Certificate Revocation List. See CURLOPT_CRLFILE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY_CRLFILE</small>
         </td>
         <td>
            Proxy Certificate Revocation List. See CURLOPT_PROXY_CRLFILE
            <small><br><a name="CURLOPT_CERTINFO"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_CERTINFO</small>
         </td>
         <td>
            Extract/request SSL certificate information.
          <br>
          <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_CERTINFO,
                                                                          <a href="integer.htm#bool">bool</a> certinfo)
          <br>
          <br>
            Pass true (1) to enable libcurl&rsquo;s certificate chain info gatherer.
          <br>
            With this enabled, libcurl will extract lots of information and data about the certificates in the certificate chain used in the SSL connection.
          <br>
            This data may then be retrieved after a transfer using 
            <a href="curl_easy_getinfo.htm">curl_easy_getinfo</a>() and its option CURLINFO_CERTINFO.
          <br>
          <br>
            Default: false (0)
          <br>
          <br>
            Protocols: All TLS-based
          <br>
          <br>
            Availability: This option is supported by the OpenSSL, GnuTLS, NSS and GSKit backends.
          <br>
          <br>
            Return value: curl_easy_setoptf() returns
          <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if the option is supported, and
          <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not,
            whereas curl_easy_setopt() terminates in error if the option is not supported.
          <br>
          <br>
            See also: <a href="#CURLOPT_CAINFO">CURLOPT_CAINFO</a>, <a href="#CURLOPT_SSL_VERIFYPEER">CURLOPT_SSL_VERIFYPEER</a>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PINNEDPUBLICKEY</small>
         </td>
         <td>
            Set pinned SSL public key . See CURLOPT_PINNEDPUBLICKEY
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY_PINNEDPUBLICKEY</small>
         </td>
         <td>
            Set the proxy&rsquo;s pinned SSL public key. See CURLOPT_PROXY_PINNEDPUBLICKEY
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_RANDOM_FILE</small>
         </td>
         <td>
            Provide source for entropy random data. See CURLOPT_RANDOM_FILE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_EGDSOCKET</small>
         </td>
         <td>
            Identify EGD socket for entropy. See CURLOPT_EGDSOCKET
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSL_CIPHER_LIST</small>
         </td>
         <td>
            Ciphers to use. See CURLOPT_SSL_CIPHER_LIST
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY_SSL_CIPHER_LIST</small>
         </td>
         <td>
            Proxy ciphers to use. See CURLOPT_PROXY_SSL_CIPHER_LIST
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSL_SESSIONID_CACHE</small>
         </td>
         <td>
            Disable SSL session-id cache. See CURLOPT_SSL_SESSIONID_CACHE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSL_OPTIONS</small>
         </td>
         <td>
            Control SSL behavior. See CURLOPT_SSL_OPTIONS
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PROXY_SSL_OPTIONS</small>
         </td>
         <td>
            Control proxy SSL behavior. See CURLOPT_PROXY_SSL_OPTIONS
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_KRBLEVEL</small>
         </td>
         <td>
            Kerberos security level. See CURLOPT_KRBLEVEL
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_GSSAPI_DELEGATION</small>
         </td>
         <td>
            Disable GSS-API delegation. See CURLOPT_GSSAPI_DELEGATION
         </td>
        </tr>
        <tr>
         <td>
          <b>SSH OPTIONS</b>
         </td>
         <td>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSH_AUTH_TYPES</small>
         </td>
         <td>
            SSH authentication types. See CURLOPT_SSH_AUTH_TYPES
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSH_COMPRESSION</small>
         </td>
         <td>
            Enable SSH compression. See CURLOPT_SSH_COMPRESSION
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSH_HOST_PUBLIC_KEY_MD5</small>
         </td>
         <td>
            MD5 of host&rsquo;s public key. See CURLOPT_SSH_HOST_PUBLIC_KEY_MD5
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSH_PUBLIC_KEYFILE</small>
         </td>
         <td>
            File name of public key. See CURLOPT_SSH_PUBLIC_KEYFILE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSH_PRIVATE_KEYFILE</small>
         </td>
         <td>
            File name of private key. See CURLOPT_SSH_PRIVATE_KEYFILE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSH_KNOWNHOSTS</small>
         </td>
         <td>
            File name with known hosts. See CURLOPT_SSH_KNOWNHOSTS
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSH_KEYFUNCTION</small>
         </td>
         <td>
            Callback for known hosts handling. See CURLOPT_SSH_KEYFUNCTION
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SSH_KEYDATA</small>
         </td>
         <td>
            Custom pointer to pass to ssh key callback. See CURLOPT_SSH_KEYDATA
         </td>
        </tr>
        <tr>
         <td>
          <b>OTHER OPTIONS</b>
         </td>
         <td>
            <small><br><a name="CURLOPT_PRIVATE"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_PRIVATE</small>
         </td>
         <td>
            Private pointer to store.
          <br>
          <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_PRIVATE, 
                                                                          <a href="atom.htm">atom</a> pointer)
          <br>
          <br>
            Pass an atom pointer as parameter, pointing to data that should be associated with this curl handle. <br>
            The pointer can subsequently be retrieved using 
            <a href="curl_easy_getinfo.htm">curl_easy_getinfo</a>() with the 
            <a href="curl_easy_getinfo.htm#CURLINFO_PRIVATE">CURLINFO_PRIVATE</a> option. <br>
            libcurl itself never does anything with this data.
          <br>
          <br>
            Default: NULL
          <br>
          <br>
            Protocols: All
          <br>
          <br>
            Example:
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_1b435j95-1111-4273-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_1b435j95-1111-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom curl = curl_easy_init()
atom private = NULL

curl_easy_setopt(curl, CURLOPT_URL, "http://example.com")
 
/* store a pointer to our private struct */
curl_easy_setopt(curl, CURLOPT_PRIVATE, private)
 
atom res = curl_easy_perform(curl)
 
/* we can extract the private pointer again too */
{res,private} = curl_easy_getinfo(curl, CURLINFO_PRIVATE)

/* always cleanup */
curl_easy_cleanup(curl)
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#004080">atom</font><font color="#008080"> private</font><font color="#0000FF"> =</font><font color="#004600"> NULL
</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "http://example.com"</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>/* store a pointer to our private struct */</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_PRIVATE</font><font color="#0000FF">,</font><font color="#008080"> private</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#004080">atom</font><font color="#000000"> res</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>/* we can extract the private pointer again too */</i></font>
<font color="#0000FF">{</font><font color="#000000">res</font><font color="#0000FF">,</font><font color="#008080">private</font><font color="#0000FF">} =</font><font color="#5E005E"> curl_easy_getinfo</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLINFO_PRIVATE</font><font color="#0000FF">)
</font>
<font color="#000080"><i>/* always cleanup */</i></font>
<font color="#5E005E">curl_easy_cleanup</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: Added in 7.10.3
          <br>
          <br>
            Return value: curl_easy_setoptf() returns
          <a href="CURLcode.htm#CURLE_OK">CURLE_OK</a> if the option is supported, and
          <a href="CURLcode.htm#CURLE_UNKNOWN_OPTION">CURLE_UNKNOWN_OPTION</a> if not,
            whereas curl_easy_setopt() terminates in error if the option is not supported.
          <br>
          <br>
            See also: CURLOPT_VERBOSE, CURLOPT_STDERR
            <small><br><a name="CURLOPT_SHARE"></a></small>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_SHARE</small>
         </td>
         <td>
            Specify share handle to use.
            <br>
            <br>
            Synopsis: <a href="curl_easy_setopt.htm">curl_easy_setopt</a>(<a href="atom.htm">atom</a> curl, CURLOPT_SHARE,
                                                                          <a href="atom.htm">atom</a> share)
            <br>
            <br>
            Pass a share handle as a parameter. <br>
            The share handle must have been created by a previous call to <a href="curl_share_init.htm">curl_share_init</a>. <br>
            Setting this option, will make this curl handle use the data from the shared handle instead of keeping the data to itself. <br>
            This enables several curl handles to share data. <br>
            If the curl handles are used simultaneously in multiple threads, you MUST use the locking methods in the share handle. <br>
            See <a href="curl_share_setopt.htm">curl_share_setopt</a>() for details.
            <br>
            <br>
            If you add a share that is set to share cookies, your easy handle will use that cookie cache and get the cookie engine enabled. <br>
            If you unshare an object that was using cookies (or change to another object that doesn&rsquo;t share cookies), the easy handle 
            will get its cookie engine disabled.
            <br>
            <br>
            Data that the share object is not set to share will be dealt with the usual way, as if no share was used.
            <br>
            <br>
            Set this option to NULL again to stop using that share object.
            <br>
            <br>
            Default: NULL
            <br>
            <br>
            Protocols: All
            <br>
            <br>
            Example: (see also demo/libcurl/read_cookies.exw)
          <br>
          <br><small>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-test-4273-986j-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-test-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
atom curl = curl_easy_init()
atom curl2 = curl_easy_init() /* a second handle */
atom shobject = curl_share_init()
curl_share_setopt(shobject, CURLSHOPT_SHARE, CURL_LOCK_DATA_COOKIE)

curl_easy_setopt(curl, CURLOPT_URL, "https://example.com/")
curl_easy_setopt(curl, CURLOPT_COOKIEFILE, "")
curl_easy_setopt(curl, CURLOPT_SHARE, shobject)
integer res = curl_easy_perform(curl)
curl_easy_cleanup(curl)

/* the second handle shares cookies from the first */
curl_easy_setopt(curl2, CURLOPT_URL, "https://example.com/second")
curl_easy_setopt(curl2, CURLOPT_COOKIEFILE, "")
curl_easy_setopt(curl2, CURLOPT_SHARE, shobject)
res = curl_easy_perform(curl2)
curl_easy_cleanup(curl2)

curl_share_cleanup(shobject)
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font>
<font color="#004080">atom</font><font color="#000000"> curl2</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()</font><font color="#000080"><i> /* a second handle */</i></font>
<font color="#004080">atom</font><font color="#000000"> shobject</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_share_init</font><font color="#0000FF">()</font>
<font color="#5E005E">curl_share_setopt</font><font color="#0000FF">(</font><font color="#000000">shobject</font><font color="#0000FF">,</font><font color="#004600"> CURLSHOPT_SHARE</font><font color="#0000FF">,</font><font color="#004600"> CURL_LOCK_DATA_COOKIE</font><font color="#0000FF">)
</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "https://example.com/"</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_COOKIEFILE</font><font color="#0000FF">,</font><font color="#008000"> ""</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_SHARE</font><font color="#0000FF">,</font><font color="#000000"> shobject</font><font color="#0000FF">)</font>
<font color="#004080">integer</font><font color="#000000"> res</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_cleanup</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)
</font>
<font color="#000080"><i>/* the second handle shares cookies from the first */</i></font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl2</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "https://example.com/second"</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl2</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_COOKIEFILE</font><font color="#0000FF">,</font><font color="#008000"> ""</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl2</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_SHARE</font><font color="#0000FF">,</font><font color="#000000"> shobject</font><font color="#0000FF">)</font>
<font color="#000000">res</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl2</font><font color="#0000FF">)</font>
<font color="#5E005E">curl_easy_cleanup</font><font color="#0000FF">(</font><font color="#000000">curl2</font><font color="#0000FF">)
</font>
<font color="#5E005E">curl_share_cleanup</font><font color="#0000FF">(</font><font color="#000000">shobject</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div></small>
            Availability: Always
            <br>
            <br>
            See also: CURLOPT_COOKIE
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_NEW_FILE_PERMS</small>
         </td>
         <td>
            Mode for creating new remote files. See CURLOPT_NEW_FILE_PERMS
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_NEW_DIRECTORY_PERMS</small>
         </td>
         <td>
            Mode for creating new remote directories. See CURLOPT_NEW_DIRECTORY_PERMS
         </td>
        </tr>
        <tr>
         <td>
          <b>TELNET OPTIONS</b>
         </td>
         <td>
         </td>
        </tr>
        <tr>
         <td>
          <small>CURLOPT_TELNETOPTIONS</small>
         </td>
         <td>
            TELNET options. See CURLOPT_TELNETOPTIONS
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="CURLcode.htm#curl_easy_strerror">curl_easy_strerror</a>,
          <a href="#CURLOPT_ERRORBUFFER">CURLOPT_ERRORBUFFER</a>,
          <a href="#CURLOPT_VERBOSE">CURLOPT_VERBOSE</a>,
          <a href="#CURLOPT_DEBUGFUNCTION">CURLOPT_DEBUGFUNCTION</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
