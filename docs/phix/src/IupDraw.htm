<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">IupDraw</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            A group of functions to draw in an <a href="IupCanvas.htm">IupCanvas</a> or an <a href="IupBackgroundBox.htm">IupBackgroundBox</a>.<br>
            They are simple functions designed to help the drawing of custom controls based on these two controls.<br>
            It is NOT a complete set of drawing functions, for that you should still use another toolkit like CD.
            <br>
            <br>
            IMPORTANT: all functions can be used only in <a href="IupCanvas.htm">IupCanvas</a> or <a href="IupBackgroundBox.htm">IupBackgroundBox</a>
            and inside the ACTION callback. <br>
            To force a redraw anytime use the functions <a href="IupUpdate.htm">IupUpdate</a> or <a href="IupRedraw.htm">IupRedraw</a>.
            <a name=control></a>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Functions:</b>
         </td>
         <td>
            Control:
            <br>
            <br>
            All primitives can be called only between calls to IupDrawBegin and IupDrawEnd.
            <br>
            <br>
            <b>IupDrawBegin</b>(Ihandle ih) - Initialize the drawing process.<br>
            <b>IupDrawEnd</b>(Ihandle ih) - Terminates the drawing process.<br>
            <b>IupDrawSetClipRect</b>(Ihandle ih, int x1, int y1, int x2, int y2) - Defines a rectangular clipping region.<br>
            <b>IupDrawResetClip</b>(Ihandle ih) - Reset the clipping area to none.
            <br>
            <a name=primitives></a>
            <br>
            Primitives:
            <br>
            <br>
            The primitives color is controlled by the attribute DRAWCOLOR. Default: "0 0 0".
            <br>
            <br>
            Rectangle, Arc and Polygon can be filled or stroked. <br>
            When stroked the line style can be continuous, dashed or dotted. <br>
            These are controlled by the attribute DRAWSTYLE. <br>
            Can have values: FILL, STROKE, STROKE_DASH or STROKE_DOT. Default: STROKE. <br>
            The FILL value when set before IupDrawLine has the same effect as STROKE.
            <br>
            <br>
            The line width default is 1, but it can be controlled by the DRAWLINEWIDTH attribute. (since 3.24)
            <br>
            <br>
            <b>IupDrawParentBackground</b>(Ihandle ih) - Fills the canvas with the native parent background color.<br>
            <b>IupDrawLine</b>(Ihandle ih, integer x1, y1, x2, y2) - Draws a line including start and end points.<br>
            <b>IupDrawRectangle</b>(Ihandle ih, integer x1, y1, x2, y2) - Draws a rectangle including start and end points.<br>
            <b>IupDrawArc</b>(Ihandle ih, integer x1, y1, x2, y2, atom a1, a2) - Draws an arc inside a rectangle between the two angles in degrees. <br>
            When filled will draw a pie shape with the vertex at the center of the rectangle. <br>
            Angles are counter-clock wise relative to the 3 o&rsquo;clock position.<br>
            <b>IupDrawPolygon</b>(Ihandle ih, sequence points) - Draws a polygon. Coordinates are stored in the array in the sequence: x1, y1, x2, y2, ...<br>
            <b>IupDrawText</b>(Ihandle ih, string str, integer x, y) - Draws a text in the given position using the font defined by DRAWFONT (since 3.22), 
            if not defined then use FONT. <br>
            The coordinates are relative the top-left corner of the text. <br>
            Strings with multiple line are accepted using '\n' as line separator. <br>
            Horizontal text alignment for multiple lines can be controlled using DRAWTEXTALIGNMENT attribute: ALEFT (default), ARIGHT and ACENTER options (since 3.22).<br>
            <b>IupDrawImage</b>(Ihandle ih, string name, bool make_inactive, integer x, y) - Draws an image given its name. <br>
            The coordinates are relative the top-left corner of the image. <br>
            The image name follows the same behavior as the IMAGE attribute used by many controls. <br>
            Use <a href="IupSetHandle.htm">IupSetHandle</a> or <a href="IupSetAttributeHandle.htm">IupSetAttributeHandle</a> to associate an image to a name.
            See also <a href="IupImage.htm">IupImage</a>. <br>
            The make_inactive parameter will draw the same image in inactive state.<br>
            <b>IupDrawSelectRect</b>(Ihandle ih, integer x1, y1, x2, y2) - Draws a selection rectangle.<br>
            <b>IupDrawFocusRect</b>(Ihandle ih, integer x1, y1, x2, y2) - Draws a focus rectangle.
            <br>
            <a name=info></a>
            <br>
            Information:
            <br>
            <br>
            integer {width,height} = <b>IupDrawGetSize</b>(Ihandle ih) - Returns the drawing area size.<br>
            integer {width,height} = <b>IupDrawGetTextSize</b>(Ihandle ih, string str) - Returns the given text size using the font defined by DRAWFONT, if not defined then use FONT.<br>
            integer {width,height,bpp} = <b>IupDrawGetImageInfo</b>(string name) - Returns the given image size and bits per pixel. bpp can be 8, 24 or 32.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="IupCanvas.htm">IupCanvas</a>,
          <a href="IupBackgroundBox.htm">IupBackgroundBox</a>,
          <a href="IupUpdate.htm">IupUpdate</a>,
          <a href="IupRedraw.htm">IupRedraw</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
