<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">IupFlatTree</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include pGUI.e
           <br>
           <br>
            <a href="Ihandle.htm">Ihandle</a> ih = IupFlatTree(<a href="string.htm">string</a> attributes="", 
                                                               <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Creates a tree containing nodes of branches or leaves. Both branches and leaves can have an associated text and image.
            <br>
            <br>
            For more information on the attributes and args parameters see <a href="IupSetAttributes.htm">IupSetAttributes</a>.
            <br>
            <br>
            The branches can be expanded or collapsed. When a branch is expanded, its immediate children are visible, and when it is collapsed they are hidden.
            <br>
            <br>
            The leaves can generate an "executed" or "renamed" actions, [?? branches can only generate a "renamed" action. ??]
            <br>
            <br>
            The focus node is the node with the focus rectangle, marked nodes have their background inverted.
            <br>
            <br>
            It behaves like <a href="IupTree.htm">IupTree</a> but it does not depend on the native system.
            <br>
            <br>
            It inherits from <a href="IupCanvas.htm">IupCanvas</a>.
            <br>
            <br>
            Returns: the identifier of the created element.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="IupTree.htm">IupTree</a>
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
            IupFlatTree is almost identical to the <a href="IupTree.htm">IupTree</a> with some additional attributes, <br>
            but it has a major difference: all the attributes work before map. <br>
            So you can add and remove nodes before the element is mapped to the native system.
            <br>
            <br>
            Another important difference is that there is no ADDROOT attribute. <br>
            IupFlatTree behaves as ADDROOT=NO always, so there is never an initial root branch.<br>
            <b>Note:</b> I (PL) have found by experiment that an IupFlatTree <b>must</b> have at least one of these:<br>
            <a href="IupSetAttribute.htm">IupSetAttribute</a>(tree, "ADDBRANCH-1", "<i>text</i>") <i>or</i><br>
            <a href="IupSetAttribute.htm">IupSetAttribute</a>(tree, "ADDLEAF-1", "<i>text</i>")
            <br>
            <br>
            The SPACING attribute is simply the vertical space between each node, different from the <a href="IupTree.htm">IupTree</a>.
            <br>
            <br>
            The EMPTYTOGGLE attribute replaces EMPTYAS3STATE and it works in all systems.
            <br>
            <br>
            Finally all features behave the same in all systems.
            <br>
            <br>
            An example can be seen in demo/pGUI/IupFlatTree.exw, and there is also one in demo/pGUI/sample.exw
         </td>
        </tr>
        <tr>
         <td>
          Hierarchy
         </td>
         <td>
            Branches can contain other branches or leaves. <br>
            The first node always has id=0 and depth=0. <br>
            The tree nodes have a sequential identification number (id), starting by the first, with id=0, and increases for each node independent from the node depth. <br>
            The following picture illustrates the numbering of the nodes in a tree.
          <br>
          <br>
          <img src="images/iuptree.png"/>
         </td>
        </tr>
        <tr>
         <td>
          Tree nodes and Ids
         </td>
         <td>
            Since you have to add each node the creation of this tree can be done in several ways because the action attributes 
            ADD* and INSERT* use an existent node to position the new node. 
            <br>
            <br>
            The following pseudo code initializes the tree from top to bottom sequentially:
            <br>
            <br>
             <small><pre>
(0)         TITLE0 = "Figures"
(1)           ADDLEAF0 = "Other"               // Use previous node as reference
(2)           ADDBRANCH1 = "triangle"
(3)             ADDLEAF2 = "equilateral"
(4)             ADDLEAF3 = "isoceles"
(5)             ADDLEAF4 = "scalenus"
(6)           INSERTBRANCH2 = "parallelogram"  // Use previous node at same depth as reference
(7)             ADDLEAF6 = "square"
(8)             ADDLEAF7 = "diamond"
(9)           INSERTBRANCH6 = "2D"
(10)          INSERTBRANCH9 = "3D"
             </pre></small>
            <br>
            The following pseudo code initializes the tree from bottom to top sequentially (except for branches), and also uses the focus node:
            <br>
            <br>
             <small><pre>
            VALUE = 0  // Set the focus node at the first (default for a new element)
            TITLE = "Figures"
            ADDBRANCH = "3D"
            ADDBRANCH = "2D"
            ADDBRANCH = "parallelogram"
            ADDLEAF1 = "diamond"
            ADDLEAF1 = "square"
            ADDBRANCH = "triangle"
            ADDLEAF1 = "scalene"
            ADDLEAF1 = "isosceles"
            ADDLEAF1 = "equilateral"
            ADDLEAF = "Other"
             </pre></small>
            <br>
            Notice that in both cases the initialization of the tree is highly dependent on the order of the operations.
          <br>
          <br>
            Scrollbars are automatically displayed if the tree is greater than its display area.
          <br>
          <br>
            The first node added to an empty tree will always be the focus node.
          <br>
          <br>
            Alternatively, and often much simpler, trees can be populated from a nested sequence, see <a href="IupTreeAddNodes.htm">IupTreeAddNodes</a>().
         </td>
        </tr>
        <tr>
         <td>
          Manipulation
         </td>
         <td>
            Node insertion or removal is done by means of attributes. It is allowed to remove nodes and branches inside callbacks associated to opening or closing branches.
          <br>
          <br>
            This means that the user may insert nodes and branches only when necessary when the parent branch is opened, 
            allowing the use of a larger <a href="IupTree.htm">IupTree</a> without too much overhead. <br>
            Then when the parent branch is closed the subtree can be removed. <br>
            But the subtree must have at least 1 node so the branch can be opened and closed, empty branches can NOT be opened.
         </td>
        </tr>
        <tr>
         <td>
          User Data
         </td>
         <td>
            The node id does not always correspond to the same node as the tree is modified. <br>
            For example, an id=2 will always refer to the third node in the tree, so if you add a node before the third node, 
            the node with id=2 will now refer to the new node, and the old node will now have id=3. <br>
            For that reason, each node can store an user data pointer uniquely identifying the node. <br> 
            To set or retrieve the user data of a node use the USERDATAid attribute, or the Extra Functions below to associate 
            a user data to a node and to find a node given its user data.
         </td>
        </tr>
        <tr>
         <td>
          Images
         </td>
         <td>
            IupFlatTree has three types of images: one associated to the leaf, one to the collapsed branch and the other to the expanded branch. <br>
            Each image can be changed, both globally and individually.
            <br>
            <br>
            The predefined images used in IupFlatTree can be obtained by means of function IupGetHandle. <br>
            The names of the predefined images are: IMGLEAF, IMGCOLLAPSED, IMGEXPANDED, IMGBLANK (blank sheet of paper) and IMGPAPER (written sheet of paper). <br>
            By default:
            <br>
            <br>
            "IMAGELEAF" uses "IMGLEAF" <br>
            "IMAGEBRANCHCOLLAPSED" uses "IMGCOLLAPSED" <br>
            "IMAGEBRANCHEXPANDED" uses "IMGEXPANDED"
            <br>
            <br>
            "IMGBLANK" and "IMGPAPER" are designed for use as "IMAGELEAF"
            <br>
            <br>
            The default images are 16x16 pixels on standard resolution and 24x24 pixels on high resolution (4k displays), 
            but you can force the use of the high resolution images by defining the global attribute "TREEIMAGE24" to "Yes".
            <br>
            <br>
            All imagens do NOT need to have the same size, but it is recommended that a pair of branch open and branch collapsed to have the same size.
            <br>
            <br>
            IMGEMPTY can be used as branches or leafs to clear the image (a totally transparent image).
         </td>
        </tr>
        <tr>
         <td>
          Simple Marking
         </td>
         <td>
            It is the default operation mode (MARKMODE=SINGLE). In this mode only one node can be selected.
         </td>
        </tr>
        <tr>
         <td>
          Multiple Marking
         </td>
         <td>
            IupFlatTree allows marking several nodes simultaneously using the Shift and Control keys. <br>
            To use multiple marking set MARKMODE=MULTIPLE. <br>
            Multiple nodes can also be selected using mouse dragging if SHOWDRAGDROP=NO.
          <br>
          <br>
            When a user keeps the Control key pressed, the individual marking mode is used. <br>
            This way, the focus node can be modified without changing the marked node. <br>
            To reverse a node marking, the user simply has to press the space bar.
          <br>
          <br>
            When the user keeps the Shift key pressed, the block marking mode is used. <br>
            This way, all nodes between the focus node and the initial node are marked, and all others are unmarked. <br>
            The initial node is changed every time a node is marked without the Shift key being pressed. <br>
            This happens when any movement is done without Shift or Control keys being pressed, or when the space bar is pressed together with Control.
         </td>
        </tr>
        <tr>
         <td>
          Extra Text Area
         </td>
         <td>
            (since 3.30)
            The extra text area is displayed when EXTRATEXTWIDTH is greater than 0. <br>
            It is located at right, and displays additional text associated with each node. <br>
            The split handler can be controlled by the user and directly sets the EXTRATEXTWIDTH attribute.
         </td>
        </tr>
        <tr>
         <td>
          Navigation
         </td>
         <td>
            Using the keyboard:
          <ul>
           <li>Arrow Up/Down: Moves the focus node to the neighbor node, according to the arrow direction. 
                              If Shift is pressed and MARKMODE=MULTIPLE a continuous range of cells is selected.</li>
           <li>Home/End: Moves the focus node to the first/last node. </li>
           <li>Page Up/Page Down: Moves the focus node to the node one visible page above/below the focus node. </li>
           <li>Enter: If the focus node is an expanded branch, it is collapsed; if it is a collapsed branch, it is expanded; if it is a leaf, it is executed. </li>
           <li>Ctrl+Arrow Up/Down: Moves only the focus node. </li>
           <li>Ctrl+Space: Marks or unmarks the node at focus. </li>
           <li>F2: Calls the rename callback or invokes the in place rename. </li>
           <li>Esc: cancels in place rename. </li>
          </ul>
            Using the left mouse button:
          <ul>
           <li>Clicking a node: Moves the focus node to the clicked node. </li>
           <li>Clicking a (-/+) box: Makes the branch to the right of the (-/+) box collapse/expand. </li>
           <li>Double-clicking a node: Moves the focus node to the clicked node. 
                If the node is an expanded branch, it is collapsed; 
                if it is a collapsed branch, it is expanded; 
                if it is a leaf, it is executed. </li>
           <li>Clicking twice a node: Calls the rename callback or invokes the in place rename. </li>
           <li>Clicking and dragging a node: if SHOWDRAGDROP=Yes starts a drag. When mouse is released, the DRAGDROP_CB callback is called. <br>
                If the callback does not exist or if it returns <a href="callbacks.htm#IUP_CONTINUE">IUP_CONTINUE</a> then the node is moved to the new position. <br>
                If Ctrl is pressed then the node is copied instead of moved. In Motif drag is performed with the middle mouse button.
           </li>
          </ul>
            Removing a Node with "Del" <br>
            By default the Del key is not processed, but you can implement it using a simple
          <a href="callbacks.htm#K_ANY">K_ANY</a> callback:
        <br>
        <br><small>
<!--eucode>
    function k_any(Ihandle ih, integer c)
        if c == K_DEL then IupSetAttribute(ih,"DELNODE","MARKED") end if 
        return IUP_CONTINUE
    end function
</eucode-->
<pre>
<font color="#008080">    function</font><font color="#000000"> k_any</font><font color="#0000FF">(</font><font color="#5E005E">Ihandle</font><font color="#000000"> ih</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> c</font><font color="#0000FF">)</font>
<font color="#008080">        if</font><font color="#000000"> c</font><font color="#0000FF"> ==</font><font color="#004600"> K_DEL</font><font color="#008080"> then</font><font color="#5E005E"> IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000">"DELNODE"</font><font color="#0000FF">,</font><font color="#008000">"MARKED"</font><font color="#0000FF">)</font><font color="#008080"> end if 
        return</font><font color="#004600"> IUP_CONTINUE</font>
<font color="#008080">    end function</font>
</pre>
          </small>
         </td>
        </tr>
        <tr>
         <td>
          Extra Functions
         </td>
         <td>
            IupFlatTree has functions that allow associating a pointer (or a user defined id) to a node. <br>
            In order to do that, you provide the id of the node and the pointer (userid); even if the node&rsquo;s 
            id changes later on (because of insertions/deletions above/below it), the userid will still be associated with the given node. <br>
            A positive integer index, to some other table, is recommended in Phix, whereas using raw pointers would 
            most likely require additional/careful/tedious memory management.<br>
            These functions all use the USERDATAid attribute.
            <br>
            <br>
            IupFlatTree shares the same functions with <a href="IupTree.htm">IupTree</a>.
          <a name="IupTreeSetUserId"></a>
          <br>
          <br>
            <b>IupTreeSetUserId</b>(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> id, <a href="atom.htm">atom</a> userid) <br>
            ih: Identifier of the interface element. <br>
            id: Node identifier. <br>
            userid: User index or pointer to be associated with the node. Use NULL to remove the association.
          <br>
          <br>
            Associates a userid with a given id. If the id of the node is changed, the userid remains the same.
            Terminates in error if the node cannot be found.
          <a name="IupTreeGetUserId"></a>
          <br>
          <br>
            <a href="atom.htm">atom</a> userid = <b>IupTreeGetUserId</b>(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> id) <br>
            ih: Identifier of the interface element. <br>
            id: Node identifier.
          <br>
          <br>
            Returns the index or pointer associated to the node or NULL if none was associated. <br>
            IupTreeSetUserId must have been called for the node with the given id.
          <a name="IupTreeGetId"></a>
          <br>
          <br>
            <a href="integer.htm">integer</a> id = <b>IupTreeGetId</b>(<a href="Ihandle.htm">Ihandle</a> ih, <a href="atom.htm">atom</a> userid) <br>
            ih: Identifier of the interface element. <br>
            userid: Index or pointer associated to the node.
          <br>
          <br>
            Returns the id of the node that has the userid on success or -1 (nil) if not found. 
            IupTreeSetUserId must have been called with the same userid.
            <br>
            <br>
            The utility functions <a href="IupSetAttribute.htm#utility">IupSetAttributeId</a>, <a href="IupGetAttribute.htm#utility">IupGetAttributeId</a>, 
            <a href="IupGetAttribute.htm#utility">IupGetIntId</a>, <a href="IupGetAttribute.htm#utility">IupGetFloatId</a>, 
            <a href="IupSetStrAttribute.htm#utility">IupSetIntId</a>, and <a href="IupSetStrAttribute.htm#utility">IupSetFloatId</a>
            can also be used here, as well as <a href="IupTreeAddNodes.htm">IupTreeAddNodes</a>.
            <br>        
            <br>        
            They work just like the respective traditional set and get functions, but the attribute string is complemented with the id value. For example:
            <br>
            <br><small>
<!--eucode>
IupSetAttributeId(ih, "KIND", 30, value) == IupSetAttribute(ih, "KIND30", value)
IupSetAttributeId(ih, "ADDLEAF", 10, value) == IupSetAttribute(ih, "ADDLEAF10", value)
</eucode-->
<pre>
<font color="#5E005E">IupSetAttributeId</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "KIND"</font><font color="#0000FF">,</font><font color="#000000"> 30</font><font color="#0000FF">,</font><font color="#5E005E"> value</font><font color="#0000FF">) ==</font><font color="#5E005E"> IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "KIND30"</font><font color="#0000FF">,</font><font color="#5E005E"> value</font><font color="#0000FF">)</font>
<font color="#5E005E">IupSetAttributeId</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "ADDLEAF"</font><font color="#0000FF">,</font><font color="#000000"> 10</font><font color="#0000FF">,</font><font color="#5E005E"> value</font><font color="#0000FF">) ==</font><font color="#5E005E"> IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "ADDLEAF10"</font><font color="#0000FF">,</font><font color="#5E005E"> value</font><font color="#0000FF">)</font>
</pre>
            </small><br>
            These functions are faster than the traditional functions because they do not need to parse the attribute name string and the application 
            does not need to concatenate the attribute name with the id, although you will probably only notice if you are processing a <i>very</i>
            large tree.  Note that the C function <span class="illegal">IupSetfAttributeId</span> is not wrapped by pGUI, however that functionality is covered by the
            optional parameters of <a href="IupSetStrAttribute.htm#utility">IupSetStrAttributeId</a>.
         </td>
        </tr>

        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
            Inherits all attributes and callbacks of the <a href="IupCanvas.htm">IupCanvas</a>, but redefines a few attributes.
            <br>
            <br>
            Different from the <a href="IupTree.htm">IupTree</a>, all attributes are functional before map. <br>
            The attributes marked with (*) are exclusive to the IupFlatTree and are NOT support in the regular IupTree.
         </td>
        </tr>
        <tr>
         <td>
          <b>General</b>
         </td>
         <td>
            
         </td>
        </tr>
        <tr>
         <td>
          AUTOREDRAW
         </td>
         <td>
            (non inheritable) automatically redraws the tree when something has change. <br>
            Set to NO to add many items to the tree without updating the display. Default: "YES".
         </td>
        </tr>
        <tr>
         <td>
          <a href="common.htm#BGCOLOR">BGCOLOR</a>
         </td>
         <td>
            Background color of the tree. Default: the global attribute <a href="iupgattr.htm#TXTBGCOLOR">TXTBGCOLOR</a>.
         </td>
        </tr>
        <tr>
         <td>
          BORDERCOLOR(*)
         </td>
         <td>
            color used for the internal border. Default: "50 150 255". This is for the internal border.
         </td>
        </tr>
        <tr>
         <td>
          BORDERWIDTH(*)
         </td>
         <td>
            line width used for the internal border. Default: "0". The internal borders are hidden by simply setting this value to 0. It is drawn inside the canvas, so inside the scrollbars.
         </td>
        </tr>
        <tr>
         <td>
          COUNT
         </td>
         <td>
            (read only, non inheritable) returns the total number of nodes in the tree.
         </td>
        </tr>
        <tr>
         <td>
          <a href="common.htm#EXPAND">EXPAND</a>
         </td>
         <td>
            (non inheritable) The default value is "YES".
         </td>
        </tr>
        <tr>
         <td>
          EXTRATEXTWIDTH(*)
         </td>
         <td>
            width of the extra text area at right. (since 3.30)
         </td>
        </tr>
        <tr>
         <td>
          <a href="common.htm#FGCOLOR">FGCOLOR</a>
         </td>
         <td>
            default text foreground color. <br>
            Once each node is created it will not change its color when <a href="common.htm#FGCOLOR">FGCOLOR</a> is changed.<br>
            Default: the global attribute <a href="iupgattr.htm#TXTFGCOLOR">TXTFGCOLOR</a>.
         </td>
        </tr>
        <tr>
         <td>
          HLCOLOR(*)
         </td>
         <td>
            (non inheritable) color of a filled box drawn over the selected node. Default: TXTHLCOLOR global attribute.
         </td>
        </tr>
        <tr>
         <td>
          HLCOLORALPHA(*)
         </td>
         <td>
            the transparency used to draw the selection. Default: 128. If set to 0 the selection box is not drawn.
         </td>
        </tr>
        <tr>
         <td>
          PSCOLOR(*)
         </td>
         <td>
            background color of a selected node. If not defined BACKCOLORid will be used. (since 3.30)
         </td>
        </tr>
        <tr>
         <td>
          TEXTPSCOLOR(*)
         </td>
         <td>
            foreground color of a selected node. If not defined FORECOLORid will be used. (since 3.30)
         </td>
        </tr>
        <tr>
         <td>
          ICONSPACING(*)
         </td>
         <td>
            (non inheritable) spacing between the image and the text. Default: "2".
         </td>
        </tr>
        <tr>
         <td>
          INDENTATION
         </td>
         <td>
            sets the indentation level in pixels. <br>
            Default: 16 for standard resolution, 24 for high resolution display.
         </td>
        </tr>
        <tr>
         <td>
          <a href="common.htm#RASTERSIZE">RASTERSIZE</a>
         </td>
         <td>
            (non inheritable) the initial size is "400x200". Set to NULL to allow the automatic layout use smaller values.
         </td>
        </tr>
        <tr>
         <td>
          SPACING
         </td>
         <td>
            vertical space between nodes. Notice that this is not the same as the <a href="IupTree.htm">IupTree</a>.
         </td>
        </tr>
        <tr>
         <td>
          CSPACING
         </td>
         <td>
            same as SPACING but using the units of the vertical part of the SIZE attribute. It will actually set the SPACING attribute. (since 3.29)
         </td>
        </tr>
        <tr>
         <td>
          TOPITEM
         </td>
         <td>
            (write-only) position the given node identifier at the top of the tree or near to make it visible. <br>
            If any parent node is collapsed then they are automatically expanded.
         </td>
        </tr>
        <tr>
         <td>
          <i>invalid</i>
         </td>
         <td>
            The following are <b>not</b> used on IupFlatTree (unlike IupTree):<br>
            ADDROOT (behaves as if "NO"),  EMPTYAS3STATE (replaced with EMPTYTOGGLE), INFOTIP (uses regular TIP behaviour instead)
         </td>
        </tr>
        <tr>
         <td>
          Also:
         </td>
         <td>
            <a href="common.htm#ACTIVE">ACTIVE</a>,
            <a href="common.htm#EXPAND">EXPAND</a>, 
            <a href="common.htm#FONT">FONT</a>,
            <a href="common.htm#SCREENPOSITION">SCREENPOSITION</a>, 
            <a href="common.htm#POSITION">POSITION</a>, 
            <a href="common.htm#MINSIZE">MINSIZE</a>, 
            <a href="common.htm#MAXSIZE">MAXSIZE</a>,
            <a href="common.htm#WID">WID</a>,
            <a href="common.htm#TIP">TIP</a>, 
            <a href="common.htm#SIZE">SIZE</a>,
            <a href="common.htm#RASTERSIZE">RASTERSIZE</a>,
            <a href="common.htm#ZORDER">ZORDER</a>,
            <a href="common.htm#VISIBLE">VISIBLE</a>,
            <a href="common.htm#THEME">THEME</a>: also accepted. 
          <br>
          <br>
<!--
            The NAME common attribute is still not supported because of a backward compatibility code. <br>
            Old applications must change the use of the old NAME attribute to TITLE, so the new NAME common attribute can be enabled in future versions.
          <br>
          <br>
            Drag & Drop attributes are supported, but SHOWDRAGDROP must be set no No.
-->
         </td>
        </tr>

        <tr>
         <td>
          <b>Expanders</b>
         </td>
         <td>
            (non inheritable)
         </td>
        </tr>
        <tr>
         <td>
          HIDEBUTTONS
         </td>
         <td>
            hide the expand and collapse buttons.
         </td>
        </tr>
        <tr>
         <td>
          HIDELINES
         </td>
         <td>
            hide the lines that connect the nodes in the hierarchy.
         </td>
        </tr>
        <tr>
         <td>
          LINECOLOR(*)
         </td>
         <td>
            the color of the dotted guidelines. Default: "110 110 110"
         </td>
        </tr>
        <tr>
         <td>
          BUTTONBGCOLOR(*)
         </td>
         <td>
            background color of the expander buttons. Default: "240 240 240"
         </td>
        </tr>
        <tr>
         <td>
          BUTTONFGCOLOR(*)
         </td>
         <td>
            sign color of the expander buttons ("+" or "-" signs). Default: "50 100 150"
         </td>
        </tr>
        <tr>
         <td>
          BUTTONBRDCOLOR(*)
         </td>
         <td>
            border color of the expander buttons. Default: "150 150 150"
         </td>
        </tr>
        <tr>
         <td>
          BUTTONSIZE(*)
         </td>
         <td>
            size of the expander button square. Default: 9 for standard resolution, 16 for high resolution display
         </td>
        </tr>
        <tr>
         <td>
          BUTTONPLUSIMAGE(*)
         </td>
         <td>
            the image name that will be shown for all expander button when collapsed. By default the button is drawn. <br>
            The "IMGPLUS" pre-defined image is a 9x9 image that can be used.
         </td>
        </tr>
        <tr>
         <td>
          BUTTONMINUSIMAGE(*)
         </td>
         <td>
            the image name that will be shown for all expander button when collapsed. By default the button is drawn. <br>
            The "IMGMINUS" pre-defined image is a 9x9 image that can be used.
          <a name="Nodes"></a>
         </td>
        </tr>

        <tr>
         <td>
          <b>Nodes</b>
         </td>
         <td>
            (non inheritable) For these attributes "id" is the specified node identifier. <br>
            If "id" is empty or invalid, then the focus node is used as the specified node.
         </td>
        </tr>
        <tr>
         <td>
          CHILDCOUNTid
         </td>
         <td>
            (read only) returns the immediate children count of the specified branch. <br>
            It does not count children of child that are branches.
         </td>
        </tr>
        <tr>
         <td>
          TOTALCHILDCOUNTid
         </td>
         <td>
            (read only) returns the total children count of the specified branch. It counts all grandchildren too.
         </td>
        </tr>
        <tr>
         <td>
          ROOTCOUNT
         </td>
         <td>
            (read only) returns the number of root nodes. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          COLORid
         </td>
         <td>
            foreground color of the title at the given id. If not defined FGCOLOR is used. <br>
            The value should be a string in the format "R G B" where R, G, B are numbers from 0 to 255.
         </td>
        </tr>
        <tr>
         <td>
          BACKCOLOR(*)
         </td>
         <td>
            background color of the title at the given id. If not defined BGCOLOR is used.
         </td>
        </tr>
        <tr>
         <td>
          ITEMTIP(*)
         </td>
         <td>
            tip of the node at the given id. If defined will be shown instead of the TIP attribute.
         </td>
        </tr>
        <tr>
         <td>
          DEPTHid
         </td>
         <td>
            (read only) returns the depth of the specified node. <br>
            The first node has depth=0, its immediate children has depth=1, their children has depth=2 and so on.
         </td>
        </tr>
        <tr>
         <td>
          KINDid
         </td>
         <td>
            (read only) returns the kind of the specified node. <br>
            Possible values:
          <br>
          <br>
            "LEAF": The node is a leaf <br>
            "BRANCH": The node is a branch
         </td>
        </tr>
        <tr>
         <td>
          PARENTid
         </td>
         <td>
            (read only) returns the identifier of the specified node.
         </td>
        </tr>
        <tr>
         <td>
          NEXTid
         </td>
         <td>
            (read only) returns the next brother (same depth) of the specified node. <br>
            Returns NULLs if at last child node of the parent (at the same depth).
         </td>
        </tr>
        <tr>
         <td>
          PREVIOUSid
         </td>
         <td>
            (read only) returns the previous brother (same depth) of the specified node. <br>
            Returns NULLs if at first child node of the parent (at the same depth).
         </td>
        </tr>
        <tr>
         <td>
          LASTid
         </td>
         <td>
            (read only) returns the last brother (same depth) of the specified node.
         </td>
        </tr>
        <tr>
         <td>
          FIRSTid
         </td>
         <td>
            (read only) returns the first brother (same depth) of the specified node. <br>
            This is the same as getting the first child of the parent of the given node. <br>
            If the specified node is the first child returns the specified node.
         </td>
        </tr>
        <tr>
         <td>
          STATEid
         </td>
         <td>
            the state of the specified branch. Returns NULL for a LEAF. <br>
            Possible values:
          <br>
          <br>
            "EXPANDED": Expanded branch state (shows its children) <br>
            "COLLAPSED": Collapsed branch state (hides its children)
         </td>
        </tr>
        <tr>
         <td>
          TITLEid
         </td>
         <td>
            the text label of the specified node.
         </td>
        </tr>
        <tr>
         <td>
          TITLEFONTid
         </td>
         <td>
            the text font of the specified node. The format is the same as the <a href="common.htm#FONT">FONT</a> attribute.
         </td>
        </tr>
        <tr>
         <td>
          TITLEFONTSTYLEid
         </td>
         <td>
            changes the font style of the specified node. Actually changes the TITLEFONTid attribute.
         </td>
        </tr>
        <tr>
         <td>
          TITLEFONTSIZEid
         </td>
         <td>
            changes the font size of the specified node. Actually changes the TITLEFONTid attribute.
         </td>
        </tr>
        <tr>
         <td>
          USERDATAid
         </td>
         <td>
            the user data associated with the specified node.
         </td>
        </tr>
        <tr>
         <td>
          EXTRATEXTid(*)
         </td>
         <td>
            text displayed at the extra text area at right. (since 3.30)
         </td>
        </tr>

        <tr>
         <td>
          <b>Toggle</b>
         </td>
         <td>
            (non inheritable)
         </td>
        </tr>
        <tr>
         <td>
          SHOWTOGGLE
         </td>
         <td>
            enables the use of toggles for all nodes of the tree. <br>
            Can be "YES", "3STATE" or "NO". Default: "NO". <br>
         </td>
        </tr>
        <tr>
         <td>
          EMPTYTOGGLE(*)
         </td>
         <td>
            when SHOWTOGGLE=Yes, the empty space left in nodes that TOGGLEVISIBLEid=NO is filled with a blank space. Can be Yes or NO. Default: No.
         </td>
        </tr>
        <tr>
         <td>
          TOGGLEVALUEid
         </td>
         <td>
            defines the toggle state. Values can be "ON" or "OFF". <br>
            If SHOW3STATE=YES then can also be "NOTDEF". Default: "OFF".
         </td>
        </tr>
        <tr>
         <td>
          TOGGLEVISIBLEid
         </td>
         <td>
            defines the toggle visible state. Values can be "Yes" or "No". Default: "Yes".
         </td>
        </tr>
        <tr>
         <td>
          TOGGLEBGCOLOR(*)
         </td>
         <td>
            background color of the toggle. Default: "TXTBGCOLOR"
         </td>
        </tr>
        <tr>
         <td>
          TOGGLEFGCOLOR(*)
         </td>
         <td>
            foreground color of the toggle, use to draw the frame and the check mark. Default: "TXTFGCOLOR"
         </td>
        </tr>
        <tr>
         <td>
          TOGGLESIZE(*)
         </td>
         <td>
            size of the toggle square. Default: 16 for standard resolution, 24 for high resolution display
          <a name="Images"></a>
         </td>
        </tr>

        <tr>
         <td>
          <b>Images</b>
         </td>
         <td>
            (non inheritable)
         </td>
        </tr>
        <tr>
         <td>
          IMAGEid
         </td>
         <td>
            (write only) image name to be used in the specified node, where id is the specified node identifier. <br>
            Use <a href="IupSetHandle.htm">IupSetHandle</a> or <a href="IupSetAttributeHandle.htm">IupSetAttributeHandle</a> to associate an image to a name. 
            See also <a href="IupImage.htm">IupImage</a>. <br>
            If node is a branch it is used when collapsed.<br>
            All images do NOT need to have the same size, but it is recommended that a branch expanded and collapse images to have the same size.
         </td>
        </tr>
        <tr>
         <td>
          IMAGEEXPANDEDid
         </td>
         <td>
            (write only) same as the IMAGE attribute but used for expanded branches.
         </td>
        </tr>
        <tr>
         <td>
          IMAGELEAF
         </td>
         <td>
            the image name that will be shown for all leaves. Default: "IMGLEAF" (a bullet). <br>
            Internal values "IMGBLANK" (blank sheet of paper) and "IMGPAPER" (written sheet of paper) are also available. <br>
            If <a href="common.htm#BGCOLOR">BGCOLOR</a> is set the image is automatically updated.
            This image defines the available space for the image in all nodes. <br>
            "IMGEMPTY" can be used as a totally transparent image .
         </td>
        </tr>
        <tr>
         <td>
          IMAGEBRANCHCOLLAPSED
         </td>
         <td>
            the image name that will be shown for all collapsed branches. Default: "IMGCOLLAPSED" (a closed folder).
         </td>
        </tr>
        <tr>
         <td>
          IMAGEBRANCHEXPANDED
         </td>
         <td>
            the image name that will be shown for all expanded branches. Default: "IMGEXPANDED" (an open folder).
         </td>
        </tr>
        <tr>
         <td>
          BACKIMAGE(*)
         </td>
         <td>
            image name to be used as background. <br>
            Use <a href="IupSetHandle.htm">IupSetHandle</a> or <a href="IupSetAttributeHandle.htm">IupSetAttributeHandle</a> to associate an image to a name. 
            See also <a href="IupImage.htm">IupImage</a>.
         </td>
        </tr>
        <tr>
         <td>
          BACKIMAGEZOOM(*)
         </td>
         <td>
            if set the back image will be zoomed to occupy the full background. Aspect ratio is NOT preserved. Can be Yes or No. Default: No.
         </td>
        </tr>
        <tr>
         <td>
          <b>Focus</b>
         </td>
         <td>
            (non inheritable)
         </td>
        </tr>
        <tr>
         <td>
          VALUE
         </td>
         <td>
            The focus node identifier. <br>
            When retrieved but there isn&rsquo;t a node with focus it returns 0 if there are any nodes, and returns -1 if there are no nodes. <br>
            When changed and MARKMODE=SINGLE the node is also selected. The tree is always scrolled so the node becomes visible. <br>
            Additionally accepts the values:
          <br>
          <br>
            "ROOT" or "FIRST": the first node (which is always expanded)<br>
            "LAST": the last expanded node <br>
            "NEXT": the next expanded node, one node after the focus node. If at the last does nothing <br>
            "PREVIOUS": the previous expanded node, one node before the focus node. If at the first does nothing <br>
            "PGDN": the next expanded node, ten nodes node after the focus node. If at the last does nothing <br>
            "PGUP": the previous expanded node, ten nodes before the focus node. If at the first does nothing <br>
            "CLEAR": clears the selection of the focus node.
         </td>
        </tr>
        <tr>
         <td>
          CANFOCUS
         </td>
         <td>
            (creation only) enables the focus traversal of the control. Default: YES.
         </td>
        </tr>
        <tr>
         <td>
          PROPAGATEFOCUS
         </td>
         <td>
            enables the focus callback forwarding to the next native parent with FOCUS_CB defined. Default: NO.
         </td>
        </tr>
        <tr>
         <td>
          FOCUSFEEDBACK(*)
         </td>
         <td>
            (non inheritable) draw the focus feedback. Can be Yes or No. Default: Yes.
         </td>
        </tr>
        <tr>
         <td>
          HASFOCUS(*)
         </td>
         <td>
            (read-only) returns the button state if has focus. Can be Yes or No. 
         </td>
        </tr>
        <tr>
         <td>
          <b>Marks</b>
         </td>
         <td>
            (non inheritable)
         </td>
        </tr>
        <tr>
         <td>
          MARK
         </td>
         <td>
            (write only) Selects a range of nodes in the format "start-end" (%d-%d). <br>
            Allowed only when MARKMODE=MULTIPLE. Also accepts the values:
          <br>
          <br>
            "INVERTid": Inverts the specified node selected state, where id is the specified node identifier. If id is empty or invalid, then the focus node is used as reference node. <br>
            "BLOCK": Selects all nodes between the focus node and the initial block-marking node defined by MARKSTART <br>
            "CLEARALL": Clear the selection of all nodes <br>
            "MARKALL": Selects all nodes <br>
            "INVERTALL": Inverts the selection of all nodes
         </td>
        </tr>
        <tr>
         <td>
          MARKEDid
         </td>
         <td>
            The selection state of the specified node, where id is the specified node identifier. <br>
            If id is empty or invalid, then the focus node is used as reference node. Can be: YES or NO. Default: NO
         </td>
        </tr>
        <tr>
         <td>
          MARKEDNODES
         </td>
         <td>
            The selection state of all nodes. <br>
            It is/accepts a sequence of '+' and '-' symbols indicating the state of each item ('+'=selected, '-'=unselected). <br>
            When setting this value, if the number of specified symbols is smaller than the total count then the remaining nodes will not be changed.<br>
            Can be set only when MARKMODE=MULTIPLE, can also be get when MARKMODE=SINGLE.
         </td>
        </tr>
        <tr>
         <td>
          MARKMODE
         </td>
         <td>
            defines how the nodes can be selected. Can be: SINGLE or MULTIPLE. Default: SINGLE.
         </td>
        </tr>
        <tr>
         <td>
          MARKSTART
         </td>
         <td>
            Defines the initial node for the block marking, used when MARK=BLOCK.<br>
            The value must be the node identifier. Default: 0 (first node).
         </td>
        </tr>
        <tr>
         <td>
          MARKWHENTOGGLE
         </td>
         <td>
            selects or clears the selection of a node when its toggle is changed. <br>
            Works only if the node has a toggle. Default: No.
         </td>
        </tr>

        <tr>
         <td>
          <b>Hierarchy</b>
         </td>
         <td>
            (non inheritable) For these attributes "id" is the specified node identifier. <br>
            If "id" is empty or invalid, then the focus node is used as the specified node.
         </td>
        </tr>
        <tr>
         <td>
          ADDEXPANDED
         </td>
         <td>
            (non inheritable) Defines if branches will be expanded when created.  <br>
            The branch will be actually expanded when it receives the first child.  <br>
            Possible values: "YES" = The branches will be created expanded; "NO" = The branches will be created collapsed. Default: "YES".
         </td>
        </tr>
        <tr>
         <td>
          ADDLEAFid
         </td>
         <td>
            (write only) Adds a new leaf after the reference node, where id is the reference node identifier. <br>
            Use id=-1 to add before the first node. The value is used as the text label of the new node. <br>
            The id of the new node will be the id of the reference node + 1. <br>
            The attribute LASTADDNODE is set to the new id. <br>
            The reference node is marked and all others unmarked. <br>
            The reference node position remains the same. <br>
            If the reference node does not exist, nothing happens. <br>
            If the reference node is a branch then the depth of the new node is one depth increment from the depth of the reference node, <br>
            if the reference node is a leaf then the new node has the same depth. <br>
            If you need to add a node after a specified node but at a different depth use INSERTLEAF.
         </td>
        </tr>
        <tr>
         <td>
          ADDBRANCHid
         </td>
         <td>
            (write only) Same as ADDLEAF for branches. Branches can be created expanded or collapsed depending on ADDEXPANDED.
            <br>
            <br>
            <div id="images" class="images" align="center">
            <table border="1">
            <tbody align="center">
            <tr>
             <th>Initial layout</th>
             <th>After calling <code>IupSetAttribute(ADDBRANCH9, "new branch")</code>:</th>
            </tr>
            <tr>
             <td><img src="images/iuptree1.png"/></td>
             <td><img src="images/iuptree2_addbranch9.png"/></td>
            </tr>
            </tbody>
            </table>
            </div>
         </td>
        </tr>
        <tr>
         <td>
          COPYNODEid
         </td>
         <td>
            (write only) Copies a node and its children, where id is the specified node identifier. <br>
            The value is the destination node identifier. <br>
            If the destination node is a branch and it is expanded, then the specified node is inserted as the first child of the destination node. <br>
            If the branch is not expanded or the destination node is a leaf, then it is inserted as the next brother of the leaf. <br>
            The specified node is not changed. All node attributes are copied, except user data.
         </td>
        </tr>
        <tr>
         <td>
          DELNODEid
         </td>
         <td>
            (write only) Removes a node and/or its children, where id is the specified node identifier. <br>
            Possible values:
          <br>
          <br>
            "ALL": deletes all nodes, id is ignored. <br>
            "SELECTED": deletes the specified node and its children <br>
            "CHILDREN": deletes only the children of the specified node  <br>
            "MARKED": deletes all the selected nodes (and all their children), id is ignored
         </td>
        </tr>
        <tr>
         <td>
          EXPANDALL
         </td>
         <td>
            (write only) expand or contracts all nodes. Can be YES (expand all), or NO (contract all).
         </td>
        </tr>
        <tr>
         <td>
          INSERTLEAFid, <br>
          INSERTBRANCHid
         </td>
         <td>
            (write only) Same as ADDLEAF and ADDBRANCH but the depth of the new node is always the same of the reference node. <br>
            If the reference node is a leaf, then the id of the new node will be the id of the reference node + 1. <br>
            If the reference node is a branch the id of the new node will be the id of the reference node + 1 + the total number of child nodes of the reference node.
            <br>
            <br>
            <div id="images" class="images" align="center">
            <table border="1">
            <tbody align="center">
            <tr>
             <th>Initial layout</th>
             <th>After calling <code>IupSetAttribute(INSERTBRANCH9, "new branch")</code>:</th>
            </tr>
            <tr>
             <td><img src="images/iuptree1.png"/></td>
             <td><img src="images/iuptree3_insertbranch9.png"/></td>
            </tr>
            </tbody>
            </table>
            </div>
         </td>
        </tr>
        <tr>
         <td>
          MOVENODEid
         </td>
         <td>
            (write only): Moves a node and its children, where id is the specified node identifier. <br>
            The value is the destination node identifier. <br>
            If the destination node is a branch and it is expanded, then the specified node is inserted as the first child of the destination node. <br>
            If the branch is not expanded or the destination node is a leaf, then it is inserted as the next brother of the leaf. <br>
            The specified node is removed. User data and all node attributes are preserved.
         </td>
        </tr>

        <tr>
         <td>
          <b>Editing</b>
         </td>
         <td>

         </td>
        </tr>
        <tr>
         <td>
          RENAME
         </td>
         <td>
            (write only) Forces a rename action to take place. Valid only when SHOWRENAME=YES.
         </td>
        </tr>
        <tr>
         <td>
          RENAMECARET
         </td>
         <td>
            (write only) the caret&rsquo;s position of the text box when in-place renaming. <br>
            Same as the CARET attribute for <a href="IupText.htm">IupText</a>, but here is used only once after SHOWRENAME_CB is called and before the text box is shown.
         </td>
        </tr>
        <tr>
         <td>
          RENAMESELECTION
         </td>
         <td>
            (write only) the selection interval of the text box when in-place renaming. <br>
            Same as the SELECTION attribute for <a href="IupText.htm">IupText</a>, but here is used only once after SHOWRENAME_CB is called and before the text box is shown.
         </td>
        </tr>
        <tr>
         <td>
          SHOWRENAME
         </td>
         <td>
            (non inheritable) Allows the in place rename of a node. Default: "NO". <br>
            F2 and clicking twice only starts to rename a node if SHOWRENAME=Yes.
         </td>
        </tr>

        <tr>
         <td>
          <b>Drag&Drop</b>
         </td>
         <td>
            Drag & Drop attributes are supported, but SHOWDRAGDROP must be set no No.  
         </td>
        </tr>
        <tr>
         <td>
          DRAGDROPTREE
         </td>
         <td>
            (non inheritable) prepare the Drag & Drop callbacks to support drag and drop of nodes between trees (IupFlatTree only), in the same IUP application. <br>
            Drag & Drop attributes still need to be set in order to activate the drag & drop support, so the application can control if this tree will be source and/or target. <br>
            Default: NO.
         </td>
        </tr>
        <tr>
         <td>
          DROPFILESTARGET
         </td>
         <td>
            (non inheritable) Enable or disable the drop of files. <br>
            Default: NO, but if DROPFILES_CB is defined when the element is mapped then it will be automatically enabled. <br>
            This is NOT related to the drag&drop of nodes inside the tree.
         </td>
        </tr>
        <tr>
         <td>
          DROPEQUALDRAG
         </td>
         <td>
            (non inheritable) if enabled will allow a drop node to be equal to the drag node. <br>
            Used only if SHOWDRAGDROP =Yes. <br>
            In the case the nodes are equal the callback return value is ignored and nothing is done after.
         </td>
        </tr>
        <tr>
         <td>
          SHOWDRAGDROP
         </td>
         <td>
            (non inheritable) Enables the internal drag and drop of nodes, and enables the DRAGDROP_CB callback. Default: "NO". <br>
            Works only if MARKMODE=SINGLE. Drag & Drop attributes are NOT used.
         </td>
        </tr>

        <tr>
         <td>
          <b>Callbacks:</b>
         </td>
         <td>
            Inherits all callbacks of the <a href="IupCanvas.htm">IupCanvas</a>, but redefines a few of them. <br>
            Including <a href="callbacks.htm#BUTTON_CB">BUTTON_CB</a>, <a href="callbacks.htm#LEAVEWINDOW_CB">LEAVEWINDOW_CB</a>,
            <a href="callbacks.htm#FOCUS_CB">FOCUS_CB</a>, and <a href="callbacks.htm#MOTION_CB">MOTION_CB</a>.
            To allow the application to use those callbacks the same callbacks are exported with the "FLAT_" prefix using the same parameters.<br>
            They are all called before the internal callbacks and if they return <a href="callbacks.htm#IUP_IGNORE">IUP_IGNORE</a>
            the internal callbacks are not processed.
            <br>
            <br>
            Drag & Drop attributes and callbacks are supported, but SHOWDRAGDROP must be set to NO.
         </td>
        </tr>
        <tr>
         <td>
          SELECTION_CB
         </td>
         <td>
            Action generated when a node is selected or deselected.
            <br>
            <br>
            This action occurs when the user clicks with the mouse or uses the keyboard with the appropriate combination of keys. <br>
            It may be called more than once for the same node with the same status.
            <br>
            <br>
            function selection_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> id, status)<br>
            ih: identifier of the element that activated the event. <br>
            id: Node identifier.<br>
            status: 1=node selected, 0=node unselected. 
         </td>
        </tr>
        <tr>
         <td>
          MULTISELECTION_CB
         </td>
         <td>
            Action generated after a continuous range of nodes is selected in one single operation. <br>
            If not defined the SELECTION_CB with status=1 will be called for all nodes in the range. <br>
            The range is always completely included, independent if some nodes were already marked. <br>
            That single operation also guaranties that all other nodes outside the range are already not selected. <br>
            Called only if MARKMODE=MULTIPLE.
            <br>
            <br>
            function multiselection_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="atom.htm">atom</a> pIds, <a href="integer.htm">integer</a> n)<br>
            ih: identifier of the element that activated the event. <br>
            pIds: Pointer to an array of node identifiers. <br>
            This array is kept for backward compatibility, the range is simply defined by ids[0] to ids[n-1], where ids[i+1]=ids[i]+1.<br>
            n: Number of nodes in the array.
         </td>
        </tr>
        <tr>
         <td>
          MULTIUNSELECTION_CB
         </td>
         <td>
            Action generated before multiple nodes are unselected in one single operation. <br>
            If not defined the SELECTION_CB with status=0 will be called for all nodes in the range. <br>
            The range is not necessarily continuous. Called only if MARKMODE=MULTIPLE. (Since 3.1)
            <br>
            <br>
            function multiunselection_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="atom.htm">atom</a> pIds, <a href="integer.htm">integer</a> n)<br>
            ih: identifier of the element that activated the event. <br>
            pIds: Pointer to an array of node identifiers.<br>
            n: Number of nodes in the array.
         </td>
        </tr>
        <tr>
         <td>
          BRANCHOPEN_CB
         </td>
         <td>
            Action generated when a branch is expanded. <br>
            This action occurs when the user clicks the "+" sign on the left of the branch, or when double clicks the branch, or hits Enter on a collapsed branch.
            <br>
            <br>
            function branchopen_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> id)<br>
            ih: identifier of the element that activated the event. <br>
            id: node identifier. 
            <br>
            <br>
            Returns: <a href="callbacks.htm#IUP_IGNORE">IUP_IGNORE</a> for the branch not to be opened, or 
            <a href="callbacks.htm#IUP_DEFAULT">IUP_DEFAULT</a> for the branch to be opened.
         </td>
        </tr>
        <tr>
         <td>
          BRANCHCLOSE_CB
         </td>
         <td>
            Action generated when a branch is collapsed. <br>
            This action occurs when the user clicks the "-" sign on the left of the branch, or when double clicks the branch, or hits Enter on an expanded branch. 
            <br>
            <br>
            function branchclose_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> id)<br>
            ih: identifier of the element that activated the event. <br>
            id: node identifier. 
            <br>
            <br>
            Returns: <a href="callbacks.htm#IUP_IGNORE">IUP_IGNORE</a> for the branch not to be closed, or 
            <a href="callbacks.htm#IUP_DEFAULT">IUP_DEFAULT</a> for the branch to be closed.
         </td>
        </tr>
        <tr>
         <td>
          EXECUTELEAF_CB
         </td>
         <td>
            Action generated when a leaf is to be executed. <br>
            This action occurs when the user double clicks a leaf, or hits Enter on a leaf. 
            <br>
            <br>
            function executeleaf_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> id)<br>
            ih: identifier of the element that activated the event. <br>
            id: node identifier.  
         </td>
        </tr>
        <tr>
         <td>
          EXECUTEBRANCH_CB
         </td>
         <td>
            Action generated when a branch is executed. <br>
            This action occurs when the user double clicks a branch, or hits Enter on a branch. <br>
            Is is called before the BRANCH*_CB callbacks.
            <br>
            <br>
            function executebranch_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> id)<br>
            ih: identifier of the element that activated the event. <br>
            id: node identifier.  
         </td>
        </tr>
        <tr>
         <td>
          SHOWRENAME_CB
         </td>
         <td>
            Action generated when a node is about to be renamed. <br>
            It occurs when the user clicks twice the node or press F2. Called only if SHOWRENAME=YES.
            <br>
            <br>
            function showrename_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> id)<br>
            ih: identifier of the element that activated the event. <br>
            id: node identifier.  
            <br>
            <br>
            Returns: if <a href="callbacks.htm#IUP_IGNORE">IUP_IGNORE</a> is returned, the rename is canceled.
         </td>
        </tr>
        <tr>
         <td>
          RENAME_CB
         </td>
         <td>
            Action generated after a node was renamed in place. <br>
            It occurs when the user press Enter after editing the name, or when the text box looses it focus. Called only if SHOWRENAME=YES.
            <br>
            <br>
            function rename_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> id, <a href="atom.htm">atom</a> pTitle)<br>
            ih: identifier of the element that activated the event. <br>
            id: node identifier. <br>
            pTitle: new node title (a char*). 
            <br>
            <br>
            Returns: The new title is accepted only if the callback returns <a href="callbacks.htm#IUP_DEFAULT">IUP_DEFAULT</a>. <br>
            If the callback does not exist the new title is always accepted. <br>
            If the user pressed Enter and the callback returns <a href="callbacks.htm#IUP_IGNORE">IUP_IGNORE</a> the editing continues. <br>
            If the text box looses its focus the editing stops always.
         </td>
        </tr>
        <tr>
         <td>
          DRAGDROP_CB
         </td>
         <td>
            Action generated when an internal drag & drop is executed. Only active if SHOWDRAGDROP=YES.
            <br>
            <br>
            function dragdrop_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> drag_id, drop_id, isshift, iscontrol)
            <br> 
            <br> 
            ih: identifier of the element that activated the event. <br>
            drag_id: Identifier of the clicked node where the drag start. <br>
            drop_id: Identifier of the clicked node where the drop were executed. -1 indicates a drop in a blank area.<br>
            isshift: flag indicating the shift key state. <br>
            iscontrol: flag indicating the control key state.
            <br>
            <br>
            Returns: if returns <a href="callbacks.htm#IUP_CONTINUE">IUP_CONTINUE</a>, or if the callback is not defined 
            and SHOWDRAGDROP=YES, then the node is moved to the new position. <br>
            If Ctrl is pressed then the node is copied instead of moved. <br>
            If the drop node is a branch and it is expanded, then the drag node is inserted as the first child of the node. <br>
            If the branch is not expanded or the node is a leaf, then the drag node is inserted as the next brother of the drop node.
         </td>
        </tr>
        <tr>
         <td>
          NODEREMOVED_CB
         </td>
         <td>
            Action generated when a node is about to be removed.<br>
            It is only a notification, the action can not be aborted. <br>
            No node dependent attribute can be consulted during the callback. <br>
            It is useful to remove memory allocated for the userdata.
            <br>
            <br>
            function noderemoved_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="atom.htm">atom</a> pUserdata)<br> 
            ih: identifier of the element that activated the event. <br>
            pUserdata: pointer to userdata.
         </td>
        </tr>
        <tr>
         <td>
          RIGHTCLICK_CB
         </td>
         <td>
            Action generated when the right mouse button is pressed over a node.
            <br>
            <br>
            function rightclick_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> id)<br>
            ih: identifier of the element that activated the event. <br>
            id: node identifier. 
         </td>
        </tr>
        <tr>
         <td>
          TOGGLEVALUE_CB
         </td>
         <td>
            Action generated when the toggle&rsquo;s state was changed. <br>
            The callback also receives the new toggle&rsquo;s state.
            <br>
            <br>
            function togglevalue_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> id, state)<br>
            ih: identifier of the element that activated the event.<br>
            id: node identifier. <br>
            state: 1 if the toggle&rsquo;s state was shifted to ON; 0 if it was shifted to OFF. If SHOW3STATE=YES, -1 if it was shifted to NOTDEF.
         </td>
        </tr>
        <tr>
         <td>
          FLAT_BUTTON_CB
         </td>
         <td>
            Action generated when any mouse button is pressed or released inside the element. <br>
            Use <a href="IupConvertXYToPos.htm">IupConvertXYToPos</a>() to convert (x,y) coordinates in the node identifier.
         </td>
        </tr>
        <tr>
         <td>
          FLAT_MOTION_CB
         </td>
         <td>
            Action generated when the mouse is moved over the element. <br>
            Use <a href="IupConvertXYToPos.htm">IupConvertXYToPos</a>() to convert (x,y) coordinates in item the node identifier.
         </td>
        </tr>
        <tr>
         <td>
          DROPFILES_CB
         </td>
         <td>
            [Windows and GTK Only] Action generated when one or more files are dropped in the element.
         </td>
        </tr>
        <tr>
         <td>
          also
         </td>
         <td>
            <a href="callbacks.htm#MAP_CB">MAP_CB</a>,
            <a href="callbacks.htm#UNMAP_CB">UNMAP_CB</a>,
            <a href="callbacks.htm#DESTROY_CB">DESTROY_CB</a>,
            <a href="callbacks.htm#GETFOCUS_CB">GETFOCUS_CB</a>,
            <a href="callbacks.htm#KILLFOCUS_CB">KILLFOCUS_CB</a>, 
            <a href="callbacks.htm#ENTERWINDOW_CB">ENTERWINDOW_CB</a>,
            <a href="callbacks.htm#LEAVEWINDOW_CB">LEAVEWINDOW_CB</a>, 
            <a href="callbacks.htm#K_ANY">K_ANY</a>,
            <a href="callbacks.htm#HELP_CB">HELP_CB</a>: All common callbacks are supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
            See demo/pGUI/IupFlatTree.exw
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
