<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">IupFlowBox</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include pGUI.e
            <br>
            <br>
            <a href="Ihandle.htm">Ihandle</a> ih = IupFlowBox(<a href="Ihandle.htm">Ihandles</a> children={},
                                                              <a href="string.htm">string</a> attributes="", 
                                                              <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            <b><i>Deprecated</i></b>. A Phix-specific addon written before <a href="IupMultiBox.htm">IupMultiBox</a>() was available, 
            use that instead since it has many additional features this does not and probably never will, as well as being easier to use.
            <br>
            <br>
            An IupFlowBox is a Phix/pGUI addition to IUP which is simply a (tagged) <a href="IupVbox.htm">IupVbox</a> containing nested 
            <a href="IupHbox.htm">IupHbox</a> (some of which may be empty), which relies on a <a href="callbacks.htm#RESIZE_CB">RESIZE_CB</a>
            callback that invokes <a href="IupReparent.htm">IupReparent</a>() to move child elements between the IupHbox, which must be 
            (independently) set on the containing dialog as follows:
            <br>
            <br>
            <b>IupResizeFlow</b>(dlg) just invokes <b>IupSetResizeFlowCallback</b>(dlg) and therefore behaves identically.<br>
            Obviously the former is somewhat easier to type whereas the latter is a somewhat clearer statement of intent. <br>
            Should you have your own (existing) <a href="callbacks.htm#RESIZE_CB">RESIZE_CB</a> routine, then instead you can and should invoke 
            {} = <b>IupResizeFlow_cb</b>(dlg,w,h) directly from that. <br>
            It invokes <a href="IupRefresh.htm">IupRefresh</a>(dlg), so you do not have to.
            <br>
            <br>
            Should you invoke IupResizeFlow[_cb](dlg) when dlg does not contain any IupFlowBox, it should do no real harm, and likewise you 
            can use <a href="IupAppend.htm">IupAppend</a>(), <a href="IupInsert.htm">IupInsert</a>(), <a href="IupDetach.htm">IupDetach</a>(), 
            and <a href="IupDestroy.htm">IupDestroy</a>() on IupFlowBox elements just like anything else.<br>
            IupFlowBox can also be nested (but have only been tested to a depth of 2).
            <br>
            <br>
            children: Identifier(s) of interface element(s). It can be NULL or {}.<br>
            For more information on the attributes and args parameters see <a href="IupSetAttributes.htm">IupSetAttributes</a>.
            <br>
            <br>
            Returns: the identifier of the created element.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          <a href="notpgui.htm"><span class="illegal">Not supported</span></a>.
         </td>
        </tr>
        <tr>
         <td>
          <b>Remarks:</b>
         </td>
         <td>
            If something works for you, fine, but where it does not, these are my thoughts:
            <br>
            <br>
            The operation of an IupFlowBox relies on FLOWBOX=FlowBox on the outer IupVbox, EXPAND=YES and GAP/MARGIN of
            0 on both the IupVbox and IupHbox, and EXPAND=NO on all children. Setting the latter to YES or attempting 
            to incorporate <a href="IupFill.htm">IupFill</a>() elements is likely to have unpredictable results.  <br>
            Any SPACING/PADDING/GAP needed must be on the children passed to IupFlowBox, rather than on the internal 
            IupVbox/Hbox controls, and any needed IupFill() should be left/right[**] or above/below the IupFlowBox, 
            rather than (top-level) within it.<br>
            [**] Something like {IupFill(1/3),IupFlexBox(1/3),IupFill(1/3)} might be ok, but obviously something like
            {IupFill(),IupFlexBox(fixed static size),IupFill()} is probably the very definition of utterly pointless.
            While untested, more deeply nested EXPAND=YES and IupFill() might in fact be fine, although at present I
            struggle to imagine such being useful/useable without some kind of explicit manual resizing mechanism.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
            The following images are from demo\pGUI\IupFlowBox.exw
            <br>
            <br>
            <div class="wraptocenter">
  <table border="0" cellpadding="6" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111">
    <tr>
      <td><img border="0" src="images/IupFlowBox6.png"/><br>
        initial size <br>
      </td>
      <td><img border="0" src="images/IupFlowBox3.png"/><br>
        resized <br>
      </td>
    </tr>
  </table>
            </div>
         </td>
        </tr>

       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
