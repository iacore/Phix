<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">IupGLCanvas</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include pGUI.e
            <br>
            <br>
            <a href="Ihandle.htm">Ihandle</a> ih = IupGLCanvas([[<a href="string.htm">nullable_string</a> action=NULL,]
                                                                <a href="Icallback.htm">cbfunc</a> func=NULL,] 
                                                               <a href="string.htm">string</a> attributes="",
                                                               <a href="sequence.htm">sequence</a> args={})
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Creates an OpenGL canvas (drawing area for OpenGL). It inherits from <a href="IupCanvas.htm">IupCanvas</a>.
            <br>
            <a name=IupGLCanvasOpen></a>
            <br>
            The <nobr>IupGLCanvasOpen()</nobr> procedure must be called after an <a href="IupOpen.htm">IupOpen</a>(), so that the control 
            can be used (aka enable use of OpenGL to draw in canvas), however pGUI does this automatically.
            <br>
            action: Name of the action specified by func, defaults to "ACTION", ignored if func is NULL.<br>
            func: a callback address, usually specified as <a href="Icallback.htm">Icallback</a>(<i>"name"</i>).<br>
            For more information on the attributes and args parameters see <a href="IupSetAttributes.htm">IupSetAttributes</a>.<br>
            This is a <a href="paranormal.htm">paranormalised function</a>.<br>
            NOTE: The C function IupGLCanvas(char* action) apparently allows the name of the "ACTION" callback to be overridden, which I see no benefit to.
            The pGUI wrapper prohibits said, also note that as a paranormalised function, <nobr>IupGLCanvas("MYACTION")</nobr> would in fact be misinterpreted
            as <nobr>IupGLCanvas(attributes:="MYACTION"),</nobr> however <nobr>IupGLCanvas(NULL)</nobr> does no harm and is equivalent to <nobr>IupGLCanvas()</nobr>.
            <br>
            <br>
            Returns the identifier of the created element.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="IupCanvas.htm">IupCanvas</a>
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
            In Windows XP, if the COMPOSITE attribute is enabled then the hardware acceleration will be disabled.
            <br>
            <br>
            The IupGLCanvas works with the GTK base driver in Windows and in UNIX (X-Windows).
            <br>
            <br>
            Not available in our SunOS510x86 pre-compiled binaries just because we were not able to compile OpenGL code in our installation.
            <br>
            <br>
            Possible ERROR strings during <a href="IupMap.htm">IupMap</a>:
            <br>
            <br>
            "X server has no OpenGL GLX extension." - OpenGL not supported (UNIX Only)<br>
            "No appropriate visual." - Failed to choose a Visual (UNIX Only) <br>
            "No appropriate pixel format." - Failed to choose a Pixel Format (Windows Only)<br>
            "Could not create a rendering context." - Failed to create the OpenGL context. (Windows and UNIX)<br>
         </td>
        </tr>

        <tr>
         <td>
          <b>Auxiliary Functions</b>
         </td>
         <td>
            These are auxiliary functions based on the WGL and XGL extensions. <br>
            Check the respective documentations for more information. <br>
            ERROR attribute will be set to "Failed to set new current context." if the call failed. <br>
            It will reset ERROR to NULL if successful.
            <br>
            <a name=IupGLMakeCurrent></a>
            <br>
            IupGLMakeCurrent(<a href="Ihandle.htm">Ihandln</a> ih)<br>
            Activates the given canvas as the current OpenGL context. <br>
            All subsequent OpenGL commands are directed to such canvas. <br>
            The first call will set the global attributes GL_VERSION, GL_VENDOR and GL_RENDERER (since 3.16).<br>
            Note that opengl.e invokes IupGLMakeCurrent(NULL) to signal to pGUI.js that it <i>has</i> been included,
            but that call does not make the three global attributes mentioned above available. Should that call not
            have been made (aka opengl.e/js not included) then subsequent calls to IupGLMakeCurrent() have no effect
            under pGUI.js, but they do(/can/might) still have meaning on desktop/Phix.
            <br>
            <a name=IupGLIsCurrent></a>
            <br>
            <a href="integer.htm#bool">boolean</a> status = IupGLIsCurrent(<a href="Ihandle.htm">Ihandle</a> ih)<br>
            Returns a non zero value if the given canvas is the current OpenGL context.
            <br>
            <a name=IupGLSwapBuffers></a>
            <br>
            IupGLSwapBuffers(<a href="Ihandle.htm">Ihandle</a> ih)<br>
            Makes the BACK buffer visible. This function is necessary when a double buffer is used.
            <br>
            <a name=IupGLPalette></a>
            <br>
            IupGLPalette(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> index, r, g, b)<br>
            Defines a color in the color palette. This function is necessary when INDEX color is used.
            <br>
            <a name=IupGLUseFont></a>
            <br>
            IupGLUseFont(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> first, count, list_base)<br>
            Creates a bitmap display list from the current <a href="common.htm#FONT">FONT</a> attribute. 
            See the documentation of the wglUseFontBitmaps and glXUseXFont functions. (since 3.0)
            <br>
            <a name=IupGLWait></a>
            <br>
            IupGLWait(<a href="integer.htm">integer</a> gl)<br>
            If gl is non zero it will call glFinish or glXWaitGL, else will call GdiFlush or glXWaitX. (since 3.0)
         </td>
        </tr>

        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
            The IupGLCanvas element handle all attributes defined for a conventional canvas, see <a href="IupCanvas.htm">IupCanvas</a>.
            <br>
            <br>
            Apart from these attributes, IupGLCanvas handle specific attributes used to define the kind of buffer to be instanced. <br>
            Such attributes are all creation only attributes and must be set before the element is mapped on the native system. <br>
            After the mapping, specifying these special attributes has no effect.
         </td>
        </tr>
        <tr>
         <td>
          ACCUM_XXX_SIZE
         </td>
         <td>
            ACCUM_RED_SIZE, ACCUM_GREEN_SIZE, ACCUM_BLUE_SIZE and ACCUM_ALPHA_SIZE: Indicate the number of bits for representing the color components in the accumulation buffer. <br>
            Value 0 means the accumulation buffer is not necessary. Default is 0.
         </td>
        </tr>
        <tr>
         <td>
          ALPHA_SIZE
         </td>
         <td>
            Indicates the number of bits for representing each colors alpha component (valid only for RGBA and for hardware that store the alpha component). Default is "0".
         </td>
        </tr>
        <tr>
         <td>
          ARBCONTEXT
         </td>
         <td>
            (non inheritable) enable the usage of ARB extension contexts. <br>
            If during map the ARB extensions could not be loaded the attribute will be set to NO and the standard context creation will be used. Default: NO. (since 3.6)
         </td>
        </tr>
        <tr>
         <td>
          BUFFER
         </td>
         <td>
            Indicates if the buffer will be single "SINGLE" or double "DOUBLE". Default is "SINGLE".
         </td>
        </tr>
        <tr>
         <td>
          BUFFER_SIZE
         </td>
         <td>
            Indicates the number of bits for representing the color indices (valid only for INDEX). The system default is 8 (256-color palette).
         </td>
        </tr>
        <tr>
         <td>
          COLOR
         </td>
         <td>
            Indicates the color model to be adopted: "INDEX" or "RGBA". Default is "RGBA".
         </td>
        </tr>
        <tr>
         <td>
          COLORMAP
         </td>
         <td>
            (read-only) Returns "Colormap" in UNIX and "HPALETTE" in Win32, if COLOR=INDEX.
         </td>
        </tr>
        <tr>
         <td>
          CONTEXT
         </td>
         <td>
            (read-only) Returns "GLXContext" in UNIX and "HGLRC" in Win32.
         </td>
        </tr>
        <tr>
         <td>
          CONTEXTFLAGS
         </td>
         <td>
            (non inheritable) Context flags. Can be DEBUG, FORWARDCOMPATIBLE or DEBUGFORWARDCOMPATIBLE. Used only when ARBCONTEXT=Yes. (since 3.6)
         </td>
        </tr>
        <tr>
         <td>
          CONTEXTPROFILE
         </td>
         <td>
            (non inheritable) Context profile mask. Can be CORE, COMPATIBILITY or CORECOMPATIBILITY. Used only when ARBCONTEXT=Yes. (since 3.6)
         </td>
        </tr>
        <tr>
         <td>
          CONTEXTVERSION
         </td>
         <td>
            (non inheritable) Context version number in the format "major.minor". Used only when ARBCONTEXT=Yes. (since 3.6)
         </td>
        </tr>
        <tr>
         <td>
          DEPTH_SIZE
         </td>
         <td>
            Indicates the number of bits for representing the z coordinate in the z-buffer. Value 0 means the z-buffer is not necessary. 
         </td>
        </tr>
        <tr>
         <td>
          ERROR
         </td>
         <td>
            (read-only) If an error is found during <a href="IupMap.htm">IupMap</a> and IupGLMakeCurrent, returns a string containing a description of the error in English. See notes bellow.
         </td>
        </tr>
        <tr>
         <td>
          LASTERROR
         </td>
         <td>
            (read-only) [Windows Only] If an error is found, returns a string with the system error description. (Since 3.6)
         </td>
        </tr>
        <tr>
         <td>
          XXX_SIZE
         </td>
         <td>
            RED_SIZE, GREEN_SIZE and BLUE_SIZE: Indicate the number of bits for representing each color component (valid only for RGBA). <br>
            The system default is usually 8 for each component (True Color support).
         </td>
        </tr>
        <tr>
         <td>
          REFRESHCONTEXT
         </td>
         <td>
            (write-only) [Windows Only] action attribute to refresh the internal device context when it is not owned by the window class. <br>
            The <a href="IupCanvas.htm">IupCanvas</a> of the Win32 driver will always create a window with an owned DC, but GTK in Windows will not. (since 3.0)
         </td>
        </tr>
        <tr>
         <td>
          STENCIL_SIZE
         </td>
         <td>
            Indicates the number of bits in the stencil buffer. Value 0 means the stencil buffer is not necessary. Default is 0.
         </td>
        </tr>
        <tr>
         <td>
          STEREO
         </td>
         <td>
            Creates a stereo GL canvas (special glasses are required to visualize it correctly). Possible values: "YES" or "NO". Default: "NO". <br>
            When this flag is set to Yes but the OpenGL driver does not support it, the map will be successful and STEREO will be set to NO and ERROR will not be set (since 3.9).
         </td>
        </tr>
        <tr>
         <td>
          SHAREDCONTEXT
         </td>
         <td>
            name of another IupGLCanvas that will share its display lists and textures. That canvas must be mapped before this canvas.
         </td>
        </tr>
        <tr>
         <td>
          VISUAL
         </td>
         <td>
            (read-only) Returns "XVisualInfo*" in UNIX and "HDC" in Win32.
         </td>
        </tr>

        <tr>
         <td>
          <b>Callbacks:</b>
         </td>
         <td>
            The IupGLCanvas element understands all callbacks defined for a conventional canvas, see <a href="IupCanvas.htm">IupCanvas</a>.
         </td>
        </tr>
        <tr>
         <td>
          <a href="callbacks.htm#RESIZE_CB">RESIZE_CB</a>
         </td>
         <td>
            By default the resize callback sets:
            <br>
            <br>
            <a href="glViewport.htm">glViewport</a>(0,0,width,height);
         </td>
        </tr>
        <tr>
         <td>
          SWAPBUFFERS_CB
         </td>
         <td>
            action generated when IupGLSwapBuffers is called. (since 3.11)
            <br>
            <br>
            int function swapbuffers_cb(<a href="Ihandle.htm">Ihandle</a> ih)
            <br>
            ih: identifier of the element that activated the event.
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
