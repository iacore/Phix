<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">IupGLCanvasBox</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Syntax:</b>
         </td>
         <td>
          <font face = "Arial, Helvetica">
            include pGUI.e
            <br>
            <br>
            Ihandle ih = IupGLCanvasBox(sequence children, string attributes="", sequence data={})
          </font>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Creates an OpenGL canvas container. It inherits from <a href="IupGLCanvas.htm">IupGLCanvas</a>.
            <br>
            <br>
            children: List of the identifiers that will be placed in the box. It can be {}.
            For more information on the attributes and data parameters see <a href="IupSetAttributes.htm">IupSetAttributes</a>.
            <br>
            <br>
            Returns: the identifier of the created element.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Notes:</b>
         </td>
         <td>
            This is an additional control that depends on the OpenGL library. It is included in the IupGLControls library.
            <br>
            <br>
            To use the controls available in the IupGLControls library inside your OpenGL canvas you must replace the IupGLCanvas by the IupGLCanvasBox element.
            <br>
            <br>
            It can have any number of children. 
            Controls from the IupGLControls library can be used as children along with the void containers such as <a href="IupHbox.htm">IupHbox</a>, 
            <a href="IupVbox.htm">IupVbox</a>, and so on, including <a href="IupFill.htm">IupFill</a>. 
            Native elements can also be placed on top although they will not be clipped by IupGLFrame and other IupGlControls containers.
            <br>
            <br>
            The elements that are a direct child of the box can be positioned using the VERTICALALIGN and/or HORIZONTALALIGN attributes, 
            or using a position in pixels relative to the top left corner of the box by setting the attribute POSITION.
            <br>
            <br>
            Each direct children will be sized to its natural size by default, except if EXPANDHORIZONTAL or EXPANDVERTICAL are set.
            <br>
            <br>
            The box can be created with no elements and filled dynamically using <a href="IupAppend.htm">IupAppend</a>() or <a href="IupInsert.htm">IupInsert</a>().
         </td>
        </tr>

        <tr>
         <td valign=top>
          <b>Attributes:</b>
         </td>
         <td>
            The IupGLCanvasBox element handle all attributes defined for an OpenGL canvas and a conventional canvas, 
            see <a href="IupGLCanvas.htm">IupGLCanvas</a> and <a href="IupCanvas.htm">IupCanvas</a>.
         </td>
        </tr>
        <tr>
         <td valign=top>
          MARGIN
         </td>
         <td>
            (non inheritable) Defines a margin in pixels. <br>
            Its value has the format "widthxheight", where width and height are integer values corresponding to the horizontal and vertical margins, respectively. <br>
            Default: "0x0" (no margin).
         </td>
        </tr>
        <tr>
         <td valign=top>
          REDRAW
         </td>
         <td>
            (non inheritable, write-only) force a full redraw of all elements and the main canvas.
         </td>
        </tr>

        <tr>
         <td valign=top>
          <b>Attributes:</b>
         </td>
         <td>
            (at Children)
         </td>
        </tr>
        <tr>
         <td valign=top>
          HORIZONTALALIGN
         </td>
         <td>
            (non inheritable, at children only): Horizontally aligns the element inside the box. <br>
            Possible values: "ALEFT", "ACENTER", "ARIGHT" or "FLOAT". Default: "FLOAT". <br>
            When FLOAT is used its horizontal position is obtained from the POSITION attribute.
         </td>
        </tr>
        <tr>
         <td valign=top>
          VERTICALALIGN
         </td>
         <td>
            (non inheritable, at children only): Vertically aligns the element inside the box. <br>
            Possible values: "ATOP", "ACENTER", "ABOTTOM" or "FLOAT". Default: "FLOAT". <br>
            When FLOAT is used its vertical position is obtained from the POSITION attribute.
         </td>
        </tr>
        <tr>
         <td valign=top>
          EXPANDHORIZONTAL
         </td>
         <td>
            (non inheritable, at children only): Expand the horizontal size of the element to the box width. Can be Yes or No. Default: No. (since 3.13)
         </td>
        </tr>
        <tr>
         <td valign=top>
          EXPANDVERTICAL
         </td>
         <td>
            (non inheritable, at children only): Expand the vertical size of the element to the box height. Can be Yes or No. Default: No. (since 3.13)
         </td>
        </tr>
        <tr>
         <td valign=top>
          also
         </td>
         <td>
            <a href="common.htm#CLIENTSIZE">CLIENTSIZE</a>,
            <a href="common.htm#CLIENTOFFSET">CLIENTOFFSET</a>: also accepted.
         </td>
        </tr>

        <tr>
         <td valign=top>
          <b>Callbacks</b>
         </td>
         <td>
            The IupGLCanvasBox element understands all callbacks defined for the <a href="IupGLCanvas.htm">IupGLCanvas</a>.
            <br>
            <br>
            But since it has to forward the mouse and action callbacks to the IupGLControls elements when it is mapped the 
            callbacks ACTION, BUTTON_CB, MOTION_CB, WHEEL_CB, and LEAVEWINDOW_CB are replaced by internal callbacks. 
            The application callbacks will still be called and they can be retrieved by using the prefix "APP_" on the callback name. 
            If for some reason the application set one of these callbacks after being mapped, the box internal callback can be retrieved 
            by using the prefix "GLBOX_" on the callback name. 
            <br>
            <br>
            Keyboard focus is NOT processed for IupGLCanvasBox children.
            <br>
            <br>
            The IupGLCanvas SWAPBUFFERS_CB callback is used internally to enable a correct display for the box children. 
            This means that when the application calls IupGLSwapBuffers, then children will be drawn before actually swapping the double buffer.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="IupCanvas.htm">IupCanvas</a>,
          <a href="IupGLCanvas.htm">IupGLCanvas</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
