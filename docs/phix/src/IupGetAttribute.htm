<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">IupGetAttribute</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Syntax:</b>
         </td>
         <td>
          <font face = "Arial, Helvetica">
            include pGUI.e
           <br>
           <br>
            string res = IupGetAttribute(Ihandln ih, string name)
            <br>
            <i>-- or --</i>
            <br>
            atom res = IupGetAttributePtr(Ihandln ih, string name)
          </font>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Retrieve an interface element attribute value.
            <br>
            <br>
            ih: Identifier of the interface element. If NULL will retrieve from the global environment.
            <br>
            name: name of the attribute.
            <br>
            <br>
            Returns: the attribute value or "" if the attribute is not set or does not exist.
            <br>
            <br>
            <b>Note</b>: <a href="IupSetAttribute.htm">IupSetAttribute</a>() accepts an atom_string, whereas 
            IupGetAttribute always yields a string, and IupGetAttributePtr retrieves (the raw pointer or) a handle. 
            <a href="IupSetAttribute.htm">IupSetAttributePtr</a>() is intended to be the logical counterpart to 
            IupGetAttributePtr, and in that simple way make code more self-documenting. 
            Alternatively the utility functions below may be used to retrieve numerical indexes, etc.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Utility Functions:</b>
         </td>
         <td>
            <a name=utility></a>
            These functions can also be used to get attributes from the element:
            <br>
            <br>
            atom res = IupGetInt(Ihandln ih, string name)<br>
            atom {a1,a2} = IupGetIntInt(Ihandle ih, string name)<br>
            atom res = IupGetInt2(Ihandle ih, string name)<br>
            atom res = IupGetIntId(Ihandle ih, string name, integer id)<br>
            atom res = IupGetIntId2(Ihandle ih, string name, integer lin, integer col)<br>
            atom res = IupGetFloat(Ihandle ih, string name)<br>
            atom res = IupGetFloatId(Ihandle ih, string name, integer id)<br>
            atom res = IupGetFloatId2(Ihandle ih, string name, integer lin, integer col)<br>
            atom res = IupGetDouble(Ihandln ih, string name)<br>
            atom res = IupGetDoubleId(Ihandle ih, string name, integer id)<br>
            atom res = IupGetDoubleId2(Ihandle ih, string name, integer lin, integer col)<br>
            integer {r,g,b} = IupGetRGB(Ihandle ih, string name)<br>
            integer {r,g,b} = IupGetRGBId(Ihandle ih, string name, integer id)<br>
            integer {r,g,b} = IupGetRGBId2(Ihandle ih, string name, integer lin, integer col)<br>
            string res = IupGetAttributeId(Ihandle ih, string name, integer id)<br>
            string res = IupGetAttributeId2(Ihandle ih, string name, integer lin, integer col)<br>
            <br>
            id, lin, col: used when the attribute has additional ids.
            <br>
            <br>
            IupGetIntInt retrieves two integers (as separated by 'x', ':' or ',').<br>
            IupGetInt2 returns just the second value.<br>
            Note that IupGetInt() etc retrieve 32-bit (or 64-bit) integers, or pointers/handles, which may need to be stored as an atom.<br>
            (Renaming as IupGetAtom() etc would only succeed in making it more difficult to translate C code, or search for examples.)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Notes:</b>
         </td>
         <td>
            See the Attributes Guide for more details.
            <br>
            <br>
            The returned value is not necessarily the same pointer used by the application to define the attribute value. 
            The pointers of internal IUP attributes returned by IupGetAttribute should never be freed or changed, except 
            when it is a custom application pointer that was stored using IupSetAttribute and allocated by the application.
            <br>
            <br>
            The returned pointer can be used safely even if IupGetGlobal or IupGetAttribute are called several times. 
            But not too many times, because it is an internal buffer and IUP may reuse it after around 50 calls.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="IupSetAttribute.htm">IupSetAttribute</a>,
          <a href="IupSetAttributes.htm">IupSetAttributes</a>,
          <a href="IupGetHandle.htm">IupGetHandle</a>,
          <a href="IupSetGlobal.htm">IupSetGlobal</a>,
          <a href="IupGetGlobal.htm">IupGetGlobal</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
