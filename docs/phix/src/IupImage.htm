<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">IupImage</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include pGUI.e
            <br>
            <br>
            <a href="Ihandle.htm">Ihandle</a> ih = IupImage(<a href="integer.htm">integer</a> width, height, <a href="object.htm">object</a> pixels)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Creates an image to be shown on a label, button, toggle, or as a cursor.
            <br>
            <a name=IupImageRGB></a>
            <br>
            <b>IupImageRGB</b> and <b>IupImageRGBA</b> are similar except for the content of pixels. <br>
            IupImage is limited to 256 colour (8 bit) bitmaps, whereas IupImageRGB and IupImageRGBA are used to create 24 and 32 bit bitmaps respectively.
            <br>
            <br>
            width: Image width in pixels.<br>
            height: Image height in pixels.<br>
            pixels: Usually a (flat) <a href="sequence.htm">sequence</a> containing the value of each pixel, can also be an atom pointer to already-initialised memory. <br>
            IupImage uses 1 value per pixel, IupImageRGB uses 3 values and IupImageRGBA uses 4 values per pixel.<br>
            Each value is always 8 bit (as per/see <a href="poke.htm">poke</a>) ie 0..255, hence the mapping of IupImage/RGB/A -> 8/24/32 bit bitmaps. <br>
            Origin is at the top-left corner and data is oriented top to bottom, and left to right. <br>
            The pixels array is duplicated internally so you can discard it after the call.
            <br>
            <br>
            Returns: the identifier of the created element.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
<!--
          <a href="notpgui.htm"><span class="illegal">Not supported</span></a>, but it&rsquo;s on my wish list
-->
<!-- (kept for copying purposes)
          <a href="notpgui.htm"><span style="color:lime;"><sup>+</sup></span></a>
          <a href="notpgui.htm#IupImage"><span style="color:red;"><sup>x</sup></span></a>
          <a href="notpgui.htm#IupImage"><span style="color:orange; font-size:75%;"><sup>?</sup></span></a>
-->
            Supported, note however that IupImage() creates the image data immediately and is limited to the default 16 colours 
            listed below (reproduced as constant $IupImageDefaultColours within p2js.js/IupImage(), fyi and should that help any).
            Therefore, you <i>cannot</i> set the colour indices ("0","1",etc) <i>after</i> calling IupImage(), and you haven&rsquo;t 
            got a handle with which to try that <i>before</i>, and hence must resort to using IupImageRGB[A]() when those 16 colours 
            do not suffice (and which you would need for any image with more than 256 colours anyway). 
            Also note there is a potentially significant performance issue when using binary strings to construct the pixel data, as
            explained in <a href="repeat.htm">repeat</a>(), that can be allieviated by setting the (new in 1.0.2, not necessary for 
            repeat 0) allow_strings parameter of that function to false.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="IupLoadImage.htm">IupLoadImage</a>,
          <a href="IupImageLibOpen.htm">IupImageLibOpen</a>,
          <a href="imFileImageLoadBitmap.htm">imFileImageLoadBitmap</a>,
          <a href="IupLabel.htm">IupLabel</a>,
          <a href="IupButton.htm">IupButton</a>,
          <a href="IupToggle.htm">IupToggle</a>,
          <a href="IupDestroy.htm">IupDestroy</a>
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
            Application icons are usually 32x32. Toolbar bitmaps are 24x24 or smaller. Menu bitmaps and small icons are 16x16 or smaller.
            <br>
            <br>
            Images created with the IupImage* constructors can be reused in different elements.
            <br>
            <br>
            The images should be destroyed when they are no longer necessary, by means of the <a href="IupDestroy.htm">IupDestroy</a> function. <br>
            To destroy an image, it cannot be in use, i.e the controls where it is used should be destroyed first. <br>
            Images that were associated with controls by names are automatically destroyed in <a href="IupClose.htm">IupClose</a>.
            <br>
            <br>
            Please observe the rules for creating cursor images: <a href="common.htm#CURSOR">CURSOR</a>.
            <br>
            <br>
            Some examples can be found in demo\pGUI\sample.exw
         </td>
        </tr>
        <tr>
         <td>
          <b>Usage:</b>
         </td>
         <td>
            Images are used in elements such as buttons and labels by attributes that points to names registered with <a href="IupSetHandle.htm">IupSetHandle</a>. <br>
            You can also use <a href="IupSetAttributeHandle.htm">IupSetAttributeHandle</a> to shortcut the setting of an image as an attribute. For example:
            <br>
            <br>
<!--eucode>
Ihandle image = IupImage(width, height, pixels);

IupSetHandle("MY_IMAGE_NAME", image);
IupSetAttribute(label, "IMAGE", "MY_IMAGE_NAME");
or
IupSetAttributeHandle(label, "IMAGE", image); -- an automatic name will be created internally
</eucode-->
<pre>
<font color="#7060A8">Ihandle</font><font color="#000000"> image</font><font color="#0000FF"> =</font><font color="#7060A8"> IupImage</font><font color="#0000FF">(</font><font color="#000000">width</font><font color="#0000FF">,</font><font color="#000000"> height</font><font color="#0000FF">,</font><font color="#000000"> pixels</font><font color="#0000FF">);
</font>
<font color="#7060A8">IupSetHandle</font><font color="#0000FF">(</font><font color="#008000">"MY_IMAGE_NAME"</font><font color="#0000FF">,</font><font color="#000000"> image</font><font color="#0000FF">);</font>
<font color="#7060A8">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">label</font><font color="#0000FF">,</font><font color="#008000"> "IMAGE"</font><font color="#0000FF">,</font><font color="#008000"> "MY_IMAGE_NAME"</font><font color="#0000FF">);</font>
<font color="#008080">or</font>
<font color="#7060A8">IupSetAttributeHandle</font><font color="#0000FF">(</font><font color="#000000">label</font><font color="#0000FF">,</font><font color="#008000"> "IMAGE"</font><font color="#0000FF">,</font><font color="#000000"> image</font><font color="#0000FF">);</font><font color="#000080"><i> -- an automatic name will be created internally</i></font>
</pre>
            <br>
            In Windows, names of resources in RC files linked with the application are also accepted. <br>
            In GTK, names of GTK Stock Items are also accepted. <br>
            In Motif, names of bitmaps installed on the system are also accepted. For example:
            <br>
            <br>
<!--eucode>
IupSetAttribute(label, "IMAGE", "TECGRAF_BITMAP");  // available in the "etc/iup.rc" file
or
IupSetAttribute(label, "IMAGE", "gtk-open");  // available in the GTK Stock Items
</eucode-->
<pre>
<font color="#7060A8">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">label</font><font color="#0000FF">,</font><font color="#008000"> "IMAGE"</font><font color="#0000FF">,</font><font color="#008000"> "TECGRAF_BITMAP"</font><font color="#0000FF">); </font><font color="#000080"><i> // available in the "etc/iup.rc" file</i></font>
<font color="#008080">or</font>
<font color="#7060A8">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">label</font><font color="#0000FF">,</font><font color="#008000"> "IMAGE"</font><font color="#0000FF">,</font><font color="#008000"> "gtk-open"</font><font color="#0000FF">); </font><font color="#000080"><i> // available in the GTK Stock Items</i></font>
</pre>
            <br>
            In all drivers, a path to a file name can also be used as the attribute value (since 3.0). <br>
            But the available file formats supported are system dependent. <br>
            The Windows driver supports BMP, ICO and CUR. <br>
            The GTK driver supports the formats supported by the GDK-PixBuf library, such as BMP, GIF, JPEG, PCX, PNG, TIFF and many others. <br>
            The Motif driver supports the X-Windows bitmap. For example:
            <br>
            <br>
<!--eucode>
IupSetAttribute(label, "IMAGE", "../etc/tecgraf.bmp");
</eucode-->
<pre>
<font color="#7060A8">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">label</font><font color="#0000FF">,</font><font color="#008000"> "IMAGE"</font><font color="#0000FF">,</font><font color="#008000"> "../etc/tecgraf.bmp"</font><font color="#0000FF">);</font>
</pre>
            <br>
            A more format independent approach can be reached using the IUP-IM Functions.
         </td>
        </tr>
        <tr>
         <td>
          <b>Colors:</b>
         </td>
         <td>
            In Motif, the alpha channel in RGBA images is always composed with the control <a href="common.htm#BGCOLOR">BGCOLOR</a> by IUP prior to setting the image at the control. <br>
            In Windows and in GTK, the alpha channel is composed internally by the system. <br>
            But in Windows for some controls the alpha must be composed a priori also, it includes: <a href="IupMenuItem.htm">IupMenuItem</a> 
            and <a href="IupSubmenu.htm">IupSubmenu</a> always; and <a href="IupToggle.htm">IupToggle</a> when NOT using Visual Styles. <br>
            This implies that if the control background is not uniform then probably there will be a visible difference where it should be transparent.
            <br>
            <br>
            For IupImage, if a color is not set, then it is used a default color for the 16 first colors. The default color table is the same for Windows, GTK and Motif:
            <br>
            <br>
 <pre>
 0 =   0,  0,  0 (black)
 1 = 128,  0,  0 (dark red)
 2 =   0,128,  0 (dark green) 
 3 = 128,128,  0 (dark yellow)
 4 =   0,  0,128 (dark blue)
 5 = 128,  0,128 (dark magenta) 
 6 =   0,128,128 (dark cian) 
 7 = 192,192,192 (gray)
 8 = 128,128,128 (dark gray)
 9 = 255,  0,  0 (red)     
10 =   0,255,  0 (green)
11 = 255,255,  0 (yellow)
12 =   0,  0,255 (blue)
13 = 255,  0,255 (magenta)
14 =   0,255,255 (cian)  
15 = 255,255,255 (white)
 </pre>
            <br>
            For images with more than 16 colors, and up to 256 colors, all the color indices must be defined up to the maximum number of colors. 
            For example, if the biggest image index is 100, then all the colors from i=16 up to i=100 must be defined even if some indices are not used.
         </td>
        </tr>
        <tr>
         <td>
          <b>Samples:</b>
         </td>
         <td>
            You can obtain several images from the IupImageLib, a library of pre-defined images. <br>
            To view the images you can use the IupView in the applications included in the distribution, available at the Download. <br>
            IupView is also capable of converting several image formats into an IupImage, and save IUP images as LED, Lua or ICO.
            <br>
            <br>
            The EdPatt and the IMLAB applications can load and save images in simplified LED format. <br>
            They allow operations such as importing GIF images and exporting them as IUP images. <br>
            EdPatt allows you to manually edit the images, and also have support for images in IupLua.
         </td>
        </tr>

        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
            
         </td>
        </tr>
        <tr>
         <td>
          "0","1",etc<a href="notpgui.htm#IupImage"><span style="color:red;"><sup>x</sup></span></a>
         </td>
         <td>
            Color in index 0,1,etc. The indices can range from 0 to 255. The total number of colors is limited to 256 colors. 
            Be careful when setting colors, since they are attributes they follow the same storage rules for standard attributes.
            <br>
            <br>
            The values are integer numbers from 0 to 255, one for each color in the RGB triple (For ex: "64 190 255"). 
            If the value of a given index is "BGCOLOR", the color used will be the background color of the element on which the image will be inserted. 
            The "BGCOLOR" value must be defined within an index less than 16.
            <br>
            <br>
            Used only for images created with IupImage. As noted above, not supported under pwa/p2js.
         </td>
        </tr>
        <tr>
         <td>
          AUTOSCALE
         </td>
         <td>
            automatically scale the image by a given real factor. If not defined the global attribute IMAGEAUTOSCALE will be used. Values are the same of the global attribute. (since 3.16)
         </td>
        </tr>
        <tr>
         <td>
          <a href="common.htm#BGCOLOR">BGCOLOR</a>
         </td>
         <td>
            The color used for transparency. If not defined uses the BGCOLOR of the control that contains the image.
         </td>
        </tr>
        <tr>
         <td>
          BPP
         </td>
         <td>
            (read-only) returns the number of bits per pixel in the image. Images created with IupImage returns 8, with IupImageRGB returns 24 and with IupImageRGBA returns 32. (since 3.0)
         </td>
        </tr>
        <tr>
         <td>
          CLEARCACHE
         </td>
         <td>
            (write-only): clears the internal native image cache, so WID can be dynamically changed. (since 3.24)
         </td>
        </tr>
        <tr>
         <td>
          CHANNELS
         </td>
         <td>
            (read-only) returns the number of channels in the image. Images created with IupImage returns 1, with IupImageRGB returns 3 and with IupImageRGBA returns 4. (since 3.0)
         </td>
        </tr>
        <tr>
         <td>
          DPI
         </td>
         <td>
            resolution expected for display. Used when AUTOSCALE=DPI. If not defined the global attribute IMAGESDPI will be used. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          HEIGHT
         </td>
         <td>
            (read-only) Image height in pixels.
         </td>
        </tr>
        <tr>
         <td>
          HOTSPOT
         </td>
         <td>
            Hotspot is the position inside a cursor image indicating the mouse-click spot. <br>
            Its value is given by the x and y coordinates inside a cursor image. <br>
            Its value has the format "x:y", where x and y are integers defining the coordinates in pixels. Default: "0:0".
         </td>
        </tr>
        <tr>
         <td>
          <a href="common.htm#RASTERSIZE">RASTERSIZE</a>
         </td>
         <td>
            (read-only) returns the image size in pixels. (since 3.0)
         </td>
        </tr>
        <tr>
         <td>
          RESHAPE
         </td>
         <td>
            (write-only): given a new size if format "widthxheight", allocates enough memory for the new size and changes WIDTH and HEIGHT attributes. <br>
            The image contents are ignored and it will contain trash after the reshape. (since 3.24)
         </td>
        </tr>
        <tr>
         <td>
          RESIZE
         </td>
         <td>
            (write-only): given a new size if format "widthxheight", changes WIDTH and HEIGHT attributes, and resizes 
            the image contents using bilinear interpolation for RGB and RGBA images and nearest neighborhood for 8 bits. (since 3.24)<br>
            PL: Does nothing on a previoously displayed image unless CLEARCACHE is first set. I then found I had to recreate the image from the original 
            pixel array, otherwise repeated bilinear interpolation rather rapidly degrades it, in my case to all black, and consequently setting CLEARCACHE 
            on the brand new image was no longer necessary or helpful.
         </td>
        </tr>
        <tr>
         <td>
          SCALED
         </td>
         <td>
            (read-only): returns Yes if the image has been resized. (since 3.25)
         </td>
        </tr>
        <tr>
         <td>
          ORIGINALSCALE
         </td>
         <td>
            (read-only): returns the width and height before the image was scaled. (since 3.25)
         </td>
        </tr>
        <tr>
         <td>
          <a href="common.htm#WID">WID</a>
         </td>
         <td>
            (read-only) returns the internal pixels data pointer. (since 3.0)
         </td>
        </tr>
        <tr>
         <td>
          WIDTH
         </td>
         <td>
            (read-only) Image width in pixels.
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
