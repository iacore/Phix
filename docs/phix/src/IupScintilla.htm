<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">IupScintilla</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include pGUI.e
           <br>
           <br>
            <a href="Ihandle.htm">Ihandle</a> ih = IupScintilla()
<!--
            <a href="sequence.htm">sequence</a> columns, data,
                                                            <a href="integer.htm">integer</a> visible=10, 
                                                            <a href="string.htm">string</a> attributes="", 
                                                            <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Creates a multiline source code text editor that uses the Scintilla library.
            <br>
            <br>
            Scintilla is a free library that provides text-editing functions, with an emphasis on advanced features for source code editing. <br>
            It comes with complete source code and a license that permits use in any free project or commercial product, and it is available on 
            <a href="javascript:ExternalLink('exts37','http://www.scintilla.org');" id="exts37" style="color:#9B5565">http://www.scintilla.org</a>
            <br>
            <br>
            IupScintilla library includes the Scintilla code, so no external references are needed.
            <br>
            <br>
            For compilers that don&rsquo;t have C++ 11 support (g++ &lt; 4.8 and Visual C++ &lt; 14) we use Scintilla version 3.6.6, 
            for compilers that have we use Scintilla version 3.11.2. We are still not using Scintilla 4.x because it uses C++14 
            features, and requires Microsoft Visual C++ 2017 and g++ 7.
            <br>
            <br>
            The global attribute SCINTILLA_VERSION contains the Scintilla version in use. (since 3.29)
            <br>
            <br>
            Supported in Windows and in the systems the GTK driver is supported.
            <br>
            <br>
            <h3>Initialization and Usage</h3>
            The IupScintillaOpen function must be called after a IupOpen, so that the control can be used. <br>
<!--
            The program must be linked to the controls library (iup_scintilla), and with the "imm32.lib" library in Windows.
-->
            <br>
            <br>
            Returns: the identifier of the created element.
            This function returns the identifier of the created editing component, or NULL if an error occurs.



            For more information on the attributes and args<small>[nee data]</small> parameters see 
            <a href="IupSetAttributes.htm">IupSetAttributes</a>.
            <br>
            <br>
         </td>
        </tr>
<!--
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
            Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="IupMatrix.htm">IupMatrix</a>
         </td>
        </tr>
-->
        <tr>
         <td>
          Auxiliary Functions
         </td>
         <td>
            sptr_t IupScintillaSendMessage(<a href="Ihandle.htm">Ihandle</a> ih, integer iMessage, uptr_t wParam, sptr_t lParam); [in C]<br>
            Sends a message to the Scintilla control in any platform. (since 3.11)
            <br>
            <br>
            IupText auxiliary functions IupTextConvertLinColToPos and IupTextConvertPosToLinCol can also be used. <br>
            But here lin and col starts at 0, pos starts at 0.
         </td>
        </tr>
        <tr>
         <td>
          Style Definition
         </td>
         <td>
            Scintilla can automatically format the text using the Lexer or the application can manually format the text. <br>
            In both cases only 256 different styles are available. Styles are numbered from 0 to 255, invalid IDs are simply ignored. <br>
            When the id is not specified for an attributes the style 0 is assumed.
            <br>
            <br>
            Each Lexer will use the available styles with its own rules, but several Lexers share many ids. <br>
            Notice that language keywords and styles definitions are not pre-defined internally, the application must define them.
            <br>
            <br>
        <table>
         <tr>
            <th>ID</th>
            <th>Global styles</th>
         </tr>
         <tr>
            <td>
             32
            </td>
            <td>
              This style defines the attributes that all styles receive when the STYLECLEARALL attribute is used.
            </td>
         </tr>
         <tr>
            <td>
             33
            </td>
            <td>
              This style sets the attributes of the text used to display line numbers in a line number margin.
            </td>
         </tr>
         <tr>
            <td>
             34
            </td>
            <td>
              This style sets the attributes used when highlighting braces with the BRACEHIGHLIGHT and HIGHLIGHTGUIDE attributes.
            </td>
         </tr>
         <tr>
            <td>
             35
            </td>
            <td>
              This style sets the attributes used when marking an unmatched brace with the BRACEBADLIGHT attribute.
            </td>
         </tr>
         <tr>
            <td>
             36
            </td>
            <td>
              This style sets the font used when drawing control characters.
            </td>
         </tr>
         <tr>
            <td>
             37
            </td>
            <td>
             This style sets the foreground and background colors used when drawing the indentation guides. Used when INDENTATIONGUIDES!=NONE.
            </td>
         </tr>
        </table>
        <br>
        &nbsp;
        <br>
        Here are some known styles for C++ and Lua:
            <br>
        <table>
         <tr>
            <th>Style ID</th>
            <th>C++ styles</th>
            <th>Lua styles</th>
         </tr>
         <tr>
            <td>
             0
            </td>
            <td>
              Default
            </td>
            <td>
              Default
            </td>
         </tr>

         <tr>
            <td>
             1
            </td>
            <td>
              C comment
            </td>
            <td>
              Lua comment
            </td>
         </tr>
         <tr>
            <td>
             2
            </td>
            <td>
              C++ comment line
            </td>
            <td>
              Lua comment line
            </td>
         </tr>
         <tr>
            <td>
             3
            </td>
            <td>
              JavaDoc/ Doxygen style C comment
            </td>
            <td>
              JavaDoc/ Doxygen style Lua comment
            </td>
         </tr>
         <tr>
            <td>
             4
            </td>
            <td>
              Number
            </td>
            <td>
              Number
            </td>
         </tr>
         <tr>
            <td>
             5
            </td>
            <td>
              Keyword
            </td>
            <td>
              Keyword (id=0)
            </td>
         </tr>
         <tr>
            <td>
             6
            </td>
            <td>
              String
            </td>
            <td>
              String
            </td>
         </tr>
         <tr>
            <td>
             7
            </td>
            <td>
              Character
            </td>
            <td>
              Character
            </td>
         </tr>
         <tr>
            <td>
             8
            </td>
            <td>
              IDL UUID
            </td>
            <td>
              Literal string
            </td>
         </tr>
         <tr>
            <td>
             9
            </td>
            <td>
              Preprocessor block
            </td>
            <td>
              Old preprocessor block (obsolete)
            </td>
         </tr>
         <tr>
            <td>
             10
            </td>
            <td>
              Operator
            </td>
            <td>
              Operator
            </td>
         </tr>
         <tr>
            <td>
             11
            </td>
            <td>
              Identifier
            </td>
            <td>
              Identifier
            </td>
         </tr>
         <tr>
            <td>
             12
            </td>
            <td>
              End of a line where a string is not closed
            </td>
            <td>
              End of a line where a string is not closed
            </td>
         </tr>
         <tr>
            <td>
             13
            </td>
            <td>
              C# verbatim string
            </td>
            <td>
              Keyword set number 2 (id=1)
            </td>
         </tr>
         <tr>
            <td>
             14
            </td>
            <td>
              Regular expression
            </td>
            <td>
              Keyword set number 3 (...)
            </td>
         </tr>
         <tr>
            <td>
             15
            </td>
            <td>
              JavaDoc/Doxygen style C++ comment line
            </td>
            <td>
              Keyword set number 4
            </td>
         </tr>
         <tr>
            <td>
             16
            </td>
            <td>
              Keyword set number 2
            </td>
            <td>
              Keyword set number 5
            </td>
         </tr>
         <tr>
            <td>
             17
            </td>
            <td>
              JavaDoc/Doxygen keyword
            </td>
            <td>
              Keyword set number 6
            </td>
         </tr>
         <tr>
            <td>
             18
            </td>
            <td>
              JavaDoc/Doxygen keyword error
            </td>
            <td>
              Keyword set number 7
            </td>
         </tr>
         <tr>
            <td>
             19
            </td>
            <td>
              Global class or typedef defined in keyword
            </td>
            <td>
              Keyword set number 8
            </td>
         </tr>
         <tr>
            <td>
             20
            </td>
            <td>
              C++ raw string
            </td>
            <td>
              Label
            </td>
         </tr>
         <tr>
            <td>
             21
            </td>
            <td>
             F# triple-quoted verbatim strings
            </td>
            <td>
             n/a
            </td>
         </tr>
         <tr>
            <td>
             22
            </td>
            <td>
             Hash-quoted strings
            </td>
            <td>
             n/a
            </td>
         </tr>
         <tr>
            <td>
             23
            </td>
            <td>
             Preprocessor block comment
            </td>
            <td>
             n/a
            </td>
         </tr>
        </table>
         </td>
        </tr>
        <tr>
         <td>
          Notes
         </td>
         <td>
            Enter key will add a new line, and the Tab key will insert a Tab.
            <br>
            <br>
            Internal Drag&Drop support is enabled by default, although the Drag & Drop attributes and callbacks are supported they may not work as expected.
            <br>
            <br>
            IupScintilla uses attributes and callbacks very similar to the IupText control, except for text formatting. <br>
            But notice that in IupScintilla position always starts at 0.
            <br>
            <br>
            Although the IupScintilla documentation should be sufficient for most uses, some advanced features will be better understood if the Scintilla 
            Documentation is consulted. <br>
            Also some Scintilla features are not available in IupScintilla, so by consulting that documentation you will be able to check which one and 
            if necessary you can request the implementation in IupScintilla.
            <br>
            <br>
            Our version of Scintilla also supports a LED lexer. (since 3.28)
         </td>
        </tr>
        <tr>
         <td>
          Navigation, Selection and Clipboard Keys
         </td>
         <td>
            Here is a list of the common keys for all drivers. Other keys are available depending on the driver.
            <br>
  <style type="text/css">
.style7 {
        border: 1px solid #808080;
        text-align: center;
        background-color: #E1E1E1;
}
  </style>
            <table align="center">
             <tbody>
              <tr>
                <th>Keys</th>
                <th>Action</th>
              </tr>
              <tr>
                <td colspan="2" class="style7"><em>Navigation</em></td>
              </tr>
              <tr>
                <td>Arrows</td>
                <td>move by individual characters/lines</td>
              </tr>
              <tr>
                <td>Ctrl+Arrows</td>
                <td>move by words/paragraphs</td>
              </tr>
              <tr>
                <td>Home/End</td>
                <td>move to begin/end line</td>
              </tr>
              <tr>
                <td>Ctrl+Home/End</td>
                <td>move to begin/end text</td>
              </tr>
              <tr>
                <td>PgUp/PgDn</td>
                <td>move vertically by pages</td>
              </tr>
              <tr>
                <td>Ctrl+PgUp/PgDn</td>
                <td>move horizontally by pages</td>
              </tr>
              <tr>
                <td colspan="2" class="style7"><em>Selection</em></td>
              </tr>
              <tr>
                <td>Shift+Arrows</td>
                <td>select characters</td>
              </tr>
              <tr>
                <td>Ctrl+A</td>
                <td>select all</td>
              </tr>
              <tr>
                <td colspan="2" class="style7"><em>Deleting</em></td>
              </tr>
              <tr>
                <td>Del</td>
                <td>delete the character at right</td>
              </tr>
              <tr>
                <td>Backspace</td>
                <td>delete the character at left</td>
              </tr>
              <tr>
                <td colspan="2" class="style7"><em>Clipboard</em></td>
              </tr>
              <tr>
                <td>Ctrl+C</td>
                <td>copy</td>
              </tr>
              <tr>
                <td>Ctrl+X</td>
                <td>cut</td>
              </tr>
              <tr>
                <td>Ctrl+V</td>
                <td>paste</td>
              </tr>
             </tbody>
            </table>
<!--
        <table>
         <tr>
            <th>ID</th>
            <th>Global styles</th>
         </tr>
         <tr>
            <td>
             32
            </td>
            <td>
              This style defines the attributes that all styles receive when the STYLECLEARALL attribute is used.
            </td>
         </tr>
        </table>
 <pre>
Keys    Action
Navigation
Arrows  move by individual characters/lines
Ctrl+Arrows     move by words/paragraphs
Home/End        move to begin/end line
Ctrl+Home/End   move to begin/end text
PgUp/PgDn       move vertically by pages
Ctrl+PgUp/PgDn  move horizontally by pages
Selection
Shift+Arrows    select characters
Ctrl+A  select all
Deleting
Del     delete the character at right
Backspace       delete the character at left
Clipboard
Ctrl+C  copy
Ctrl+X  cut
Ctrl+V  paste
 </pre>
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
            <div class="parent">
              <div class="child" style="border: solid 1px #dfdfdf;">
                <img width="686" height="493" src="images/scintilla.png">
              </div>
            </div>
            <div style="clear:both;height:1px;"> </div>
          <br>
        <small>
<!--eucode>
-- ***UNTESTED***
-- demo/pGUI/IupScintilla.exw
include pGUI.e
Ihandle ih = IupScintilla()
IupSetAttribute(ih, "LEXERLANGUAGE", "cpp");

IupSetAttribute(ih, "KEYWORDS0", "void struct union enum char short int long double float signed unsigned const "&
                                 "static extern auto register volatile bool class private protected public friend "&
                                 "inline template virtual asm explicit typename mutable "&
                                 "if else switch case default break goto return for while do continue typedef "&
                                 "sizeof NULL new delete throw try catch namespace operator this const_cast "&
                                 "static_cast dynamic_cast reinterpret_cast true false using "&
                                 "typeid and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq");

//IupSetAttribute(ih, "STYLEFONT32", "Courier New");
IupSetAttribute(ih, "STYLEFONT32", "Consolas");
IupSetAttribute(ih, "STYLEFONTSIZE32", "11");
IupSetAttribute(ih, "STYLECLEARALL", "Yes");  /* sets all styles to have the same attributes as 32 */

IupSetAttribute(ih, "STYLEFGCOLOR1", "0 128 0");    // 1-C comment 
IupSetAttribute(ih, "STYLEFGCOLOR2", "0 128 0");    // 2-C++ comment line 
IupSetAttribute(ih, "STYLEFGCOLOR4", "128 0 0");    // 4-Number 
IupSetAttribute(ih, "STYLEFGCOLOR5", "0 0 255");    // 5-Keyword 
IupSetAttribute(ih, "STYLEFGCOLOR6", "160 20 20");  // 6-String 
IupSetAttribute(ih, "STYLEFGCOLOR7", "128 0 0");    // 7-Character 
IupSetAttribute(ih, "STYLEFGCOLOR9", "0 0 255");    // 9-Preprocessor block 
IupSetAttribute(ih, "STYLEFGCOLOR10", "255 0 255"); // 10-Operator 
IupSetAttribute(ih, "STYLEBOLD10", "YES");

IupSetAttribute(ih, "STYLEHOTSPOT6", "YES");
  
IupSetAttribute(ih, "MARGINWIDTH0", "50");

IupSetAttribute(ih, "PROPERTY", "fold=1");
IupSetAttribute(ih, "PROPERTY", "fold.compact=0");
IupSetAttribute(ih, "PROPERTY", "fold.comment=1");
IupSetAttribute(ih, "PROPERTY", "fold.preprocessor=1");

IupSetAttribute(ih, "MARGINWIDTH1", "20");
IupSetAttribute(ih, "MARGINTYPE1",  "SYMBOL");
IupSetAttribute(ih, "MARGINMASKFOLDERS1",  "Yes");

IupSetAttribute(ih, "MARKERDEFINE", "FOLDER=PLUS");
IupSetAttribute(ih, "MARKERDEFINE", "FOLDEROPEN=MINUS");
IupSetAttribute(ih, "MARKERDEFINE", "FOLDEREND=EMPTY");
IupSetAttribute(ih, "MARKERDEFINE", "FOLDERMIDTAIL=EMPTY");
IupSetAttribute(ih, "MARKERDEFINE", "FOLDEROPENMID=EMPTY");
IupSetAttribute(ih, "MARKERDEFINE", "FOLDERSUB=EMPTY");
IupSetAttribute(ih, "MARKERDEFINE", "FOLDERTAIL=EMPTY");

IupSetAttribute(ih, "FOLDFLAGS", "LINEAFTER_CONTRACTED");

IupSetAttribute(ih, "MARGINSENSITIVE1", "YES");
</eucode-->
<pre>
<font color="#000080"><i>-- ***UNTESTED***
-- demo/pGUI/IupScintilla.exw</i></font>
<font color="#008080">include</font><font color="#000000"> pGUI.e</font>
<font color="#5E005E">Ihandle</font><font color="#000000"> ih</font><font color="#0000FF"> =</font><font color="#000000"> IupScintilla</font><font color="#0000FF">()</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "LEXERLANGUAGE"</font><font color="#0000FF">,</font><font color="#008000"> "cpp"</font><font color="#0000FF">);
</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "KEYWORDS0"</font><font color="#0000FF">,</font><font color="#008000"> "void struct union enum char short int long double float signed unsigned const "</font><font color="#0000FF">&amp;</font>
<font color="#008000">                                 "static extern auto register volatile bool class private protected public friend "</font><font color="#0000FF">&amp;</font>
<font color="#008000">                                 "inline template virtual asm explicit typename mutable "</font><font color="#0000FF">&amp;</font>
<font color="#008000">                                 "if else switch case default break goto return for while do continue typedef "</font><font color="#0000FF">&amp;</font>
<font color="#008000">                                 "sizeof NULL new delete throw try catch namespace operator this const_cast "</font><font color="#0000FF">&amp;</font>
<font color="#008000">                                 "static_cast dynamic_cast reinterpret_cast true false using "</font><font color="#0000FF">&amp;</font>
<font color="#008000">                                 "typeid and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq"</font><font color="#0000FF">);
</font>
<font color="#000080"><i>//IupSetAttribute(ih, "STYLEFONT32", "Courier New");</i></font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "STYLEFONT32"</font><font color="#0000FF">,</font><font color="#008000"> "Consolas"</font><font color="#0000FF">);</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "STYLEFONTSIZE32"</font><font color="#0000FF">,</font><font color="#008000"> "11"</font><font color="#0000FF">);</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "STYLECLEARALL"</font><font color="#0000FF">,</font><font color="#008000"> "Yes"</font><font color="#0000FF">); </font><font color="#000080"><i> /* sets all styles to have the same attributes as 32 */
</i></font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "STYLEFGCOLOR1"</font><font color="#0000FF">,</font><font color="#008000"> "0 128 0"</font><font color="#0000FF">);   </font><font color="#000080"><i> // 1-C comment </i></font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "STYLEFGCOLOR2"</font><font color="#0000FF">,</font><font color="#008000"> "0 128 0"</font><font color="#0000FF">);   </font><font color="#000080"><i> // 2-C++ comment line </i></font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "STYLEFGCOLOR4"</font><font color="#0000FF">,</font><font color="#008000"> "128 0 0"</font><font color="#0000FF">);   </font><font color="#000080"><i> // 4-Number </i></font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "STYLEFGCOLOR5"</font><font color="#0000FF">,</font><font color="#008000"> "0 0 255"</font><font color="#0000FF">);   </font><font color="#000080"><i> // 5-Keyword </i></font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "STYLEFGCOLOR6"</font><font color="#0000FF">,</font><font color="#008000"> "160 20 20"</font><font color="#0000FF">); </font><font color="#000080"><i> // 6-String </i></font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "STYLEFGCOLOR7"</font><font color="#0000FF">,</font><font color="#008000"> "128 0 0"</font><font color="#0000FF">);   </font><font color="#000080"><i> // 7-Character </i></font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "STYLEFGCOLOR9"</font><font color="#0000FF">,</font><font color="#008000"> "0 0 255"</font><font color="#0000FF">);   </font><font color="#000080"><i> // 9-Preprocessor block </i></font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "STYLEFGCOLOR10"</font><font color="#0000FF">,</font><font color="#008000"> "255 0 255"</font><font color="#0000FF">);</font><font color="#000080"><i> // 10-Operator </i></font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "STYLEBOLD10"</font><font color="#0000FF">,</font><font color="#008000"> "YES"</font><font color="#0000FF">);
</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "STYLEHOTSPOT6"</font><font color="#0000FF">,</font><font color="#008000"> "YES"</font><font color="#0000FF">);</font>
<font color="#C0C0C0">  </font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "MARGINWIDTH0"</font><font color="#0000FF">,</font><font color="#008000"> "50"</font><font color="#0000FF">);
</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "PROPERTY"</font><font color="#0000FF">,</font><font color="#008000"> "fold=1"</font><font color="#0000FF">);</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "PROPERTY"</font><font color="#0000FF">,</font><font color="#008000"> "fold.compact=0"</font><font color="#0000FF">);</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "PROPERTY"</font><font color="#0000FF">,</font><font color="#008000"> "fold.comment=1"</font><font color="#0000FF">);</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "PROPERTY"</font><font color="#0000FF">,</font><font color="#008000"> "fold.preprocessor=1"</font><font color="#0000FF">);
</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "MARGINWIDTH1"</font><font color="#0000FF">,</font><font color="#008000"> "20"</font><font color="#0000FF">);</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "MARGINTYPE1"</font><font color="#0000FF">, </font><font color="#008000"> "SYMBOL"</font><font color="#0000FF">);</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "MARGINMASKFOLDERS1"</font><font color="#0000FF">, </font><font color="#008000"> "Yes"</font><font color="#0000FF">);
</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "MARKERDEFINE"</font><font color="#0000FF">,</font><font color="#008000"> "FOLDER=PLUS"</font><font color="#0000FF">);</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "MARKERDEFINE"</font><font color="#0000FF">,</font><font color="#008000"> "FOLDEROPEN=MINUS"</font><font color="#0000FF">);</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "MARKERDEFINE"</font><font color="#0000FF">,</font><font color="#008000"> "FOLDEREND=EMPTY"</font><font color="#0000FF">);</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "MARKERDEFINE"</font><font color="#0000FF">,</font><font color="#008000"> "FOLDERMIDTAIL=EMPTY"</font><font color="#0000FF">);</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "MARKERDEFINE"</font><font color="#0000FF">,</font><font color="#008000"> "FOLDEROPENMID=EMPTY"</font><font color="#0000FF">);</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "MARKERDEFINE"</font><font color="#0000FF">,</font><font color="#008000"> "FOLDERSUB=EMPTY"</font><font color="#0000FF">);</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "MARKERDEFINE"</font><font color="#0000FF">,</font><font color="#008000"> "FOLDERTAIL=EMPTY"</font><font color="#0000FF">);
</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "FOLDFLAGS"</font><font color="#0000FF">,</font><font color="#008000"> "LINEAFTER_CONTRACTED"</font><font color="#0000FF">);
</font>
<font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "MARGINSENSITIVE1"</font><font color="#0000FF">,</font><font color="#008000"> "YES"</font><font color="#0000FF">);</font>
</pre>
          </small>
          <br>
         </td>
        </tr>

        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
            General
         </td>
        </tr>
        <tr>
         <td>
          BORDER
         </td>
         <td>
            (creation only) Shows a border around the text. Default: "YES".
         </td>
        </tr>
        <tr>
         <td>
          CANFOCUS
         </td>
         <td>
            (creation only) (non inheritable) enables the focus traversal of the control. <br>
            In Windows the control will still get the focus when clicked. Default: YES.
         </td>
        </tr>
        <tr>
         <td>
          PROPAGATEFOCUS
         </td>
         <td>
            (non inheritable) enables the focus callback forwarding to the next native parent with FOCUS_CB defined. <br>
            Default: NO. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          CLIPBOARD
         </td>
         <td>
            (non inheritable) clear, cut, copy or paste the selection to or from the clipboard. <br>
            Values: "CLEAR", "CUT", "COPY", "PASTE". <br>
            Returns Yes or No, if data can be pasted from the clipboard.
         </td>
        </tr>
        <tr>
         <td>
          CURSOR
         </td>
         <td>
            (non inheritable) defines the cursor type. <br>
            Can be: "NORMAL" or "WAIT" (displays a wait cursor when the mouse is over or owned by the control).
         </td>
        </tr>
        <tr>
         <td>
          DROPFILESTARGET
         </td>
         <td>
            [Windows and GTK Only] (non inheritable) Enable or disable the drop of files. <br>
            Default: NO, but if DROPFILES_CB is defined when the element is mapped then it will be automatically enabled.
         </td>
        </tr>
        <tr>
         <td>
          KEYSUNICODE
         </td>
         <td>
            [Windows Only] (non inheritable) allow processing of Unicode typed characters. Default: NO. (since 3.9)
         </td>
        </tr>
        <tr>
         <td>
          OVERWRITE
         </td>
         <td>
            (non inheritable) turns the overwrite mode ON or OFF. <br>
            When enabled, each typed character replaces the character to the right of the text caret. <br>
            When disabled, characters are inserted at the caret.
         </td>
        </tr>
        <tr>
         <td>
          MOUSEDWELLTIME
         </td>
         <td>
            (non inheritable) time the mouse must sit still, in milliseconds, to generate a DWELL_CB callback. <br>
            If set to NULL, the default, no dwell events are generated. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          READONLY
         </td>
         <td>
            (non inheritable) Allows the user only to read the contents, without changing it. <br>
            Restricts the insertion using keyboard input and attributes. <br>
            Navigation keys are still available. Possible values: "YES" and "NO". Default: NO.
         </td>
        </tr>
        <tr>
         <td>
          SAVEPOINT
         </td>
         <td>
            (non inheritable, write-only) sets the current state of the document to saved (given value is ignored). <br>
            The SAVEPOINT_CB callback is called with status=0 if the document is modified, and called with status=1 if 
            the save point is reached with Undo/Redo. <br>
            After setting the SAVEPOINT, when editing is done the SAVEPOINT_CB callback is called with status=0. <br>
            When undo is performed back to the point were the saved state was set the callback is called again with status=1. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          MODIFIED
         </td>
         <td>
            (non inheritable, read-only) returns if the text has been modified since the last SAVEPOINT. Can return Yes or No. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          SIZE
         </td>
         <td>
            (non inheritable) Since the contents can be changed by the user, the Natural Size is not affected by the text contents. <br>
            Use VISIBLECOLUMNS and VISIBLELINES to control the Natural Size.
         </td>
        </tr>
        <tr>
         <td>
          USEPOPUP
         </td>
         <td>
            (non inheritable) allows to disable the default editing menu shown when the user clicks with the right button. Default: Yes.
         </td>
        </tr>
        <tr>
         <td>
          VISIBLECOLUMNS
         </td>
         <td>
            Defines the number of visible columns for the Natural Size, this means that will act also as minimum number of visible columns. <br>
            It uses a wider character size then the one used for the SIZE attribute so strings will fit better without the need of extra columns. <br>
            As for SIZE you can set to NULL after map to use it as an initial value. Default: 50.
         </td>
        </tr>
        <tr>
         <td>
          VISIBLELINES
         </td>
         <td>
            Defines the number of visible lines for the Natural Size, this means that will act also as minimum number of visible lines. <br>
            As for SIZE you can set to NULL after map to use it as an initial value. Default: 10.
         </td>
        </tr>
        <tr>
         <td>
          VISIBLELINESCOUNT
         </td>
         <td>
            (non inheritable, read-only) returns the number of actual visible lines.
         </td>
        </tr>
        <tr>
         <td>
          WORDWRAP
         </td>
         <td>
            (non inheritable) If enabled will force a word wrap of lines that are greater than the with of the control, and 
            the horizontal scrollbar will be removed. <br>
            Can be "WORD", "CHAR" or "NONE". Default: NONE.
         </td>
        </tr>
        <tr>
         <td>
          WORDWRAPVISUALFLAGS
         </td>
         <td>
            (non inheritable) enable the drawing of visual flags to indicate a line is wrapped. <br>
            Can be: MARGIN (at the line number margin), START (start of wrapped line), END (end of wrapped line) or NONE. Default: NONE.
         </td>
        </tr>
        <tr>
         <td>
         </td>
         <td>
          <b>Text Retrieval and Modification:</b>
         </td>
        </tr>
        <tr>
         <td>
          ADD
         </td>
         <td>
            (non inheritable, write-only) Inserts a text at the current position. <br>
            If VALUELEN is defined, the it is used instead of strlen. (since 3.27)
         </td>
        </tr>
        <tr>
         <td>
          APPEND
         </td>
         <td>
            (non inheritable, write-only) Inserts a text at the end of the text. <br>
            If APPENDNEWLINE=YES, an end of line character will be automatically inserted before the appended text (APPENDNEWLINE default is YES). <br>
            If VALUELEN is defined, the it is used instead of strlen (since 3.27).
         </td>
        </tr>
        <tr>
         <td>
          CHARid
         </td>
         <td>
            (non inheritable, read-only) returns the character at a given position, considering the "id" as the position.
         </td>
        </tr>
        <tr>
         <td>
          CLEARALL
         </td>
         <td>
            (non inheritable, write-only) deletes all the text (unless the document is read-only).
         </td>
        </tr>
        <tr>
         <td>
          COUNT
         </td>
         <td>
            (non inheritable, read-only) returns the number of characters in the text.
         </td>
        </tr>
        <tr>
         <td>
          DELETERANGE
         </td>
         <td>
            (non inheritable, write-only) Deletes a range of text in the document. <br>
            It uses a string format "pos,len" in order to indicate the start position and text length to delete.
         </td>
        </tr>
        <tr>
         <td>
          INSERTid
         </td>
         <td>
            (non inheritable, write-only) Inserts a text string at position "id" or at the current position if pos is -1 or omitted. <br>
            If the current position is after the insertion point then it is moved along with its surrounding text but no scrolling is performed. <br>
            Notice that the selected text is not used to position the inserted text.
         </td>
        </tr>
        <tr>
         <td>
          LINEid
         </td>
         <td>
            (non inheritable, read-only) returns the text of the line, considering the "id" as the line number. <br>
            It includes the end of line character if the line has one. Number lines starts at 0.
         </td>
        </tr>
        <tr>
         <td>
          LINECOUNT
         </td>
         <td>
            (non inheritable, read-only) returns the number of lines in the text.
         </td>
        </tr>
        <tr>
         <td>
          LINEVALUE
         </td>
         <td>
            (non inheritable, read-only) returns the text of the line where the caret is. <br>
            It does not include the end of line character.
         </td>
        </tr>
        <tr>
         <td>
          PREPEND
         </td>
         <td>
            (non inheritable, write-only) Inserts a text at the begin of the text. <br>
            If APPENDNEWLINE=YES, an end of line character will be automatically inserted after the prepended text if 
            the text is not empty (APPENDNEWLINE default is YES).
         </td>
        </tr>
        <tr>
         <td>
          VALUE
         </td>
         <td>
            (non inheritable) Text entered by the user. <br>
            The end of line character indicates a new line. <br>
            After the element is mapped and if there is no text will return the empty string "". <br>
            This replaces all the text in the document with the zero terminated text string you pass in.
         </td>
        </tr>
        <tr>
         <td>
         </td>
         <td>
          <b>Annotation:</b>
         </td>
        </tr>
        <tr>
         <td>
          ANNOTATIONTEXTid
         </td>
         <td>
            (non inheritable) defines and returns an annotation displayed underneath a specific line, considering the "id" as the line number. <br>
            An annotation may consist of multiple lines separated by '\n'.
         </td>
        </tr>
        <tr>
         <td>
          ANNOTATIONSTYLEid
         </td>
         <td>
            (non inheritable) sets and gets a particular style to the annotation, considering the "id" as the line number.
         </td>
        </tr>
        <tr>
         <td>
          ANNOTATIONSTYLEOFFSET
         </td>
         <td>
            (non inheritable) sets and gets a style offset, in order to separate standard text styles from annotation styles.
         </td>
        </tr>
        <tr>
         <td>
          ANNOTATIONVISIBLE
         </td>
         <td>
            (non inheritable) enable or disable annotations. <br>
            Can be "HIDDEN" (not displayed), "STANDARD" (displayed) or "BOXED" (displayed and surrounded by a box). Default HIDDEN.
         </td>
        </tr>
        <tr>
         <td>
          ANNOTATIONCLEARALL
         </td>
         <td>
            (non inheritable, write-only) deletes all annotations.
         </td>
        </tr>
        <tr>
         <td>
         </td>
         <td>
          <b>Auto-Completion (since 3.10):</b>
         </td>
        </tr>
        <tr>
         <td>
          AUTOCSHOWid
         </td>
         <td>
            (non inheritable, write only) causes a list of words to be displayed. <br>
            The words are separated by a space. "id" defines the number of characters of the word already entered by user.
         </td>
        </tr>
        <tr>
         <td>
          AUTOCCANCEL
         </td>
         <td>
            (non inheritable, write only) cancels any displayed auto-completion list. <br>
            When in auto-completion mode, the list should disappear when the user types a character that can not be part of the auto-completion.
         </td>
        </tr>
        <tr>
         <td>
          AUTOCACTIVE
         </td>
         <td>
            (non inheritable, read only) returns YES if there is an active auto-completion list and NO if there is not.
         </td>
        </tr>
        <tr>
         <td>
          AUTOCPOSSTART
         </td>
         <td>
            (non inheritable, read only) returns the current position when the list of words started to be shown.
         </td>
        </tr>
        <tr>
         <td>
          AUTOCCOMPLETE
         </td>
         <td>
            (non inheritable, write only) triggers auto-completion. This has the same effect as the tab key.
         </td>
        </tr>
        <tr>
         <td>
          AUTOCSELECT
         </td>
         <td>
            (non inheritable, write only) selects an item in the auto-completion list. <br>
            It searches in the list of words for the first that matches of value (comparisons are case sensitive). <br>
            If the item is not found, no item is selected.
         </td>
        </tr>
        <tr>
         <td>
          AUTOCSELECTEDINDEX
         </td>
         <td>
            (non inheritable, read only) retrieves the current selection index, set by AUTOCSELECT attribute.
         </td>
        </tr>
        <tr>
         <td>
          AUTOCDROPRESTOFWORD
         </td>
         <td>
            (non inheritable) when an item is selected, any word characters following the caret are first erased if this attribute is set YES. <br>
            The default is NO.
         </td>
        </tr>
        <tr>
         <td>
          AUTOCMAXHEIGHT
         </td>
         <td>
            (non inheritable) sets and gets the maximum number of rows that will be visible in an auto-completion list. <br>
            If there are more rows in the list, then a vertical scrollbar is shown. The default is 5.
         </td>
        </tr>
        <tr>
         <td>
          AUTOCMAXWIDTH
         </td>
         <td>
            (non inheritable) the maximum width of an auto-completion list expressed as the number of characters in 
            the longest item that will be totally visible. <br>
            The default is 0 (in this case, the list width is calculated to fit the item with the most characters).
         </td>
        </tr>
        <tr>
         <td>
         </td>
         <td>
          <b>Brace Highlighting:</b>
         </td>
        </tr>
        <tr>
         <td>
          BRACEHIGHLIGHT
         </td>
         <td>
            (non inheritable, write only) highlights the brace, defined by its initial and final positions (format: "pos1:pos2"). <br>
            Up to two characters can be highlighted in a 'brace highlighting style', which is defined as style number (See Style Definition, id = 34).
         </td>
        </tr>
        <tr>
         <td>
          BRACEBADLIGHT
         </td>
         <td>
            (non inheritable, write only) highlights the non matching brace, based on a position. <br>
            If there is no matching brace then the brace badlighting style (See Style Definition, id = 35) 
            can be used to show the brace that is unmatched. <br>
            Set -1 as position removes the highlight.
         </td>
        </tr>
        <tr>
         <td>
          BRACEMATCHid
         </td>
         <td>
            (non inheritable, read only) finds a corresponding matching brace given id, the position of one brace. <br>
            The brace characters handled are '(', ')', '[', ']', '{', '}', '&lt;', and '&gt;'. <br>
            If the character at position is not a brace character, or a matching brace cannot be found, the return value is -1.
         </td>
        </tr>
        <tr>
         <td>
         </td>
         <td>
          <b>Caret and Selection:</b>
         </td>
        </tr>
        <tr>
         <td>
          CARET
         </td>
         <td>
            (non inheritable) Position of the insertion point. <br>
            The first position, lin or col, is "0". <br>
            It uses a string format "lin,col" in order to indicate the caret position, where lin and col must be integer numbers.
            <br>
            <br>
            When lin is greater than the number of lines, the caret is placed at the last line. <br>
            When col is greater than the number of characters in the given line, the caret is placed after the last character of the line.
            <br>
            <br>
            If the caret is not visible the text is scrolled to make it visible.
         </td>
        </tr>
        <tr>
         <td>
          CARETPOS
         </td>
         <td>
            (non inheritable) Position of the insertion point using a zero based character unique index "pos". <br>
            Useful for indexing the VALUE string. <br>
            This removes any selection, sets the caret at pos and scrolls the view to make the caret visible, if necessary.
         </td>
        </tr>
        <tr>
         <td>
          CARETTOVIEW
         </td>
         <td>
            (non inheritable, write only) Moves the caret to the nearest visible line. Any selection is lost.
         </td>
        </tr>
        <tr>
         <td>
          CARETCOLOR
         </td>
         <td>
            (non inheritable) color of the caret. Values in RGB format ("r g b"). (since 3.17)
         </td>
        </tr>
        <tr>
         <td>
          CARETSTYLE
         </td>
         <td>
            (non inheritable) style of the caret. Can be LINE, BLOCK or INVISIBLE. Default: LINE. (since 3.17)
         </td>
        </tr>
        <tr>
         <td>
          CARETWIDTH
         </td>
         <td>
            (non inheritable) with of the caret line. Can be 0, 1, 2 or 3 pixels. Default: 1. <br>
            Works only when CARETSTYLE=LINE. A size of 0 will make the caret invisible also. (since 3.17)
         </td>
        </tr>
        <tr>
         <td>
          CARETLINEVISIBLE
         </td>
         <td>
            (non inheritable) Enable or disable caret line background color. Can be Yes or No. Default: No. (since 3.21)
         </td>
        </tr>
        <tr>
         <td>
          CARETLINEBACKCOLOR
         </td>
         <td>
            (non inheritable) Color of caret line background. Values in RGB format ("r g b"). (since 3.21)
         </td>
        </tr>
        <tr>
         <td>
          CARETLINEBACKALPHA
         </td>
         <td>
            (non inheritable) Set translucency used for line containing the caret. <br>
            Translucency ranges from 0 for completely transparent to 255 for opaque with 256 being opaque and 
            not using translucent drawing code which may be slower. (since 3.21)
         </td>
        </tr>
        <tr>
         <td>
          CARETXPOLICY<br>
          CARETYPOLICY
         </td>
         <td>
            (non inheritable) These set the caret policy. <br>
            The value can be a combination of "SLOP", "STRICT", "JUMPS" and "EVEN" using "|" as separator. <br>
            When SLOP is used the attribute CARETSLOP defines an unwanted zone for the caret. <br>
            This zone is defined as a number of pixels near the vertical margins, and as a number of lines 
            near the horizontal margins. (since 3.26)
         </td>
        </tr>
        <tr>
         <td>
          FIRSTVISIBLELINE
         </td>
         <td>
            (non inheritable) the line number of the first visible line. (since 3.18)
         </td>
        </tr>
        <tr>
         <td>
          SELECTEDTEXT
         </td>
         <td>
            (non inheritable) Selection text. Returns NULL if there is no selection. <br>
            When changed replaces the current selection. <br>
            Similar to INSERT, but does nothing if there is no selection.
         </td>
        </tr>
        <tr>
         <td>
          SELECTION
         </td>
         <td>
            (non inheritable) Selection interval. Returns NULL if there is no selection. <br>
            The first position, lin or col, is "0". <br>
            The accepted format is represented by the string "lin1,col1:lin2,col2", where lin1, col1, lin2 and col2 are 
            integer numbers corresponding to the selection&rsquo;s interval. <br>
            col2 correspond to the character after the last selected character. <br>
            The values ALL and NONE are also accepted.
         </td>
        </tr>
        <tr>
         <td>
          SELECTIONFGCOLOR
         </td>
         <td>
            (non inheritable) foreground color of the selection. Values in RGB format ("r g b"). Default is system dependent. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          SELECTIONBGCOLOR
         </td>
         <td>
            (non inheritable) background color of the selection. Values in RGB format ("r g b"). Default is system dependent. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          SELECTIONALPHA
         </td>
         <td>
            (non inheritable) The selection can be drawn translucently in the selection background color by setting an alpha value. <br>
            Translucency ranges from 0 for completely transparent to 255 for opaque with 256 being opaque and not using translucent drawing. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          SELECTIONPOS
         </td>
         <td>
            (non inheritable) Same as SELECTION but using a zero based character index "pos1:pos2". <br>
            Useful for indexing the VALUE string. The values ALL and NONE are also accepted.
         </td>
        </tr>
        <tr>
         <td>
          WORDPOSid
         </td>
         <td>
            (non inheritable, read-only) returns the start and end of a word in the text around the given position (in id). <br>
            It uses the format "start:end". Returns NULL if no words were found. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          WORDRANGE
         </td>
         <td>
            (non inheritable) interval for ISWORD. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          ISWORD
         </td>
         <td>
            (non inheritable, read-only) check if the interval defined by WORDRANGE is a word. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
         </td>
         <td>
          <b>Folding:</b>
         </td>
        </tr>
        <tr>
         <td>
          FOLDFLAGS
         </td>
         <td>
            (non inheritable, write-only) determines how folding lines are drawn. <br>
            Can be: "LINEBEFORE_EXPANDED", "LINEBEFORE_CONTRACTED", "LINEAFTER_EXPANDED" or "LINEAFTER_CONTRACTED " (default).
         </td>
        </tr>
        <tr>
         <td>
          FOLDLINEid
         </td>
         <td>
            (non inheritable, write-only) operates over a single line. Can be CONTRACT, EXPAND, or TOGGLE. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          FOLDCHILDRENid
         </td>
         <td>
            (non inheritable, write-only) operates over a single line and all its children. <br>
            Can be CONTRACT, EXPAND, or TOGGLE. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          FOLDALL
         </td>
         <td>
            (non inheritable, write-only) operates over all levels. Can be CONTRACT, EXPAND, or TOGGLE. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          FOLDEXPANDEDid
         </td>
         <td>
            (non inheritable) the expanded state of a single line. <br>
            It has no effect on the visible state of the line or any lines that depend on it. <br>
            It does change the markers in the folding margin. <br>
            If you just want to toggle the fold state of one line and handle all the lines that are dependent on it, 
            it is much easier to use TOGGLEFOLD. <br>
            It can be used to process many folds without updating the display until you had finished, 
            but you have to manually hide or show lines, and force a COLORISE. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          FOLDLEVELid
         </td>
         <td>
            (non inheritable) the fold level number of a line (given in id). <br>
            If you use a Lexer, it is not recommend to set the fold level (this is far better handled by the Lexer). <br>
            By contrast, the fold level is useful to decide how to handle user folding requests. Fold level starts at 0.
         </td>
        </tr>
        <tr>
         <td>
          FOLDLEVELWHITEid
         </td>
         <td>
            (non inheritable) the fold level white flag state of a line (indicates that the line is blank). <br>
            Can be: "Yes" or "No". (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          FOLDLEVELHEADERid
         </td>
         <td>
            (non inheritable) the fold level header flag state of a line (indicates that the line is a header/fold point). <br>
            Can be: "Yes" or "No". (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          FOLDPARENTid
         </td>
         <td>
            (non inheritable, read-only) returns the line number of the first line before the given line (in id) that 
            is marked as a fold point with FOLDLEVELHEADER=Yes and has a fold level less than the given line. <br>
            If no line is found, or if the header flags and fold levels are inconsistent, the return value is -1. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          FOLDTOGGLE
         </td>
         <td>
            (non inheritable, write-only) Determines if the fold point (line number) may be either expanded, 
            displaying all its child lines, or contracted, hiding all the child lines.
         </td>
        </tr>
        <tr>
         <td>
          ENSUREVISIBLEid
         </td>
         <td>
            (non inheritable, write-only) ensure that the given line (in id) is visible by expanding folded parents. <br>
            Value is can be NULL or "ENFORCEPOLICY" to apply vertical caret policy. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          SHOWLINES
         </td>
         <td>
            (non inheritable, write-only) make the given lines interval visible. <br>
            Value is in the format "start:end", start default is 0, end default is -1 (last line). (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          HIDELINES
         </td>
         <td>
            (non inheritable, write-only) make the given lines interval hidden. <br>
            Value is in the format "start:end", start default is 0, end default is -1 (last line). (since 3.23) 
         </td>
        </tr>
        <tr>
         <td>
          <b>Indicators:</b>
         </td>
         <td>
            Indicators are used to display additional information over the top of styling. 
         </td>
        </tr>
        <tr>
         <td>
          INDICATORCURRENT
         </td>
         <td>
            (non inheritable) sets the indicator number that will affect INDICATORCLEARRANGE and INDICATORFILLRANGE. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          INDICATORVALUE
         </td>
         <td>
            (non inheritable) sets the indicator value that will affect INDICATORFILLRANGE. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          INDICATORCLEARRANGE
         </td>
         <td>
            (non inheritable, write-only) clears the current indicator in the range given in the format "start:length" ("%d:%d" in C). (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          INDICATORFILLRANGE
         </td>
         <td>
            (non inheritable, write-only) fills the current indicator with the current value in the range given in 
            the format "start:length" ("%d:%d" in C). (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          INDICATORSTYLEid
         </td>
         <td>
            (non inheritable) the style used to draw the given indicator (in id). <br>
            Can be: PLAIN, SQUIGGLE, TT, DIAGONAL, STRIKE, HIDDEN, BOX, ROUNDBOX, STRAIGHTBOX, FULLBOX, DASH, DOTS, SQUIGGLELOW, DOTBOX, 
            SQUIGGLEPIXMAP, COMPOSITIONTHICK, COMPOSITIONTHIN, TEXTFORE. <br>
            Default for indicator 0 is SQUIGGLE, default for indicator 1 is TT, default for indicator 2 is PLAIN. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          INDICATORFGCOLORid
         </td>
         <td>
            (non inheritable) the color used to draw the given indicator (in id). Value in RGB format ("r g b"). <br>
            Default for indicator 0 is "0 127 0", default for indicator 1 is "255 0 0", default for indicator 2 is "0 0 255". (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          INDICATOROUTLINEALPHAid
         </td>
         <td>
            (non inheritable) sets and retrieves the alpha transparency used to draw the outline color of the given indicator (in id). <br>
            The alpha value can range from 0 (completely transparent) to 255 (no transparency). (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          INDICATORALPHAid
         </td>
         <td>
            (non inheritable) sets and retrieves the alpha transparency used to draw the fill color of the given indicator (in id). <br>
            The alpha value can range from 0 (completely transparent) to 255 (no transparency). (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          <b>Lexer:</b>
         </td>
         <td>
         </td>
        </tr>
        <tr>
         <td>
          COLORISE
         </td>
         <td>
            (non inheritable, write-only) requests the lexer to style the document in an character interval 
            given in value (format "start:end", start default is 0, end default is -1 (last pos)). (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          KEYWORDid
         </td>
         <td>
            (non inheritable, write-only) keyword list used by the current Lexer. <br>
            Until 9 lists of keywords can set up using id from 0 to 8. <br>
            The value is a list of keywords separated by spaces, tabs, "\n" or "\r" or any combination of these.
         </td>
        </tr>
        <tr>
         <td>
          KEYWORDSETS
         </td>
         <td>
            (non inheritable, read only) returns a description of all of the keyword sets separated by "\n".
         </td>
        </tr>
        <tr>
         <td>
          LEXERLANGUAGE
         </td>
         <td>
            (non inheritable) associate the Lexer language name. It is case sensitive. <br>
            Default: not defined. Set to NULL to clear the association. <br>
            Can be: any name supported by Scintilla. <br>
            For instance: asm, bash, freebasic, cmake, COBOL, cpp (C++), css, d, diff, eiffel, fortran, hypertext (HTML), 
            xml, lisp, lua (Lua), makefile, matlab, mysql, nsis, pascal, perl, python, ruby, smalltalk, sql, tcl, tex, 
            vb (Visual Basic), and many others.
         </td>
        </tr>
        <tr>
         <td>
          LOADLEXERLIBRARY
         </td>
         <td>
            (non inheritable, write-only) Load a Lexer implemented in a dynamic library given the library file name. <br>
            This is a .so file on GTK+/Linux or a .DLL file on Windows. (since 3.11)
         </td>
        </tr>
        <tr>
         <td>
          PROPERTY
         </td>
         <td>
            (non inheritable) sets and gets Lexer properties using "name=value" string pairs, where 
            name is case sensitive and value is the associated string. <br>
            There is no limit to the number of keyword pairs you can set, other than available memory. <br>
            To retrieve a property first set the PROPERTYNAME attribute, the PROPERTY attribute will return its value.
         </td>
        </tr>
        <tr>
         <td>
          PROPERTYNAMES
         </td>
         <td>
            (non inheritable, read only) returns a list of property names separated by "\n". <br>
            If the Lexer does not support this information then an empty string is returned. 
         </td>
        </tr>
        <tr>
         <td>
          <b>Line Endings:</b>
         </td>
         <td>
         </td>
        </tr>
        <tr>
         <td>
          EOL
         </td>
         <td>
            (non inheritable) Returns the current end of line character(s). Can be "\r", "\r\n" or "\n". (since 3.24)
         </td>
        </tr>
        <tr>
         <td>
          EOLMODE
         </td>
         <td>
            (non inheritable) End of line mode. Can be CR ("\r"), CRLF ("\r\n") or LF ("\n"). Default: LF. (since 3.24)
         </td>
        </tr>
        <tr>
         <td>
          EOLVISIBLE
         </td>
         <td>
            (non inheritable) End of line visibility. Default: No. (since 3.22)
         </td>
        </tr>
        <tr>
         <td>
          FIXEOL
         </td>
         <td>
            (non inheritable, write only) Fix the line ends to use only the given mde. <br>
            Can be CR ("\r"), CRLF ("\r\n") or LF ("\n"). (since 3.22, options other than LF since 3.24)
         </td>
        </tr>
        <tr>
         <td>
          <b>Margins:</b>
         </td>
         <td>
            The margins id are numbered 0 to 4. <br>
            By default, Scintilla margin 0 is set to display line numbers, <br>
            margin 1 is set to display non-folding symbols, and <br>
            margin 2 is set to display folding symbols. <br>
            However, you can set the margins to be whatever you wish using MARGINTYPEid. <br>
            All margins are hidden by default, i.e. margin with is set to 0.
         </td>
        </tr>
        <tr>
         <td>
          MARGINMASKFOLDERSid
         </td>
         <td>
            (non inheritable) defines if a margin is folding or non-folding. Can be: Yes or No.
         </td>
        </tr>
        <tr>
         <td>
          MARGINSENSITIVEid
         </td>
         <td>
            (non inheritable) determines if a margin is sensitive or not. <br>
            Margins that are not sensitive act as selection margins which make it easy to select ranges of lines. <br>
            By default, all margins are insensitive. Can be: YES or NO.
         </td>
        </tr>
        <tr>
         <td>
          MARGINTYPEid
         </td>
         <td>
            (non inheritable) set and get the type of a margin. <br>
            Each margin can be set to display only symbols, line numbers, or text. <br>
            You can use the predefined values "SYMBOL", "NUMBER", "TEXT", "RTEXT" (right justify text), 
            "BACKGROUND" or "FOREGROUND" (the latter two used for symbol margins that set their background or 
            foreground using the style default colors).
         </td>
        </tr>
        <tr>
         <td>
          MARGINWIDTHid
         </td>
         <td>
            (non inheritable) width of a margin in pixels (Default value: 0). A margin with width=0 is invisible.
         </td>
        </tr>
        <tr>
         <td>
          MARGINMASKid
         </td>
         <td>
            (non inheritable) defines which markers can be used for symbols in the given margin (id). <br>
            The value is a 32 bit number with the selected markers. <br>
            A single margin can display several types of markers. See Markers. (since 3.22)
         </td>
        </tr>
        <tr>
         <td>
          MARGINLEFT
         </td>
         <td>
            (non inheritable) size of the blank margin on the left side. Default: 1.
         </td>
        </tr>
        <tr>
         <td>
          MARGINRIGHT
         </td>
         <td>
            (non inheritable) size of the blank margin on the right side. Default: 1.
         </td>
        </tr>
        <tr>
         <td>
          MARGINTEXTid
         </td>
         <td>
            (non inheritable) controls the text of each line of a text margin. id is the line number.
         </td>
        </tr>
        <tr>
         <td>
          MARGINTEXTSTYLEid
         </td>
         <td>
            (non inheritable) controls the style of the text of each line of a text margin. id is the line number.
         </td>
        </tr>
        <tr>
         <td>
          MARGINTEXTCLEARALL
         </td>
         <td>
            (non inheritable, write-only) clear all text and styles of a text margin.
         </td>
        </tr>
        <tr>
         <td>
          MARGINCURSORid
         </td>
         <td>
            (non inheritable) set and get the arrow cursor normally shown over margins. Can be: "REVERSEARROW" (default) or "ARROW".
         </td>
        </tr>
        <tr>
         <td>
          FOLDMARGINCOLOR
         </td>
         <td>
            (non inheritable, write-only) changes the color of the fold margin. <br>
            Values in RGB format ("r g b"). If set to NULL reset to internal default values. (since 3.22)
         </td>
        </tr>
        <tr>
         <td>
          FOLDMARGINHICOLOR
         </td>
         <td>
            (non inheritable, write-only) changes the color of the fold margin highlight. <br>
            Values in RGB format ("r g b"). If set to NULL reset to internal default values. (since 3.22)
         </td>
        </tr>
        <tr>
         <td>
          <b>Markers:</b>
         </td>
         <td>
            Markers are numbers from 0 to 31. They can be combined in a 32 bit mask with one or more markers.
         </td>
        </tr>
        <tr>
         <td>
          MARKERSYMBOLid
         </td>
         <td>
            (non inheritable) associates a marker number in the range 0 to 31 (id) with one of the marker symbols or an ASCII character.
            <br>
            <br>
            Marker symbols: 0="CIRCLE", 1="ROUNDRECT", 2="ARROW", 3="SMALLRECT", 4="SHORTARROW", 5="EMPTY", 6="ARROWDOWN", 
                            7="MINUS", 8="PLUS", 9="VLINE", 10="LCORNER", 11="TCORNER", 12="BOXPLUS", 13="BOXPLUSCONNECTED", 
                            14="BOXMINUS", 15="BOXMINUSCONNECTED", 16="LCORNERCURVE", 17="TCORNERCURVE", 18="CIRCLEPLUS", 
                            19="CIRCLEPLUSCONNECTED", 20="CIRCLEMINUS", 21="CIRCLEMINUSCONNECTED", 22="BACKGROUND" (line background color), 
                            23="DOTDOTDOT", 24="ARROWS", 25=(unused), 26="FULLRECT" (margin background color), 27="LEFTRECT",  28=(unused), 
                            29="UNDERLINE" (underline across the line), 30="RGBAIMAGE", 31="BOOKMARK"  and 
                            "CHARACTER+c" (where c is an ASCii character code). The numbers are used only in marker masks.
         </td>
        </tr>
        <tr>
         <td>
          MARKERDEFINE
         </td>
         <td>
            (non inheritable, write-only) Defines a marker using its number and its symbol in the format: "number=symbol".
            <br>
            <br>
            Marker numbers: can be a number in the range 0 to 31, or the pre-defined names: 
            "FOLDEREND", "FOLDEROPENMID", "FOLDERMIDTAIL", "FOLDERSUB", "FOLDER" and "FOLDEROPEN".<br>
            Marker symbols: the same values used in MARKERSYMBOL.
         </td>
        </tr>
        <tr>
         <td>
          MARKERFGCOLORid
         </td>
         <td>
            (non inheritable, write only) defines the foreground color of a marker number (id). Values in RGB format ("r g b").
         </td>
        </tr>
        <tr>
         <td>
          MARKERBGCOLORid
         </td>
         <td>
            (non inheritable, write only) defines the background color of a marker number (id). Values in RGB format ("r g b").
         </td>
        </tr>
        <tr>
         <td>
          MARKERBGCOLORSELid
         </td>
         <td>
            (non inheritable, write only) defines the highlight background color of a marker number (id) 
            when its folding block is selected. Values in RGB format ("r g b").
         </td>
        </tr>
        <tr>
         <td>
          MARKERALPHAid
         </td>
         <td>
            (non inheritable, write only) defines the alpha value of a marker number (id). <br>
            Markers may be drawn translucently when there are no margins.
         </td>
        </tr>
        <tr>
         <td>
          MARKERRGBAIMAGEid
         </td>
         <td>
            (non inheritable, write only) defines the image name to be used on a marker number. <br>
            Use IupSetHandle or IupSetAttributeHandle to associate an image to a name. See also IupImage. <br>
            It must be an image created with the IupImageRGBA constructor, it can not be a image loaded from stock or resources.
         </td>
        </tr>
        <tr>
         <td>
          MARKERRGBAIMAGESCALE
         </td>
         <td>
            (non inheritable, write only) defines the image scale factor, in percent (1-100).
         </td>
        </tr>
        <tr>
         <td>
          MARKERHIGHLIGHT
         </td>
         <td>
            (non inheritable) enable or disable the the highlight folding block when it is selected. <br>
            (i.e. block that contains the caret). Can be Yes or No. Default: No.
         </td>
        </tr>
        <tr>
         <td>
          MARKERADDid
         </td>
         <td>
            (non inheritable, write-only) adds marker number to a line (id). <br>
            Internally, sets the marker handle number (LASTMARKERADDHANDLE attribute) that identifies the added 
            marker (or -1 for invalid line and out of memory), which may be useful to find where a marker is 
            after moving or combining lines.
         </td>
        </tr>
        <tr>
         <td>
          MARKERGETid
         </td>
         <td>
            (non inheritable, read-only) returns a marker mask with the markers that are present on the line (id).
         </td>
        </tr>
        <tr>
         <td>
          MARKERDELETEid
         </td>
         <td>
            (non inheritable, write-only) deletes marker number given a line number (id). <br>
            If marker number is -1, all markers are deleted from the line.
         </td>
        </tr>
        <tr>
         <td>
          MARKERDELETEALL
         </td>
         <td>
            (non inheritable, write-only) removes the marker from all lines given its number (0-31). <br>
            If marker number is -1, it deletes all markers from all lines.
         </td>
        </tr>
        <tr>
         <td>
          MARKERNEXTid
         </td>
         <td>
            (non inheritable, write-only) searches for a given marker mask, starting at line number (id) and 
            continuing forwards to the end of the file. Internally, sets the the line number of the first 
            line that contains the markers in the mask (LASTMARKERFOUND attribute) or -1, if no marker is found.
         </td>
        </tr>
        <tr>
         <td>
          MARKERPREVIOUSid
         </td>
         <td>
            (non inheritable, write-only) searches for a given marker mask, starting at line number (id) and 
            continuing backwards to the start of the file. Internally, sets the the line number of the first 
            line that contains the markers (LASTMARKERFOUND attribute) or -1, if no marker is found.
         </td>
        </tr>
        <tr>
         <td>
          MARKERLINEFROMHANDLEid
         </td>
         <td>
            (non inheritable, read-only) searches for a marker given its handle (id) created in 
            MARKERADDid (use the LASTMARKERADDHANDLE attribute to obtain its value) and returns the 
            line number of the first line that contains the marker or -1, if no marker is found.
         </td>
        </tr>
        <tr>
         <td>
          MARKERDELETEHANDLE
         </td>
         <td>
            (non inheritable, write-only) searches for a marker given its handle and deletes the marker if it is found.
         </td>
        </tr>
        <tr>
         <td>
          LASTMARKERADDHANDLE
         </td>
         <td>
            (non inheritable, read-only) returns the last marker handle created by the MARKERADDid attribute.
         </td>
        </tr>
        <tr>
         <td>
          LASTMARKERFOUND
         </td>
         <td>
            (non inheritable, read-only) returns the last line number that contains a marker found by 
            the MARKERNEXTid, MARKERPREVIOUSid or MARKERLINEFROMHANDLE attributes.
         </td>
        </tr>
        <tr>
         <td>
          <b>Printing:</b>
         </td>
         <td>
            (since 2.23)
         </td>
        </tr>
        <tr>
         <td>
          PRINT
         </td>
         <td>
            Prints the text. Use the following attributes to configure the printed document. <br>
            Value is the job title. By default will print all text.
         </td>
        </tr>
        <tr>
         <td>
          PRINTDIALOG
         </td>
         <td>
            shows the system dialog before printing. Can be YES or NO. Default: YES. <br>
            If there is a selection the user can print only the selected text.
         </td>
        </tr>
        <tr>
         <td>
          PRINTMARGINLEFT
         </td>
         <td>
            left margin.
         </td>
        </tr>
        <tr>
         <td>
          PRINTMARGINTOP
         </td>
         <td>
            top margin.
         </td>
        </tr>
        <tr>
         <td>
          PRINTMARGINRIGHT
         </td>
         <td>
            right margin.
         </td>
        </tr>
        <tr>
         <td>
          PRINTMARGINBOTTOM
         </td>
         <td>
            bottom margin.
         </td>
        </tr>
        <tr>
         <td>
          PRINTMARGINUNITS
         </td>
         <td>
            units used in print margin attributes. Can be: INCH, CM or PIXELS. Default: INCH.
         </td>
        </tr>
        <tr>
         <td>
          PRINTWORDWRAP
         </td>
         <td>
            controls how long lines that don&rsquo;t fit in the page are processed. <br>
            Can be: NONE (lines are truncated) or WORD (lines are break between words). Default: WORD. <br>
            Notice that CHAR wrap mode is not supported when printing.
         </td>
        </tr>
        <tr>
         <td>
          PRINTCOLOR
         </td>
         <td>
            controls how colors are printed. <br>
            Can be: NORMAL (print using the current screen colors), <br>
            INVERTLIGHT (inverts the light value of all colors and printing on a white background), <br>
            BLACKONWHITE (print all text as black on a white background), <br>
            COLORONWHITE (prints all text in its own color on a white background), and <br>
            COLORONWHITEDEFAULTBG (everything prints in its own color on a white background except that 
            line numbers use their own background color). <br>
            Default: NORMAL.
         </td>
        </tr>
        <tr>
         <td>
          PRINTMAGNIFICATION
         </td>
         <td>
            lets you to print at a different size than the screen font. <br>
            It is the number of points to add to the size of each screen font. <br>
            A value of -3 or -4 gives reasonably small print.
         </td>
        </tr>
        <tr>
         <td>
          <b>Scrolling:</b>
         </td>
         <td>
         </td>
        </tr>
        <tr>
         <td>
          SCROLLBAR
         </td>
         <td>
            (creation only) Associates an automatic horizontal and/or vertical scrollbar. <br>
            Can be: "VERTICAL", "HORIZONTAL", "YES" (both) or "NO" (none). Default: "YES". <br>
            For all systems, when SCROLLBAR is NO, the natural size will always include its size even if the native system hides the scrollbar.
         </td>
        </tr>
        <tr>
         <td>
          SCROLLBY
         </td>
         <td>
            (non inheritable, write only) Scroll the text by the given offsets in the format "lin,col". <br>
            Positive lin values increase the line number at the top of the screen (i.e. they move the text upwards). <br>
            Positive col values increase the column at the left edge of the view (i.e. they move the text leftwards). (since 3.17)
         </td>
        </tr>
        <tr>
         <td>
          SCROLLTOCARET
         </td>
         <td>
            (non inheritable, write only) Scroll the text to make the caret position visible.
         </td>
        </tr>
        <tr>
         <td>
          SCROLLWIDTH
         </td>
         <td>
            (non inheritable) controls the document width in pixels. Default: 2000.
         </td>
        </tr>
        <tr>
         <td>
          SCROLLWIDTHTRACKING
         </td>
         <td>
            (non inheritable) scroll width is adjusted to ensure that all of the lines currently displayed can 
            be completely scrolled. This mode never adjusts the scroll width to be narrower. (since 3.30)
         </td>
        </tr>
        <tr>
         <td>
          <b>Search and Replace:</b>
         </td>
         <td>
            (since 3.10)
         </td>
        </tr>
        <tr>
         <td>
          SEARCHINTARGET
         </td>
         <td>
            (non inheritable, write only) This searches for the first occurrence of a text string in the target 
            defined by TARGETSTART and TARGETEND. If the search succeeds, the target is set to the found text.
         </td>
        </tr>
        <tr>
         <td>
          SEARCHFLAGS
         </td>
         <td>
            (non inheritable) sets and gets the search flags used in SEARCHINTARGET attribute. <br>
            Possible values: MATCHCASE, WHOLEWORD, WORDSTART, REGEXP and POSIX. <br>
            The flag options are combined using "|" as separators. Use NULL to reset all flags.
         </td>
        </tr>
        <tr>
         <td>
          TARGETSTART
         </td>
         <td>
            (non inheritable) sets and gets the start of target. <br>
            When searching in non-regular expression mode, you can set TARGETSTART greater than TARGETEND to find the 
            last matching text in the target rather than the first matching text. <br>
            The first position of text is 0. If set to NULL, 0 will be used (since 3.23).
         </td>
        </tr>
        <tr>
         <td>
          TARGETEND
         </td>
         <td>
            (non inheritable) sets and gets the end of target. If set to -1 or NULL, target end will be the last position of text (since 3.23).
         </td>
        </tr>
        <tr>
         <td>
          TARGETFROMSELECTION
         </td>
         <td>
            (non inheritable, write only) set the target start and end from current position of the selection.
         </td>
        </tr>
        <tr>
         <td>
          TARGETWHOLEDOCUMENT
         </td>
         <td>
            (non inheritable, write only) Set the target start to the start of the document and target end to 
            the end of the document. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          REPLACETARGET
         </td>
         <td>
            (non inheritable, write only) replaces the target text. <br>
            After replacement, the target range refers to the replacement text.
         </td>
        </tr>
        <tr>
         <td>
          <b>Style Definition:</b>
         </td>
         <td>
            (See Style Definition)
         </td>
        </tr>
        <tr>
         <td>
          BGCOLOR
         </td>
         <td>
            Background color of the text. Default: the global attribute TXTBGCOLOR. <br>
            If changed it will affect the background color of all styles (since 3.23).
         </td>
        </tr>
        <tr>
         <td>
          FGCOLOR
         </td>
         <td>
            Text color. Default: the global attribute TXTFGCOLOR. <br>
            If changed it will affect the foreground color of all styles (since 3.23).
         </td>
        </tr>
        <tr>
         <td>
          FONT
         </td>
         <td>
            the text font. Default: the global attribute DEFAULTFONT. <br>
            If changed it will affect all the font attributes of all styles (since 3.23).
         </td>
        </tr>
        <tr>
         <td>
          STYLEBGCOLORid
         </td>
         <td>
            (non inheritable) background color for a style (See Style Definition). Values in RGB format ("r g b").
         </td>
        </tr>
        <tr>
         <td>
          STYLEBOLDid
         </td>
         <td>
            (non inheritable) the boldness of a font (See Style Definition).
         </td>
        </tr>
        <tr>
         <td>
          STYLECASEid
         </td>
         <td>
            (non inheritable) determines how text is displayed (See Style Definition). <br>
            Values: LOWERCASE, UPPERCASE or MIXED (default).
         </td>
        </tr>
        <tr>
         <td>
          STYLECHARSETid
         </td>
         <td>
            (non inheritable) sets and gets a style to use a different character set than the default (See Style Definition). <br>
            Can be ANSI (default), EASTEUROPE, RUSSIAN, GB2312, HANGUL or SHIFTJIS.
         </td>
        </tr>
        <tr>
         <td>
          STYLECLEARALL
         </td>
         <td>
            (non inheritable) sets all styles to have the same attributes as default global style (id = 32) (See Style Definition).
         </td>
        </tr>
        <tr>
         <td>
          STYLEEOLFILLEDid
         </td>
         <td>
            (non inheritable) If the last character in the line has a style with this attribute set, the remainder 
            of the line up to the right edge of the window is filled with the background color set for the last 
            character (See Style Definition). Can be YES (italic) or NO.
         </td>
        </tr>
        <tr>
         <td>
          STYLEFGCOLORid
         </td>
         <td>
            (non inheritable) foreground color for a style (See Style Definition). Values in RGB format ("r g b").
         </td>
        </tr>
        <tr>
         <td>
          STYLEFONTid
         </td>
         <td>
            (non inheritable) sets and gets the font name (See Style Definition). <br>
            Scintilla caches fonts by their names, but the cache is case sensitive.
         </td>
        </tr>
        <tr>
         <td>
          STYLEFONTSIZEid
         </td>
         <td>
            (non inheritable) sets and gets the font size (See Style Definition), using a integer number of points.
         </td>
        </tr>
        <tr>
         <td>
          STYLEFONTSIZEFRACid
         </td>
         <td>
            (non inheritable) sets and gets the font size (See Style Definition), using a fractional point size in hundredths of a point. <br>
            For example, a text size of 9.4 points is set with value = 940.
         </td>
        </tr>
        <tr>
         <td>
          STYLEHOTSPOTid
         </td>
         <td>
            (non inheritable) used to mark ranges of text that can detect mouse clicks (See Style Definition). <br>
            The cursor changes to a hand over hotspots, and the foreground, and background colors may change and 
            an underline appear to indicate that these areas are sensitive to clicking. <br>
            This may be used to allow hyperlinks to other documents.
         </td>
        </tr>
        <tr>
         <td>
          STYLEITALICid
         </td>
         <td>
            (non inheritable) the italic style of a font (See Style Definition). Can be YES (italic) or NO.
         </td>
        </tr>
        <tr>
         <td>
          STYLERESET
         </td>
         <td>
            (non inheritable, write-only) Resets to the initial Scintilla style default (See Style Definition).
         </td>
        </tr>
        <tr>
         <td>
          STYLEUNDERLINEid
         </td>
         <td>
            (non inheritable) determines if the underline is drawn, using a foreground color (See Style Definition). <br>
            Can be YES (underline) or NO.
         </td>
        </tr>
        <tr>
         <td>
          STYLEVISIBLEid
         </td>
         <td>
            (non inheritable) determines if the text is visible (YES) or hidden (NO) (See Style Definition).
         </td>
        </tr>
        <tr>
         <td>
          STYLEWEIGHTid
         </td>
         <td>
            (non inheritable) the weight of a font (See Style Definition). <br>
            Predefined values: NORMAL, SEMIBOLD and BOLD. <br>
            The weight can also be a number between 1 and 999 with 1 being very light and 999 very heavy.
         </td>
        </tr>
        <tr>
         <td>
          <b>Styling:</b>
         </td>
         <td>
         </td>
        </tr>
        <tr>
         <td>
          CLEARDOCUMENTSTYLE
         </td>
         <td>
            (non inheritable, write-only) clear all styling information and reset the folding state.
         </td>
        </tr>
        <tr>
         <td>
          STARTSTYLING
         </td>
         <td>
            (non inheritable, write only) prepares for styling by setting the styling position.
         </td>
        </tr>
        <tr>
         <td>
          STYLINGid
         </td>
         <td>
            (non inheritable, write only) sets the style of given length characters starting at the styling position and 
            then increases the styling position by length. id is the style.
         </td>
        </tr>
        <tr>
         <td>
          <b>Tabs and Indentation Guides:</b>
         </td>
         <td>
         </td>
        </tr>
        <tr>
         <td>
          TABSIZE
         </td>
         <td>
            (non inheritable) Controls the number of characters for a tab stop. Default: 8.
         </td>
        </tr>
        <tr>
         <td>
          INDENTATIONGUIDES
         </td>
         <td>
            (non inheritable) dotted vertical lines that appear within indentation white space every indent size columns. <br>
            Can be: NONE, REAL, LOOKFORWARD, LOOKBOTH. Default: NONE.
         </td>
        </tr>
        <tr>
         <td>
          HIGHLIGHTGUIDE
         </td>
         <td>
            (non inheritable) Highlights the indentation guide of a given column. <br>
            When brace highlighting occurs, the indentation guide corresponding to the braces may be highlighted with 
            the brace highlighting style (See Style Definition, id = 34). Set column to 0 to cancel this highlight.
         </td>
        </tr>
        <tr>
         <td>
          USETABS
         </td>
         <td>
            (non inheritable) Use tabs also for indentation or only spaces. Can be Yes or No. Default: Yes.
         </td>
        </tr>
        <tr>
         <td>
          <b>Undo and Redo:</b>
         </td>
         <td>
         </td>
        </tr>
        <tr>
         <td>
          REDO
         </td>
         <td>
            (non inheritable) redo the last operation if set to Yes, redo all operations if set to ALL, clears the undo information otherwise. <br>
            Returns Yes or No if redo can be performed.
         </td>
        </tr>
        <tr>
         <td>
          UNDO
         </td>
         <td>
            (non inheritable) undo the last operation if set to Yes, undo all operations if set to ALL, clears the undo information otherwise. <br>
            Returns Yes or No if undo can be performed.
         </td>
        </tr>
        <tr>
         <td>
          UNDOCOLLECT
         </td>
         <td>
            (non inheritable) enable or disable the undo collect of information. Can be Yes or No. Default: Yes.
         </td>
        </tr>
        <tr>
         <td>
          UNDOACTION
         </td>
         <td>
            (non inheritable, write only) allows to create a block of undo operations. Can be BEGIN (start a bock) or END (end a block). (since 3.21)
         </td>
        </tr>
        <tr>
         <td>
          <b>White Space:</b>
         </td>
         <td>
         </td>
        </tr>
        <tr>
         <td>
          EXTRAASCENT
         </td>
         <td>
            (non inheritable) sets and gets the space to be added to the maximum ascent, in order to allow for more space between lines. Default: 0.
         </td>
        </tr>
        <tr>
         <td>
          EXTRADESCENT
         </td>
         <td>
            (non inheritable) sets and gets the space to be added to the maximum descent, in order to allow for more space between lines. Default: 0.
         </td>
        </tr>
        <tr>
         <td>
          WHITESPACEVIEW
         </td>
         <td>
            (non inheritable) sets and gets the white space display mode. <br>
            The white spaces can be: "INVISIBLE" (shown as an empty background color), "VISIBLEALWAYS" (drawn as dots and arrows) or 
            "VISIBLEAFTERINDENT" (white space used for indentation is displayed normally but after the first visible character, 
            it is shown as dots and arrows). Default: INVISIBLE.
         </td>
        </tr>
        <tr>
         <td>
          WHITESPACESIZE
         </td>
         <td>
            (non inheritable) sets and gets the size of the dots used for mark space characters. Default: 3.
         </td>
        </tr>
        <tr>
         <td>
          WHITESPACEFGCOLOR
         </td>
         <td>
            (non inheritable, write only) defines the foreground color of visible white space. Values in RGB format ("r g b"). <br>
            By default the color will be defined by the Lexer, but defining this attribute will overriding the Lexer definition. <br>
            Set to NULL to reset the definition and use the Lexer again.
         </td>
        </tr>
        <tr>
         <td>
          WHITESPACEBGCOLOR
         </td>
         <td>
            (non inheritable, write only) defines the background color of visible white space. Values in RGB format ("r g b"). <br>
            By default the color will be defined by the Lexer, but defining this attribute will overriding the Lexer definition. <br>
            Set to NULL to reset the definition and use the Lexer again. 
         </td>
        </tr>
        <tr>
         <td>
          <b>Zooming:</b>
         </td>
         <td>
         </td>
        </tr>
        <tr>
         <td>
          ZOOMIN
         </td>
         <td>
            (non inheritable, write only) increases the zoom factor by one point if the current zoom factor is less than 20 points.
         </td>
        </tr>
        <tr>
         <td>
          ZOOMOUT
         </td>
         <td>
            (non inheritable, write only) decreases the zoom factor by one point if the current zoom factor is greater than -10 points.
         </td>
        </tr>
        <tr>
         <td>
          ZOOM
         </td>
         <td>
            (non inheritable) sets and gets the zoom factor directly. Limits: -10 points to zoom out and 20 points to zoom in. 
         </td>
        </tr>
        <tr>
         <td>
          Also:
         </td>
         <td>
            <a href="common.htm#ACTIVE">ACTIVE</a>,
            <a href="common.htm#EXPAND">EXPAND</a>, 
            <a href="common.htm#SCREENPOSITION">SCREENPOSITION</a>, 
            <a href="common.htm#POSITION">POSITION</a>, 
            <a href="common.htm#MINSIZE">MINSIZE</a>, 
            <a href="common.htm#MAXSIZE">MAXSIZE</a>,
            <a href="common.htm#WID">WID</a>,
            <a href="common.htm#TIP">TIP</a>, 
            <a href="common.htm#RASTERSIZE">RASTERSIZE</a>,
            <a href="common.htm#ZORDER">ZORDER</a>,
            <a href="common.htm#VISIBLE">VISIBLE</a>
            <br>
            <br>
            Drag & Drop attributes are supported. See Notes bellow.
         </td>
        </tr>

        <tr>
         <td>
          <b>Callbacks:</b>
         </td>
         <td>
          <a name=ACTION></a>
         </td>
        </tr>
        <tr>
         <td>
          ACTION
         </td>
         <td>
            Action generated when the text is edited, but before its value is actually changed. <br>
            Can be generated when using the keyboard, undo/redo system or from the clipboard.
            <br>
            <br>
            function action_cb(<a href="Ihandle.htm">Ihandle</a> ih, 
                               <a href="integer.htm">integer</a> insert, pos, length,
                               <a href="atom.htm">atom</a> pText)<br>
            ih: identifier of the element that activated the event.<br>
            insert: =1 when text is inserted, =0 when text is deleted.<br>
            pos: 0 based character position when change started.<br>
            length: size of the change.<br>
            pText: (char*) the inserted text value. It is NULL when insert=0.
         </td>
        </tr>
        <tr>
         <td>
          AUTOCSELECTION_CB
         </td>
         <td>
            Action generated when the user has selected an item in an auto-completion list. <br>
            It is sent before the selection is inserted. <br>
            Automatic insertion can be cancelled by setting the AUTOCCANCEL attribute before returning from the callback. (since 3.10.1)
            <br>
            <br>
            function autocselection_cb(<a href="Ihandle.htm">Ihandle</a> ih, 
                                       <a href="integer.htm">integer</a> pos,
                                       <a href="atom.htm">atom</a> pText )<br>
            ih: identifier of the element that activated the event.<br>
            pos: 0 based character start position of the word being completed.<br>
            pText: (char*) the text of the selection.
         </td>
        </tr>
        <tr>
         <td>
          AUTOCCANCELLED_CB
         </td>
         <td>
            Called after the user has cancelled an auto-completion list. (since 3.10.1)
            <br>
            <br>
            function autoccancelled_cb(<a href="Ihandle.htm">Ihandle</a> ih)<br>
            ih: identifier of the element that activated the event.
         </td>
        </tr>
        <tr>
         <td>
          AUTOCCHARDELETED_CB
         </td>
         <td>
            Called after the user deleted a character while auto-completion list was active. (since 3.10.1)
            <br>
            <br>
            function autocchardeleted_cb(<a href="Ihandle.htm">Ihandle</a> ih)<br>
            ih: identifier of the element that activated the event.
         </td>
        </tr>
        <tr>
         <td>
          BUTTON_CB
         </td>
         <td>
            Action generated when any mouse button is pressed or released. <br>
            Use IupConvertXYToPos to convert (x,y) coordinates in character positioning.
         </td>
        </tr>
        <tr>
         <td>
          CARET_CB
         </td>
         <td>
            Action generated when the caret/cursor position is changed.
            <br>
            <br>
            function caret_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> lin, col, pos)<br>
            ih: identifier of the element that activated the event.<br>
            lin, col: line and column number (start at 0).<br>
            pos: 0 based character position.
         </td>
        </tr>
        <tr>
         <td>
          INSERTCHECK_CB
         </td>
         <td>
            Action generated before some text is inserted. <br>
            Inside the callback the attribute CHANGEINSERT can be set to change the inserted text. (since 3.27)
            <br>
            <br>
            function insertcheck_cb(<a href="Ihandle.htm">Ihandle</a> ih, 
                                    <a href="integer.htm">integer</a> pos, length, 
                                    <a href="atom.htm">atom</a> pText )<br>
            ih: identifier of the element that activated the event.<br>
            pos: 0 based character position when change started.<br>
            length: size of the change.<br>
            pText: (char*) the inserted text value. It is NULL when insert=0.
         </td>
        </tr>
        <tr>
         <td>
          DROPFILES_CB
         </td>
         <td>
            Action generated when one or more files are dropped in the element.
         </td>
        </tr>
        <tr>
         <td>
          DWELL_CB
         </td>
         <td>
            Action generated when the user keeps the mouse in one position for the dwell period defined in MOUSEDWELLTIME. (since 3.23)
            <br>
            <br>
            function dwell_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> state, pos, x, y)<br>
            ih: identifier of the element that activated the event.<br>
            state: 1 if mouse sit still more than the dwell period, 0 if mouse moved or key pressed after state=1 was called.<br>
            pos: the nearest position in the document to the position where the mouse pointer was lingering. Can be -1 if not near any character.<br>
            x, y: Where the pointer lingered. 
         </td>
        </tr>
        <tr>
         <td>
          HOTSPOTCLICK_CB
         </td>
         <td>
            Action generated when the user clicks or double clicks on text that is in a style with the hotspot attribute set.
            <br>
            <br>
            function hotspotclick_cb(<a href="Ihandle.htm">Ihandle</a> ih, 
                                     <a href="integer.htm">integer</a> pos, lin, col, 
                                     <a href="atom.htm">atom</a> pStatus)<br>
            ih: identifier of the element that activated the event.<br>
            pos: the character position in the document that corresponds to the hotspot click.<br>
            lin: line in the document that corresponds to the hotspot click.<br>
            col: column in the document that corresponds to the hotspot click.<br>
            pStatus: (char*) status of mouse buttons and certain keyboard keys at the moment the event was generated. <br>
            The same macros used for BUTTON_CB can be used for this status.
         </td>
        </tr>
        <tr>
         <td>
          LINESCHANGED_CB
         </td>
         <td>
            Called after the number of lines was interactively changed by the user. (since 3.23)
            <br>
            <br>
            function lineschanged_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> lin, num)<br>
            ih: identifier of the element that activated the event.<br>
            lin: line where the change started<br>
            num: number of lines than changed. A negative value indicates that lines were removed.
         </td>
        </tr>
        <tr>
         <td>
          MARGINCLICK_CB
         </td>
         <td>
            Action generated when the mouse button is clicked inside a margin that is marked as sensitive.
            <br>
            <br>
            function marginclick_cb(<a href="Ihandle.htm">Ihandle</a> ih, 
                                    <a href="integer.htm">integer</a> margin, lin, 
                                    <a href="atom.htm">atom</a> pStatus)<br>
            ih: identifier of the element that activated the event.<br>
            margin: the margin number that was clicked.<br>
            lin: line in the document that corresponds to the margin click.<br>
            pStatus: (char*) status of mouse buttons and certain keyboard keys at the moment the event was generated. <br>
            The same macros used for BUTTON_CB can be used for this status.
         </td>
        </tr>
        <tr>
         <td>
          MOTION_CB
         </td>
         <td>
            Action generated when the mouse is moved. <br>
            Use IupConvertXYToPos to convert (x,y) coordinates in character positioning.
         </td>
        </tr>
        <tr>
         <td>
          SAVEPOINT_CB
         </td>
         <td>
            Notifies the application that a save point was reached (1) or left (0). <br>
            Can be used to control whether to display a saved or modified document. <br>
            To set the save point use the SAVEPOINT attribute.
            <br>
            <br>
            function savepoint_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> status)<br>
            ih: identifier of the element that activated the event.<br>
            status: can be 1 (reached) or 0 (left).         
         </td>
        </tr>
        <tr>
         <td>
          UPDATECONTENT_CB
         </td>
         <td>
            Called when contents, styling or markers have been changed. (since 3.23)
            <br>
            <br>
            function updatecontent_cb(<a href="Ihandle.htm">Ihandle</a> ih)<br>
            ih: identifier of the element that activated the event.
         </td>
        </tr>
        <tr>
         <td>
          UPDATESELECTION_CB
         </td>
         <td>
            Called when selection has been changed. (since 3.23)
            <br>
            <br>
            function updateselection_cb(<a href="Ihandle.htm">Ihandle</a> ih)<br>
            ih: identifier of the element that activated the event.
         </td>
        </tr>
        <tr>
         <td>
          UPDATEHSCROLL_CB
         </td>
         <td>
            Called when the document was scrolled horizontally. (since 3.23)
            <br>
            <br>
            function updatehscroll_cb(<a href="Ihandle.htm">Ihandle</a> ih)<br>
            ih: identifier of the element that activated the event.
         </td>
        </tr>
        <tr>
         <td>
          UPDATEVSCROLL_CB
         </td>
         <td>
            Called when the document was scrolled vertically. (since 3.23)
            <br>
            <br>
            function updatevscroll_cb(<a href="Ihandle.htm">Ihandle</a> ih)<br>
            ih: identifier of the element that activated the event.
         </td>
        </tr>
        <tr>
         <td>
          VALUECHANGED_CB
         </td>
         <td>
            Called after the value was interactively changed by the user.
            <br>
            <br>
            function valuechanged_cb(<a href="Ihandle.htm">Ihandle</a> ih)<br>
            ih: identifier of the element that activated the event.
         </td>
        </tr>
        <tr>
         <td>
          ZOOM_CB
         </td>
         <td>
            Notifies the application when the user zooms the display using the keyboard or the ZOOM attribute. <br>
            Can be used to recalculate positions, such as the width of the line number margin to maintain sizes in terms of characters rather than pixels.
            <br>
            <br>
            function zoom_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> zoomInPoints)<br>
            ih: identifier of the element that activated the event.<br>
            zoomInPoints: the current zoom factor.
         </td>
        </tr>
        <tr>
         <td>
          also
         </td>
         <td>
            <a href="callbacks.htm#MAP_CB">MAP_CB</a>,
            <a href="callbacks.htm#UNMAP_CB">UNMAP_CB</a>,
            <a href="callbacks.htm#DESTROY_CB">DESTROY_CB</a>,
            <a href="callbacks.htm#GETFOCUS_CB">GETFOCUS_CB</a>,
            <a href="callbacks.htm#KILLFOCUS_CB">KILLFOCUS_CB</a>, 
            <a href="callbacks.htm#ENTERWINDOW_CB">ENTERWINDOW_CB</a>,
            <a href="callbacks.htm#LEAVEWINDOW_CB">LEAVEWINDOW_CB</a>, 
            <a href="callbacks.htm#K_ANY">K_ANY</a>,
            <a href="callbacks.htm#HELP_CB">HELP_CB</a>: All common callbacks are supported.
            <br>
            <br>
            Drag & Drop callbacks are supported (*). See Notes bellow.
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
