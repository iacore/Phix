<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">allocate</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         <a href="atom.htm">atom</a> pMem = allocate(<a href="integer.htm">integer</a> i, 
                                                     <a href="integer.htm#bool">bool</a> cleanup=<a href="logicops.htm">false</a>)
         <br>
         <i>-- or --</i>
         <br>
         <a href="atom.htm">atom</a> pMem = allocate_word(<a href="atom.htm">atom</a> v=0, 
                                                          <a href="integer.htm#bool">bool</a> cleanup=<a href="logicops.htm">false</a>,
                                                          <a href="integer.htm">integer</a> size=<a href="machine_bits.htm">machine_word</a>())
         <br>
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Allocate i or size bytes of memory and return the address, or 0 (aka NULL) on failure.<br>
            The address returned is always machine_word aligned.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          <a href="notpgui.htm"><span class="illegal">Not supported</span></a>.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            If the optional cleanup flag is non-zero, the memory will be automatically released once it is no longer required, otherwise 
            the application should invoke <a href="free.htm">free</a>() manually.
            <br>
            <br>
            Note that when cleanup is true, ie the default automatic memory management is in force, you should avoid 
            invoking <a href="free.htm">free</a>() or <a href="delete.htm">delete</a>() on pMem explicitly: doing 
            so is guaranteed to leave an invalid pointer to memory lying around. In preference you should either let 
            things happen naturally, or explicitly set the last/only copy of pMem to NULL, and in that way ensure 
            the raw memory is not actually freed until it is guaranteed safe to do so, and accidental references to 
            it will not cause unpredictable memory corruption.
            <br>
            <br>
            The <b>allocate_word</b>() function allocates a single block of size bytes of memory (must be 1/2/4/8) and sets it to (machine integer) v.<br>
            Obviously v is defined as atom to allow full 32/64 bit values outside the usual 31/63 bit range, and the same caveats apply as explained in
            detail in <a href="peek.htm">peek</a>() and <a href="poke.htm">poke</a>() when using a size of 8 on a 32-bit architecture.
            The <a href="peek.htm">peekns/peeknu</a>() routines are a natural companion to allocate_word, however (as yet) there is no built-in version of
            <a href="poke.htm">pokeN</a>() that defaults the third parameter to machine_word(). Hopefully the initialise-on-declaration the above provides 
            suffices in the vast majority of cases, but while I cannot see any difficulty providing one, I will wait until there is a genuine need, for
            much the same reasons outlined in the implementation notes of those peek functions.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
buffer = allocate(100)
-- (mem_set(buffer,0,100) could be used instead of the following)
for i=0 to 99 do
    poke(buffer+i, 0)
end for
</eucode-->
<pre>
<font color="#000000">buffer</font><font color="#0000FF"> =</font><font color="#7060A8"> allocate</font><font color="#0000FF">(</font><font color="#000000">100</font><font color="#0000FF">)</font>
<font color="#000080"><i>-- (mem_set(buffer,0,100) could be used instead of the following)</i></font>
<font color="#008080">for</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">0</font><font color="#008080"> to</font><font color="#000000"> 99</font><font color="#008080"> do</font>
<font color="#7060A8">    poke</font><font color="#0000FF">(</font><font color="#000000">buffer</font><font color="#0000FF">+</font><font color="#000000">i</font><font color="#0000FF">,</font><font color="#000000"> 0</font><font color="#0000FF">)</font>
<font color="#008080">end for</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            Partly in builtins\pAlloc.e (an autoinclude), but mainly via :%pAlloc in builtins\VM\pHeap.e (also an autoinclude) - be warned however 
            it is low-level complicated stuff that you do not need to know.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="free.htm">free</a>,
          <a href="mem_set.htm">mem_set</a>,
          <a href="peek.htm">peek</a>,
          <a href="poke.htm">poke</a>,
          <a href="call.htm">call</a>,
          <a href="delete_routine.htm">delete_routine</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
          Euphoria allows say allocate(107.5) and provisions 107 or 108 bytes as it sees fit, whereas in Phix the programmer is forced to explicitly 
          round non-integers in the required direction before invoking allocate(). Technically the first parameter is an atom, to allow values above 
          #3FFFFFFF (on 32-bit, though a hard limit of #5FFFFFF8 applies, whereas 63-bit integers will exceed available hardware for decades yet), but it 
          is explicitly checked to be an exact and non-negative integer (see builtins\pAlloc.e for details).
          <br>
          <br>
          Certain algorithms are simplified by permitting allocate(0). However the application had better not try and use that memory, and unless the flag
          for automatically doing so has been used it still has to remember to free() it. In practice, allocate(0) will yield 12 or 20 bytes of useable
          memory on 32/64 bit systems respectively, not that I recommend relying on that.
          <br>
          <br>
          A minor point is that technically allocate() on 32-bit yields an unsigned address whereas on 64-bit it is treated as signed, though that is only 
          likely to have any effect should there be some strange OS-level address mapping going on.
          <br>
          <br>
          As explained in builtins\VM\pHeap.e, 32-bit Phix deliberately limits allocations to 1,610,612,728 bytes (8 bytes shy of #60000000) whereas in 
          tests 32-bit Euphoria managed 1,873,463,796 (#6FAAC9F4) bytes; it is assumed this will not be an issue for any sensibly-written application.
          In any case, the ability of 32-bit Phix to construct (hll) strings up to 1,610,612,711 characters compared to the 32-bit Euphoria (hll) 
          <a href="sequence.htm">sequence</a> limit of a mere 468,365,949 elements(/characters) is considered to be completely exhonorating here.
          Similar limits are theoretically present in 64-bit versions but significantly in excess of any machine that could physically be constructed.
          <br>
          <br>
          The division between pAlloc.e and pHeap.e exists mainly so that <a href="delete_routine.htm">delete_routine</a>() can be used in the former.
          <br>
          <br>
          Note that explicit calls to free() may be measureably faster than relying on cleanup, simply because the former (static call) can for instance
          allocate stack space directly whereas the latter (dynamic call) must examine the appropriate symtab entry and calculate the needed stack space.
          (And, yes, a free() call must itself allocate and free some small bit of memory, albeit not recursively, mainly for a return address.)<br>
          However code is typically much cleaner with automatic cleanup, it is not worth obsessing over unless there are millions of dynamic free() calls,
          and even a single test to see whether a manual free() is needed could easily tip the balance back in favour (performancewise) of automatic.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
