<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">allocate_string</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         <a href="atom.htm">atom</a> pString = allocate_string(<a href="sequence.htm">sequence</a> st, 
                                                               <a href="integer.htm#bool">bool</a> cleanup=<a href="logicops.htm">false</a>)
          <br>
          <i>-- or --</i>
          <br>
         <a href="atom.htm">atom</a> pWString = allocate_wstring(<a href="sequence.htm">sequence</a> st, 
                                                                 <a href="integer.htm#bool">bool</a> cleanup=<a href="logicops.htm">false</a>)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Allocate space for string sequence st (ie st is either a <a href="string.htm">string</a>, 
            or a <a href="sequence.htm">sequence</a> of atoms with no nested sub-sequences).
            Copy st into this space along with a 0 terminating character. This is the format expected for C strings. 
            The memory address of the string will be returned. If there is not enough memory available, 0 will be returned.
            <br>
            <br>
            The allocate_string function creates an ansi (/utf8) string, 8 bits per character (possibly multibyte), whereas the
            allocate_wstring function creates a WideString, 16 bits per character (possibly with surrogate pairs). 
            <!-- nb: both of the following routines are indeed documented on the same page -->
            Note that the latter (allocate_wstring) may benefit from a call of 
            <a href="utf32_to_utf16.htm#utf8_to_utf16"><span class="illegal">utf8_to_utf16</span></a>() or 
            <a href="utf32_to_utf16.htm"><span class="illegal">utf32_to_utf16</span></a>() beforehand (and it would be most unwise 
            for this routine to try and guess which, if either, is the most appropriate - a trivial application-specific wrapper is 
            easy enough anyway).<br>
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          <a href="notp2js.htm">Not supported</a>
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            The comments of <a href="allocate.htm">allocate</a>() regarding cleanup and explicitly invoking <a href="free.htm">free</a>()
            or <a href="delete.htm">delete</a>() apply equally here.<br>
<!--
            To free the string, use free(). If the optional cleanup parameter is non-zero, you must never manually call free, instead it
            will be performed automatically when the reference count of the result drops to zero, which typically occurs on exit from a 
            routine. 
-->
            Be advised, however, that using the automatic memory management flag is usually inappropriate for callback return 
            values, as the memory will be freed (and the first few bytes clobbered) before the caller gets a chance to examine it (that 
            is, unless the atom result is stored somewhere else semi-permanently outside the callback, for as long as it is required,
            see also <a href="IupRawStringPtr.htm">IupRawStringPtr</a>).
            <br>
            <br>
            Phix strings can be passed directly to C functions, however doing so is not compatible with Euphoria.
            <br>
            <br>
            There is, as yet, no builtin for allocating a 32-bits-per-character string, which would no doubt be trivial (see
            builtins\pAlloc.e) but I would rather wait until I find something that actually uses it, and hence can test it.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
atom title = allocate_string("The Wizard of Oz")
...
free(title)
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> title</font><font color="#0000FF"> =</font><font color="#5E005E"> allocate_string</font><font color="#0000FF">(</font><font color="#008000">"The Wizard of Oz"</font><font color="#0000FF">)
...</font>
<font color="#7060A8">free</font><font color="#0000FF">(</font><font color="#000000">title</font><font color="#0000FF">)</font>
</pre>
            <br>
            For use in a complete application, see demo\arwendemo\mmsd.exw
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\pAlloc.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="allocate.htm">allocate</a>,
          <a href="free.htm">free</a>,
          <a href="IupRawStringPtr.htm">IupRawStringPtr</a>
         </td>
        </tr>
       </table>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
