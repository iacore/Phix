<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">allocate_struct</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include cffi.e<br>
          <a href="atom.htm">atom</a> pStruct = allocate_struct(<a href="integer.htm">integer</a> idStruct,
                                                                <a href="integer.htm#bool">bool</a> cleanup=<a href="logicops.htm">true</a>)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            allocate memory for a structure previously defined using <a href="define_struct.htm">define_struct</a>().
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            The allocated memory is automatically zero-filled.
            <br>
            <br>
            Note that, unlike the <a href="allocate.htm">allocate</a>() function which it invokes internally, where it
            must be false otherwise it would break almost all existing code, the cleanup argument default is <b>true</b>.
            Should you override it to false, remember to <a href="free.htm">free</a>() the result once no longer needed.
            <br>
            <br>
            Note that when cleanup is true, ie the default automatic memory management is in force, you should avoid 
            invoking <a href="free.htm">free</a>() or <a href="delete.htm">delete</a>() on pStruct explicitly: doing 
            so is guaranteed to leave an invalid pointer to memory lying around. In preference you should either let 
            things happen naturally, or explicitly set the last/only copy of pStruct to NULL, and in that way ensure 
            the raw memory is not actually freed until it is guaranteed safe to do so, and accidental references to 
            it will not cause unpredictable memory corruption.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
include cffi.e
integer idMBP = define_struct(...)
atom pMBP = allocate_struct(idMBP)
...
free(pMBP)
</eucode-->
<pre>
<font color="#008080">include</font><font color="#000000"> cffi.e</font>
<font color="#004080">integer</font><font color="#000000"> idMBP</font><font color="#0000FF"> =</font><font color="#5E005E"> define_struct</font><font color="#0000FF">(...)</font>
<font color="#004080">atom</font><font color="#000000"> pMBP</font><font color="#0000FF"> =</font><font color="#5E005E"> allocate_struct</font><font color="#0000FF">(</font><font color="#000000">idMBP</font><font color="#0000FF">)
...</font>
<font color="#7060A8">free</font><font color="#0000FF">(</font><font color="#000000">pMBP</font><font color="#0000FF">)</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="define_struct.htm">define_struct</a>,
          <a href="free.htm">free</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
