<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">and_bits</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          <a href="atom.htm">atom</a> x3 = and_bits(<a href="atom.htm">atom</a> x1, <a href="atom.htm">atom</a> x2)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Perform the logical AND operation on corresponding bits in x1 and x2.<br>
            A bit in x3 will be 1 only if the corresponding bits in x1 and x2 are both 1.
            <br>
            <br>
            Commonly used to test bit settings in a bit-field (see example 1).
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            As of 0.8.2+ the infix operator && can be used in place of and_bits().
            <br>
            <br>
            This function may be applied to an <a href="atom.htm">atom</a> or sq_and_bits() to all elements of a 
            <a href="sequence.htm">sequence</a>. The rules for <a href="seqops.htm">sequence operations</a> apply.
          <br>
          <br>
            The arguments must be representable as 32-bit numbers, either signed or unsigned.
          <br>
          <br>
            If you intend to manipulate full 32-bit values, you should declare your
            variables as <a href="atom.htm">atom</a>, rather than integer. 
            The integer type is limited to 31-bits.
          <br>
          <br>
            Results are treated as signed numbers. They will be negative when the highest-order bit is 1.
          <br>
          <br>
            <b>Caution</b>: many cryptographic functions and the like require <i>unsigned</i> 32-bit integers,
            especially when bit-shifting, for which <b>and_bitsu</b>() can be used instead.
          <br>
          <br>
            To understand the binary representation of a number you
             should display it in hexadecimal notation. Use the %x format of
              <a href="printf.htm">printf</a>().
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 1:</b>
         </td>
         <td>
<!--eucode>
if and_bits(flags,XPAD) then width-=XPADDING end if -- apply width padding
</eucode-->
<pre>
<font color="#008080">if</font><font color="#7060A8"> and_bits</font><font color="#0000FF">(</font><font color="#000000">flags</font><font color="#0000FF">,</font><font color="#000000">XPAD</font><font color="#0000FF">)</font><font color="#008080"> then</font><font color="#000000"> width</font><font color="#0000FF">-=</font><font color="#000000">XPADDING</font><font color="#008080"> end if</font><font color="#000080"><i> -- apply width padding</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 2:</b>
         </td>
         <td>
<!--eucode>
a = and_bits(#0F0F0000, #12345678)
-- a is #02040000
</eucode-->
<pre>
<font color="#000000">a</font><font color="#0000FF"> =</font><font color="#7060A8"> and_bits</font><font color="#0000FF">(</font><font color="#000000">#0F0F0000</font><font color="#0000FF">,</font><font color="#000000"> #12345678</font><font color="#0000FF">)</font>
<font color="#000080"><i>-- a is #02040000</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 3:</b>
         </td>
         <td>
<!--eucode>
s = sq_and_bits(#FF, {#123456, #876543, #2211})
-- s is {#56, #43, #11}
</eucode-->
<pre>
<font color="#000000">s</font><font color="#0000FF"> =</font><font color="#5E005E"> sq_and_bits</font><font color="#0000FF">(</font><font color="#000000">#FF</font><font color="#0000FF">,</font><font color="#800000"> {</font><font color="#000000">#123456</font><font color="#0000FF">,</font><font color="#000000"> #876543</font><font color="#0000FF">,</font><font color="#000000"> #2211</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#000080"><i>-- s is {#56, #43, #11}</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 4:</b>
         </td>
         <td>
<!--eucode>
a = and_bits(#FFFFFFFF, #FFFFFFFF)
-- a is -1
-- Note that #FFFFFFFF is a positive number,
-- but the result of a bitwise logical operation is interpreted
-- as a signed 32-bit number, so it is negative.
</eucode-->
<pre>
<font color="#000000">a</font><font color="#0000FF"> =</font><font color="#7060A8"> and_bits</font><font color="#0000FF">(</font><font color="#000000">#FFFFFFFF</font><font color="#0000FF">,</font><font color="#000000"> #FFFFFFFF</font><font color="#0000FF">)</font>
<font color="#000080"><i>-- a is -1
-- Note that #FFFFFFFF is a positive number,
-- but the result of a bitwise logical operation is interpreted
-- as a signed 32-bit number, so it is negative.</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            via :%opAndBits in builtins\VM\pMath.e and builtins/ubits.e (both autoincludes).
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="or_bits.htm">or_bits</a>,
          <a href="xor_bits.htm">xor_bits</a>,
          <a href="not_bits.htm">not_bits</a>,
          <a href="int_to_bits.htm">int_to_bits</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
