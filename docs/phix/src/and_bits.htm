<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">and_bits</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Syntax:</b>
         </td>
         <td>
          <font face = "Arial, Helvetica"> atom x3 = and_bits(atom x1, atom x2)
          </font>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>Perform the logical AND operation on corresponding bits in
             x1 and x2. A bit in x3 will be 1 only if the corresponding
             bits in x1 and x2 are both 1.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>
            This function may be applied to an atom or sq_and_bits() to all elements
             of a sequence. The rules for
          <a href="seqops.htm">sequence operations</a> apply.
          <br>
          <br>
            The arguments must be representable as 32-bit numbers, either signed or unsigned.
          <br>
          <br>
            If you intend to manipulate full 32-bit values, you should declare your
             variables as
            <font color="#030303">
             <b>atom</b>
            </font>, rather than integer. The integer type is limited to 31-bits.
          <br>
          <br>
            Results are treated as signed numbers. They will be
             negative when the highest-order bit is 1.
          <br>
          <br>
            To understand the binary representation of a number you
             should display it in hexadecimal notation. Use the %x format of
              <a href="printf.htm">printf()</a>.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example 1:</b>
         </td>
         <td>
<!--eucode>
a = and_bits(#0F0F0000, #12345678)
-- a is #02040000
</eucode-->
<pre>
<font color="#000000">a</font><font color="#0000FF"> =</font><font color="#7060A8"> and_bits</font><font color="#0000FF">(</font><font color="#000000">#0F0F0000</font><font color="#0000FF">,</font><font color="#000000"> #12345678</font><font color="#0000FF">)
</font><font color="#000080">-- a is #02040000</font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example 2:</b>
         </td>
         <td>
<!--eucode>
a = and_bits(#FF, {#123456, #876543, #2211})
-- a is {#56, #43, #11}
</eucode-->
<pre>
<font color="#000000">a</font><font color="#0000FF"> =</font><font color="#7060A8"> and_bits</font><font color="#0000FF">(</font><font color="#000000">#FF</font><font color="#0000FF">,</font><font color="#800000"> {</font><font color="#000000">#123456</font><font color="#0000FF">,</font><font color="#000000"> #876543</font><font color="#0000FF">,</font><font color="#000000"> #2211</font><font color="#800000">}</font><font color="#0000FF">)
</font><font color="#000080">-- a is {#56, #43, #11}</font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example 3:</b>
         </td>
         <td>
<!--eucode>
a = and_bits(#FFFFFFFF, #FFFFFFFF)
-- a is -1
-- Note that #FFFFFFFF is a positive number,
-- but the result of a bitwise logical operation is interpreted
-- as a signed 32-bit number, so it is negative.
</eucode-->
<pre>
<font color="#000000">a</font><font color="#0000FF"> =</font><font color="#7060A8"> and_bits</font><font color="#0000FF">(</font><font color="#000000">#FFFFFFFF</font><font color="#0000FF">,</font><font color="#000000"> #FFFFFFFF</font><font color="#0000FF">)
</font><font color="#000080">-- a is -1
-- Note that #FFFFFFFF is a positive number,
-- but the result of a bitwise logical operation is interpreted
-- as a signed 32-bit number, so it is negative.</font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="or_bits.htm">or_bits</a>,
          <a href="xor_bits.htm">xor_bits</a>,
          <a href="not_bits.htm">not_bits</a>,
          <a href="int_to_bits.htm">int_to_bits</a>
         </td>
        </tr>
       </table>
       <p></p>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
