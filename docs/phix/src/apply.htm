<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">apply</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         <a href="sequence.htm">sequence</a> res = apply(<a href="sequence.htm">sequence</a> s,
                                                         <a href="integer.htm">integer</a> fn,
                                                         <a href="object.htm">object</a> userdata={})
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Apply a function to every element of a sequence returning a new sequence of the same size.
            <br>
            <br>
            s : the sequence to map<br>
            fn : the (routine_id of a) function to use as converter<br>
            userdata : an object optionally passed to each invocation of fn (see comments re the default).
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            fn should be a function that accepts at least one parameter. The optional userdata value of {} is only is passed 
            to fn if it <i>needs</i> it: should fn have no second parameter or the second parameter is optional (already has a 
            default), it will <b>not</b> get passed the above default. Such handling proved necessary to allow things like 
            <a href="sprint.htm">sprint</a>() to be used. Obviously if you pass a non-{} value that disagrees in any way with 
            fn you will get an error. In contrast, and again obviously, even if the first parameter of fn is defaulted it 
            <i>will</i> still get passed each s[i] in turn.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
sequence s = tagset(5)
?s                  -- displays {1,2,3,4,5}
?sprint(s)          -- displays "{1,2,3,4,5}"
?apply(s,sprint)    -- displays {"1","2","3","4","5"}
</eucode-->
<pre>
<font color="#000000"></font><font color="#004080">sequence</font><font color="#000000"> s</font><font color="#0000FF"> =</font><font color="#5E005E"> tagset</font><font color="#0000FF">(</font><font color="#000000">5</font><font color="#0000FF">)
?</font><font color="#000000">s                 </font><font color="#000080"><i> -- displays {1,2,3,4,5}
</i></font><font color="#0000FF">?</font><font color="#5E005E">sprint</font><font color="#0000FF">(</font><font color="#000000">s</font><font color="#0000FF">)         </font><font color="#000080"><i> -- displays "{1,2,3,4,5}"
</i></font><font color="#0000FF">?</font><font color="#5E005E">apply</font><font color="#0000FF">(</font><font color="#000000">s</font><font color="#0000FF">,</font><font color="#5E005E">sprint</font><font color="#0000FF">)   </font><font color="#000080"><i> -- displays {"1","2","3","4","5"}</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\pApply.e (an autoinclude) for details of the actual implementation. 
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="filter.htm">filter</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            Side effects of fn are not necessarily honoured by apply(). The apply() routine is deemed to have no side-effects, and the compiler may
            therefore optimise away an apparently unnecessary apply() invocation without fully taking any side effects of fn() into consideration.
            Should this cause a problem, you may need to take a second copy of it and add some minor side effect, but for obvious reasons I would
            rather not do that to the original unless absolutely necessary. There are indeed many, many ways this could be fixed, but I am yet to
            find the one that minimises the impact on pretty much the whole reason for adding this routine in the first place, which is of course
            special handling of side effects, or lack thereof...
            <br>
            <br>
            Judicious use of functional programming style techniques can both shorten code and greatly improve clarity.<br>
            Careful design can completely eliminate many laboriously hand-written looping constructs, for just one example.<br>
            Equally, however, pig-headed adherence to "pure" functions and excessive nesting can produce quite unreadable and 
            almost impossible to maintain software. The simple act of regularly saving intermediate results in appropriately
            named local variables will often make code easier to follow and debugging ten times easier, although admittedly 
            self-clobbering (ie/eg <code>res = f(res)</code>) can sometimes improve performance significantly, but usually at 
            some small cost to overall clarity and therefore debugging.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />

      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
