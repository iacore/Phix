<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">apply</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         <a href="sequence.htm">sequence</a> res = apply(<a href="object.htm">object</a> s,
                                                         <a href="integer.htm">integer</a> fn,
                                                         <a href="object.htm">object</a> userdata={})
         <br>
         <i>-- or --</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                  papply(<a href="object.htm">object</a> s,
                                                         <a href="integer.htm">integer</a> fn,
                                                         <a href="object.htm">object</a> userdata={})
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Apply a routine to every element of a sequence and in the case of apply() return a new sequence of the same size (or
            max(length(userdata[i])) when s is true).
            <br>
            <br>
            s : the <a href="sequence.htm">sequence</a> to map, or <a href="logicops.htm">true</a>/<a href="logicops.htm">false</a><br>
            fn : the (<a href="routine_id.htm">routine_id</a> of a) procedure to invoke or function to use as converter<br>
            userdata : an object optionally passed to each invocation of fn (see comments re the default),
            or if s is true/false then this specifies all the arguments.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            <b>apply, when s is a sequence:</b>
            <br>
            <br>
            fn should be a function that accepts at least one parameter, which gets each s[i].<br>
            The optional userdata value of {} is only is passed to fn if it <i>needs</i> it: <br>
            should fn have no second parameter or the second parameter is optional (already has a default), it will 
            <b>not</b> get passed the above default. In fact, fn can have more than two parameters, as long as the
            third and later are all defaulted parameters. Such handling proved necessary to allow things like 
            <a href="sprint.htm">sprint</a>() to be used. Obviously if you pass a non-{} userdata that disagrees in 
            any way with fn&rsquo;s second parameter you will get an error. In contrast, and again obviously, even 
            if the first parameter of fn is defaulted it <i>will</i> still get passed each s[i] in turn.
            <br>
            <br>
            Compatibility note: In the Euphoria version of apply, fn must always accept two parameters, and is always
            passed userdata as the second argument. <br>
            Also, Euphoria does not allow an <a href="atom.htm">atom</a> in s, or have papply().
            <br>
            <br>
            <b>apply, when s is true:</b>
            <br>
            <br>
            fn should be a function that accepts length(userdata) parameters.<br>
            if userdata[i] is an <a href="atom.htm">atom</a>, it is passed to every call.<br>
            if userdata[i] is length(1), then userdata[i][1] is passed to every call.<br>
            otherwise (n:=)length(userdata[i]) must match all other non-atom/length(1) elements of it.<br>
            fn is then invoked n times (can be 0), and always with exactly length(userdata) args.
            <br>
            <br>
            <b>apply, when s is false:</b>
            <br>
            <br>
            fn should be a function that can accept length(userdata[i]) parameters for all elements of userdata, <br>
            and is passed each in turn, aka invoked length(userdata) times, without hindrance or modification, except as follows.<br>
            Any <a href="atom.htm">atom</a> or <a href="string.htm">string</a> elements of userdata are treated as/converted to a 
            length-one sequence, which is then passed as a single argument to fn.<br>
            Shorter elements of userdata will result in/require more naturally defaulted arguments than longer elements.
            <br>
            <br>
            papply() is identical, except that fn must be a procedure, and there is no return value.
         </td>
        </tr>
<!--
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          supported.
         </td>
        </tr>
-->
        <tr>
         <td>
          <b>Examples:</b>
         </td>
         <td>
<!--eucode>
sequence s = tagset(5)
?s                      -- displays {1,2,3,4,5}
?sprint(s)              -- displays "{1,2,3,4,5}"
?apply(s,sprint)        -- displays {"1","2","3","4","5"}
?apply(true,sprint,{s}) -- displays {"1","2","3","4","5"}
?apply(true,sprintf,{{"%d"},s})  -- {"1","2","3","4","5"}
papply(true,printf,{1,{"%d,"},s})  -- 1,2,3,4,5,
function plusn(integer n=0, m=5) return n+m end function
?apply(false,plusn,{{1,2},{3},4,{}})  -- {3,8,9,5}
</eucode-->
<pre>
<font color="#004080">sequence</font><font color="#000000"> s</font><font color="#0000FF"> =</font><font color="#7060A8"> tagset</font><font color="#0000FF">(</font><font color="#000000">5</font><font color="#0000FF">)
?</font><font color="#000000">s                     </font><font color="#000080"><i> -- displays {1,2,3,4,5}</i></font>
<font color="#0000FF">?</font><font color="#7060A8">sprint</font><font color="#0000FF">(</font><font color="#000000">s</font><font color="#0000FF">)             </font><font color="#000080"><i> -- displays "{1,2,3,4,5}"</i></font>
<font color="#0000FF">?</font><font color="#7060A8">apply</font><font color="#0000FF">(</font><font color="#000000">s</font><font color="#0000FF">,</font><font color="#7060A8">sprint</font><font color="#0000FF">)       </font><font color="#000080"><i> -- displays {"1","2","3","4","5"}</i></font>
<font color="#0000FF">?</font><font color="#7060A8">apply</font><font color="#0000FF">(</font><font color="#004600">true</font><font color="#0000FF">,</font><font color="#7060A8">sprint</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">s</font><font color="#800000">}</font><font color="#0000FF">)</font><font color="#000080"><i> -- displays {"1","2","3","4","5"}</i></font>
<font color="#0000FF">?</font><font color="#7060A8">apply</font><font color="#0000FF">(</font><font color="#004600">true</font><font color="#0000FF">,</font><font color="#7060A8">sprintf</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#800080">{</font><font color="#008000">"%d"</font><font color="#800080">}</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#800000">}</font><font color="#0000FF">) </font><font color="#000080"><i> -- {"1","2","3","4","5"}</i></font>
<font color="#7060A8">papply</font><font color="#0000FF">(</font><font color="#004600">true</font><font color="#0000FF">,</font><font color="#7060A8">printf</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#800080">{</font><font color="#008000">"%d,"</font><font color="#800080">}</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#800000">}</font><font color="#0000FF">) </font><font color="#000080"><i> -- 1,2,3,4,5,</i></font>
<font color="#008080">function</font><font color="#000000"> plusn</font><font color="#0000FF">(</font><font color="#004080">integer</font><font color="#000000"> n</font><font color="#0000FF">=</font><font color="#000000">0</font><font color="#0000FF">,</font><font color="#000000"> m</font><font color="#0000FF">=</font><font color="#000000">5</font><font color="#0000FF">)</font><font color="#008080"> return</font><font color="#000000"> n</font><font color="#0000FF">+</font><font color="#000000">m</font><font color="#008080"> end function</font>
<font color="#0000FF">?</font><font color="#7060A8">apply</font><font color="#0000FF">(</font><font color="#004600">false</font><font color="#0000FF">,</font><font color="#000000">plusn</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#800080">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#800080">}</font><font color="#0000FF">,</font><font color="#800080">{</font><font color="#000000">3</font><font color="#800080">}</font><font color="#0000FF">,</font><font color="#000000">4</font><font color="#0000FF">,</font><font color="#800080">{}</font><font color="#800000">}</font><font color="#0000FF">) </font><font color="#000080"><i> -- {3,8,9,5}</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\pApply.e (an autoinclude) for details of the actual implementation. 
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="filter.htm">filter</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            Passing any <a href="atom.htm">atom</a> value in s other than <a href="logicops.htm">true</a> or 
            <a href="logicops.htm">false</a> triggers a fatal error.
            <br>
            <br>
            Judicious use of functional programming style techniques can both shorten code and greatly improve clarity.<br>
            Careful design can completely eliminate many laboriously hand-written looping constructs, for just one example.<br>
            Equally, however, pig-headed adherence to "pure functions" and excessive nesting can produce quite unreadable and 
            almost impossible to maintain software. The simple act of regularly saving intermediate results in appropriately
            named local variables will often make code easier to follow and debugging ten times easier, although admittedly 
            self-clobbering, ie/eg res = f(res), can sometimes improve performance significantly, but usually at some small 
            cost to overall clarity and therefore debugging.
         </td>
        </tr>
       </table>
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />

      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
