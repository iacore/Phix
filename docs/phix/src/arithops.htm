<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Arithmetic Operators</h1>
      <div id="mainSection">
         The usual arithmetic operators are available: add, subtract, multiply,
         divide, unary minus, unary plus, bitwise and, bitwise or, shift left, shift right.
<!--eucode>
        3.5 + 3  -- 6.5
        3 - 5    -- -2
        6 * 2    -- 12
        7 / 2    -- 3.5
        -8.1     -- -8.1
        +8       -- 8
        1 || 2   -- 3 (same as or_bits(1,2))
        5 && 6   -- 4 (same as and_bits(0b101,0b110))
        1 << 3   -- 8 (left shift, same as 1*power(2,3))
        8 >> 3   -- 1 (right shift, same as floor(8/power(2,3)))
</eucode-->
<pre>
<font color="#000000">        3.5</font><font color="#0000FF"> +</font><font color="#000000"> 3 </font><font color="#000080"><i> -- 6.5</i></font>
<font color="#000000">        3</font><font color="#0000FF"> -</font><font color="#000000"> 5   </font><font color="#000080"><i> -- -2</i></font>
<font color="#000000">        6</font><font color="#0000FF"> *</font><font color="#000000"> 2   </font><font color="#000080"><i> -- 12</i></font>
<font color="#000000">        7</font><font color="#0000FF"> /</font><font color="#000000"> 2   </font><font color="#000080"><i> -- 3.5</i></font>
<font color="#0000FF">        -</font><font color="#000000">8.1    </font><font color="#000080"><i> -- -8.1</i></font>
<font color="#0000FF">        +</font><font color="#000000">8      </font><font color="#000080"><i> -- 8</i></font>
<font color="#000000">        1</font><font color="#0000FF"> ||</font><font color="#000000"> 2  </font><font color="#000080"><i> -- 3 (same as or_bits(1,2))</i></font>
<font color="#000000">        5</font><font color="#0000FF"> &amp;&amp;</font><font color="#000000"> 6  </font><font color="#000080"><i> -- 4 (same as and_bits(0b101,0b110))</i></font>
<font color="#000000">        1</font><font color="#0000FF"> &lt;&lt;</font><font color="#000000"> 3  </font><font color="#000080"><i> -- 8 (left shift, same as 1*power(2,3))</i></font>
<font color="#000000">        8</font><font color="#0000FF"> &gt;&gt;</font><font color="#000000"> 3  </font><font color="#000080"><i> -- 1 (right shift, same as floor(8/power(2,3)))</i></font>
</pre>
        Note that as <a href="logicops.htm">just discussed</a>, phix uses "and" and "or" instead of & and |. Instead the & operator performs
        <a href="concatenation.htm">concatenation</a>, and there is no (single) | operator. There is also no % operator (as yet), instead use
        <a href="remainder.htm">remainder</a>() or <a href="mod.htm">mod</a>().
        <br>
        <br>
        <a name=inf_nan></a>
        Computing a result that is too big (i.e. outside of -1e308 to +1e308 on 32-bit, or -1e4932 to +1e4932 on 64-bit) will
        result in one of the special atoms <b>+infinity</b> or <b>-infinity</b>.
        These appear as <b>inf</b> or <b>-inf</b> when you print them out.
        It is also possible to generate <b>nan</b> or <b>-nan</b>.
        "nan" means "not a number", i.e. an undefined value (such as inf divided by inf). 
        These values are defined in the IEEE 754 floating-point standard. If
        you see one of these special values in your output, it usually indicates an
        error in your program logic, although generating inf as an intermediate
        result may be acceptable in some cases. For instance, 1/inf is 0, which may
        be the "right" answer for your algorithm.
       <br>
       <br>
         Division by zero, as well as bad arguments to math library routines, e.g.
         square root of a negative number, log of a non-positive number etc. cause an
         immediate error message and your program is aborted.
       <br>
       <br>
         The only reason that you might use unary plus is to emphasize to the reader
         of your program that a number is positive. The interpreter does not actually
         calculate anything for this.
       <br>
       <br>
         Function-style equivalents of these operators can also be applied to entire <a href="sequence.htm">sequences</a>, as explained shortly in 
         <a href="seqops.htm">Sequence Operations</a>, eg<br>
         <code>sq_add({1,2,3},{4,5,6}) ==&gt; {5,7,9}</code>.
       <br>
       <br>

      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
