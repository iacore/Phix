<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Assignment</h1>
      <div id="mainSection">
        Assignment is the technical term for storing the result of an expression in a variable, or a subscript or slice of a variable, for instance:
        <br>
<!--eucode>
    x = a + b
    y[i] = ordinal(i) -- "one", "two", "three", etc
    y[i..j] = {1, 2, 3}
</eucode-->
<pre>
<font color="#000000">    x</font><font color="#0000FF"> =</font><font color="#000000"> a</font><font color="#0000FF"> +</font><font color="#000000"> b
    y</font><font color="#0000FF">[</font><font color="#000000">i</font><font color="#0000FF">] =</font><font color="#7060A8"> ordinal</font><font color="#0000FF">(</font><font color="#000000">i</font><font color="#0000FF">)</font><font color="#000080"><i> -- "one", "two", "three", etc</i></font>
<font color="#000000">    y</font><font color="#0000FF">[</font><font color="#000000">i</font><font color="#0000FF">..</font><font color="#000000">j</font><font color="#0000FF">] = {</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000"> 2</font><font color="#0000FF">,</font><font color="#000000"> 3</font><font color="#0000FF">}</font>
</pre>
        The previous contents of the variable, or element(s) of the subscripted or sliced variable are discarded, with any space they occupied automatically
        reclaimed and recycled immediately, as long as that data is not still being referenced elsewhere.
        <br>
        <br>
        The equals symbol '=' can be used for both assignment and <a href="relops.htm">equality testing</a>. <br>
        There is never any confusion because an assignment in Phix is a statement only, it cannot be used as an expression (as in C).<br>
        Alternatively and entirely optionally, you can explicitly use ":=" for assignment and "==" for equality testing.<br>
        <small><b>Note:</b> Unlike some programming languages, ':=' is <i>not</i> "declare and assign". The lhs must have previously been declared,
        and <i>can</i> be subscripted, so for instance "x[5] := 4" is perfectly valid.</small>
        <br>

        <h3>Assignment with operator</h3>
        Similar to and instead of ":=" you can combine assignment with one of the operators:&nbsp;&nbsp;
        <font color="#0000FF">
         + &nbsp; - &nbsp; * &nbsp; / &nbsp; & &nbsp; && &nbsp; ||
        </font>
        <br>
        <br>
          <div style="display:flex;">
           <div>For example, instead of:&nbsp;&nbsp;<br><span style="float:right">
                            you can say:&nbsp;&nbsp;</span>
           </div>
           <div>
<code>   mylongvarname<font color="#0000FF"> =</font> mylongvarname<font color="#0000FF"> +</font> 1</code><br>
<code>   mylongvarname<font color="#0000FF"> +=</font> 1</code><br>
           </div>
          </div>
        <br>
          <div style="display:flex;">
           <div>         and instead of:&nbsp;&nbsp;</span><br><span style="float:right">
                            you can say:&nbsp;&nbsp;</span>
           </div>
           <div>
<code>   galaxy<font color="#0000FF">[</font>row<font color="#0000FF">][</font>col<font color="#0000FF">][</font>angle<font color="#0000FF">] = </font>
         galaxy<font color="#0000FF">[</font>row<font color="#0000FF">][</font>col<font color="#0000FF">][</font>angle<font color="#0000FF">] + </font> 45</code><br>
<code>   galaxy<font color="#0000FF">[</font>row<font color="#0000FF">][</font>col<font color="#0000FF">][</font>angle<font color="#0000FF">] += </font>45</code><br>
           </div>
          </div>
        <br>
        As well as being shorter and more readable, with no need to carefully compare the left and right sides, 
        when the left-hand-side has multiple subscripts/slices, the op= form usually executes faster as well. 
        <br>

        <h3>Explicit Discard</h3>
        Should you want to call a function but ignore the result, invoke it as follows:
             
<!--eucode>
    {} = somefunc()
</eucode-->
<pre>
<font color="#0000FF">    {} =</font><font color="#000000"> somefunc</font><font color="#0000FF">()</font>
</pre>
        This syntax is a derivative of multiple assignment, explained next. As it describes,the {?} = format is also perfectly valid. 
        Note that Euphoria allows implicit discarding of function results but Phix does not, since to put it mildly I do not think is 
        a good idea, and more than once have been grateful for the reminder to save it somewhere. 
        <br>

        <h3>Multiple Assignment</h3>
        It is also possible and often quite convenient to [declare and] assign several variables in one statement, eg:
             
<!--eucode>
    {{a,b},?,de} = {{1,2},3,{4,5}}
    -- same as:
    de = {4,5}
    b = 2
    a = 1
</eucode-->
<pre>
<font color="#0000FF">    {</font><font color="#800000">{</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#000000">b</font><font color="#800000">}</font><font color="#0000FF">,?,</font><font color="#000000">de</font><font color="#0000FF">} = {</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">4</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#800000">}</font><font color="#0000FF">}</font>
<font color="#000080"><i>    -- same as:</i></font>
<font color="#000000">    de</font><font color="#0000FF"> = {</font><font color="#000000">4</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#0000FF">}</font>
<font color="#000000">    b</font><font color="#0000FF"> =</font><font color="#000000"> 2
    a</font><font color="#0000FF"> =</font><font color="#000000"> 1</font>
</pre>
        The sub-page takes a deep dive into the nitty-gritty, including why I put <code>de</code> first and <code>a</code> last, 
        as well as performance considerations and out-of-order/premature referencing, which can safely be skipped on first reading.
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
