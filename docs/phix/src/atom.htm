<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">atom</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          atom <i>identifier</i>
          <br>
          <i>-- or --</i>
          <br>
          <a href="integer.htm#bool">bool</a> b = atom(<a href="object.htm">object</a> x)
          <small>
          <br>
          <br>
          <i>-- or --</i>
          <br>
          <br>
          </small>
          number <i>identifier</i>
          <br>
          <i>-- or --</i>
          <br>
          <a href="integer.htm#bool">bool</a> b = number(<a href="object.htm">object</a> x)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            This serves to define the atom type. <br>
            You can also call it like an ordinary function to determine if an object is an atom.
            <br>
            <br>
            The type "number", introduced in version 0.8.3, is a simple alias of "atom" and as such behaves identically.<br>
            (Almost) all subsequent entries in the help files and (almost) all examples use the legacy "atom" in
            preference, as it is compatible with Euphoria (number isn&rsquo;t), plus it is also easier to type.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported, however JavaScript is a <i>typeless</i> language, with "<i><code>atom a</code></i>" being 
          <a href="mappings.htm">mapped</a> to "<i><code>let /*atom*/ a;</code></i>" and there are no run-time typechecks, 
          or at least they are very rare (see implementation notes below). An explicit hll/Phix "if atom(x)" and similar 
          expressions all work under pwa/p2js exactly as expected.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            An atom can hold a single numeric value, ie a floating point or an integer. It can also hold a raw pointer, such as allocated memory
            or a <a href="call_back.htm">call_back</a> address, but that is typically only used when interfacing to external code in a .dll or .so file.
            <br>
            <br>
            An atom can hold all integer values, but the reverse is not true.
            <br>
            <br>
            When invoked as a function, returns <a href="logicops.htm">true</a> (1) if x is an atom otherwise <a href="logicops.htm">false</a> (0).
            <br>
            <br>
            Note that <code>atom(x)</code> and <code>not sequence(x)</code> are effectively identical.
            <br>
            <br>
            The type "number" is a simple alias of "atom" (0.8.3+).<br>
         </td>
        </tr>
<!--
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported. Note that within JavaScript, (eg) atom(a) is a normal test yielding true/false whereas atom(a,"a") is an explicit typecheck.
         </td>
        </tr>
-->
        <tr>
         <td>
          <b>Example 1:</b>
         </td>
         <td>
<!--eucode>
atom a = 5.99
</eucode-->
<pre>
<font color="#004080">atom</font><font color="#000000"> a</font><font color="#0000FF"> =</font><font color="#000000"> 5.99</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 2:</b>
         </td>
         <td>
<!--eucode>
object line = gets(0)
if atom(line) then
    puts(SCREEN, "end of file\n")
end if
</eucode-->
<pre>
<font color="#004080">object</font><font color="#000000"> line</font><font color="#0000FF"> =</font><font color="#7060A8"> gets</font><font color="#0000FF">(</font><font color="#000000">0</font><font color="#0000FF">)</font>
<font color="#008080">if</font><font color="#004080"> atom</font><font color="#0000FF">(</font><font color="#000000">line</font><font color="#0000FF">)</font><font color="#008080"> then</font>
<font color="#7060A8">    puts</font><font color="#0000FF">(</font><font color="#000000">SCREEN</font><font color="#0000FF">,</font><font color="#008000"> "end of file\n"</font><font color="#0000FF">)</font>
<font color="#008080">end if</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            There are generic versions of the atom function implemented as :%opAtom in builtins\VM\pType.e and :%opAtom0 in builtins\VM\pJcc.e that 
            the compiler only invokes as a last resort, preferring instead to inline that functionality if the argument is known to be assigned or the
            result variable, if any, is known to be an integer, ie does not require decref/dealloc. The compiler may also completely omit the test 
            and/or any related code, if type inference/propagation determines that the result will always be true or always false.<br>
            The file pwa/p2js.js defines atom() with an optional name parameter, which if not "" triggers unassigned or type check errors, but that 
            (parameter) is not intended for or available from hll/Phix code, and only meant for use in manually hand-crafted replacements elsewhere 
            in p2js.js, and in practice it ended up being invoked (that way) rather more sparingly than first predicted.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="integer.htm">integer</a>,
          <a href="sequence.htm">sequence</a>,
          <a href="string.htm">string</a>,
          <a href="object.htm">object</a>,
          <a href="atoms.htm">Atoms</a>,
          <a href="language.htm">Core Language</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
          The sq_atom() routine can be used to apply an atom() test to all top-level elements of a sequence, eg
          <code>sq_atom({1,1.5,"string",{1,1.5,"string",{}}) ==&gt; {true,true,false,false}</code>.  That routine 
          returns a single true/false if passed an atom or string, otherwise a "flat" sequence of true/false of
          the same length as the input argument. Note there are no known valid uses of the sq_atom() routine, as yet.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
