<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">atom_to_floatNN</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         <a href="sequence.htm">sequence</a> s = atom_to_float32(<a href="atom.htm">atom</a> a1)
        <br>
          <i>-- or --</i>
        <br>
         <a href="sequence.htm">sequence</a> s = atom_to_float64(<a href="atom.htm">atom</a> a1)
        <br>
          <i>-- or --</i>
        <br>
         <a href="sequence.htm">sequence</a> s = <span class="illegal">atom_to_float80</span>(<a href="atom.htm">atom</a> a1)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Convert an <a href="atom.htm">atom</a> to a <a href="sequence.htm">sequence</a> 
            (in fact a raw binary <a href="string.htm">string</a>) of 4/8/10 single-byte values.
            These bytes contain the representation of an IEEE floating-point number in 32/64/80-bit format.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported, apart from <a href="atom_to_floatNN.htm"><span class="illegal">atom_to_float80</span></a>() - while JavaScript has 
          DataView.prototype.setFloat32 and DataView.prototype.setFloat64, there is no DataView.prototype.setFloat80, as yet, and no
          mention of it in the ECMAScript specs. To be fair, there would be little point, and in fact there is very little point in
          32-bit Phix supporting atom_to_float80(), since at least 11 bits plus some of the exponent are always missing/0, apart from
          being able to poke or write something almost right and in the correct format for some C api or similar, and nothing remotely
          like that applies to JavaScript running in a browser, at least nothing that I can think of.<br>
          Note that while on desktop/Phix the result is technically a string, whereas under pwa/p2js it is explicitly a sequence.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            There are three very similar routines, atom_to_float32, atom_to_float64, and atom_to_float80, which
            deal with 32-bit/4-byte, 64-bit/8-byte, and 80-bit/10-byte conversions respectively. Note that while
            the result is technically a string, it is not suitable for display; instead it is intended for poking
            to memory or writing to a file.
          <br>
          <br>
            On 32-bit all atoms are stored as 64-bit IEEE floating-point numbers, so you can convert any atom
            to 64-bit format without losing any precision.<br>
            On 64-bit all atoms are stored as 80-bit IEEE floating-point numbers, so you can convert any atom
            to 80-bit format without losing any precision.
          <br>          
          <br>          
            Converting an atom to a smaller format can lose precision or result in one of the special values
            <a href="arithops.htm#inf_nan">inf or -inf (infinity or -infinity)</a>. It is also possible that
            upscaling can introduce apparent discrepancies, for instance the value 0.1 cannot be held exactly,
            and hence a 64-bit version of 0.1 upscaled to 80-bits will not match a 0.1 value that has been
            80-bits since inception. <a href="accuracy.htm">Neither is exact</a> but the latter will contain 
            a futher eleven bits of the infinitely recurring bit pattern that the former does not, at least
            that is on 64-bit.
          <br>
          <br>
            Integer values will also be converted to floating-point format.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
fn = open("numbers.dat", "wb")
puts(fn, atom_to_float64(157.82)) -- write 8 bytes to a file
</eucode-->
<pre>
<font color="#000000">fn</font><font color="#0000FF"> =</font><font color="#7060A8"> open</font><font color="#0000FF">(</font><font color="#008000">"numbers.dat"</font><font color="#0000FF">,</font><font color="#008000"> "wb"</font><font color="#0000FF">)</font>
<font color="#7060A8">puts</font><font color="#0000FF">(</font><font color="#000000">fn</font><font color="#0000FF">,</font><font color="#7060A8"> atom_to_float64</font><font color="#800000">(</font><font color="#000000">157.82</font><font color="#800000">)</font><font color="#0000FF">)</font><font color="#000080"><i> -- write 8 bytes to a file</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\VM\pFloatN.e (an autoinclude), or pwa\p2js.js, for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="floatNN_to_atom.htm">floatNN_to_atom</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
