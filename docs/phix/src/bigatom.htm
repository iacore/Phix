<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">bigatom</h1>
      <div id="mainSection">
        arbitrary precision arithmetic, by Carlos Gómez Andreu (cargoan)
        <br>
        <br>
        Depricated in favour of <a href="mpfr.htm">mpfr</a>. True, this does not need dlls to be installed, but few
        end-user applications have much need for this sort of thing, and the performance difference speaks for itself.
        The one thing bigatom does better than mpfr is hold decimal fractions exactly, which has only proved significant
        so far for just <a href="javascript:ExternalLink('ext437','http://en.wikipedia.org/wiki/Floating_point');"
                           id="ext437" style="color:#9B5565" >one rosettacode task</a>.<br>
        I don&rsquo;t have any immediate plans to deliberately break or cease distributing this, you may be pleased to hear. <br>
        As a side note, I no longer have any plans to finish or properly document my builtins/bigint.e attempt, but 
        likewise I&rsquo;ll leave it where&how it is.
        <br>
        <br>
        Included in the distribution as builtins\bigatom.e (not an autoinclude).
        <br>
        <br>
        I (Pete Lomax) have translated the comments as best I can, and renamed the overrides log/exp/sqrt as b_a_log/b_a_exp/b_a_sqrt.
        <br>
        (Phix does not allow and in fact has recently been modified to expressly prohibit any builtin overides.)
        <br>
        Be advised that internally this uses simple digit-by-digit mechanisms and is not a high performance implementation.
        <br>
        (If it is possible that instead of digits 0..9 it used "digits" 0..999,999,999 then it might be ten times faster... Maybe...)
        <br>
        <br>
        Once you understand how to create and display bigatoms, the rest is all pretty straightforward.
        <br>
        <br>
        In the following, an object parameter indicates it can be atom/string/bigatom. Two things to remember are that you cannot store
        an atom/string in a bigatom, ie sometimes you must use bigatom res = ba_new(x) instead of res = x, and that all operations must
        be performed function-style, eg ba_add(a,b) rather than a+b.
        <br>
        <br>
        <a href="bigatom_type.htm">bigatom</a> - the bigatom type
        <br>
        <a href="ba_scale.htm">sequence prev = ba_scale(object decs=-1, integer mode=-1)</a> - set library precision and/or mode
        <br>
        <a href="ba_new.htm">bigatom ba = ba_new(object N)</a> - create a bigatom instance -- N can be atom/string/bigatom
        <br>
        <a href="ba_sprintf.htm">string s = ba_sprintf(sequence fmt, bigatom N)</a> - get formatted string (%B) representation
        <br>
        ba_printf(integer file, sequence fmt, bigatom N) - print formatted string (%B) representation
        <br>
        string s = ba_sprint(bigatom N) - get standard string representation 
        <br>
        ba_print(integer file, bigatom N) - print standard string representation
        <br>
        integer i = ba_scale_of(object N) -- the number of decimals before the decimal point, eg ba_scale_of(ba_new(123.4567)) is 3
        <br>
        integer i = ba_compare(object A, B) -- -1/0/1 (A&lt;B/A=B/A&gt;B) as per <a href="compare.htm">compare</a>()
        <br>
        integer i = ba_sign(object N) -- -1/0/1 (A&lt;0/A=0/A&gt;0) as per <a href="sign.htm">sign</a>()
        <br>
        bigatom ba = ba_add(object A, B)
        <br>
        bigatom ba = ba_sub(object A, B)
        <br>
        <a href="ba_mul.htm">bigatom ba = ba_mul[tiply](object A, B, bool bRound=false)</a>
        <br>
        <a href="ba_div.htm">bigatom ba = ba_div[ide](object A, B, bool bRound=false)</a>
        <br>
        <a href="ba_div.htm">bigatom ba = ba_idiv[ide](object A, B)</a>
        <br>
        bigatom ba = ba_remainder(object A, B)  -- as per <a href="remainder.htm">remainder</a>()
        <br>
        bigatom ba = ba_mod(object A, B)        -- as per <a href="mod.htm">mod</a>() (aka a%b)
        <br>
        <a href="ba_round.htm">bigatom ba = ba_round(object N, atom precision=1, integer mode=0)</a> -- rounding function (<b>nb</b> <i>unlike</i> <a href="round.htm">round</a>())
        <br>
        bigatom ba = ba_abs(object N) - absolute (unsigned) value, as per <a href="abs.htm">abs</a>()
        <br>
        bigatom ba = ba_uminus(object N) - negated value, same result as ba := ba_sub(BA_ZERO,N) [but obviously less typing and slightly faster]
        <br>
        bigatom ba = ba_trunc(object N) - integer part of a bigatom, as per <a href="trunc.htm">trunc</a>()
        <br>
        bigatom ba = ba_frac(object N) - fractional part of a bigatom
        <br>
        bigatom ba = ba_floor(object N) - integer equal to or immediately less, as per <a href="floor.htm">floor</a>()
        <br>
        bigatom ba = ba_ceil(object N) - integer equal to or immediately greater, as per <a href="ceil.htm">ceil</a>()
        <br>
        atom a = b_a_log(atom x) -- adapted from bigfixedmath.e, apparently better than log()
        <br>
        atom a = logb(atom x, atom base=10)
        <br>
        atom a = b_a_exp(atom x) -- adapted from library bc, apparently better than exp()
        <br>
        atom a = b_a_sqrt(atom x) -- apparently better than sqrt()
        <br>
        bigatom ba = ba_log(object N, bool bRound=false) -- the natural log, as per <a href="log.htm">log</a>()
        <br>
        bigatom ba = ba_exp(object N, bool bRound=false) -- returns E to the power of N
        <br>
        bigatom ba = ba_power(object N, exponent, bool bRound=false) -- as per <a href="power.htm">power</a>(x,exponent) (aka x^^exponent)
        <br>
        <a href="ba_mod_exp.htm">bigatom ba = ba_mod_exp(object base, exponent, modulus)</a> -- as per ba_mod(ba_power(base,exponent,modulus)) (aka (b^^e)%m)
        <br>
        bigatom ba = ba_sqrt(object N, bool bRound=false)   -- as per <a href="sqrt.htm">sqrt</a>()
        <br>
        bigatom ba = ba_root(object N, exponent, bool bRound=false) -- returns x^(1/exponent)
        <br>
        bigatom ba = ba_log10(object N, bool bRound=false)  -- as per <a href="log.htm">log10</a>()
        <br>
        bigatom ba = ba_logb(object N, base=10, bool bRound=false) -- log in any base
        <br>
        bigatom ba = ba_gcd(object m, n) -- as per <a href="gcd.htm">gcd</a>()
        <br>
        bigatom ba = ba_lcm(object m, n) -- as per <a href="gcd.htm">lcm</a>()
        <br>
        bigatom ba = ba_factorial(integer n) -- as per <a href="factorial.htm">factorial</a>()
        <br>
        atom a = bigatom_to_atom(bigatom N) -- an atom with the approximate value of a bigatom
        <br>
        object x = ba_euler(integer decs, integer output=0) -- e to decs places, as string(output=0) or bignum
        <br>
        <br>
        The constants BA-ZERO and BA_ONE can be used in place of ba_new(0) and ba_new(1) respectively, in cases where 0 and 1 are not acceptable,
        and obviously using them may be noticeably faster than reconstructing them every time. Actually, there is now also a BA_TWO constant.
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
