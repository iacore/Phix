<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Callbacks</h1>
      <div id="mainSection">
        Callbacks are used by the application to receive notifications from the system that the user or the system itself has interacted with the user interface of the application. 
        <br>
        <br>
        On the other hand attributes are used by the application to communicate with the user interface system.
        <br>
        <br>
        Even though callbacks have different purposes from attributes, they are also associated to an element by means of an name. 
        <br>
        <br>
        The OLD method to associate a function to a callback, the application must employ the IupSetAttribute function, linking the action to a name (passed as a string). <br>
        From this point on, this name will refer to a callback. By means of function IupSetFunction, the user connects this name to the callback. For example: 
<!--eucode>
function myButton_action(Ihandle self)
...
IupSetAttribute(myButton, "ACTION", "my_button_action");
IupSetFunction("my_button_action", Icallback("myButton_action")
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">function</font><font color="#000000"> myButton_action</font><font color="#0000FF">(</font><font color="#5E005E">Ihandle</font><font color="#000000"> self</font><font color="#0000FF">)
..</font><font color="#FF0000">.
</font><font color="#5E005E">IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">myButton</font><font color="#0000FF">,</font><font color="#008000"> "ACTION"</font><font color="#0000FF">,</font><font color="#008000"> "my_button_action"</font><font color="#0000FF">);
</font><font color="#000000">IupSetFunction</font><font color="#0000FF">(</font><font color="#008000">"my_button_action"</font><font color="#0000FF">,</font><font color="#5E005E"> Icallback</font><font color="#800000">(</font><font color="#008000">"myButton_action"</font><font color="#800000">)</font>
</pre>
        <br>
        In the NEW method, the application does not needs a global name, it directly sets the callback using the attribute name using IupSetCallback. For example:
<!--eucode>
function myButton_action(Ihandle self)
...
IupSetCallback(myButton, "ACTION", Icallback("myButton_action"))
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">function</font><font color="#000000"> myButton_action</font><font color="#0000FF">(</font><font color="#5E005E">Ihandle</font><font color="#000000"> self</font><font color="#0000FF">)
..</font><font color="#FF0000">.
</font><font color="#5E005E">IupSetCallback</font><font color="#0000FF">(</font><font color="#000000">myButton</font><font color="#0000FF">,</font><font color="#008000"> "ACTION"</font><font color="#0000FF">,</font><font color="#5E005E"> Icallback</font><font color="#800000">(</font><font color="#008000">"myButton_action"</font><font color="#800000">)</font><font color="#0000FF">)</font>
</pre>
        The new method is more efficient and more secure, because there is no risk of a name conflict. Generally you should replace IupSetFunction by IupSetCallback.
        <br>
        <br>
        Although enabled in old versions, callbacks do NOT have inheritance like attributes.
        <br>
        <br>
        All callbacks receive at least the element which activated the action as a parameter (self). 
        <br>
        <br>
        <a name=IUP_DEFAULT></a>
        <a name=IUP_CLOSE></a>
        <a name=IUP_IGNORE></a>
        <a name=IUP_CONTINUE></a>
        The callbacks implemented in the application must return one of the following values:
        <ul>
        <li>IUP_DEFAULT: Proceeds normally with user interaction. In case other return values do not apply, the callback should return this value. </li>
        <li>IUP_CLOSE: Call IupExitLoop after return. Depending on the state of the application it will close all windows and exit the application. Applies only to some actions. </li>
        <li>IUP_IGNORE: Makes the native system ignore that callback action. Applies only to some actions. </li>
        <li>IUP_CONTINUE: Makes the element to ignore the callback and pass the treatment of the execution to the parent element. Applies only to some actions. </li>
        </ul>
        Only some callbacks support the last 3 return values. Check each callback documentation. When nothing is documented then only IUP_DEFAULT is supported.
        <br>
        <br>
        Note: Avoid using IUP_IGNORE (etc) unless it is specifically documented for that callback. For example, if an IupButton ACTION callback returns IUP_IGNORE, it effectively 
        disables the button. Removing the callback is in fact the documented behaviour for IDLE_ACTION and doing so on an IupButton is quite probably unintended - but such is the
        reality of undocumented behaviour.
        <br>
        <br>
        An important detail when using callbacks is that they are only called when the user actually executes an action over an element. <br>
        A callback is not called when the programmer sets a value via IupSetAttribute. For instance: when the programmer changes a selected item on a list, no callback is called.
        <br>
        <br>
        The order of callback calling is system dependent. <br>
        For instance, the RESIZE_CB and the SHOW_CB are called in different order in Win32 and in X-Windows when the dialog is shown for the first time.
        <br>
        <br>
        As well as its normal duty of verifying parameters, the cbfunc type can be used to declare variables suitable for storing callbacks.<br>
        The C header file "iupcbs.h" lists some 50 different typedefs for callbacks (IFxxx/sIFxxx/dIFxxx). <br>
        In Phix you can always get by with "atom" for each parameter, if need be.
        <br>
        <br>
<!-- DEV (this wants to be somewhere else...)
        <h3>Main Loop</h3>
        IUP is an event-oriented interface system, so it will keep a loop “waiting” for the user to interact with the application. <br>
        For this loop to occur, the application must call the IupMainLoop function, which is generally used right before IupClose.
        <br>
        <br>
        When the application is closed by returning IUP_CLOSE in a callback, calling IupExitLoop or by hiding the last visible dialog, the function IupMainLoop will return.
        <br>
        <br>
        The IupLoopStep and the IupFlush functions force the processing of incoming events while inside an application callback.
       <br>
        &nbsp;
       <br>
-->
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
