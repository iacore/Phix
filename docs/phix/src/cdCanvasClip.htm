<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">cdCanvasClip</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include pGUI.e
            <br>
            <br>
            <a href="integer.htm">integer</a> prev_mode = cdCanvasClip(<a href="cdCanvas.htm">cdCanvas</a> canvas, <a href="integer.htm">integer</a> mode)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            The clipping area is an area that limits the available drawing area inside the canvas. <br>
            Any primitive is drawn only inside the clipping area. It affects all primitives.
            <br>
            <br>
            You can set the clipping area by using the function cdCanvasClipArea, and retrieve it using cdCanvasGetClipArea (see below). <br>
            The clipping area is a rectangle by default, but it can have other shapes. <br>
            In some drivers a polygon area can be defined, and in display based drivers a complex region can be defined. <br>
            The complex region can be a combination of boxes, polygons, sectors, chords and texts.
            <br>
            <br>
            The cdCanvasClip function activates and deactivates the clipping.
            <br>
            <br>
            Returns the previous status. Values: CD_CLIPAREA, CD_CLIPPOLYGON, CD_CLIPREGION or CD_CLIPOFF.
            <br>
            <br>
            The value CD_QUERY simply returns the current status. Default value: CD_CLIPOFF.
            <br>
            <br>
            The value CD_CLIPAREA activates a rectangular area as the clipping region. 
            <br>
            <br>
            The value CD_CLIPPOLYGON activates a polygon as a clipping region, but works only in some drivers (please refer to the notes of each driver). <br>
            The clipping polygon must be defined before activating the polygon clipping; if it is not defined, the current clipping state remains unchanged. <br>
            See the documentation of <a href="cdCanvasBegin.htm">cdCanvasBegin</a>(canvas, CD_CLIP), <a href="cdCanvasVertex.htm">cdCanvasVertex</a>(), and 
            <a href="cdCanvasEnd.htm">cdCanvasEnd</a>() to create a polygon.
            <br>
            <br>
            The value CD_CLIPREGION activates a complex clipping region. See the documentation of <a href="cdCanvasRegionCombineMode.htm">Regions</a>.
            <br>
            <br>
            The defined clipping area, polygon and complex regions are stored internally, so you may define them independently and 
            switch between area, polygon and complex region without having to define them again. <br>
            Also if the active clipping region is re-defined it immediately becomes the current clipping region.
            <a name=aux></a>
         </td>
        </tr>
        <tr>
         <td>
          <b>Auxillary functions:</b>
         </td>
         <td>
            <b>cdCanvasClipArea</b>(<a href="cdCanvas.htm">cdCanvas</a> canvas, <a href="atom.htm">atom</a> xmin, xmax, ymin, ymax)
<!--
void wdCanvasClipArea(cdCanvas* canvas, double xmin, double xmax, double ymin, double ymax); (WC) [in C]
-->
            <br>
            <br>
            Defines the current rectangle for clipping. <br>
            Only the points in the interval xmin&lt;= x &lt;= xmax and ymin &lt;= y &lt;= ymax will be printed. <br>
            Default region: (0, w-1, 0, h-1). 
            <br>            
            <br>
            Uses the C function cdfCanvasClipArea, which is not separately wrapped.
            <br>
            <br>
            <a href="atom.htm">atom</a> {mode, xmin, xmax, ymin, ymax} = <b>cdCanvasGetClipArea</b>(<a href="cdCanvas.htm">cdCanvas</a> canvas)
<!--
int wdCanvasGetClipArea(cdCanvas* canvas, double *xmin, double *xmax, double *ymin, double *ymax); (WC) [in C]
-->
            <br>
            <br>
            Returns the rectangle and the clipping status.
            <br>            
            <br>
            Uses the C function cdfCanvasGetClipArea, which is not separately wrapped.<br>
            wdCanvasClipArea() and wdCanvasGetClipArea() are identical, except of course the arguments are in world coordinates.
         </td>
        </tr>
       </table>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
