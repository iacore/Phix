<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">cdCanvasRegionCombineMode</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include pGUI.e
            <br>
            <br>
            <a href="integer.htm">integer</a> prev_mode = cdCanvasRegionCombineMode(<a href="cdCanvas.htm">cdCanvas</a> canvas, <a href="integer.htm">integer</a> mode)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Changes the way regions are combined when created. Returns the previous status. <br>
            Values: CD_UNION, CD_INTERSECT, CD_DIFFERENCE or CD_NOTINTERSECT. <br>
            The value CD_QUERY simply returns the current status. Default value: CD_UNION.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          <a href="notpgui.htm"><span class="illegal">Not supported</span></a>.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            <p align="center">Combine Modes<br>
            <img src="images/regions.gif" border="2" width="297" height="361"/></p>
            <br>
            <br>
            Complex Clipping Regions
            <br>
            <br>
            A complex region can composed of boxes, sectors, chords, polygons and texts. <br>
            It is implemented only in the Windows GDI, Windows GDI+, GDK, Cairo(*), and X-Windows base drivers.
            <br>
            <br>
            Complex clipping regions can be created using 
            <a href="cdCanvasBegin.htm">cdCanvasBegin</a>(CD_REGION)/(filled primtives)/.../<a href="cdCanvasEnd.htm">cdCanvasEnd</a>().
            <br>
            <br>
            Between a <a href="cdCanvasBegin.htm">cdCanvasBegin</a>(CD_REGION) and a <a href="cdCanvasEnd.htm">cdCanvasEnd</a>(), all calls to 
            cdBox, cdSector, cdChord, <a href="cdCanvasBegin.htm">cdCanvasBegin</a>(CD_FILL)/cdVertex(x,y)/.../<a href="cdCanvasEnd.htm">cdCanvasEnd</a>() 
            and <a href="chCanvasText.htm">cdCanvasText</a>() will be composed in a region for clipping. <br>
            This is the only exception when you can call a <a href="cdCanvasBegin.htm">cdCanvasBegin</a> after another <a href="cdCanvasBegin.htm">cdCanvasBegin</a>.
            <br>
            <br>
            When you call <a href="cdCanvasBegin.htm">cdCanvasBegin</a>(CD_REGION) a new empty region will be created. <br>
            So for the first operation you should use CD_UNION or CD_NOTINTERSECT combine modes. <br>
            When you have finished composing the region call <a href="cdCanvasEnd.htm">cdCanvasEnd</a>().
            <br>
            <br>
            To make the region active you must call cdClip(CD_CLIPREGION). For other clipping regions see <a href="cdCanvasClip.htm">Clipping</a>.
            <br>
            <br>
            Although Cairo is capable of creating regions, you can not use them for clipping, just to use IsPointInRegion. <br>
            And it can create only rectangle based regions, i.e. only cdBox will actually combine rectangles into the region.
            <br>
            <br>
            Complex clipping regions are not saved by cdSaveState.
            <a name=aux></a>
         </td>
        </tr>
        <tr>
         <td>
          <b>Auxillary functions:</b>
         </td>
         <td>
            <a href="integer.htm#bool">bool</a> res = <b>cdCanvasIsPointInRegion</b>(<a href="cdCanvas.htm">cdCanvas</a> canvas, <a href="integer.htm">integer</a> x, y)
            <br><i>-- or --</i><br>
            <a href="integer.htm#bool">bool</a> res = <b>wdCanvasIsPointInRegion</b>(<a href="cdCanvas.htm">cdCanvas</a> canvas, <a href="atom.htm">atom</a> x, y)
            <br>
            <br>
            Returns a non zero value if the point is contained inside the current region.
            <br>
            <br>
            <b>cdCanvasOffsetRegion</b>(<a href="cdCanvas.htm">cdCanvas</a> canvas, <a href="integer.htm">integer</a> dx, dy)
            <br><i>-- or --</i><br>
            <b>wdCanvasOffsetRegion</b>(<a href="cdCanvas.htm">cdCanvas</a> canvas, <a href="atom.htm">atom</a> dx, dy)
            <br>
            <br>
            Moves the current region by the given offset. <br>
            In X-Windows, if the region moves to outside the canvas border, the part moved outside will be lost, the region will need to be reconstructed.
            <br>
            <br>
            <a href="atom.htm">atom</a> {xmin, xmax, ymin, ymax} = <b>cdCanvasGetRegionBox</b>(<a href="cdCanvas.htm">cdCanvas</a> canvas)
            <br><i>-- or --</i><br>
            <a href="atom.htm">atom</a> {xmin, xmax, ymin, ymax} = <b>wdCanvasGetRegionBox</b>(<a href="cdCanvas.htm">cdCanvas</a> canvas)
            <br>
            <br>
            Returns the rectangle of the bounding box of the current region.
         </td>
        </tr>
       </table>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
