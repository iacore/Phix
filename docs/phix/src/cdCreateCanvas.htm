<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">cdCreateCanvas</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
            include pGUI.e
            <br>
            <br>
            <a href="cdCanvas.htm">cdCanvas</a> res = cdCreateCanvas(<a href="#cdContext">cdContext</a> hCdContext, 
                                                                     <a href="nullable_string.htm">atom_string</a> data, 
                                                                     <a href="sequence.htm">sequence</a> params={})
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         <td>
            Creates a CD canvas for a virtual visualization surface (VVS).
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>
            A VVS may be the canvas of a user-interface window, the page of a document sent to a printer, an offscreen image, the clipboard, a metafile, and so on. 
            To create the canvas, it is necessary to specify the driver in which each canvas is implemented. 
            The driver is set by the driver variable with additional information provided in the data parameter. 
            Even though it is possible to create more than one canvas with the same driver/data pair, this is not recommended, and its behavior is not specified. 
            Each canvas maintains its own features. 
            <br>
            <br>
            In case of failure, a NULL value is returned. The following predefined drivers (hcdContext values) are available:
            <br>
            Window-Base Drivers
            <ul>
            <li>CD_IUP = IUP Canvas (cdiup.h). </li>
            <li>CD_NATIVEWINDOW = Native Window (cdnative.h). </li>
            <li>CD_GL = Native Window (cdgl.h). </li>
            </ul>
            Device-Based Drivers
            <ul>
            <li>CD_CLIPBOARD = Clipboard (cdclipbd.h).</li> 
            <li>CD_PRINTER = Printer (cdprint.h).</li>
            <li>CD_PICTURE = Picture in memory (cdpicture.h). </li>
            </ul>
            Image-Based Drivers  
            <ul>
            <li>CD_IMAGE = Server-Image Drawing (cdimage.h). </li>
            <li>CD_IMAGERGB = Client-Image Drawing (cdirgb.h). </li>
            <li>CD_DBUFFER = Offscreen Drawing (cddbuf.h). </li>
            <li>CD_DBUFFERRGB = Client Offscreen Drawing (cddbuf.h). </li>
            </ul>
            File-Based Drivers  
            <ul>
            <li>CD_PDF = Adobe Portable Document Format (cdpdf.h). </li>
            <li>CD_PS = PostScript File (cdps.h). </li>
            <li>CD_SVG = Scalable Vector Graphics (cdsvg.h). </li>
            <li>CD_METAFILE = Internal CD Metafile (cdmf.h). </li>
            <li>CD_DEBUG = Internal CD Debug Log (cddebug.h).<br></li>

            <li>CD_CGM = Computer Graphics Metafile ISO (cdcgm.h). </li>
            <li>CD_DGN = MicroStation Design File (cddgn.h). </li>
            <li>CD_DXF = AutoCad Drawing Interchange File (cddxf.h).<br></li>

            <li>CD_EMF = Microsoft Windows Enhanced Metafile (cdemf.h). Works only in MS Windows systems. </li>
            <li>CD_WMF = Microsoft Windows Metafile (cdwmf.h). Works only in MS Windows systems. </li>
            </ul>
            <a name=cdContext></a>
            <br>
            Note: The constants CD_IUP etc are initialised with abtruse values: by "abtruse" (not a real word) I mean a value designed 
            to trigger an error if used directly, that makes some sense when debugging said error, and is automatically substituted 
            within the pGUI wrapper by a proper value, ie/eg CD_IUP is {"CD_IUP"}, which is replaced using <b>cd_context</b>(CD_IUP). 
            Should you need the proper values outside pGUI, use a similar function call, see the definition of type <b>cdContext</b>
            (which checks for one of the above CD_XXX constants) for more details, but only if you must - there is a subtle issue
            here with the order in which things need to be initialised, but it is all quite straightforward really.
            <br>
            <a name=cdCreateCanvasf></a>
            <br>
            Since the third parameter is optional there is no need for a separate cdCreateCanvasf wrapper function in pGUI (unlike C).
            <br>
            <a name=cdUseContextPlus></a>
            <br>
            The procedure cdUseContextPlus(<a href="integer.htm#bool">bool</a> use) activates or deactivates the use of an external context 
            for the next calls of the cdCreateCanvas function.
            <br>
            <a name=cdInitContextPlus></a>
            <br>
            The procedure cdInitContextPlus() initializes the context driver to use another context replacing the standard drivers. <br>
            This functions is only available when a library containing a "ContextPlus" context driver is used. See the Cairo,  GDI+ and XRender base drivers. <br>
            Those libraries does not support XOR write mode, but has support for anti-aliasing and alpha for transparency.
            
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
