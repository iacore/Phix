<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">class</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
<!-- [virtual [|] final] <i>method</i> -->
[global] [abstract] class <i>identifier</i> [nullable] [dynamic] [extends <i>base</i>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;{ [(public|private)[:]] ( <i>field</i> | <i>method</i> ) [ ',' ... ] }<br>
end class<br>
<center><small><i>-- or --</i></small></center>
class|<i>identifier</i> <i>variable</i> ( ';' | '=' ( new() | <i>expr</i> ) ) [ ',' ... ]<br>
<center><small><i>-- or --</i></small></center>
<a href="integer.htm#bool">bool</a> res = class|<i>identifier</i>(<a href="object.htm">object</a> o)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            As above class can be used in three very distinct ways, almost identically to <a href="struct.htm">struct</a>.
            <br>
            <br>
<!--
            It can sometimes be helpful to think of simple objects as structs and more complex things as classes, although in Phix there is technically not very much 
            difference between them, apart from the fact that structs cannot be fully <a href="dynamic.htm">dynamic</a>.
-->
            Classes are superficially similar to structs, however in structs all fields are implicitly public whereas they are private by default in classes,
            structs cannot be fully <a href="dynamic.htm">dynamic</a>, and typically classes have methods, while structs normally do not. <small>(In general, 
            Phix allows some reasonable overlap, rather than always strictly saying "NON" (in a cheesy French accent) even when there is no reasonable let 
            alone outright compelling reason to do so. Which reasonably stands to reason, he reasoned reasonably.)</small>
            <br>
            <br>
            An abstract class (or struct) cannot be instantiated, ie attempts to invoke <a href="structs.htm#new">new</a>() trigger compile-time and/or run-time errors.<br>
            By default struct and class variables cannot be set to null, unless the definition contains an explicit <b>nullable</b> clause.<br>
            The <a href="dynamic.htm">dynamic</a> and <a href="extended.htm">extends</a> clauses are explained separately.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          <a href="notpgui.htm"><span class="illegal">Not supported</span></a>.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
class person
--  private: -- (see note)
    string name = "average joe"
    public atom age = 35
    procedure show()
      printf(1,"%s, aged %g\n",{this.name,this.age})
    end procedure
end class
person p = new()
--?p.name  -- error
?p.age    -- 35
p.show() -- average joe, aged 35
</eucode-->
<pre>
<font color="#008080">class</font><font color="#000000"> person</font>
<font color="#000080"><i>--  private: -- (see note)</i></font>
<font color="#004080">    string</font><font color="#000000"> name</font><font color="#0000FF"> =</font><font color="#008000"> "average joe"</font>
<font color="#008080">    public</font><font color="#004080"> atom</font><font color="#000000"> age</font><font color="#0000FF"> =</font><font color="#000000"> 35</font>
<font color="#008080">    procedure</font><font color="#000000"> show</font><font color="#0000FF">()</font>
<font color="#7060A8">      printf</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"%s, aged %g\n"</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">this</font><font color="#0000FF">.</font><font color="#000000">name</font><font color="#0000FF">,</font><font color="#000000">this</font><font color="#0000FF">.</font><font color="#000000">age</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#008080">    end procedure
end class</font>
<font color="#000000">person p</font><font color="#0000FF"> =</font><font color="#7060A8"> new</font><font color="#0000FF">()</font>
<font color="#000080"><i>--?p.name  -- error</i></font>
<font color="#0000FF">?</font><font color="#000000">p</font><font color="#0000FF">.</font><font color="#000000">age   </font><font color="#000080"><i> -- 35</i></font>
<font color="#000000">p</font><font color="#0000FF">.</font><font color="#000000">show</font><font color="#0000FF">()</font><font color="#000080"><i> -- average joe, aged 35</i></font>
</pre>
            <br>
            If no default value is specified for a field, one will be provided automatically (0/false/""/{}/NULL).
            <br>
            <br>
            All fields in classes are private by default, whereas in structs they are implicitly public. All methods are public by default.<br>
            Explicitly using private on a class field, or public on a method or in a struct, is exactly the same as omitting it/both.<br>
            If public or private is followed by ':' it toggles/trashes that default behaviour (as well as applying to the next field/method).<br>
            In the above, name is private by default, age is explicitly made public, whereas show is public by default: uncommenting that "private:" 
            would not change name or age, but would make show() private. While initially fields and methods get different privacy defaults, both 
            "private:" and "public:" affect them both, and there is no way to later revert to that initial difference. (You are of course
            encouraged to group fields and methods appropriately, to minimise the number of times public/private need to be typed in.)
            <br>
            <br>
            <a name=this></a>
            Class methods can use "this." to explicitly refer to class instance fields and methods. It can be omitted provided that doing so 
            remains totally unambiguous, see <a href="#tech" onclick="opentech()">technicalia</a>.
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            As per <a href="struct.htm">struct</a>
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="extended.htm">extended</a>,
          <a href="dynamic.htm">dynamic</a>,
          <a href="javascript.htm#this">javascript.this</a><br>
          <a name=tech></a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
<!--
        Also by default, you have to explicitly declare all the fields and methods of each class/structure, however you can also create
        fully dynamic classes by making the base class "extends struct":
< ! --eucode>
class flex dynamic
end class
flex f = new()
?
?f.jelly
f.jelly = "green"
?f.jelly
</eucode -- >
<pre>
<font color="#000000">class flex dynamic
</font><font color="#008080">end</font><font color="#000000"> class
flex f</font><font color="#0000FF"> =</font><font color="#5E005E"> new</font><font color="#0000FF">()
?
?</font><font color="#000000">f</font><font color="#0000FF">.</font><font color="#000000">jelly
f</font><font color="#0000FF">.</font><font color="#000000">jelly</font><font color="#0000FF"> =</font><font color="#008000"> "green"
</font><font color="#0000FF">?</font><font color="#000000">f</font><font color="#0000FF">.</font><font color="#000000">jelly</font>
</pre>
        The builtin struct type has no fields, and all classes implicitly extend it. However by explicitly extending it, you are implying
        something extra is desired, which ...
        <br>
        <br>
-->
<!--
        <br>
        <br>
//      <small><sup>1</sup> Were fields private by default, then simple structs would be utterly useless...<br></small>
            <br>
            <br>
-->
<!--
            A virtual method can be overidden by a derived class, and does not require a concrete implementation in abstract classes
            <small>[achieved by eg <code>virtual procedure show();</code>, with the ';' being critical]</small>.<br>
            By default all methods are final, ie cannot be overidden, and if desired that can be explictly stated.<br>
            It is also permitted to specify a "virtual final" method, which is an override, but specifically the last/leaf one.<br>
-->
            Note that the lowest-level builtin type class() is actually an alias of, and behaves identically to, struct():<br>
            <code>?{struct(b),struct(p),class(b),class(p)}</code> yields {1,1,1,1}, ie all true, whereas<br>
            <code>?{bridge(b),bridge(p),person(b),person(p)}</code> yields {1,0,0,1}, ie mixed true/false.<br>
            Should you really need a struct/class distinction, not that I can think of any valid reason why you might, use 
            <code><a href="structs.htm#get_struct_type">get_struct_type</a>(s)=S_CLASS/S_STRUCT</code> instead.
            <br>
            <br>
            Class methods are automatically given a "this" first parameter, which is fulfilled by the object immediately to the left of the dot on the call.<br>
            It should be possible to omit "this." inside method definitions, as long as doing so would otherwise cause a compilation 
            error, for instance if you have say:
            <br>
            <br>
<!--eucode>
        class person
            atom age
            procedure set_age(atom age)
                this.age := age
            end procedure
            procedure set_age2(atom a)
                age := a
            end procedure
        end class
</eucode-->
<pre>
<font color="#008080">        class</font><font color="#000000"> person</font>
<font color="#004080">            atom</font><font color="#000000"> age</font>
<font color="#008080">            procedure</font><font color="#000000"> set_age</font><font color="#0000FF">(</font><font color="#004080">atom</font><font color="#000000"> age</font><font color="#0000FF">)</font>
<font color="#000000">                this</font><font color="#0000FF">.</font><font color="#000000">age</font><font color="#0000FF"> :=</font><font color="#000000"> age</font>
<font color="#008080">            end procedure
            procedure</font><font color="#000000"> set_age2</font><font color="#0000FF">(</font><font color="#004080">atom</font><font color="#000000"> a</font><font color="#0000FF">)</font>
<font color="#000000">                age</font><font color="#0000FF"> :=</font><font color="#000000"> a</font>
<font color="#008080">            end procedure
        end class</font>
</pre>
            <br>
            then in the set_age() procedure <code>age</code> and <code>this.age</code> genuinely refer to different things, and clearly omitting "this." would 
            <i>not</i> cause a compilation error, but instead just copy the parameter to itself, which achieves nothing. In contrast, in the set_age2()
            procedure, "age" <i>is</i> a potential compilation error, so the compiler <i>can</i> assume you must have really meant "this.age := a" (and of course
            you&rsquo;d still get an error if this.age was also invalid). Note that fields local to the class, which you might assume should "shadow" file-level
            or global identifiers, [at present] simply do not, and you still need the explicit "this." for those!
<!-- hmm...
             You could make a big deal out of that, or realise that if
            a local age could ever be mistyped and match a global aye, you are inevitably going to face problems "proper shadowing" would not resolve anyway.
-->
            <br>
            <br>
            Class methods offer the usual expected benefits over traditional static (file-level) routines, namely that they do not pollute the global namespace,
            and have full access to private fields. However, there is no need to jump through hoops just to share some code between classes: either invoke a more
            traditional routine from several places with sufficient parameters, or make enough fields public to allow the use of a traditional routine, or even
            use a traditional routine that invokes the occasional class method. In other words, Phix allows rather than forces code to be associated with a
            particular data type. TIP: for traditional routines, make the first parameter a class, ie explicitly do what the compiler does automatically between 
            class and end class, and avoid trying to dot-call them, in other words use show(p) instead of p.show().
         </td>
        </tr>
       </table>
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
