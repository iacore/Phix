<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">combination</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         <a href="sequence.htm">sequence</a> res = combination(<a href="integer.htm">integer</a> k, n, <a href="sequence.htm">sequence</a> set)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Return the kth combination of n items of the given set.<br>
            k should be an integer in the range 1 to <a href="log.htm">power</a>(<a href="length.htm">length</a>(set),n)
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
DEV these are non-unique/"impossible" combinations... more thought required<br>
            This can be used to retrieve all possible combinations, in strict order. The elements can be any type. 
            It is just as fast to generate the last combination as the first, so some applications may benefit by storing
            an integer key rather than duplicating all the elements of the given set.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
sequence set = "123",
         res = repeat(0,power(length(set),3))
for k=1 to length(res) do
    res[k] = combination(k,3,set)
end for
?length(res)
puts(1,join_by(res,1,9))
puts(1,"===\n")
puts(1,join_by(res,3,9))
--Output:
--  27
--  111   112   113   121   122   123   131   132   133
--  211   212   213   221   222   223   231   232   233
--  311   312   313   321   322   323   331   332   333
--  ===
--  111   121   131   211   221   231   311   321   331
--  112   122   132   212   222   232   312   322   332
--  113   123   133   213   223   233   313   323   333
</eucode-->
<pre>
<font color="#004080">sequence</font><font color="#000000"> set</font><font color="#0000FF"> =</font><font color="#008000"> "123"</font><font color="#0000FF">,</font>
<font color="#000000">         res</font><font color="#0000FF"> =</font><font color="#7060A8"> repeat</font><font color="#0000FF">(</font><font color="#000000">0</font><font color="#0000FF">,</font><font color="#7060A8">power</font><font color="#800000">(</font><font color="#7060A8">length</font><font color="#800080">(</font><font color="#000000">set</font><font color="#800080">)</font><font color="#0000FF">,</font><font color="#000000">3</font><font color="#800000">)</font><font color="#0000FF">)</font>
<font color="#008080">for</font><font color="#000000"> k</font><font color="#0000FF">=</font><font color="#000000">1</font><font color="#008080"> to</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">res</font><font color="#0000FF">)</font><font color="#008080"> do</font>
<font color="#000000">    res</font><font color="#0000FF">[</font><font color="#000000">k</font><font color="#0000FF">] =</font><font color="#000000"> combination</font><font color="#0000FF">(</font><font color="#000000">k</font><font color="#0000FF">,</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">set</font><font color="#0000FF">)</font>
<font color="#008080">end for</font>
<font color="#0000FF">?</font><font color="#7060A8">length</font><font color="#0000FF">(</font><font color="#000000">res</font><font color="#0000FF">)</font>
<font color="#7060A8">puts</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#7060A8">join_by</font><font color="#800000">(</font><font color="#000000">res</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">9</font><font color="#800000">)</font><font color="#0000FF">)</font>
<font color="#7060A8">puts</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"===\n"</font><font color="#0000FF">)</font>
<font color="#7060A8">puts</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#7060A8">join_by</font><font color="#800000">(</font><font color="#000000">res</font><font color="#0000FF">,</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">9</font><font color="#800000">)</font><font color="#0000FF">)</font>
<font color="#000080"><i>--Output:
--  27
--  111   112   113   121   122   123   131   132   133
--  211   212   213   221   222   223   231   232   233
--  311   312   313   321   322   323   331   332   333
--  ===
--  111   121   131   211   221   231   311   321   331
--  112   122   132   212   222   232   312   322   332
--  113   123   133   213   223   233   313   323   333</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\permute.e (an autoinclude), reproduced in the technicalia dropdown below, for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="permute.htm">permute</a>,
          <a href="log.htm">power</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            The following implementation can be found in builtins\permute.e, along with permute(). Unlike the latter
            there are no (commented-out) ordering variations.
            <br>
            <br>
<!--eucode>
global function combination(integer k, n, sequence set)
--
-- return the kth combination of length n items from the given set.
-- k should be an integer in the range 1 to power(length(set),n)
--
    integer l = length(set)
    if k<1 or k>power(l,n) then ?9/0 end if
    k -= 1
    sequence res = repeat(' ',n)
    for i=n to 1 by -1 do
        integer m = remainder(k,l)+1
        res[i] = set[m]
        k = floor(k/l)
    end for
    return res
end function
</eucode-->
<pre>
<font color="#008080">global function</font><font color="#000000"> combination</font><font color="#0000FF">(</font><font color="#004080">integer</font><font color="#000000"> k</font><font color="#0000FF">,</font><font color="#000000"> n</font><font color="#0000FF">,</font><font color="#004080"> sequence</font><font color="#000000"> set</font><font color="#0000FF">)</font>
<font color="#000080"><i>--
-- return the kth combination of length n items from the given set.
-- k should be an integer in the range 1 to power(length(set),n)
--</i></font>
<font color="#004080">    integer</font><font color="#000000"> l</font><font color="#0000FF"> =</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">set</font><font color="#0000FF">)</font>
<font color="#008080">    if</font><font color="#000000"> k</font><font color="#0000FF">&lt;</font><font color="#000000">1</font><font color="#008080"> or</font><font color="#000000"> k</font><font color="#0000FF">&gt;</font><font color="#7060A8">power</font><font color="#0000FF">(</font><font color="#000000">l</font><font color="#0000FF">,</font><font color="#000000">n</font><font color="#0000FF">)</font><font color="#008080"> then</font><font color="#0000FF"> ?</font><font color="#000000">9</font><font color="#0000FF">/</font><font color="#000000">0</font><font color="#008080"> end if</font>
<font color="#000000">    k</font><font color="#0000FF"> -=</font><font color="#000000"> 1</font>
<font color="#004080">    sequence</font><font color="#000000"> res</font><font color="#0000FF"> =</font><font color="#7060A8"> repeat</font><font color="#0000FF">(</font><font color="#008000">' '</font><font color="#0000FF">,</font><font color="#000000">n</font><font color="#0000FF">)</font>
<font color="#008080">    for</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">n</font><font color="#008080"> to</font><font color="#000000"> 1</font><font color="#008080"> by</font><font color="#0000FF"> -</font><font color="#000000">1</font><font color="#008080"> do</font>
<font color="#004080">        integer</font><font color="#000000"> m</font><font color="#0000FF"> =</font><font color="#7060A8"> remainder</font><font color="#0000FF">(</font><font color="#000000">k</font><font color="#0000FF">,</font><font color="#000000">l</font><font color="#0000FF">)+</font><font color="#000000">1
        res</font><font color="#0000FF">[</font><font color="#000000">i</font><font color="#0000FF">] =</font><font color="#000000"> set</font><font color="#0000FF">[</font><font color="#000000">m</font><font color="#0000FF">]</font>
<font color="#000000">        k</font><font color="#0000FF"> =</font><font color="#7060A8"> floor</font><font color="#0000FF">(</font><font color="#000000">k</font><font color="#0000FF">/</font><font color="#000000">l</font><font color="#0000FF">)</font>
<font color="#008080">    end for
    return</font><font color="#000000"> res</font>
<font color="#008080">end function</font>
</pre>
            <br>
            There is no corresponding library routine for generating combinations. The following template routine shows one way 
            to generate combinations of a given set. It is anticipated that you would need to modify this for each specific use.
            <br>
            <br>
<!--eucode>
procedure comb(integer pool, needed, done=0, sequence chosen={})
    if needed=0 then    -- got a full set
        ?chosen         -- or call a routine[id] or whatever
        return
    end if
    if done+needed>pool then return end if -- cannot fulfil
    -- get all combinations with and without the next item:
    done += 1
    comb(pool,needed-1,done,append(chosen,done))
    comb(pool,needed,done,chosen)
end procedure           

comb(3,2)   -- outputs {1,2} {1,3} {2,3}
</eucode-->
<pre>
<font color="#008080">procedure</font><font color="#000000"> comb</font><font color="#0000FF">(</font><font color="#004080">integer</font><font color="#000000"> pool</font><font color="#0000FF">,</font><font color="#000000"> needed</font><font color="#0000FF">,</font><font color="#000000"> done</font><font color="#0000FF">=</font><font color="#000000">0</font><font color="#0000FF">,</font><font color="#004080"> sequence</font><font color="#000000"> chosen</font><font color="#0000FF">=</font><font color="#800000">{}</font><font color="#0000FF">)</font>
<font color="#008080">    if</font><font color="#000000"> needed</font><font color="#0000FF">=</font><font color="#000000">0</font><font color="#008080"> then   </font><font color="#000080"><i> -- got a full set</i></font>
<font color="#0000FF">        ?</font><font color="#000000">chosen        </font><font color="#000080"><i> -- or call a routine[id] or whatever</i></font>
<font color="#008080">        return
    end if
    if</font><font color="#000000"> done</font><font color="#0000FF">+</font><font color="#000000">needed</font><font color="#0000FF">&gt;</font><font color="#000000">pool</font><font color="#008080"> then return end if</font><font color="#000080"><i> -- cannot fulfil
    -- get all combinations with and without the next item:</i></font>
<font color="#000000">    done</font><font color="#0000FF"> +=</font><font color="#000000"> 1
    comb</font><font color="#0000FF">(</font><font color="#000000">pool</font><font color="#0000FF">,</font><font color="#000000">needed</font><font color="#0000FF">-</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">done</font><font color="#0000FF">,</font><font color="#7060A8">append</font><font color="#800000">(</font><font color="#000000">chosen</font><font color="#0000FF">,</font><font color="#000000">done</font><font color="#800000">)</font><font color="#0000FF">)</font>
<font color="#000000">    comb</font><font color="#0000FF">(</font><font color="#000000">pool</font><font color="#0000FF">,</font><font color="#000000">needed</font><font color="#0000FF">,</font><font color="#000000">done</font><font color="#0000FF">,</font><font color="#000000">chosen</font><font color="#0000FF">)</font>
<font color="#008080">end procedure           
</font>
<font color="#000000">comb</font><font color="#0000FF">(</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">)  </font><font color="#000080"><i> -- outputs {1,2} {1,3} {2,3}</i></font>
</pre>
            <br>
            And here is a version that returns all combinations - many other variations are possible <img src="images/ksk-smile.png" alt="smile" />
            <br>
            <br>
<!--eucode>
function comb(sequence res, pool, integer needed, done=0, sequence chosen={})
    if needed=0 then    -- got a full set
        res = append(res,chosen)
    elsif done+needed<=length(pool) then
        -- get all combinations with and without the next item:
        done += 1
        res = comb(res,pool,needed-1,done,append(chosen,pool[done]))
        res = comb(res,pool,needed,done,chosen)
    end if
    return res
end function            

?comb({},{4,5,6},2) -- {{4,5},{4,6},{5,6}}
</eucode-->
<pre>
<font color="#008080">function</font><font color="#000000"> comb</font><font color="#0000FF">(</font><font color="#004080">sequence</font><font color="#000000"> res</font><font color="#0000FF">,</font><font color="#000000"> pool</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> needed</font><font color="#0000FF">,</font><font color="#000000"> done</font><font color="#0000FF">=</font><font color="#000000">0</font><font color="#0000FF">,</font><font color="#004080"> sequence</font><font color="#000000"> chosen</font><font color="#0000FF">=</font><font color="#800000">{}</font><font color="#0000FF">)</font>
<font color="#008080">    if</font><font color="#000000"> needed</font><font color="#0000FF">=</font><font color="#000000">0</font><font color="#008080"> then   </font><font color="#000080"><i> -- got a full set</i></font>
<font color="#000000">        res</font><font color="#0000FF"> =</font><font color="#7060A8"> append</font><font color="#0000FF">(</font><font color="#000000">res</font><font color="#0000FF">,</font><font color="#000000">chosen</font><font color="#0000FF">)</font>
<font color="#008080">    elsif</font><font color="#000000"> done</font><font color="#0000FF">+</font><font color="#000000">needed</font><font color="#0000FF">&lt;=</font><font color="#7060A8">length</font><font color="#0000FF">(</font><font color="#000000">pool</font><font color="#0000FF">)</font><font color="#008080"> then</font>
<font color="#000080"><i>        -- get all combinations with and without the next item:</i></font>
<font color="#000000">        done</font><font color="#0000FF"> +=</font><font color="#000000"> 1
        res</font><font color="#0000FF"> =</font><font color="#000000"> comb</font><font color="#0000FF">(</font><font color="#000000">res</font><font color="#0000FF">,</font><font color="#000000">pool</font><font color="#0000FF">,</font><font color="#000000">needed</font><font color="#0000FF">-</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">done</font><font color="#0000FF">,</font><font color="#7060A8">append</font><font color="#800000">(</font><font color="#000000">chosen</font><font color="#0000FF">,</font><font color="#000000">pool</font><font color="#800080">[</font><font color="#000000">done</font><font color="#800080">]</font><font color="#800000">)</font><font color="#0000FF">)</font>
<font color="#000000">        res</font><font color="#0000FF"> =</font><font color="#000000"> comb</font><font color="#0000FF">(</font><font color="#000000">res</font><font color="#0000FF">,</font><font color="#000000">pool</font><font color="#0000FF">,</font><font color="#000000">needed</font><font color="#0000FF">,</font><font color="#000000">done</font><font color="#0000FF">,</font><font color="#000000">chosen</font><font color="#0000FF">)</font>
<font color="#008080">    end if
    return</font><font color="#000000"> res</font>
<font color="#008080">end function            
</font>
<font color="#0000FF">?</font><font color="#000000">comb</font><font color="#0000FF">(</font><font color="#800000">{}</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">4</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#0000FF">,</font><font color="#000000">6</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">)</font><font color="#000080"><i> -- {{4,5},{4,6},{5,6}}</i></font>
</pre>
            <br>
            A practical application can be seen in demo\rosetta\Sudoku.exw
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
