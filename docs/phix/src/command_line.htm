<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">command_line</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          <a href="sequence.htm">sequence</a> res = command_line()
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Returns a <a href="sequence.htm">sequence</a> of strings, where each <a href="string.htm">string</a> is 
            a word from the command-line that started your program. <br>
            The first word will be the path to either the Phix executable (p.exe, pw.exe, or p), or to your executable file, or "p2js". <br>
            The next word is either the name of your Phix main source/htm file, or (again) the path to your executable file. <br>
            After that will come any extra words typed by the user. You can use these words in your program.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
            Supported, after a fashion, see technicalia.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            The Phix interpreter itself uses very few command-line options, which must occur before the main source file. <br>
            Options after the main source file can be used by your own program.
          <br>
          <br>
            The user can put quotes around a series of words to make them into a single argument.
          <br>
          <br>
            If you compile your program you will find that all command-line arguments remain the same, except for the first
            two, even though your user no longer types "p" on the command-line (see examples below).
          <br>
          <br>
            In the special case of "p p test" (and "p p p test" etc) command_line() returns
            the same results as "p test", since doing otherwise would just hamper testing, cause 
            general confusion, and gain nothing.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 1:</b>
         </td>
         <td>
<!--eucode>
-- The user types:  p myprog myfile.dat 12345 "The end"
cmd = command_line()
-- cmd will be:
      {`C:\Program Files (x86)\Phix\p.exe`,
       `C:\Projects\myprog\myprog.exw`,
       `myfile.dat`,
       `12345`,
       `The end`}
-- Note the capitalisation of myprog[.exw] may reflect 
-- reality, whereas myfile would always be "as typed".
</eucode-->
<pre>
<font color="#000080"><i>-- The user types:  p myprog myfile.dat 12345 "The end"</i></font>
<font color="#000000">cmd</font><font color="#0000FF"> =</font><font color="#5E005E"> command_line</font><font color="#0000FF">()</font>
<font color="#000080"><i>-- cmd will be:</i></font>
<font color="#0000FF">      {</font><font color="#008000">`C:\Program Files (x86)\Phix\p.exe`</font><font color="#0000FF">,</font>
<font color="#008000">       `C:\Projects\myprog\myprog.exw`</font><font color="#0000FF">,</font>
<font color="#008000">       `myfile.dat`</font><font color="#0000FF">,</font>
<font color="#008000">       `12345`</font><font color="#0000FF">,</font>
<font color="#008000">       `The end`</font><font color="#0000FF">}</font>
<font color="#000080"><i>-- Note the capitalisation of myprog[.exw] may reflect 
-- reality, whereas myfile would always be "as typed".</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 2:</b>
         </td>
         <td>
<!--eucode>
-- Your program is compiled with the name "myprog.exe"
-- and is stored in the directory C:\MyFiles\.
-- The user types:  myprog myfile.dat 12345 "The end"
cmd = command_line()
-- cmd will be:
       {`C:\MyFiles\myprog.exe`,
        `C:\MyFiles\myprog.exe`, -- (spacer)
        `myfile.dat`,
        `12345`,
        `The end`
        }
-- Note that all arguments remain the same as example 1
-- except for the first two. The second argument is always
-- the same as the first and is inserted to keep the numbering
-- of the subsequent arguments the same, whether your program
-- is compiled to an executable .exe file or not.
</eucode-->
<pre>
<font color="#000080"><i>-- Your program is compiled with the name "myprog.exe"
-- and is stored in the directory C:\MyFiles\.
-- The user types:  myprog myfile.dat 12345 "The end"</i></font>
<font color="#000000">cmd</font><font color="#0000FF"> =</font><font color="#5E005E"> command_line</font><font color="#0000FF">()</font>
<font color="#000080"><i>-- cmd will be:</i></font>
<font color="#0000FF">       {</font><font color="#008000">`C:\MyFiles\myprog.exe`</font><font color="#0000FF">,</font>
<font color="#008000">        `C:\MyFiles\myprog.exe`</font><font color="#0000FF">,</font><font color="#000080"><i> -- (spacer)</i></font>
<font color="#008000">        `myfile.dat`</font><font color="#0000FF">,</font>
<font color="#008000">        `12345`</font><font color="#0000FF">,</font>
<font color="#008000">        `The end`</font>
<font color="#0000FF">        }</font>
<font color="#000080"><i>-- Note that all arguments remain the same as example 1
-- except for the first two. The second argument is always
-- the same as the first and is inserted to keep the numbering
-- of the subsequent arguments the same, whether your program
-- is compiled to an executable .exe file or not.</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 3:</b>
         </td>
         <td>
<!--eucode>
string cl2 = command_line()[2]
?get_file_name(cl2) -- eg "test.exw" or "test.exe" or "test.htm"
</eucode-->
<pre>
<font color="#004080">string</font><font color="#000000"> cl2</font><font color="#0000FF"> =</font><font color="#5E005E"> command_line</font><font color="#0000FF">()[</font><font color="#000000">2</font><font color="#0000FF">]
?</font><font color="#5E005E">get_file_name</font><font color="#0000FF">(</font><font color="#000000">cl2</font><font color="#0000FF">)</font><font color="#000080"><i> -- eg "test.exw" or "test.exe" or "test.htm"</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\VM\pcmdlnN.e (an autoinclude), and/or pwa\p2js.js (ie core), for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="getenv.htm">getenv</a>,
          <a href="get_interpreter.htm">get_interpreter</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
          Implemented in pwa/p2js as return {"p2js",document.location.href} - and never anything extra.<br>
          Expect res[2] to be something like `file:///C:/Program%20Files%20(x86)/Phix/pwa/test.htm` or `http://phix.x10.mx/p2js/test.htm`.<br>
          There may be cases where the simplest way to effect a config or functional change is to simply rename a web page, or perhaps 
          copy the exact same code to different names, so for instance `http://phix.x10.mx/login.htm` and `http://phix.x10.mx/logout.htm` 
          might do different things, but could actually be identical. Should the url contain a scrap such as "?action=login", that is 
          nothing whatsoever to do with me or command_line(), and yours alone to deal with, at least as things stand.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
