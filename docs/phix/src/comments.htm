<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Comments</h1>
      <div id="mainSection">
       Phix supports both line and nested block comments.
       <br>
       <br>
       Line comments are started by two dashes (or two forwardslashes as of 0.8.2+) and extend to the end of the current line, e.g.
<!--eucode>
-- this is a comment
// this is also a comment.
</eucode-->
<pre>
<font color="#000080"><i>-- this is a comment
// this is also a comment.</i></font>
</pre>
        Comments are ignored by the compiler and have no effect on execution speed. By default Edita displays comments in navy.
       <br>
       <br>
        On the first line (only) of your program, you can use a special comment beginning with #!, e.g.
<!--eucode>
#!/home/pete/phix/p
</eucode-->
<pre>
<font color="#000080"><i>#!/home/pete/phix/p</i></font>
</pre>
        This is reserved for Linux, to inform the shell that your file should be executed by the Phix interpreter, and
        gives the full path to the interpreter. If you make your file executable, you can run it just by typing its name, 
        without the need to type "p". On Windows this line is treated as a comment.
       <br>
       <br>
        Block comments are started with /* or --/* and end with */ or --*/, e.g.
<!--eucode>
/*
   This is a comment
*/
</eucode-->
<pre>
<font color="#000080"><i>/*
   This is a comment
*/</i></font>
</pre>
        The --/* and --*/ forms were (and often still are) used for a somewhat dirty little hack.<br>
        The following illustrates some differences between handling of block comments by Phix and Euphoiria:
<!--eucode>
--/* 
include std\console.e           -- Ignored by Phix, included by Eu 
--*/ 
--/* */include builtins\get.e   -- Included by Phix, ignored by Eu 
 
/* 
        puts(1, "Neither Eu nor Phix execute this\n")  
*/ 
 
--/*  
        puts(1, "Eu prints this, Phix does not\n")  
--*/  
 
--/* */ puts(1, "Phix prints this, Eu does not\n")   
 
--/* */ puts(1, "Runs with Phix\n") --/*     
        puts(1, "Runs with Eu\n")   --*/ 
</eucode-->
<pre>
<font color="#000080"><i>--/* 
include std\console.e           -- Ignored by Phix, included by Eu 
--*/ 
--/* */</i></font><font color="#008080">include</font><font color="#000000"> builtins\get.e  </font><font color="#000080"><i> -- Included by Phix, ignored by Eu </i></font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>/* 
        puts(1, "Neither Eu nor Phix execute this\n")  
*/ </i></font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>--/*  
        puts(1, "Eu prints this, Phix does not\n")  
--*/  </i></font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>--/* */</i></font><font color="#7060A8"> puts</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000"> "Phix prints this, Eu does not\n"</font><font color="#0000FF">)   </font>
<font color="#C0C0C0"> </font>
<font color="#000080"><i>--/* */</i></font><font color="#7060A8"> puts</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000"> "Runs with Phix\n"</font><font color="#0000FF">)</font><font color="#000080"><i> --/*     
        puts(1, "Runs with Eu\n")   --*/ </i></font>
</pre>
        Thanks to ChrisB for suggesting the above. Note that Phix source does not need a space in /* */, but this html seems to.
        <br>
        <br>
        An alternative (more recent and somewhat saner) way to cope with any required differences is:
<!--eucode>
ifdef PHIX then 
    puts(1,"this is Phix\n") 
elsedef 
    puts(1,"this is Eu\n") 
end ifdef 
</eucode-->
<pre>
<font color="#008080">ifdef</font><font color="#000000"> PHIX</font><font color="#008080"> then </font>
<font color="#7060A8">    puts</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"this is Phix\n"</font><font color="#0000FF">) </font>
<font color="#008080">elsedef </font>
<font color="#7060A8">    puts</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"this is Eu\n"</font><font color="#0000FF">) </font>
<font color="#008080">end ifdef </font>
</pre>
        <br>
        Block comments can also be nested to any depth, though there are a few (rare) edge cases you should be aware of:
<!--eucode>
/*
    something
    /*
        if token="/*" then while token()!="*/" do next_token() end while end if
    */
    something else
*/
</eucode-->
<pre>
<font color="#000080"><i>/*
    something
    /*
        if token="/*" then while token()!="*/" do next_token() end while end if
    */
    something else
*/</i></font>
</pre>
        <br>
        will actually be fine, but really treats the [/*]`" then while token()!="`[*/] as a depth-3-nested-comment, whereas
        <br>
        <br>
<!--eucode>
    /*
    if token="*/" then exit end if
    */
</eucode-->
<pre>
<font color="#000080"><i>    /*
    if token="*/</i></font><font color="#008000">" then exit end </font><font color="#FF0000">i</font><font color="#000000">f</font>
<font color="#008000">    */</font>
</pre>
        <br>
        will however break trying to process `" then exit end if\n*/`, in this particular case pointing at the end if
        and declaring "missing closing quote". In uncommented code, text in string literals is treated specially and
        any embedded open/close block comments are ignored. However once that code is made a comment, the whole thing
        is just text and there is no and <i>cannot be any</i> special handling of such once-were-string-literals.<br>
        Thankfully not too much code embeds (unbalanced) comment markers inside string literals.
        <br>
        <br>
       See also:
       <a href="perrec.htm">Personal Recommendations</a>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
