<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">compare</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          <a href="integer.htm">integer</a> i = compare(<a href="object.htm">object</a> a, b)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
          <div id="nopad" class="nopad" align="left">
           <table cellspacing="0" cellpadding="0" border="0" style="padding: 0; border-style: none;">
            <tr>
             <td align="right" style="padding: 0; border-style: none;">
              <nobr>Return -1&nbsp;</nobr>
             </td>
             <td align="left" style="padding: 0; border-style: none; width: 100%">
                if a is less than b,
             </td>
            </tr>
            <tr>
             <td align="right" style="padding: 0; border-style: none;">
                        0&nbsp;
             </td>
             <td align="left" style="padding: 0; border-style: none;">
                if objects a and b are identical, or
             </td>
            </tr>
            <tr>
             <td align="right" style="padding: 0; border-style: none;">
                       +1&nbsp;
             </td>
             <td align="left" style="padding: 0; border-style: none;">
                if a is greater than b.
             </td>
            </tr>
           </table>
          </div>
          <div style="clear:both;height:1px;"> </div>
            Atoms are considered to be less than sequences.
          <br>
            Sequences are compared "alphabetically" starting with the first element until a difference is found.
          <br>
          <br>
            Note that Euphoria typically needs equal() or compare() on each and every non-trivial conditional test, whereas 
            Phix can just use the more natural infix operators =, &lt;=, etc. Apart from the obvious legacy code and 
            compatibility with Euphoria, compare is also very useful in sort routines and the like.
            <br>
            <br>
            You can also use <a href="seqops.htm">sq_cmp</a>() to obtain nested element-wise results.
         </td>
        </tr>
<!--
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
            Supported.
         </td>
        </tr>
-->
        <tr>
         <td>
          <b>Example 1:</b>
         </td>
         <td>
<!--eucode>
x = compare({1,2,{3,{4}},5}, {2-1,1+1,{3,{4}},6-1})
-- identical, x is 0
</eucode-->
<pre>
<font color="#000000">x</font><font color="#0000FF"> =</font><font color="#7060A8"> compare</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#800080">{</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#00FF00">{</font><font color="#000000">4</font><font color="#00FF00">}</font><font color="#800080">}</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#800000"> {</font><font color="#000000">2</font><font color="#0000FF">-</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#0000FF">+</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#800080">{</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#00FF00">{</font><font color="#000000">4</font><font color="#00FF00">}</font><font color="#800080">}</font><font color="#0000FF">,</font><font color="#000000">6</font><font color="#0000FF">-</font><font color="#000000">1</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#000080"><i>-- identical, x is 0</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 2:</b>
         </td>
         <td>
<!--eucode>
if compare("ABC", "ABCD") < 0 then   -- -1
    -- will be true: ABC is "less" because it is shorter
end if
</eucode-->
<pre>
<font color="#008080">if</font><font color="#7060A8"> compare</font><font color="#0000FF">(</font><font color="#008000">"ABC"</font><font color="#0000FF">,</font><font color="#008000"> "ABCD"</font><font color="#0000FF">) &lt;</font><font color="#000000"> 0</font><font color="#008080"> then  </font><font color="#000080"><i> -- -1
    -- will be true: ABC is "less" because it is shorter</i></font>
<font color="#008080">end if</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 3:</b>
         </td>
         <td>
<!--eucode>
x = compare({12345, 99999, -1, 700, 2},
            {12345, 99999, -1, 699, 3, 0})
-- x will be 1 because 700 > 699
</eucode-->
<pre>
<font color="#000000">x</font><font color="#0000FF"> =</font><font color="#7060A8"> compare</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">12345</font><font color="#0000FF">,</font><font color="#000000"> 99999</font><font color="#0000FF">, -</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000"> 700</font><font color="#0000FF">,</font><font color="#000000"> 2</font><font color="#800000">}</font><font color="#0000FF">,</font>
<font color="#800000">            {</font><font color="#000000">12345</font><font color="#0000FF">,</font><font color="#000000"> 99999</font><font color="#0000FF">, -</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000"> 699</font><font color="#0000FF">,</font><font color="#000000"> 3</font><font color="#0000FF">,</font><font color="#000000"> 0</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#000080"><i>-- x will be 1 because 700 &gt; 699</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 4:</b>
         </td>
         <td>
<!--eucode>
x = compare('a', "a")
-- x will be -1 because 'a' is an atom
--                while "a" is a sequence
</eucode-->
<pre>
<font color="#000000">x</font><font color="#0000FF"> =</font><font color="#7060A8"> compare</font><font color="#0000FF">(</font><font color="#008000">'a'</font><font color="#0000FF">,</font><font color="#008000"> "a"</font><font color="#0000FF">)</font>
<font color="#000080"><i>-- x will be -1 because 'a' is an atom
--                while "a" is a sequence</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            Implemented as %opScmp in builtins\VM\pJcc.e (an autoinclude) - be warned however it is low-level complicated stuff that you do not need to know,
            as hinted by example 3 above things can get very messy digging ever deeper into nested sequences looking for the first discrepancy.
            <a href="seqops.htm">sq_cmp</a>() is implemented in builtins\psqop.e
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="equal.htm">equal</a>,
          <a href="min.htm">min</a>,
          <a href="max.htm">max</a>,
          <a href="relops.htm">relational operators</a>,
          <a href="seqops.htm">sequence operations</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            Be advised that <a href="seqops.htm">sq_cmp</a>() yields a character-wise comparison on (nested) strings, and throws 
            an exception if their lengths are not the same. It would however be fine in Example 4, yielding {0}, because in that
            case it compares the atom 'a' against each character of "a" in turn, and of course {0} bears no relation to the -1
            result shown above from calling compare() directly, despite the fact that it actually invokes compare().
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
