<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">complex</h1>
      <div id="mainSection">
        The file builtins\complex.e (<i>not</i> an autoinclude) contains a basic implementation of complex number arithmetic.
       <br>
       <br>
        A complex number contains a real and imaginary part, which simplify some calculations. For a proper explanation 
        see <a href="javascript:ExternalLink('ext9437','https://en.wikipedia.org/wiki/Complex_number');"
               id="ext9437" style="color:#9B5565"      >https://en.wikipedia.org/wiki/Complex_number</a>.
       <br>
       <br>
<!--
        The constant i (or complex:i if you prefer) is defined simply as {0,1}, and obviously <br>
        a) you need to be wary of confusing yourself by using i as (say) a local loop control variable, and
       <br>
        b) provided that i is not overshadowed in such a manner, complex_sprint(i) simply yields "i".
       <br>
       <small>[PS: I toyed with the idea of making it constant I, but that&rsquo;s just wrong!]</small>
       <br>
       <br>
-->
       <h3>Example:</h3>
       <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
        <div class="codeSnippetContainerCodeContainer">
         <div class="codeSnippetToolBar">
          <div class="codeSnippetToolBarText">
               <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_18b74j93-qx54-6374-123h-8b2483c92846');">Copy</a>
          </div>
         </div>
         <div id="CodeSnippetContainerCode_18b74j93-qx54-6374-123h-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
          <div style="color:Black;">
<!--eucode>
include complex.e

--constant complex i = complex_new(0,1)  -- NB: 'i' is not provided as standard
--constant complex i = {0,1}             --     (equivalent, if you prefer)

complex a = complex_new(5,3),
        b = complex_new(4,-3),
        x = complex_add(a,b),
        y = complex_mul(a,b),
        z = complex_div(y,b)
string sa = complex_sprint(a),
       sb = complex_sprint(b),
       sx = complex_sprint(x),
       sy = complex_sprint(y),
       sz = complex_sprint(z)
printf(1,"(%s) + (%s) = %s\n",{sa,sb,sx})   -- (5+3i) + (4-3i) = 9
printf(1,"(%s) * (%s) = %s\n",{sa,sb,sy})   -- (5+3i) * (4-3i) = 29-3i
printf(1,"(%s) / (%s) = %s\n",{sy,sb,sz})   -- (29-3i) / (4-3i) = 5+3i
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">include</font><font color="#000000"> complex.e

</font><font color="#000080"><i>--constant complex i = complex_new(0,1)  -- NB: 'i' is not provided as standard
--constant complex i = {0,1}             --     (equivalent, if you prefer)

</i></font><font color="#004080">complex</font><font color="#000000"> a</font><font color="#0000FF"> =</font><font color="#5E005E"> complex_new</font><font color="#0000FF">(</font><font color="#000000">5</font><font color="#0000FF">,</font><font color="#000000">3</font><font color="#0000FF">),
</font><font color="#000000">        b</font><font color="#0000FF"> =</font><font color="#5E005E"> complex_new</font><font color="#0000FF">(</font><font color="#000000">4</font><font color="#0000FF">,-</font><font color="#000000">3</font><font color="#0000FF">),
</font><font color="#000000">        x</font><font color="#0000FF"> =</font><font color="#5E005E"> complex_add</font><font color="#0000FF">(</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#000000">b</font><font color="#0000FF">),
</font><font color="#000000">        y</font><font color="#0000FF"> =</font><font color="#5E005E"> complex_mul</font><font color="#0000FF">(</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#000000">b</font><font color="#0000FF">),
</font><font color="#000000">        z</font><font color="#0000FF"> =</font><font color="#5E005E"> complex_div</font><font color="#0000FF">(</font><font color="#000000">y</font><font color="#0000FF">,</font><font color="#000000">b</font><font color="#0000FF">)
</font><font color="#004080">string</font><font color="#000000"> sa</font><font color="#0000FF"> =</font><font color="#5E005E"> complex_sprint</font><font color="#0000FF">(</font><font color="#000000">a</font><font color="#0000FF">),
</font><font color="#000000">       sb</font><font color="#0000FF"> =</font><font color="#5E005E"> complex_sprint</font><font color="#0000FF">(</font><font color="#000000">b</font><font color="#0000FF">),
</font><font color="#000000">       sx</font><font color="#0000FF"> =</font><font color="#5E005E"> complex_sprint</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#0000FF">),
</font><font color="#000000">       sy</font><font color="#0000FF"> =</font><font color="#5E005E"> complex_sprint</font><font color="#0000FF">(</font><font color="#000000">y</font><font color="#0000FF">),
</font><font color="#000000">       sz</font><font color="#0000FF"> =</font><font color="#5E005E"> complex_sprint</font><font color="#0000FF">(</font><font color="#000000">z</font><font color="#0000FF">)
</font><font color="#5E005E">printf</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"(%s) + (%s) = %s\n"</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">sa</font><font color="#0000FF">,</font><font color="#000000">sb</font><font color="#0000FF">,</font><font color="#000000">sx</font><font color="#800000">}</font><font color="#0000FF">)  </font><font color="#000080"><i> -- (5+3i) + (4-3i) = 9
</i></font><font color="#5E005E">printf</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"(%s) * (%s) = %s\n"</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">sa</font><font color="#0000FF">,</font><font color="#000000">sb</font><font color="#0000FF">,</font><font color="#000000">sy</font><font color="#800000">}</font><font color="#0000FF">)  </font><font color="#000080"><i> -- (5+3i) * (4-3i) = 29-3i
</i></font><font color="#5E005E">printf</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"(%s) / (%s) = %s\n"</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">sy</font><font color="#0000FF">,</font><font color="#000000">sb</font><font color="#0000FF">,</font><font color="#000000">sz</font><font color="#800000">}</font><font color="#0000FF">)  </font><font color="#000080"><i> -- (29-3i) / (4-3i) = 5+3i</i></font>
</pre>
          </div>
         </div>
        </div>
       </div>
       <br>
       <br>
       <style type="text/css">
          dl {margin:0;padding:0;}
          dt {margin:0;padding:0;}
          dd {margin:0;padding:0;}
          dd.pad {padding-left:8em;}
       </style>
       <div id="nopad" class="nopad" align="center">
        <table cellspacing="0" cellpadding="0" border="0" style="padding: 0; border-style: none;">
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            bool res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex</b>(object o) - the standard complex type.
             <br>
            </dt>
            <dd class="pad">
            The private type complexn allows the following routines to accept either complex or atom arguments.
             <br>
            An atom argument is usually immediately converted to {a,0} [ie an imaginary part of 0].
            </dd>
           </dl>
          </td>
         </tr>
<!--
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            bool res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complexn</b>(object o) - the standard complex or atom type.
             <br>
            </dt>
            <dd class="pad">
            Allows the following routines to accept either complex or atom arguments.
             <br>
            An atom argument is usually immediately converted to {a,0} [ie an imaginary part of 0].
             <br>
            Most of these functions return a complex, never a complexn, hence most applications will 
            probably not need this type.
            </dd>
           </dl>
          </td>
         </tr>
-->
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
           <nobr>complex res =&nbsp;</nobr>
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_new</b>(atom real, imag) - the standard constructor, simply returns {real,imag}.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            atom res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_real</b>(complexn a) - returns the real part.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            atom res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_imag</b>(complexn a) - returns the imaginary part.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            atom res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_norm</b>(complexn a) - returns the norm - 
            which is a<sup><small>2</small></sup> + b<sup><small>2</small></sup> in this library, agreeing with wikipedia.
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            atom res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_abs</b>(complexn a) - returns the magnitude, aka modulus, ie the square root of the complex_norm().
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            complex res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_add</b>(complexn a, b) - returns a + b.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            complex res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_neg</b>(complexn a) - returns - a.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            complex res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_sub</b>(complexn a, b) - returns a - b.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            complex res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_conjugate</b>(complexn a) - returns the conjugate, ie {complex_real(a),-complex_imag(a)}.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            complex res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_mul</b>(complexn a, b) - returns a * b.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            complex res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_inv</b>(complexn a) - returns the reciprocal.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            complex res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_div</b>(complexn a, b) - returns a / b.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            atom res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_arg</b>(complexn a) - returns the derived polar angle for polar form.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            atom res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_theta</b>(complexn a) - as complex_arg, but normalized to 0 &lt;= theta &lt; 2*PI.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            atom res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_rho</b>(complexn a) - returns the derived polar magnitude rho for polar form. (==complex_abs)
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            complex res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>from_polar</b>(atom rho, theta) - returns Euler&rsquo;s polar-to-Cartesian complex conversion.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            complex res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>with_theta</b>(complexn this, atom theta) - creates new complex with same magnitude but different angle.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            complex res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>with_rho</b>(complexn this, atom rho) - creates new complex with same angle but different magnitude.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            complex res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_log</b>(complexn a) - returns the logarithm of a.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            complex res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_exp</b>(complexn a) - returns the exponent of a.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            complex res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_power</b>(complexn a, p) - returns a raised to the power p.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            complex res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_sqrt</b>(complexn a) - returns the square root of a.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            complex res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_sinh</b>(complexn a) - returns the sinh of a.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            complex res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_cosh</b>(complexn a) - returns the cosh of a.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            complex res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_sin</b>(complexn a) - returns the sin of a.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            complex res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_cos</b>(complexn a) - returns the cos of a.
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            complex res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_round</b>(complexn a, atom inverted_precision=1) - as per <a href="round.htm">round</a>().
             <br>
            </dt>
           </dl>
          </td>
         </tr>
         <tr>
          <td align="right" style="padding: 0; border-style: none;">
            string res =&nbsp;
          </td>
          <td align="left" style="padding: 0; border-style: none;">
           <dl>
            <dt>
            <b>complex_sprint</b>(complexn a, bool both=false) - returns a string representation of a.
             <br>
            </dt>
            <dd class="pad">
            When both is false (the default), can return say "5", "3i" or "0", when true returns "5+0i", "0+3i" and "0+0i" for the same inputs.
            </dd>
           </dl>
          </td>
         </tr>
        </table>
       </div>
       <div style="clear:both;height:1px;"> </div>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
