<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Constants</h1>
      <div id="mainSection">
        These are variables that are assigned an initial value that can never change e.g.
<!--eucode>
    constant MAX = 100
    constant Upper = MAX - 10, Lower = 5
    constant name_list = {"Fred", "George", "Larry"}
</eucode-->
<pre>
<font color="#008080">    constant</font><font color="#000000"> MAX</font><font color="#0000FF"> =</font><font color="#000000"> 100</font>
<font color="#008080">    constant</font><font color="#000000"> Upper</font><font color="#0000FF"> =</font><font color="#000000"> MAX</font><font color="#0000FF"> -</font><font color="#000000"> 10</font><font color="#0000FF">,</font><font color="#000000"> Lower</font><font color="#0000FF"> =</font><font color="#000000"> 5</font>
<font color="#008080">    constant</font><font color="#000000"> name_list</font><font color="#0000FF"> = {</font><font color="#008000">"Fred"</font><font color="#0000FF">,</font><font color="#008000"> "George"</font><font color="#0000FF">,</font><font color="#008000"> "Larry"</font><font color="#0000FF">}</font>
</pre>
        The result of any expression can be assigned to a constant, even one
        involving function calls, but once the assignment is made, the value 
        of the constant variable is "locked in".
       <br>
       <br>
        Constant declaration also supports <a href=multiassign.htm>multiple assignment</a> syntax (this may make more sense after reading that section) e.g.
<!--eucode>
    constant {x, y, z} = {{},5,1.5}
--  constant x = {}, y = 5, z = 1.5 -- equivalent
</eucode-->
<pre>
<font color="#008080">    constant</font><font color="#0000FF"> {</font><font color="#000000">x</font><font color="#0000FF">,</font><font color="#000000"> y</font><font color="#0000FF">,</font><font color="#000000"> z</font><font color="#0000FF">} = {</font><font color="#800000">{}</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#0000FF">,</font><font color="#000000">1.5</font><font color="#0000FF">}</font>
<font color="#000080"><i>--  constant x = {}, y = 5, z = 1.5 -- equivalent</i></font>
</pre>
<!--
        Which is shorthand for/equivalent to:
<x!--eucode>
    constant x = {}, y = 5, z = 1.5
</eucode--x>
 <pre>
<font color="#008080">    constant</font><font color="#000000"> x</font><font color="#0000FF"> = {},</font><font color="#000000"> y</font><font color="#0000FF"> =</font><font color="#000000"> 5</font><font color="#0000FF">,</font><font color="#000000"> z</font><font color="#0000FF"> =</font><font color="#000000"> 1.5</font>
 </pre>
-->
        Typically such desequencing makes much more sense when the rhs is dynamically generated, for instance a function call.
        <br>
        <br>
        <a name="nested"></a>
        Phix also allows nested constant declarations via the ':=' operator, within a (nested) 
        <a name=ncd></a>rhs<small><sup><a href="#ncd1" onclick="opentech()">1</a></sup></small> 
        sequence constant declaration, so instead of 
<!--eucode>
    constant WSAEINTR  = 10004,
             WSAEACCES = 10013
    constant {ERROR_NO, ERROR_NAME, ERROR_SHORT} = columnize(
            {{WSAEINTR,  "WSAEINTR",  "Interrupted function call."},
             {WSAEACCES, "WSAEACCES", "Permission denied."}}
</eucode-->
<pre>
<font color="#008080">    constant</font><font color="#000000"> WSAEINTR </font><font color="#0000FF"> =</font><font color="#000000"> 10004</font><font color="#0000FF">,</font>
<font color="#000000">             WSAEACCES</font><font color="#0000FF"> =</font><font color="#000000"> 10013</font>
<font color="#008080">    constant</font><font color="#0000FF"> {</font><font color="#000000">ERROR_NO</font><font color="#0000FF">,</font><font color="#000000"> ERROR_NAME</font><font color="#0000FF">,</font><font color="#000000"> ERROR_SHORT</font><font color="#0000FF">} =</font><font color="#7060A8"> columnize</font><font color="#0000FF">(</font>
<font color="#800000">            {</font><font color="#800080">{</font><font color="#000000">WSAEINTR</font><font color="#0000FF">, </font><font color="#008000"> "WSAEINTR"</font><font color="#0000FF">, </font><font color="#008000"> "Interrupted function call."</font><font color="#800080">}</font><font color="#0000FF">,</font>
<font color="#800080">             {</font><font color="#000000">WSAEACCES</font><font color="#0000FF">,</font><font color="#008000"> "WSAEACCES"</font><font color="#0000FF">,</font><font color="#008000"> "Permission denied."</font><font color="#800080">}</font><font color="#800000">}</font>
</pre>
        which gets more and more error prone and tedious as the table grows in size, you can define them like this:
<!--eucode>
    constant {ERROR_NO, ERROR_NAME, ERROR_SHORT} = columnize(
            {{WSAEINTR  := 10004, "WSAEINTR",  "Interrupted function call."},
             {WSAEACCES := 10013, "WSAEACCES", "Permission denied."}})
</eucode-->
<pre>
<font color="#008080">    constant</font><font color="#0000FF"> {</font><font color="#000000">ERROR_NO</font><font color="#0000FF">,</font><font color="#000000"> ERROR_NAME</font><font color="#0000FF">,</font><font color="#000000"> ERROR_SHORT</font><font color="#0000FF">} =</font><font color="#7060A8"> columnize</font><font color="#0000FF">(</font>
<font color="#800000">            {</font><font color="#800080">{</font><font color="#000000">WSAEINTR </font><font color="#0000FF"> :=</font><font color="#000000"> 10004</font><font color="#0000FF">,</font><font color="#008000"> "WSAEINTR"</font><font color="#0000FF">, </font><font color="#008000"> "Interrupted function call."</font><font color="#800080">}</font><font color="#0000FF">,</font>
<font color="#800080">             {</font><font color="#000000">WSAEACCES</font><font color="#0000FF"> :=</font><font color="#000000"> 10013</font><font color="#0000FF">,</font><font color="#008000"> "WSAEACCES"</font><font color="#0000FF">,</font><font color="#008000"> "Permission denied."</font><font color="#800080">}</font><font color="#800000">}</font><font color="#0000FF">)</font>
</pre>
        ie on the second line before the first ',' we see both a definition of WSAEINTR and a reference to it (the spaces around := are optional).<br>
        If <a href="with.htm#nestedglobals">with nested_globals</a> is in force, WSAEINTR and WSAEACCES (ie anything declared via the ':=' operator)
        would be global, even when ERROR_XX are local. There is (as yet) no direct converse, but all local then global E_XX=ERROR_XX is close enough.

<!-- (backtrack)
        <b><i>NB</i></b>: nested constants are <i>not</i> supported by <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js</b></span></a>, 
        since there is no JavaScript equivalent.
-->
       <br>
        <a name=nested_declarations></a>
       <br>
        You can also, with some caution, use ":=$" syntax to declare basic-enum-style nested constants, for example
<!--eucode>
    constant ABCD = {A:=$, B:=$, C:=$, D:=$}
--  constant ABCD = {A:=1, B:=2, C:=3, D:=4} -- equivalent
</eucode-->
<pre>
<font color="#008080">    constant</font><font color="#000000"> ABCD</font><font color="#0000FF"> = {</font><font color="#000000">A</font><font color="#0000FF">:=</font><font color="#000000">$</font><font color="#0000FF">,</font><font color="#000000"> B</font><font color="#0000FF">:=</font><font color="#000000">$</font><font color="#0000FF">,</font><font color="#000000"> C</font><font color="#0000FF">:=</font><font color="#000000">$</font><font color="#0000FF">,</font><font color="#000000"> D</font><font color="#0000FF">:=</font><font color="#000000">$</font><font color="#0000FF">}</font>
<font color="#000080"><i>--  constant ABCD = {A:=1, B:=2, C:=3, D:=4} -- equivalent</i></font>
</pre>
        Note however that pmain.e/ncdollar is reset to 1 by the `constant` keyword and incremented on use in this fashion only, and <i>cannot</i> 
        be overidden mid-declaration, so if you tried for instance "1,$,3,$" (iyswim) you would get "1,1,3,2" rather than "1,2,3,4". 
        Also note $ has a completely different meaning within an <a href="enum.htm#dollar">enum</a> (previous item), and within 
        <a href="subscripts.htm#dollar">subscripts</a> (such that s[$] means s[-1] aka s[length(s)]), plus of course this must all be supported 
        by both the normal desktop/Phix and by <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js</b></span></a>, hence: the implementation 
        of ":=$" within constant definitions is deliberately kept as trivial as possible, and constructs such as <code>s[NXT:=$]</code> are 
        <i>not</i> supported and may give unpredictable results (usu -1), in which case you will need to resort to a preceding enum or explicit 
        values (such as <code>s[NXT:=7]</code>), and likewise you <i>cannot</i> use <code>A:=100+$</code> or <code>A:=$+100</code>, since 
        that&rsquo;s not (a plain and simple) ":=$". 
        On the plus side it should be perfectly possible to use ":=$" in as deeply nested sequences as you like.
       <br>
       <br>
<!-- nah - this just reiterates what is said in Technicalia, and anyone confused will read that anyway...
        Specifically, the ":=" operator at the top level of a {} (/sequence) construct on the rhs of a constant definition is treated as a nested 
        constant definition, and obviously you <i>cannot</i> clash with an existing name or overwrite an existing value.
       <br>
       <br>
-->
<!-- (changed in 0.8.2, replaced with static declarations below:)
        Constants may not be declared inside a subroutine. 
-->
        It may help to know that constants are really just variables which must be assigned on declaration, and for which subsequent assignment 
        or other modification is prohibited. The actual constant values, both named and unnamed, are "pooled" so that only a single copy ever 
        gets written out to a compiled executable file.
        <br>
        <a name=NULL></a>
        <br>
        Several builtin constants are automatically defined in psym.e/syminit(), such as C_CHAR, C_BYTE, C_PTR, NULL, WINDOWS, LINUX, PI,
        LOCK_SHARED, LOCK_EXCLUSIVE, BLACK, GREEN, BLUE, DB_OK, DB_OPEN_FAIL, DB_EXISTS_ALREADY, MB_OK, MB_OKCANCEL, IDOK, IDCANCEL,
        IDYES, IDNO, SEEK_OK, and many more besides.
       <br>
       <br>
        Constants can also be declared as global (application-wide), local (file-level), or private (routine-specific), see <a href="scope.htm">scope</a>.
<!--    <h3>Static declarations.</h3> --x>
        <h3>Local constants.</h3>
<!x--   <b>NB</b> static variables are not supported by <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js</b></span></a>, though local 
        constants are.<br> --x>
        A handful of [fixed literal] constants <x!--and static variables--x> may be declared grouped together at the start of a routine, eg
<!x--eucode>
procedure p1()
    constant string c = "p1a"
    ...
end procedure
</eucode--x>
 <pre>
<font color="#008080">procedure</font><font color="#000000"> p1</font><font color="#0000FF">()</font>
<font color="#008080">    constant</font><font color="#004080"> string</font><font color="#000000"> c</font><font color="#0000FF"> =</font><font color="#008000"> "p1a"</font>
<font color="#0000FF">    ...</font>
<font color="#008080">end procedure</font>
 </pre>
        Internally, apart from scope handling as discussed below, the above is treated as
<!x--eucode>
constant string c = "p1a"
procedure p1()
    ...
end procedure
</eucode--x>
 <pre>
<font color="#008080">constant</font><font color="#004080"> string</font><font color="#000000"> c</font><font color="#0000FF"> =</font><font color="#008000"> "p1a"</font>
<font color="#008080">procedure</font><font color="#000000"> p1</font><font color="#0000FF">()
    ...</font>
<font color="#008080">end procedure</font>
 </pre>
<!x--
        Note that static variables (whose private values persist when the routine exits, and are available for when it is next called) 
        must be assigned on declaration, just like constants.<br>
        While static variables are not exactly constants, there is a great deal of similarity in terms of scope rules and enforced assignment 
        (and the precise timing of the latter), and if the compiler treats them as brethren, then maybe you should too.
-->
        <br>
        <br>
        <b><i>WARNING</i></b>: except for literal integer constants, a pure forward call may result in constants being unassigned.<br>
        This should not be an issue if you have already invoked, for instance, a top-level main() after all points of call/declaration.<br>
<!--
        Should an error occur, you may have to hoist the constant declaration(s) not just out of the routine, but to before the call.
        <br>
-->
        <br>
        Several files in the builtins/ directory use local variables instead of constants, and hoist their assignment to an xinit/initx() <br>
        construct, with xinit set false at load-time, and initx() setting it true and assigning any non-integers, for example: 
<!--eucode>
integer xinit = false
string x

procedure initx()
    xinit = true
    x = "x" -- (usually something more involved)
end procedure

global procedure p() -- (possibly forward called)
    if not xinit then initx() end if -- (* many)
    ...
end procedure
</eucode-->
<pre>
<font color="#004080">integer</font><font color="#000000"> xinit</font><font color="#0000FF"> =</font><font color="#004600"> false</font>
<font color="#004080">string</font><font color="#000000"> x
</font>
<font color="#008080">procedure</font><font color="#000000"> initx</font><font color="#0000FF">()</font>
<font color="#000000">    xinit</font><font color="#0000FF"> =</font><font color="#004600"> true</font>
<font color="#000000">    x</font><font color="#0000FF"> =</font><font color="#008000"> "x"</font><font color="#000080"><i> -- (usually something more involved)</i></font>
<font color="#008080">end procedure

global procedure</font><font color="#000000"> p</font><font color="#0000FF">()</font><font color="#000080"><i> -- (possibly forward called)</i></font>
<font color="#008080">    if not</font><font color="#000000"> xinit</font><font color="#008080"> then</font><font color="#000000"> initx</font><font color="#0000FF">()</font><font color="#008080"> end if</font><font color="#000080"><i> -- (* many)</i></font>
<font color="#0000FF">    ...</font>
<font color="#008080">end procedure</font>
</pre>
<!--
        As noted above, statics may exhibit similar behaviour, though in that case you can/should re-do initial assignment in a local if-construct.<br>
-->
        While the above might lose some benefits of "constant", it keeps the "once" aspect and is a completely safe way to deal with forward calls.
        <br>
        <br>
        Types are optional on constant declarations, whether global, file-level, or local. <br>
        While a type check <i>can</i> occur on a constant declaration, it is more likely there just for clarification.
        <br>
        <br>
        **DEV** everything below is currently being reconsidered.<br>
<!-- [DEV] why?? before you even try??
        <br>
        <br>
        <b><i>NB</i></b>: static variables are not supported by <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js</b></span></a>, 
        since there is no JavaScript equivalent, however local constants are fine.
-->
        <small>
          <dl>
           <dt>Update:</dt>
           <dd>
            As of version 1.0.2 local constants are limited to literal values only. A statement/declaration inside a routine such as 
            `constant x = split("one two three")` would not only suffer the same unassigned issues just described on forward calls, 
            and raise some questions over precisely when/where that split() call should occur, but also try to pull in the autoinclude 
            for split(), effectively when part-way through defining another routine, and that way trigger some very strange errors [it 
            probably would be reasonably straightforward to stop it autoincluding things at the wrong time].
            However, the recommended solution to those kind of issues would or might be to call split() inside an `if not init then` 
            construct as just explained, which means the result isn&rsquo;t being stored in a constant anyway... the whole concept of
            constants is much more useful at a higher/more visible level and in reality local constants gain very little over local 
            variables... plus it seems JavaScript recomputes all local constants are every time, unless of course like above, you 
            explicitly manage all that side of things..., so, literals-only it is.
           </dd>
          </dl>
        </small>

        <a name=static></a>
        <small>
          <dl>
           <dt>Aside:</dt>
           <dd>
            Version 0.8.2 introduced an ill-conceived and pooly implemented <span class="illegal">static</span> routine-level declaration, 
            which only ever worked for integers and bools assigned to a literal or pre-existing file-level constant (not a parameter), and 
            proved incompatible with p2js, hence the whole sad and sorry mess was removed in the 1.0.1 release. Given the sheer number of
            problems found when re-examined, I very much doubt that "static" saw any significant active service at all, and in fact, over 
            12 months later, not one single comment was ever made about "static" going awol.
           </dd>
          </dl>
        </small>

<!--
         <br>
        Obviously you are never going to reassign a constant and that way trigger a runtime typecheck error, <br>
        whereas you <i>do</i> without doubt want assignment-time type checks on static variables.
-->
        <br>
        <br>
        <!--Static and c-->Constant declarations must be grouped together at the start of any routine. <br>
        The reason for this is that the [implicit] return decrefs a range of the symtab, so either <br>
        the run-time must start checking every symtab entry (slowing everything down) or <br>
        DoRoutineDef() has to perform a potentially messy re-numbering operation (slowing everything down). <br>
        The compiler already defers parameter creation, for similar prior concerns, so probably best not
        to make it even more convoluted, eh?
        <br>
        <br>
        Logically I suppose there is an argument that you ought be able to do something like this:
<!--eucode>
constant c1 = "a"
procedure p1()
    constant c1 = "p1a"
end procedure
</eucode-->
<pre>
<font color="#008080">constant</font><font color="#000000"> c1</font><font color="#0000FF"> =</font><font color="#008000"> "a"</font>
<font color="#008080">procedure</font><font color="#000000"> p1</font><font color="#0000FF">()</font>
<font color="#008080">    constant</font><font color="#000000"> c1</font><font color="#0000FF"> =</font><font color="#008000"> "p1a"</font>
<font color="#008080">end procedure</font>
</pre>
        However the compiler issues duplicate errors over c1.<br><!-- (ditto static declarations)-->
<!-- nope...
        After some consideration I decided to leave it like that, because the c1 does not appear
        in the call stack part of any ex.err, ie grouped with the parameters and local variables, 
        but instead mixed in along with everything else in the "Global & Local Variables" section.
-->
        After some consideration I decided to leave it like that, mainly because the debugger 
        does not posess the same concept of scope as the compiler proper, and hence would probably
        display the "wrong" c1 if/when asked (by whatever definition of wrong that might be).<br>
        You can however do this:
<!--eucode>
procedure p1()
    constant c = "p1a"
    ?c
end procedure

procedure p2()
    constant c = "p2a"
    ?c
end procedure

p1()
p2()
</eucode-->
<pre>
<font color="#008080">procedure</font><font color="#000000"> p1</font><font color="#0000FF">()</font>
<font color="#008080">    constant</font><font color="#000000"> c</font><font color="#0000FF"> =</font><font color="#008000"> "p1a"</font>
<font color="#0000FF">    ?</font><font color="#000000">c</font>
<font color="#008080">end procedure

procedure</font><font color="#000000"> p2</font><font color="#0000FF">()</font>
<font color="#008080">    constant</font><font color="#000000"> c</font><font color="#0000FF"> =</font><font color="#008000"> "p2a"</font>
<font color="#0000FF">    ?</font><font color="#000000">c</font>
<font color="#008080">end procedure
</font>
<font color="#000000">p1</font><font color="#0000FF">()</font>
<font color="#000000">p2</font><font color="#0000FF">()</font>
</pre>
        Since the c drop out of scope at the end procedure (ditto function/type) there is no name clash.
        <!--Be warned however that while ex.err files do not contain constants, they will show
        both static s, which could potentially be quite misleading when debugging. A future version
        of the compiler might retain lists of all such "hoisted" statics by file, just so that it
        could issue the appropriate errors. However I suspect there will forever be some forms of
        conflicts/traps/gotchas for the unwary between scoped local constants/statics and global
        (or file-local) variables/constants... unless they are all uniquely named. Should things 
        get confusing, my advice would be to pop(/copy) it into a plain old local variable and 
        inspect that, or just rename it to see if that clears things up.
        <br>
        <br>
        To re-iterate, I think that compilation/running should be fine, it is in debugging where 
        these issues may arise, and of course when they are kept dirt-simple they&rsquo;ll (as in
        local constants and static variables) not need much debugging.-->
       <br>
       <br>
       <table>
        <col style="width: 8%"/>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="multiassign.htm">multiple assignment</a>,
          <a href="columnize.htm">columnize</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
          <a name=ncd1></a><small><sup><a href="#ncd">1</a></sup></small> (nested constant declarations) Specifically when pmain.e/DoSequence() 
          with asConst!=-1, as set and reset by DoConstant(), encounters the aforementioned ":=" operator.
          <br>
          <br>
          Obviously nested constants <i>cannot</i> clash with an existing name or overwrite an existing value.
          <dl>
           <dt>aside:</dt>
           <dd>
            When first planning nested constant declarations, I (bizarrely) assumed it would be changes to GetMultiAssignSet(), but of course<br>
            <nobr><code>constant {C1:=1,...} = <i>&lt;expr&gt;</i></code></nobr> would (ill-)logically define C1 as 1 and them immediately try 
            to re-assign something to it.<br>
            In other words there are strict limitations on nested declarations that are not always immediately obvious. They are specifically 
            only permitted within rhs sequences, so for instance <code>constant X = f({Y:=1})</code> is fine but <code>constant X = f(Y:=1)</code>
            is not, and besides the latter would encroach on <a href="procedures.htm#namedparams">named parameter</a> syntax, and obviously the
            {} in the former prevents that kind of misinterpretation. Any error messages should however be crystal clear, and their absence taken 
            as a clear indication that everything is fine.
           </dd>
          </dl>
            Prior to the introduction of <a href="with.htm#nestedglobals">with nested_globals</a> I said this:
            <br>
            <br>
            <small>
            It is not possible to micro-manage global status of nested declarations: ERROR_NO, ERROR_NAME, ERROR_SHORT, WSAEINTR, and WSAEACCES 
            are either <i>all</i> global, or <i>none</i> of them are. However you can of course split the above definition as follows
            <br>
<!--eucode>
    constant ERRORS = {{WSAEINTR  := 10004, "WSAEINTR",  "Interrupted function call."},
                       {WSAEACCES := 10013, "WSAEACCES", "Permission denied."}}
    global constant {ERROR_NO, ERROR_NAME, ERROR_SHORT} = columnize(ERRORS)
</eucode-->
<pre>
<font color="#008080">    constant</font><font color="#000000"> ERRORS</font><font color="#0000FF"> = {</font><font color="#800000">{</font><font color="#000000">WSAEINTR </font><font color="#0000FF"> :=</font><font color="#000000"> 10004</font><font color="#0000FF">,</font><font color="#008000"> "WSAEINTR"</font><font color="#0000FF">, </font><font color="#008000"> "Interrupted function call."</font><font color="#800000">}</font><font color="#0000FF">,</font>
<font color="#800000">                       {</font><font color="#000000">WSAEACCES</font><font color="#0000FF"> :=</font><font color="#000000"> 10013</font><font color="#0000FF">,</font><font color="#008000"> "WSAEACCES"</font><font color="#0000FF">,</font><font color="#008000"> "Permission denied."</font><font color="#800000">}</font><font color="#0000FF">}</font>
<font color="#008080">    global constant</font><font color="#0000FF"> {</font><font color="#000000">ERROR_NO</font><font color="#0000FF">,</font><font color="#000000"> ERROR_NAME</font><font color="#0000FF">,</font><font color="#000000"> ERROR_SHORT</font><font color="#0000FF">} =</font><font color="#7060A8"> columnize</font><font color="#0000FF">(</font><font color="#000000">ERRORS</font><font color="#0000FF">)</font>
</pre>
          and that way make ERROR_NO, ERROR_NAME, and ERROR_SHORT global, but keep WSAEINTR and WSAEACCES (and ERRORS) private.
          </small>
          <br>
          <br>
          In effect the opposite is now (a bit more) possible, although it would be quite fair to say that (the new) option is a little blunt 
          and "all-or-nothing". Let me know if you want or have a bright idea for something a little better, but I would rather avoid making 
          anything in this regard overly fiddly, repetitive, or downright tedious.
         </td>
        </tr>
       </table>
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
