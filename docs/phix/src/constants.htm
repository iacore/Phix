<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Constants</h1>
      <div id="mainSection">
        These are variables that are assigned an initial value that can never change e.g.
<!--eucode>
    constant MAX = 100
    constant Upper = MAX - 10, Lower = 5
    constant name_list = {"Fred", "George", "Larry"}
</eucode-->
<pre>
<font color="#008080">    constant</font><font color="#000000"> MAX</font><font color="#0000FF"> =</font><font color="#000000"> 100</font>
<font color="#008080">    constant</font><font color="#000000"> Upper</font><font color="#0000FF"> =</font><font color="#000000"> MAX</font><font color="#0000FF"> -</font><font color="#000000"> 10</font><font color="#0000FF">,</font><font color="#000000"> Lower</font><font color="#0000FF"> =</font><font color="#000000"> 5</font>
<font color="#008080">    constant</font><font color="#000000"> name_list</font><font color="#0000FF"> = {</font><font color="#008000">"Fred"</font><font color="#0000FF">,</font><font color="#008000"> "George"</font><font color="#0000FF">,</font><font color="#008000"> "Larry"</font><font color="#0000FF">}</font>
</pre>
        The result of any expression can be assigned to a constant, even one
        involving function calls, but once the assignment is made, the value 
        of the constant variable is "locked in".
       <br>
       <br>
        Constant declaration also supports <a href=multiassign.htm>multiple assignment</a> syntax (this may make more sense after reading that section) e.g.
<!--eucode>
    constant {x, y, z} = {{},5,1.5}
</eucode-->
<pre>
<font color="#008080">    constant</font><font color="#0000FF"> {</font><font color="#000000">x</font><font color="#0000FF">,</font><font color="#000000"> y</font><font color="#0000FF">,</font><font color="#000000"> z</font><font color="#0000FF">} = {</font><font color="#800000">{}</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#0000FF">,</font><font color="#000000">1.5</font><font color="#0000FF">}</font>
</pre>
        Which is shorthand for/equivalent to:
<!--eucode>
    constant x = {}, y = 5, z = 1.5
</eucode-->
<pre>
<font color="#008080">    constant</font><font color="#000000"> x</font><font color="#0000FF"> = {},</font><font color="#000000"> y</font><font color="#0000FF"> =</font><font color="#000000"> 5</font><font color="#0000FF">,</font><font color="#000000"> z</font><font color="#0000FF"> =</font><font color="#000000"> 1.5</font>
</pre>
        Typically such desequencing makes much more sense when the rhs is dynamically generated, for instance a function call.
        <br>
        <br>
        Phix also allows nested constant declarations via the ':=' operator, as long as they occur at the top 
        level of a (nested) {} constant declaration<small><sup>1 (see technicalia)</sup></small>, so instead of 
<!--eucode>
    constant WSAEINTR  = 10004,
             WSAEACCES = 10013
    constant {ERROR_NO, ERROR_NAME, ERROR_SHORT} = columnize(
            {{WSAEINTR,  "WSAEINTR",  "Interrupted function call."},
             {WSAEACCES, "WSAEACCES", "Permission denied."}}
</eucode-->
<pre>
<font color="#008080">    constant</font><font color="#000000"> WSAEINTR </font><font color="#0000FF"> =</font><font color="#000000"> 10004</font><font color="#0000FF">,</font>
<font color="#000000">             WSAEACCES</font><font color="#0000FF"> =</font><font color="#000000"> 10013</font>
<font color="#008080">    constant</font><font color="#0000FF"> {</font><font color="#000000">ERROR_NO</font><font color="#0000FF">,</font><font color="#000000"> ERROR_NAME</font><font color="#0000FF">,</font><font color="#000000"> ERROR_SHORT</font><font color="#0000FF">} =</font><font color="#5E005E"> columnize</font><font color="#0000FF">(</font>
<font color="#800000">            {</font><font color="#800080">{</font><font color="#000000">WSAEINTR</font><font color="#0000FF">, </font><font color="#008000"> "WSAEINTR"</font><font color="#0000FF">, </font><font color="#008000"> "Interrupted function call."</font><font color="#800080">}</font><font color="#0000FF">,</font>
<font color="#800080">             {</font><font color="#000000">WSAEACCES</font><font color="#0000FF">,</font><font color="#008000"> "WSAEACCES"</font><font color="#0000FF">,</font><font color="#008000"> "Permission denied."</font><font color="#800080">}</font><font color="#800000">}</font>
</pre>
        which gets more and more error prone and tedious as the table grows in size, you can define them all together like this:
<!--eucode>
    constant {ERROR_NO, ERROR_NAME, ERROR_SHORT} = columnize(
            {{WSAEINTR  := 10004, "WSAEINTR",  "Interrupted function call."},
             {WSAEACCES := 10013, "WSAEACCES", "Permission denied."}})
</eucode-->
<pre>
<font color="#008080">    constant</font><font color="#0000FF"> {</font><font color="#000000">ERROR_NO</font><font color="#0000FF">,</font><font color="#000000"> ERROR_NAME</font><font color="#0000FF">,</font><font color="#000000"> ERROR_SHORT</font><font color="#0000FF">} =</font><font color="#5E005E"> columnize</font><font color="#0000FF">(</font>
<font color="#800000">            {</font><font color="#800080">{</font><font color="#000000">WSAEINTR </font><font color="#0000FF"> :=</font><font color="#000000"> 10004</font><font color="#0000FF">,</font><font color="#008000"> "WSAEINTR"</font><font color="#0000FF">, </font><font color="#008000"> "Interrupted function call."</font><font color="#800080">}</font><font color="#0000FF">,</font>
<font color="#800080">             {</font><font color="#000000">WSAEACCES</font><font color="#0000FF"> :=</font><font color="#000000"> 10013</font><font color="#0000FF">,</font><font color="#008000"> "WSAEACCES"</font><font color="#0000FF">,</font><font color="#008000"> "Permission denied."</font><font color="#800080">}</font><font color="#800000">}</font><font color="#0000FF">)</font>
</pre>
        ie on the second line before the first ',' we see both a definition of WSAEINTR and a reference to it (the spaces around := are optional).
<!-- (backtrack)
        <b><i>NB</i></b>: nested constants are <i>not</i> supported by <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js</b></span></a>, 
        since there is no JavaScript equivalent.
-->
       <br>
       <br>
<!-- nah - this just reiterates what is said in Technicalia, and anyone confused will read that anyway...
        Specifically, the ":=" operator at the top level of a {} (/sequence) construct on the rhs of a constant definition is treated as a nested 
        constant definition, and obviously you <i>cannot</i> clash with an existing name or overwrite an existing value.
       <br>
       <br>
-->
<!-- (changed in 0.8.2, replaced with static declarations below:)
        Constants may not be declared inside a subroutine. 
-->
        It may help to know that constants are really just variables which must be assigned on declaration, and for which subsequent assignment 
        or other modification is prohibited. The actual constant values, both named and unnamed, are "pooled" so that only a single copy ever 
        gets written out to a compiled executable file.
        <br>
        <br>
        Several builtin constants are automatically defined in psym.e/syminit(), such as C_CHAR, C_BYTE, C_PTR, NULL, WINDOWS, LINUX, PI,
        LOCK_SHARED, LOCK_EXCLUSIVE, BLACK, GREEN, BLUE, DB_OK, DB_OPEN_FAIL, DB_EXISTS_ALREADY, MB_OK, MB_OKCANCEL, IDOK, IDCANCEL,
        IDYES, IDNO, SEEK_OK, and many more besides.
       <br>
        <a name=static></a>
       <br>
        <h3>Static declarations.</h3>
        A handful of constants and static variables may be declared grouped together at the start of a routine, eg
<!--eucode>
procedure p1()
    constant string c = "p1a"
    static string s = "p1b"
    ...
end procedure
</eucode-->
<pre>
<font color="#008080">procedure</font><font color="#000000"> p1</font><font color="#0000FF">()</font>
<font color="#008080">    constant</font><font color="#004080"> string</font><font color="#000000"> c</font><font color="#0000FF"> =</font><font color="#008000"> "p1a"</font>
<font color="#008080">    static</font><font color="#004080"> string</font><font color="#000000"> s</font><font color="#0000FF"> =</font><font color="#008000"> "p1b"</font>
<font color="#0000FF">    ...</font>
<font color="#008080">end procedure</font>
</pre>
        Internally, apart from scope handling as discussed below, the above is treated as
<!--eucode>
constant string c = "p1a"
string s = "p1b"
procedure p1()
    ...
end procedure
</eucode-->
<pre>
<font color="#008080">constant</font><font color="#004080"> string</font><font color="#000000"> c</font><font color="#0000FF"> =</font><font color="#008000"> "p1a"</font>
<font color="#004080">string</font><font color="#000000"> s</font><font color="#0000FF"> =</font><font color="#008000"> "p1b"</font>
<font color="#008080">procedure</font><font color="#000000"> p1</font><font color="#0000FF">()
    ...</font>
<font color="#008080">end procedure</font>
</pre>
        Note that static variables (whose private values persist when the routine exits, and are available for when it is next called) 
        must be assigned on declaration, just like constants.<br>
        While static variables are not exactly constants, there is a great deal of similarity in terms of scope rules and enforced assignment 
        (and the precise timing of the latter), <br>
        and if the compiler treats them as brethren, then maybe you should too.
        <br>
        <br>
        <b><i>WARNING</i></b>: except for literal integer constants, a pure forward call may result in the constant being unassigned.<br>
        Should that happen, you may have to hoist the constant declaration(s) not just out of the routine, but to before the call.<br>
        Several auto-includes in builtins/ use local variables instead of constants, and hoist their assignment into an initx/xinit() construct.<br>
        Said construct works because initx is assigned a literal integer constant at compile-time, with xinit() assigning any non-integers.<br>
        As noted above, statics may exhibit similar behaviour, though in that case you can/should re-do initial assignment in a local if-construct.<br>
        This should not be an issue if you have already invoked, for instance, a top-level main() after all points of call/declaration.
<!-- [DEV] why?? before you even try??
        <br>
        <br>
        <b><i>NB</i></b>: static variables are not supported by <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js</b></span></a>, 
        since there is no JavaScript equivalent, however local constants are fine.
-->
        <br>
        <br>
        Types are optional on constant declarations whereas they are mandatory on static declarations. <br>
        While a type check <i>can</i> occur on a constant declaration, it is more likely there just for clarification. <br>
        Obviously you are never going to reassign a constant and that way trigger a runtime typecheck error, <br>
        whereas you <i>do</i> without doubt want assignment-time type checks on static variables.
        <br>
        <br>
        Static and constant declarations must be grouped together at the start of any routine. <br>
        The reason for this is that the [implicit] return decrefs a range of the symtab, so either <br>
        the run-time must start checking every symtab entry (slowing everything down) or <br>
        DoRoutineDef() has to perform a potentially messy re-numbering operation (slowing everything down). <br>
        The compiler already defers parameter creation, for similar prior concerns, so probably best not
        to make it even more convoluted, eh?
        <br>
        <br>
        Logically I suppose there is an argument that you ought be able to do something like this:
<!--eucode>
constant c1 = "a"
procedure p1()
    constant c1 = "p1a"
end procedure
</eucode-->
<pre>
<font color="#008080">constant</font><font color="#000000"> c1</font><font color="#0000FF"> =</font><font color="#008000"> "a"</font>
<font color="#008080">procedure</font><font color="#000000"> p1</font><font color="#0000FF">()</font>
<font color="#008080">    constant</font><font color="#000000"> c1</font><font color="#0000FF"> =</font><font color="#008000"> "p1a"</font>
<font color="#008080">end procedure</font>
</pre>
        However the compiler issues duplicate errors over c1 (ditto static declarations).<br>
<!-- nope...
        After some consideration I decided to leave it like that, because the c1 does not appear
        in the call stack part of any ex.err, ie grouped with the parameters and local variables, 
        but instead mixed in along with everything else in the "Global & Local Variables" section.
-->
        After some consideration I decided to leave it like that, mainly because the debugger 
        does not posess the same concept of scope as the compiler proper, and hence would probably
        display the "wrong" c1 if/when asked (by whatever definition of wrong that might be).<br>
        You can however do this:
<!--eucode>
procedure p1()
    constant c = "p1a"
    static string s = "p1b"
    ?{c,s}
end procedure

procedure p2()
    constant c = "p2a"
    static string s = "p2b"
    ?{c,s}
end procedure

p1()
p2()
</eucode-->
<pre>
<font color="#008080">procedure</font><font color="#000000"> p1</font><font color="#0000FF">()</font>
<font color="#008080">    constant</font><font color="#000000"> c</font><font color="#0000FF"> =</font><font color="#008000"> "p1a"</font>
<font color="#008080">    static</font><font color="#004080"> string</font><font color="#000000"> s</font><font color="#0000FF"> =</font><font color="#008000"> "p1b"</font>
<font color="#0000FF">    ?{</font><font color="#000000">c</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#0000FF">}</font>
<font color="#008080">end procedure

procedure</font><font color="#000000"> p2</font><font color="#0000FF">()</font>
<font color="#008080">    constant</font><font color="#000000"> c</font><font color="#0000FF"> =</font><font color="#008000"> "p2a"</font>
<font color="#008080">    static</font><font color="#004080"> string</font><font color="#000000"> s</font><font color="#0000FF"> =</font><font color="#008000"> "p2b"</font>
<font color="#0000FF">    ?{</font><font color="#000000">c</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#0000FF">}</font>
<font color="#008080">end procedure
</font>
<font color="#000000">p1</font><font color="#0000FF">()</font>
<font color="#000000">p2</font><font color="#0000FF">()</font>
</pre>
        Since c and s drop out of scope at the end procedure (ditto function/type) there is no name
        clash. Be warned however that while ex.err files do not contain constants, they will show
        both static s, which could potentially be quite misleading when debugging. A future version
        of the compiler might retain lists of all such "hoisted" statics by file, just so that it
        could issue the appropriate errors. However I suspect there will forever be some forms of
        conflicts/traps/gotchas for the unwary between scoped local constants/statics and global
        (or file-local) variables/constants... unless they are all uniquely named. Should things 
        get confusing, my advice would be to pop(/copy) it into a plain old local variable and 
        inspect that, or just rename it to see if that clears things up.
        <br>
        <br>
        To re-iterate, I think that compilation/running should be fine, it is in debugging where 
        these issues may arise, and of course when they are kept dirt-simple they&rsquo;ll (as in
        local constants and static variables) not need much debugging.
       <br>
       <br>
       <table>
        <col style="width: 8%"/>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="multiassign.htm">multiple assignment</a>,
          <a href="columnize.htm">columnize</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
          <small><sup>1</sup></small> (nested constant declarations) Specifically when pmain.e/DoSequence() with asConst!=-1, as set and reset 
            by DoConstant(), encounters the aforementioned ":=" operator.
          <br>
          <br>
          Obviously nested constants <i>cannot</i> clash with an existing name or overwrite an existing value.
          <dl>
           <dt>aside:</dt>
           <dd>
            When first planning nested constant declarations, I (bizarrely) assumed it would be changes to GetMultiAssignSet(), but of course
            <br>
            <nobr><code>constant {C1:=1,...} = <i>&lt;expr&gt;</i></code></nobr> would (ill-)logically define C1 as 1 and them immediately try 
            to re-assign something to C1.
            <br>
            In other words there are strict limitations on nested declarations that are not always immediately obvious. They are specifically 
            only permitted within rhs sequences, so for instance <code>constant X = f({Y:=1})</code> is fine but <code>constant X = f(Y:=1)</code>
            is not, and besides the latter would encroach on <a href="procedures.htm#namedparams">named parameter</a> syntax anyway.
           </dd>
          </dl>
          It is not possible to micro-manage global status of nested declarations: either ERROR_NO, ERROR_NAME, ERROR_SHORT, WSAEINTR, and 
          WSAEACCES are all global, or none of them are. However you can of course split the above definition as say
            <br>
            <br>
<!--eucode>
    constant ERRORS = 
            {{WSAEINTR  := 10004, "WSAEINTR",  "Interrupted function call."},
             {WSAEACCES := 10013, "WSAEACCES", "Permission denied."}}
    global constant {ERROR_NO, ERROR_NAME, ERROR_SHORT} = columnize(ERRORS)
</eucode-->
<pre>
<font color="#008080">    constant</font><font color="#000000"> ERRORS</font><font color="#0000FF"> = 
            {</font><font color="#800000">{</font><font color="#000000">WSAEINTR </font><font color="#0000FF"> :=</font><font color="#000000"> 10004</font><font color="#0000FF">,</font><font color="#008000"> "WSAEINTR"</font><font color="#0000FF">, </font><font color="#008000"> "Interrupted function call."</font><font color="#800000">}</font><font color="#0000FF">,</font>
<font color="#800000">             {</font><font color="#000000">WSAEACCES</font><font color="#0000FF"> :=</font><font color="#000000"> 10013</font><font color="#0000FF">,</font><font color="#008000"> "WSAEACCES"</font><font color="#0000FF">,</font><font color="#008000"> "Permission denied."</font><font color="#800000">}</font><font color="#0000FF">}</font>
<font color="#008080">    global constant</font><font color="#0000FF"> {</font><font color="#000000">ERROR_NO</font><font color="#0000FF">,</font><font color="#000000"> ERROR_NAME</font><font color="#0000FF">,</font><font color="#000000"> ERROR_SHORT</font><font color="#0000FF">} =</font><font color="#5E005E"> columnize</font><font color="#0000FF">(</font><font color="#000000">ERRORS</font><font color="#0000FF">)</font>
</pre>
          <br>
          and that way make ERROR_NO, ERROR_NAME, and ERROR_SHORT global, but keep WSAEINTR and WSAEACCES (and ERRORS) private.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
