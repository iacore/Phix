<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">crash</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         crash(<a href="string.htm">string</a> msg, <a href="object.htm">object</a> data={}, integer nFrames=1)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Crash the running program, displaying a formatted error message the way <a href="printf.htm">printf</a>() does.
            <br>
            <br>
            msg: the message text, optionally with embedded <a href="sprintf.htm">sprintf</a> format specifiers.<br>
            data: if not {}, then msg = <a href="sprintf.htm">sprintf</a>(msg,data) is performed first of all.<br>
            nFrames: number of frames to pop from the stack, see below.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            The default value for nFrames pops the crash routine itself, and that is suitable for most application code,
            whereas a value of 2 is suitable for some global library routines, and 3 for some private library routines.<br>
            Several builtins\ and builtins\VM\ files try to report the error on the calling statement rather than in themselves, 
            for instance it is easily several thousand times more likely that the wrong parameters were passed to printf(), 
            than the actual problem being a bug within printf() itself.<br>
            Obviously you should normally test that the crash actually occurs, and that it leads the developer directly to the 
            most likely source of error, as opposed to code that does not usually need fixing.
            <br>
            <br>
            The program terminates as for any runtime error, unless there is a containing <a href="try.htm">try/catch</a> statement.
<!--
            <br>
            <br>
            Note that crash() is slightly more sanitised, and biased slightly away from developer-friendliness and more towards 
            user-friendliness (yeah, not really buying that one either). As a developer, I prefer throw() and even 9/0 to crash(), 
            at least when debugging, although to be fair the difference can be a bit subtle. Lastly, crash() predates throw() by 
            several years, if that means anything.
-->
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          supported, however nFrames is ignored (any error handling is the responsibility of the browser development tools anyway).
         </td>
        </tr>
        <tr>
         <td>
          <b>Auxillary Functions</b>
         </td>
         <td>
            <b>assert</b>(<a href="integer.htm#bool">bool</a> condition, <a href="string.htm">string</a> msg="",
                                                                         <a href="sequence.htm">sequence</a> args={})
            is roughly the same as <code>crash("assertion failure: "&msg)</code> when condition is false, albeit not actually 
            implemented like that (it predated the nFrames parameter of crash).
            <br>
            <br>
            Note there is as yet no option to suppress code generation for a production build, for that define DEBUG as a true/false 
            constant, wrap all assert() in <code>if DEBUG then</code>, and let me know if that becomes too cumbersome in one of your
            projects.
<!--
            <code>if not <i>condition</i> then crash("assertion failure: "&msg) end if</code>, albeit not actually implemented like that.
            and that will only be added if someone 
            produces a compelling argument for it, in the form of unacceptable real-world size/performance results, with every assert
            statement wrapped in  where so that things can be tested/compared.
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
if fn=-1 then
    crash("cannot open config file")
end if
-- or
assert(fn!=-1)
-- or
assert(fn!=-1,"cannot open config file")
</eucode-->
<pre>
<font color="#008080">if</font><font color="#000000"> fn</font><font color="#0000FF">=-</font><font color="#000000">1</font><font color="#008080"> then</font>
<font color="#5E005E">    crash</font><font color="#0000FF">(</font><font color="#008000">"cannot open config file"</font><font color="#0000FF">)</font>
<font color="#008080">end if</font>
<font color="#000080"><i>-- or</i></font>
<font color="#5E005E">assert</font><font color="#0000FF">(</font><font color="#000000">fn</font><font color="#0000FF">!=-</font><font color="#000000">1</font><font color="#0000FF">)</font>
<font color="#000080"><i>-- or</i></font>
<font color="#5E005E">assert</font><font color="#0000FF">(</font><font color="#000000">fn</font><font color="#0000FF">!=-</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"cannot open config file"</font><font color="#0000FF">)</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            Partly in builtins\pCrashN.e (an autoinclude), but mainly via <a href="crash_message.htm">crash_message</a>() and :!iDiag in builtins\VM\pDiag.e (also an autoinclude)
            - be warned however it is low-level complicated stuff that you do not need to know.<br>
            assert() is separately implemented in builtins\assert.e (another autoinclude) and again partly in pDiag.e, this time via e119af(edi).
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="printf.htm">printf</a>,
          <a href="sprintf.htm">sprintf</a>,
          <a href="crash_file.htm">crash_file</a>,
          <a href="crash_message.htm">crash_message</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
