<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">create_thread</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         <a href="atom.htm">atom</a> hThread = create_thread(<a href="integer.htm">integer</a> rid, <a href="sequence.htm">sequence</a> params, <a href="integer.htm">integer</a> flags=0)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Creates a new thread, using a <a href="call_proc.htm">call_proc</a> based approach in a new and private call stack.
            <br>
            <br>
            rid must be the <a href="routine_id.htm">routine_id</a> of a procedure that can accept the parameters specified in params.
            <br>
            <br>
            The optional flags parameter can be CREATE_SUSPENDED to create a thread in a suspended state, which does not run until 
            <a href="resume_thread.htm">resume_thread</a>(hThread) is called. For the default value of 0, execution begins immediately.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          <a href="notpgui.htm"><span class="illegal">Not supported</span></a>.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            Although not strictly necessary, the specified procedure should finish with a call to <a href="exit_thread.htm">exit_thread</a>().
            <br>
            <br>
            Should a thread want to "return" a result, it should do so by sending an appropriate message, or perhaps setting a flag.
            <br>
            <br>
            Appropriate locking is required when operating on any data (including non-integer constants) that may be shared with any other threads.
            <br>
            <br>
            The main application should normally <a href="wait_thread.htm">wait_thread</a>(hThread) before terminating.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
atom eThread = create_thread(routine_id("mythread"),{1})
...
terminate = 1
wait_thread(eThread)
</eucode-->
<pre>
<font color="#000000"></font><font color="#004080">atom</font><font color="#000000"> eThread</font><font color="#0000FF"> =</font><font color="#5E005E"> create_thread</font><font color="#0000FF">(</font><font color="#5E005E">routine_id</font><font color="#800000">(</font><font color="#008000">"mythread"</font><font color="#800000">)</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">1</font><font color="#800000">}</font><font color="#0000FF">)
...
</font><font color="#000000">terminate</font><font color="#0000FF"> =</font><font color="#000000"> 1
</font><font color="#5E005E">wait_thread</font><font color="#0000FF">(</font><font color="#000000">eThread</font><font color="#0000FF">)</font>
</pre>
          <br>
          For a complete runnable example, see demo\rosetta\AtomicUrpdates.exw
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\VM\pThreadN.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="call_proc.htm">call_proc</a>,
          <a href="routine_id.htm">routine_id</a>,
          <a href="resume_thread.htm">resume_thread</a>,
          <a href="exit_thread.htm">exit_thread</a>,
          <a href="wait_thread.htm">wait_thread</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
