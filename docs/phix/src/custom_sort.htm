<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">custom_sort</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
         <a href="sequence.htm">sequence</a> s2 = custom_sort(<a href="object.htm">object</a> rid_s, 
                                                              <a href="sequence.htm">sequence</a> s1,
                                                              <a href="object.htm">object</a> data={}, 
                                                              <a href="integer.htm">integer</a> order=ASCENDING)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Sort the elements of <a href="sequence.htm">sequence</a> s1, using the compare function rid_s, which
            must have been obtained from calling <a href="routine_id.htm">routine_id</a>.
            <br>
            <br>
            Alternatively (new in 0.8.0) rid_s can be the actual data to be sorted when s1 is a <a href="tagset.htm">tagset</a>, in 
            which case a standard compare is used.
            <br>
            <br>
            To use a custom comparison routine in a tag sort, put the actual data to be sorted in data[1] instead (and tags in s1).<br>
            Prior to 0.8.0 the only way that could be achieved was for the data being sorted to be placed in a file-level variable 
            (see demo\tagsort.exw) that the custom comparison routine would then reference, which was obviously not thread-safe, and
            not even task-safe should the comparison routine invoke <a href="task_yield.htm">task_yield</a>(), presumably in an attempt
            to remain responsive during a potentially lengthy sorting operation.
            <br>
            <br>
            The data parameter, if provided, should be a length-1 sequence, or an atom, containing the third parameter to be passed to 
            the comparison routine.
            <br>
            <br>
            If data is left as the default of {}, the comparison routine only recieves two arguments, and in that way legacy code can 
            continue to use custom_sort() without having to be modified.
            <br>
            <br>
            The order parameter can also be DESCENDING, or one of the other aliases, NORMAL_ORDER or REVERSE_ORDER.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>
            The compare function should be similar to the builtin compare(), accepting two arguments and returning -1, 0 or +1,
            or for a custom tag sort (with data!={}) it should have a signature similar to (integer i, j, object user_data),
            where user_data gets set to data[1], or data itself should it be an atom [eg a tag sort on raw memory].
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b><nobr>Auxillary routine:</nobr></b>
         </td>
         <td>
            For compatibility with OpenEuphoria, builtins/sort.e also defines <b>sort_columns</b>(sequence x, sequence column_list)
            as a specific custom sort. The column list should be an ordered set of integer column indexes, which can be negative to 
            sort that particular column in descending order, eg <code>table = sort_columns(table,{2,1,-3})</code>.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b><nobr>Example Program:</nobr></b>
         </td>
         <td>
          <font color="#5500FF">
           <b>demo\tagsort.exw</b>
          </font>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\sort.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="sort.htm">sort</a>,
          <a href="compare.htm">compare</a>,
          <a href="routine_id.htm">routine_id,</a>
          <a href="tagset.htm">tagset</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td valign=top>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            You can actually return a boolean result from the compare function when sorting in DESCENDING order, false when they should be swapped, or 
            a negated boolean when sorting in ASCENDING order (-true when they should <i>not</i> be swapped), however the [negated] double or triple 
            negative is a little bit confusing and somewhat misleading to say the least, and would break should the sort order be changed, therefore 
            returning a -1/0/+1 result is strongly advised and recommended instead (of a boolean).
            <br>
            <br>
            Be warned that I have seen C++/Go/Lua with a custom comparator which yields a boolean result and would not translate naturally to phix, 
            plus I have also seen custom comparators in other programming languages that yield/expect all negative numbers to be treated as -1 and 
            all positive ones as +1, which likewise phix does <i>not</i> honour as things currently stand.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
