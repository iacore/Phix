<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Declarations</h1>
      <div id="mainSection">
        Variable names and other user-defined symbols are known as <b>identifiers</b>, which may be of any
        length, with upper and lower case being distinct. Identifiers must start with a letter and then be 
        followed by letters, digits or underscores. All unicode characters may be used, as long as your
        editor saves the source files as utf-8 - note however that all non-ascii characters are treated as
        letters, including a few that might look rather similar to operators, and even some numbers.<br>
        The following <b>reserved words</b> have special meaning in Phix and may not be used as identifiers:
<!-- class method -->
       <b>
 <pre><font color="#008080">
    <a href="logicops.htm"  >and</a>            <a href="logicops.htm"  >or</a>             <a href="logicops.htm" >not</a>         <a href="logicops.htm"  >xor</a>
    <a href="switch.htm"    >break</a>          <a href="exit.htm"      >continue</a>       <a href="exit.htm"     >exit</a>        <a href="switch.htm"    >fallthru</a>
    <a href="switch.htm"    >case</a>           <a href="switch.htm"    >default</a>        <a href="format.htm"   >format</a>      <a href="switch.htm"    >fallthrough</a>
    <a href="constants.htm" >constant</a>       <a href="enum.htm"      >enum</a>           <a href="constants.htm">static</a>      <a href="iff.htm"       >iff</a>
    <a href="try.htm"       >try</a>            <a href="try.htm"       >catch</a>          <a href="dynamic.htm"  >dynamic</a>     <a href="iff.htm"       >iif</a><small><sup>*</sup></small>
    <a href="class.htm"     >class</a>          <a href="struct.htm"    >struct</a>         <a href="class.htm"    >abstract</a>    <a href="extended.htm"  >extends</a>
    <a href="for.htm"       >do</a>             <a href="while.htm"     >while</a>          <a href="switch.htm"   >switch</a>      <a href="class.htm"     >public</a>
    <a href="procedures.htm">forward</a>        <a href="scope.htm"     >global</a>         <a href="scope.htm"    >export</a>      <a href="class.htm"     >private</a>
    <a href="for.htm"       >for</a>            <a href="for.htm"       >by</a>             <a href="for.htm"      >to</a>          <a href="procedures.htm">end</a>
    <a href="if.htm"        >if</a>             <a href="if.htm"        >then</a>           <a href="if.htm"       >elsif</a>       <a href="if.htm"        >else</a>
    <a href="logicops.htm"  >true</a>           <a href="logicops.htm"  >false</a>          <a href="constants.htm">null</a>        <a href="goto.htm"      >goto</a>
    <a href="functions.htm" >function</a>       <a href="procedures.htm">procedure</a>      <a href="types.htm"    >type</a>        <a href="return.htm"    >return</a>
    <a href="eucompat.htm"  >ifdef</a>          <a href="eucompat.htm"  >elsifdef</a>       <a href="eucompat.htm" >elsedef</a></font><font color="#2C5C2C">
    <a href="include.htm"   >include</a>        <a href="with.htm"      >with</a>           <a href="with.htm"     >without</a></font>
 </pre>
       </b>
        Edita displays these words in teal (easily changed in Options/Colours).<br>
        <small>(* iif is a simple alias of iff, and included for compatibility reasons only, ditto fallthr[o]u[gh], and int[eger], seq[uence] below)</small><br>
        Since version 0.8.0 the following are also treated as reserved words:
       <b>
 <pre><font color="#008080">
    <a href="abort.htm"     >abort</a>          <a href="atom.htm"      >atom</a>           <a href="atom.htm"     >number</a>      <a href="integer.htm"   >bool</a>
    <a href="close.htm"     >close</a>          <a href="compare.htm"   >compare</a>        <a href="integer.htm"  >int</a>         <a href="integer.htm"   >integer</a>
    <a href="sequence.htm"  >seq</a>            <a href="sequence.htm"  >sequence</a>       <a href="string.htm"   >string</a>      <a href="object.htm"    >object</a>
    <a href="delete.htm"    >delete</a>         <a href="equal.htm"     >equal</a>          <a href="floor.htm"    >floor</a>       <a href="flush.htm"     >flush</a>
    <a href="log.htm"       >log</a>            <a href="peek.htm"      >peek</a>           <a href="poke.htm"     >poke</a>        <a href="log.htm"       >power</a>
    <a href="prepend.htm"   >prepend</a>        <a href="profile.htm"   >profile</a>        <a href="trace.htm"    >trace</a>       <a href="seek.htm"      >seek</a>
    <a href="sin.htm"       >sin</a>            <a href="sleep.htm"     >sleep</a>          <a href="version.htm"  >version</a>     <a href="where.htm"     >where</a></font>
 </pre>
       </b>
         Identifiers can be used in naming the following:
        <ul>
         <li><a href="procedures.htm">procedures</a>
         </li>
         <li><a href="functions.htm">functions</a>
         </li>
         <li><a href="types.htm">types</a>
         </li>
         <li><a href="variables.htm">variables</a>
         </li>
         <li><a href="constants.htm">constants</a>
         </li>
        </ul>
       <br>
        Note however that none of the following (and then some) are technically reserved words, 
        although the editor colours them differently to give you a hint, that it could be rather 
        foolish to use them as identifiers:
       <b>
 <pre><font color="#008080">
    <a href="apply.htm"     >apply</a>          <a href="assert.htm"    >assert</a>         <a href="integer.htm"  >boolean</a>     <a href="call.htm"      >call</a>
    <a href="factorial.htm" >choose</a>         <a href="crash.htm"     >crash</a>          <a href="date.htm"     >date</a>        <a href="elapsed.htm"   >elapsed</a>
    <a href="factors.htm"   >factors</a>        <a href="filter.htm"    >filter</a>         <a href="find.htm"     >find</a>        <a href="free.htm"      >free</a>
    <a href="head.htm"      >head</a>           <a href="join.htm"      >join</a>           <a href="smallest.htm" >largest</a>     <a href="sockets.htm"   >listen</a>
    <a href="lower.htm"     >lower</a>          <a href="map.htm"       >map</a>            <a href="match.htm"    >match</a>       <a href="max.htm"       >max</a>
    <a href="min.htm"       >min</a>            <a href="remainder.htm" >mod</a>            <a href="pad.htm"      >pad</a>         <a href="print.htm"     >print</a>
    <a href="sum.htm"       >product</a>        <a href="proper.htm"    >proper</a>         <a href="progress.htm" >progress</a>    <a href="repeat.htm"    >repeat</a>
    <a href="reverse.htm"   >reverse</a>        <a href="trim.htm"      >shorten</a>        <a href="shuffle.htm"  >shuffle</a>     <a href="abs.htm"       >sign</a>
    <a href="smallest.htm"  >smallest</a>       <a href="sort.htm"      >sort</a>           <a href="split.htm"    >split</a>       <a href="substitute.htm">substitute</a>
    <a href="sum.htm"       >sum</a>            <a href="system.htm"    >system</a>         <a href="tail.htm"     >tail</a>        <a href="trim.htm"      >trim</a>
    <a href="sets.htm"      >union</a>          <a href="unique.htm"    >unique</a>         <a href="upper.htm"    >upper</a>       <a href="value.htm"     >value</a></font>
 </pre>
       </b>
        Also, do yourself a favour and avoid these JavaScript reserved words, should you plan on ever
        using <a href="p2js.htm"><span class="pwap2js">pwa/p2js</span></a> to run stuff in a browser:
       <br>
       <b>
 <pre><font color="#008080">
    arguments       await           const           debugger
    delete          eval            final           finally
    implements      import          in              instanceof
    interface       let             native          new
    package         protected       super           synchronized
    this            throws          transient       typeof          
    var             void            volatile        yield</font>
 </pre>
       </b>
        The transpiler issues a fatal error should you try to use any of those. A few more have also
        slipped in that trigger strictly unnecessary errors, some of which I might be able to stop 
        the transpiler from issuing, and some of which will have to be added to the above table.
        (I basically used the same mechanism for syntax colouring and reserved words, oops.)
       <br>
       <br>
<!--
boolean         byte            
    char            double          float           int
    long            short           
        The following can in fact be used in naming functions, but not the other four: <br>
        and, break, by, case, catch, constant, continue, default, do, else, elsif, end, enum, exit, 
        fallthru, fallthrough, for, function, if, include, not, or, procedure, return, switch, then, 
        to, try, type, while, with, without, xor.
       <br>
       <br>
        Obviously not recommended, but there is no parse conflict, as long as we do not allow 
        the implicit ignoring of function returns as in Euphoria, ie the calling of a function 
        (or type) as if it were a procedure - use <code>{}=func()</code> instead.
       <br>
       <br>
        The inverse list, that <i>cannot</i> be used in naming functions, is:<br>
        iff, iif, public, forward, global, export, private, ifdef, elsifdef, elsedef.
       <br>
       <br>
-->
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
