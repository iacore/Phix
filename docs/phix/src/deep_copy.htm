<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">deep_copy</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          <a href="object.htm">object</a> x = deep_copy(<a href="object.htm">object</a> x, 
                                                        <a href="integer.htm">integer</a> depth=-1,
                                                        <a href="integer.htm#bool">bool</a> bIfNeeded=false)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Create an independent clone of x, that does not rely on subsequent copy-on-write semantics<!--, and/or is thread safe-->.
            <br>
            <br>
            x: the object to clone.<br>
            depth: (optional, experimental) the depth to clone, defaults to full.<br>
            bIfNeeded: (optional, experimental) avoids a clone if the refcount of x is already 1.<br>
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Introduced specifically for p2js, for more details see the <a href="notp2js.htm">Incompatibilities</a> section of 
          that documentation.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            Phix has pass by reference with copy on write semantics whereas JavaScript has pass by sharing semantics.<br>
            Adding "with js" (equivalently javascript or javascript_semantics) to a source file effectively disables <i>both</i>
            in the desktop interpreter, and triggers appropriate run-time violations to indicate where deep_copy() is needed.<br>
            Only in that way, and with thorough testing on the desktop, can we hope to ensure the transpiler does not generate
            pass-by-sharing-side-effect-laden JavaScript, which would need to be debugged using the browser development tools.<br>
            Note that "with js" is ignored by the compiler, repl, and transpiler, and the latter errors out on "without js".<br>
            <small>Aside: I don&rsquo;t really expect anyone to type out "with javascript_semantics" when they can just use 
            "with js", however searching for the latter on rosettacode is [not] going to be very productive.</small>
            <br>
            <br>
            The level and bIfNeeded parameters are firmly in the premature optimisations camp and may be removed without notice.<br>
            bIfNeeded can only possibly be of any use in two cases: <code><small>x = deep_copy(x)</small></code> where x is a local 
            variable, or <code><small>x = deep_copy(<i>expr</i>)</small></code> where the input argument is an unnamed temp.
            <small>(The first of those may sometimes be be a completely futile operation, but sometimes the right thing to do.)</small><br>
            Obviously since JavaScript has no reference counts, it can do nothing but completely ignore bIfNeeded.
            <br>
            <br>
            Has no effect if x is an atom or string, since non-1 refcounts on those do not cause JavaScript (and/or p2js.js) any trouble.
            <br>
            <br>
            Note that deep_copy</a> does <i>not</i> produce thread-safe atoms and strings, it only does that for dword-sequences and 
            even then not any string or atom elements they may contain.
<!--
            You can also use deep_copy() (with locking) to make a thread-safe copy of something (that does not need locking).
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
        <small>
<!--eucode>
        O:={3}; P:=O;            O[1]:=5;   -- when transpiled to JavaScript: ARGH, P != {3} !!!
        O:={3}; P:=deep_copy(O); O[1]:=5;   -- when transpiled to JavaScript: ahhh, P == {3}
</eucode-->
<pre>
<font color="#000000">        O</font><font color="#0000FF">:={</font><font color="#000000">3</font><font color="#0000FF">};</font><font color="#000000"> P</font><font color="#0000FF">:=</font><font color="#000000">O</font><font color="#0000FF">;           </font><font color="#000000"> O</font><font color="#0000FF">[</font><font color="#000000">1</font><font color="#0000FF">]:=</font><font color="#000000">5</font><font color="#0000FF">;  </font><font color="#000080"><i> -- when transpiled to JavaScript: ARGH, P != {3} !!!</i></font>
<font color="#000000">        O</font><font color="#0000FF">:={</font><font color="#000000">3</font><font color="#0000FF">};</font><font color="#000000"> P</font><font color="#0000FF">:=</font><font color="#5E005E">deep_copy</font><font color="#0000FF">(</font><font color="#000000">O</font><font color="#0000FF">);</font><font color="#000000"> O</font><font color="#0000FF">[</font><font color="#000000">1</font><font color="#0000FF">]:=</font><font color="#000000">5</font><font color="#0000FF">;  </font><font color="#000080"><i> -- when transpiled to JavaScript: ahhh, P == {3}</i></font>
</pre>
        </small>
        <br>
        Of course that works as you would normally expect on desktop/Phix, with P=={3} in all cases and the caveat that the first 
        line triggers a runtime violation on should there be a "with js" present. If you are thinking <i>"extra typing!"</i> when
        looking at that you would be correct, but if you&rsquo;re also thinking <i>"extra overhead!"</i> then apart from the 
        function call you&rsquo;d be wrong, that kind of copy always used to have to quietly happen anyway, albeit a usually
        shallower copy, and fractionally later and the other way round, inside the O[1] assignment.
<!--
         The comments indicate what would happen if that code were transpiled to JavaScript.
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\repeat.e (an autoinclude) for details of the actual implementation.<br>
            There is also a version in p2js.js which obviously uses native JavaScript functions not
            builtins\VM\pHeap.e\%:pAllocSeq, etc.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="repeat.htm">repeat</a>,
          <a href="notp2js.htm">Incompatibilities</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            Sometimes you may need to perform a deep analysis of what your refcounts really are. Below are a couple of routines
            I quickly cobbled together to do just that, preserved for posterity. Note that I was analysing a static/file-level 
            variable, if you are passing in an object to get the refcount(s) for, you&rsquo;ll obviously have to adjust by -1.
            Every case will need it&rsquo;s own set of tweaks, and (hopefully) will/may lead to a permanent fix so that it is 
            never needed again, which is why this is not (worth making into) any kind of builtin. Fairly obviously this sort of
            stuff should never ever be thrown at <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js</b></span></a>.
            <br>
            <br>
        <small>
<!--eucode>
sequence dll    -- (doubly linked list that was giving me jip)

function get_dll_refcount()
    -- get the refcount for dll
    integer refcount
    #ilASM{
        [32]
            mov eax,[dll]
            mov eax,[ebx+eax*4-8]
            mov [refcount],eax
        [64]
            mov rax,[dll]
            mov rax,[rbx+rax*4-16]
            mov [refcount],rax
        []
          }
    return refcount
end function

function get_dll_refcounts()
    -- get the refcount for all top-level elements of dll [which were all sequences in my case]
    integer l = length(dll)
    sequence refcounts = repeat(0,l)
    for i=1 to l do
        sequence dlli = dll[i]
        dll[i] = 0
        integer refcount
        #ilASM{
            [32]
                mov eax,[dlli]
                mov eax,[ebx+eax*4-8]
                mov [refcount],eax
            [64]
                mov rax,[dlli]
                mov rax,[rbx+rax*4-16]
                mov [refcount],rax
            []
              }
        dll[i] = dlli
        dlli = {}
        refcounts[i] = refcount
    end for
    return refcounts
end function
</eucode-->
<pre>
<font color="#004080">sequence</font><font color="#000000"> dll   </font><font color="#000080"><i> -- (doubly linked list that was giving me jip)
</i></font>
<font color="#008080">function</font><font color="#000000"> get_dll_refcount</font><font color="#0000FF">()</font>
<font color="#000080"><i>    -- get the refcount for dll</i></font>
<font color="#004080">    integer</font><font color="#000000"> refcount
    #</font><font color="#008080">ilASM</font><font color="#0000FF">{</font>
<font color="#800000">        [</font><font color="#000000">32</font><font color="#800000">]</font>
<font color="#000000">            mov eax</font><font color="#0000FF">,</font><font color="#800000">[</font><font color="#000000">dll</font><font color="#800000">]</font>
<font color="#000000">            mov eax</font><font color="#0000FF">,</font><font color="#800000">[</font><font color="#000000">ebx</font><font color="#0000FF">+</font><font color="#000000">eax</font><font color="#0000FF">*</font><font color="#000000">4</font><font color="#0000FF">-</font><font color="#000000">8</font><font color="#800000">]</font>
<font color="#000000">            mov</font><font color="#800000"> [</font><font color="#000000">refcount</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">eax</font>
<font color="#800000">        [</font><font color="#000000">64</font><font color="#800000">]</font>
<font color="#000000">            mov rax</font><font color="#0000FF">,</font><font color="#800000">[</font><font color="#000000">dll</font><font color="#800000">]</font>
<font color="#000000">            mov rax</font><font color="#0000FF">,</font><font color="#800000">[</font><font color="#000000">rbx</font><font color="#0000FF">+</font><font color="#000000">rax</font><font color="#0000FF">*</font><font color="#000000">4</font><font color="#0000FF">-</font><font color="#000000">16</font><font color="#800000">]</font>
<font color="#000000">            mov</font><font color="#800000"> [</font><font color="#000000">refcount</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">rax</font>
<font color="#800000">        []</font>
<font color="#0000FF">          }</font>
<font color="#008080">    return</font><font color="#000000"> refcount</font>
<font color="#008080">end function

function</font><font color="#000000"> get_dll_refcounts</font><font color="#0000FF">()</font>
<font color="#000080"><i>    -- get the refcount for all top-level elements of dll [which were all sequences in my case]</i></font>
<font color="#004080">    integer</font><font color="#000000"> l</font><font color="#0000FF"> =</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">dll</font><font color="#0000FF">)</font>
<font color="#004080">    sequence</font><font color="#000000"> refcounts</font><font color="#0000FF"> =</font><font color="#7060A8"> repeat</font><font color="#0000FF">(</font><font color="#000000">0</font><font color="#0000FF">,</font><font color="#000000">l</font><font color="#0000FF">)</font>
<font color="#008080">    for</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">1</font><font color="#008080"> to</font><font color="#000000"> l</font><font color="#008080"> do</font>
<font color="#004080">        sequence</font><font color="#000000"> dlli</font><font color="#0000FF"> =</font><font color="#000000"> dll</font><font color="#0000FF">[</font><font color="#000000">i</font><font color="#0000FF">]</font>
<font color="#000000">        dll</font><font color="#0000FF">[</font><font color="#000000">i</font><font color="#0000FF">] =</font><font color="#000000"> 0</font>
<font color="#004080">        integer</font><font color="#000000"> refcount
        #</font><font color="#008080">ilASM</font><font color="#0000FF">{</font>
<font color="#800000">            [</font><font color="#000000">32</font><font color="#800000">]</font>
<font color="#000000">                mov eax</font><font color="#0000FF">,</font><font color="#800000">[</font><font color="#000000">dlli</font><font color="#800000">]</font>
<font color="#000000">                mov eax</font><font color="#0000FF">,</font><font color="#800000">[</font><font color="#000000">ebx</font><font color="#0000FF">+</font><font color="#000000">eax</font><font color="#0000FF">*</font><font color="#000000">4</font><font color="#0000FF">-</font><font color="#000000">8</font><font color="#800000">]</font>
<font color="#000000">                mov</font><font color="#800000"> [</font><font color="#000000">refcount</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">eax</font>
<font color="#800000">            [</font><font color="#000000">64</font><font color="#800000">]</font>
<font color="#000000">                mov rax</font><font color="#0000FF">,</font><font color="#800000">[</font><font color="#000000">dlli</font><font color="#800000">]</font>
<font color="#000000">                mov rax</font><font color="#0000FF">,</font><font color="#800000">[</font><font color="#000000">rbx</font><font color="#0000FF">+</font><font color="#000000">rax</font><font color="#0000FF">*</font><font color="#000000">4</font><font color="#0000FF">-</font><font color="#000000">16</font><font color="#800000">]</font>
<font color="#000000">                mov</font><font color="#800000"> [</font><font color="#000000">refcount</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">rax</font>
<font color="#800000">            []</font>
<font color="#0000FF">              }</font>
<font color="#000000">        dll</font><font color="#0000FF">[</font><font color="#000000">i</font><font color="#0000FF">] =</font><font color="#000000"> dlli
        dlli</font><font color="#0000FF"> = {}</font>
<font color="#000000">        refcounts</font><font color="#0000FF">[</font><font color="#000000">i</font><font color="#0000FF">] =</font><font color="#000000"> refcount</font>
<font color="#008080">    end for
    return</font><font color="#000000"> refcounts</font>
<font color="#008080">end function</font>
</pre>
        </small>
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
