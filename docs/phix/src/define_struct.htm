<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">define_struct</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include cffi.e<br>
          <a href="object.htm">object</a> x = define_struct(<a href="string.htm">string</a> struct_str, 
                                                            <a href="integer.htm">integer</a> machine=<a href="machine_bits.htm">machine_bits</a>(), 
                                                            <a href="integer.htm#bool">bool</a> bAdd=<a href="logicops.htm#tf">true</a>)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            parse a C struct definition into sizes/offsets etc.
            <br>
            <br>
            <b>Note</b>: This functionality is now wrapped by <a href="cstruct.htm">c-struct</a>, which you may find slightly easier to use,
            however that will not play nice with any embedded TCHAR[] or similar fields.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          <a href="notpgui.htm"><span class="illegal">Not supported</span></a>.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            The struct_str parameter is text copied from a C header file - note that without a "typedef", nothing gets stored permanantly.<br>
            The machine parameter can be set to 32 or 64, for testing purposes.<br>
            The bAdd parameter can be set to <a href="logicops.htm#tf">false</a> for testing (override/ignore "typedef")
            <br>
            <br>
            If struct_str begins <code>#pragma pack(1)</code> the usual padding to 2/4/8 byte boundaries is not performed (32-bit only).<br>
            This has been specifically added to cope with commdlg.h which contains
            <small><br><pre><code>
            #if !defined(_WIN64)
            #include &lt;pshpack1.h&gt;       /* Assume byte packing throughout */
            #endif
            </code></pre><br></small>
            hence that pragma (currently) only applies under 32-bit. No other variant of pragma pack is [yet] supported.
            <br>
            <br>
            If bAdd is <a href="logicops.htm#tf">true</a> and struct_str contains "typedef", the return value is a small 
            <a href="integer.htm">integer</a> id that can be used in calls to 
            <a href="allocate_struct.htm">allocate_struct</a>(), 
            <a href="set_struct_field.htm">set_struct_field</a>(),
            <a href="get_struct_field.htm">get_struct_field</a>(),
            <a href="get_field_details.htm">get_field_details</a>() and
            <a href="get_struct_size.htm">get_struct_size</a>().<br>
            Otherwise the full details of the structure are returned, which you can display, use to write a little help file, or perhaps even directly 
            use the sizes and offsets etc. Typically this is only useful for testing/diagnostic purposes, see the dropdown below for more info.
            <br>
            <br>
            The struct definition may contain comments, however they must be C-style, ie/eg <code>// comment </code> or <code>/* comment */</code>, 
            and not <code>-- comment</code>.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 1:</b>
         </td>
         <td>
<!--eucode>
include cffi.e
constant tMBP="""
typedef struct {
  UINT           cbSize;
  HWND           hwndOwner;
  HINSTANCE      hInstance;
  LPCTSTR        lpszText;
  LPCTSTR        lpszCaption;
  DWORD          dwStyle;
  LPCTSTR        lpszIcon;
  DWORD_PTR      dwContextHelpId;
  MSGBOXCALLBACK lpfnMsgBoxCallback;
  DWORD          dwLanguageId;
} MSGBOXPARAMS, *PMSGBOXPARAMS;
"""
constant integer idMBP = define_struct(tMBP)
</eucode-->
<pre>
<font color="#008080">include</font><font color="#000000"> cffi.e</font>
<font color="#008080">constant</font><font color="#000000"> tMBP</font><font color="#0000FF">=</font><font color="#008000">"""
typedef struct {
  UINT           cbSize;
  HWND           hwndOwner;
  HINSTANCE      hInstance;
  LPCTSTR        lpszText;
  LPCTSTR        lpszCaption;
  DWORD          dwStyle;
  LPCTSTR        lpszIcon;
  DWORD_PTR      dwContextHelpId;
  MSGBOXCALLBACK lpfnMsgBoxCallback;
  DWORD          dwLanguageId;
} MSGBOXPARAMS, *PMSGBOXPARAMS;
"""</font>
<font color="#008080">constant</font><font color="#004080"> integer</font><font color="#000000"> idMBP</font><font color="#0000FF"> =</font><font color="#7060A8"> define_struct</font><font color="#0000FF">(</font><font color="#000000">tMBP</font><font color="#0000FF">)</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 2:</b>
         </td>
         <td>
<!--eucode>
include cffi.e
constant tRECT = """
                    typedef struct _RECT {
                      LONG left;
                      LONG top;
                      LONG right;
                      LONG bottom;
                    } RECT, *PRECT;""",
         tPS = """
                    typedef struct tagPAINTSTRUCT {
                      HDC  hdc;
                      BOOL fErase;
                      RECT rcPaint;
                      BOOL fRestore;
                      BOOL fIncUpdate;
                      BYTE rgbReserved[32];
                    } PAINTSTRUCT, *PPAINTSTRUCT;""",
        idRECT = define_struct(tRECT)
        idPS = define_struct(tPS)
</eucode-->
<pre>
<font color="#008080">include</font><font color="#000000"> cffi.e</font>
<font color="#008080">constant</font><font color="#000000"> tRECT</font><font color="#0000FF"> =</font><font color="#008000"> """
                    typedef struct _RECT {
                      LONG left;
                      LONG top;
                      LONG right;
                      LONG bottom;
                    } RECT, *PRECT;"""</font><font color="#0000FF">,</font>
<font color="#000000">         tPS</font><font color="#0000FF"> =</font><font color="#008000"> """
                    typedef struct tagPAINTSTRUCT {
                      HDC  hdc;
                      BOOL fErase;
                      RECT rcPaint;
                      BOOL fRestore;
                      BOOL fIncUpdate;
                      BYTE rgbReserved[32];
                    } PAINTSTRUCT, *PPAINTSTRUCT;"""</font><font color="#0000FF">,</font>
<font color="#000000">        idRECT</font><font color="#0000FF"> =</font><font color="#7060A8"> define_struct</font><font color="#0000FF">(</font><font color="#000000">tRECT</font><font color="#0000FF">)</font>
<font color="#000000">        idPS</font><font color="#0000FF"> =</font><font color="#7060A8"> define_struct</font><font color="#0000FF">(</font><font color="#000000">tPS</font><font color="#0000FF">)</font>
</pre>
            <br>
            Structures can be nested - tPS can use "RECT", but only after tRECT has been processed.<br>
            <b>NB:</b> in tRECT, _RECT is discarded/replaced by RECT.<br>
            Had that struct ended with "};" then _RECT would have been kept, and RECT (etc) ignored.<br>
            The "sequence structs" in cffi.e currently holds only one name per struct. (see notes therein)<br>
            In contrast, pointer names such as PRECT are (all) kept separately, albeit to cffi.e they are 
            just pointers that would explicitly need the correct id (eg/ie idRECT) to delve any deeper.<br>
            Note there is no "rcPaint", instead we have "rcPaint.left" etc.
            <br>
            <a name=bitfields></a>
         </td>
        </tr>
        <tr>
         <td>
          <b>Bitfields:</b>
         </td>
         <td>
            Note that cffi.e does not (yet) support bitfields, for example<br>
            <small>
<!--eucode>
include cffi.e
constant tDCB = """
typedef struct _DCB {
  DWORD DCBlength;
  DWORD BaudRate;
  DWORD fBinary : 1;
  DWORD fParity : 1;
  DWORD fOutxCtsFlow : 1;
  DWORD fOutxDsrFlow : 1;
  DWORD fDtrControl : 2;
  DWORD fDsrSensitivity : 1;
  DWORD fTXContinueOnXoff : 1;
  DWORD fOutX : 1;
  DWORD fInX : 1;
  DWORD fErrorChar : 1;
  DWORD fNull : 1;
  DWORD fRtsControl : 2;
  DWORD fAbortOnError : 1;
  DWORD fDummy2 : 17;
  WORD  wReserved;
  WORD  XonLim;
  WORD  XoffLim;
  BYTE  ByteSize;
  BYTE  Parity;
  BYTE  StopBits;
  char  XonChar;
  char  XoffChar;
  char  ErrorChar;
  char  EofChar;
  char  EvtChar;
  WORD  wReserved1;
} DCB, *LPDCB;""",
idDCB = define_struct(tDCB)
</eucode-->
<pre>
<font color="#008080">include</font><font color="#000000"> cffi.e</font>
<font color="#008080">constant</font><font color="#000000"> tDCB</font><font color="#0000FF"> =</font><font color="#008000"> """
typedef struct _DCB {
  DWORD DCBlength;
  DWORD BaudRate;
  DWORD fBinary : 1;
  DWORD fParity : 1;
  DWORD fOutxCtsFlow : 1;
  DWORD fOutxDsrFlow : 1;
  DWORD fDtrControl : 2;
  DWORD fDsrSensitivity : 1;
  DWORD fTXContinueOnXoff : 1;
  DWORD fOutX : 1;
  DWORD fInX : 1;
  DWORD fErrorChar : 1;
  DWORD fNull : 1;
  DWORD fRtsControl : 2;
  DWORD fAbortOnError : 1;
  DWORD fDummy2 : 17;
  WORD  wReserved;
  WORD  XonLim;
  WORD  XoffLim;
  BYTE  ByteSize;
  BYTE  Parity;
  BYTE  StopBits;
  char  XonChar;
  char  XoffChar;
  char  ErrorChar;
  char  EofChar;
  char  EvtChar;
  WORD  wReserved1;
} DCB, *LPDCB;"""</font><font color="#0000FF">,</font>
<font color="#000000">idDCB</font><font color="#0000FF"> =</font><font color="#7060A8"> define_struct</font><font color="#0000FF">(</font><font color="#000000">tDCB</font><font color="#0000FF">)</font>
</pre>
            </small><br>
            fails with the (somewhat obtuse) error "bitfields are not (yet) supported". <br>
            In this particular case, the 32 bits of fBinary .. fDummy2 are packed into a single 32-bit dword, but note should 
            the :1 .. :17 over-run it ought to allocate further dwords as needed - if you encounter an example that does that, 
            or slices byte/word[s]/etc let me know, ideally along with something I can properly test. <br>
            It would (probably) not be particularly difficult to extend cffi.e to cope (eg -ve offset/size/signed), but for now 
            you should replace those 14 fields with a single dword and perform the necessary bit-slicing on that yourself, again 
            let me know should that start getting too tedious or too error-prone.
<!-- notes:
apparently only [un]signed int is allowed, int alone is implementation-defined rather than the usual signed... [DWORD==uint]
always 4 bytes anyway... bitfields that straddle an allocation unit boundary are implementation-defined... (aka unsupported)
struct S
{
    // will usually occupy 4 bytes:
    // 5 bits: value of b1
    // 11 bits: unused
    // 6 bits: value of b2
    // 2 bits: value of b3
    // 8 bits: unused
    unsigned b1 : 5, : 11, b2 : 6, b3 : 2;
};
bitfields /can/ be signed, so signed of +/-b might be on the cards. (or we should only support unsigned bitfields)
<unnamed>:0 forces jump to next allocation unit. (machine dependant... so let's go unsupported)

// Space optimized representation of the date
struct date {
    // d has value between 0 and 31, so 5 bits are sufficient
    unsigned int d : 5;

    // m has value between 0 and 15, so 4 bits are sufficient
    unsigned int m : 4;

    // a y of 0..4095 needs 12 bits, which will do us.
    unsigned int y : 12;
};

int main()
{
        printf("Size of date is %lu bytes\n",
                sizeof(struct date));
        struct date dt = { 31, 12, 2014 };
        printf("Date is %d/%d/%d", dt.d, dt.m, dt.y);
        return 0;
}

maximum bitfield length is 64, but for portablility do not permit >32.

struct on_off {
                  unsigned light : 1;
                  unsigned toaster : 1;
                  int count;            /* 4 bytes */
                  unsigned ac : 4;
                  unsigned : 4;
                  unsigned clock : 1;
                  unsigned : 0;
                  unsigned flag : 1;
                 } kitchen ;

The structure kitchen contains eight members totalling 16 bytes. The following table describes the storage that each member occupies:

Member name             Storage occupied
light                   1 bit
toaster                 1 bit
(padding — 30 bits)     To the next int boundary
count                   The size of an int (4 bytes)
ac                      4 bits
(unnamed field)         4 bits
clock                   1 bit
(padding — 23 bits)     To the next int boundary (unnamed field)
flag                    1 bit
(padding — 31 bits)     To the next int boundary

Bit fields are allocated within an integer from least-significant to most-significant bit. In the following code

struct mybitfields
{
    unsigned short a : 4;
    unsigned short b : 5;
    unsigned short c : 7;
} test;

int main( void )
{
    test.a = 2;
    test.b = 31;
    test.c = 0;
    return 0;
}
the bits of test would be arranged as follows:

00000001 11110010
cccccccb bbbbaaaa
Since the 8086 family of processors store the low byte of integer values before the high byte, 
the integer 0x01F2 would be stored in physical memory as 0xF2 followed by 0x01.

struct
{
    unsigned int first : 9;
    unsigned int second : 7;
    unsigned int may_straddle : 30;
    unsigned int last : 18;
} tricky_bits;
A standard C implementation could pack these bit fields into two 32-bit integers. 
It might store tricky_bits.may_straddle as 16 bits in one 32-bit integer and 14 bits in the next 32-bit integer. 
The Windows ABI convention packs bit fields into single storage integers, and doesn't straddle storage units. 
The Microsoft compiler stores each bit field in the above example so it fits completely in a single 32-bit integer. 
In this case, first and second are stored in one integer, may_straddle is stored in a second integer, and last is 
stored in a third integer. The sizeof operator returns 12 on an instance of tricky_bits. (PL: DO NOT SUPPORT THIS!)
crash("bitfield straddling is implementation-dependent")

struct time
{
unsigned int hours: 5; // Size restricted to 5 bits     (0..32)
unsigned int minutes:6; // Size restricted to 6 bits    (0..64)
unsigned int seconds:6; // Size restricted to 6 bits    (0..64)
};
size is 4 bytes...
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="allocate_struct.htm">allocate_struct</a>,
          <a href="set_struct_field.htm">set_struct_field</a>,
          <a href="get_struct_field.htm">get_struct_field</a>,
          <a href="get_field_details.htm">get_field_details</a>,
          <a href="set_unicode.htm">set_unicode</a>,
          <a href="machine_bits.htm">machine_bits</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            The full details (when bAdd=false or "typedef" is missing) are <code>{name,size,align,members,ptrnames}</code> where 
            members is <code>{{names},{{type,size,offset,sign}}}</code>, eg:
            <br>
            <br>
<!--eucode>
     {"RECT", 16,4,{{"left", "top", "right", "bottom"},
                   {{"LONG", 4,0,1}, {"LONG", 4,4,1},
                    {"LONG", 4,8,1}, {"LONG", 4,12,1}}},
     {"PRECT"}}

</eucode-->
<pre>
<font color="#0000FF">     {</font><font color="#008000">"RECT"</font><font color="#0000FF">,</font><font color="#000000"> 16</font><font color="#0000FF">,</font><font color="#000000">4</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#800080">{</font><font color="#008000">"left"</font><font color="#0000FF">,</font><font color="#008000"> "top"</font><font color="#0000FF">,</font><font color="#008000"> "right"</font><font color="#0000FF">,</font><font color="#008000"> "bottom"</font><font color="#800080">}</font><font color="#0000FF">,</font>
<font color="#800080">                   {</font><font color="#00FF00">{</font><font color="#008000">"LONG"</font><font color="#0000FF">,</font><font color="#000000"> 4</font><font color="#0000FF">,</font><font color="#000000">0</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#00FF00">}</font><font color="#0000FF">,</font><font color="#00FF00"> {</font><font color="#008000">"LONG"</font><font color="#0000FF">,</font><font color="#000000"> 4</font><font color="#0000FF">,</font><font color="#000000">4</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#00FF00">}</font><font color="#0000FF">,</font>
<font color="#00FF00">                    {</font><font color="#008000">"LONG"</font><font color="#0000FF">,</font><font color="#000000"> 4</font><font color="#0000FF">,</font><font color="#000000">8</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#00FF00">}</font><font color="#0000FF">,</font><font color="#00FF00"> {</font><font color="#008000">"LONG"</font><font color="#0000FF">,</font><font color="#000000"> 4</font><font color="#0000FF">,</font><font color="#000000">12</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#00FF00">}</font><font color="#800080">}</font><font color="#800000">}</font><font color="#0000FF">,</font>
<font color="#800000">     {</font><font color="#008000">"PRECT"</font><font color="#800000">}</font><font color="#0000FF">}
</font>
</pre>
            So a RECT is 16 bytes and needs 4 byte alignment, and RECT.bottom is a long, 4 bytes, at offset 12, and is signed. <br>
            Note that members.type (eg "LONG") is only for debugging/sanity and is not intended or suitable for any practical use. <br>
            You can set the convert_types flag via <a href="set_unicode.htm">set_unicode</a>() to convert any AltNames and UnicodeNames to their 
            SizeNames equivalent, which would reduce the number of types to be dealt with around five-fold, if you like, but I suspect in most 
            cases that would just add more confusion.<br>
            Also note that members.size is for a single element: a char[32] has a size of 1 not a size of 32. It would be difficult to ascertain 
            the number of elements (such as that 32) from the return value, particularly if nested structs and unions are involved, instead it is 
            assumed that the calling code is happy enough just to know where the first is.
            <br>
            <br>
            These details are only intended for testing and debugging purposes.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
