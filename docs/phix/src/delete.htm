<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">delete</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         delete(<a href="object.htm">object</a> o)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Invoke any cleanup routines associated with the object and remove the association.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          <a href="notpgui.htm"><span class="illegal">Not supported</span></a> - you cannot put a 
          <a href="delete_routine.htm">delete_routine</a>() on anything anyway.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            Cleanup routines are associated with an object using the <a href="delete_routine.htm">delete_routine</a>() function.
            <br>
            <br>
            Applications do not typically invoke delete() directly, but instead rely on it being invoked as part of the automatic 
            garbage collection process, except during shutdown when it may be important to force events to occur in a particular order. <br>
            Note that setting [the last copy of] o to NULL should achieve the same effect as invoking delete() explicitly, but in
            a much safer way, as per the comments in <a href="delete_routine.htm">delete_routine</a>().
            <br>
            <br>
            If the object is an integer, or if no cleanup routines are associated with the object, then nothing happens.
            <br>
            <br>
            After the cleanup routines are called, the value of the object is unchanged, though the cleanup routine(s) will no longer be associated with the object.
         </td>
        </tr>
        <tr>
         <td>
          <b>Ancilliary function:</b>
         </td>
         <td>
            <a href="integer.htm#bool">bool</a> res = <b>still_has_delete_routine</b>(<a href="opbject.htm">object</a> x)
            <br>
            <br>
            Yields <a href="logicops.htm#tf">true</a>(1) if delete_routine() has been invoked on x and delete() has not.<br>
            Yields <a href="logicops.htm#tf">false</a>(0) after delete() or if delete_routine() was never called on x.
            <br>
            <br>
            In particular, residual references to a class instance become invalid the moment delete() is invoked on any
            other reference to it. The internal type checking routines of <a href="structs.htm">builtins\structs.e</a>
            use this to identify and prohibit accidental access to any such now-invalid struct/class instance references.
            <br>
            <br>
            Ideally you should nullify all variables referencing x as and when delete(x) is invoked, however that may not 
            always be possible, as suggested in the example below, albeit something that trivial is trivially fixable, by
            (for example) making process a null-returning function and invoking it as w = process(w). 
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
class thing nullable
    public string s
end class

procedure process(thing t)
    delete(t)   -- (w becomes invalid)
end procedure

thing w = new({"w"})
process(w)
?w.string       -- (invalid)
</eucode-->
<pre>
<font color="#008080">class</font><font color="#000000"> thing</font><font color="#008080"> nullable
    public</font><font color="#004080"> string</font><font color="#000000"> s</font>
<font color="#008080">end class

procedure</font><font color="#000000"> process</font><font color="#0000FF">(</font><font color="#000000">thing t</font><font color="#0000FF">)</font>
<font color="#5E005E">    delete</font><font color="#0000FF">(</font><font color="#000000">t</font><font color="#0000FF">)  </font><font color="#000080"><i> -- (w becomes invalid)</i></font>
<font color="#008080">end procedure
</font>
<font color="#000000">thing w</font><font color="#0000FF"> =</font><font color="#5E005E"> new</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">"w"</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#000000">process</font><font color="#0000FF">(</font><font color="#000000">w</font><font color="#0000FF">)
?</font><font color="#000000">w</font><font color="#0000FF">.</font><font color="#004080">string      </font><font color="#000080"><i> -- (invalid)</i></font>
</pre>
            <br>
            The delete(t) causes w to become invalid and refer to a slot on the freelist. While a fatal error would normally occur 
            on the last line, it was (prior to the introduction of still_has_delete_routine) possible for some other instance to
            be created and occupy the slot that w still refers to. This additional check seeks to prevent mishaps of that kind.
            Of course just printing the contents would probably have been fairly harmless, modifications and/or actions on such an
            invalid reference would however be significantly more dangerous and damaging.
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            via :%opDelete in builtins\VM\pDeleteN.e (an autoinclude) - be warned however it is low-level complicated stuff that you do not need to know. <br>
            Apart from still_has_delete_routine(), which is defined in builtins\hasdel.e
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="delete_routine.htm">delete_routine</a>
         </td>
        </tr>
       </table>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
