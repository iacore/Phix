<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">deserialize</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include builtins\serialize.e<br>
          <a href="object.htm">object</a> res = deserialize(<a href="object.htm">object</a> sf, 
                                                            <a href="integer.htm">integer</a> pos = 1, 
                                                            <a href="integer.htm#bool">bool</a> returnpos = <a href="logicops.htm">false</a>)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Converts a serialized object back to a standard Phix <a href="object.htm">object</a>.
            <br>
            <br>
            sf: a <a href="sequence.htm">sequence</a> or <a href="integer.htm">integer</a> file handle, or memory address (if pos&lt;0)<br>
            pos: if sf is a <a href="sequence.htm">sequence</a>, must be a valid index into sf which points to 
                 the start of a serialized object.<br>
                 if sf is an atom, a negative pos indicates that sf is a raw memory 
                 address, otherwise sf is an open file handle. Defaults to 1.<br>
            returnpos: true/1 = yes, false/0 = no.
            <br>
            <br>
            returns: res or {res,pos}, depending on returnpos.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            A serialized object is one that has been converted to a series of byte values, as
            originally returned from the <a href="serialize.htm">serialize</a> function, but 
            for any of this to be particularly useful, one that has had a fairly colourful 
            journey through files, shared memory, network connections, or some such.
            <br>
            <br>
            An additional parameter has been added to deserialize to control whether or not the 
            final pos should be returned when processing a <a href="sequence.htm">sequence</a> input. This allows several 
            concatenated serialised objects to be extracted from a single stream.<br>
            The Euphoria version always returns {res,pos} when given a <a href="sequence.htm">sequence</a>, but not 
            a file.
            <br>
            <br>
            To retrieve data from a memory address, such as a shared memory block, specify a
            negative pos, with -1 indicating the first byte of that block. If pos is returned
            in this case, it will be more negative, and valid for a subsequent concatenated
            serialised object within the same memory block.
            <br>
            <br>
            Note that a returned pos is meaningless, and unchanged, when sf is a file handle.
            <br>
            <br>
            For examples, see <a href="serialize.htm">serialize</a>.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="serialize.htm">serialize</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            Some performance loss may be noticed in comparison with the Euphoria version
            of this routine, which can be attributed to making it thread-safe.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
