<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">destroy_dict</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          destroy_dict(<a href="object.htm">object</a> tid, 
                       <a href="integer.htm#bool">bool</a> justclear=<a href="logicops.htm#tf">false</a>)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Completely remove a dictionary, or a set of them, including any {key,data} pairings they contain.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            Invoke destroy_dict(tid) when you have no further use for the specified dictionary. Destruction is near-instantaneous,
            and obviously that is significantly faster than deleting all the keys individually.
            <br>
            <br>
            Note that destroy_dict(1) simply empties the default dictionary completely, but leaves it available for future use.<br>
            A similar thing happens on other dictionaries if the justclear parameter is non-zero.
            <br>
            <br>
            Attempts to use a dictionary (other than 1/the default) after destroy_dict (with justclear=0) has been called, but 
            before that slot has been resurrected via a subsequent call to <a href="new_dict.htm">new_dict</a>(), or of course 
            other values not originating from a call to new_dict(), are expected to fail with "invalid dictionary id".
            <br>
            <br>
            It is (and should be) perfectly legal to destroy_dict(1) at the very start.<br>
            In contrast, destroy_dict(5) is fatal when 5 is not valid (including shortly after destroy_dict(5), as above).
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
destroy_dict(tid)
</eucode-->
<pre>
<font color="#000000"></font><font color="#5E005E">destroy_dict</font><font color="#0000FF">(</font><font color="#000000">tid</font><font color="#0000FF">)</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="new_dict.htm">new_dict</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
