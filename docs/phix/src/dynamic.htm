<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">dynamic</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
<!-- [virtual [|] final] <i>method</i> -->
class <i>identifier</i> dynamic [extends <i>base</i>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;{ [(public|private)[:]] ( <i>field</i> | <i>method</i> ) [ ',' ... ] }<br>
end class<br>
<center><small><i>-- or --</i></small></center>
class|<i>identifier</i> <i>variable</i> ( ';' | '=' ( new() | <i>expr</i> ) ) [ ',' ... ]<br>
<center><small><i>-- or --</i></small></center>
<a href="integer.htm#bool">bool</a> res = class|<i>identifier</i>(<a href="object.htm">object</a> o)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            By default, you have to explicitly declare all fields and methods of each class/structure, however you can also create
<!--        fully dynamic classes by making the base class "extends struct": class flex extends struct -->
            fully dynamic classes by making the base class dynamic.
<!--            As above class can be used in three very distinct ways, almost identically to <a href="struct.htm">struct</a>. -->
        
<!--
--  As well as dot notation, structs can be referenced by string names, eg:
--
--      s["name"] = "boris"
--      s["age"] = 3.75
--
--  Obviously that is more useful with say string field = "name", and then
--  s[field], rather than literal inline strings. Attempting s.field would 
--  be equivalent to s["field"] rather than the intended s["name"], iyswim.
--  Note that for this handling to occur, s must be declared as a struct,
--  and the subscript must be declared as a string, both must be detected
--  at compile-time, otherwise a fatal "subscript is not an atom" triggers.
--      

            It can sometimes be helpful to think of simple objects as structs and more complex things as classes, although in Phix there is technically not very much 
            difference between them, apart from the fact that structs cannot be fully <a href="dynamic.htm">dynamic</a>.
-->
<!--
            Classes are superficially similar to structs, however in structs all fields are implicitly public whereas they are private by default in classes,
            structs cannot be fully <a href="dynamic.htm">dynamic</a>, and typically classes have methods, while structs normally do not. <small>(In general, 
            Phix allows some reasonable overlap, rather than always strictly saying "NON" (in a cheesy French accent) even when there is no reasonable let 
            alone outright compelling reason to do so. Which reasonably stands to reason, he reasoned reasonably.)</small>
            <br>
            <br>
            An abstract class (or struct) cannot be instantiated, ie attempts to invoke <a href="structs.htm#new">new</a>() trigger compile-time and/or run-time errors.<br>
            By default struct and class variables cannot be set to null, unless the definition contains an explicit <b>nullable</b> clause.<br>
            The <b>dynamic</b> keyword is explained in the <a href="dynamic.htm">next section</a>, <b>extends</b> is explained below.
-->
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          <a href="notpgui.htm"><span class="illegal">Not supported</span></a>.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
class wobbly dynamic
end class
wobbly wobble = new()
?wobble.jelly           -- NULL
wobble.jelly = "green"
?wobble.jelly           -- "green"
</eucode-->
<pre>
<font color="#008080">class</font><font color="#000000"> wobbly</font><font color="#008080"> dynamic
end class</font>
<font color="#000000">wobbly wobble</font><font color="#0000FF"> =</font><font color="#7060A8"> new</font><font color="#0000FF">()
?</font><font color="#000000">wobble</font><font color="#0000FF">.</font><font color="#000000">jelly          </font><font color="#000080"><i> -- NULL</i></font>
<font color="#000000">wobble</font><font color="#0000FF">.</font><font color="#000000">jelly</font><font color="#0000FF"> =</font><font color="#008000"> "green"</font>
<font color="#0000FF">?</font><font color="#000000">wobble</font><font color="#0000FF">.</font><font color="#000000">jelly          </font><font color="#000080"><i> -- "green"</i></font>
</pre>
            <br>
            Obviously you can create several fields/methods as normal, or as shown above create all of them dynamically.<br>
            All dynamically-added fields are implicitly public and of type <a href="object.htm">object</a>.<br>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            As per <a href="struct.htm">struct</a>
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
            <a href="class.htm">class</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
<!--
        Also by default, you have to explicitly declare all the fields and methods of each class/structure, however you can also create
        fully dynamic classes by making the base class "extends struct":
        The builtin struct type has no fields, and all classes implicitly extend it. However by explicitly extending it, you are implying
        something extra is desired, which ...
        <br>
        <br>
-->
<!--
        <br>
        <br>
        <small><sup>1</sup> Were fields private by default, then simple structs would be utterly useless...<br></small>
            <br>
            <br>
-->
            In some cases it may help to explicitly store a dynamic element in a (local) variable of the appropriate type, especially when it
            is a dymanically embedded class/struct.
            <br>
            <br>
<!--            Only classes may be dynamic, a compilation error occurs when trying to declare a dynamic struct.<br> -->
<!--            You cannot create an object hierarchy (/inheritance) with some dynamic and some not, the dynamic keyword is optional when extending, 
            ie, assuming flex is dynamic, "class flexy extends flex", and "class flexy dynamic extends flex" are treated identically.<br> -->
<!--            Dynamic alterations cannot be made via the lowest-level builtin "class" (or "struct") type, instead it has to be part of the same dynamic hierarchy.<br> -->
            Dynamic routines would typically be implemented as integers, to which is assigned a standard <a href="routine_id.htm">routine_id</a>(),
            and would usually need to be invoked via an explicit <a href="call_func.htm">call_func</a>() or <a href="call_proc.htm">call_proc</a>(),
            such as <code>call_proc(p.show,{p})</code>, or rather as an OO-pagan, I simply don&rsquo;t get how/why you w/could have <code>p.show()</code>
            at the same time as wanting/needing to declare <code>show</code> dynamically. One thing you <i>can</i> trivially do is declare a class method
            <code>procedure task();</code> (ie virtual) along with actual methods easy() and hard(), and then just <code>p.task = p.easy</code> or
            <code>p.task = p.hard</code> before invoking <code>p.task()</code>.
<!--
            when  - while an explicit store in an 
            integer variable(/<a href="routine_id.htm">routine_id</a>) might help, any implicit "this" handling has gone for a burton anyway.
-->
            <br>
            <br>
            It is questionable as to whether there is any actual benefit in hierarchies of, and hence extending, dynamic classes, but you can.<br>
            The compiler currently rejects abstract + dynamic, but I&rsquo;m open to persuasion if you&rsquo;ve got a proper use for it.<br>
            The dynamic keyword is optional when extending an already dynamic base class. You cannot disable dynamic half-way down the tree.
            <br>
            <br>
            Technically speaking, class/struct field access is a subversion of subscripting, such that <code>s.field</code> is the
            same as <code>s["field"]</code>, except that in the former you are pretty much obliged to reference pre-existing fields
            whereas the latter syntax allows a fully dynamic field name to be constructed at run-time. Note the following:
            <br>
            <br>
<!--eucode>
constant one = "two"
class thing
    string one = "one",
           two = "two"
    function tre()
        return "tre"
    end function
end class
thing s = new()
?s.one          -- "one"
?s.two          -- "two"
?s.tre          -- 2473 (a routine_id)
?s.tre()        -- "tre"
?s["one"]       -- "one"
?s["two"]       -- "two"
?s["tre"]       -- 2473 (a routine_id)
--?s["tre"]()   -- invalid syntax
?s[one]         -- "two" (because of that constant!)
--?s[two]       -- two undefined (even though s.two exists)
--?s[tre]       -- tre undefined (even though s.tre exists)
--?s."one"      -- invalid syntax
--?s[3]         -- compile-time and/or run-time error
</eucode-->
<pre>
<font color="#008080">constant</font><font color="#000000"> one</font><font color="#0000FF"> =</font><font color="#008000"> "two"</font>
<font color="#008080">class</font><font color="#000000"> thing</font>
<font color="#004080">    string</font><font color="#000000"> one</font><font color="#0000FF"> =</font><font color="#008000"> "one"</font><font color="#0000FF">,</font>
<font color="#000000">           two</font><font color="#0000FF"> =</font><font color="#008000"> "two"</font>
<font color="#008080">    function</font><font color="#000000"> tre</font><font color="#0000FF">()</font>
<font color="#008080">        return</font><font color="#008000"> "tre"</font>
<font color="#008080">    end function
end class</font>
<font color="#000000">thing s</font><font color="#0000FF"> =</font><font color="#7060A8"> new</font><font color="#0000FF">()
?</font><font color="#000000">s</font><font color="#0000FF">.</font><font color="#000000">one         </font><font color="#000080"><i> -- "one"</i></font>
<font color="#0000FF">?</font><font color="#000000">s</font><font color="#0000FF">.</font><font color="#000000">two         </font><font color="#000080"><i> -- "two"</i></font>
<font color="#0000FF">?</font><font color="#000000">s</font><font color="#0000FF">.</font><font color="#000000">tre         </font><font color="#000080"><i> -- 2473 (a routine_id)</i></font>
<font color="#0000FF">?</font><font color="#000000">s</font><font color="#0000FF">.</font><font color="#000000">tre</font><font color="#0000FF">()       </font><font color="#000080"><i> -- "tre"</i></font>
<font color="#0000FF">?</font><font color="#000000">s</font><font color="#0000FF">[</font><font color="#008000">"one"</font><font color="#0000FF">]      </font><font color="#000080"><i> -- "one"</i></font>
<font color="#0000FF">?</font><font color="#000000">s</font><font color="#0000FF">[</font><font color="#008000">"two"</font><font color="#0000FF">]      </font><font color="#000080"><i> -- "two"</i></font>
<font color="#0000FF">?</font><font color="#000000">s</font><font color="#0000FF">[</font><font color="#008000">"tre"</font><font color="#0000FF">]      </font><font color="#000080"><i> -- 2473 (a routine_id)
--?s["tre"]()   -- invalid syntax</i></font>
<font color="#0000FF">?</font><font color="#000000">s</font><font color="#0000FF">[</font><font color="#000000">one</font><font color="#0000FF">]        </font><font color="#000080"><i> -- "two" (because of that constant!)
--?s[two]       -- two undefined (even though s.two exists)
--?s[tre]       -- tre undefined (even though s.tre exists)
--?s."one"      -- invalid syntax
--?s[3]         -- compile-time and/or run-time error</i></font>
</pre>
<br>
            One other small point to note: while <code>s.employee</code> is equivalent to <cvode>s["employee"]</code>, <code>s.employee.name</code> is 
            (possibly) legal whereas the square bracket syntax is strictly single-level only and s["employee"]["name"] is treated as invalid syntax, 
            and therefore if you are using an expression for "employee" rather than a literal string, the latter statement must be broken up into two 
            or more lines, with appropriate (or base) struct/class types on any temporary variables, in order to give the compiler sufficient hints. 
            In other words all dynamically-created fields are implicitly "object", and hence must be stored in an explicit struct/class variable 
            before any further dot or ["string"] field-accessing operations can be performed.
            Likewise <code>s[expr].field</code> is never valid, but <code>s[expr][<i>int</i>]</code> might sometimes be, ie when the second and 
            subsequent [] are of the more traditional integer-index subscript variety.
            <br>
            <br>
            Another way of saying this is that in C++ you can pass around a (reference to an) instance as a <code>void*</code>, but it must be cast 
            to some appropriate class before using dot notation. In a similar fashion, you can pass Phix struct/class references about as objects 
            (or store them in tables/sequences), but /must/ store them in local struct/class type variables or routine parameters, before you can 
            use dot notation. 
            By default the compiler assumes all "dot /and/ []" are traditional integer subscripting of sequences, unless a variable/parameter is 
            unambiguously a struct/class (that is, according to its declaration).
            <br>
            <br>
            Dynamic class instances are simply implemented as independent <a href="dict.htm">dictionaries</a>, with dot-notation and automatic cleanup.<br>
            Obviously you should expect fairly disappointing figures from a pointless benchmark: p["index"] is without any doubt going to be at the very 
            least 5 times slower than p[1], probably much worse, and even the most mediocre of programmers could apply optimisations way better than any
            compiler ever could. Only use dynamic classes when you value the improved code clarity more than the 0.0001s being lost, and yes, ten thousand
            dynamic class instances is probably fairly likely to take (aka waste) a whole second to set up, use, and tear down, if not more, but then again 
            if you only have a dozen or so of them, lightly used, then you simply just don&rsquo;t care one jot about their performance.
<!--
            <br>
            <br>
            All methods are treated as virtual, ie can be overidden. It may become possible to explicitly specify virtual/final in a future release,
            which may also perform additional routine signature and parameter type verification at compile-time (it is currently run-time-only).
            <br>
            <br>
            Classes grant Phix object orientated capabilities, however, fear not, you can still write an entire application without being <i>forced</i> to 
            use them at all, whereas already radicalised readers will no doubt be relieved to hear that object orientated techniques can always be applied,
            even in the most awkward and utterly inappropriate of circumstances. <img src="images/ksk-smile.png" alt="smile" />
            <br>
            <br>
            On a personal note, I have always been very sceptical of object orientation, have never seen any <i>proof</i> that it improves productivity 
            or shortens timescales, but far more importantly I have never seen <i><b>anything remotely resembling</b></i> a "good object oriented design", 
            and have (somewhat reluctantly) reached the conclusion that mythical beast simply does not exist. To clarify, I said and meant <i>design</i>, 
            not codebase, and I will concede it is Turing complete and can do lots, especially with decent libs, and that a well written IDE with fast 
            and efficient intellisense is abfab, but again, not what I just asked for.

        Obviously you can create several fields/methods as normal, or as shown above create all of them dynamically.<br>
        Note that only classes may be dynamic, a compilation error occurs when trying to declare a dynamic struct, and likewise you
        cannot create an object hierarchy (/inheritance) with some dynamic and some not, nor can you make any dynamic alterations 
        via the lowest-level builtin "class" (or "struct") type, instead it has to be part of the same dynamic hierarchy.<br>
        The dynamic keyword is optional when extending, ie "class flexy extends flex", and "class flexy dynamic extends flex" are treated identically.<br>
        Dynamic routines are typically implemented as integers, to which is assigned a standard <a href="routine_id.htm">routine_id</a>() 
        of something that takes a leading "this" of the appropriate class as the first parameter.

-->
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
