<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Compatibility with Euphoria</h1>
      <div id="mainSection">
        Obviously true 100% compatibility is a nonsense idea - you would be forced to reproduce all the bugs, warts,
        and glitches of the original, and to top that prohibit any improvement.
       <br>
       <br>
        Instead, 99.9% is more reasonable, but  you should bear in mind that means you will have to alter, on average, 
        one line of code in a thousand, and in practice that is roughly what I get when testing code written for 
        Euphoria on Phix. To be fair, sometimes it may be more like 1 line in every 100, which equates to a mere 99.0% 
        compatibility. More recently written code using the very latest 4.1+ features tends to fare less well, but 
        still typically much easier than say migrating from win32lib to arwen or <a href="pGUI.htm">pGUI</a>.
       <br>
       <br>
        In fact, the Phix compiler tries very hard to give appropriate error and warning messages to ease the 
        translation of legacy code, such as that found in 
        <a href="javascript:ExternalLink('ext167','http://phix.x10.mx/pmwiki/pmwiki.php?n=Main.HomePage');"
           id="ext167" style="color:#9B5565" >PCAN</a>. 
        When something does not work you should assume the error is actually a helpful clue, and
        you should ignore warnings at your peril. I have even crippled "without warning" by default in the more
        recent builds (see pmain.e/DoWithOptions() to restore handling) in the name of legacy code support.
       <br>
       <br>
        While Euphoria supports (/encourages/touts) implicit sequence operations, Phix expects the programmer to use explicit 
        routines, for example sq_add(x,y) instead of x+y, as detailed in <a href="seqops.htm">sequence operations</a>. 
        The compiler issues warnings and performs an automatic substitution of the equivalent function-style routine when 
        doing do is <i>irrefutably</i> the correct thing to do, but terminates in error at runtime if the atom-only 
        primitives are passed a sequence. 
        In my experience so far this has not been a significant difficulty, and trivial to fix once detected.
       <br>
       <br>
        The ",," style optional parameters are not supported by Phix. While, for example, both Phix and Euphoria 
        support myfunc(file), only Euphoria allows myfunc(file,,1) whereas Phix requires the second parameter to 
        be present - and of course it is usually a trivial matter to determine what that should be. In Phix all 
        non-optional parameters must be grouped together on the left hand side of routine parameter declarations.
       <br>
       <br>
        Euphoria does not support named parameters, for example in Phix both message_box("there", "hi", MB_OK) 
        and message_box(style:=MB_OK,title:="hi",msg:="there") are equivalent. Note that once you start explicitly
        naming parameters in a call statement you cannot revert to a positional-based method, and there is as yet
        no way to use named parameters on any of the builtins implemented via #ilASM. See psym.e/symint() and the
        AutoAsm() calls for a full list of the latter, apart from the sheer number I doubt it would be particularly 
        difficult to figure something out - passing a list of parameter names to AutoAsm should get you started.
       <br>
       <br>
        Phix does not support forward referencing of variables and constants, though routines are fine. I maintain that
        forward data references add wholly unnecessary complexity, and evidently cause quite noticable performance loss 
        in the compile phase, in Euphoria, and besides are very easily fixed whenever they cause a problem.
       <br>
       <br>
        A particular thorn is wxEuphoria which depends on the internal implementation details of Euphoria and it is
        highly unlikely that a compatibile version of that will become available any time soon.
       <br>
        Wee proved particularly difficult, but I eventually managed to get something working (not yet in the distro).
       <br>
       <br>
        Many routines in Phix, eg open(), puts(), etc already accept both "fred" and {'f','r','e','d'} but some may have 
        slipped though for reasons of expediency. Feel free to log a bug for that when it seems appropriate.
       <br>
       <br>
        Phix only supports the absolute least possible pre-processing I could get away with, in the form of ifdef / 
        elsifdef / elsedef. A call such as "if platform()=WINDOWS then" is optimised at compile-time such that no
        unnecessary code or tests are emitted, which covers 93% of the need for ifdef, plus I disagree with completely 
        separate include files for different operating systems, which is the other 32%. Those percentages include the
        depressing 25% of cases where ifdef is either ridiculously pointless or the utterly wrong tool to use. To be
        fair and honest about it, I am being deliberately disparaging to try and deter any extra workload in that area.
       <br>
       <br>
        The routines listed below have been copied from Euphoria for compatibility reasons. They are only granted 
        the lightest of support and any grief may lead to an offending routine simply being removed rather than fixed. 
        Obviously if I thought these routines were really any good I would adopt them whole-heartedly; the fact they 
        are documented in this section means I have certain reservations about their design or implementation or both.
       <br>
       <br>
        Of course I would happily accept improved versions of these routines for incorporation into the next release.
        &nbsp;
       <br>
       <br>
        Only a few of these routines are supported by <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js</b></span></a>.
       <br>
       <br>
       <table>
        <col style="width: 5%"/>
        <tr>
         <td><a href="cpath.htm">canonical_path</a></td>
         <td width=10 align=center>-</td>
         <td>create a full path to the specified file</td>
        </tr>
        <tr>
         <td><a href="prompt_number.htm">prompt_number</a></td>
         <td width=10 align=center>-</td>
         <td>prompt the user to enter a number</td>
        </tr>
        <tr>
         <td>
           <a href="prompt_string.htm">prompt_string</a>
         </td>
         <td width=10 align=center>-</td>
         <td>prompt the user to enter a string</td>
        </tr>
        <tr>
         <td>
           <a href="get.htm">get</a>
         </td>
         <td width=10 align=center>-</td>
         <td>read the representation of any Phix <a href="object.htm">object</a> from a file</td>
        </tr>
        <tr>
         <td>
           <a href="value.htm">value</a>
         </td>
         <td width=10 align=center>-</td>
         <td>read the representation of any Phix <a href="object.htm">object</a> from a <a href="string.htm">string</a>
         </td>
        </tr>
        <tr>
         <td>
           <a href="get_bytes.htm">get_bytes</a>
         </td>
         <td width=10 align=center>-</td>
         <td>read the next n bytes from a file or device</td>
        </tr>
<!-- (now formally adopted, in psym.e/pfile.e sutoinclude)
        <tr>
         <td>
          <a href="read_lines.htm">read_lines</a>
         </td>
         <td width=10 align=center>-</td>
         <td>read a file as a sequence of lines</td>
        </tr>
-->
        <tr>
         <td>
          <a href="read_file.htm">read_file</a>
         </td>
         <td width=10 align=center>-</td>
         <td>read a file as a single <a href="sequence.htm">sequence</a> of bytes</td>
        </tr>
        <tr>
         <td>
          <a href="any_key.htm">any_key</a>
         </td>
         <td width=10 align=center>-</td>
         <td>display a prompt to the user and wait for any key</td>
        </tr>
        <tr>
         <td>
          <a href="series.htm">series</a>
         </td>
         <td width=10 align=center>-</td>
         <td>Create a <a href="sequence.htm">sequence</a> as a series starting from a given object.</td>
        </tr>
<!--
        <tr>
         <td>
          <a href="head.htm">head</a>
         </td>
         <td width=10 align=center>-</td>
         <td>
            Return the first n elements of a <a href="sequence.htm">sequence</a>.
         </td>
        </tr>
        <tr>
         <td>
          <a href="tail.htm">tail</a>
         </td>
         <td width=10 align=center>-</td>
         <td>
            Return the last n elements of a <a href="sequence.htm">sequence</a>.
         </td>
        </tr>
-->
        <tr>
         <td>
          <a href="insert.htm">insert</a>
         </td>
         <td width=10 align=center>-</td>
         <td>Insert an object into a <a href="sequence.htm">sequence</a> as a new element at a given location.</td>
        </tr>
        <tr>
         <td>
          <a href="splice.htm">splice</a>
         </td>
         <td width=10 align=center>-</td>
         <td>Inserts an object as a new slice in a <a href="sequence.htm">sequence</a> at a given position.<br>
             see also <a href="javascript.htm#splice">javascript.splice</a></td>
        </tr>
        <tr>
         <td>
          <a href="remove.htm">remove</a>
         </td>
         <td width=10 align=center>-</td>
         <td>Remove an item, or a range of items from a <a href="sequence.htm">sequence</a>.</td>
        </tr>
        <tr>
         <td>
          <a href="remove_all.htm">remove_all</a>
         </td>
         <td width=10 align=center>-</td>
         <td>Removes all occurrences of some object from a <a href="sequence.htm">sequence</a>.</td>
        </tr>
        <tr>
         <td>
          <a href="replace.htm">replace</a>
         </td>
         <td width=10 align=center>-</td>
         <td>Replace a slice in a <a href="sequence.htm">sequence</a>.</td>
        </tr>
        <tr>
         <td>
          <a href="find_replace.htm">find_replace</a>
         </td>
         <td width=10 align=center>-</td>
         <td>Find and replace occurences in a <a href="sequence.htm">sequence</a>.</td>
        </tr>
        <tr>
         <td>
          <a href="match_replace.htm">match_replace</a>
         </td>
         <td width=10 align=center>-</td>
         <td>Match and replace occurences in a <a href="sequence.htm">sequence</a>.</td>
        </tr>
        <tr>
         <td>
          <a href="to_string.htm">to_string</a>
         </td>
         <td width=10 align=center>-</td>
         <td>Converts an object into a text <a href="string.htm">string</a>.</td>
        </tr>
<!--
        <tr>
         <td>
          <a href="find_any.htm">find_any</a>
         </td>
         <td width=10 align=center>-</td>
         <td>Find any element from a list inside a <a href="sequence.htm">sequence</a>.</td>
        </tr>
-->
<!--
        <tr>
         <td>
          <a href="vlookup.htm">vlookup</a>
         </td>
         <td width=10 align=center>-</td>
         <td>column search</td>
        </tr>
-->
        <tr>
         <td>
          <a href="machine_func.htm">machine_func</a>
         </td>
         <td width=10 align=center>-</td>
         <td>Perform a machine-specific operation (not needed in Phix)</td>
        </tr>
        <tr>
         <td>
          <a href="machine_proc.htm">machine_proc</a>
         </td>
         <td width=10 align=center>-</td>
         <td>Perform a machine-specific operation (not needed in Phix)</td>
        </tr>
        <tr>
         <td>
          <a href="register_block.htm">register_block</a>
         </td>
         <td width=10 align=center>-</td>
         <td>This routine does nothing in Phix.</td>
        </tr>
        <tr>
         <td>
          <a href="unregister_block.htm">unregister_block</a>
         </td>
         <td width=10 align=center>-</td>
         <td>This routine does nothing in Phix.</td>
        </tr>
        <tr>
         <td>
          <a href="map.htm">map</a>
         </td>
         <td width=10 align=center>-</td>
         <td>Phix includes a simple shim for partial compatibility</td>
        </tr>
        <tr>
         <td>
          <a href="hash.htm">hash</a>
         </td>
         <td width=10 align=center>-</td>
         <td>Create a hash value from a key</td>
        </tr>
       </table>
        &nbsp;
       <br>
       <br>
        The routines listed below are Phix-specific and do not have Euphoria equivalents of that name.
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <a href="factorial.htm">factorial</a>
         </td>
         <td width=10 align=center>-</td>
         <td>the factorial of a number</td>
        </tr>
        <tr>
         <td>
          <a href="factors.htm">factors</a>
         </td>
         <td width=10 align=center>-</td>
         <td>the factors of a number</td>
        </tr>
        <tr>
         <td>
          <a href="factors.htm">prime_factors</a>
         </td>
         <td width=10 align=center>-</td>
         <td>the prime factors of a number</td>
        </tr>
        <tr>
         <td>
          <a href="get_proc_address.htm">get_proc_address</a>
         </td>
         <td width=10 align=center>-</td>
         <td>low-level common code for define_c_func/proc/var, also used for run-time interpretation of inline assembly</td>
        </tr>
        <tr>
         <td>
          <a href="get_proper_dir.htm">get_proper_dir</a>
         </td>
         <td width=10 align=center>-</td>
         <td>obtain the full path of a file or directory</td>
        </tr>
        <tr>
         <td>
          <a href="get_proper_path.htm">get_proper_path</a>
         </td>
         <td width=10 align=center>-</td>
         <td>obtain the actual longname and full path of a file or directory</td>
        </tr>
        <tr>
         <td>
          <a href="get_text.htm">get_text</a>
         </td>
         <td width=10 align=center>-</td>
         <td>read a whole text file as a <a href="string.htm">string</a> or <a href="sequence.htm">sequence</a> of lines</td>
        </tr>
        <tr>
         <td>
          <a href="machine_bits.htm">machine_bits</a>
         </td>
         <td width=10 align=center>-</td>
         <td>determine 32 or 64 bit operation. (likewise machine_word, as documented on the same page)</td>
        </tr>
        <tr>
         <td>
          <a href="scanf.htm">scanf</a>
         </td>
         <td width=10 align=center>-</td>
         <td>construct (all) the possible param sequence(s) such that printf could produce the given string</td>
        </tr>
        <tr>
         <td>
          <a href="message_box.htm#set_mb_hwnd">set_mb_hwnd</a>
         </td>
         <td width=10 align=center>-</td>
         <td>specify a default hwnd for message_box (windows only)</td>
        </tr>
        <tr>
         <td>
          <a href="string.htm">string</a>
         </td>
         <td width=10 align=center>-</td>
         <td>note that Euphoria does not have an 8-bit string type</td>
        </tr>
        <tr>
         <td>
          <a href="substitute.htm">substitute</a>
         </td>
         <td width=10 align=center>-</td>
         <td>replace all instances of a substring</td>
        </tr>
        <tr>
         <td>
          <a href="tagset.htm">tagset</a>
         </td>
         <td width=10 align=center>-</td>
         <td>return a <a href="sequence.htm">sequence</a> of integers 1..n</td>
        </tr>
        <tr>
         <td>
          See also
         </td>
         <td width=10 align=center>-</td>
         <td>
          <a href="mthread.htm">multithreading</a>,
          <a href="seqops.htm">sequence ops</a>
         </td>
        </tr>
        &nbsp;
        <br>
        <br>
       </table>
        &nbsp;
       <br>
       <br>
        &nbsp;
       <br>
       <br>
        The routines listed below have important differences between Phix and Euphoria.
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <a href="flatten.htm">flatten</a>
         </td>
         <td width=10 align=center>-</td>
         <td>Phix does not support (the broken) delimiter parameter, use <a href="join.htm">join</a>() instead</td>
        </tr>
        <tr>
         <td>
          <a href="min.htm">min</a>
         </td>
         <td width=10 align=center>-</td>
         <td>in Phix min(s) is an alias for minsq(s) &nbsp; [nb: not achievable using optional parameters]</td>
        </tr>
        <tr>
         <td>
          <a href="max.htm">max</a>
         </td>
         <td width=10 align=center>-</td>
         <td>in Phix max(s) is an alias for maxsq(s) &nbsp; [nb: not achievable using optional parameters]</td>
        </tr>
        &nbsp;
        <br>
        <br>
       </table>
        &nbsp;
       <br>
       <br>
        &nbsp;
       <br>
       <a name=allocate_pointer_array></a>
       <br>
        The routines listed below are deliberately omitted from Phix.
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
           <span class="illegal">allocate_pointer_array</span>
          <br>
           <span class="illegal">free_pointer_array</span>
         </td>
         <td width=10 align=center>-</td>
         <td>
            trailing null, allocate/free contents, and similar questions make these ambiguous, and better off being application specific.
           <a name=slice></a>
         </td>
         <!--DEV/SUG: builtins\templates.e contains sample versions of these routines for you to copy and modify. -->
        </tr>
        <tr>
         <td>
           <span class="illegal">slice</span>
         </td>
         <td width=10 align=center>-</td>
         <td>The Euphoria version treats a stop of 0 as the last element and -1 as one before that, whereas Phix would naturally use -1 and -2.
            Plus it "corrects" out-of-range inputs whereas I feel it makes much more sense (both safer and faster) just to use s[start..stop], 
            and get the indexes right/within bounds in the first place. Hence there is deliberately no equivalent routine provided with Phix.
            See also: <a href="javascript.htm#slice">javascript.slice</a>
         </td>
        </tr>
        &nbsp;
        <br>
        <br>
       </table>
        &nbsp;
       <br>
       <br>
        &nbsp;
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
