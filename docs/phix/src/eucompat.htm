<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Compatibility with OpenEuphoria</h1>
      <div id="mainSection">
       <br>
       <br>
        Obviously true 100% compatibility is a nonsense idea - you would be forced to reproduce all the bugs, warts,
        and glitches of the original, and to top that prohibit any improvement. Instead, 99.9% is more reasonable, but
        you should bear in mind that means you will have to alter, on average, one line of code in a thousand, and in
        practice that is roughly what I get when testing code written for RDS Eu and OpenEuphoria on Phix. To be fair,
        sometimes it may be more like 1 line in every 100, which equates to a mere 99.0% compatibility. More recently
        written code using the very latest 4.1+ features tends to fare less well, but still typically much easier than
        say migrating from win32lib to arwen.
       <br>
       <br>
        While RDS Eu and OpenEuphoria not only support (/encourage/tout) implicit sequence operations, Phix expects
        the programmer to use explicit routines, for example sq_add(x,y) instead of x+y, as detailed in
        <a href="seqops.htm">sequence operations</a>. The compiler issues warnings and performs an automatic 
        substitution of the equivalent function-style routine when doing do is <i>irrefutably</i> the correct thing to 
        do, but terminates in error at runtime if the atom-only primitives are passed a sequence. In my experience so
        far this has not been a significant difficulty, and trivial to fix once detected.
       <br>
       <br>
        The ",," style optional parameters are not supported by Phix. While, for example, both Phix and OpenEuphoria 
        support myfunc(file), only OpenEuphoria allows myfunc(file,,1) whereas Phix requires the second parameter to 
        be present - and of course it is usually a trivial matter to determine what that should be. In Phix all 
        non-optional parameters must be grouped together on the left hand side of routine parameter declarations.
       <br>
       <br>
        OpenEuphoria does not support named parameters, for example in Phix both message_box("there", "hi", MB_OK) 
        and message_box(style:=MB_OK,title:="hi",msg:="there") are equivalent. Note that once you start explicitly
        naming parameters in a call statement you cannot revert to a positional-based method, and there is as yet
        no way to use named parameters on any of the builtins implemented via #ilASM. See psym.e/symint() and the
        AutoAsm() calls for a full list of the latter, apart from the sheer number I doubt it would be particularly 
        difficult to figure something out - passing a list of parameter names to AutoAsm should get you started.
       <br>
       <br>
        Phix does not support forward referencing of variables and constants, though routines are fine. I maintain that
        forward data references add wholly unnecessary complexity, and evidently cause quite noticable performance loss 
        in the compile phase, in OpenEuphoria, and besides are very easily fixed whenever they cause a problem.
       <br>
       <br>
        A particular thorn is wxEuphoria which depends on the internal implementation details of OpenEuphoria and it is
        highly unlikely that a compatibile version of that will become available any time soon.
       <br>
       <br>
        Many routines in Phix, eg open(), puts(), etc already accept both "fred" and {'f','r','e','d'} but some may have 
        slipped though for reasons of expediency. Feel free to log a bug for that when it seems appropriate.
       <br>
       <br>
        The routines listed below have been copied from OpenEuphoria for compatibility reasons. They are only granted 
        the lightest of support and any grief may lead to an offending routine simply being removed rather than fixed. 
        Obviously if I thought these routines were really any good I would adopt them whole-heartedly; the fact they 
        are documented in this section means I have certain reservations about their design or implementation or both.
       <br>
       <br>
        Of course I would happily accept improved versions of these routines for incorporation into the next release.
        &nbsp;
       <br>
       <br>
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <a href="cpath.htm">
           <b>canonical_path</b>
          </a>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>create a full path to the specified file</td>
        </tr>
        <tr>
         <td valign=top>
          <a href="read_lines.htm">
           <b>read_lines</b>
          </a>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>create a full path to the specified file</td>
        </tr>
       </table>
        &nbsp;
       <br>
       <br>
        The routines listed below are Phix-specific and do not have RDS Eu or OpenEuphoria equivalents of that name.
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <a href="get_proper_path.htm">
           <b>get_proper_path</b>
          </a>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>obtain the actual longname and full path of a file or directory</td>
        </tr>
        <tr>
         <td valign=top>
          <a href="string.htm">
           <b>string</b>
          </a>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>neither RDS Eu not OpenEuphoria have an 8-bit string type</td>
        </tr>
        <tr>
         <td valign=top>
          <a href="tagset.htm">
           <b>tagset</b>
          </a>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>return a sequence of integers 1..n</td>
        </tr>
        <tr>
         <td valign=top>
          <a href="substitute.htm">
           <b>substitute</b>
          </a>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>replace all instances of a substring</td>
        </tr>
        <tr>
         <td valign=top>
          <a href="scanf.htm">
           <b>scanf</b>
          </a>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>construct the possible param sequence(s) such that printf could produce the given string</td>
        </tr>
        <tr>
         <td valign=top>
          <a href="factorial.htm">
           <b>factorial</b>
          </a>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>the factorial of a number</td>
        </tr>
        <tr>
         <td valign=top>
          <a href="factors.htm">
           <b>factors</b>
          </a>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>the factors of a number</td>
        </tr>
        <tr>
         <td valign=top>
          <a href="prime_factors.htm">
           <b>prime_factors</b>
          </a>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>the prime factors of a number</td>
        </tr>
        <tr>
         <td valign=top>
          <a href="get_text.htm">
           <b>get_text</b>
          </a>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>read a whole text file as a string or sequence of lines</td>
        </tr>
        <tr>
         <td valign=top>
          <a href="message_box.htm">
           <b>set_mb_hwnd</b>
          </a>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>specify a default hwnd for message_box</td>
        </tr>
        <tr>
         <td valign=top>
          See also
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>
          <a href="mthread.htm">multithreading</a>,
          <a href="seqops.htm">sequence ops</a>
         </td>
        </tr>
        &nbsp;
       <br>
       <br>
       </table>
        &nbsp;
       <br>
       <br>
        &nbsp;
       <br>
       <br>
        The routines listed below have important differences between Phix and RDS Eu/OpenEuphoria.
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <a href="flatten.htm">
           <b>flatten</b>
          </a>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>Phix does not support (the broken) delimiter parameter, use <a href="join.htm">join</a>() instead</td>
        </tr>
        <tr>
         <td valign=top>
          <a href="min.htm">
           <b>min</b>
          </a>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>in Phix min(s) is an alias for minsq(s) &nbsp; [nb: not achievable using optional parameters]</td>
        </tr>
        <tr>
         <td valign=top>
          <a href="max.htm">
           <b>max</b>
          </a>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>in Phix max(s) is an alias for maxsq(s) &nbsp; [nb: not achievable using optional parameters]</td>
        </tr>
        &nbsp;
       <br>
       <br>
       </table>
        &nbsp;
       <br>
       <br>
        &nbsp;
       <br>
       <br>
        The routines listed below are deliberately omitted from Phix.
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
           <a name=allocate_pointer_array></a>
           allocate_pointer_array<br>
           free_pointer_array
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>trailing null, allocate/free contents, and similar questions make these ambiguous, and better off being application specific.
<!--DEV
            builtins\templates.e contains sample versions of these routines for you to copy and modify.
-->
        </tr>
        &nbsp;
       <br>
       <br>
       </table>
        &nbsp;
       <br>
       <br>
        &nbsp;
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
