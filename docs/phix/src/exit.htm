<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Exit Statement</h1>
      <div id="mainSection">
        An <b>exit statement</b> may appear inside a <a href="while.htm">while-loop</a> or a <a href="for.htm">for-loop</a>.
        <br>
        <br>
        Note that phix uses <a href="switch.htm">break</a> within a <a href="switch.htm">switch</a> construct to resume control after
        the end switch, and it does <i>not</i> repurpose or overload that keyword to exit loops, unlike several other programming languages.
        Conversely, while desktop/Phix allows a (direct) exit within a switch statement, that becomes prohibited and generates a 
        compilation/transpilation error under "with js", unless adequately nested, ditto (direct) break from within a loop, since JavaScript
        uses "break" for both loops and switch statements (and of course has no goto statement either, so we couldn&rsquo;t even do that).
        <br>
        <br>
        The exit statement causes immediate termination of the loop, with control passing to the first statement after the loop, for example
<!--eucode>
    for i=1 to length(s) do
        if s[i] = x then
            location = i
            exit
        end if
    end for
</eucode-->
<pre>
<font color="#008080">    for</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">1</font><font color="#008080"> to</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">s</font><font color="#0000FF">)</font><font color="#008080"> do
        if</font><font color="#000000"> s</font><font color="#0000FF">[</font><font color="#000000">i</font><font color="#0000FF">] =</font><font color="#000000"> x</font><font color="#008080"> then</font>
<font color="#000000">            location</font><font color="#0000FF"> =</font><font color="#000000"> i</font>
<font color="#008080">            exit
        end if
    end for</font>
</pre>
        Which is basically what <a href="find.htm">find</a>() does, except that actually uses a <a href="return.htm">return</a> statement rather than a local variable.
        <br>
        <br>
        It is also quite common to see something like this:
<!--eucode>
    while true do
        ...
        if some_condition then
            exit
        end if
        ...
    end while
</eucode-->
<pre>
<font color="#008080">    while</font><font color="#004600"> true</font><font color="#008080"> do</font>
<font color="#0000FF">        ...</font>
<font color="#008080">        if</font><font color="#000000"> some_condition</font><font color="#008080"> then
            exit
        end if</font>
<font color="#0000FF">        ...</font>
<font color="#008080">    end while</font>
</pre>
       i.e. an "infinite" while-loop that actually terminates via an <b>exit statement</b> at some arbitrary point in the body of the loop.
       <br>
       <br>
        If you happen to create a real infinite loop, when using <b>p.exe</b> keying control-c in the console will stop your program immediately.<br>
        However with <b>pw.exe</b> there may not be a console window, and your only option may be to terminate the process via Windows Task Manager. <br>
        To avoid that situation you may want to test (gui) programs using p.exe first, or create a console window at the start of the application, 
        for instance by executing a puts(1,"") statement.
        <br>
        <br>
        For legacy code only, the <b>continue statement</b> is similar, but causes the next iteration to begin immediately.<br>
        Control passes to the "end for" or "end while[+branch straightening]" statement. I will let you guess what this shows:
<!--eucode>
    for i=1 to 5 do
        if i=3 then
            printf(1,"%d is three\n",i)
            continue
        end if
        printf(1,"&d is not three\n",i)
    end for
</eucode-->
<pre>
<font color="#008080">    for</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">1</font><font color="#008080"> to</font><font color="#000000"> 5</font><font color="#008080"> do
        if</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">3</font><font color="#008080"> then</font>
<font color="#7060A8">            printf</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"%d is three\n"</font><font color="#0000FF">,</font><font color="#000000">i</font><font color="#0000FF">)</font>
<font color="#FF0000">            continue</font>
<font color="#008080">        end if</font>
<font color="#7060A8">        printf</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"&amp;d is not three\n"</font><font color="#0000FF">,</font><font color="#000000">i</font><font color="#0000FF">)</font>
<font color="#008080">    end for</font>
</pre>
        Douglas Crockford says "I have never seen a piece of code that was not improved by refactoring it to remove the continue statement", and
        I must agree. In some programming languages a continue expressly restarts the same iteration <i>without</i> (re-)incrementing the control 
        variable or testing for termination. With that in mind, Edita/Edix now colour the continue keyword illegal, although technically it still 
        works, and pwa/p2js issues a gentle warning. Certainly I believe an else plus indent makes it far easier to visualise the control flow.
        <br>
        <br>
        One trap for the unwary awaits: continue may trigger an infinite loop unless the required statement(s) in this kind of while loop are duplicated:
<!--eucode>
        if alldone then exit end if     --\  either
        something += 1                  --/ or both
    end while
</eucode-->
<pre>
<font color="#008080">        if</font><font color="#000000"> alldone</font><font color="#008080"> then exit end if    </font><font color="#000080"><i> --\  either</i></font>
<font color="#000000">        something</font><font color="#0000FF"> +=</font><font color="#000000"> 1                 </font><font color="#000080"><i> --/ or both</i></font>
<font color="#008080">    end while</font>
</pre>
        Obviously if you "continue" without somehow checking for completion/moving on, it will likely find the exact same reasons at the exact same place 
        and therefore re-perform the exact same "continue", forever. In contrast, a for loop/continue automatically performs an implicit control-var increment.
        <br>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
