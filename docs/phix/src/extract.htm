<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">extract</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         <a href="sequence.htm">sequence</a> res = extract(<a href="sequence.htm">sequence</a> source, indexes, 
                                                           <a href="integer.htm#bool">bool</a> invert=<a href="logicops.htm">false</a>)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Pick out a set of elements from a sequence according to the supplied set of indexes.
            <br>
            <br>
            source : the sequence from which to extract elements.<br>
            indexes : a sequence of atoms, the indexes of the elements to be fetched in source.<br>
            invert : invert the indexes, see note below.
            <br>
            <br>
            Returns a sequence, of the same length as indexes.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>Inversion:</b>
         </td>
         <td>
            Index inversion is difficult to explain. Typically you will either know that you need it (and why), or you simply don&rsquo;t need it.<br>
            The P-value correction task on rosettacode contains an example of use, in that case it is about putting things back where they belong
            after shuffling them about to do your thing (if you have a better explanation or example please feel free to pass it along).<br>
            Instead of using the indexes directly, they are used to construct the indexes to use: each (index[i])&rsquo;th index gets i.<br>
            If indexes is {1,2,3} it behaves identically whether invert is true or not, because [1/2/3] get 1/2/3, which is the same.<br>
            However if indexes is {3,1,2} then [3/1/2] get 1/2/3, and it behaves as if {2,3,1} had been passed (and invert was false).<br>
            To clarify, <code>..,{3,1,2},true)</code> [re-]creates indexes as {0,0,0} -> {0,0,1} -> {2,0,1} -> {2,3,1}, before being used.
            <br>
            <br>
            If invert is true and <a href="sort.htm">sort</a>(indexes)!=<a href="tagset.htm">tagset</a>(<a href="length.htm">length</a>(indexes))
            then I expect an error would probably ensue, not that I can be adamantly certain of that.
         </td>
        </tr>
        <tr>
         <td>
          <b>Auillary function:</b>
         </td>
         <td>
            <a href="sequence.htm">sequence</a> res = <b>reinstate</b>(<a href="sequence.htm">sequence</a> source, 
                                                                       <a href="object.htm">object</a> indexes, replacements, 
                                                                       <a href="integer.htm#bool">bool</a> invert=false)
            <br>
            <br>
            Allows (for example) some previously extracted elements to be replaced, not necessarily but usually in the same order/slots.<br>
            While the (reinstate) example below emulates <a href="reverse.htm">reverse</a>(), and in fact the same effect could be achieved by 
            using that routine on either the indexes or the results from extract(), it is probably more likely that you would manipulate the 
            results from extract() before using reinstate() to put them all back in exactly the same place.<br>
            Note that the routine name <a href="replace.htm">replace</a>() is already in use as an otherwise almost pointless compatibility routine 
            for Euphoria, and obviously must not be confused with reinstate().
            <br>
            <br>
            If indexes is an integer then replacements is the entire item to be put into that slot and invert must be false, otherwise
            a fatal error occurs if <a href="length.htm">length</a>(indexes)!=<a href="length.htm">length</a>(replacements) [except as below].
            <small><i>(It would be perfectly reasonable and straightforward to also allow eg reinstate(s,{1,2,3},4) to return s with [1..3] set to 4,
            should a real world use case of that ilk [all reps atom] ever arise, but for now an error is deemed probably more helpful. Likewise there
            may be calls for nested subscripts, eg reinstate(s,{{1,2,3}},4) to return s with s[1][2][3] set to 4, but y&rsquo;know, [variable length]
            slice substitution and all that jazz probably needs a bit of design/thought, along with a decent set of tests.)</i></small>
            <br>
            <br>
            If source is {} and indexes is a <a href="sequence.htm">sequence</a>, source is replaced with 
            <a href="repeat.htm">repeat</a>(0,<a href="max.htm">max</a>(indexes)) and then (and only then) a replacements of {} is replaced with
            <a href="tagset.htm">tagset</a>(<a href="length.htm">length</a>(indexes)), before of course performing the same processing as above,
            which can be used to create reverse index lookups.<br>
            For example reinstate({},{3,5,7},{}) returns {0,0,1,0,2,0,3}, ie res[3] is 1 which is the position where the 3 was in indexes.<br>
            You could have just done a <a href="find.htm">find</a>(3,indexes) instead, but in some cases that might not scale quite so well, or
            if you would have needed to make a copy anyway, you might as well convert it.
         </td>
        </tr>
        <tr>
         <td>
          <b>Examples:</b>
         </td>
         <td>
<!--eucode>
?extract({11,13,15,17},{3,1,2,1,4}) -- prints {15,11,13,11,17}
string s = "nip"
?reinstate(s,{3,1},extract(s,{1,3})) -- prints "pin"
</eucode-->
<pre>
<font color="#0000FF">?</font><font color="#7060A8">extract</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">11</font><font color="#0000FF">,</font><font color="#000000">13</font><font color="#0000FF">,</font><font color="#000000">15</font><font color="#0000FF">,</font><font color="#000000">17</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">4</font><font color="#800000">}</font><font color="#0000FF">)</font><font color="#000080"><i> -- prints {15,11,13,11,17}</i></font>
<font color="#004080">string</font><font color="#000000"> s</font><font color="#0000FF"> =</font><font color="#008000"> "nip"</font>
<font color="#0000FF">?</font><font color="#7060A8">reinstate</font><font color="#0000FF">(</font><font color="#000000">s</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#7060A8">extract</font><font color="#800000">(</font><font color="#000000">s</font><font color="#0000FF">,</font><font color="#800080">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">3</font><font color="#800080">}</font><font color="#800000">)</font><font color="#0000FF">)</font><font color="#000080"><i> -- prints "pin"</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\pextract.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
       </table>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
