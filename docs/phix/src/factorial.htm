<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">factorial / k_perm / choose</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         <a href="atom.htm">atom</a> res = factorial(<a href="atom.htm">atom</a> n)
          <br>
          <i>-- or --</i>
          <br>
         <a href="atom.htm">atom</a> res = k_perm(<a href="integer.htm">integer</a> n, k)
          <br>
          <i>-- or --</i>
          <br>
         <a href="atom.htm">atom</a> res = choose(<a href="integer.htm">integer</a> n, k)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            factorial(): standard iterative factorial function, with memoisation.<br>
            k_perm(): standard partial permutations calculation (sequences without repetition).<br>
            choose(): standard combinations calculation - choose k from n aka "n choose k"
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            factorial() returns infinity for n>170 on 32-bit, and for n>1754 on 64-bit. 
            <br>
            <br>
            Atoms on 32-bit are limited to 53 bits of precision, which means that the largest factorial which can be held exactly 
            is 18 on 32-bit and 20 on 64-bit, anything above that up to the limits just given are approximations. There is also an
            <a href="mpfr.htm#mpz">mpz</a> version, mpz_fac_ui(), with far higher limits, and perfect accuracy.
            <br>
            <br>
            The k_perm() routine calculates the result directly, rather than via the slightly less efficient (/limit-exceeding) way of 
            using complete factorials, ie n(n-1)..(n-k-1) rather than n!/(n-k)!, and choose() simply divides that by k!.
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\factorial.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
--            n : 0 1 2 3 4  5   6   7    8
--  factorial(n): 1 1 2 6 24 120 720 5040 40320 
</eucode-->
<pre>
<font color="#000080"><i>--            n : 0 1 2 3 4  5   6   7    8
--  factorial(n): 1 1 2 6 24 120 720 5040 40320 </i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="mpfr.htm">mpz_fac_ui</a>,
          <a href="mpfr.htm">mpz_bin_uiui</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
