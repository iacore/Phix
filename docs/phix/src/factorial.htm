<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">factorial</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         <a href="atom.htm">atom</a> a = factorial(<a href="integer.htm">integer</a> n)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Standard iterative factorial function, with memoisation.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            Returns inf for n>170 (1754 on 64-bit). 
            <br>
            <br>
            Atoms on 32-bit are limited to 53 bits of precision, which means that the largest factorial which can be 
            held exactly is 18 (20 on 64-bit), above that up to the limits above are approximations. There is also a 
            <a href="bigatom.htm">bigatom</a> version, ba_factorial(), with more accuracy and higher limits, which is
            a modified copy of this routine that likewise demands an integer argument, however I cannot state anything
            particularly useful about the extended accuracy or limits that provides, beyond noting that the memoised
            results are held in a normal sequence, which is calculated sequentially, so to obtain ba_factorial(10,000)
            it must invoke or have invoked ba_mul() at least 10,000 times, with corresponding performance implications.
         </td>
        </tr>
        <tr>
         <td>
          <b>Ancilliary functions:</b>
         </td>
         <td>
            <a href="atom.htm">atom</a> res = k_perm(<a href="integer.htm">integer</a> n, k)    -- standard partial permutations calculation (sequences without repetition)
            <br>
            <a href="atom.htm">atom</a> res = choose(<a href="integer.htm">integer</a> n, k)    -- standard combinations calculation - choose k from n aka "n choose k"
            <br>
            <br>
            The k_perm routine calculates the result directly, rather than via the slightly less efficient (/limit-exceeding) way of using the complete factorials, 
            ie n(n-1)..(n-k-1) rather than n!/(n-k)! and the choose routine simply divides that by factorial(k).
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\factorial.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
--            n : 0 1 2 3 4  5   6   7    8
--  factorial(n): 1 1 2 6 24 120 720 5040 40320 
</eucode-->
<pre>
<font color="#000000"></font><font color="#000080"><i>--            n : 0 1 2 3 4  5   6   7    8
--  factorial(n): 1 1 2 6 24 120 720 5040 40320 </i></font>
</pre>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
