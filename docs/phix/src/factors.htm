<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">[prime_]factors / is_prime</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         <a href="sequence.htm">sequence</a> s = factors(<a href="atom.htm">atom</a> n, <a href="integer.htm">integer</a> include1=0)
          <br>
          <i>-- or --</i>
          <br>
         <a href="sequence.htm">sequence</a> s = prime_factors(<a href="atom.htm">atom</a> n, 
                                                               <a href="integer.htm#bool">bool</a> duplicates=<a href="logicops.htm">false</a>,
                                                               <a href="integer.htm">integer</a> maxprime=100)
          <br>
          <i>-- or --</i>
          <br>
         <a href="sequence.htm">sequence</a> s = prime_powers(<a href="atom.htm">atom</a> n)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            factors() returns a list of all integer factors of n.<br>
            prime_factors() returns a list of prime factors of n.<br>
            prime_powers() returns a list of prime powers of n.<br>
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            The parameter n must be an integer (as stored in an atom) between 0 and 
            <a href="log.htm">power</a>(2,<a href="iff.htm">iff</a>(<a href="machine_bits.htm">machine_bits</a>()=32?53:64)).<br>
            If n is 0 the result is {}, irrespective of the include1 setting.
            <br>
            <br>
            If the optional include1 parameter is:<br>
            &nbsp;1 the result includes 1 and n,<br>
            -1 the result includes 1 but not n, and <br>
            &nbsp;0 (the default), the result includes neither 1 nor n.
            <br>
            <br>
            The factors() routine is really only suitable for relatively small values of n, for larger values consider using 
            <a href="factors.htm">prime_factors</a>() or <a href="mpfr.htm#mpz_prime_factors">mpz_prime_factors</a>() instead.
            <br>
            <br>
            On 32-bit, the <a href="log.htm">power</a>(2,53) limit of 9,007,199,254,740,992 performs some 47,453,132 trial 
            divisions, which at several hundred clock cycles (each) takes just under 2 seconds on my machine.<br>
            That should give you some idea of just how far you can push this routine before needing to a) look for something 
            better, or b) devise a smarter approach/algorithm that relies a little less on brute force and ignorance.<br>
            Values above the stated limits trigger an exception, since otherwise the <a href="accuracy.htm">dropped bits</a>
            would make the result quite incorrect and utterly meaningless.
            <br>
            <br>
            Note that, when duplicates is false, prime_factors() always returns {} when passed a prime number (or 1).<br>
            If n is 0 the result is {}, irrespective of any other setting.
            <br>
            <br>
            When duplicates is true, prime_factors() returns a list such that multiplying all the elements of it together 
            produces the value n, ie a true decomposition. <br>
            In fact, prime_factors(1,true) yields {1} as a special case to fulfil that requirement, despite 1 not actually 
            being a prime number.<br>
            That special case is also the one and only time the result of prime_factors() can ever contain a 1.
            <br>
            <br>
            The maxprime argument limits the number of prime number factors that are checked, for more details see
            <a href="mpfr.htm#mpz_prime_factors">mpz_prime_factors</a>(), which is also capable of handling much larger inputs.<br>
            The <a href="get_prime.htm">get_maxprime</a>() function can be used to obtain a suitable maxprime index by performing
            a fast <a href="bsearch.htm">binary_search</a>() for floor(sqrt(p)), which ensures all appropriate primes are 
            checked. However that routine is unlikely to be suitable for <a href="mpfr.htm#mpz_prime_factors">mpz_prime_factors</a>()
            for reasons outlined therein. Alternatively you can pass -1 to maxprime (in this routine) and have it invoke
            <a href="get_prime.htm">get_maxprime</a>() for you, but of course that potentially means an unnecessary sqrt() 
            and binary_search() every time. 
            <br>
            <br>
            Values above the stated limits trigger an exception, since otherwise the <a href="accuracy.htm">dropped bits</a>
            would make the result quite incorrect and utterly meaningless. Should you by some strange circumstance happen
            to know that several trailing bits of a very large n are <i>meant</i> to be 0 (something this routine could not
            possibly test) and therefore there really isn&rsquot any precision loss, I supppose you <i>could</i> divide by
            <a href="log.htm">power</a>(2,k) and <a href="prepend.htm">prepend</a> <a href="repeat.htm">repeat</a>(2,k) 
            to the head of the result, for some k.
            <br>
            <br>
            The prime_powers() function decomposes n into powers of small primes, eg 108 ==> {{2,2},{3,3}}<br>
            Each element of the result is a {prime,power} pair. Note this will persevere all the way on up to 16/20 digit numbers,
            and may get rather slow towards the upper end, of power(2,53|64).
            This is closer to <a href="mpfr.htm#mpz_prime_factors">mpz_prime_factors</a>() than prime_factors() is.
         </td>
        </tr>
        <tr>
         <td>
          <b>Auxillary functions:</b>
         </td>
         <td>
            <a href="integer.htm#bool">bool</a> res = <b>square_free</b>(<a href="atom.htm">atom</a> n, <a href="integer.htm">integer</a> maxprime=100)<br>
            returns true if prime_factors(n,true,maxprime) would contain no duplicates, but without constructing any unnecessary internal lists, and 
            quitting early on failure. square_free(0) yields true, because it is.
            <br>
            <br>
            <a href="integer.htm#bool">bool</a> res = <b>is_prime</b>(<a href="atom.htm">atom</a> n)<br>
            returns true if prime_factors(n,false,<a href="get_prime.htm">get_maxprime</a>(n)) would yield {}, but using a faster/simplified version of 
            almost the same algorithm. is_prime(0) yields false, because it isn&rsquo;t.
            Bear in mind, however, that while this is pretty fast, even on 15 or 16 digit numbers, it is still a trial division approach and no doubt 
            <a href="mpfr.htm">mpz_prime</a>() will be much faster on larger numbers, plus of course not bound by any 53/64 bit precision limits.
            <br>
            <br>
            The checks on the legal range of n and handling of -1 in maxprime as noted above apply equally to these routines.
         </td>
        </tr>
<!--
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          supported.
         </td>
        </tr>
-->
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
?factors(6) -- {2,3}
?factors(6,include1:=1) -- {1,2,3,6}
?factors(6,include1:=-1) -- {1,2,3}
?prime_factors(6) -- {2,3}
?prime_factors(720) -- {2,3,5}
?prime_factors(12345) -- {3,5,823}
?prime_factors(27) -- {3}
?prime_factors(27,duplicates:=true) -- {3,3,3}
?get_prime(101) -- 547
atom a = power(2*get_prime(101),2)
?prime_factors(a,true)      -- {2,2,299209}
?prime_factors(a,true,101)  -- {2,2,547,547}
</eucode-->
<pre>
<font color="#0000FF">?</font><font color="#5E005E">factors</font><font color="#0000FF">(</font><font color="#000000">6</font><font color="#0000FF">)</font><font color="#000080"><i> -- {2,3}</i></font>
<font color="#0000FF">?</font><font color="#5E005E">factors</font><font color="#0000FF">(</font><font color="#000000">6</font><font color="#0000FF">,</font><font color="#000000">include1</font><font color="#0000FF">:=</font><font color="#000000">1</font><font color="#0000FF">)</font><font color="#000080"><i> -- {1,2,3,6}</i></font>
<font color="#0000FF">?</font><font color="#5E005E">factors</font><font color="#0000FF">(</font><font color="#000000">6</font><font color="#0000FF">,</font><font color="#000000">include1</font><font color="#0000FF">:=-</font><font color="#000000">1</font><font color="#0000FF">)</font><font color="#000080"><i> -- {1,2,3}</i></font>
<font color="#0000FF">?</font><font color="#5E005E">prime_factors</font><font color="#0000FF">(</font><font color="#000000">6</font><font color="#0000FF">)</font><font color="#000080"><i> -- {2,3}</i></font>
<font color="#0000FF">?</font><font color="#5E005E">prime_factors</font><font color="#0000FF">(</font><font color="#000000">720</font><font color="#0000FF">)</font><font color="#000080"><i> -- {2,3,5}</i></font>
<font color="#0000FF">?</font><font color="#5E005E">prime_factors</font><font color="#0000FF">(</font><font color="#000000">12345</font><font color="#0000FF">)</font><font color="#000080"><i> -- {3,5,823}</i></font>
<font color="#0000FF">?</font><font color="#5E005E">prime_factors</font><font color="#0000FF">(</font><font color="#000000">27</font><font color="#0000FF">)</font><font color="#000080"><i> -- {3}</i></font>
<font color="#0000FF">?</font><font color="#5E005E">prime_factors</font><font color="#0000FF">(</font><font color="#000000">27</font><font color="#0000FF">,</font><font color="#000000">duplicates</font><font color="#0000FF">:=</font><font color="#004600">true</font><font color="#0000FF">)</font><font color="#000080"><i> -- {3,3,3}</i></font>
<font color="#0000FF">?</font><font color="#5E005E">get_prime</font><font color="#0000FF">(</font><font color="#000000">101</font><font color="#0000FF">)</font><font color="#000080"><i> -- 547</i></font>
<font color="#004080">atom</font><font color="#000000"> a</font><font color="#0000FF"> =</font><font color="#7060A8"> power</font><font color="#0000FF">(</font><font color="#000000">2</font><font color="#0000FF">*</font><font color="#5E005E">get_prime</font><font color="#800000">(</font><font color="#000000">101</font><font color="#800000">)</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">)
?</font><font color="#5E005E">prime_factors</font><font color="#0000FF">(</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#004600">true</font><font color="#0000FF">)     </font><font color="#000080"><i> -- {2,2,299209}</i></font>
<font color="#0000FF">?</font><font color="#5E005E">prime_factors</font><font color="#0000FF">(</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#004600">true</font><font color="#0000FF">,</font><font color="#000000">101</font><font color="#0000FF">) </font><font color="#000080"><i> -- {2,2,547,547}</i></font>
</pre>
            <br>
            The use of a <a href="procedures.htm#namedparams">named parameter</a> when setting the include1 parameter is recommended, 
            to make the intent clear and the code easier to read. Using constants (which you would have to declare yourself) such as
            BOTH = 1, JUST1 = -1, and NEITHER = 0 might further improve clarity (builtin constants would deserve to be named something 
            like FACTORS_INCLUDE1_BOTH, and I am more than a little reluctant to bother with that).
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\pfactors.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="prime_factors.htm">prime_factors</a>,
          <a href="mpfr.htm#mpz_prime_factors">mpz_prime_factors</a>,
          <a href="accuracy.htm">Floats Are Not Exact</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
