<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">factors</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         <a href="sequence.htm">sequence</a> s = factors(<a href="atom.htm">atom</a> n, <a href="integer.htm">integer</a> include1=0)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Returns a list of all integer factors of n, which must be an integer (as stored in an atom) between 0 and 
            <a href="power.htm">power</a>(2,<a href="iff.htm">iff</a>(<a href="machine_bits.htm">machine_bits</a>()=32?53:64)).<br>
            If n is 0 the result is {}, irrespective of the include1 setting.
            <br>
            <br>
            If the optional include1 parameter is:<br>
            &nbsp;1 the result includes 1 and n,<br>
            -1 the result includes 1 but not n, and <br>
            &nbsp;0 (the default), the result includes neither 1 nor n.
            <br>
            <br>
            This routine is really only suitable for relatively small values of n, for larger values consider using 
            <a href="prime_factors.htm">prime_factors</a>() or <a href="mpfr.htm#mpzextras">mpz_prime_factors</a>() instead.
            <br>
            <br>
            On 32-bit, the <a href="power.htm">power</a>(2,53) limit of 9,007,199,254,740,992 performs some 47,453,132 trial 
            divisions, which at several hundred clock cycles (each) takes just under 2 seconds on my machine.<br>
            That should give you some idea of just how far you can push this routine before needing to a) look for something 
            better, or b) devise a smarter approach/algorithm that relies a little less on ignorance and brute force.<br>
            Values above the stated limits trigger an exception, since otherwise the <a href="accuracy.htm">dropped bits</a>
            would make the result quite incorrect and utterly meaningless.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
s = factors(6) -- s is {2,3}
s = factors(6,include1:=1) -- s is {1,2,3,6}
s = factors(6,include1:=-1) -- s is {1,2,3}
</eucode-->
<pre>
<font color="#000000">s</font><font color="#0000FF"> =</font><font color="#5E005E"> factors</font><font color="#0000FF">(</font><font color="#000000">6</font><font color="#0000FF">)</font><font color="#000080"><i> -- s is {2,3}</i></font>
<font color="#000000">s</font><font color="#0000FF"> =</font><font color="#5E005E"> factors</font><font color="#0000FF">(</font><font color="#000000">6</font><font color="#0000FF">,</font><font color="#000000">include1</font><font color="#0000FF">:=</font><font color="#000000">1</font><font color="#0000FF">)</font><font color="#000080"><i> -- s is {1,2,3,6}</i></font>
<font color="#000000">s</font><font color="#0000FF"> =</font><font color="#5E005E"> factors</font><font color="#0000FF">(</font><font color="#000000">6</font><font color="#0000FF">,</font><font color="#000000">include1</font><font color="#0000FF">:=-</font><font color="#000000">1</font><font color="#0000FF">)</font><font color="#000080"><i> -- s is {1,2,3}</i></font>
</pre>
            <br>
            The use of a <a href="procedures.htm#namedparams">named parameter</a> when setting the include1 parameter is recommended, 
            to make the intent clear and the code easier to read. Using constants (which you would have to declare yourself) such as
            BOTH = 1, JUST1 = -1, and NEITHER = 0 might further improve clarity (builtin constants would deserve to be named something 
            like FACTORS_INCLUDE1_BOTH, and I am more than a little reluctant to bother with that).
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\pfactors.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="prime_factors.htm">prime_factors</a>,
          <a href="mpfr.htm#mpzextras">mpz_prime_factors</a>,
          <a href="accuracy.htm">Floats Are Not Exact</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
