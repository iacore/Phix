<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">find</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          <a href="integer.htm">integer</a> i = find(<a href="object.htm">object</a> needle, 
                                                     <a href="sequence.htm">sequence</a> haystack,
                                                     <a href="integer.htm">integer</a> start=1)
        <br>
          <i>-- or --</i>
        <br>
          <a href="integer.htm">integer</a> i = rfind(<a href="object.htm">object</a> needle,
                                                      <a href="sequence.htm">sequence</a> haystack,
                                                      <a href="integer.htm">integer</a> start=-1)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>Find needle as an element of haystack. If successful, return the index
             of the first element of haystack that matches. If unsuccessful return 0.
            <br>
            <br>
            The start index may optionally be specified, as per example 3 below.<br>
            Negative start indices are allowed, but not 0 or &lt; -length(haystack).<br>
            In contrast, indices &gt; +length(haystack) cause no problems, yielding 0.
            <br>
            <br>
            The rfind() routine is identical but works from the end of haystack to the start.
            <br>
            <br>
            The <span class="illegal">find_from</span>() routine, which predated optional parameters, is now deprecated. 
            Simply use find() with the optional third parameter instead.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
            Supported.
            Not that anyone should care, this clobbers/overrides a non-standard Window.find() method, which as I understand 
            it is equivalent to the pseudocode 'Window.simulateKeyPress("<Ctrl F>")' (etc) which returns true/false and may 
            or may not would have selected/highlighted any found content on the web page. Otherwise works as expected.
         </td>
        </tr>
        <tr>
         <td>
          <b><nobr>Auxillary routine:</nobr></b>
         </td>
         <td>
            sequence res = <b>find_all</b>(object needle, sequence haystack, integer start=1)<br>
            returns a sequence of the indexes of all matching elements, {} if no elements match.<br>
            As long as it exists, res[1] will always be non-zero and match a plain find() given the 
            same parameters, since it uses that internally anyway.
         </td>
        </tr>
<!--
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
            Supported.
         </td>
        </tr>
-->
        <tr>
         <td>
          <b>Example 1:</b>
         </td>
         <td>
<!--eucode>
integer location = find(11, {5, 8, 11, 2, 3})
-- location is set to 3
</eucode-->
<pre>
<font color="#004080">integer</font><font color="#000000"> location</font><font color="#0000FF"> =</font><font color="#7060A8"> find</font><font color="#0000FF">(</font><font color="#000000">11</font><font color="#0000FF">,</font><font color="#800000"> {</font><font color="#000000">5</font><font color="#0000FF">,</font><font color="#000000"> 8</font><font color="#0000FF">,</font><font color="#000000"> 11</font><font color="#0000FF">,</font><font color="#000000"> 2</font><font color="#0000FF">,</font><font color="#000000"> 3</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#000080"><i>-- location is set to 3</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 2:</b>
         </td>
         <td>
<!--eucode>
sequence names = {"fred", "rob", "george", "mary", ""}
integer location = find("mary", names)
-- location is set to 4
</eucode-->
<pre>
<font color="#004080">sequence</font><font color="#000000"> names</font><font color="#0000FF"> = {</font><font color="#008000">"fred"</font><font color="#0000FF">,</font><font color="#008000"> "rob"</font><font color="#0000FF">,</font><font color="#008000"> "george"</font><font color="#0000FF">,</font><font color="#008000"> "mary"</font><font color="#0000FF">,</font><font color="#008000"> ""</font><font color="#0000FF">}</font>
<font color="#004080">integer</font><font color="#000000"> location</font><font color="#0000FF"> =</font><font color="#7060A8"> find</font><font color="#0000FF">(</font><font color="#008000">"mary"</font><font color="#0000FF">,</font><font color="#000000"> names</font><font color="#0000FF">)</font>
<font color="#000080"><i>-- location is set to 4</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 3:</b>
         </td>
         <td>
<!--eucode>
integer idx = find(8, {5, 8, 11, 8, 11, 8}, 3)
-- idx is set to 4; the matching value at [2] was obviously skipped/not  
--                  examined because a start index of 3 was specified.
sequence idii = find_all(8, {5, 8, 11, 8, 11, 8}, 3)
-- idii is set to {4,6}. It would be {2,4,6} without the start of 3.
</eucode-->
<pre>
<font color="#004080">integer</font><font color="#000000"> idx</font><font color="#0000FF"> =</font><font color="#7060A8"> find</font><font color="#0000FF">(</font><font color="#000000">8</font><font color="#0000FF">,</font><font color="#800000"> {</font><font color="#000000">5</font><font color="#0000FF">,</font><font color="#000000"> 8</font><font color="#0000FF">,</font><font color="#000000"> 11</font><font color="#0000FF">,</font><font color="#000000"> 8</font><font color="#0000FF">,</font><font color="#000000"> 11</font><font color="#0000FF">,</font><font color="#000000"> 8</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#000000"> 3</font><font color="#0000FF">)</font>
<font color="#000080"><i>-- idx is set to 4; the matching value at [2] was obviously skipped/not  
--                  examined because a start index of 3 was specified.</i></font>
<font color="#004080">sequence</font><font color="#000000"> idii</font><font color="#0000FF"> =</font><font color="#5E005E"> find_all</font><font color="#0000FF">(</font><font color="#000000">8</font><font color="#0000FF">,</font><font color="#800000"> {</font><font color="#000000">5</font><font color="#0000FF">,</font><font color="#000000"> 8</font><font color="#0000FF">,</font><font color="#000000"> 11</font><font color="#0000FF">,</font><font color="#000000"> 8</font><font color="#0000FF">,</font><font color="#000000"> 11</font><font color="#0000FF">,</font><font color="#000000"> 8</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#000000"> 3</font><font color="#0000FF">)</font>
<font color="#000080"><i>-- idii is set to {4,6}. It would be {2,4,6} without the start of 3.</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\find.e and/or builtins\pfindall.e (both autoincludes) for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="match.htm">match</a>,
          <a href="compare.htm">compare</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
