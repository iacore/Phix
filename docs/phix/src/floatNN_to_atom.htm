<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">floatNN_to_atom</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
         atom a1 = floatNN_to_atom(sequence s)  -- where NN is 32/64/80
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>Convert a sequence of 4/8/10 bytes to an atom. These bytes must
             contain an IEEE floating-point number in the right 32/64/80-bit format.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>
            There are three very similar routines, float32_to_atom, float64_to_atom, and float80_to_atom, which
            deal with 32-bit/4-byte, 64-bit/8-byte, and 80-bit/10-byte conversions respectively.
            <br>
            <br>
            Any 32, 64, or 80-bit IEEE floating-point number can be converted to an atom,
            however on 32-bit conversion of an 80-bit float (implicitly to a 64-bit float)
            may incur loss of precision.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
f = repeat(0, 8)
fn = open("numbers.dat", "rb")  -- read binary
for i=1 to 8 do
    f[i] = getc(fn)
end for
a = float64_to_atom(f)
</eucode-->
<pre>
<font color="#000000">f</font><font color="#0000FF"> =</font><font color="#7060A8"> repeat</font><font color="#0000FF">(</font><font color="#000000">0</font><font color="#0000FF">,</font><font color="#000000"> 8</font><font color="#0000FF">)
</font><font color="#000000">fn</font><font color="#0000FF"> =</font><font color="#7060A8"> open</font><font color="#0000FF">(</font><font color="#008000">"numbers.dat"</font><font color="#0000FF">,</font><font color="#008000"> "rb"</font><font color="#0000FF">) </font><font color="#000080"><i> -- read binary
</i></font><font color="#008080">for</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">1</font><font color="#008080"> to</font><font color="#000000"> 8</font><font color="#008080"> do
</font><font color="#000000">    f</font><font color="#0000FF">[</font><font color="#000000">i</font><font color="#0000FF">] =</font><font color="#7060A8"> getc</font><font color="#0000FF">(</font><font color="#000000">fn</font><font color="#0000FF">)
</font><font color="#008080">end for
</font><font color="#000000">a</font><font color="#0000FF"> =</font><font color="#7060A8"> float64_to_atom</font><font color="#0000FF">(</font><font color="#000000">f</font><font color="#0000FF">)</font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="atom_to_floatNN.htm">atom_to_floatNN</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
