<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">For in Statement</h1>
      <div id="mainSection">
        In many cases the following variant of the for statement permits noticeably neater code, for instance:
<!--eucode>
    for i,e in s do
</eucode-->
<pre>
<font color="#008080">    for</font><font color="#000000"> i</font><font color="#0000FF">,</font><font color="#000000">e</font><font color="#008080"> in</font><font color="#000000"> s</font><font color="#008080"> do</font>
</pre>
        is equivalent to/shorthand for
<!--eucode>
    for i=1 to length(s) do
        object e = s[i]
</eucode-->
<pre>
<font color="#008080">    for</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">1</font><font color="#008080"> to</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">s</font><font color="#0000FF">)</font><font color="#008080"> do</font>
<font color="#004080">        object</font><font color="#000000"> e</font><font color="#0000FF"> =</font><font color="#000000"> s</font><font color="#0000FF">[</font><font color="#000000">i</font><font color="#0000FF">]</font>
</pre>
        The control variable, i, can be omitted, in which case an anonymous temporary variable is used <small>(which may make debugging harder)</small>.<br>
        The default starting point of 1 can be overidden with a from clause, ditto end point of length(s) using a to clause, which can sometimes 
        save an unecessary slice operation.<br>
        The element, e, is automatically declared as <a href="object.htm">object</a> type<small><sup>1</sup></small> and scoped to the loop if 
        it does not already exist.<small><sup>2</sup></small><br>
        The target <a href="sequence.htm">sequence</a>, s, can be any legal expression or literal, with of course non-sequences
        triggering the usual "length of an atom is not defined" error at run time. Other valid forms include but are not limited to:
<!--eucode>
    for e in s do
    for i,e in s[k] do
    for e in {1,"two",{3,4.5}} do
    for word in {"one","two","three"} do
    for word in filter(unix_dict(),twovowels) do
    for ch in "word" do
    for i in tagstart(5,5,5) do -- {5,10,15,20,25}
</eucode-->
<pre>
<font color="#008080">    for</font><font color="#000000"> e</font><font color="#008080"> in</font><font color="#000000"> s</font><font color="#008080"> do
    for</font><font color="#000000"> i</font><font color="#0000FF">,</font><font color="#000000">e</font><font color="#008080"> in</font><font color="#000000"> s</font><font color="#0000FF">[</font><font color="#000000">k</font><font color="#0000FF">]</font><font color="#008080"> do
    for</font><font color="#000000"> e</font><font color="#008080"> in</font><font color="#0000FF"> {</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"two"</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">4.5</font><font color="#800000">}</font><font color="#0000FF">}</font><font color="#008080"> do
    for</font><font color="#7060A8"> word</font><font color="#008080"> in</font><font color="#0000FF"> {</font><font color="#008000">"one"</font><font color="#0000FF">,</font><font color="#008000">"two"</font><font color="#0000FF">,</font><font color="#008000">"three"</font><font color="#0000FF">}</font><font color="#008080"> do
    for</font><font color="#7060A8"> word</font><font color="#008080"> in</font><font color="#7060A8"> filter</font><font color="#0000FF">(</font><font color="#7060A8">unix_dict</font><font color="#800000">()</font><font color="#0000FF">,</font><font color="#000000">twovowels</font><font color="#0000FF">)</font><font color="#008080"> do
    for</font><font color="#000000"> ch</font><font color="#008080"> in</font><font color="#008000"> "word"</font><font color="#008080"> do
    for</font><font color="#000000"> i</font><font color="#008080"> in</font><font color="#7060A8"> tagstart</font><font color="#0000FF">(</font><font color="#000000">5</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#0000FF">)</font><font color="#008080"> do</font><font color="#000080"><i> -- {5,10,15,20,25}</i></font>
</pre>
<!-- maybe in version 2.0.0:
    for e in reverse(s) do end for -- optimised
-->
        Aside: Everything past this point is a deep dive into the nitty-gritty, along with attempts to justify why it was
        deliberately kept as simple and straightforward as possible, that you might want to skip on first reading.
        <br>
        <br>
        The element is just a normal variable, and nothing special happens should it be assigned something else mid-loop,
        and there is no problem, error, or warning should you nest two or more "for e in" loops, though obviously just like
        traditional "to" for statements it is not permitted to nest "for i,e in" loops, since the inner i would clobber the
        outer i and behave at best erractically, but obviously you <i>can</i> nest "j,e" in "i,e", or vice versa. 
        Should <a href="object.htm">object</a> be in any way an inadequate type for e, or the thought of a nested "for e in"
        clobbering some outer e horrifies you, simply pre-declare it [with a better type], and perhaps/probably reconsider 
        whether you should be using a "to" loop - the whole point is to get things neatly and elegantly into one line, and
        as soon as it don&rsquo;t or you otherwise struggle, this ain&rsquo;t the answer. 
        One thing to note is that modifing some e[k] of a subsequence of s is more than likely to trigger a p2js violation. 
        To actually modify s[i], do so explicitly, and obviously an index is needed, so use the i,e form, or probably even 
        better yet revert to a traditional longhand loop.
        <br>
        <br>
        Since this is merely a shorthand notation, <a href="p2js.htm"><span class="pwap2js">pwa/p2js</span></a> writes out 
        the equivalent longhand JavaScript<small><sup>3</sup></small>, using an i$idx identifier when the control variable 
        is omitted, and i$seq when s is not a plain variable, both following in the footsteps of the already well-proven 
        i$lim approach, and makes no attempt to revert to shorthand form unless either i$idx or i$seq was in fact required. 
        Likewise, and independently of each other, a "let" will automatically be used or not depending on whether the 
        index/element has previously been declared or not. For more details see <a href="mappings.htm">mappings</a>.
        <br>
        <br>
        There is no connection to any of the various "in" or "forEach" loop flavours of JavaScript, it simply uses the plainest possible
        standard loop.<br>
        In particular the Javascript <small><code>for (let x of "one")</code></small> extracts diddy-strings not characters, whereas 
        <small><code>for (let x in "one")</code></small> sets x to 0 1 2, neither of which seem particularly useful from a desktop/Phix 
        or pwa/p2js point of view. 
        MDN actually suggests the for..in construct of JavaScript is only of any real use in a quick & dirty debug dump capacity.
<!-- DEV: test whether "integer i; for i=1 to N do" actually does now get the i$lim thing right... -->
<!--
        <br>
        <br>
        Bear in mind this "simple shorthand" has proved anything but in practice, and should any problems arise you are expected to
        report the issue and revert to using longhand notation until it is fixed.
-->
        <br>
        <br>
<!--
--wishful thinking!!
        One special optimisation applies:
<x!--eucode>
    enum Up,Down,Left,Right
    for d in {Up,Down,Left,Right} do
</eucode--x>
<pre>
<font color="#008080">    enum</font><font color="#000000"> Up</font><font color="#0000FF">,</font><font color="#000000">Down</font><font color="#0000FF">,</font><font color="#000000">Left</font><font color="#0000FF">,</font><font color="#000000">Right</font>
<font color="#008080">    for</font><font color="#000000"> d</font><font color="#008080"> in</font><font color="#0000FF"> {</font><font color="#000000">Up</font><font color="#0000FF">,</font><font color="#000000">Down</font><font color="#0000FF">,</font><font color="#000000">Left</font><font color="#0000FF">,</font><font color="#000000">Right</font><font color="#0000FF">}</font><font color="#008080"> do</font>
</pre>
        is optimised to emit the same as <code>for d=1 to 4 do</code>, that is when it detects an opMkSq with all integers starting 
        from 1 and each incrementing by 1, it avoids actually building and subscripting a sequence when there is simply no point. 
        A warning is issued should s be an out-of-order collection of 1..length(s), on the assumption it has been mis-typed, so note 
        that when it does indeed need to be in a different order, said warning does not occur (no mid-for opMkSq) when coded as
<x!--eucode>
    sequence ds = {Up,Right,Down,Left}
    for d in ds do
</eucode--x>
<pre>
<font color="#004080">    sequence</font><font color="#000000"> ds</font><font color="#0000FF"> = {</font><font color="#000000">Up</font><font color="#0000FF">,</font><font color="#000000">Right</font><font color="#0000FF">,</font><font color="#000000">Down</font><font color="#0000FF">,</font><font color="#000000">Left</font><font color="#0000FF">}</font>
<font color="#008080">    for</font><font color="#000000"> d</font><font color="#008080"> in</font><font color="#000000"> ds</font><font color="#008080"> do</font>
</pre>
        The compiler will however still (but more quitely) attempt to avoid the unnecessary subscripting. The key point here being
        that the programmer should not be penalised in any way for writing more explicit and intuitive code, at least not deliberately.
        <br>
        <br>
    for e in tagset(20,2)&65 do -- (Julia's "for e in (2..20, 65)" is nicer, but...)
-->
        You can override the default start of 1 with a from clause, and/or the default finish of length(s) with a to clause (use positive integers only, 
        well, mixed +ve & -ve certainly won&rsquo;t work!), however note you cannot get the length of an anonymously defined expression, without storing
        it in a named variable first. As well as the obvious option of simply reverting to a tradional longhand loop, you could perhaps also use (say):
<!--eucode>
    for e in s[2..5] do
    for e in s from i do  -- == for e in s[i..$] do, but w/o the slice op
    for e in s to j do      --           s[1..j]
    for e in s from i to j do --         s[i..j]
    for e in extract(s,{3,5,7}) do
</eucode-->
<pre>
<font color="#008080">    for</font><font color="#000000"> e</font><font color="#008080"> in</font><font color="#000000"> s</font><font color="#0000FF">[</font><font color="#000000">2</font><font color="#0000FF">..</font><font color="#000000">5</font><font color="#0000FF">]</font><font color="#008080"> do
    for</font><font color="#000000"> e</font><font color="#008080"> in</font><font color="#000000"> s</font><font color="#008080"> from</font><font color="#000000"> i</font><font color="#008080"> do </font><font color="#000080"><i> -- == for e in s[i..$] do, but w/o the slice op</i></font>
<font color="#008080">    for</font><font color="#000000"> e</font><font color="#008080"> in</font><font color="#000000"> s</font><font color="#008080"> to</font><font color="#000000"> j</font><font color="#008080"> do     </font><font color="#000080"><i> --           s[1..j]</i></font>
<font color="#008080">    for</font><font color="#000000"> e</font><font color="#008080"> in</font><font color="#000000"> s</font><font color="#008080"> from</font><font color="#000000"> i</font><font color="#008080"> to</font><font color="#000000"> j</font><font color="#008080"> do</font><font color="#000080"><i> --         s[i..j]</i></font>
<font color="#008080">    for</font><font color="#000000"> e</font><font color="#008080"> in</font><font color="#7060A8"> extract</font><font color="#0000FF">(</font><font color="#000000">s</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#0000FF">,</font><font color="#000000">7</font><font color="#800000">}</font><font color="#0000FF">)</font><font color="#008080"> do</font>
</pre>

<!--
        In a similar fashion to above, the compiler is at liberty to optimise away the slice and/or extract(), although it does not yet do so,
        one reason being that the slice or extract could be employing negative indexes, which would obviously complicate matters.
--or:
X       In a similar fashion to above, the compiler may optimise away the slice and extract(), as long as they are actually part of the for in construct.
        <br>
        <br>
-->
        Also note that for..in does <i>not</i> permit a "by step" clause, a longhand/"to" loop must be used instead<small><sup>4</sup></small>.<br>
        Athough it does not yet do so, the compiler is at liberty to optimise away an outer reverse() or trailing slice and similar, though/and
        of course I&rsquo;d like to ensure that p2js simultaneously manages the same. Let me know if you hit a pressing need in that regard.
        <br>
        <br>
        There is no special handling for dictionaries or maps, however you can use any of the following:
<!--eucode>
    integer d = new_dict(...)
    for key in getd_all_keys(d) do .. end for
    traverse_dict(rid,user_data,d)
    include map.e
    map m = new_map(...)
    for k in keys(m) do .. end for
    for v in values(m) do .. end for
    for kv in pairs(m) do ..end for
    object res = foreach(m,rid)
</eucode-->
<pre>
<font color="#004080">    integer</font><font color="#000000"> d</font><font color="#0000FF"> =</font><font color="#7060A8"> new_dict</font><font color="#0000FF">(...)</font>
<font color="#008080">    for</font><font color="#000000"> key</font><font color="#008080"> in</font><font color="#7060A8"> getd_all_keys</font><font color="#0000FF">(</font><font color="#000000">d</font><font color="#0000FF">)</font><font color="#008080"> do</font><font color="#0000FF"> ..</font><font color="#008080"> end for</font>
<font color="#7060A8">    traverse_dict</font><font color="#0000FF">(</font><font color="#000000">rid</font><font color="#0000FF">,</font><font color="#000000">user_data</font><font color="#0000FF">,</font><font color="#000000">d</font><font color="#0000FF">)</font>
<font color="#008080">    include</font><font color="#000000"> map.e</font>
<font color="#7060A8">    map</font><font color="#000000"> m</font><font color="#0000FF"> =</font><font color="#7060A8"> new_map</font><font color="#0000FF">(...)</font>
<font color="#008080">    for</font><font color="#000000"> k</font><font color="#008080"> in</font><font color="#7060A8"> keys</font><font color="#0000FF">(</font><font color="#000000">m</font><font color="#0000FF">)</font><font color="#008080"> do</font><font color="#0000FF"> ..</font><font color="#008080"> end for
    for</font><font color="#000000"> v</font><font color="#008080"> in</font><font color="#7060A8"> values</font><font color="#0000FF">(</font><font color="#000000">m</font><font color="#0000FF">)</font><font color="#008080"> do</font><font color="#0000FF"> ..</font><font color="#008080"> end for
    for</font><font color="#000000"> kv</font><font color="#008080"> in</font><font color="#7060A8"> pairs</font><font color="#0000FF">(</font><font color="#000000">m</font><font color="#0000FF">)</font><font color="#008080"> do</font><font color="#0000FF"> ..</font><font color="#008080">end for</font>
<font color="#004080">    object</font><font color="#000000"> res</font><font color="#0000FF"> =</font><font color="#000000"> foreach</font><font color="#0000FF">(</font><font color="#000000">m</font><font color="#0000FF">,</font><font color="#000000">rid</font><font color="#0000FF">)</font>
</pre>
        <small><i>(Obviously traverse_dict() and foreach() have nothing to do with for .. in, but just belong in that list.)</i></small>
        <br>
        <br>
        A related change is that previous versions of Phix would generate five new symbol table entries for five consecutive "for i" 
        statements, whereas since 1.0.1 it "resurrects" any local-but-dropped-from-scope entries, temporarily of course, making some 
        ex.err less confusing, ditto some debug sessions, and obviously needing/wasting a tiny little bit less memory.
        <small>(Much the same could always be achieved, both now and pre-1.0.1, by pre-declaring the control var[s].)</small>
<!--
        <br>
        <br>
-->
        No such attempt is made on file-level for loops, and the table of resurrectables is cleared at the end of DoRoutineDef, which
        obviously prevents any sharing between routines, as it should.
<!--        
        Likewise no attempt is made for other local non-control-vars. 
        I had a case of three sets of fb,fx,fy,fd that tempted me, but then hit a bug that was easier to fix with all three showing.
        I suppose some bugs might be easier if you know when a prior loop had ended, but too late, it is done now, and besides you
        can always just rename control variables which is even better.
-->
        I had been of a mind to do this resurrection stuff for quite a while now, and the option to share some of the testing load 
        with the "for..in" work was simply too good to pass up on.
        <br>
        <br>
        I can assure you this relatively simple-looking tweak went through quite some design process, including vastly over-complicating
        everything, before being clawed all the way back down to some semblance of sanity:
        <br>
        <br>
        <small><sup>1</sup></small> Initially the plan was to allow the type of the element to be explicitly declared, but I fell
        down the rabbit hole of allowing an explicit "integer" on the index to mean "must not already exist" (on both "in" and 
        "to" flavours of the loop) then (as next) trying to get all fancy, before realising that apart from said idea of the control 
        variable <i>not</i> pre-existing, which was never likely to be all that significant anyway, it was adding nothing that a 
        simple two-or-three-liner this is all shorthand for would not already do much better in the first place.<br>
        In other words, while "for id in" is fine and auto-declares id as an object, instead of "for integer id in...", just do 
        "integer id; for id in...", that is, if you /really/ want a typecheck, and/or id to persist/remain in scope past the end for 
        - the [optional] pre-declaration can solve two problems, not just the one.
        <br>
        <br>
        <small><sup>2</sup></small> Allowing multiple assignment within the for construct itself was also carefully considered, eg 
        <small><code>for {x,y} in points do</code></small>, however it added significant complications to parsing and scope handling 
        (presumably with automatic declaration of nested and individually typed elements and all that jazz) that in the end simply 
        could not be justified, along with it inevitably leading to uglier and harder to read and/or debug code. Not denying there
        isn&rsquo;t still a certain appeal, but it is just plainly and simply more trouble than it&rsquo;s worth. A typecheck error 
        on (say) y, when you have no idea where you are in points, or perhaps even worse no such error because it defaulted to 
        <a href="object.htm">object</a>, is simply not helpful, and <small><code>for {string key, atom v} in data do</code></small>
        and similar just quickly all start getting far too messy, and ruin all the neat/elegant aspects we&rsquo;re aiming for.
        Again, a simple longhand two/three-liner does all of that stuff and more quite easily enough anyway.
        <br>
        <br>
        <small><sup>3</sup></small> Another reason to keep it simple: every change in desktop/Phix must be matched in 
        <a href="p2js.htm"><span class="pwap2js">pwa/p2js</span></a>.
        <br>
        <br>
        <small><sup>4</sup></small> It is difficult to justify, let alone adequately test, the additional complexities that a by 
        clause c/would introduce. Think of a step of -1 flipping from 1..length(s) to length(s)..1, then instead of a constant 
        step a variable expression, with all the extra run-time checks and code that might need, plus never being more than two
        lines away from explicit expression of intent, and you should understand why I dropped "in".."by" like a hot potato.
        <br>
        <br>
        Despite some initial concerns I had made this "too simple", it quickly became a feature I could almost not stop using,
        and at least so far has coped admirably with everything I&rsquo;ve tried throwing at it, which is quite a lot.
        <br>
        <br>
        Although now syntax-coloured as one, technically "in" is <i>not</i> a (reserved) keyword, though (as previously 
        <a href="declarations.htm">documented</a>) pwa/p2js treats it as one, and similarly "from".
        <br>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
