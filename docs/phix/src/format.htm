<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">format directive</h1>
      <div id="mainSection">
        The primary purpose of the format directive is cross-compilation, ie 32<->64 and pe<->elf.
       <br> 
       <br> 
        If the format directive is completely omitted then suitable defaults for all values are provided,
        largely based on the compiler being run. For example, assuming -c, running the console version 
        (p.exe) creates a console executable whereas running pw.exe creates a gui executable. Likewise 
        running a 32-bit version of Phix by default creates a 32-bit executable whereas a 64-bit version 
        creates a 64-bit executable. And of course running a Windows version of Phix on a Windows machine
        by default creates a Windows PE format executable, whereas a Linux version on a Linux machine 
        creates a Linux ELF format executable (but running a PE format Phix under Wine will create a PE
        format output suitable for running under Wine, by default). The format directive allows you to 
        override that default behaviour and has the following formal syntax:
 <pre>
    format "redirect.file"|
           ((PE32|PE64) [GUI|console] [3.10|4.0|5.0] [DLL]) [icons] [version] [manifest])|
           (ELF32|ELF64)
 </pre>
        To keep things simple, you may prefer to consider it as (needing "-c" and) just
 <pre>
    format PE32|PE64|ELF32|ELF64
 </pre>
        At the time of writing, DLL is not supported, but some test code has been written, and
        PE64/ELF32/ELF64 have only been subject to very limited testing and are likely to fail.
        Note that, as a relatively new addition, the format directive is subject to frequent change.
        One possible (but untried) use for the format directive might be for a library to assert that
        the target architecture is properly supported/tested, eg arwen.ew could begin with the line
        "format PE32|PE64" (literally including the "|") to assert that it does not run on ELF, or
        another component could have all four currently supported targets, as a safety measure against
        ARM or some other target being added in the future.
        Consequently this section is likely to be updated as/when things get implemented/fixed.
        <br>
        <br>
        The format directive should be at the start of the main file, before any constant, variable, or
        routine definitions, or any executable code or include statements, but can be after namespace
        and with/without directives. To get technical for a moment, the real issue is that an #ilASM
        statement, as very commonly occuring in the builtins directory, is, before a format directive,
        rather likely to target the wrong architecture. Some special handling has been added to pmain.e 
        (see Z_format) to allow trace() and profile() to precede a format statement, however it may not 
        work in all cases. Likewise you may also get away with a few simple constants, etc. Otherwise 
        once any "prohibited code" has been processed the compiler simply issues an "invalid" error 
        against the word "format".
        <br>
        <br>
        At most two redirects are permitted. For example, both p.exw and pth.exw have the directive 
        'format "p.fmt"'; p.fmt is intended to contain one of 'format "pe32.fmt"', 'format "pe64.fmt"', 
        'format "elf32.fmt"', or 'format "elf64.fmt"', and finally pe32.fmt (etc) contains the actual 
        format directive. This allows me to work on the compiler and/or the test harness without keeping 
        several such directives in step, and also permits the build process to replace (and later restore)
        p.fmt for cross-compilation etc. A redirected file cannot contain anything other than a format 
        directive; pmain.e/DoFormat() issues a compilation error if it does not reach EOF. In case you
        have not guessed, if the token following the format keyword is a string, it is a filename. In 
        fact, a format "<filename>" directive is almost identical to an include <filename> statement, 
        except that the former expressly prohibits anything other than a format directive in the target 
        file. Also, redirects are ignored during interpretation, whereas an "inline" format directive 
        that specifies an incompatible architecture for interpretation causes a compilation error.
        <br>
        <br>
        As an example, the file pe32.fmt distributed with Phix contains:
 <pre>
format PE32 4.0
icons {"ok.ico",{0,1}}
version { "FileDescription","Phix Programming Language",
          "LegalCopyright","Pete Lomax",
          "FileVersion","0.6.3",
          "ProductName","Phix Programming Language",
          "ProductVersion","0.6.3",
          "OriginalFilename","pw.exe" }
manifest `
&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0"&gt;
 &lt;assemblyIdentity name="x.x.x" processorArchitecture="x86" version="5.1.0.0" type="win32"/&gt;
 &lt;description&gt;no&lt;/description&gt;
 &lt;dependency&gt;
  &lt;dependentAssembly&gt;
   &lt;assemblyIdentity type="win32" name="Microsoft.Windows.Common-Controls" version="6.0.0.0" 
                     processorArchitecture="x86" publicKeyToken="6595b64144ccf1df" language="*" /&gt;
  &lt;/dependentAssembly&gt;
 &lt;/dependency&gt;
&lt;/assembly&gt;`
 </pre>
        Unusually, perhaps, Phix does not specify either GUI or console since it always creates p.exe and
        pw.exe anyway. Subsystem version 4.0 is the default for 32-bit executables and 5.0 the default for
        64-bit files (for PE format files, that is). Note that (the older) with/without console/gui affect
        exactly the same settings (variables OptConsole and subvers, which are defined in pglobals.e).
        <br>
        <br>
        The values shown above for icons and manifest coincide with the defaults (see pglobals.e). If the 
        version details (which must be an even number of strings) are omitted, then no version information 
        is output in the resulting executable file. There is no way to dynamically set any values during 
        compilation, though it should be trivial to (programmatically) create such a file beforehand.
        <br>
        <br>
DEV not sure we really need this, see http://openeuphoria.org/forum/124650.wc#124650
        <br>
 <pre>
&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0"&gt;
 &lt;assemblyIdentity version="4.1.0.0" processorArchitecture="x86" name="euphoria" type="win32"/&gt;
 &lt;dependency&gt;
  &lt;dependentAssembly&gt;
   &lt;assemblyIdentity type="win32" name="Microsoft.Windows.Common-Controls" version="6.0.0.0"
                     processorArchitecture="*" publicKeyToken="6595b64144ccf1df" language="*" /&gt;
                                           ^^^ TRYME *** (and comment out pbinary.e/manifest = substitute_all(manifest,"\"x86\"","\"amd64\""))
  &lt;/dependentAssembly&gt;
 &lt;/dependency&gt;
&lt;/assembly&gt;
 </pre>
        Lastly, any "x86" in the manifest are automatically replaced with "amd64" (including the quotes)
        when PE64 is in force, as it seems that doing so is necessary to properly initialise the common
        controls (without manually invoking InitCommonControlsEx). This was, of couse, originally only 
        intended to apply to the default rather than any explicit replacement, but since it is an easy 
        fix to a possibly fairly common mistake that would otherwise completely hose an application, it 
        has been deliberately left like that (applying across the board to everything).
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
