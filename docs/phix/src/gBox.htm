<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">gH/Vbox</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          <br>
<!--
          <small>(private)
          <a href="gdx.htm">gdx</a> id = gBox(<a href="integer.htm">integer</a> box_type,
                                              <a href="gdx.htm">gdx</a> children={}, 
                                              <a href="string.htm">string</a> attributes="",
                                              <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})
          <br></small>
          <i>-- aka --</i>
          <br>
-->
          <a href="gdx.htm">gdx</a> id = gHbox(<a href="gdx.htm">gdx</a> children={}, 
                                               <a href="string.htm">string</a> attributes="",
                                               <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})
          <small><br><i>-- or --</i><br></small>
          <a href="gdx.htm">gdx</a> id = gVbox(<a href="gdx.htm">gdx</a> children={}, 
                                               <a href="string.htm">string</a> attributes="",
                                               <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})
<!--
//        <br>
//        <i>-- or --</i>
//        <br>
//        <a href="gdx.htm">gdx</a> id = gFrame(<a href="gdx.htm">gdx</a> children={}, 
//                                              <a href="string.htm">string</a> attributes="",
//                                              <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})
//        <i>-- or --</i>
//        <br>
//        <a href="gdx.htm">gdx</a> id = gRadio(<a href="gdx.htm">gdx</a> children={}, 
//                                              <a href="string.htm">string</a> attributes="",
//                                              <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Creates a container for composing elements horizontally or vertically, without any decorations.
<!--
            It is a box that arranges the elements it contains from left to right.
-->
            <br>
            <br>
<!--
            User code cannot invoke gBox() directly (and the private constants for box_type are not made public), however it 
            may be useful to understand how it works, and for this documentation to only have to explain (say) <a href="#EXPAND">EXPAND</a> once.
            <br>
            <br>
-->
<!--        box_type: one or more of ?XPG_HBOX(=?0), ?XPG_VBOX(=?1), ?XPG_FRAME(=?2)....<br>-->
            children: list of the elements that will be placed in the box.<!-- It can be empty.--><br>
            An empty list is only useful during development, and <i>cannot</i> be extended later
            <small> (except of course at the source code level)</small>.<br>
            For more information on the attributes and args parameters see <a href="gSetAttributes.htm">gSetAttributes</a>.<br>
            Note that standard optional parameters behaviour is perfectly sufficient, and <i>no</i> 
            <a href="g_paranormal.htm">paranormalisation</a> is performed or required on either of these functions.
            <br>
            <br>
<!-- ??
            It does not have a native representation.
            The gBox() function is really an internal routine, but grouping all the subtypes on this one single page certainly helps 
            reduce repetitive duplication.<br>
            A gHbox(...) is the same as a gBox(XPG_HBOX,...)<br>
            A gVbox(...) is the same as a gBox(XPG_VBOX,...)<br>
            A gFrame(...) is the same as a gBox(XPG_FRAME[+XPG_HBOX],...) or a gBox(XPG_FRAME+XPG_VBOX,...) when
            <a href="#VBOX">VBOX</a> is set<br>
            <br>
            <br>
-->
            Returns: the identifier of the created element. The term "gBox" is occasionally used to mean "either".
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
<!--
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="IupVbox.htm">IupVbox</a>,
          <a href="IupZbox.htm">IupZbox</a>
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          <b>Examples:</b>
         </td>
         <td>
            In Windows, the Visual Styles work only when TABTYPE is TOP.
            <br>
            <br>
            Windows
            <div class="parent">
              <div class="child">
                <img src="images/iuptabs_winxp_top.png"/>
              </div>
              <div class="child">
                <img src="images/iuptabs_winxp_top_multi.png"/>
              </div>
              <div class="child">
                <img src="images/iuptabs_winxp_left.png"/>
              </div>
            </div>
            <div style="clear:both;height:1px;"> </div>
            <br>
            GTK is the only one that supports vertical text in the TOP configuration, but does not support multiple lines of tab buttons.
            <br>
            <div class="parent">
              <div class="child">
                <img src="images/iuptabs_gtk_top.png"/>
              </div>
              <div class="child">
                <img src="images/iuptabs_gtk_left.png"/>
              </div>
              <div class="child">
                <img src="images/iuptabs_gtk_top_vert.png"/>
              </div>
              <div class="child">
                <img src="images/iuptabs_gtk_left_vert.png"/>
              </div>
            </div>
            <div style="clear:both;height:1px;"> </div>
            <br>
            &nbsp;
            <br>
            A simple and runnable demonstration of gTabs can be found in demo\xpGUI\gTabs.exw.
            <br>
            <br>
            Note that the main Edix window uses a "zero height" IupTabs and a single canvas that is fully redrawn on tab change, and 
            filedump.exw does a similar trick over a single listview, hence neither should be copied(/studied) for more traditional uses,
            by which I specifically mean where selecting a different tab automatically hides some controls and displays some others.
         </td>
        </tr>
-->
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
            See demo\xpGUI\gHbox.exw and/or ~\gVbox.exw for examples.
            <br>
            <br>
<!--
            The box can be created with no elements and filled dynamically using <a href="IupAppend.htm">IupAppend</a>() or <a href="IupInsert.htm">IupInsert</a>().
            <br>
            <br>
-->
            By default, the box automatically expands to fill its parent (especially when that is a <a href="gDialog.htm">gDialog</a>),
            and then determines the appropriate expansion/spacing for its children.
<!--
DEV...<br><br>
            The box will NOT expand its children, it will allow its children to expand according to the space left in the box parent. 
            So for the expansion to occur, the children must be expandable with <a href="gSetAttribute.htm#EXPAND">EXPAND</a>!=NO, and there must be room in the box parent.
            <br>
            <br>
            When translating C code, note that internally Phix only uses the C function IupHboxv, which accepts a single null-terminated list, 
            and does not use the variable-parameter C IupHbox function. It is perfectly legal (in Phix) to specify an empty list ({}) for the 
            children parameter, but not NULL. Also note that C code requires a trailing NULL, whereas in pGUI it makes no difference whether 
            one is present (at the end of the sequence) or not - and obviously the C code <code>IupHbox(NULL);</code> should just become
            <code>IupHbox()</code>.
            <br>
            <br>
DEV:
            Planned/SUG: a gSplit() must be the first element in a gH/Vbox that is preceded by another of the same type and nested within yet
            another of the same type, in other words gHbox({gHbox(),gHbox({gSplit(),...})}) or the same but with gVbox. Theoretically they
            could also be daisy-chained but the initial implementation and testing is going to focus on the "two-within-one" setup. It draws
            a suitable separator and handles mouse events, changing the cursor and allowing the user to shift space between the two inners.
            Technically the outer continer isn&rsquo;t really involved, but it has to be there so that SIZE mods end up doing what we want.
            It is planned to initially implement this using a (thin) <a href="gCanvas.htm">gCanvas</a>() in pure hll code. As such, some of
            the validation is likely to occur (/crash) only when something is actually resized, rather than when first drawn.
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
          <a name=GAP></a>
         </td>
        </tr>
        <tr>
         <td>
          GAP
         </td>
         <td>
            (non inheritable) Defines a (minimum) horizontal/vertical space in pixels between the children. Default: "0".
            <br>
            <br>
            In practice, this simply adjusts the top/left <a href="gSetAttribute.htm#MARGIN">MARGIN</a> of children[2..$], transiently as 
            part of <a href="xplayout.htm">Layout Management</a> (and could equivalently adjust the right/bottom margin[1..$-1]).
<!-- madness, use MARGIN!!
             plus that of children[1] when the XPG_SPACE_TOP/LEFT bit is
            set and the bottom/right margin of child[$] when the XPG_SPACE_BOTTOM/RIGHT bit is set in the <a href="#SPACE">SPACE</a> setting.<br>
            In other words for n children the specified gap may be applied n-1, n, or n+1 times.<br>
-->
            Negative values are permitted, caveat emptor.
            <br>
            <br>
            See also: <a href="gSetAttribute.htm#MARGIN">MARGIN</a>,
                      <a href="gSetAttribute.htm#EXPAND">EXPAND</a>,
                      <a href="#SPACE">SPACE</a><br>
<!--                      <a href="#SPACING">SPACING</a> and <a href="#SPREAD">SPREAD</a>-->
          <a name=SPACE></a>
         </td>
        </tr>
        <tr>
         <td>
?         SPACE
         </td>
         <td>
<!--            <b>NOT YET IMPLEMENTED/IN PROGRESS...</b><br>-->
            Only has any effect when (as it is by default) <a href="gSetAttribute.htm#EXPAND">EXPAND</a> <i>is</i> set on the gH/Vbox but 
            <i>not</i> on any of its children, however that statement applies independently to <i>both</i> horizontal and vertical expansion 
            for <i>both</i> gHbox and gVbox.
            <br>
            <br>
            See demo\xpGUI\gHbox.exw and/or ~\gVbox.exw for seven ways to layout/position three buttons horizontally/vertically.<br>
            Both of those examples should realise both horizontal and vertical expansion as changes to the spacing around non-expanding children,
            and both should contain one or more commented out expanding child cases that completely change the overall re-sizing behaviour.
            <br>
            <br>
            Should be set to one of the following values (clearly eg gHbox({..},"SPACE=LEFT") makes for the neatest code):
<!--            <br>
            <br>-->
<!--            <table>-->
<!--            <table style="margin-bottom: 10px;"> -->
            <table style="margin:10px auto 10px auto;">
            <tr>
                <th>String</th>
                <th>Integer</th>
                <th>Description</th>
            </tr>
<!--
            <tr>
                <td>NONE</td>
                <td>XPG_SPACE_NONE (0b000)</td>
                <td>no expansion/spacing, beyond what any children already do</td>
            </tr>
-->
            <tr>
                <td>LEFT</td>
                <td>XPG_SPACE_LEFT (0b100)</td>
                <td>all space on the left, elements are right-aligned</td>
            </tr>
            <tr>
                <td>TOP</td>
                <td>XPG_SPACE_TOP ("", gVbox)</td>
                <td>all space at the top, elements are bottom-aligned</td>
            </tr>
            <tr>
                <td>RIGHT</td>
                <td>XPG_SPACE_RIGHT (0b001)</td>
                <td>(default) all space on the right, elements are left-aligned</td>
            </tr>
            <tr>
                <td>BOTTOM</td>
                <td>XPG_SPACE_BOTTOM ("", gVbox)</td>
                <td>("") all space at the bottom, elements are top-aligned</td>
            </tr>
            <tr>
                <td>BETWEEN</td>
                <td>XPG_SPACE_BETWEEN (0b010)</td>
                <td>space inserted between elements</td>
            </tr>
            <tr>
                <td>AROUND</td>
                <td>XPG_SPACE_AROUND (0b111)</td>
                <td>"" and before first/after last</td>
            </tr>
            <tr>
                <td>CENTRE</td>
                <td>XPG_SPACE_CENTRE (0b101)</td>
                <td>space inserted before first/after last only</td>
            </tr>
            </table>
<!--
            <br>
            <br>
            &nbsp;
            <br>
-->
            <div style="clear:both;height:1px;">&nbsp;</div>
<!-- madness, use MARGIN!
            Note that <a href="#GAP">GAP</a> is affected by the top/left and bottom/right bits, but effectively assumes the between bit
            is set, in other words for n children the specified gap may be applied n-1, n, or n+1 times.
            <br>
            <br>
            Use XPG_SPACE_NONE with caution, it is often better to set EXPAND=NO instead, whenever possible.
            <br>
            <br>
-->
            To achieve, say, three buttons on the left and two on the right, just use nested gH/Vbox with the appropriate settings.
            <br>
            <br>
            The same applies to achieve, say, vertical centering with right-alignment horiontally, ie use nested gH/Vbox.
            <br> 
            <br> 
            Note that <a href="gGetAttribute.htm">gGetAttribute</a>(id,"SPACE") returns the integer values (and crashes if id is not a box).<br>
            You can use <a href="string.htm">string</a> res = <b>gGetBoxSpacingName</b>(<a href="integer.htm">integer</a> s, 
            <a href="gdx.htm">gdx</a> id=NULL) to obtain a human-readable string equivalent, with the optional id being used
            to return TOP/BOTTOM in preference to LEFT/RIGHT when s is from a gVbox. 
<!--
            Technically you ought to be able to use
            other bit settings, specifically 0b110 and 0b011 (caveat emptor), but gGetBoxSpacingName() currently crashes 
            when passed such, and no effort whatsoever has so far been made to map such to equivalent flexbox settings under 
            <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js</b></span></a>.
-->
         </td>
        </tr>
<!--
        <tr>
         <td>
          ALIGNMENT<a href="notpgui.htm"><span style="color:lime;"><sup>+</sup></span></a>
         </td>
         <td>
            (non inheritable) Vertically aligns the elements. Possible values: "ATOP", "ACENTER", "ABOTTOM". Default: "ATOP".
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
//?       <a href="gSetAttribute.htm#EXPAND">EXPAND</a>
         </td>
         <td>
            (non inheritable) The default value is "YES"/"BOTH".
<X!X--           See the documentation of the attribute for <a href="gSetAttribute.htm#EXPAND">EXPAND</a> inheritance.--X>
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
?         EXPANDCHILDREN
         </td>
         <td>
            (non inheritable) forces all children to expand vertically for a Hbox, and horizontally for a Vbox, and to fully occupy the space available inside the box. Default: "NO". 
            For instance, a Vbox is +------+ rather than +------+
                                    |******|             |***   |
                                    |******|             |******|
                                    |******|             |****  |
                                    +------+             +------+
            This has the same effect as setting <a href="gSetAttribute.htm#EXPAND">EXPAND</a>=VERTICAL for Hbox, HORIZONTAL for Vbox, on each child.
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          GAP,
         CGAP
         </td>
         <td>
            Defines a horizontal space in pixels between the children, CGAP is in the same units of the <a href="gSetAttribute.htm#SIZE">SIZE</a> 
            attribute for the width. Default: "0". (CGAP since 3.0)
         </td>
        </tr>
        <tr>
         <td>
          NGAP, NCGAP
         </td>
         <td>
            (non inheritable) Same as GAP but are non inheritable. (since 3.0)
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          HOMOGENEOUS
         </td>
         <td>
            (non inheritable) forces all children to get equal horizontal space. The space width will be based on the largest child. Default: "NO". 
            Notice that this does not change the childrens size, only the available space for each one of them to expand. (since 3.0)
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
?         MARGIN
<X!X--  ,
         CMARGIN
--X>
         </td>
         <td>
<X!X--  Defines a margin in pixels, CMARGIN is in the same units of the <a href="gSetAttribute.htm#SIZE">SIZE</a> attribute.  (CMARGIN since 3.0)--X>
            Defines a margin in pixels. 
            Specified as between one and four values: m or {m} =&gt; {m,m,m,m}, {tb,lr} =&gt; {tb,lr,tb,lr}, {t,lr,b} =&gt; {t,lr,b,lr}, or
            {t,r,b,l} as integer values corresponding to the top, right, bottom, and left margins respectively/clockwise.
            Default: 0 (no margin).
         </td>
        </tr>
-->
<!--
//      <tr>
//       <td>
//        NMARGIN<a href="notpgui.htm#IupHbox"><span style="color:orange; font-size:75%;"><sup>?</sup></span></a>,
//       NCMARGIN
//       </td>
//       <td>
//          (non inheritable) Same as MARGIN but are non inheritable. (since 3.0)
//       </td>
//      </tr>
-->
<!-- no, see gNormalise()
//      <tr>
//       <td>
//?       NORMALIZESIZE
//       </td>
//       <td>
//          (non inheritable) normalizes all children natural size to be the biggest natural size among them. 
//          All natural width will be set to the biggest width, and all natural height will be set to the biggest height according to is value. 
//          Can be NO, HORIZONTAL, VERTICAL or BOTH. 
//          Default: "NO". Same as using IupNormalizer.
//       </td>
//      </tr>
-->
        <tr>
         <td>
          ORIENTATION
         </td>
         <td>
            (read-only, non inheritable): Returns "HORIZONTAL" or "VERTICAL" for a gHbox/gVbox respectively.
         </td>
        </tr>
<!-- no, see gRadio()
//        <a name=RADIO></a>
//      <tr>
//       <td>
//?       RADIO
//       </td>
//       <td>
//          When set, makes any immediate <a href="gCheckbox.htm">gCheckbox</a> children mutually exclusive, so that only one of them can be active at a time.
//       </td>
//      </tr>
-->
<!--
        <tr>
         <td>
?         <a href="gSetAttribute.htm#SIZE">SIZE</a>
<X!X--        <a href="gSetAttribute.htm#RASTERSIZE">RASTERSIZE</a>--X>
         </td>
         <td>
            (non inheritable) Defines the width of the box. 
//          When consulted behaves as the standard <a href="gSetAttribute.htm#SIZE">SIZE</a>/<a href="gSetAttribute.htm#RASTERSIZE">RASTERSIZE</a> attributes. 
            The standard format "wxh" can also be used, but height will be ignored (since 3.3).
         </td>
        </tr>
-->
<!--
          <a name=SPACING></a>
        <tr>
         <td>
?         SPACING
         </td>
         <td>
            <b>NOT YET IMPLEMENTED/IN PROGRESS...</b><br>
            Determines whether <a href="#GAP">GAP</a> applies n-1 or n+1 times, where n is the number of children.
            <br>
            <br>
            The default of BETWEEN (0) means there are n-1 gaps, AROUND (1) means n+1, ie spacing before the first and after the last as well.
         </td>
        </tr>
          <a name=SPREAD></a>
        <tr>
         <td>
?         SPREAD
         </td>
         <td>
            <b>NOT YET IMPLEMENTED/IN PROGRESS...</b><br>
            Ignored if expansion (on the h/vbox itself) is disabled, or if any child has (non-free) expansion enabled, otherwise determines 
            the distribution of excess space when the container is wider (for hbox) or taller (for vbox) than the child total.
            <br>
            <br>
            Can be LEFT/TOP (1), EVENLY(0), RIGHT/BOTTOM (#children+1) or an integer 1..#children+1 signifying the child before which 
            all extra space should be. (I may also consider allowing/implementing a sequence of gap numbers). Design of this is still in flux, and
            will mostly be determined on what can actually be achieved in a browser, when I eventually get round to working on that.
         </td>
        </tr>
-->
<!-- no, see gRadioItem()...
//      <tr>
//       <td>
//?       VALUE
//       </td>
//       <td>
//          Sets or returns the identifier (ie <a href="gdx.htm">gdx</a>) of the currently selected <a href="gCheckbox.htm">gCheckbox</a>, 
//          or 0 if none is checked or <a href="#RADIO">RADIO</a> is not set.
//       </td>
//      </tr>
-->
<!--
//      <tr>
//       <td>
//        VBOX
//       </td>
//       <td>
//          1 for vertically-arranged children, 0 when horizontally-arranged.
//       </td>
//      </tr>
-->
<!--
//      <tr>
//       <td>
//        <a href="gSetAttribute.htm#WID">WID</a>
//       </td>
//       <td>
//          (read-only) returns -1 if mapped.
//       </td>
//      </tr>
-->
        <tr>
         <td>
          also
         </td>
         <td>
            <a href="gSetAttribute.htm#EXPAND">EXPAND</a>, 
            <a href="gSetAttribute.htm#FONT">FONT</a>, 
<!--        <a href="gSetAttribute.htm#NAME">NAME</a>, -->
            <a href="gSetAttribute.htm#MARGIN">MARGIN</a>, 
<!--        <a href="gSetAttribute.htm#PADDING">PADDING</a>, -->
<!-- ??     <a href="gGetAttribute.htm#POSITION">POSITION</a>, -->
<!--            <a href="gGetAttribute.htm#CLIENTSIZE">CLIENTSIZE</a>, -->
<!--            <a href="gGetAttribute.htm#CLIENTOFFSET">CLIENTOFFSET</a>,-->
<!--            <a href="gSetAttribute.htm#MINSIZE">MINSIZE</a>, -->
<!--            <a href="gSetAttribute.htm#MAXSIZE">MAXSIZE</a>,-->
            <a href="gSetAttribute.htm#SIZE">SIZE</a>.<br>
         </td>
        </tr>
<!--
        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
            (at Children)
         </td>
        </tr>
//      <tr>
//       <td>
//        EXPANDWEIGHT
//       </td>
//       <td>
//          (non inheritable) (at children only) If a child defines the expand weight, then it is used to multiply the free space used for expansion. (since 3.1) 
//       </td>
//      </tr>
//      <tr>
//       <td>
//        <a href="gSetAttribute.htm#FLOATING">FLOATING</a>
//       </td>
//       <td>
//          (non inheritable) (at children only) If a child has FLOATING=YES then its size and position will be ignored by the layout processing. Default: "NO". (since 3.0)
//       </td>
//      </tr>
-->
<!--
          <a name=tech></a>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
DEV got ahead of myself a bit here...<br><br>

          Effectively amalgamates, simplifies, and unifies several pGUI containers, namely 
          <a href="IupHbox.htm">IupHbox</a>(),
          <a href="IupVbox.htm">IupVbox</a>(), and
          <a href="IupFrame.htm">IupFrame</a>().<br>
          There is however as yet no attempt to emulate any of the features of 
          <a href="IupBackgroundBox.htm">IupBackgroundBox</a>(),
          <a href="IupCbox.htm">IupCbox</a>(),
          <a href="IupDetachBox.htm">IupDetachBox</a>(),
<X!X--    <a href="IupExpander.htm">IupExpander</a>(), --X>
          <a href="IupGridBox.htm">IupGridBox</a>(),
          <a href="IupFlowBox.htm">IupFlowBox</a>(),
          <a href="IupMultiBox.htm">IupMultiBox</a>()[??],
          <a href="IupSbox.htm">IupSbox</a>()[??],
          <a href="IupScrollBox.htm">IupScrollBox</a>()[??], and
          <a href="IupZbox.htm">IupZbox</a>() - however they are all potential candidates, with the 3 marked ?? at the head of that queue.
          <br>
          <br>
          It is planned, but not yet implemented, that <a href="IupNormalizer.htm">IupNormalizer</a>() functionality will/may become part
          of this (set of) containers, rather than the (admittedly potentially more flexible and layout/hierarchy-agnostic) pGUI component.
          There may or may not be a new (say) NGSET attribute on child elements to fine-tune behaviour in that regard, perhaps with said
          being set to (say) "NAMED_ONLY" (or not) on the container itself also playing a role.
         </td>
        </tr>
-->
       </table>
<!--
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
-->
        <div style="clearboth;height:1px;">&nbsp;</div>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
