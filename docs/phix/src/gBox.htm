<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">gH/Vbox</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          <br>
          <a href="gdx.htm">gdx</a> id = gHbox(<a href="gdx.htm">gdx</a> children={}, 
                                               <a href="string.htm">string</a> attributes="",
                                               <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})
          <small><br><i>-- or --</i><br></small>
          <a href="gdx.htm">gdx</a> id = gVbox(<a href="gdx.htm">gdx</a> children={}, 
                                               <a href="string.htm">string</a> attributes="",
                                               <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})
<!--
//        <br>
//        <i>-- or --</i>
//        <br>
//        <a href="gdx.htm">gdx</a> id = gFrame(<a href="gdx.htm">gdx</a> children={}, 
//                                              <a href="string.htm">string</a> attributes="",
//                                              <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})
//        <i>-- or --</i>
//        <br>
//        <a href="gdx.htm">gdx</a> id = gRadio(<a href="gdx.htm">gdx</a> children={}, 
//                                              <a href="string.htm">string</a> attributes="",
//                                              <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Creates a container for composing elements horizontally or vertically, without any decorations.
<!--
            It is a box that arranges the elements it contains from left to right.
-->
            <br>
            <br>
<!--
            User code cannot invoke gBox() directly (and the private constants for box_type are not made public), however it 
            may be useful to understand how it works, and for this documentation to only have to explain (say) 
            <a href="gSetAttribute.htm#EXPAND">EXPAND</a> once.
            <br>
            <br>
-->
<!--        box_type: one or more of ?XPG_HBOX(=?0), ?XPG_VBOX(=?1), ?XPG_FRAME(=?2)....<br>-->
            children: list of the elements that will be placed in the box.<!-- It can be empty.--><br>
            An empty list is only useful during development, and <i>cannot</i> be extended later
            <small> (except of course at the source code level)</small>.<br>
            For more information on the attributes and args parameters see <a href="gSetAttributes.htm">gSetAttributes</a>().<br>
            Note that standard optional parameters behaviour is perfectly sufficient, and <i>no</i> 
            <a href="g_paranormal.htm">paranormalisation</a> is performed or required on either of these functions.
            <br>
            <br>
<!-- ??
            It does not have a native representation.
            The gBox() function is really an internal routine, but grouping all the subtypes on this one single page certainly helps 
            reduce repetitive duplication.<br>
            A gHbox(...) is the same as a gBox(XPG_HBOX,...)<br>
            A gVbox(...) is the same as a gBox(XPG_VBOX,...)<br>
            A gFrame(...) is the same as a gBox(XPG_FRAME[+XPG_HBOX],...) or a gBox(XPG_FRAME+XPG_VBOX,...) when
            <a href="#VBOX">VBOX</a> is set<br>
            <br>
            <br>
-->
            Returns: the identifier of the created element. The term "gBox" is occasionally used to mean "either".
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported, kinda: but still missing is the all-important layout manager that deals with SIZE/GAP/SPACE/MARGIN/etc.
         </td>
        </tr>
<!--
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="IupVbox.htm">IupVbox</a>,
          <a href="IupZbox.htm">IupZbox</a>
         </td>
        </tr>
-->
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
<!--            See demo\xpGUI\gHbox.exw and/or ~\gVbox.exw for examples.-->
            The file demo\rosetta\7guis\Booker.exw is probably the simplest/easiest thing to study/try out/resize first.
            <br>
            <br>
<!--
            The box can be created with no elements and filled dynamically using <a href="IupAppend.htm">IupAppend</a>() or <a href="IupInsert.htm">IupInsert</a>().
            <br>
            <br>
-->
            By default, the box automatically expands to fill its parent (especially when that is a <a href="gDialog.htm">gDialog</a>),
            and then determines the appropriate expansion/spacing for its children. It is not actually possible to absolutely disable
            <a href="gSetAttribute.htm#EXPAND">EXPAND</a> on a gH/Vbox: attempts to do so depend on parent/siblings being able to cope.
            <br>
<!--
DEV...<br><br>
            The box will NOT expand its children, it will allow its children to expand according to the space left in the box parent. 
            So for the expansion to occur, the children must be expandable with <a href="gSetAttribute.htm#EXPAND">EXPAND</a>!=NO, and there must be room in the box parent.
            <br>
            <br>
            When translating C code, note that internally Phix only uses the C function IupHboxv, which accepts a single null-terminated list, 
            and does not use the variable-parameter C IupHbox function. It is perfectly legal (in Phix) to specify an empty list ({}) for the 
            children parameter, but not NULL. Also note that C code requires a trailing NULL, whereas in pGUI it makes no difference whether 
            one is present (at the end of the sequence) or not - and obviously the C code <code>IupHbox(NULL);</code> should just become
            <code>IupHbox()</code>.
            <br>
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
          <a name=GAP></a>
         </td>
        </tr>
        <tr>
         <td>
          GAP
         </td>
         <td>
            (non inheritable) Defines a (minimum) horizontal/vertical space in pixels between the children. Default: "0".
            <br>
            <br>
            In practice, this simply adjusts the top/left <a href="gSetAttribute.htm#MARGIN">MARGIN</a> of children[2..$], transiently as 
            part of <a href="xplayout.htm">Layout Management</a> (and could equivalently adjust the right/bottom margin[1..$-1]).
<!-- madness, use MARGIN!!
             plus that of children[1] when the XPG_SPACE_TOP/LEFT bit is
            set and the bottom/right margin of child[$] when the XPG_SPACE_BOTTOM/RIGHT bit is set in the <a href="#SPACE">SPACE</a> setting.<br>
            In other words for n children the specified gap may be applied n-1, n, or n+1 times.<br>
-- not CSS:
            Negative values are permitted, caveat emptor.
-->
            <br>
            <br>
            See also: <a href="gSetAttribute.htm#MARGIN">MARGIN</a>,
                      <a href="gSetAttribute.htm#EXPAND">EXPAND</a>,
                      <a href="#SPACE">SPACE</a><br>
<!--                      <a href="#SPACING">SPACING</a> and <a href="#SPREAD">SPREAD</a>-->
          <a name=SPACE></a>
         </td>
        </tr>
        <tr>
         <td>
?         SPACE
         </td>
         <td>
<!--            <b>NOT YET IMPLEMENTED/IN PROGRESS...</b><br>-->
            Applies independently to <i>both</i> horizontal and vertical expansion for <i>both</i> gHbox and gVbox, albeit differently.<br>
            Only has any effect in the primary orientation of the box when (as it is by default) <a href="gSetAttribute.htm#EXPAND">EXPAND</a> 
            <i>is</i> set on the gH/Vbox but <i>not</i> on any of its children, whereas for the cross orientation, that would be "not on all" 
            of the children. For instance a gVbox with SPACE=AROUND would:<br>
            <ul>
             <li>split slack between children that expand vertically (and otherwise ignore SPACE/do the same whatever the setting), but</li>
             <li>if none insert said split slack/vertical padding above the first, below the last, and between the children, and </li>
             <li>expand those children that do so horizontally (ditto ignore for them), but</li>
             <li>add horizontal padding before and after each of those that do not (ie expand widthwise)</li>
             <li>note that each child is, obviously, treated as a single child in the cross orientation</li>
            </ul>
<!--
            <small><pre><code>
                if no vertically expandable children then
                    add padding above and below
                else
                    split padding between/expand them vertically
                end if
                for each child do
                    if horizontally expandable then
                        expand that child horizontally
                    else
                        add padding before and after that child
                    end if
                end for
            </code></pre></small>
-->
<!--
             but  
            <small><i>(There may be an easier way to express that!)</i></small>
            <br>
            <br>
-->
            Obviously if the gH/Vbox does not itself expand in a given direction, then it isn&rsquo;t passed any slack in that direction that 
            it has to deal with, in the first place, unless the standard <a href="xplayout.htm#SoleChild">sole child</a> exception applies.
<!--
?           <small>^^^ drivel: 7guis/Booker hsa a vbox with dropdown, 2*text, and a button, with no expand (horizontally) on the dropdown but 
            on the other three. An alignment of AROUND should center the dropdown, while the other three expand...
            Another problem is that it wants AROUND horizontally, but TOP or BETWEEN vertically... which I suppose we could support with a 
            length-2 sequence setting, eg {AROUND,TOP} - and obvs these docs updated to reflect that facility.[DONE]</small>
-->
<!-- Nah, Booker is a much better example...
            <br>
            <br>
            See demo\xpGUI\gHbox.exw and/or ~\gVbox.exw for seven ways to layout/position three buttons horizontally/vertically.<br>
            Both of those examples should realise both horizontal and vertical expansion as changes to the spacing around non-expanding children,
            and both should contain one or more commented out expanding child cases that completely change the overall re-sizing behaviour.
-->
            <br>
            <br>
            Should be set to one or two of the following values (eg gHbox({..},"SPACE=LEFT") being the neatest code):
            <br>
<!--            <br>-->
<!--            <table>-->
<!--            <table style="margin-bottom: 10px;"> -->
            <table style="margin:10px auto 10px auto; width: auto;">
            <tr>
                <th>String</th>
                <th>Integer</th>
                <th>Description</th>
            </tr>
            <tr>
                <td>LEFT</td>
                <td>XPG_SPACE_LEFT (0b100)</td>
                <td>all space on the left, elements are right-aligned</td>
            </tr>
            <tr>
                <td>TOP</td>
                <td>XPG_SPACE_TOP ("", gVbox)</td>
                <td>all space at the top, elements are bottom-aligned</td>
            </tr>
            <tr>
                <td>RIGHT</td>
                <td>XPG_SPACE_RIGHT (0b001)</td>
                <td>(default) all space on the right, elements are left-aligned</td>
            </tr>
            <tr>
                <td>BOTTOM</td>
                <td>XPG_SPACE_BOTTOM ("", gVbox)</td>
                <td>("") all space at the bottom, elements are top-aligned</td>
            </tr>
            <tr>
                <td>BETWEEN</td>
                <td>XPG_SPACE_BETWEEN (0b010)</td>
                <td>space inserted between elements</td>
            </tr>
            <tr>
                <td>AROUND</td>
                <td>XPG_SPACE_AROUND (0b111)</td>
                <td>"" and before first/after last</td>
            </tr>
            <tr>
                <td>CENTRE</td>
                <td>XPG_SPACE_CENTRE (0b101)</td>
                <td>space inserted before first/after last only</td>
            </tr>
            <tr>
                <td>NONE</td>
                <td>XPG_SPACE_NONE (0b000)</td>
                <td>no expansion/spacing (caveat emptor)</td>
            </tr>
            </table>
            <div class="clear"></div>
<!--
            <br>
            <br>
            &nbsp;
            <br>
-->
            <div style="clear:both;height:1px;">&nbsp;</div>
<!-- madness, use MARGIN!
            Note that <a href="#GAP">GAP</a> is affected by the top/left and bottom/right bits, but effectively assumes the between bit
            is set, in other words for n children the specified gap may be applied n-1, n, or n+1 times.
            <br>
            <br>
-->
            A single setting such as "SPACE=CENTRE" applies both horizontally and vertically, whereas "SPACE={BETWEEN,CENTRE}" sets the
            {h,v} for both gHbox and gVbox <small>(rather than {primary,cross} or/aka {h,v} for the former, but {v,h} for the latter)</small>. 
            <br>
            <br>
            Note that NONE is meaningless and officially unsupported, it may for instance trigger <a href="xplayout.htm#SoleChild">sole child</a> 
            behaviour, either on different backends or in some future release. If it has any meaning, that would be "you forgot to set this", 
            or perhaps that this container does not expand, or should <i>never</i> have no expanding children in the primary direction, or any 
            non-expanding in the cross. That said, it <i>is</i> the default.
            <br>
            <br>
<!--
?           The same applies to achieve, say, vertical centering with right-alignment horiontally, ie use nested gH/Vbox.
            <br> 
            <br> 
-->
<!--
            Use XPG_SPACE_NONE with caution: it is often better to set EXPAND=NO [in the appropriate direction] instead, whenever possible,
            and if the box <i>can</i> expand then RIGHT|BOTTOM is probably more like what you actually really meant anyway. Attempts to set
            (EXPAND=YES then NONE) or (NONE then EXPAND=YES) will quite likely effectively clobber each other, not to mention that the 
            layout manager tends to run up and down the layout hierarchy accumulating expansion details, and of course effectively ignores 
            any instructions it deems impossible. 
-->
            Hand on heart, XPG_SPACE_NONE only really exists so the following routines can return something sensible (esp "NONE") when it 
            wasn&rsquo;t set, presumably because it would never be used anyway. The following edge cases can be skipped on first reading.
            For the cross orientation and single child in the primary orientation, (BETWEEN|NONE|RIGHT|BOTTOM) behave identically, as do 
            (AROUND|CENTRE), like they fairly obviously should. While we certainly need the RIGHT/BOTTOM <i>bit</i>, (NONE|RIGHT|BOTTOM) 
            [by their lonesome] also actually behave identically even when multiple children are involved (flw). The simple truth of the
            matter is that the SPACE attribute is only consulted when the container is given space and it does not know what else to do
            with it: should it not get excess space in the first place it should have EXPAND=NO, or perhaps RESIZE=NO. That said, the
            layout manager is at liberty, when practical, to assume you meant RIGHT|BOTTOM, rather than just always crash. 
<!--
            , and may yet be 
            replaced with the standard NULL/"NULL", and/or prohibited from being explicitly set to that. It may also turn out that NONE
            simply just gets treated like RIGHT/BOTTOM, and/or that while we certainly need the RIGHT/BOTTOM <i>bit</b>, that setting all
            by its lonesome actually achieves nothing.
-->
            <br>
            <br>
            Note that <a href="gGetAttribute.htm">gGetAttribute</a>(id,"SPACE") returns the integer value[s], and crashes if id is not a box.<br>
            <a href="string.htm">string</a> res = <b>gGetBoxSpacingName</b>(<a href="object.htm">object</a> s, <a href="integer.htm">integer</a> id=NULL) 
            can be used to obtain a human-readable string equivalent, accepts an integer or a pair of them in s (as returned from "SPACE"), and 
            uses the optional id to return TOP/BOTTOM in preference to LEFT/RIGHT when id is -1 or a gVbox gdx, but the latter when 0 or a gHbox,
            unless it is a {h,v} pair which does that same thing on them but completely ignores any id. 
            <br>
            <br>
            To achieve, say, three buttons on the left and two on the right, just use nested gHbox with the appropriate settings:<br>
<!--eucode>
    gdx l3 = gHbox({b1,b2,b3},"EXPAND=NO"),
        r2 = gHbox({rb1,rb2},"EXPAND=NO"),
      all5 = gHbox({l3,r2},"SPACE=BETWEEN")
</eucode-->
<pre>
<font color="#7060A8">    gdx</font><font color="#000000"> l3</font><font color="#0000FF"> =</font><font color="#7060A8"> gHbox</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">b1</font><font color="#0000FF">,</font><font color="#000000">b2</font><font color="#0000FF">,</font><font color="#000000">b3</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#008000">"EXPAND=NO"</font><font color="#0000FF">),</font>
<font color="#000000">        r2</font><font color="#0000FF"> =</font><font color="#7060A8"> gHbox</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">rb1</font><font color="#0000FF">,</font><font color="#000000">rb2</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#008000">"EXPAND=NO"</font><font color="#0000FF">),</font>
<font color="#000000">      all5</font><font color="#0000FF"> =</font><font color="#7060A8"> gHbox</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">l3</font><font color="#0000FF">,</font><font color="#000000">r2</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#008000">"SPACE=BETWEEN"</font><font color="#0000FF">)</font>
</pre>
            Bear in mind this works on the slack left <i>after</i> any <a href="gSetAttribute.htm#MARGIN">MARGIN</a> and/or <a href="#GAP">GAP</a> has been applied.
            <br>
            <br>
<!-- while perfectly true, this adds nothing useful...
            You could of course also use XPG_SPACE_((LEFT|TOP)|(RIGHT|BOTTOM)|BETWEEN) as bitmasks on the above integer as well, not that I can 
            think of any good reason you might ever want to, tbh, other than perhaps debugging the SPACE attribute in xpGUI.e itself, and quite
            probably not spectacularly usefully even then.
-->
<!--
//          Technically you ought to be able to use
//          other bit settings, specifically 0b110 and 0b011 (caveat emptor), but gGetBoxSpacingName() currently crashes 
//          when passed such, and no effort whatsoever has so far been made to map such to equivalent flexbox settings under 
//          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js</b></span></a>.
-->
            See also: <a href="gSetAttribute.htm#EXPAND">EXPAND</a>,
                      <a href="gSetAttribute.htm#MARGIN">MARGIN</a>,
                      <a href="#GAP">GAP</a>.<br>
          <a name=ORIENTATION></a>
         </td>
        </tr>
<!--
        <tr>
         <td>
          ALIGNMENT<a href="notpgui.htm"><span style="color:lime;"><sup>+</sup></span></a>
         </td>
         <td>
            (non inheritable) Vertically aligns the elements. Possible values: "ATOP", "ACENTER", "ABOTTOM". Default: "ATOP".
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
//?       <a href="gSetAttribute.htm#EXPAND">EXPAND</a>
         </td>
         <td>
            (non inheritable) The default value is "YES"/"BOTH".
             See the documentation of the attribute for <a href="gSetAttribute.htm#EXPAND">EXPAND</a> inheritance.
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
?         EXPANDCHILDREN
         </td>
         <td>
            (non inheritable) forces all children to expand vertically for a Hbox, and horizontally for a Vbox, and to fully occupy the space available inside the box. Default: "NO". 
            For instance, a Vbox is +------+ rather than +------+
                                    |******|             |***   |
                                    |******|             |******|
                                    |******|             |****  |
                                    +------+             +------+
            This has the same effect as setting <a href="gSetAttribute.htm#EXPAND">EXPAND</a>=VERTICAL for Hbox, HORIZONTAL for Vbox, on each child.
         </td>
        </tr>
-->
<!--
//      <tr>
//       <td>
//        GAP,
//       CGAP
//       </td>
//       <td>
//          Defines a horizontal space in pixels between the children, CGAP is in the same units of the <a href="gGetAttribute.htm#SIZE">SIZE</a> 
//          attribute for the width. Default: "0". (CGAP since 3.0)
//       </td>
//      </tr>
        <tr>
         <td>
          NGAP, NCGAP
         </td>
         <td>
            (non inheritable) Same as GAP but are non inheritable.
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          HOMOGENEOUS
         </td>
         <td>
            (non inheritable) forces all children to get equal horizontal space. The space width will be based on the largest child. Default: "NO". 
            Notice that this does not change the childrens size, only the available space for each one of them to expand.
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
?         MARGIN
         </td>
         <td>
            Defines a margin in pixels. 
            Specified as between one and four values: m or {m} =&gt; {m,m,m,m}, {tb,lr} =&gt; {tb,lr,tb,lr}, {t,lr,b} =&gt; {t,lr,b,lr}, or
            {t,r,b,l} as integer values corresponding to the top, right, bottom, and left margins respectively/clockwise.
            Default: 0 (no margin).
         </td>
        </tr>
-->
<!-- no, see gNormalise()
//      <tr>
//       <td>
//?       NORMALIZESIZE
//       </td>
//       <td>
//          (non inheritable) normalizes all children natural size to be the biggest natural size among them. 
//          All natural width will be set to the biggest width, and all natural height will be set to the biggest height according to is value. 
//          Can be NO, HORIZONTAL, VERTICAL or BOTH. 
//          Default: "NO". Same as using IupNormalizer.
//       </td>
//      </tr>
-->
        <tr>
         <td>
          ORIENTATION
         </td>
         <td>
            (read-only, non inheritable): Returns "HORIZONTAL" or "VERTICAL" for a gHbox/gVbox respectively.
         </td>
        </tr>
<!-- no, see gRadio()
//        <a name=RADIO></a>
//      <tr>
//       <td>
//?       RADIO
//       </td>
//       <td>
//          When set, makes any immediate <a href="gCheckbox.htm">gCheckbox</a> children mutually exclusive, so that only one of them can be active at a time.
//       </td>
//      </tr>
-->
<!--
        <tr>
         <td>
?         <a href="gGetAttribute.htm#SIZE">SIZE</a>
         </td>
         <td>
            (non inheritable) Defines the width of the box. 
//          When consulted behaves as the standard <a href="gGetAttribute.htm#SIZE">SIZE</a>/<a href="gSetAttribute.htm#RASTERSIZE">?RASTERSIZE</a> attributes. 
            The standard format "wxh" can also be used, but height will be ignored.
         </td>
        </tr>
-->
<!-- no, see gRadioItem()...
//      <tr>
//       <td>
//?       VALUE
//       </td>
//       <td>
//          Sets or returns the identifier (ie <a href="gdx.htm">gdx</a>) of the currently selected <a href="gCheckbox.htm">gCheckbox</a>, 
//          or 0 if none is checked or <a href="#RADIO">RADIO</a> is not set.
//       </td>
//      </tr>
-->
<!--
//      <tr>
//       <td>
//        VBOX
//       </td>
//       <td>
//          1 for vertically-arranged children, 0 when horizontally-arranged.
//       </td>
//      </tr>
-->
        <tr>
         <td>
          also
         </td>
         <td>
            <a href="gSetAttribute.htm#EXPAND">EXPAND</a>, 
            <a href="gSetAttribute.htm#FONT">FONT</a>, 
<!--        <a href="gSetAttribute.htm#NAME">NAME</a>, -->
            <a href="gSetAttribute.htm#MARGIN">MARGIN</a>, 
<!--        <a href="gSetAttribute.htm#PADDING">PADDING</a>, -->
<!-- ??     <a href="gGetAttribute.htm#POSITION">POSITION</a>, -->
<!--            <a href="gGetAttribute.htm#CLIENTSIZE">CLIENTSIZE</a>, -->
<!--            <a href="gGetAttribute.htm#CLIENTOFFSET">CLIENTOFFSET</a>,-->
<!--            <a href="gSetAttribute.htm#MINSIZE">MINSIZE</a>, -->
<!--            <a href="gSetAttribute.htm#MAXSIZE">MAXSIZE</a>,-->
            <a href="gGetAttribute.htm#SIZE">SIZE</a>.
<!--            <a href="gSetAttribute.htm#USER_SIZE">USER_SIZE</a>.<br>-->
         </td>
        </tr>
<!--
        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
            (at Children)
         </td>
        </tr>
-->
<!--
          <a name=tech></a>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
DEV got ahead of myself a bit here...<br><br>

          Effectively amalgamates, simplifies, and unifies several pGUI containers, namely 
          <a href="IupHbox.htm">IupHbox</a>(),
          <a href="IupVbox.htm">IupVbox</a>(), and
          <a href="IupFrame.htm">IupFrame</a>().<br>
          There is however as yet no attempt to emulate any of the features of 
          <a href="IupBackgroundBox.htm">IupBackgroundBox</a>(),
          <a href="IupCbox.htm">IupCbox</a>(),
          <a href="IupDetachBox.htm">IupDetachBox</a>(),
?         <a href="IupExpander.htm">IupExpander</a>(),
          <a href="IupGridBox.htm">IupGridBox</a>(),
          <a href="IupFlowBox.htm">IupFlowBox</a>(),
          <a href="IupMultiBox.htm">IupMultiBox</a>()[??],
          <a href="IupSbox.htm">IupSbox</a>()[??],
          <a href="IupScrollBox.htm">IupScrollBox</a>()[??], and
          <a href="IupZbox.htm">IupZbox</a>() - however they are all potential candidates, with the 3 marked ?? at the head of that queue.
          <br>
          <br>
//        It is planned, but not yet implemented, that <a href="IupNormalizer.htm">IupNormalizer</a>() functionality will/may become part
//        of this (set of) containers, rather than the (admittedly potentially more flexible and layout/hierarchy-agnostic) pGUI component.
//        There may or may not be a new (say) NGSET attribute on child elements to fine-tune behaviour in that regard, perhaps with said
//        being set to (say) "NAMED_ONLY" (or not) on the container itself also playing a role.
         </td>
        </tr>
-->
       </table>
        <div class="clear"></div>
<!--
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
-->
        <div style="clearboth;height:1px;">&nbsp;</div>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
