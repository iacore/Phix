<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">gButton</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include xpGUI.e
            <br>
            <br>
            <a href="gdx.htm">gdx</a> id = gButton([<a href="string.htm">nullable_string</a> title=NULL,]
                                                   [<a href="rtn.htm">rtn</a> click=NULL,] 
                                                    <a href="string.htm">string</a> attributes=""
                                                    <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Creates an interface element that is a button. <br>
            When selected, this element activates a function in the application. <br>
            The visual presentation can contain text and/or an image.
            <br>
            <br>
            title: Text to be shown to the user. It can be NULL. It will set the <a href="#TITLE">TITLE</a> attribute.<br>
            click: a function which is invoked when clicked, see <a href="#CLICK">CLICK</a> below.<br>
            For more information on the attributes and args parameters see <a href="gSetAttributes.htm">gSetAttributes</a>.<br>
            This is a <a href="g_paranormal.htm">paranormalised function</a>, but note that gButton(attributes) is invalid/treated 
            as gButton(title).  <small>(see technicalia dropdown below for details)</small>
            <br>
            <br>
            Returns the identifier of the created element.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="IupImage.htm">IupImage</a>,
          <a href="IupToggle.htm">IupToggle</a>,
          <a href="IupLabel.htm">IupLabel</a>
<!--
          <a href="IupFlatButton.htm">IupFlatButton</a>,
          <a href="IupDropButton.htm">IupDropButton</a>,
          <a href="IupGLButton.htm">IupGLButton</a>
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
[DEV] this needs testing..
<br>
<br>
            Buttons with images and/or texts can not change their behavior after being mapped. This is a creation dependency. 
            But after creation the image can be changed for another image, and the text for other text.
            <br>
            <br>
            Buttons are activated using Enter or Space keys.
            <br>
            <br>
            Some examples can be seen in demo/pGUI/sample.exw
         </td>
        </tr>
        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
            
         </td>
        </tr>
<!--
        <tr>
         <td>
          <a name=ALIGNMENT></a>
          ALIGNMENT
         </td>
         <td>
            (non inheritable): horizontal and vertical alignment. <br>
            Possible values: "ALEFT", "ACENTER" and "ARIGHT",  combined to "ATOP", "ACENTER" and "ABOTTOM". Default: "ACENTER:ACENTER". <br>
            Partial values are also accepted, like "ARIGHT" or ":ATOP", the other value will be used from the current alignment. <br>
            In Motif, vertical alignment is restricted to "ACENTER". <br>
            In GTK, horizontal alignment for multiple lines will align only the text block.
            <br>
         </td>
        </tr>
        <tr>
         <td>
          <a name=BGCOLOR></a>
          <a href="gSetAttribute.htm#BGCOLOR">BGCOLOR</a><a href="notpgui.htm#IupButton"><span style="color:orange; font-size:75%;"><sup>?</sup></span></a>
         </td>
         <td>
            Background color. <br>
            If text and image are not defined, set the button size, otherwise the natural size will be very small. <br>
            In Windows, the BGCOLOR attribute is ignored if text or image is defined. <br>
            Default: the global attribute <a href="iupgattr.htm#DLGBGCOLOR">DLGBGCOLOR</a>. <br>
            BGCOLOR is ignored when FLAT=YES because it will be used the background from the native parent. 
            <br>
         </td>
        </tr>
        <tr>
         <td>
          <a name=CANFOCUS></a>
          CANFOCUS
         </td>
         <td>
            (creation only) (non inheritable) enables the focus traversal of the control. <br>
            In Windows the button will respect CANFOCUS in opposite to the other controls. <br>
            Default: YES.
         </td>
        </tr>
        <tr>
         <td>
          PROPAGATEFOCUS
         </td>
         <td>
            (non inheritable) enables the focus callback forwarding to the next native parent with FOCUS_CB defined. Default: NO. (since 3.23)
         </td>
        </tr>
        <tr>
         <td>
          FLAT
         </td>
         <td>
            (creation only) Hides the button borders until the mouse enter the button area. Can be YES or NO. Default: NO.
         </td>
        </tr>
        <tr>
         <td>
          <a href="gSetAttribute.htm#FGCOLOR">FGCOLOR</a>
         </td>
         <td>
            Text color. Default: the global attribute <a href="iupgattr.htm#DLGFGCOLOR">DLGFGCOLOR</a>.
         </td>
        </tr>
        <tr>
         <td>
          IMAGE<a href="notpgui.htm#IupButton"><span style="color:orange; font-size:75%;"><sup>?</sup></span></a>
         </td>
         <td>
            (non inheritable) Image name. <br>
            If set before map defines the behavior of the button to contain an image. <br>
            The natural size will be size of the image in pixels, plus the button borders. <br>
            Use <a href="IupSetHandle.htm">IupSetHandle</a> or <a href="IupSetAttributeHandle.htm">IupSetAttributeHandle</a> to associate an image to a name. <br>
            See also <a href="IupImage.htm">IupImage</a>. <br>
            If <a href="#TITLE">TITLE</a> is also defined and not empty both will be shown (except in Motif). (GTK 2.6)
         </td>
        </tr>
        <tr>
         <td>
          IMINACTIVE
         </td>
         <td>
            (non inheritable) Image name of the element when inactive. <br>
            If it is not defined then the IMAGE is used and the colors will be replaced by a modified version of the background color creating the disabled effect. <br>
            GTK will also change the inactive image to look like other inactive objects. (GTK 2.6)
         </td>
        </tr>
        <tr>
         <td>
          IMPRESS<a href="notpgui.htm#IupButton"><span style="color:orange; font-size:75%;"><sup>?</sup></span></a>
         </td>
         <td>
            (non inheritable) Image name of the pressed button. <br>
            If IMPRESS and IMAGE are defined, the button borders are not shown and not computed in natural size. <br>
            When the button is clicked the pressed image does not offset. <br>
            In Motif the button will lose its focus feedback also. (GTK 2.6)
         </td>
        </tr>
        <tr>
         <td>
          IMPRESSBORDER
         </td>
         <td>
            (non inheritable) if enabled the button borders will be shown and computed even if IMPRESS is defined. Can be "YES" or "NO". Default: "NO". 
         </td>
        </tr>
        <tr>
         <td>
          IMAGEPOSITION
         </td>
         <td>
            (non inheritable) Position of the image relative to the text when both are displayed. <br>
            Can be: LEFT, RIGHT, TOP, BOTTOM. Default: LEFT.
         </td>
        </tr>
        <tr>
         <td>
          MARKUP
         </td>
         <td>
            [GTK only] allows the title string to contains pango markup commands. Works only if a mnemonic is NOT defined in the title. Can be "YES" or "NO". Default: "NO". 
         </td>
        </tr>
        <tr>
         <td>
          PADDING<a href="notpgui.htm"><span style="color:lime;"><sup>+</sup></span></a>
         </td>
         <td>
            internal margin. Works just like the MARGIN attribute of the <a href="IupHbox.htm">IupHbox</a> and <a href="IupVbox.htm">IupVbox</a> containers, 
            but uses a different name to avoid inheritance problems. Default value: "0x0".<br>
            Value can be DEFAULTBUTTONPADDING, so the global attribute of this name will be used instead. (since 3.29)
         </td>
        </tr>
        <tr>
         <td>
          CPADDING
         </td>
         <td>
            same as PADDING but using the units of the SIZE attribute. It will actually set the PADDING attribute. (since 3.29)
         </td>
        </tr>
        <tr>
         <td>
          SPACING
         </td>
         <td>
            (creation only) defines the spacing between the image associated and the button&rsquo;s text. Default: "2".
            <br>
         </td>
        </tr>
        <tr>
         <td>
          CSPACING
         </td>
         <td>
            same as SPACING but using the units of the vertical part of the SIZE attribute. It will actually set the SPACING attribute. (since 3.29)
            <br>
         </td>
        </tr>
-->
        <tr>
         <td>
          <a name=TITLE></a>
          <a href="gSetAttribute.htm#TITLE">"TITLE"</a><a href="notpgui.htm"><span style="color:lime;"><sup>+</sup></span></a>
         </td>
         <td>
            (non inheritable) Button&rsquo;s text. <br>
            If IMAGE is not defined before map, then the default behavior is to contain only a text. <br>
            The button behavior can not be changed after map. <br>
            The natural size will be larger enough to include all the text in the selected font, even using multiple lines, plus the button borders. <br>
            The '\n' character is accepted for line change. <br>
            The "&" character can be used to define a mnemonic, the next character will be used as key. <br>
            Use "&&" to show the "&" character instead on defining a mnemonic. <br>
            The button can be activated from any control in the dialog using the "Alt+key" combination.
<!--
             <br>
            In old Motif versions (2.1) using a '\n' causes an invalid memory access inside Motif. (mnemonic support since 3.0)
-->
         </td>
        </tr>
        <tr>
         <td>
          also
         </td>
         <td>
            <a href="gSetAttribute.htm#ACTIVE">ACTIVE</a>, 
            <a href="gSetAttribute.htm#FONT">FONT</a>, 
<!--        <a href="gSetAttribute.htm#NAME">NAME</a>, -->
            <a href="gSetAttribute.htm#EXPAND">EXPAND</a>, 
            <a href="gSetAttribute.htm#SCREENPOSITION">SCREENPOSITION</a>, 
            <a href="gSetAttribute.htm#POSITION">POSITION</a>, 
            <a href="gSetAttribute.htm#MINSIZE">MINSIZE</a>, 
            <a href="gSetAttribute.htm#MAXSIZE">MAXSIZE</a>,
<!--        <a href="gSetAttribute.htm#WID">WID</a>, -->
            <a href="gSetAttribute.htm#TIP">TIP</a>, 
            <a href="gSetAttribute.htm#SIZE">SIZE</a>,
            <a href="gSetAttribute.htm#RASTERSIZE">RASTERSIZE</a>,
            <a href="gSetAttribute.htm#ZORDER">ZORDER</a>,
            <a href="gSetAttribute.htm#VISIBLE">VISIBLE</a>: also accepted.
         </td>
        </tr>

        <tr>
         <td>
          <b>Callbacks:</b>
         </td>
         <td>
            <br>
         </td>
        </tr>
        <tr>
         <td>
          <a name=CLICK></a>
          "CLICK"
         </td>
         <td>
            Event generated when the button is clicked, similar to "click" events in other systems. When using a mouse, the 
            event is only triggered when it is released <i>inside</i> the button area, but you can also (tab-to and) activate 
            a button using the keyboard, and obviously that does not then apply.
            <br>
            <br>
            function click(<a href="gdx.htm">gdx</a> h)<br>
            h: identifier of the element that activated the event.
            <br>
            <br>
            Returns: <a href="gSetHandler.htm#XPG_CLOSE">XPG_CLOSE</a> will be processed. <br>
<!--
            Note that <a href="gSetHandler.htm#XPG_IGNORE">XPG_IGNORE</a> removes the callback, and hence effectively disables the button.
-->
            Note that under pGUI, which uses an "ACTION" callback for this, an <a href="callbacks.htm#IUP_IGNORE">IUP_IGNORE</a> 
            removed the callback, and hence effectively disabled the button (and without any visual feedback of that I might add), 
            whereas in xpGUI a similar return of <a href="gSetHandler.htm#XPG_IGNORE">XPG_IGNORE</a> somewhat more logically simply 
            ignores the click, and to achieve that same sort of effect in xpGUI you would have to explicitly invoke
            <a href="gSetHandler.htm">gSetHandler(h,"CLICK",NULL), and/or 
            <a href="gSetAttribute.htm">gSetAttribute(h,"ACTIVE",false).
         </td>
        </tr>
<!--
        <tr>
         <td>
          <a href="callbacks.htm#BUTTON_CB">BUTTON_CB</a>
         </td>
         <td>
            Action generated when any mouse button is pressed and when it is released. <br>
            Both calls occur before the <a href="#CLICK">CLICK</a> callback when button 1 (left mouse) is being used.
         </td>
        </tr>
-->
        <tr>
         <td>
          also
         </td>
         <td>
<!--
            <a href="callbacks.htm#MAP_CB">MAP_CB</a>,
            <a href="callbacks.htm#UNMAP_CB">UNMAP_CB</a>,
            <a href="callbacks.htm#DESTROY_CB">DESTROY_CB</a>,
-->
            <a href="callbacks.htm#GETFOCUS_CB">GETFOCUS_CB</a>, 
            <a href="callbacks.htm#KILLFOCUS_CB">KILLFOCUS_CB</a>, 
            <a href="callbacks.htm#ENTERWINDOW_CB">ENTERWINDOW_CB</a>,
            <a href="callbacks.htm#LEAVEWINDOW_CB">LEAVEWINDOW_CB</a>, 
            <a href="gSetHandler.htm#KEY">KEY</a>, 
            <a href="callbacks.htm#HELP_CB">HELP_CB</a>: All common callbacks are supported.
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            As this is a <a href="g_paranormal.htm">paranormalised function</a>, and with no expectation that you should attempt to memorise 
            anything but the final recap, or better yet just stick to the initial definition, and/or just ignore this completely and provide 
            all four parameters every time, you can assume that all of the following are potentially perfectly valid, bar the commented out 
            one in the middle:
            <br>
            <br>
<small>
<!--eucode>
                        gButton()
                        gButton(click)
                        gButton(click,attributes[,args])
                        gButton(attributes,args)
--                      gButton(attributes)     -- invalid/treated as gButton(title)
                        gButton(title)
                        gButton(title,click)
                        gButton(title,attributes[,args])
                        gButton(title,click,attributes[,args])
-- quick recap:       gButton([title,][click,]attributes[,args])
</eucode-->
<pre>
<font color="#7060A8">                        gButton</font><font color="#0000FF">()</font>
<font color="#7060A8">                        gButton</font><font color="#0000FF">(</font><font color="#000000">click</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gButton</font><font color="#0000FF">(</font><font color="#000000">click</font><font color="#0000FF">,</font><font color="#000000">attributes</font><font color="#800000">[</font><font color="#0000FF">,</font><font color="#000000">args</font><font color="#800000">]</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gButton</font><font color="#0000FF">(</font><font color="#000000">attributes</font><font color="#0000FF">,</font><font color="#000000">args</font><font color="#0000FF">)</font>
<font color="#000080"><i>--                      gButton(attributes)     -- invalid/treated as gButton(title)</i></font>
<font color="#7060A8">                        gButton</font><font color="#0000FF">(</font><font color="#000000">title</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gButton</font><font color="#0000FF">(</font><font color="#000000">title</font><font color="#0000FF">,</font><font color="#000000">click</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gButton</font><font color="#0000FF">(</font><font color="#000000">title</font><font color="#0000FF">,</font><font color="#000000">attributes</font><font color="#800000">[</font><font color="#0000FF">,</font><font color="#000000">args</font><font color="#800000">]</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gButton</font><font color="#0000FF">(</font><font color="#000000">title</font><font color="#0000FF">,</font><font color="#000000">click</font><font color="#0000FF">,</font><font color="#000000">attributes</font><font color="#800000">[</font><font color="#0000FF">,</font><font color="#000000">args</font><font color="#800000">]</font><font color="#0000FF">)</font>
<font color="#000080"><i>-- quick recap:       gButton([title,][click,]attributes[,args])</i></font>
</pre>
</small>
            <br>
            Note that in practice title and click are actually defined as <a href="object.htm">object</a>, and attributes as
            a <a href="sequence.htm">sequence</a> rather than a string, but they are all manually and thoroughly verified to 
            be of the documented types, after they have been repositioned via the xpGUI.e/paranormalise_traa() routine.
            <br>
            <br>
            As noted attempting gButton(attributes) would be mis-treated as gButton(title), since they are both string,
            whereas any declaration that specifies a click routine, or any of gButton(NULL,attributes), gButton(attributes,{}), 
            or gButton(attributes:=attributes) should be fine.
            <br>
            <br>
            A click routine is very rarely not specified, so that one potentially problematic case almost never occurs anyway.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
