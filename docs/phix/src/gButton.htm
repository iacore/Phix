<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">gButton</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include xpGUI.e
            <br>
            <br>
            <a href="gdx.htm">gdx</a> id = gButton([<a href="string.htm">nullable_string</a> title=NULL,]
                                                   [<a href="rtn.htm">rtn</a> action=NULL,] 
                                                    <a href="string.htm">string</a> attributes=""
                                                    <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Creates an interface element that is a button. <br>
            When selected, this element activates a function in the application. <br>
            The visual presentation can contain text and/or an image.
            <br>
            <br>
            title: Text to be shown to the user. It can be NULL. It will set the <a href="#TITLE">TITLE</a> attribute.<br>
            action: a function which is invoked when activated, see <a href="#ACTION">ACTION</a> below.<br>
            For more information on the attributes and args parameters see <a href="gSetAttributes.htm">gSetAttributes</a>().<br>
            This is a <a href="g_paranormal.htm">paranormalised function</a> <small>(see <a href="#tech" onclick="opentech()">technicalia</a>).</small>
            <br>
            <br>
            Returns the identifier of the created element.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="gImage.htm">gImage</a>,
          <a href="gCheckbox.htm">gCheckbox</a>,
          <a href="gLabel.htm">gLabel</a>
<!--
          <a href="IupFlatButton.htm">IupFlatButton</a>,
          <a href="IupDropButton.htm">IupDropButton</a>,
          <a href="IupGLButton.htm">IupGLButton</a>
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
           <div style="float:left;">
<!--eucode>
-- demo\xpGUI\gButton.exw (simplified)
include xpGUI.e

function action(gdx btn)
    ?"action"
    return XPG_DEFAULT
end function

gdx btn = gButton(`port from pGUI`,action),
    hbx = gHbox({btn},`MARGIN=11x11`),
    dlg = gDialog(hbx,`gButton`,`SIZE=240x80`)
gShow(dlg)
gMainLoop()
</eucode-->
<pre>
<font color="#000080"><i>-- demo\xpGUI\gButton.exw (simplified)</i></font>
<font color="#008080">include</font><font color="#000000"> xpGUI.e
</font>
<font color="#008080">function</font><font color="#000000"> action</font><font color="#0000FF">(</font><font color="#7060A8">gdx</font><font color="#000000"> btn</font><font color="#0000FF">)
    ?</font><font color="#008000">"action"</font>
<font color="#008080">    return</font><font color="#004600"> XPG_DEFAULT</font>
<font color="#008080">end function
</font>
<font color="#7060A8">gdx</font><font color="#000000"> btn</font><font color="#0000FF"> =</font><font color="#7060A8"> gButton</font><font color="#0000FF">(</font><font color="#008000">`port from pGUI`</font><font color="#0000FF">,</font><font color="#000000">action</font><font color="#0000FF">),</font>
<font color="#000000">    hbx</font><font color="#0000FF"> =</font><font color="#7060A8"> gHbox</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">btn</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#008000">`MARGIN=11x11`</font><font color="#0000FF">),</font>
<font color="#000000">    dlg</font><font color="#0000FF"> =</font><font color="#7060A8"> gDialog</font><font color="#0000FF">(</font><font color="#000000">hbx</font><font color="#0000FF">,</font><font color="#008000">`gButton`</font><font color="#0000FF">,</font><font color="#008000">`SIZE=240x80`</font><font color="#0000FF">)</font>
<font color="#7060A8">gShow</font><font color="#0000FF">(</font><font color="#000000">dlg</font><font color="#0000FF">)</font>
<font color="#7060A8">gMainLoop</font><font color="#0000FF">()</font>
</pre>
           </div>
           <div style="float:right;">
            <img alt="gButton" style="float:right;" src="images/gButton.png" width="240" height="80"/>
           </div>
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
<!-- v2?
[DEV] this needs testing..
<br>
<br>
            Buttons with images and/or texts can not change their behavior after being mapped. This is a creation dependency. 
            But after creation the image can be changed for another image, and the text for other text.
            <br>
            <br>
-->
            Buttons can also be activated using Enter or Space keys when they have focus, or via Enter/Escape keys when they have been specified as
            <a href="gDialog.htm#DEFAULTENTER">DEFAULTENTER</a>/<a href="gDialog.htm#DEFAULTESC">DEFAULTESC</a> on the dialog, as well as clicking 
            on them, obviously.
            <br>
<!--
            <br>
            Some further examples can be seen in demo\xpGUI\sample.exw<br>
-->
          <a name=gQuit></a>
         </td>
        </tr>
        <tr>
         <td>
          <b>Shorthand:</b>
         </td>
         <td>
            Use <b>gQuit</b> as a simple shorthand for "Close"/"Cancel"/"Quit"(etc) buttons, when nowt else needs doing:
            <br>
            <small>
<!--eucode>
            global function gQuit(gdx /*id*/)
                return XPG_CLOSE
            end function
</eucode-->
<pre>
<font color="#008080">            global function</font><font color="#7060A8"> gQuit</font><font color="#0000FF">(</font><font color="#7060A8">gdx</font><font color="#000080"><i> /*id*/</i></font><font color="#0000FF">)</font>
<font color="#008080">                return</font><font color="#004600"> XPG_CLOSE</font>
<font color="#008080">            end function</font>
</pre>
            </small>
<!--
            Of course, should you want to perform any additional processing when such a button is clicked, then as per
            action() above just write a similar (renamed) routine containing the required code and use that instead.
-->
         </td>
        </tr>

        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
            
         </td>
        </tr>
<!--
          <a name=ALIGNMENT></a>
        <tr>
         <td>
          ALIGNMENT
         </td>
         <td>
            (non inheritable): horizontal and vertical alignment. <br>
            Possible values: "ALEFT", "ACENTER" and "ARIGHT",  combined to "ATOP", "ACENTER" and "ABOTTOM". Default: "ACENTER:ACENTER". <br>
            Partial values are also accepted, like "ARIGHT" or ":ATOP", the other value will be used from the current alignment. <br>
            In Motif, vertical alignment is restricted to "ACENTER". <br>
            In GTK, horizontal alignment for multiple lines will align only the text block.
            <br>
         </td>
        </tr>
//        <a name=BGCOLOR></a>
//      <tr>
//       <td>
//        <a href="gSetAttribute.htm#BGCOLOR">BGCOLOR</a><a href="notpgui.htm#IupButton"><span style="color:orange; font-size:75%;"><sup>?</sup></span></a>
//       </td>
//       <td>
//          Background color. <br>
//          If text and image are not defined, set the button size, otherwise the natural size will be very small. <br>
//          In Windows, the BGCOLOR attribute is ignored if text or image is defined. <br>
//          Default: the global attribute <a href="gGetGlobal.htm#DLGBGCOLOR">DLGBGCOLOR</a>. <br>
//          BGCOLOR is ignored when FLAT=YES because it will be used the background from the native parent. 
//          <br>
//       </td>
//      </tr>
        <tr>
         <td>
          PROPAGATEFOCUS
         </td>
         <td>
            (non inheritable) enables the focus handler forwarding to the next native parent with FOCUS_CB defined. Default: NO.
         </td>
        </tr>
-->
        <tr>
         <td>
?         FLAT
         </td>
         <td>
            (creation only) Hides the button borders until the mouse enter the button area. Can be YES or NO. Default: NO.<br>
            [DEV we&rsquo;ll need this for a toobar?]<br>
          <a name=IMAGE></a>
         </td>
        </tr>
<!--
//      <tr>
//       <td>
//        <a href="gSetAttribute.htm#FGCOLOR">FGCOLOR</a>
//       </td>
//       <td>
//          Text color. Default: the global attribute <a href="gGetGlobal.htm#DLGFGCOLOR">DLGFGCOLOR</a>.
//       </td>
//      </tr>
-->
        <tr>
         <td>
          IMAGE
         </td>
         <td>
<!--        (creation only, via <Ma href="gSetAttribute.htm">gSetAttribute</a>() only, write only,-->
            (non inheritable) a <a href="gImage.htm">gImage</a>. <br>
<!--
            It is <i>not</i> possible to define an image in the initial creation call, since attributes/args are effectively string-only, and in
            addition a <a href="gImage.htm">gImage</a> is highly backend-specific, as the documentation for that states.<br>
-->
            Obviously attributes/args would need to be in one of the leading '=' forms to specify an image in the initial creation call.<br>
            Whether a button contains text, an image, or both, is fixed at creation. Both may be substituted, but the (space for or size of) 
            an image cannot be added/removed, and if the text is NULL or "" when first displayed then attempts to set it will/may be quietly 
            ignored.<br>
<!--
            While they can be substituted later, the presence/absence of images and text is fixed at creation, in other words you can replace
            an image with another one but not remove it or add one where there was none, and likewise you can replace some text with some 
            other text, but not if the text was initially NULL or "" when the button was first mapped/displayed. 
-->
            You could perhaps hide one button and instead show a different one, in roughly the same place, should that help any.<br>
<!--
            [DEV] Note that under WinAPI the size does not take the image into account properly, let me know if you find a fix for that.<br> [FIXED]
            Must be set before map.[?] defines the behavior of the button to contain an image. <br>
//?         The natural size will be size of the image in pixels, plus the button borders. <br>
            Use <a href="IupSetHandle.htm">IupSetHandle</a> or <a href="IupSetAttributeHandle.htm">IupSetAttributeHandle</a> to associate an image to a name. <br>
            See also <a href="IupImage.htm">IupImage</a>. <br>
-->
            If <a href="#TITLE">TITLE</a> is also defined and not empty both will be shown.<br>
          <a name=TITLE></a>
         </td>
        </tr>
<!--
        <tr>
         <td>
          IMINACTIVE
         </td>
         <td>
            (non inheritable) Image name of the element when inactive. <br>
            If it is not defined then the IMAGE is used and the colors will be replaced by a modified version of the background color creating the disabled effect. <br>
            GTK will also change the inactive image to look like other inactive objects. (GTK 2.6)
         </td>
        </tr>
        <tr>
         <td>
          IMPRESS<a href="notpgui.htm#IupButton"><span style="color:orange; font-size:75%;"><sup>?</sup></span></a>
         </td>
         <td>
            (non inheritable) Image name of the pressed button. <br>
//          If IMPRESS and IMAGE are defined, the button borders are not shown and not computed in natural size. <br>
            When the button is clicked the pressed image does not offset. <br>
            In Motif the button will lose its focus feedback also. (GTK 2.6)
         </td>
        </tr>
        <tr>
         <td>
          IMPRESSBORDER
         </td>
         <td>
            (non inheritable) if enabled the button borders will be shown and computed even if IMPRESS is defined. Can be "YES" or "NO". Default: "NO". 
         </td>
        </tr>
        <tr>
         <td>
          IMAGEPOSITION
         </td>
         <td>
            (non inheritable) Position of the image relative to the text when both are displayed. <br>
            Can be: LEFT, RIGHT, TOP, BOTTOM. Default: LEFT.
         </td>
        </tr>
//      <tr>
//       <td>
//        MARKUP
//       </td>
//       <td>
//          [GTK only] allows the title string to contains pango markup commands. Works only if a mnemonic is NOT defined in the title. Can be "YES" or "NO". Default: "NO". 
//       </td>
//      </tr>
//      <tr>
//       <td>
//?           PADDING
//       </td>
//       <td>
//          Internal margin. Works just like the <a href="gSetAtribute.htm#MARGIN">MARGIN</a> attribute but applies internally and independently.<br>
//          A similar effect could also be achieved via the <a href="gSetAttribute.htm#USER_SIZE">USER_SIZE</a> attribute, but that would centre the
//          content without any possibility of finer control.<br>
//          Default value: "0x0". Note that a gButton is the only control with a PADDING attribute.
//<X!X--        Value can be DEFAULTBUTTONPADDING, so the global attribute of this name will be used instead.--X>
//       </td>
//      </tr>
//      <tr>
//       <td>
//        CPADDING
//       </td>
//       <td>
//          same as PADDING but using the units of the SIZE attribute. It will actually set the PADDING attribute.
//       </td>
//      </tr>
        <tr>
         <td>
          SPACING
         </td>
         <td>
            (creation only) defines the spacing between the image associated and the button&rsquo;s text. Default: "2".
            <br>
         </td>
        </tr>
        <tr>
         <td>
          CSPACING
         </td>
         <td>
            same as SPACING but using the units of the vertical part of the SIZE attribute. It will actually set the SPACING attribute.
            <br>
         </td>
        </tr>
-->
        <tr>
         <td>
          <a href="gSetAttribute.htm#TITLE">TITLE</a>
         </td>
         <td>
            (non inheritable) Button&rsquo;s text. <br>
            If <a href="#IMAGE">IMAGE</a> is not defined before map, then the default behavior is to contain only text. <br>
<!--?           The button behavior can not be changed after map. <br>-->
            The natural size will be large enough to include all the text in the selected font, even using multiple lines, plus 
            when specified an image, and the button borders. <br>
            The '\n' character is accepted for line change. <br>
            The "&" character can be used to define a mnemonic, the next character will be used as key. <br>
            Use "&&" to show the "&" character instead of defining a mnemonic. <br>
            The button can be activated from any control in the dialog using the "Alt+key" combination.
<!--
             <br>
            In old Motif versions (2.1) using a '\n' causes an invalid memory access inside Motif. (mnemonic support since 3.0)
-->
         </td>
        </tr>
        <tr>
         <td>
          also
         </td>
         <td>
            <a href="gSetAttribute.htm#ACTIVE">ACTIVE</a>, 
            <a href="gSetAttribute.htm#CANFOCUS">CANFOCUS</a>, 
            <a href="gSetAttribute.htm#FONT">FONT</a>, 
<!--        <a href="gSetAttribute.htm#NAME">NAME</a>, -->
            <a href="gSetAttribute.htm#EXPAND">EXPAND</a>, 
            <a href="gSetAttribute.htm#MARGIN">MARGIN</a>, 
<!--?           <a href="gSetAttribute.htm#PADDING">PADDING</a>, -->
<!--?           <a href="gGetAttribute.htm#POSITION">POSITION</a>, -->
<!--?           <a href="gGetAttribute.htm#SCREENPOSITION">SCREENPOSITION</a>, -->
<!--            <a href="gSetAttribute.htm#MINSIZE">MINSIZE</a>, -->
<!--            <a href="gSetAttribute.htm#MAXSIZE">MAXSIZE</a>, -->
<!--        <a href="gSetAttribute.htm#WID">WID</a>, -->
            <a href="gSetAttribute.htm#TIP">TIP</a>, 
            <a href="gGetAttribute.htm#SIZE">SIZE</a>,
<!--            <a href="gSetAttribute.htm#USER_SIZE">USER_SIZE</a>,-->
<!--            <a href="gSetAttribute.htm#RASTERSIZE">RASTERSIZE</a>,-->
<!--            <a href="gSetAttribute.htm#ZORDER">ZORDER</a>, -->
            <a href="gSetAttribute.htm#VISIBLE">VISIBLE</a>.
         </td>
        </tr>

        <tr>
         <td>
          <b>Handlers:</b>
         </td>
         <td>
            <br>
          <a name=ACTION></a>
         </td>
        </tr>
        <tr>
         <td>
          ACTION
         </td>
         <td>
            Event generated when the button is activated, similar to "click" events in other systems. When using a mouse, the 
            event is only triggered when release occurs <i>inside</i> the button area, but you can also (tab-to and) activate 
            a button using the keyboard, or use an accelerator key, or even ENTER/ESC when specified as that default on the
            dialog, via <a href="gDialog.htm#DEFAULTENTER">DEFAULTENTER</a>/<a href="gDialog.htm#DEFAULTESC">DEFAULTESC</a>.
            <br> 
            <br> 
            Note that in xpGUI "<a href="gSetHandler.htm#CLICK">CLICK</a>" is a lower-level event that applies to pretty much 
            all controls except menus, including left/middle/right and single/double/release events as well as ctrl/shift/alt,
            and only a selected few of those w/should match/justify what/when triggers "ACTION", and also in any case such an
            event would <i>never</i> cover button activation via the keyboard.
            <br>
            <br>
            function action(<a href="gdx.htm">gdx</a> id)<br>
            id: identifier of the element that activated the event.
<!-- (simply untested... [DEV])
            <br>
            <br>
            You can also theoretically use the <a href="gSetHandler.htm#CLICK">CLICK</a> event on a button, but that is usually
            far too much information and does not trigger when the button is activated via the keyboard.
-->
            <br>
            <br>
            Returns of <a href="gSetHandler.htm#XPG_CLOSE">XPG_CLOSE</a> will be processed, closing whatever dialog the button
            is a part of, all other values are ignored. <br>
         </td>
        </tr>
<!--
//      <tr>
//       <td>
//        <a href="gSetHandler.htm#CLICK">CLICK</a>
//       </td>
//       <td>
//          Action generated when any mouse button is pressed and when it is released. <br>
//          Both calls occur before the <a href="#ACTION">ACTION</a> handler when button 1 (left mouse) is being used.
//       </td>
//      </tr>
-->
        <tr>
         <td>
          also
         </td>
         <td>
<!--
//          <a href="gSetHandler.htm#MAP_CB">MAP_CB</a>,
//          <a href="gSetHandler.htm#UNMAP_CB">UNMAP_CB</a>,
//          <a href="gSetHandler.htm#DESTROY_CB">DESTROY_CB</a>,
-->
<!--
            <a href="gSetHandler.htm#GETFOCUS_CB">GETFOCUS_CB</a>, 
            <a href="gSetHandler.htm#KILLFOCUS_CB">KILLFOCUS_CB</a>, 
            <a href="gSetHandler.htm#ENTERWINDOW_CB">ENTERWINDOW_CB</a>,
            <a href="gSetHandler.htm#LEAVEWINDOW_CB">LEAVEWINDOW_CB</a>, 
-->
<!--            <a href="gSetHandler.htm#HELP_CB">HELP_CB</a> -->
            <a href="gSetHandler.htm#CLICK">CLICK</a>,
            <a href="gSetHandler.htm#KEY">KEY</a>: All common handlers are supported.<br>
          <a name=tech></a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            As this is a <a href="g_paranormal.htm">paranormalised function</a>, and with no expectation that you should attempt to memorise 
            this lot, except maybe "traa", you can assume that all of the following are potentially perfectly valid, with the fairly obvious 
            restrictions that any parameters <i>must</i> be in strict traa-order, and no args without attributes:
            <br>
            <br>
<small>
<!--eucode>
                        gButton()
                        gButton(action)
                        gButton(action, attributes)
                        gButton(action, attributes, args)
                        gButton(attributes, args)
                        gButton(attributes)                      -- (see 2nd note)
                        gButton(title)
                        gButton(title, action)
                        gButton(title, attributes)
                        gButton(title, attributes, args)
                        gButton(title, action, attributes)
                        gButton(title, action, attributes, args)  -- (the full set)
</eucode-->
<pre>
<font color="#7060A8">                        gButton</font><font color="#0000FF">()</font>
<font color="#7060A8">                        gButton</font><font color="#0000FF">(</font><font color="#000000">action</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gButton</font><font color="#0000FF">(</font><font color="#000000">action</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gButton</font><font color="#0000FF">(</font><font color="#000000">action</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gButton</font><font color="#0000FF">(</font><font color="#000000">attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gButton</font><font color="#0000FF">(</font><font color="#000000">attributes</font><font color="#0000FF">)                     </font><font color="#000080"><i> -- (see 2nd note)</i></font>
<font color="#7060A8">                        gButton</font><font color="#0000FF">(</font><font color="#000000">title</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gButton</font><font color="#0000FF">(</font><font color="#000000">title</font><font color="#0000FF">,</font><font color="#000000"> action</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gButton</font><font color="#0000FF">(</font><font color="#000000">title</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gButton</font><font color="#0000FF">(</font><font color="#000000">title</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gButton</font><font color="#0000FF">(</font><font color="#000000">title</font><font color="#0000FF">,</font><font color="#000000"> action</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gButton</font><font color="#0000FF">(</font><font color="#000000">title</font><font color="#0000FF">,</font><font color="#000000"> action</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">) </font><font color="#000080"><i> -- (the full set)</i></font>
</pre>
</small>
            <br>
            Note that in practice title and action are actually defined as <a href="object.htm">object</a>, and attributes as
            a <a href="sequence.htm">sequence</a> rather than a string, but they are all manually and thoroughly verified to 
            be of the documented types, after being repositioned via xpGUI.e/paranormalise_traa().
            <br>
            <br>
            Note that gButton(attributes) is distinguished from gButton(title) by the presence of an '=' character,
            see <a href="g_paranormal.htm#eqch">here</a>.
            <br>
            <br>
<!--
            <br>
            <br>
//          Note that <a href="gSetHandler.htm#XPG_IGNORE">XPG_IGNORE</a> removes the handler, and hence effectively disables the button.
-->
            While in xpGUI a return of <a href="gSetHandler.htm#XPG_IGNORE">XPG_IGNORE</a> from the <a href="#ACTION">ACTION</a> handler 
            somewhat more logically simply ignores the event (aka behaves identically to a return rand(57) statement), in pGUI a similar 
            <a href="callbacks.htm#IUP_IGNORE">IUP_IGNORE</a> completely removed the callback, and hence effectively disabled the button, 
            and without any visual feedback of that I might add. To achieve that same sort of effect in xpGUI one would have to explicitly 
            invoke <a href="gSetHandler.htm">gSetHandler</a>(id,"ACTION",NULL), and/or (but <i>with</i> some visual feedback)
            <a href="gSetAttribute.htm">gSetAttribute</a>(id,"ACTIVE",false).
         </td>
        </tr>
       </table>
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
