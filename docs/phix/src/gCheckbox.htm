<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">gCheckbox</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include xpGUI.e
            <br>
            <br>
            <a href="gdx.htm">gdx</a> id = gCheckbox(<small>
                                                    [<a href="string.htm">nullable_string</a> title=NULL, ]
                                                    [<a href="rtn.htm">rtn</a> value_changed=NULL, ] 
                                                     <a href="string.htm">string</a> attributes="", 
                                                     <a href="html/glossary.htm#dwordseq">dword_seq</a> args={}</small>)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Creates a checkbox interface element, also known as a toggle. It is a two-state (on/off) button.
            <br>
            <br>
            title: Text to be shown, can be NULL. Sets the <a href="gSetAttribute.htm#TITLE">TITLE</a> attribute.<br>
            value_changed: an (optional) procedure invoked when toggled, see <a href="#VALUE_CHANGED">VALUE_CHANGED</a> below.<br>
            For more information on the attributes and args parameters see <a href="gSetAttributes.htm">gSetAttributes</a>().<br>
            This is a <a href="g_paranormal.htm">paranormalised function</a> <small>(see <a href="#tech" onclick="opentech()">technicalia</a>).</small>
            <br>
            <br>
            Returns: the identifier of the created element.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="gImage.htm">gImage</a>,
          <a href="gButton.htm">gButton</a>,
          <a href="gLabel.htm">gLabel</a>
<!--          <a href="gBox.htm#RADIO">RADIO</a>-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
          <div style="float:left;">
<!--eucode>
-- demo\xpGUI\gCheckbox.exw
include xpGUI.e

procedure value_changed(gdx chk, bool bState)
    gdx dlg = gGetDialog(chk)
    gSetAttribute(dlg,"TITLE","gCheckbox:%t",{bState})
end procedure

gdx chk = gCheckbox("Is this checked?",value_changed),
    hbx = gHbox({chk},"MARGIN=9x18"),
    dlg = gDialog(hbx,"gCheckbox","SIZE=240x80")
gShow(dlg)
gMainLoop()
</eucode-->
<pre>
<font color="#000080"><i>-- demo\xpGUI\gCheckbox.exw</i></font>
<font color="#008080">include</font><font color="#000000"> xpGUI.e
</font>
<font color="#008080">procedure</font><font color="#000000"> value_changed</font><font color="#0000FF">(</font><font color="#7060A8">gdx</font><font color="#000000"> chk</font><font color="#0000FF">,</font><font color="#004080"> bool</font><font color="#000000"> bState</font><font color="#0000FF">)</font>
<font color="#7060A8">    gdx</font><font color="#000000"> dlg</font><font color="#0000FF"> =</font><font color="#7060A8"> gGetDialog</font><font color="#0000FF">(</font><font color="#000000">chk</font><font color="#0000FF">)</font>
<font color="#7060A8">    gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">dlg</font><font color="#0000FF">,</font><font color="#008000">"TITLE"</font><font color="#0000FF">,</font><font color="#008000">"gCheckbox:%t"</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">bState</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#008080">end procedure
</font>
<font color="#7060A8">gdx</font><font color="#000000"> chk</font><font color="#0000FF"> =</font><font color="#7060A8"> gCheckbox</font><font color="#0000FF">(</font><font color="#008000">"Is this checked?"</font><font color="#0000FF">,</font><font color="#000000">value_changed</font><font color="#0000FF">),</font>
<font color="#000000">    hbx</font><font color="#0000FF"> =</font><font color="#7060A8"> gHbox</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">chk</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#008000">"MARGIN=9x18"</font><font color="#0000FF">),</font>
<font color="#000000">    dlg</font><font color="#0000FF"> =</font><font color="#7060A8"> gDialog</font><font color="#0000FF">(</font><font color="#000000">hbx</font><font color="#0000FF">,</font><font color="#008000">"gCheckbox"</font><font color="#0000FF">,</font><font color="#008000">"SIZE=240x80"</font><font color="#0000FF">)</font>
<font color="#7060A8">gShow</font><font color="#0000FF">(</font><font color="#000000">dlg</font><font color="#0000FF">)</font>
<font color="#7060A8">gMainLoop</font><font color="#0000FF">()</font>
</pre>
          </div>
          <img alt="gCheckbox" style="float:right;" src="images/gCheckbox.png" width="240" height="80"/>
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
<!--
            Toggle with image or text can not change its behavior after mapped. This is a creation attribute. 
            But after creation the image can be changed for another image, and the text for another text, and/or visibility toggled.
            <br>
            <br>
-->
            Checkboxes are activated/toggled using the Space key, or by being clicked.
            <br>
            <br>
            Since GTK offers no apparent facility for checkboxes on the right of the text, the native support for such in WinAPI is not exposed, 
            and all I can suggest is emulating that with something perhaps like gHbox({gLabel(txt),gCheckbox("")}).<br>
          <a name=gRadio></a>
         </td>
        </tr>
        <tr>
         <td>
          <b>Radio Groups:</b>
         </td>
         <td>
            <b>gRadio</b>(<a href="gdx.htm">gdx</a> ids) specifies a set of mutually exclusive toggles, where ids is a (flat) 
            <a href="sequence.htm">sequence</a> of toggles which have already been added to the dialog hierarchy by some other means.
            Note that radio groups (and checkboxes) are <a href="gMenu.htm#menuchk">handled quite differently on menus</a>.
            <br>
            <br>
            Should a dialog contain more than one radio group, be aware the first element of ids and the tab order of the dialog determine 
            radio groups under WinAPI, whereas they are more explicitly managed under GTK and JavaScript. 
            A toggle cannot be part of more than one radio group. 
            <br>
            <a name=gRadioItem></a>
            <br>
            Use <a href="gdx.htm">gdx</a> selected = <b>gRadioItem</b>(<a href="gdx.htm">gdx</a> id), where id is any element of ids, 
            to obtain the currently selected radio button from that group, 0 if none, or -1 if it is not part of any radio group.
            Note that within a <a href="#VALUE_CHANGED">VALUE_CHANGED</a> handler, where it is not really needed anyway, under WinAPI 
            it returns the previous (off) selection, whereas under GTK and JavaScript [DEV testme] it gets the id of the latest (on).
            Also note that results from gRadioItem() before the dialog has been mapped/displayed are officially undefined/unsupported.
            <br>
            <br>
            You would normally set a default explicitly, otherwise different backends <i>may</i> default differently, and otherwise the 
            <a href="#VALUE">VALUE</a> attribute may be used as normal, except it is illegal to set a radio group toggle off, and that 
            any multiple pre-mapping ons would be applied in mapping rather than chronological order.
            <!--, and while you can set a <i>single</i> toggle on as a default, 
            attempting to then alter that <i>before</i> mapping/display would most likely a) elude some special magic in the backend since
            that hasn&rsquo;t kicked in yet, eg leaving two items selected, <i>and</i> b) flip some valid internal "todo" entry into an 
            "illegal off". Some earlier code which automatically sets the default, if none, to the numerically lowest id in ids has been
            left in, but I wouldn&rsquo;t personally rely on that: obviously if it works, fine, but should it start to behave mysteriously
            after modifying something apparently unrelated, don&rsquo;t say I didn&rsquo;t warn you, and I shall only care if an explicit
            "set that" should singularly somehow fail to instantly fix it.
-->
            <br>
            <br>
<!--            See demo\xpGUI\gRadio.exw for an example, screenshot <a href="xpelements.htm#gRadio">here</a>.-->
          <div style="float:left;">
<!--eucode>
-- demo\xpGUI\gRadio.exw
include xpGUI.e

procedure radio_changed(gdx toggle, bool bState)
    string title = gGetAttribute(toggle,"TITLE")
    printf(1,"toggle(%s), state:%t\n",{title,bState})
end procedure

gdx y = gCheckbox(`You`,radio_changed),
    g = gCheckbox(`get`,radio_changed,`VALUE=ON`),
    i = gCheckbox(`in`,radio_changed),
    t = gCheckbox(`the`,radio_changed),
    b = gCheckbox(`bowl`,radio_changed),
ygitb = {y,g,i,t,b},
 hbox = gHbox(ygitb,"MARGIN=9x8"),
  dlg = gDialog(hbox,"gRadio","SIZE=240x80")
gRadio(ygitb)
gSetAttribute(y,"FONT","Arial, italic 9")
gShow(dlg)
gMainLoop()
</eucode-->
<pre>
<font color="#000080"><i>-- demo\xpGUI\gRadio.exw</i></font>
<font color="#008080">include</font><font color="#000000"> xpGUI.e
</font>
<font color="#008080">procedure</font><font color="#000000"> radio_changed</font><font color="#0000FF">(</font><font color="#7060A8">gdx</font><font color="#000000"> toggle</font><font color="#0000FF">,</font><font color="#004080"> bool</font><font color="#000000"> bState</font><font color="#0000FF">)</font>
<font color="#004080">    string</font><font color="#000000"> title</font><font color="#0000FF"> =</font><font color="#7060A8"> gGetAttribute</font><font color="#0000FF">(</font><font color="#000000">toggle</font><font color="#0000FF">,</font><font color="#008000">"TITLE"</font><font color="#0000FF">)</font>
<font color="#7060A8">    printf</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"toggle(%s), state:%t\n"</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">title</font><font color="#0000FF">,</font><font color="#000000">bState</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#008080">end procedure
</font>
<font color="#7060A8">gdx</font><font color="#000000"> y</font><font color="#0000FF"> =</font><font color="#7060A8"> gCheckbox</font><font color="#0000FF">(</font><font color="#008000">`You`</font><font color="#0000FF">,</font><font color="#000000">radio_changed</font><font color="#0000FF">),</font>
<font color="#000000">    g</font><font color="#0000FF"> =</font><font color="#7060A8"> gCheckbox</font><font color="#0000FF">(</font><font color="#008000">`get`</font><font color="#0000FF">,</font><font color="#000000">radio_changed</font><font color="#0000FF">,</font><font color="#008000">`VALUE=ON`</font><font color="#0000FF">),</font>
<font color="#000000">    i</font><font color="#0000FF"> =</font><font color="#7060A8"> gCheckbox</font><font color="#0000FF">(</font><font color="#008000">`in`</font><font color="#0000FF">,</font><font color="#000000">radio_changed</font><font color="#0000FF">),</font>
<font color="#000000">    t</font><font color="#0000FF"> =</font><font color="#7060A8"> gCheckbox</font><font color="#0000FF">(</font><font color="#008000">`the`</font><font color="#0000FF">,</font><font color="#000000">radio_changed</font><font color="#0000FF">),</font>
<font color="#000000">    b</font><font color="#0000FF"> =</font><font color="#7060A8"> gCheckbox</font><font color="#0000FF">(</font><font color="#008000">`bowl`</font><font color="#0000FF">,</font><font color="#000000">radio_changed</font><font color="#0000FF">),</font>
<font color="#000000">ygitb</font><font color="#0000FF"> = {</font><font color="#000000">y</font><font color="#0000FF">,</font><font color="#000000">g</font><font color="#0000FF">,</font><font color="#000000">i</font><font color="#0000FF">,</font><font color="#000000">t</font><font color="#0000FF">,</font><font color="#000000">b</font><font color="#0000FF">},</font>
<font color="#000000"> hbox</font><font color="#0000FF"> =</font><font color="#7060A8"> gHbox</font><font color="#0000FF">(</font><font color="#000000">ygitb</font><font color="#0000FF">,</font><font color="#008000">"MARGIN=9x8"</font><font color="#0000FF">),</font>
<font color="#000000">  dlg</font><font color="#0000FF"> =</font><font color="#7060A8"> gDialog</font><font color="#0000FF">(</font><font color="#000000">hbox</font><font color="#0000FF">,</font><font color="#008000">"gRadio"</font><font color="#0000FF">,</font><font color="#008000">"SIZE=240x80"</font><font color="#0000FF">)</font>
<font color="#7060A8">gRadio</font><font color="#0000FF">(</font><font color="#000000">ygitb</font><font color="#0000FF">)</font>
<font color="#7060A8">gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">y</font><font color="#0000FF">,</font><font color="#008000">"FONT"</font><font color="#0000FF">,</font><font color="#008000">"Arial, italic 9"</font><font color="#0000FF">)</font>
<font color="#7060A8">gShow</font><font color="#0000FF">(</font><font color="#000000">dlg</font><font color="#0000FF">)</font>
<font color="#7060A8">gMainLoop</font><font color="#0000FF">()</font>
</pre>
          </div>
          <img alt="gRadio" style="float:right;" src="images/gRadio.png" width="240" height="80"/>
         </td>
        </tr>
        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
          <br>          
          <a name=VALUE></a>
         </td>
        </tr>
<!--
        <tr>
         <td>
?         ALIGNMENT
         </td>
         <td>
            (non inheritable) horizontal and vertical alignment when IMAGE is defined. 
            Possible values: "ALEFT", "ACENTER" and "ARIGHT",  combined to "ATOP", "ACENTER" and "ABOTTOM". Default: "ACENTER:ACENTER". 
            Partial values are also accepted, like "ARIGHT" or ":ATOP", the other value will be used from the current alignment. 
            In Motif, vertical alignment is restricted to "ACENTER". 
            In Windows works only when Visual Styles is active. Text is always left aligned.
         </td>
        </tr>
-->
<!--
//      <tr>
//       <td>
//?       <a href="gSetAttribute.htm#BGCOLOR">BGCOLOR</a>
//       </td>
//       <td>
//          Background color of toggle mark when displaying a text. <br>
//          The text background is transparent, it will use the background color of the native parent. <br>
//          When displaying an image in Windows the background is ignored and the system color is used. <br>
//          Default: the global attribute <a href="gGetGlobal.htm#DLGBGCOLOR">DLGBGCOLOR</a>.
//       </td>
//      </tr>
        <tr>
         <td>
?         PROPAGATEFOCUS
         </td>
         <td>
            (non inheritable): enables the focus handler forwarding to the next native parent with FOCUS_CB defined. Default: NO.
         </td>
        </tr>
-->
<!--
//      <tr>
//       <td>
//?       <a href="gSetAttribute.htm#FGCOLOR">FGCOLOR</a>
//       </td>
//       <td>
//          Color of the text shown on the toggle. <br>
//          In Windows, when using Visual Styles <a href="gSetAttribute.htm#FGCOLOR">FGCOLOR</a> is ignored. <br>
//[DEV]
//          Default: the global attribute <a href="gGetGlobal.htm#DLGFGCOLOR">DLGFGCOLOR</a>.
//       </td>
//      </tr>
-->
<!--
        <tr>
         <td>
?         FLAT
         </td>
         <td>
            (creation only) Hides the toggle borders until the mouse enter the toggle area when the toggle is not checked. 
            If the toggle is checked, then the borders will be shown even if flat is enabled. 
            Used only when IMAGE is defined. Can be YES or NO. Default: NO.
         </td>
        </tr>
-->
<!-- maybe, one day...
        <tr>
         <td>
?         IMAGE
         </td>
         <td>
            (non inheritable) Image name. When the IMAGE attribute is defined, the <a href="gSetAttribute.htm#TITLE">TITLE</a> is not shown. 
            This makes the toggle looks just like a button with an image, but its behavior remains the same. 
            Use <a href="IupSetHandle.htm">IupSetHandle</a> or <a href="IupSetAttributeHandle.htm">IupSetAttributeHandle</a> to associate an image to a name. 
            See also <a href="gImage.htm">gImage</a>.
         </td>
        </tr>
        <tr>
         <td>
?         IMPRESS
         </td>
         <td>
            (non inheritable) Image name of the pressed toggle. Unlike buttons, toggles always display the button border when IMAGE and IMPRESS are both defined. (GTK 2.6)
         </td>
        </tr>
        <tr>
         <td>
?         IMINACTIVE
         </td>
         <td>
            (non inheritable) Image name of the inactive toggle. 
            If not defined but IMAGE is, then for inactive toggles the colors will be replaced by a modified version of the background color creating the disabled effect. (GTK 2.6)
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          MARKUP
         </td>
         <td>
            [GTK only] allows the title string to contains pango markup commands. Works only if a mnemonic is NOT defined in the title. Can be "YES" or "NO". Default: "NO". 
         </td>
        </tr>
-->
<!-- no, see gRadio
//      <tr>
//       <td>
//?       RADIO
//       </td>
//       <td>
//          (read-only) returns if the toggle is inside a radio. Can be "YES" or "NO". Valid only after the element is mapped, before returns NULL.
//       </td>
//      </tr>
-->
<!--
//      <tr>
//       <td>
//?       IGNORERADIO
//       </td>
//       <td>
//          (non inheritable): when set the toggle will not behave as a radio when the container parent <a href="gBox.htm#RADIO">RADIO</a> is set.
//       </td>
//      </tr>
-->
<!-- maybe we could emulate this under GTK with gHbox({gLabel(txt),gToggle("")}) ?? Or just suggest that in the docs. -DONE
        <tr>
         <td>
?         RIGHTBUTTON<a href="notpgui.htm"><span style="color:lime;"><sup>+</sup></span></a>
         </td>
         <td>
            (Windows Only) (creation only) place the check button at the right of the text. Can be "YES" or "NO". Default: "NO".
         </td>
        </tr>
-->
        <tr>
         <td>
          VALUE
         </td>
         <td>
            Toggle&rsquo;s state. Can be <a href="logicops.htm#tf">true</a>/"ON", <a href="logicops.htm#tf">false</a>/"OFF" or "TOGGLE" 
            (inverts the current state). Default: <a href="logicops.htm#tf">false</a>. <br>
            A toggle in a radio group cannot be set to false/off, setting it on automatically clears the "previously on" toggle.
         </td>
        </tr>
<!--
        <tr>
         <td>
          3STATE
         </td>
         <td>
            (creation only) Enable a three state toggle. Valid for toggles with text only and that do not belong to a radio. Can be "YES" or NO". Default: "NO".
         </td>
        </tr>
-->
        <tr>
         <td>
          also
         </td>
         <td>
            <a href="gSetAttribute.htm#ACTIVE">ACTIVE</a>, 
            <a href="gSetAttribute.htm#CANFOCUS">CANFOCUS</a>, 
            <a href="gSetAttribute.htm#FONT">FONT</a>, 
<!--            <a href="gSetAttribute.htm#NAME">NAME</a>, -->
            <a href="gSetAttribute.htm#EXPAND">EXPAND</a>, 
<!--            <a href="gGetAttribute.htm#POSITION">POSITION</a>, -->
<!--            <a href="gGetAttribute.htm#SCREENPOSITION">SCREENPOSITION</a>, -->
<!--            <a href="gSetAttribute.htm#MINSIZE">MINSIZE</a>, -->
<!--            <a href="gSetAttribute.htm#MAXSIZE">MAXSIZE</a>,-->
            <a href="gSetAttribute.htm#TIP">TIP</a>, 
            <a href="gSetAttribute.htm#TITLE">TITLE</a>
            <a href="gGetAttribute.htm#SIZE">SIZE</a>,
<!--            <a href="gSetAttribute.htm#RASTERSIZE">RASTERSIZE</a>,-->
<!--            <a href="gSetAttribute.htm#ZORDER">ZORDER</a>, -->
            <a href="gSetAttribute.htm#VISIBLE">VISIBLE</a>.
         </td>
        </tr>
        <tr>
         <td>
          <b>Handlers:</b>
         </td>
         <td>
          <br>
          <a name=VALUE_CHANGED></a>
         </td>
        </tr>
<!--
//        <a name=CLICK></a>
//      <tr>
//       <td>
//        CLICK
//       </td>
//       <td>
//          Action generated when the toggle&rsquo;s state (on/off) was changed. The handler also receives the toggle&rsquo;s state.
//          <br>
//          <br>
//          procedure click(<a href="gdx.htm">gdx</a> id, <a href="integer.htm">integer</a> state)<br>
//          id: identifier of the element that activated the event.<br>
//          state: 1/true if the toggle&rsquo;s state was shifted to on; 0/false if it was shifted to off.
//          <br>
//          <br>
//          Returns: <a href="gSetHandler.htm#XPG_CLOSE">XPG_CLOSE</a> will be processed.
//       </td>
//      </tr>
-->
        <tr>
         <td>
          <a href="gSetHandler.htm#VALUE_CHANGED">VALUE_CHANGED</a>
         </td>
         <td>
            Called after the value was interactively changed by the user. 
            <!--Called after the <a href="#CLICK">CLICK</a> handler, but under the same context.-->
            <br>
            <br>
            procedure value_changed(<a href="gdx.htm">gdx</a> id[, <a href="integer.htm#bool">bool</a> bChecked])<br>
            id: identifier of the element that activated the event.<br>
            bChecked: <a href="logicops.htm#tf">true</a>(1) if the toggle&rsquo;s state is on; <a href="logicops.htm#tf">false</a>(0) if it is off.
            <br>
            <br>
            Note that in a radio group, the raw WinAPI has a tendency to send "off" signals to all other toggles, whereas GTK more 
            sensibly only signals the one off toggle that actually changed, hence xpGUI deliberately only forwards the "on" signal
            for toggles that are part of a radio group.
            As mentioned above, using <a href="#gRadioItem">gRadioItem</a>() within a VALUE_CHANGED handler (for an item of that
            very same radio group) is rather foolish, and thankfully completely pointless, since you have already been (/only get) 
            passed the "on" id anyway. For that reason, bChecked can be omitted, however a fatal error occurs should a handler 
            without it ever be triggered on a non-radio checkbox.
         </td>
        </tr>
        <tr>
         <td>
          also
         </td>
         <td>
<!--            <a href="gSetHandler.htm#DESTROY_CB">DESTROY_CB</a>, -->
<!--
            <a href="gSetHandler.htm#GETFOCUS_CB">GETFOCUS_CB</a>, 
            <a href="gSetHandler.htm#KILLFOCUS_CB">KILLFOCUS_CB</a>, 
            <a href="gSetHandler.htm#ENTERWINDOW_CB">ENTERWINDOW_CB</a>,
            <a href="gSetHandler.htm#LEAVEWINDOW_CB">LEAVEWINDOW_CB</a>, 
-->
<!--            <a href="gSetHandler.htm#HELP_CB">HELP_CB</a> -->
            <a href="gSetHandler.htm#KEY">KEY</a>: All common handlers are supported.<br>
          <a name=tech></a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            As this is a <a href="g_paranormal.htm">paranormalised function</a>, and with no expectation that you should attempt to memorise 
            this lot, except maybe "traa", you can assume that all of the following are potentially perfectly valid, with the fairly obvious 
            restrictions that any parameters <i>must</i> be in strict traa-order, and no args without attributes:
            <br>
            <br>
<small>
<!--eucode>
                        gCheckbox()
                        gCheckbox(value_changed)
                        gCheckbox(value_changed, attributes)
                        gCheckbox(value_changed, attributes, args)
                        gCheckbox(attributes, args)
                        gCheckbox(attributes)                    -- (see 2nd note)
                        gCheckbox(title)
                        gCheckbox(title, value_changed)
                        gCheckbox(title, attributes)
                        gCheckbox(title, attributes, args)
                        gCheckbox(title, value_changed, attributes)
                        gCheckbox(title, value_changed, attributes, args)  -- (the full set)
</eucode-->
<pre>
<font color="#7060A8">                        gCheckbox</font><font color="#0000FF">()</font>
<font color="#7060A8">                        gCheckbox</font><font color="#0000FF">(</font><font color="#000000">value_changed</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gCheckbox</font><font color="#0000FF">(</font><font color="#000000">value_changed</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gCheckbox</font><font color="#0000FF">(</font><font color="#000000">value_changed</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gCheckbox</font><font color="#0000FF">(</font><font color="#000000">attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gCheckbox</font><font color="#0000FF">(</font><font color="#000000">attributes</font><font color="#0000FF">)                   </font><font color="#000080"><i> -- (see 2nd note)</i></font>
<font color="#7060A8">                        gCheckbox</font><font color="#0000FF">(</font><font color="#000000">title</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gCheckbox</font><font color="#0000FF">(</font><font color="#000000">title</font><font color="#0000FF">,</font><font color="#000000"> value_changed</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gCheckbox</font><font color="#0000FF">(</font><font color="#000000">title</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gCheckbox</font><font color="#0000FF">(</font><font color="#000000">title</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gCheckbox</font><font color="#0000FF">(</font><font color="#000000">title</font><font color="#0000FF">,</font><font color="#000000"> value_changed</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gCheckbox</font><font color="#0000FF">(</font><font color="#000000">title</font><font color="#0000FF">,</font><font color="#000000"> value_changed</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">) </font><font color="#000080"><i> -- (the full set)</i></font>
</pre>
</small>
            <br>
            Note that in practice title and value_changed are actually defined as <a href="object.htm">object</a>, and attributes as
            a <a href="sequence.htm">sequence</a> rather than a string, but they are all manually and thoroughly verified to 
            be of the documented types, after being repositioned via xpGUI.e/paranormalise_traa().
            <br>
            <br>
            Note that at creation gCheckbox(attributes) is distinguished from gCheckbox(title) by the presence of an '=' character,
            see <a href="g_paranormal.htm#eqch">here</a>.
            <br>
            <br>
            Tri-state checkboxes, which I have never personally found much use for, are left as an exercise for the reader.
         </td>
        </tr>
       </table>
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
