<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">gClipboard</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include xpGUI.e
            <br>
            <br>
            <a href="gdx.htm">gdx</a> id = gClipboard()
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Creates an element that allows access to the clipboard. 
<!--
            <br>
            <br>
//          Each clipboard should be destroyed using <a href="IupDestroy.htm">IupDestroy</a>, but you can use only one for the entire application 
            because it does not store any data inside. 
            Or you can simply create and destroy every time you need to copy or paste.
-->
            <br>
            <br>
            Returns: the identifier of the created element, an exception is thrown if it cannot be created (eg/ie another application has locked it).
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
<!--
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
DEV can we fix/automate this?<br>
            In Windows when "TEXT" format data is copied to the clipboard, the system will automatically store other text formats too if those formats are not already stored. 
            This means that when copying "TEXT" Windows will also store "Unicode Text" and "OEM Text", but only if those formats were not copied before. 
            So to make sure the system will copy all the other text formats clear the clipboard before copying you own data (you can simply set TEXT=NULL before setting the actual value).
         </td>
        </tr>
-->
        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
          <br>
          <a name=TEXT></a>
         </td>
        </tr>
        <tr>
         <td>
          TEXT<a href="notpgui.htm"><span style="color:lime;"><sup>+</sup></span></a>
         </td>
         <td>
            copy or paste text to or from the clipboard. If set to NULL clears the clipboard data.
            <br>
          <a name=TEXTAVAILABLE></a>
         </td>
        </tr>
        <tr>
         <td>
          TEXTAVAILABLE
         </td>
         <td>
            (read-only) returns true when the clipboard contains text, false otherwise.
         </td>
        </tr>
<!--
        <tr>
         <td>
          ADDFORMAT
         </td>
         <td>
            (write-only) register a custom format for clipboard data given its name. 
            The registration remains valid even after the element is destroyed. 
            A new format must be added before used. (since 3.7)
         </td>
        </tr>
        <tr>
         <td>
          EMFAVAILABLE
         </td>
         <td>
            (read-only) [Windows Only] informs if there is a Windows Enhanced Metafile available at the clipboard. (Since 3.2)
         </td>
        </tr>
        <tr>
         <td>
          FORMAT
         </td>
         <td>
            set the current format to be used by the FORMATAVAILABLE and FORMATDATA attributes. (since 3.7)
         </td>
        </tr>
        <tr>
         <td>
          FORMATAVAILABLE
         </td>
         <td>
            (read-only) informs if there is a data in the FORMAT available at the clipboard. If FORMAT is not set returns NULL. (since 3.7)
         </td>
        </tr>
        <tr>
         <td>
          FORMATDATA
         </td>
         <td>
            sets or retrieves the data from the clipboard in the format defined by the FORMAT attribute. 
            If FORMAT is not set returns NULL. If set to NULL clears the clipboard data. 
            When set the FORMATDATASIZE attribute must be set before with the data size. 
            When retrieved FORMATDATASIZE will be set and available after data is retrieved. (since 3.7)
         </td>
        </tr>
        <tr>
         <td>
          FORMATDATASTRING
         </td>
         <td>
            [Windows and GTK Only] sets/gets FORMATDATA and FORMATDATASIZE considering data being a string in the system format. (since 3.29)
         </td>
        </tr>
        <tr>
         <td>
          FORMATDATASIZE
         </td>
         <td>
            size of the data on the clipboard. Used by the FORMATDATA attribute processing. (since 3.7)
         </td>
        </tr>
-->
<!-- maybe, but then again in IUP it is write-only...(!!)
        <tr>
         <td>
          IMAGE
         </td>
         <td>
            (write-only) name of an image to copy to the clipboard. If set to NULL clears the clipboard data. (GTK 2.6)
         </td>
        </tr>
        <tr>
         <td>
          IMAGEAVAILABLE
         </td>
         <td>
            (read-only) informs if there is an image available at the clipboard. (GTK 2.6)
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          NATIVEIMAGE
         </td>
         <td>
            native handle of an image to copy or paste, to or from the clipboard. <br>
            In Win32 is a HANDLE of a DIB. <br>
            In GTK is a GdkPixbuf*. <br>
            In Motif is a Pixmap. <br>
            If set to NULL clears the clipboard data. <br>
            The returned handle in a paste must be released after used (GlobalFree(handle), g_object_unref(pixbuf) or XFreePixmap(display, pixmap)). <br>
            After copy, do NOT release the given handle. See IUP-IM Functions for utility functions on image native handles. (GTK 2.6)
         </td>
        </tr>
        <tr>
         <td>
          SAVEEMF
         </td>
         <td>
            (write-only) [Windows Only] saves the EMF from the clipboard to the given filename. (Since 3.2)
         </td>
        </tr>
        <tr>
         <td>
          SAVEWMF
         </td>
         <td>
            (write-only) [Windows Only] saves the WMF from the clipboard to the given filename. (Since 3.2)
         </td>
        </tr>
-->
<!--
//      <tr>
//       <td>
//        WMFAVAILABLE
//       </td>
//       <td>
//          (read-only) [Windows Only] informs if there is a Windows Metafile available at the clipboard. (Since 3.2)
//       </td>
//      </tr>
-->
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
gdx clipboard = IupClipboard();
gSetAttribute(clipboard, "TEXT", gGetAttribute(text, "VALUE"));
-- and/or
gSetAttribute(text, "VALUE", gGetAttribute(clipboard, "TEXT"));
</eucode-->
<pre>
<font color="#7060A8">gdx</font><font color="#000000"> clipboard</font><font color="#0000FF"> =</font><font color="#7060A8"> IupClipboard</font><font color="#0000FF">();</font>
<font color="#7060A8">gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">clipboard</font><font color="#0000FF">,</font><font color="#008000"> "TEXT"</font><font color="#0000FF">,</font><font color="#7060A8"> gGetAttribute</font><font color="#800000">(</font><font color="#000000">text</font><font color="#0000FF">,</font><font color="#008000"> "VALUE"</font><font color="#800000">)</font><font color="#0000FF">);</font>
<font color="#000080"><i>-- and/or</i></font>
<font color="#7060A8">gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">text</font><font color="#0000FF">,</font><font color="#008000"> "VALUE"</font><font color="#0000FF">,</font><font color="#7060A8"> gGetAttribute</font><font color="#800000">(</font><font color="#000000">clipboard</font><font color="#0000FF">,</font><font color="#008000"> "TEXT"</font><font color="#800000">)</font><font color="#0000FF">);</font>
</pre>
            <br>
<!--
            Note that clipboard has an <a href="Ihandle.htm">Ihandln</a> type for the benefit of <a href="IupDestroy.htm">IupDestroy</a>(); 
            gClipboard() will throw a (catchable) exception rather than return NULL.
-->
         </td>
        </tr>
       </table>
        <div style="clear:both;height:1px;"> </div>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
