<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">gDialog</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include xpGUI.e
            <br>
            <br>
            <a href="gdx.htm">gdx</a> id = gDialog(<a href="gdx.htm">gdx</a> child, <small>[parent=NULL,]
                                                  [<a href="string.htm">string</a> [title="",] attributes="",
                                                  [<a href="html/glossary.htm#dwordseq">dword_seq</a> args={},]]
                                                   <a href="integer.htm#bool">bool</a> bEsc=<a href="logicops.htm#tf">true</a></small>)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Creates a dialog element, also known as a window, which contains and manages user interaction with the interface elements. 
            For any (other type of) interface element to be shown, it must ultimately be encapsulated in a dialog.
            <br>
            <br>
            child: the identifier of an interface element. The dialog has only one child.<!--, which (unlike pGUI) must <i>not</i> be NULL.--><br>
            parent: must be specified at creation time, or NULL (/omitted) for top-level windows.<br>
            title: optional, can also be set via `TITLE="xxx"` in the attributes parameter, or even later.<br>
            For more information on the attributes and args parameters see <a href="gSetAttributes.htm">gSetAttributes</a>().<br>
            <a name=bEsc></a>
            bEsc: when <a href="logicops.htm#tf">true</a> (the default) the dialog is automatically closed when escape is keyed.<br>
            This is a <a href="g_paranormal.htm">paranormalised function</a><!--, but note that gDialog(child,bEsc) is invalid/would be treated as 
            gDialog(child,parent).--> <small>(see <a href="#tech" onclick="opentech()">technicalia</a>)</small>
            <br>
            <br>
            Returns the identifier of the created element.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
<!--
          <a href="IupFileDlg.htm">IupFileDlg</a>,
          <a href="IupMessageDlg.htm">IupMessageDlg</a>,
-->
<!--      <a href="IupOpen.htm">IupOpen</a>, -->
          <a href="gShow.htm">gShow</a>,
<!--      <a href="IupShowXY.htm">IupShowXY</a>, -->
<!--      <a href="IupPopup.htm">IupPopup</a>, -->
          <a href="gMainLoop.htm">gMainLoop</a>,
          <a href="gHide.htm">gHide</a>
<!--      <a href="IupDestroy.htm">IupDestroy</a>, -->
<!--          <a href="IupClose.htm">IupClose</a> -->
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
          <div style="float:left;">
<!--
            Very simple dialog with a label and a button. The application is closed when the button is pressed.
            <br>
            <br>
-->
<!--eucode>
-- demo\xpGUI\gDialog.exw
include xpGUI.e
gdx dlg = gDialog(NULL,"gDialog","SIZE=240x80")
gShow(dlg)
gMainLoop()
</eucode-->
<pre>
<font color="#000080"><i>-- demo\xpGUI\gDialog.exw</i></font>
<font color="#008080">include</font><font color="#000000"> xpGUI.e</font>
<font color="#7060A8">gdx</font><font color="#000000"> dlg</font><font color="#0000FF"> =</font><font color="#7060A8"> gDialog</font><font color="#0000FF">(</font><font color="#004600">NULL</font><font color="#0000FF">,</font><font color="#008000">"gDialog"</font><font color="#0000FF">,</font><font color="#008000">"SIZE=240x80"</font><font color="#0000FF">)</font>
<font color="#7060A8">gShow</font><font color="#0000FF">(</font><font color="#000000">dlg</font><font color="#0000FF">)</font>
<font color="#7060A8">gMainLoop</font><font color="#0000FF">()</font>
</pre>
          </div>
          <img alt="gDialog" style="float:right;" src="images/gDialog.png" width="240" height="70">
          <div class="clear"></div>
<!--
            In the real world, of course, you would never specify a dialog with no contents (the NULL above), except perhaps when
            setting up the initial boilerplate/template/outline code.
            <br>
            On error, gDialog() throws an exception rather than returning NULL, though most causes, such as attempting to put the same
            element on a dialog twice, are simple programming errors and the exception is not usually worth catching.
            <br>
            <br>
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
<!--
            Do not associate an IupDialog with the native "dialog" nomenclature in Windows, GTK or Motif.<br>
            IupDialog use native standard windows in all drivers.<br>
            Except for the menu, all other elements must be inside a dialog to interact with the user.<br>
-->
            All elements (including menus) must be inside a dialog to interact with the user.<br>
            An interface element will only be visible if the containing dialog is also visible.
            <br>
            <br>
            Technically the child can be NULL, as shown above, but that is only useful for test/incomplete applications, since 
            (unlike pGUI) there is no way to insert or reparent controls, and besides it is pretty easy to show/hide elements.
            <!--, or perhaps effect the same via two (or more) dialogs, with only one being visible at any given time.-->
            <!--, or perhaps even destroy and re-create a dialog.-->
<!--
            <br>
            <br>
             (which is far simpler than faffing about trying to "reparent" things, without upsetting anyone, anyway).
            The order of handler calling is system dependent. For instance, the <a href="gSetHandler.htm#RESIZE_CB">RESIZE_CB</a> 
            and the SHOW_CB are called in a different order in Win32 and in X-Windows when the dialog is shown for the first time.
            <br>
            Windows MDI support is composed of 3 components: <br>
            the MDI frame window (IupDialog), <br>
            the MDI client window (<a href="IupCanvas.htm">IupCanvas</a>) and <br>
            the MDI children (IupDialog). <br>
            Although the MDI client is a <a href="IupCanvas.htm">IupCanvas</a> it is not used directly by the application, 
            but it must be created and included in the dialog that will be the MDI frame, 
            other controls can also be available in the same dialog, like buttons and other canvases composing toolbars and status area. 
            <br>
            <br>
            The following picture illustrates the 3 components:
            <br>
            <img src="images/mdi.gif"/>
            <br>
            <h3>Custom Frame</h3>
            The use of custom frame is very popular nowadays. <br>
            But the system support is very poor, in Windows and in GTK. <br>
            So use it carefully and consciously of its glitches.
            <br>
            <br>
            In GTK is easier to understand because the frame is managed by the Window Manager. <br>
            So depending on the system it may be provided by the Windows Manager or it is simulated by IUP removing the window decoration.
            <br>
            <br>
            In Windows, there is no function or attribute to activate this feature in the Win32 API 
            (maybe in WPF there is, but we are stuck with the old API). <br>
            It is a combination of message handling with returned values in the WindowProc. <br>
            So sometimes the result is not what was expected. <br>
            For instance, if the application is not responding the old title bar interface is drawn over the top of the dialog just to 
            show the "Not Responding" at the window caption, even if the window does not have a caption. <br>
            We don&rsquo;t know how to avoid that. <br>
            Also the internal double buffer processing for the dialog is some how affected and a sequential of full redraw of the dialog has more flicker than usual.
            <br>
            <br>
            The CUSTOMFRAMESIMULATE attribute is a workaround that tries to solve the double buffer problem and has more control over 
            the custom frame behavior in general.
            <br>
            <br>
            <b>Important:</b><br>
            Almost all applications will benefit from <a href="IupSetAttributeHandle.htm">IupSetAttributeHandle</a>(<i>[NULL]</i>,"PARENTDIALOG",dlg).<br>
            It can really help to explicitly control focus behaviour, rather than rely on the often somewhat erratic default focus behaviour, especially 
            on Windows. Should closing a child window suddenly gift focus to a completely different application (often hiding the window that should have
            regained focus), or perhaps the Windows taskbar, then you need to think about setting PARENTDIALOG.<br>
            Obviously the top-level dialog should be set in the global attribute (I can&rsquo;t find any specific documentation about that) at program 
            startup, and each child dialog should (probably) use its own private setting where possible, but some dialogs do not always have a 
            single specific parent, and things like <a href="IupMessage.htm">IupMessage</a>() simply don&rsquo;t have a private setting at all. For 
            those you may need to push/override and pop/restore the global PARENTDIALOG as various child windows are opened and closed, however as yet 
            there is no specific mechanism to assist with that, at least not in pGUI itself. <X!X-- pwa/p2js and PARENTDIALOG == ??? [DEV] --X>
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
<!--            Common, non inheritable-->
          <br>
          <a name=CLOSE_ON_ESCAPE></a>
         </td>
        </tr>
        <tr>
         <td>
          CLOSE_ON_ESCAPE
         </td>
         <td>
            An alternative way to set the same thing as the bEsc parameter, or to check what it is.<br>
            Note there is no procedural equivalent for(/this replaces) <a href="IupClose.htm#IupCloseOnEscape">IupCloseOnEscape</a>().<br>
          <a name=DEFAULTENTER></a>
          <a name=DEFAULTESC></a>
         </td>
        </tr>
        <tr>
         <td>
??        DEFAULTENTER<br>
          DEFAULTESC
         </td>
         <td>
            <a href="constants.htm#NULL">NULL</a>, <a href="gSetHander.htm#XPG_CLOSE">XPG_CLOSE</a>, <a href="gSetHander.htm#XPG_IGNORE">XPG_IGNORE</a>, 
            or the <a href="gdx.htm">gdx</a> of the button to be activated (more accurately the <a href="gButton.htm#CLICK">CLICK</a> handler of said
            to be invoked) when the user presses (an otherwise unhandled) Enter/Esc when the keyboard focus is on any control within the dialog. <br>
            Alternatively/for now just use a <a href="gSetHandler.htm#KEY">KEY</a> handler on the dialog.<br>
<!--
Ah, this could be tricky under pwa/p2js, unless we split/sprintf rather than the current sprintf/split...
            It is not possible to set these via <a href="gSetAttributes.htm">gSetAttributes</a>(), including any implicit inline call at creation, 
            further any active <a href="gSetHander.htm#KEY">KEY</a> handler (with only the "most pertinent" one being invoked) <i>must</i> return 
            <a href="gSetHander.htm#XPG_DEFAULT">XPG_DEFAULT</a> for either of these to be invoked, and finally nothing happens via this setting if
            either of those keys are pressed in combination with Ctrl, Shift, or Alt. Default: NULL.
PL: OK, I've convinced myself, make them use a KEY handler. UPDATE: give it a decent shot...
    AH: if there is supposed to be a visual clue... (v2.0+) [DEV]
--X>
<X!X--
            Use <a href="IupSetHandle.htm">IupSetHandle</a> or <a href="IupSetAttributeHandle.htm">IupSetAttributeHandle</a> to associate a button to a name.<br>
Dear IUP Users,

How is one supposed to give IupButton a visual cue that it's the default button?  Just using

  IupSetAttributeHandle( dialog, "DEFAULTENTER", button ) ;

does not do this, and I found no reference to this in the attributes of the IupButton object itself.  
So I ended up using a MAP_CB which does the following.

  HWND wnd = IupGetAttribute( handle, "WID" ) ;
  if ( wnd ) {
      SendMessage( wnd, BM_SETSTYLE, BS_DEFPUSHBUTTON, TRUE ) ;
  }

This works well enough, but I was expecting something more obvious in the IUP toolkit itself.

Default activation
In a dialog, one widget may be marked as the default, which means that it will be activated when the user hits 'Enter'. 
Often, it is appropriate for a button to be marked as the default widget. 
In the simplest case, you can make a button the default by calling gtk_widget_grab_default() (it must be marked as 'can-default' for this to work).

  gtk_widget_set_can_default (button, TRUE);
  gtk_widget_grab_default (button);

One more detail that is good to know about default activation is that hitting Enter while the focus is in a GtkEntry will only activate the default widget 
if the entry is marked as 'activates-default'.

  gtk_entry_set_activates_default (entry, TRUE);

Antonio Scuri replied:
 IUP does not set that style. Can't remember now why we didn't do it. But probably because it does not behave as expected or does not have an equivalent in GTK.


void gtk_widget_set_can_default ( GtkWidget* widget, gboolean can_default )
void gtk_widget_grab_default ( GtkWidget* widget )
void gtk_entry_set_activates_default ( GtkEntry* entry, gboolean setting )
void gtk_widget_set_receives_default ( GtkWidget* widget, gboolean receives_default )
-->
          <a name=FULLSCREEN></a>
         </td>
        </tr>
        <tr>
         <td>
?         FULLSCREEN
         </td>
         <td>
            Makes the dialog occupy the whole screen over any system bars in the main monitor. <br>
            All dialog details, such as title bar, borders, maximize button, etc, are removed. <br>
            Possible values: YES, NO. <br>
<!--
            In Motif you may have to click in the dialog to set its focus.
            In Motif if set to YES when the dialog is hidden, then it can not be changed after it is visible.
          <a name=MARGIN></a>
-->
         </td>
        </tr>
        <tr>
         <td>
          <a href="gSetAttribute.htm#MARGIN"><span class="illegal">MARGIN</span></a>,<br>
          <a href="gSetAttribute.htm#PADDING"><span class="illegal">PADDING</span></a>  
         </td>
         <td>
            There are no such things on a dialog itself, however like all containers a dialog is responsible for handling child margin[s], hence instead 
            specify a <a href="gSetAttribute.htm#MARGIN">MARGIN</a> on the (sole) child for some space around the edges of a dialog, and of course should 
            that be a gH/Vbox additional options <a href="gBox.htm#GAP">GAP</a> and <a href="gBox.htm#SPACE">SPACE</a> are also available.<br>
          <a name=MAXBOX></a>
          <a name=MINBOX></a>
          <a name=MENUBOX></a>
         </td>
        </tr>
        <tr>
         <td>
?         MAXBOX, <br>
?         MINBOX, <br>
?         MENUBOX
         </td>
         <td>
DEV post-v1..<br>
            (creation only) Requires a maximize/minimize button/system menu box from the window manager. Default: YES.<br>
            If <a href="#RESIZE">RESIZE</a>=NO then MAXBOX will be set to NO.<br>
            If MENUBOX=NO will also remove the Close button.<br>
<!--            In Motif the decorations are controlled by the Window Manager and may not be possible to be changed from IUP. <br>-->
            In Windows MENUBOX=NO will also hide MAXBOX and MINBOX.<br>
<small>PL: removes the min|(max/restore)|close buttons (Windows). I need to test it on Linux/GTK</small><br>
            In Windows MAXBOX/MINBOX is hidden only if MINBOX/MAXBOX is hidden as well, otherwise it is just disabled.<br>
          <a name=MAXIMIZED></a>
          <a name=MINIMIZED></a>
         </td>
        </tr>
        <tr>
         <td>
?         MAXIMIZED, <br>
          MINIMIZED
         </td>
         <td>
            [Windows Only] (read-only) indicates if the dialog is maximized/minimized. Can be YES or NO.<br>
          <a name=PLACEMENT></a>
         </td>
        </tr>
        <tr>
         <td>
?         PLACEMENT<a href="notpgui.htm"><span style="color:lime;"><sup>+</sup></span></a>
         </td>
         <td>
            Changes how the dialog will be shown. Values: "FULL", "MAXIMIZED", "MINIMIZED" and "NORMAL". Default: NORMAL. <br>
            After <a href="gShow.htm">gShow</a> the attribute is set back to "NORMAL". <br>
??          FULL is similar to FULLSCREEN but only the dialog client area covers the screen area, menu and decorations will be there but out of the screen. <br>
<!--
??          In UNIX there is a chance that the placement will not work correctly, that depends on the Window Manager. <br>
//          In Windows, the SHOWNOACTIVE attribute can be set to Yes to prevent the window being made active. <br>
//          In Windows, the SHOWMINIMIZENEXT attribute can be set to Yes to activate the next top-level window in the Z order when minimizing.<br>
-->
            Under pwa/p2js MINIMIZED is not supported since that is more likely to be the job of the browser, rather than anything on a tab within the browser.<br>
<!-- DEV/SUG (untested/uncoded)
            Under pwa/p2js FULL makes the client fill the tab client only, whereas FULLSCREEN covers the entire screen including any browser window decorations.<br>
            In other words FULL makes it more like a normal web page, FULLSCREEN is what you would expect for playing games or watching movies.
-->
          <a name=RESIZE></a>
         </td>
        </tr>
        <tr>
         <td>
?         RESIZE
         </td>
         <td>
DEV post-v1, probably...<br>
            (creation only) Allows interactively changing the dialog&rsquo;s size. Default: YES. <br>
            If RESIZE=NO then <a href="#MAXBOX">MAXBOX</a> will be set to NO. <br>
<!--            In Motif the decorations are controlled by the Window Manager and may not be possible to be changed from IUP. -->
          <a name=SIZE></a>
         </td>
        </tr>
        <tr>
         <td>
<!--DEV-->
?         <a href="gGetAttribute.htm#SIZE">SIZE</a>
         </td>
         <td>
            Dialog&rsquo;s size. Additionally the following values can also be defined for width and/or height:
            <br>
            <br>
            "FULL": Makes the dialog width (or height) equal to the screen width (or height) <br>
            "HALF": Makes the dialog width (or height) equal to half the screen width (or height) <br>
            "THIRD": Makes the dialog width (or height) equal to 1/3 the screen width (or height) <br>
            "QUARTER": Makes the dialog width (or height) equal to 1/4 of the screen width (or height) <br>
            "EIGHTH": Makes the dialog width (or height) equal to 1/8 of the screen width (or height) <br>
            <b>NOTE:</b> the above <a href="gGetAttribute.htm#SIZE">SIZE</a> values are for gDialog <i>only</i>, 
            they will <b>not</b> work with other controls such as <a href="gButton.htm">gButton</a>, 
            <a href="gBox.htm">gBox</a>, or <a href="gFrame.htm">gFrame</a>.<br>
            The dialog Natural size is only considered when the User size is not defined or when it is bigger than the Current size.
<!--
             <br>
            This behavior is different from a control that goes inside the dialog. <br>
//?         Because of that, when <a href="gGetAttribute.htm#SIZE">SIZE</a> or <a href="gSetAttribute.htm#RASTERSIZE">RASTERSIZE</a> are set 
            (changing the User size), the Current size is internally reset to 0x0, 
            so the the Natural size can be considered when re-computing the Current size of the dialog.
-->
            <br>
            <br>
            The setting of the <a href="gGetAttribute.htm#SIZE">SIZE</a> 
<!--            or <a href="gSetAttribute.htm#RASTERSIZE">RASTERSIZE</a> -->
            attribute of a dialog is always accepted, regardless of the minimum size required by its children. <br>
??          For a dialog to have the minimum necessary size to fit all elements contained in it, simply define 
            <a href="gGetAttribute.htm#SIZE">SIZE</a> 
<!--            or <a href="gSetAttribute.htm#RASTERSIZE">RASTERSIZE</a>-->
             to NULL. <br>
?           Also if you set <a href="gGetAttribute.htm#SIZE">SIZE</a> 
            <!--or <a href="gSetAttribute.htm#RASTERSIZE">RASTERSIZE</a> -->
            to be used as the initial size of the dialog, its contents will be limited to this size as the minimum size, <br>
            if you do not want that, then after showing the dialog reset this size to NULL so the dialog can be resized to smaller values.
<!--            But notice that its contents will still be limited by the Natural size, to also remove that limitation set SHRINK=YES. <br>-->
<!--            To only change the User size in pixels, without resetting the Current size, set the USERSIZE attribute.-->
            <br>
            <br>
<!--            Notice that the dialog size includes its decoration (it is the Window size), the area available for 
//          controls are returned by the dialog <a href="gGetAttribute.htm#CLIENTSIZE">CLIENTSIZE</a>. <br>-->
            For more information see <a href="xplayout.htm">Layout Management</a>.<br>
          <a name=TITLE></a>
         </td>
        </tr>
        <tr>
         <td>
          <a href="gSetAttribute.htm#TITLE">TITLE</a>
         </td>
         <td>
            Dialog&rsquo;s title. Default: NULL. If you want to remove the title bar you must also set MENUBOX=NO, MAXBOX=NO and MINBOX=NO, before map. <br>
<!--            But in Motif and GTK it will hide it only if RESIZE=NO also.-->
          <a name=VISIBLE></a>
         </td>
        </tr>
        <tr>
         <td>
?         <a href="gSetAttribute.htm#VISIBLE">VISIBLE</a>
         </td>
         <td>
            (read only) Returns <a href="logicops.htm#tf">true</a> or <a href="logicops.htm#tf">false</a>.<br>
            Calling <a href="gShow.htm">gShow</a> or <a href="gHide.htm">gHide</a> for the dialog fairly obviously implicitly updates this attribute.
         </td>
        </tr>
<!--
//        <a name=BACKGROUND></a>
//      <tr>
//       <td>
//        BACKGROUND
//       </td>
//       <td>
//          Dialog background color or image. <br>
//          Can be a non inheritable alternative to <a href="gSetAttribute.htm#BGCOLOR">BGCOLOR</a> or can be the name of an image to be tiled on the background. <br>
//          Run demo\pGUI\sample.exw and use the menu to toggle the dialog BACKGROUND, the dialog BGCOLOR and the children BGCOLOR. 
//       </td>
//      </tr>
        <tr>
         <td>
          BORDER
         </td>
         <td>
            (creation only) Shows a resize border around the dialog. Default: "YES". <br>
            BORDER=NO is useful only when RESIZE=NO, MAXBOX=NO, MINBOX=NO, MENUBOX=NO and TITLE=NULL, if any of these are defined there will be always some border.
         </td>
        </tr>
        <tr>
         <td>
          BORDERSIZE
         </td>
         <td>
            (non inheritable) (read only): returns the border size.
         </td>
        </tr>
//      <tr>
//       <td>
//        CHILDOFFSET
//       </td>
//       <td>
//          Allow to specify a position offset for the child. Available for native containers only. <br>
//          It will not affect the natural size, and allows to position controls outside the client area. <br>
//          Format "dxxdy", where dx and dy are integer values corresponding to the horizontal and vertical offsets, respectively, in pixels. Default: "0x0".<br>
//          Ignored by pGUI.js
//       </td>
//      </tr>
-->
<!--
        <tr>
         <td>
          <a href="gSetAttribute.htm#CURSOR">CURSOR</a>
         </td>
         <td>
            Defines a cursor for the dialog.
         </td>
        </tr>
        <tr>
         <td>
          DROPFILESTARGET
         </td>
         <td>
            [Windows and GTK Only] Enable or disable the drop of files. Default: NO, but if DROPFILES_CB is defined when the element is mapped then it will be automatically enabled.
         </td>
        </tr>
        <tr>
         <td>
          <a href="gSetAttribute.htm#EXPAND">EXPAND</a>
         </td>
         <td>
            The default value is "YES".
         </td>
        </tr>
        <tr>
         <td>
          NACTIVE
         </td>
         <td>
            same as <a href="gSetAttribute.htm#ACTIVE">ACTIVE</a> but does not affects the controls inside the dialog.
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          SIMULATEMODAL
         </td>
         <td>
            (write-only): disable all other visible dialogs, just like when the dialog is made modal.
         </td>
        </tr>
-->
        <tr>
         <td>
          Also accepted:
         </td>
         <td>
            <a href="gSetAttribute.htm#ACTIVE">ACTIVE</a>, 
<!--            <a href="gSetAttribute.htm#BGCOLOR">BGCOLOR</a>,  -->
            <a href="gSetAttribute.htm#FONT">FONT</a>, 
<!--        <a href="gSetAttribute.htm#NAME">NAME</a>, -->
<!--??      <a href="gSetAttribute.htm#EXPAND">EXPAND</a>, -->
            <a href="gSetAttribute.htm#MAXSIZE">MAXSIZE</a>,
            <a href="gSetAttribute.htm#MINSIZE">MINSIZE</a>,
<!--            <a href="gGetAttribute.htm#SCREENPOSITION">SCREENPOSITION</a>,-->
<!--        <a href="gSetAttribute.htm#WID">WID</a>, -->
            <a href="gSetAttribute.htm#TIP">TIP</a>, 
<!--            <a href="gGetAttribute.htm#CLIENTSIZE">CLIENTSIZE</a>.<br>-->
<!--            <a href="gSetAttribute.htm#RASTERSIZE">RASTERSIZE</a>.<br>-->
<!--            <a href="gSetAttribute.htm#ZORDER">ZORDER</a>. <br>-->
            Note that <a href="gSetAttribute.htm#ACTIVE">ACTIVE</a>
<!--            , <a href="gSetAttribute.htm#BGCOLOR">BGCOLOR</a>, -->
            and <a href="gSetAttribute.htm#FONT">FONT</a> also affect all the controls inside the dialog. 
            <br>
?           Drag & Drop attributes and handlers are supported. 
         </td>
        </tr>
<!--
        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
            Exclusive
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          CUSTOMFRAMESIMULATE
         </td>
         <td>
            Allows the application to customize the dialog frame elements (the title and its buttons) by using IUP controls for its elements like 
            caption, minimize button, maximize button, and close buttons. <br>
            The custom frame support is entirely simulated by IUP, no native support for custom frame is used (this seems to have less drawbacks 
            on the application behavior). <br>
            The application is responsible for leaving space for the borders. <br>
            One drawback is that menu bars will not work. <br>
            For the dialog to be able to be moved an IupLabel, or a IupFlatLabel or an IupCanvas must be at the top of the dialog and must have 
            the NAME attribute set to CUSTOMFRAMECAPTION. <br>
            See the Custom Frame notes above.
            <br>
            <br>
            By setting this attribute the following attributes will be set:
            <br>
            <br>
            <small><pre>
RESIZE=NO
MENUBOX=NO
MAXBOX=NO
MINBOX=NO
BORDER=NO
TITLE=NULL
MENU=NULL
TASKBARBUTTON=SHOW
            </pre></small>
            <br>
//          The CLICK and MOTION_CB handlers of the dialog will be set too, so the dialog can be resized. <br>
//          The CLICK and MOTION_CB handlers of the element with NAME=CUSTOMFRAMECAPTION  will also be changed 
            so the dialog can be moved and maximized with double click. <br>
            It is the application&rsquo;s responsibility to implement the minimize, maximize and close buttons.
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          DIALOGFRAME<a href="notpgui.htm"><span style="color:lime;"><sup>+</sup></span></a>
         </td>
         <td>
            Set the common decorations for modal dialogs. This means RESIZE=NO, MINBOX=NO and MAXBOX=NO. <br>
            In Windows, if the PARENTDIALOG is defined then the MENUBOX is also removed, but the Close button remains.
         </td>
        </tr>
        <tr>
         <td>
          ICON
         </td>
         <td>
            Dialog&rsquo;s icon. The Windows SDK recommends that cursors and icons should be implemented as resources rather than created at run time. 
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          HWND
         </td>
         <td>
            [Windows Only] (non inheritable, read-only) Returns the Windows Window handle. <br>
            Available in the Windows driver or in the GTK driver in Windows.
         </td>
        </tr>
-->
<!-- (now common)
//      <tr>
//       <td>
//?       <a href="gSetAttribute.htm#MAXSIZE">MAXSIZE</a>
//       </td>
//       <td>
//          Maximum size for the dialog in raster units (pixels). <br>
//          The windowing system will not be able to change the size beyond this limit. Default: 65535x65535.
//       </td>
//      </tr>
-->
<!--
//      <tr>
//       <td>
//?       MENU
//       </td>
//       <td>
//          Name of a menu. Associates a menu to the dialog as a menu bar. <br>
//          The previous menu, if any, is unmapped. <br>
//          Use <a href="IupSetHandle.htm">IupSetHandle</a> or <a href="IupSetAttributeHandle.htm">IupSetAttributeHandle</a> to associate a menu to a name. See also <a href="IupMenu.htm">IupMenu</a>.
//       </td>
//      </tr>
-->
<!-- (now common)
        <tr>
         <td>
?         <a href="gSetAttribute.htm#MINSIZE">MINSIZE</a>
         </td>
         <td>
            Minimum size for the dialog in raster units (pixels). <br>
            The windowing system will not be able to change the size beyond this limit. Default: 1x1. <br>
            Some systems define a very minimum size greater than this, for instance in Windows the horizontal minimum size includes the window decoration buttons.
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
?         MODAL
         </td>
         <td>
            (read-only) Returns the popup state. <br>
            <a href="logicops.htm#tf">True</a> means the dialog was shown using <a href="IupPopup.htm">IupPopup</a>. <br>
            <a href="logicops.htm#tf">False</a> means <a href="gShow.htm">gShow</a> was used or it is not visible.
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          NATIVEPARENT
         </td>
         <td>
            (creation only) Native handle of a dialog to be used as parent. Used only if PARENTDIALOG is not defined.
         </td>
        </tr>
        <tr>
         <td>
          PARENTDIALOG
         </td>
         <td>
            (creation only) Name of a dialog to be used as parent. 
            <br>
         </td>
        </tr>
-->
<!--
//NO: use minsize on the dialog
//      <tr>
//       <td>
//?       SHRINK<a href="notpgui.htm"><span style="color:lime;"><sup>+</sup></span></a>
//       </td>
//       <td>
//          Allows changing the elements&rsquo; distribution when the dialog is smaller than the minimum size. Default: NO.
//       </td>
//      </tr>
//      <tr>
//       <td>
//?       STARTFOCUS
//       </td>
//       <td>
//          Name of the element that must receive the focus right after the dialog is shown using <a href="IupShow.htm">IupShow</a>. <br>
//          If not defined then the first control than can receive the focus is selected (same effect of calling IupNextField for the dialog). <br>
//          Updated after SHOW_CB is called and only if the focus was not changed during the handler.
//       </td>
//      </tr>
        <tr>
         <td>
?         SHOWNOFOCUS
         </td>
         <td>
            do not set focus after show.
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          XWINDOW
         </td>
         <td>
            [UNIX Only] (non inheritable, read-only) Returns the X-Windows Window (Drawable). Available in the Motif driver or in the GTK driver in UNIX.
         </td>
        </tr>
-->
<!-- [DEV] just clearly not v1: (and why not js?)
        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
            Exclusive [Windows and GTK Only??]
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          ACTIVEWINDOW
         </td>
         <td>
            [Windows and GTK Only] (read-only) informs if the dialog is the active window (the window with focus). Can be Yes or No.
         </td>
        </tr>
        <tr>
         <td>
          CUSTOMFRAME
         </td>
         <td>
            [Windows and GTK Only] (non inheritable): allows the application to customize the dialog frame elements (the title and its buttons) by using 
            IUP controls for its elements like caption, minimize button, maximize button, and close buttons. <br>
            The custom frame support uses the native system support for custom frames. <br>
            The application is responsible for leaving space for the borders. <br>
            One drawback is that menu bars will not work. <br>
            For the dialog to be able to be moved an IupLabel or an IupCanvas must be at the top of the dialog and must have the NAME attribute set 
            to CUSTOMFRAMECAPTION. <br>
            Native custom frames are supported only in Windows and in GTK version 3.10, so for older GTK versions we have to simulate the support 
            using CUSTOMFRAMESIMULATE. See the Custom Frame notes above.
         </td>
        </tr>
-->
<!-- [DEV] just clearly not v1: (see above)
        <tr>
         <td>
?         OPACITY<a href="notpgui.htm"><span style="color:lime;"><sup>+</sup></span></a>
         </td>
         <td>
            [Windows and GTK Only] sets the dialog transparency alpha value. Valid values range from 0 (completely transparent) to 255 (opaque). <br>
            In Windows must be set before map so the native window would be properly initialized when mapped. (GTK 2.12)
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          OPACITYIMAGE
         </td>
         <td>
            [Windows and GTK Only] sets a transparent image as the dialog shape so it is possible to create a non rectangle window. <br>
            In Windows must be set before map so the native window would be properly initialized when mapped. <br>
            In GTK the shape works only as a bitmap mask, to view a color image must also use a label. (GTK 2.12)
         </td>
        </tr>
        <tr>
         <td>
          SHAPEIMAGE
         </td>
         <td>
            [Windows and GTK Only] sets a RGBA image as the dialog shape so it is possible to create a non rectangle window with children. <br>
            (GTK 2.12) Only the fully transparent pixels will be transparent. <br>
            The pixels colors will be ignored, only the alpha channel is used.
         </td>
        </tr>
        <tr>
         <td>
          TOPMOST
         </td>
         <td>
            [Windows and GTK Only]  puts the dialog always in front of all other dialogs in all applications. Default: NO.
         </td>
        </tr>
        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
            Exclusive Taskbar and Tray/Status Area [Windows and GTK Only]
         </td>
        </tr>
//      <tr>
//       <td>
//        HIDETASKBAR
//       </td>
//       <td>
//          [Windows and GTK Only] (write-only) Action attribute that when set to "YES", hides the dialog, 
//          but does not decrement the visible dialog count, does not call SHOW_CB and does not mark the dialog as hidden inside IUP. <br>
//          It is usually used to hide the dialog and keep the tray icon working without closing the main loop. <br>
//          It has the same effect as setting <a href="gGetGlobal?.htm#LOCKLOOP">LOCKLOOP</a>=Yes and normally hiding the dialog. <br>
//          IMPORTANT: when you hide using HIDETASKBAR, you must show using HIDETASKBAR also. Possible values: YES, NO. 
//       </td>
//      </tr>
        <tr>
         <td>
          TRAY
         </td>
         <td>
            [Windows and GTK Only] When set to "YES", displays an icon on the system tray. (GTK 2.10)
         </td>
        </tr>
//      <tr>
//       <td>
//        TRAYIMAGE
//       </td>
//       <td>
//          [Windows and GTK Only] Name of a IUP image to be used as the tray icon. <br>
//          The Windows SDK recommends that cursors and icons should be implemented as resources rather than created at run time. (GTK 2.10)
//       </td>
//      </tr>
//      <tr>
//       <td>
//        TRAYTIP
//       </td>
//       <td>
//          [Windows and GTK Only] Tray icon&rsquo;s tooltip text. (GTK 2.10)
//       </td>
//      </tr>
//      <tr>
//       <td>
//        TRAYTIPMARKUP
//       </td>
//       <td>
//          [GTK Only] allows the tip string to contains Pango markup commands. Can be "YES" or "NO". Default: "NO". <br>
//          Must be set before setting the TRAYTIP attribute. (GTK 2.16)
//       </td>
//      </tr>
//      <tr>
//       <td>
//        TRAYTIPBALLOON
//       </td>
//       <td>
//          [Windows Only] The tip window will have the appearance of a cartoon "balloon" with rounded corners and a stem pointing to the item. Default: NO. <br>
//          Must be set before setting the TRAYTIP attribute.
//       </td>
//      </tr>
//      <tr>
//       <td>
//        TRAYTIPBALLOONDELAY
//       </td>
//       <td>
//          [Windows Only] Time the tip will remain visible. Default is system dependent. <br>
//          The minimum and maximum values are 10000 and 30000 milliseconds. <br>
//          Must be set before setting the TRAYTIP attribute.
//       </td>
//      </tr>
//      <tr>
//       <td>
//        TRAYTIPBALLOONTITLE
//       </td>
//       <td>
//          [Windows Only] When using the balloon format, the tip can also has a title in a separate area. <br>
//          Must be set before setting the TRAYTIP attribute.
//       </td>
//      </tr>
//      <tr>
//       <td>
//        TRAYTIPBALLOONTITLEICON
//       </td>
//       <td>
//          [Windows Only] When using the balloon format, the tip can also has a pre-defined icon in the title area. <br>
//          Must be set before setting the TRAYTIP attribute.
//          <br>
//          <br>
//          Values can be:<br>
//          "0" - No icon (default)<br>
//          "1" - Info icon <br>
//          "2" - Warning icon<br>
//          "3" - Error Icon<br>
//       </td>
//      </tr>
        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
            Exclusive [GTK Only]
         </td>
        </tr>
//      <tr>
//       <td>
//        DIALOGHINT
//       </td>
//       <td>
//          [GTK Only] (creation-only) if enabled sets the window type hint to a dialog hint.
//       </td>
//      </tr>
        <tr>
         <td>
          HIDETITLEBAR
         </td>
         <td>
            [GTK Only] (non inheritable): hides the title bar with al its elements.
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
??          Exclusive [Windows Only]
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          BRINGFRONT
         </td>
         <td>
            [Windows Only] (write-only) makes the dialog the foreground window. Use "YES" to activate it. Useful for multithreaded applications.
         </td>
        </tr>
        <tr>
         <td>
          COMPOSITED
         </td>
         <td>
            [Windows Only] (creation only) controls if the window will have an automatic double buffer for all children. Default is "NO". <br>
            In Windows Vista it is NOT working as expected.
         </td>
        </tr>
        <tr>
         <td>
          CONTROL
         </td>
         <td>
            [Windows Only] (creation only) Embeds the dialog inside another window.
         </td>
        </tr>
//      <tr>
//       <td>
//        CUSTOMFRAMEDRAW
//       </td>
//       <td>
//          [Windows Only] (non inheritable): allows the application to customize the dialog frame elements (the title and its buttons) by drawing 
//          them with the CUSTOMFRAMEDRAW_CB handler. <br>
//          Can be Yes or No. <br>
//          The Window client area is expanded to include the whole window. <br>
//          Notice that the dialog attributes like BORDER, RESIZE, MAXBOX, MINBOX and TITLE must still be defined. <br>
//          But maximize, minimize and close buttons must be manually implemented in the CLICK handler. <br>
//          One drawback is that menu bars will not work.
//       </td>
//      </tr>
        <tr>
         <td>
          CUSTOMFRAMECAPTIONHEIGHT
         </td>
         <td>
            [Windows Only] (non inheritable): height of the caption area. If not defined it will use the system size.
         </td>
        </tr>
//      <tr>
//       <td>
//        CUSTOMFRAMECAPTIONLIMITS
//       </td>
//       <td>
//          [Windows Only] (non inheritable): limits of the caption area at left and at right. <br>
//          The caption area is always expanded inside the limits when the dialog is resized. <br>
//          Format is "left:right" or in C "%d:%d". Default: "0:0". <br>
//          This will allow the dialog to be moved by the system when the user click and drag the caption area. <br>
//          If not defined but CUSTOMFRAMECAPTION is defined, then it will use the caption element horizontal position and size for the limits.
//       </td>
//      </tr>
//      <tr>
//       <td>
//        HELPBUTTON
//       </td>
//       <td>
//          [Windows Only] (creation only) Inserts a help button in the same place of the maximize button. <br>
//          It can only be used for dialogs without the minimize and maximize buttons, and with the menu box. <br>
//          For the next interaction of the user with a control in the dialog, the handler <a href="gSetHandler.htm#HELP_CB">HELP_CB</a> will be called instead of 
//          the control defined ACTION handler. Possible values: YES, NO. Default: NO.
//       </td>
//      </tr>
//      <tr>
//       <td>
//        MAXIMIZEATPARENT
//       </td>
//       <td>
//          [Windows Only]: when using multiple monitors, maximize the dialog in the same monitor that the parent dialog is.
//       </td>
//      </tr>
-->
<!--
//      <tr>
//       <td>
//        TASKBARPROGRESS
//       </td>
//       <td>
//          [Windows Only] (write-only) this functionality enables the use of progress bar on a taskbar button <br>
//          (Windows 7 or earlier version) (Available only for Visual C++ 10 and above). Default: NO.
//       </td>
//      </tr>
//      <tr>
//       <td>
//        TASKBARPROGRESSSTATE
//       </td>
//       <td>
//          [Windows Only] (write-only) sets the type and state of the progress indicator displayed on a taskbar button. <br>
//          Possible values: NORMAL (a green bar), PAUSED (a yellow bar), ERROR (a red bar), INDETERMINATE (a green marquee) and NOPROGRESS (no bar). Default: NORMAL.
//       </td>
//      </tr>
//      <tr>
//       <td>
//        TASKBARPROGRESSVALUE
//       </td>
//       <td>
//          [Windows Only] (write-only) updates a progress bar hosted in a taskbar button to show the specific percentage completed of the full operation. <br>
//          The value must be between 0 and 100.
//       </td>
//      </tr>
//      <tr>
//       <td>
//        TASKBARBUTTON
//       </td>
//       <td>
//          [Windows Only]: If set to SHOW force the application button to be shown on the taskbar even if the dialog does not have decorations. <br>
//          If set to HIDE force the application button to be hidden from the taskbar, but also in this case the system menu, the maximize and minimize buttons 
//          will be hidden.
//       </td>
//      </tr>
        <tr>
         <td>
          TOOLBOX
         </td>
         <td>
            [Windows Only] (creation only) makes the dialog look like a toolbox with a smaller title bar. <br>
            It is only valid if the PARENTDIALOG or NATIVEPARENT attribute is also defined. Default: NO.
         </td>
        </tr>
//      <tr>
//       <td>
//        <b>Attributes:</b>
//       </td>
//       <td>
//          Exclusive MDI [Windows Only]<br>
//          --- For the MDI Frame ---<br>
//       </td>
//      </tr>
//      <tr>
//       <td>
//        MDIFRAME
//       </td>
//       <td>
//          [Windows Only] (creation only, non inheritable) Configure this dialog as a MDI frame. Can be YES or NO. Default: NO.
//       </td>
//      </tr>
//      <tr>
//       <td>
//        MDIACTIVE
//       </td>
//       <td>
//          [Windows Only] (read-only) Returns the name of the current active MDI child. <br>
//          Use <a href="IupGetAttributeHandle.htm">IupGetAttributeHandle</a> to directly retrieve the child handle.
//       </td>
//      </tr>
//      <tr>
//       <td>
//        MDIACTIVATE
//       </td>
//       <td>
//          [Windows Only] (write-only) Name of a MDI child window to be activated. <br>
//          If value is "NEXT" will activate the next window after the current active window. <br>
//          If value is "PREVIOUS" will activate the previous one. 
//       </td>
//      </tr>
//      <tr>
//       <td>
//        MDIARRANGE
//       </td>
//       <td>
//          [Windows Only] (write-only) Action to arrange MDI child windows. <br>
//          Possible values: TILEHORIZONTAL, TILEVERTICAL, CASCADE and ICON (arrange the minimized icons).
//       </td>
//      </tr>
//      <tr>
//       <td>
//        MDICLOSEALL
//       </td>
//       <td>
//          [Windows Only] (write-only) Action to close and destroy all MDI child windows. <br>
//          The <a href="gSetHandler.htm#CLOSE_CB">CLOSE_CB</a> handler will be called for each child. 
//          <br>
//          <br>
//          IMPORTANT: When a MDI child window is closed it is automatically destroyed. <br>
//          The application can override this by returning <a href="gSetHandler.htm#XPG_IGNORE">XPG_IGNORE</a> in <a href="gSetHandler.htm#CLOSE_CB">CLOSE_CB</a>.
//       </td>
//      </tr>
//      <tr>
//       <td>
//        MDINEXT
//       </td>
//       <td>
//          [Windows Only] (read-only) Returns the name of the next available MDI child. <br>
//          Use <a href="IupGetAttributeHandle.htm">IupGetAttributeHandle</a> to directly retrieve the child handle. <br>
//          Must use MDIACTIVE to retrieve the first child. <br>
//          If the application is going to destroy the child retrieve the next child before destroying the current.
//       </td>
//      </tr>
//      <tr>
//       <td>
//        
//       </td>
//       <td>
//          --- For the MDI Client  (an <a href="IupCanvas.htm">IupCanvas</a>) ---
//       </td>
//      </tr>
//      <tr>
//       <td>
//        MDICLIENT
//       </td>
//       <td>
//          [Windows Only] (creation only, non inheritable) Configure the canvas as a MDI client. Can be YES or NO. <br>
//          No handlers will be called. This canvas will be used internally only by the MDI Frame and its MDI Children. <br>
//          The MDI frame must have one and only one MDI client. Default: NO.
//       </td>
//      </tr>
//      <tr>
//       <td>
//        MDIMENU
//       </td>
//       <td>
//          [Windows Only] (creation only) Name of an <a href="IupMenu.htm">IupMenu</a> to be used as the Window list of a MDI frame. <br>
//          The system will automatically add the list of MDI child windows there.
//       </td>
//      </tr>
//      <tr>
//       <td>
//        
//       </td>
//       <td>
//          --- For the MDI Children ---
//       </td>
//      </tr>
//      <tr>
//       <td>
//        MDICHILD
//       </td>
//       <td>
//          (creation only) [Windows Only] Configure this dialog to be a MDI child. Can be YES or NO. <br>
//          The PARENTDIALOG attribute must also be defined. <br>
//          Each MDI child is automatically named if it does not have one. Default: NO.
//       </td>
//      </tr>
-->
        <tr>
         <td>
          <b>Handlers:</b>
         </td>
         <td>
            
         </td>
        </tr>
        <tr>
         <td>
<!--DEV-->
?         <a href="gSetHandler.htm#CLOSE_CB">CLOSE_CB</a>
         </td>
         <td>
            Called right before the dialog is closed.<br>
            <b>NB</b>: Will <i>not</i> be invoked when a handler returns <a href="gSetHandler.htm#XPG_CLOSE">XPG_CLOSE</a>, <!--or when
            <a href="IupExitLoop.htm">IupExitLoop</a>() is invoked,--> instead the programmer should invoke any necessary routines explicitly. 
            <!--as per the example below. [DEV?]-->
         </td>
        </tr>
        <tr>
         <td>
?         COPYDATA_CB
         </td>
         <td>
[DEV use ipc instead...]
            [Windows Only] Called at the first instance, when a second instance is running. <br>
            Must set the global attribute 
            <a href="gGetGlobal.htm#SINGLEINSTANCE">SINGLEINSTANCE</a>
            to be called.
            <br>
            <br>
            function copydata_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="atom.htm">atom</a> pCmdLine, <a href="integer.htm">integer</a> size)<br>
            ih: identifier of the element that activated the event.<br>
            pCmdLine: command line (char*) of the second instance. <br>
            size: size of the command line string including the null character. 
            <br>
         </td>
        </tr>
        <tr>
         <td>
?         DROPFILES_CB
         </td>
         <td>
            [Windows and GTK Only] Event generated when one or more files are dropped in the dialog.
         </td>
        </tr>
<!--
//      <tr>
//       <td>
//        CUSTOMFRAME_CB
//       </td>
//       <td>
//          [Windows Only]: Called when the dialog must be redraw. <br>
//          Although it is designed for drawing the frame elements, all the dialog must be painted. <br>
//          Works only when CUSTOMFRAME or CUSTOMFRAMEEX is defined. <br>
//          The dialog can be used just like an IupCanvas to draw its elements, the HDC_WMPAINT and CLIPRECT attributes are defined during the handler. <br>
//          For mouse handlers use the same handlers as IupCanvas, such as CLICK and MOTION_CB.
//          <br>
//          <br>
//          function customframe_cb(Ihandle ih)<br>
//          ih: identifier of the element that activated the event.
//       </td>
//      </tr>
        <tr>
         <td>
          CUSTOMFRAMEACTIVATE_CB
         </td>
         <td>
            [Windows Only]: Called when the dialog active state is changed (for instance the user Alt+Tab to another application, or clicked in another window). <br>
            Works only when CUSTOMFRAME or CUSTOMFRAMEEX is defined.
            <br>
            <br>
            function customframeactivate_cb(Ihandle ih, integer active)<br>
            ih: identifier of the element that activated the event.<br>
            active: is non zero if the dialog is active or zero if it is inactive.
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
?         FOCUS_CB
         </td>
         <td>
            Called when the dialog or any of its children gets the focus, or when another dialog or any control in another dialog gets the focus. 
            It is called after the common handlers GETFOCUS_CB and KILL_FOCUS_CB.

int function(Ihandle *ih, int focus); [in C]
ih:focus_cb(focus: number) -> (ret: number) [in Lua]
ih: identifier of the element that activated the event.
focus: is non zero if the dialog or any of its children is getting the focus, is zero if it is loosing the focus.
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          MDIACTIVATE_CB
         </td>
         <td>
            [Windows Only] Called when a MDI child window is activated. <br>
            Only the MDI child receive this message. <br>
            It is not called when the child is shown for the first time.
            <br>
            <br>
            function mdiactivate_cb(<a href="Ihandle.htm">Ihandle</a> ih)<br>
            ih: identifier of the element that activated the event.
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
?         MOVE_CB
         </td>
         <td>
            [Windows and GTK Only] Called after the dialog was moved on screen. <br>
//          The coordinates are the same as the <a href="gGetAttribute.htm#SCREENPOSITION">SCREENPOSITION</a> attribute.
            <br>
            <br>
            function move_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> x, y)<br>
            ih: identifier of the element that activated the event.<br>
            x, y: coordinates of the new position. 
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
?         <a href="gSetHandler.htm#RESIZE_CB">RESIZE_CB</a>
         </td>
         <td>
            Event generated when the dialog size is changed. <br>
            If <a href="gSetHandler.htm#XPG_IGNORE">XPG_IGNORE</a> is returned the dialog layout is NOT recalculated.
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
?         SHOW_CB
         </td>
         <td>
            Called right after the dialog is showed, hidden, maximized, minimized or restored from minimized/maximized.
         </td>
        </tr>
-->
<!--
//      <tr>
//       <td>
//        TRAYCLICK_CB
//       </td>
//       <td>
//          [Windows and GTK Only] Called right after the mouse button is pressed or released over the tray icon. (GTK 2.10)
//          <br>
//          <br>
//          function trayclick_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> button, pressed, dclick)<br>
//          ih: identifier of the element that activated the event.<br>
//          button: identifies the activated mouse button. Can be: 1, 2 or 3 (left, middle or right). <br>
//          Note that this is different from the <a href="gSetHandler.htm#CLICK">CLICK</a> canvas handler definition. GTK does not get button=2 messages.
//          pressed: indicates the state of the button. Always 1 in GTK.<br>
//          dclick: indicates a double click. In GTK double click is simulated.
//          <br>
//          <br>
//          Returns: <a href="gSetHandler.htm#XPG_CLOSE">XPG_CLOSE</a> will be processed. Note that in that case any CLOSE_CB is <i>not</i> invoked.
//       </td>
//      </tr>
-->
        <tr>
         <td>
          also
         </td>
         <td>
<!--
//          <a href="gSetHandler.htm#MAP_CB">MAP_CB</a>,
//          <a href="gSetHandler.htm#UNMAP_CB">UNMAP_CB</a>,
//          <a href="gSetHandler.htm#DESTROY_CB">DESTROY_CB</a>, 
-->
<!--
            <a href="gSetHandler.htm#GETFOCUS_CB">GETFOCUS_CB</a>, 
            <a href="gSetHandler.htm#KILLFOCUS_CB">KILLFOCUS_CB</a>, 
            <a href="gSetHandler.htm#ENTERWINDOW_CB">ENTERWINDOW_CB</a>,
            <a href="gSetHandler.htm#LEAVEWINDOW_CB">LEAVEWINDOW_CB</a>, 
-->
            <a href="gSetHandler.htm#KEY">KEY</a>: All common handlers are supported.
<!--            <a href="gSetHandler.htm#HELP_CB">HELP_CB</a> -->
            <br>
?           Drag & Drop attributes and handlers are supported. <br>
          <a name=tech></a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            As this is a <a href="g_paranormal.htm">paranormalised function</a>, with a non-optional child, and with no expectation that 
            you should attempt to memorise this lot, except maybe "cptaab", you can assume that all of the following are potentially 
            perfectly valid, bar the commented out one in the middle, with the fairly obvious restrictions that any parameters <i>must</i>
            be in strict cptaab-order, and no args without attributes:
            <br>
            <br>
<small>
<!--eucode>
                        gDialog(child)
                        gDialog(child, attributes)        -- (NB attributes must contain >=1 '=')
                        gDialog(child, attributes, args)
                        gDialog(child, attributes, args, bEsc)
                        gDialog(child, attributes, bEsc)
                        gDialog(child, title)                       -- (NB no '=' in [any] title)
                        gDialog(child, title, attributes)
                        gDialog(child, title, attributes, args)
                        gDialog(child, title, attributes, args, bEsc)
                        gDialog(child, title, attributes, bEsc)
                        gDialog(child, title, bEsc)
--                      gDialog(child, bEsc)                -- (NB invalid/mistreated, see below)
                        gDialog(child, parent)
                        gDialog(child, parent, bEsc)
                        gDialog(child, parent, attributes)
                        gDialog(child, parent, attributes, bEsc)
                        gDialog(child, parent, attributes, args)
                        gDialog(child, parent, attributes, args, bEsc)
                        gDialog(child, parent, title)
                        gDialog(child, parent, title, bEsc)
                        gDialog(child, parent, title, attributes)
                        gDialog(child, parent, title, attributes, bEsc)
                        gDialog(child, parent, title, attributes, args)
                        gDialog(child, parent, title, attributes, args, bEsc)   -- (the full set)
</eucode-->
<pre>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">)       </font><font color="#000080"><i> -- (NB attributes must contain &gt;=1 &rsquo;=&rsquo;)</i></font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">,</font><font color="#000000"> bEsc</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> bEsc</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> title</font><font color="#0000FF">)                      </font><font color="#000080"><i> -- (NB no &rsquo;=&rsquo; in [any] title)</i></font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> title</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> title</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> title</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">,</font><font color="#000000"> bEsc</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> title</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> bEsc</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> title</font><font color="#0000FF">,</font><font color="#000000"> bEsc</font><font color="#0000FF">)</font>
<font color="#000080"><i>--                      gDialog(child, bEsc)                -- (NB invalid/mistreated, see below)</i></font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> parent</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> parent</font><font color="#0000FF">,</font><font color="#000000"> bEsc</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> parent</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> parent</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> bEsc</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> parent</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> parent</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">,</font><font color="#000000"> bEsc</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> parent</font><font color="#0000FF">,</font><font color="#000000"> title</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> parent</font><font color="#0000FF">,</font><font color="#000000"> title</font><font color="#0000FF">,</font><font color="#000000"> bEsc</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> parent</font><font color="#0000FF">,</font><font color="#000000"> title</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> parent</font><font color="#0000FF">,</font><font color="#000000"> title</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> bEsc</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> parent</font><font color="#0000FF">,</font><font color="#000000"> title</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gDialog</font><font color="#0000FF">(</font><font color="#000000">child</font><font color="#0000FF">,</font><font color="#000000"> parent</font><font color="#0000FF">,</font><font color="#000000"> title</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">,</font><font color="#000000"> bEsc</font><font color="#0000FF">)  </font><font color="#000080"><i> -- (the full set)</i></font>
</pre>
</small>
            <br>
            In practice parent, title, attributes, and args are actually defined as <a href="object.htm">object</a>, 
            but manually and thoroughly verified to be of the documented types, after being repositioned via
            xpGUI.e/paranormalise_ptaab(), which isn&rsquo;t actually passed the non-optional child parameter.
            <br>
            <br>
            Attempting gDialog(child,bEsc) would be mis-treated as gDialog(child,parent), since <a href="logicops.htm#tf">false</a> is 
            the same as NULL aka no parent, and <a href="logicops.htm#tf">true</a> is the same as 1 which <i>could</i> be the valid id 
            of a parent dialog, whereas any of (say) <br>
            &nbsp;&nbsp;&nbsp;gDialog(child,NULL,bEsc), <br>
            &nbsp;&nbsp;&nbsp;gDialog(child,"",bEsc), <br>
            &nbsp;&nbsp;&nbsp;gDialog(child,bEsc:=bEsc), <br>
            &nbsp;&nbsp;&nbsp;gDialog(child,"CLOSE_ON_ESCAPE=%t",{bEsc}), or even <br>
            &nbsp;&nbsp;&nbsp;gDialog(child) with a later <a href="gSetAttribute.htm">gSetAttribute</a>(dlg,"CLOSE_ON_ESCAPE",bEsc) <br>
            should all be fine.
            <br>
            <br>
            Typically only the main dialog on a non-trivial program needs bEsc setting, and it is pretty rare you would <i>not</i> 
            want to specify a title or other attributes, so that one problematic case (child,bEsc) almost never occurs anyway.
            It should perhaps go without saying, but even in an application such as an editor which would be pretty much unusable if 
            escape closed the <i>main</i> window, there are almost always many more sub-windows where that <i>is</i> the desired 
            behaviour, and it is clearly trivial to override to false when needed, which is why the default for bEsc is true.
            <br>
<!--
//          Of course you are not meant to memorise that list, instead just quickly check no shortcut you might hope for is missing.
//          <br>
//          <br>
//          This is a <a href="g_paranormal.htm">paranormalised function</a>, but note that gDialog(child,bEsc) is invalid/mistreated, 
//          see the technicalia dropdown for more details.
//          <br>
-->
            <br>
            Unlike pGUI there is <i>no</i> PARENTDIALOG attribute in xpGUI, either global or dialog-specific, so should one be needed it
            <i>must</i> be specified up-front. It may be necessary to restructure some (legacy) pGUI programs such that the main dialog 
            is created before any child windows, possibly by putting the creation of child dialogs into a subroutine (or two) that are 
            only invoked at or after the point where the old code was trying to set PARENTDIALOG. 
            Likewise there is [as yet] no suppport for reparenting, or any way to insert or append controls, besides it is far easier to 
            show/hide elements, or maybe do that with two otherwise identical dialogs, or perhaps even destroy (not yet implemented) and 
            re-create a dialog.
<!--
            <br>
            <br>
            In a similar fashion to <a href="g_paranormal.htm">paranormalised functions</a>, only slightly simpler, attributes and
            args are actually defined as <a href="object.htm">object</a>, so that gDialog(<i>child</i>,<i>parent</i>,false) 
            behaves the same as gDialog(<i>child</i>,<i>parent</i>,bEsc:=false), and likewise if the string attributes is present 
            but args is omitted, gDialog(<i>child</i>,<i>parent</i>,"<i>attributes</i>",false) behaves the same as 
            gDialog(<i>child</i>,<i>parent</i>,"<i>attributes</i>",bEsc:=false).<br>
            NB: gDialog(child,true/false) for bEsc-only is specifically not supported, however gDialog(child,NULL,true/false) is.
-->
<!--
            <br>
            <br>
            Note that bEsc was added in version 0.8.3, prior to that it would behave as false, which meant that in nine out of
            ten cases a separate <a href="IupClose.htm">IupCloseOnEscape</a>(ih) was required. In some cases a 
            <a href="gSetHander.htm#KEY">KEY</a> handler may shield you from any changes, in other (typically only top-level 
            window) cases you may need to add a false parameter, or perhaps separately/conditionally invoke 
            <a href="IupClose.htm">IupCloseOnEscape</a>(ih,false).
-->
            <br>
            <br>
            While you can set the dialog title via `TITLE="xxxxxx"` in the attributes parameter, it can also be specified separately, 
            for four simple reasons: it is almost always wanted, you can avoid the "TITLE=" bit, thirdly you can avoid the need for 
            nested quotation marks, especially when there are any spaces involved, and fourthly in quite a few of my demos, at least,
            the title is a separate constant anyway. Note however that a title specified separately cannot contain an '=' character, 
            since that is used to distinguish it from an attributes string, and the internal paranormalise_ptaab() routine strictly 
            validates that, and further there is no <a href="sprintf.htm">sprintf</a>() shorthand on the title parameter, whereas 
            there is one on the attributes parameter (ie the args parameter). See also <a href="g_paranormal.htm#eqch">this note</a>.
            <br> 
            <br> 
            You could also set the title much later, in a separate <a href="gSetAttribute.htm">gSetAttribute[s]</a>() call. 
            It is not actually an error to never set it, just fairly unlikely to be what you genuinely want, unless you are hiding 
            the whole title bar, if/when that becomes possible, and even then a hidden name could still prove quite useful for
            debugging purposes.
            <br>
            <br>
?           pGUI/IUP had/has a boolean "SHRINK" setting (default: NO) on an <a href="IupDialog.htm">IupDialog</a> that allowed a dialog 
            to be (manually) resized smaller than the natural size, cropping contents. It has not been copied, but may one day be.
         </td>
        </tr>
       </table>
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
