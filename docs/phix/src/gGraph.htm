<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">gGraph</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include xpGUI.e
           <br>
           <br>
            <a href="gdx.htm">gdx</a> id = gGraph(<a href="rtn.htm">rtn</a> drid, 
                                                  <a href="string.htm">string</a> attributes="", 
                                                  <a href="html/glossary.htm#dwordseq">dword_seq</a> args={}) 
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Creates a resizeable graph with one or more datasets.
            <br>
            <br>
            drid: a function identifier that provides the dataset[s], see example and <a href="#DRID">DRID</a> explanation below.<br>
            For more information on the attributes and args parameters see <a href="gSetAttributes.htm">gSetAttributes</a>(), and below.
            <br>
            <br>
            Returns: the identifier of the created element.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
            Supported.
<!--
             In fact this control was expressly written (on desktop/Phix) to be automatically transpiled for p2js.
            ,
            and all attributes below have therefore been marked with 
            <a href="notpgui.htm"><sup><span style="color:lime;">+</span></sup></a> to indicate they are fully supported.
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="gCanvas.htm">gCanvas</a>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
            <p align="center"><img alt="gGraph" src="images/gGraph.png" width="240" height="140"/></p>
            <center><small><i>(more screenshots <a href="#morescreenshots">below</a>)</i></small></center>
        <small>
<!--eucode>
-- demo\xpGUI\gGraph.exw
-- (apart from the dialog title, the same as 
--  demo\rosetta\Plot_coordinate_pairs.exw)
include xpGUI.e

constant x = {  0,  1,   2,   3,   4,   5,    6,    7,    8,    9},
         y = {2.7,2.8,31.4,38.1,58.0,76.2,100.5,130.0,149.3,180.0}

function get_data(gdx graph)
    integer {w,h} = gGetAttribute(graph,"SIZE")
    gSetInt(graph,"YTICK",iff(h<160?iff(h<110?iff(h<90?180:90):60):20))
    return {{x,y,XPG_BLUE}}
end function

gdx graph = gGraph(get_data,"XTICK=1,XMIN=0,XMAX=9,YMIN=0,YMAX=180"),
    dlg = gDialog(graph,`gGraph`,"SIZE=240x140")
gShow(dlg)
gMainLoop()
</eucode-->
<pre>
<font color="#000080"><i>-- demo\xpGUI\gGraph.exw
-- (apart from the dialog title, the same as 
--  demo\rosetta\Plot_coordinate_pairs.exw)</i></font>
<font color="#008080">include</font><font color="#000000"> xpGUI.e
</font>
<font color="#008080">constant</font><font color="#000000"> x</font><font color="#0000FF"> = { </font><font color="#000000"> 0</font><font color="#0000FF">, </font><font color="#000000"> 1</font><font color="#0000FF">,  </font><font color="#000000"> 2</font><font color="#0000FF">,  </font><font color="#000000"> 3</font><font color="#0000FF">,  </font><font color="#000000"> 4</font><font color="#0000FF">,  </font><font color="#000000"> 5</font><font color="#0000FF">,   </font><font color="#000000"> 6</font><font color="#0000FF">,   </font><font color="#000000"> 7</font><font color="#0000FF">,   </font><font color="#000000"> 8</font><font color="#0000FF">,   </font><font color="#000000"> 9</font><font color="#0000FF">},</font>
<font color="#000000">         y</font><font color="#0000FF"> = {</font><font color="#000000">2.7</font><font color="#0000FF">,</font><font color="#000000">2.8</font><font color="#0000FF">,</font><font color="#000000">31.4</font><font color="#0000FF">,</font><font color="#000000">38.1</font><font color="#0000FF">,</font><font color="#000000">58.0</font><font color="#0000FF">,</font><font color="#000000">76.2</font><font color="#0000FF">,</font><font color="#000000">100.5</font><font color="#0000FF">,</font><font color="#000000">130.0</font><font color="#0000FF">,</font><font color="#000000">149.3</font><font color="#0000FF">,</font><font color="#000000">180.0</font><font color="#0000FF">}
</font>
<font color="#008080">function</font><font color="#000000"> get_data</font><font color="#0000FF">(</font><font color="#7060A8">gdx</font><font color="#000000"> graph</font><font color="#0000FF">)</font>
<font color="#004080">    integer</font><font color="#0000FF"> {</font><font color="#000000">w</font><font color="#0000FF">,</font><font color="#000000">h</font><font color="#0000FF">} =</font><font color="#7060A8"> gGetAttribute</font><font color="#0000FF">(</font><font color="#000000">graph</font><font color="#0000FF">,</font><font color="#008000">"SIZE"</font><font color="#0000FF">)</font>
<font color="#7060A8">    gSetInt</font><font color="#0000FF">(</font><font color="#000000">graph</font><font color="#0000FF">,</font><font color="#008000">"YTICK"</font><font color="#0000FF">,</font><font color="#7060A8">iff</font><font color="#800000">(</font><font color="#000000">h</font><font color="#0000FF">&lt;</font><font color="#000000">160</font><font color="#0000FF">?</font><font color="#7060A8">iff</font><font color="#800080">(</font><font color="#000000">h</font><font color="#0000FF">&lt;</font><font color="#000000">110</font><font color="#0000FF">?</font><font color="#7060A8">iff</font><font color="#00FF00">(</font><font color="#000000">h</font><font color="#0000FF">&lt;</font><font color="#000000">90</font><font color="#0000FF">?</font><font color="#000000">180</font><font color="#0000FF">:</font><font color="#000000">90</font><font color="#00FF00">)</font><font color="#0000FF">:</font><font color="#000000">60</font><font color="#800080">)</font><font color="#0000FF">:</font><font color="#000000">20</font><font color="#800000">)</font><font color="#0000FF">)</font>
<font color="#008080">    return</font><font color="#0000FF"> {</font><font color="#800000">{</font><font color="#000000">x</font><font color="#0000FF">,</font><font color="#000000">y</font><font color="#0000FF">,</font><font color="#004600">XPG_BLUE</font><font color="#800000">}</font><font color="#0000FF">}</font>
<font color="#008080">end function
</font>
<font color="#7060A8">gdx</font><font color="#000000"> graph</font><font color="#0000FF"> =</font><font color="#7060A8"> gGraph</font><font color="#0000FF">(</font><font color="#000000">get_data</font><font color="#0000FF">,</font><font color="#008000">"XTICK=1,XMIN=0,XMAX=9,YMIN=0,YMAX=180"</font><font color="#0000FF">),</font>
<font color="#000000">    dlg</font><font color="#0000FF"> =</font><font color="#7060A8"> gDialog</font><font color="#0000FF">(</font><font color="#000000">graph</font><font color="#0000FF">,</font><font color="#008000">`gGraph`</font><font color="#0000FF">,</font><font color="#008000">"SIZE=240x140"</font><font color="#0000FF">)</font>
<font color="#7060A8">gShow</font><font color="#0000FF">(</font><font color="#000000">dlg</font><font color="#0000FF">)</font>
<font color="#7060A8">gMainLoop</font><font color="#0000FF">()</font>
</pre>
          <br>
          </small>
            As shown you can also set <a href="#XTICK">XTICK</a> etc inside <a href="#DRID">DRID</a>, which has been named get_data() here, 
            and is the main reason why it gets passed the graph identifier.
            <br>
            <br>
            gGraph() does not fare well at sizes below a certain threshold, beyond which ticks might overlap 
            or even go negative, hence as shown the use of an explicit minimum size setting is recommended.
            Obviously all that sort of handling and more remains open to future improvement.
            <br>
            <br>
            See also <br>
            demo\xpGUI\gGraph.exw<br>
            demo\xpGUI\gGraph1.exw<br>
            demo\xpGUI\gGraph2.exw<br>
            demo\xpGUI\gGraph4.exw<br>
            demo\xpGUI\GraphR.exw <small><i>(Actually just a gCanvas and not a gGraph)</i></small><br>
?           demo\pGUI\IupSampleDialog.exw<br>
            demo\rosetta\9billionnames.exw,<br>
            demo\rosetta\B-spline.exw,<br>
            demo\rosetta\Babylonian_spiral.exw,<br>
            demo\rosetta\Chi-squared_distribution.exw,<br>
            demo\rosetta\Compare_sorting_algorithms.exw,<br>
            demo\rosetta\Convex_hull.exw,<br>
            demo\rosetta\Curve_fit.exw,<br>
            demo\rosetta\Eisenstein_primes.exw,<br>
            demo\rosetta\Euler_method.exw,<br>
            demo\rosetta\Goldbachs_comet.exw,<br>
            demo\rosetta\Perceptron.exw,<br>
            demo\rosetta\Plot_coordinate_pairs.exw,<br>
            demo\rosetta\Polynomial_regression.exw<br>
<!--DEV-->
            demo\rosetta\Modified_random_distribution.exw, needs updating, and IupGraph [***]<br>
            demo\rosetta\Yellowstone_sequence.exw<br>
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
<!--
            A gGraph is a Phix/pGUI invention, expressly written for <a href="p2js.htm"><span class="pwap2js">pwa/p2js</span></a>,
            but of course it can be freely used for strictly desktop-only purposes.
            It is a simplified alternative to <a href="IupPlot.htm">IupPlot</a>(), but 
-->
            Written in pure Phix hll code and suitable for automatic transpilation to JavaScript (albeit with a manual copy and paste), 
            which should (also) make it much more amenable to user-supplied enhancements and improvements, although at the moment it is 
            pretty much the simplest possible implementation.
            <br>
            <br>
<!--
            The main differences between IupGraph and IupPlot are:<br>
            An IupGraph is <a href="p2js.htm"><span class="pwap2js">pwa/p2js</span></a>-compatible, whereas <a href="IupPlot.htm">IupPlot</a> is not.<br>
            An IupGraph only contains a single plot, optionally with multiple datasets occupying the same screen area.<br>
            Datasets are provided via a (single) function call, rather than auxillary functions, hence there is no explicit dataset management.<br>
            The presence or absence of a legend box depends on "LEGEND" being specified.<br> 
            Major tick/min/max values must be provided and are <i>not</i> automatically defaulted if absent.<br>
            Logarithmic scales are not directly supported, see demo\rosetta\9billionnames.exw for a manual solution.<br>
            There is no zoom/pan/crosshair/tip/selection or context menu.<br>
            It is drawn using OpenGL, and as per IupPlot this means a slightly lower text quality,
            but at least it supports <X!X--alpha[??] and--X> anti-aliasing.<br>
            <br>    
            <br>    
-->
            The <a href="gCanvas.htm#REDRAW">REDRAW</a> handler of the <a href="gCanvas.htm">gCanvas</a> on which gGraph is based is used/specified 
            internally and non-overridable, however your drid() is passed a blank canvas on which you can (eg) draw a background, and if it returns 
            {"POST",rtn} within the result (in a similar fashion as next) then rtn(graph) is called after the graph has been drawn, and at that point
            you can perhaps (eg) add some finishing touches and/or maybe (not quite sure how just yet) copy/save the image elsewhere.
            <br>
            <br>
[DEV] all bar the last element to be replaced with standard attribute handling...<br>
            The routine specified by drid should provide data as follows:
            <br>
            <br>
<!--DEV LEGEND...-->
<!--eucode>
    {{"BARMODE","HORIZONTAL"},   -- (optional)
     {"NAMES",name{,name..}},    -- (optional)
     {px,py[,XPG_BLUE[,style]]}} -- (multiple allowed)
</eucode-->
<pre>
<font color="#0000FF">    {</font><font color="#800000">{</font><font color="#008000">"BARMODE"</font><font color="#0000FF">,</font><font color="#008000">"HORIZONTAL"</font><font color="#800000">}</font><font color="#0000FF">,  </font><font color="#000080"><i> -- (optional)</i></font>
<font color="#800000">     {</font><font color="#008000">"NAMES"</font><font color="#0000FF">,</font><font color="#000000">name</font><font color="#800080">{</font><font color="#0000FF">,</font><font color="#000000">name</font><font color="#0000FF">..</font><font color="#800080">}</font><font color="#800000">}</font><font color="#0000FF">,   </font><font color="#000080"><i> -- (optional)</i></font>
<font color="#800000">     {</font><font color="#000000">px</font><font color="#0000FF">,</font><font color="#000000">py</font><font color="#800080">[</font><font color="#0000FF">,</font><font color="#004600">XPG_BLUE</font><font color="#00FF00">[</font><font color="#0000FF">,</font><font color="#000000">style</font><font color="#00FF00">]</font><font color="#800080">]</font><font color="#800000">}</font><font color="#0000FF">}</font><font color="#000080"><i> -- (multiple allowed)</i></font>
</pre>
            <a name=POST></a>
            <br>
<!--
            If the background colour is not provided XPG_WHITE is assumed (can also be set via the BGCOLOR attribute).<br>
            If the font (for the axis values) is not overridden the values shown above will be used.<br>
-->
???         While <a href="#BARMODE">BARMODE</a> can be supplied as above, or via attributes as detailed below, 
            the display of a legend is controlled by the pre(/ab)sence of "NAMES" in the returned data object (there is no LEGEND Y/N attribute).<br> 
            Each dataset is a pair of sequences of x and y values such that length(px) is the same as length(py),
            and can optionally specify a colour (if not provided <a href="gCanvas.htm#XPG_colours">XPG_BLACK</a> is assumed), and when 
            <a href="#MODE">MODE</a>="MARK" a <a href="#MARKSTYLE">MARKSTYLE</a>.<br>
            The complete set which can be supplied in this manner before the dataset(s) is NAMES, 
            <a href="#BARMODE">BARMODE</a>, and POST.
            <small><i>(There is no particularly good reason why the middle one are there, but NAMES and POST [DEV...] cannot be set any other way.)</i></small>
            <br>
            <br>
            Further refinements to this structure are of course possible, and in fact probably quite likely, and hopefully backwards-compatible.
         </td>
        </tr>
        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
<!--
            Note that while an IupGraph is based on an <a href="IupCanvas.htm">IupCanvas</a>, internally it uses the CanvasDraw 
            primitives rather than the IupDraw ones, and hence the FONT attribute does not apply. In fact, at the time of writing, 
//          the only other attribute beyond RASTERSIZE I have yet made any use of is <a href="IupCanvas.htm#DRAWSIZE">DRAWSIZE</a>,
            that is beyond the IupGraph-specific attributes not inherited from IupCanvas as listed below.
-->
          <br>
          <a name=MODE></a>
         </td>
        </tr>
        <tr>
         <td>
          MODE
         </td>
         <td>
            One of "BAR", "MARK", "MARKLINE", "LINE". Behaves as "LINE" if undefined or unrecognised, defaults to "BAR" if <a href="#BARMODE">BARMODE</a> is set.<br>
<!--
(from IupPlot:) drawing mode of the current dataset. 
        Can be: "LINE", "MARK", "MARKLINE", "BAR". Default: "LINE". [DONE]
        "AREA", "STEM", "MARKSTEM", "HORIZONTALBAR", "MULTIBAR", "STEP", "ERRORBAR", "PIE". 
-->
          <a name=BARMODE></a>
         </td>
        </tr>
        <tr>
         <td>
          BARMODE
         </td>
         <td>
            Display as a bar chart. Can be "VERTICAL", "HORIZONTAL" or undefined. <br>
            Default: "VERTICAL" if <a href="#MODE">MODE</a>="BAR", else undefined.<br>
            An error occurs if this is set to an unrecognised value, or <a href="#MODE">MODE</a> is neither "BAR" nor "" (which is then set to "BAR").
            See demo\pGUI\graph4.exw for an example.<br>
          <a name=MARKSTYLE></a>
         </td>
        </tr>
        <tr>
         <td>
          MARKSTYLE
         </td>
         <td>
<!--
-- (from IupPlot:) mark style of the current dataset. 
--        Can be: "HOLLOW_CIRCLE", "PLUS", "X". Default "X". [DONE] 
--        "STAR", "CIRCLE", "BOX", "DIAMOND", "HOLLOW_BOX", "HOLLOW_DIAMOND".
--        (to be implemented as and when needed)
-->
            Display as discrete marks, instead of lines or a bar chart (etc). <br>
            Can be "HOLLOW_CIRCLE", "PLUS", "X", "DOT", or undefined, and can be set on each dataset. <br>
            Default: "X" if <a href="#MODE">MODE</a>="MARK".<br>
            Note that like setting <a href="#BARMODE">BARMODE</a> means you don&rsquo;t have to set <a href="#MODE">MODE</a>="BAR",<br>
            if you set a MARKSTYLE on the graph itself, <a href="#MODE">MODE</a>="MARK" <i>is</i> automatically set.<br>
            However for MARKSTYLEs on each dataset, MODE must be set on the graph itself to pick them up.<br>
<!--
            the latter must be set to pick up a style off each dataset, so you (may) have to set <i>both</i> 
            <a href="#MODE">MODE</a>="MARK" and MARKSTYLE[per dataset] in order for things to work properly.<br>
            In other words it is kinda pointless relying on MARKSTYLE auto-setting MODE if you&rsquo;re going to override it
            on each dataset anyway, may as well just set it directly, and in fact save at least 2 characters.<br>
-->
<!--??!     Unrecognised settings are simply treated as "X", rather than triggering an error.<br> -->
            See demo\rosetta\Goldbachs_comet.exw for an example.<br>
          <a name=GRID></a>
         </td>
        </tr>
        <tr>
         <td>
          GRID
         </td>
         <td>
            Display the grid lines. Can be "YES"/"ON"/true or "NO"/"OFF"/false. Default: true.<br>
          <a name=GRIDCOLOR></a>
         </td>
        </tr>
        <tr>
         <td>
          GRIDCOLOR
         </td>
         <td>
            grid colour. Default: <a href="gCanvas.htm#XPG_colours">XPG_GREY</a> (#C0C0C0).<br>
            Should be set using (eg) <a href="gSetAttribute.htm">gSetInt</a>(graph,"GRIDCOLOR",<a href="gCanvas.htm#XPG_colours">XPG_LIGHT_GREY</a>).<br>
          <a name=GTITLE></a>
         </td>
        </tr>
        <tr>
         <td>
          GTITLE,<br>
          XNAME,<br>
          YNAME
         </td>
         <td>
            (optional) Text strings for the graph title and names for the x and y axis. Default: "".<br>
            Aside: renamed from TITLE to GTITLE to avoid inheriting from the dialog or other container.<br>
            See demo\rosetta\Yellowstone_sequence.exw for an example.<br>
          <a name=LEGEND></a>
         </td>
        </tr>
        <tr>
         <td>
??        LEGEND
         </td>
         <td>
            [DEV] to replace the above NAMES nonsense...<br>
            Sets the names to be used for a legend box. If not set, no legend appears.<br>
            Note there is no way/valid syntax to set this via gSetAttributes() or the initial gGraph(attributes) parameter.<br>
            To be crystal clear about that, it <i>must</i> be set via <a href="gSetAttribute.htm">gSetAttribute</a>(), after declaration, 
            which obviously includes from within the <a href="#DRID">DRID</a> function, that is, should you actually want a legend box.<br>
          <a name=LEGENDBOX></a>
         </td>
        </tr>
        <tr>
         <td>
          LEGENDBOX
         </td>
         <td>
            Specify whether to draw a box around the legend, default: YES.<br>
            As noted above the presence or absence of a legend explicitly depends on "LEGEND" being specified.<br>
          <a name=LEGENDPOS></a>
         </td>
        </tr>
        <tr>
         <td>
          LEGENDPOS
         </td>
         <td>
            legend box position. Can be: "TOPLEFT", "TOPRIGHT", "BOTTOMLEFT", "BOTTOMRIGHT", "BOTTOMCENTER" or "XY". Default: "TOPRIGHT". <br>
            For XY the position must be specified via the <a href="#LEGENDXY">LEGENDXY</a> attribute. <br>
          <a name=LEGENDXY></a>
         </td>
        </tr>
        <tr>
         <td>
          LEGENDXY
         </td>
         <td>
            (untested) legend box position in the format "x,y", with the first text being shown <a href="gCanvas.htm#gCanvasText">XPG_SE</a> of that point.<br>
          <a name=XMIN></a>
         </td>
        </tr>
        <tr>
         <td>
          <nobr>XMIN, XMAX,</nobr><br>
                YMIN, YMAX
         </td>
         <td>
            The range of x and y values. Fairly obviously XMIN should be &lt;= min(px) for all datasets, and similar rules 
            for the other three, otherwise parts of the graph may end up missing.<br>
          <a name=XMARGIN></a>
         </td>
        </tr>
        <tr>
         <td>
          XMARGIN,<br>
          YMARGIN
         </td>
         <td>
            Can be used to adjust the axis display when needed. Specified in pixels, default 10.<br>
          <a name=XYSHIFT></a>
         </td>
        </tr>
        <tr>
         <td>
          XYSHIFT,<br>
          YXSHIFT
         </td>
         <td>
            Can be used to further adjust the axis display in a platform-specific manner when needed. Specified in pixels, default 0.<br>
            See demo\pGUI\graph2.exw for an example, without XYSHIFT the dates on the x-axis were misplaced under pwa/p2js.<br>
            <small>(In an ideal world IupGraph.e would handle that sort of thing automatically, perhaps.
                    There may yet be a need for XXSHIFT and YYSHIFT.)</small><br>
          <a name=XANGLE></a>
         </td>
        </tr>
        <tr>
         <td>
          XANGLE,<br>
          YANGLE
         </td>
         <td>
            Specify an angle in degrees suitable for passing to <a href="gCanvas.htm#gCanvasText">gCanvasText</a>(), default 0.<br>
            A non-zero value rotates the tick labels, typically by +/-90. See demo\xpGUI\gGraph2.exw for an example.<br>
          <a name=XACROSS></a>
         </td>
        </tr>
        <tr>
         <td>
          XACROSS,<br>
          YACROSS
         </td>
         <td>
            Allow the axis to cross the origin and be placed inside the dataset area. Can be YES or NO (or true/false). Default: NO.<br>
            See demo\xpGUI\gGraph1.exw for an example.<br>
          <a name=XTICK></a>
         </td>
        </tr>
        <tr>
         <td>
          XTICK,
          YTICK
         </td>
         <td>
            The spacing between major ticks, as in `for x=<a href="#XMIN">XMIN</a> to <a href="#XMIN">XMAX</a> by XTICK do draw_tick(x) end for`.<br>
            <small>(minor ticks have not yet been attempted)</small><br>
          <a name=XTICKFMT></a>
         </td>
        </tr>
        <tr>
         <td>
          XTICKFMT,<br>
          YTICKFMT
         </td>
         <td>
            Specify a standard <a href="sprintf.htm">sprintf</a>() format string for the tick labels. Default: "%g".<br>
            Has no effect if <a href="#XRID">XRID/YRID</a> has been specified.
         </td>
        </tr>

<!--
        <tr>
         <td>
?         TITLESTYLE
         </td>
         <td>
            (optional) A style suitable for passing to <a href="cdCanvasFont.htm">cdCanvasFont</a>().<br>
            Should be set using (eg) <a href="IupSetStrAttribute.htm#utility">IupSetInt</a>(graph,"TITLESTYLE",CD_ITALIC).<br>
            Applies to <a href=#GTITLE>GTITLE</a>, <a href=#GTITLE>XNAME</a>, and <a href=#GTITLE>YNAME</a>. Default: CD_PLAIN.<br>
         </td>
        </tr>
-->
<!--
//      <tr>
//       <td>
//<X!X--?         <a href="gSetAttribute.htm#BGCOLOR">BGCOLOR</a>--X>
//        BGCOLOR
//       </td>
//       <td>
//          The background colour, can be set on the graph, or provided via drid as above.
//       </td>
//      </tr>
//      <tr>
//       <td>
//        CD_CANVAS
//       </td>
//       <td>
//          Use <code>cdCanvas cd_canvas = IupGetAttributePtr(graph,"CD_CANVAS")</code> to retrieve the internal cdCanvas, if needed.
//       </td>
//      </tr>
-->
<!--
//      <tr>
//       <td>
//?       <a href="gCanvas.htm#DRAWSIZE">DRAWSIZE</a>
//       </td>
//       <td>
//          Can be retrieved from inside the drid routine, should that help any.
//       </td>
//      </tr>
-->
<!-- ummm... (it's a handler not an attribute anyway...)
//      <tr>
//       <td>
//        DRID
//       </td>
//       <td>
//          While I don&rsquo;t particularly recommend (aka haven&rsquo;t tested) modifying it on-the-fly, it seems perfectly reasonable 
//          to retrieve and invoke the drid for secondary purposes, such as setting a label or frame name accompanying each graph.
//       </td>
//      </tr>
-->
<!--
//      <tr>
//       <td>
//?       <a href="gSetAttribute.htm#RASTERSIZE">RASTERSIZE</a>
//       </td>
//       <td>
//          Standard behaviour, except that gGraph.e automatically sets it to NULL after the initial display to enable full resizing.
//       </td>
//      </tr>
//      <tr>
//       <td>
////          <a href="gSetAttribute.htm#RASTERSIZE">RASTERSIZE</a>
//       </td>
//       <td>
//          (non inheritable) the initial size is determined from the sum of the column widths and the number of visible lines.<br>
//          Unlike some other controls it should <i>not</i> be necessary to set this to null to allow the automatic layout to use smaller values.
//       </td>
//      </tr>
//      <tr>
//       <td>
//        <a href="gSetAttribute.htm#EXPAND">EXPAND</a>
//       </td>
//       <td>
//          (non inheritable) The default value is "YES".
//       </td>
//      </tr>
        <tr>
         <td>
          SPACING
         </td>
         <td>
            vertical internal padding for each node. Notice that the distance between each node will actually be 2x the spacing. (since 3.0)
         </td>
        </tr>
        <tr>
         <td>
          CSPACING
         </td>
         <td>
            same as SPACING but using the units of the vertical part of the SIZE attribute. It will actually set the SPACING attribute. (since 3.29)
         </td>
        </tr>
-->
        <tr>
         <td>
          Also:
         </td>
         <td>
?           <a href="gSetAttribute.htm#ACTIVE">ACTIVE</a>,
            <a href="gSetAttribute.htm#EXPAND">EXPAND</a>, 
            <a href="gSetAttribute.htm#FONT">FONT</a>,
<!--        <a href="gSetAttribute.htm#NAME">NAME</a>, -->
<!--            <a href="gGetAttribute.htm#POSITION">POSITION</a>, -->
<!--            <a href="gGetAttribute.htm#SCREENPOSITION">SCREENPOSITION</a>, -->
            <a href="gSetAttribute.htm#MINSIZE">MINSIZE</a>, 
            <a href="gSetAttribute.htm#MAXSIZE">MAXSIZE</a>,
<!--        <a href="gSetAttribute.htm#WID">WID</a>, -->
            <a href="gSetAttribute.htm#TIP">TIP</a>, 
            <a href="gSetAttribute.htm#SIZE">SIZE</a>,
<!--        <a href="gSetAttribute.htm#ZORDER">ZORDER</a>, -->
            <a href="gSetAttribute.htm#VISIBLE">VISIBLE</a>
         </td>
        </tr>

        <tr>
         <td>
          <b>Handlers:</b>
         </td>
         <td>
<!--//DEV this was a limitation of using IUP so we should be able to remove it now...<br>-->
            You may <i>not</i> use or override <a href="gCanvas.htm#REDRAW">REDRAW</a><!-- , see POSTDRAW below -->.<br>
<!-- (except there aren't any...
            See <a href="gCanvas.htm#HANDLERS">gCanvas</a> for other supported handlers.
-->
<!--            (You <i>can</i> use that on the dialog/container, just not on the graph itself.) -->
          <a name=DRID></a>
         </td>
        </tr>
        <tr>
         <td>
          DRID
         </td>
         <td>
            A function that provides all the data needed for drawing the graph.
            <br>
            <br>
            function drid([<a href="gdx.htm">gdx</a> graph])<br>
            graph: (optional) identifier of the graph element.
            Should return a sequence containing one or more datasets, and can optionally perform some further settings on the graph gdx.
            <br>
            <br>
            Usually specified on the initial gGraph() call that creates the graph, but can be NULL and set later in the usual manner,
            being specifically here <a href="gSetHandler.htm">gSetHandler</a>(graph,"DRID",drid).
            <br>
            <br>
            Note this is invoked on every redraw/resize, so the results of any lengthy operation should be cached.<br>
            See demo\rosetta\Babylonian_spiral.exw for an example where the results are not only cached but also supplied incrementally,
            so in that case you can explore the smaller sets while it is still (visibly) churning away up to the full 200K set.<br>
          <a name=XRID></a>
         </td>
        </tr>
        <tr>
         <td>
          XRID,<br>
          YRID
         </td>
         <td>
            (optional) Specify a routine_id to use as a handler for formatting the tick labels.
            <br>
            <br>
            function format_xxx(<a href="atom.htm">atom</a> d)
            <br>
            <br>
            See demo\xpGUI\gGraph2|4.exw for examples. Note the x and y elements must all be numbers, not, for instance, 
            <a href="date.htm">date</a>() results, and these routines have to be able to decipher said numbers.
            In the case of gGraph2.exw, the x values are days since 1/1/1999, in the range 1..7000, though these
            routines actually get their (atom/integer) parameter from the (matching/equivalent) <a href="#XMIN">XMIN</a>/<a href="#XTICK">XTICK</a> etc.
            In the case of gGraph4.exw, the x values are 1..12, with format_month() yielding "jan".."dec".<br>
         </td>
        </tr>
        <tr>
         <td>
          also
         </td>
         <td>
<!--
//          <a href="gSetHandler.htm#MAP_CB">MAP_CB</a>,
//          <a href="gSetHandler.htm#UNMAP_CB">UNMAP_CB</a>,
//          <a href="gSetHandler.htm#DESTROY_CB">DESTROY_CB</a>, 
-->
            <a href="gSetHandler.htm#CLICK">CLICK</a>, 
            <a href="gCanvas.htm#DROP">DROP</a>, 
<!--
?           <a href="gSetHandler.htm#GETFOCUS_CB">GETFOCUS_CB</a>, 
            <a href="gSetHandler.htm#KILLFOCUS_CB">KILLFOCUS_CB</a>, 
            <a href="gSetHandler.htm#ENTERWINDOW_CB">ENTERWINDOW_CB</a>,
            <a href="gSetHandler.htm#LEAVEWINDOW_CB">LEAVEWINDOW_CB</a>, 
-->
            <a href="gSetHandler.htm#KEY">KEY</a>,
            <a href="gSetHandler.htm#MOUSEMOVE">MOUSEMOVE</a>: All common handlers are supported.
<!--            <a href="gSetHandler.htm#HELP_CB">HELP_CB</a> -->
<!--
            <br>
            <br>
?           Drag & Drop attributes and handlers are supported, but SHOWDRAGDROP must be set to NO. 
-->
         </td>
        </tr>
<!-- still not a bad idea, but... (rename as POSTDRAW)
          <a name=POST></a>
        <tr>
         <td>
?         POST
         </td>
         <td>
            [DEV] to replace the nonsense above...<br>
         </td>
        </tr>
-->
        <tr>
         <td>
          <a name=morescreenshots></a>
          <b><center>More</center>screenshots:</b>
         </td>
         <td>
            <div class="parent">
              <div class="child">
                <img alt="gGraph0" src="images/gGraph0.png" width="306" height="224"/>
                <span width="306"><center><small><i>(demo\xpGUI\gGraph.exw)</i></small></center></span>
              </div>
              <div class="child">
                <img alt="gGraph1" src="images/gGraph1.png" width="352" height="224"/>
                <span width="352"><center><small><i>(demo\xpGUI\gGraph1.exw)</i></small></center></span>
              </div>
              <div class="child">
                <img alt="gGraph2" src="images/gGraph2.png" width="370" height="224"/>
                <span width="370"><center><small><i>(demo\xpGUI\gGraph2.exw)</i></small></center></span>
              </div>
              <div class="child">
                <img alt="gGraph4" src="images/gGraph4.png" width="372" height="201"/>
                <span width="372"><center><small><i>(demo\xpGUI\gGraph4.exw)</i></small></center></span>
              </div>
            </div>
            <div style="clear:both;height:1px;"> </div>
         </td>
        </tr>
       </table>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
