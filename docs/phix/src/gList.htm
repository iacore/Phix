<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">gList</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include xpGUI.e
            <br>
            <br>
<!--        <a href="gdx.htm">gdx</a> id = gList(<a href="object.htm">object</a> data, -->
<!--                                            [<a href="rtn.htm">rtn</a> selected=NULL,]-->
            <a href="gdx.htm">gdx</a> id = gList(<a href="rtn.htm">rtn</a> get_data, [selected=NULL,]
<!--                                            [<a href="integer.htm">integer</a> rows=0,]]-->
                                                 <a href="string.htm">string</a> attributes="",
                                                 <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
<!--
//          NOT STARTED... <small>(I&rsquo;m thinking a gList() should be like the thing you get in Ctrl Q, but syntax colourable/ownerdrawn?)</small><br>
//          <small>- maybe what I really want and should aim for here is a gEditableAndSyntaxColourableMultilineText()...</small>
//          <br>
//          <br>
-->
            Creates a simple interface element that displays a non-sortable, header-less list of text-only items, with automatic scrollbars. 
<!--[technically read-only,] -->
<!--            While the gList does not itself perform any modification of data, there is nothing to prevent the application
            from modifying that and telling the gList to redisplay, but should keep control/posession of the "master copy" of that data.-->
            <br><small>NB: scrollbars now almost done, but selection not even started [DEV]</small>
<!--
            The list can be visible or can be dropped down. <br>
            It also can have an edit box for text input. <br>
            So it is a 4 in 1 element. <br>
            In native systems the dropped down case is called Combo Box.
-->
            <br>
            <br>
<!--        data: (non-optional) a sequence of string[ fragment]s or (recommended) a fetch function, see notes and <a href="#DATA">DATA</a> below.<br>-->
            get_data: (non-optional) a fetch function, see notes and <a href="#DATA">DATA</a> below.<br>
            selected: (optional) a procedure which is invoked when the selection changes.<br>
<!--            rows: (optional) the maximum number of lines to be displayed at any given time.<br>-->
            For more information on the attributes and args parameters see <a href="gSetAttributes.htm">gSetAttributes</a>().<br>
            This is a <a href="g_paranormal.htm">paranormalised function</a>.  <small>(see <a href="#tech" onclick="opentech()">technicalia</a>)</small>
            <br>
            <br>
            Returns: the identifier of the created element.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Almost, no scrollbars as yet, for one thing. [DEV]
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="gCanvas.htm">gCanvas</a>,
          <a href="gTable.htm">gTable</a>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
          <div style="float:left;">
<!--eucode>
-- demo\xpGUI\gList.exw
include xpGUI.e

sequence data = {"one","too","three"}
integer ldx = largest(apply(data,length),true)

function get_data(integer idx)
    if idx=0 then return length(data) end if
    if idx=-1 then return ldx end if -- note 1
    sequence res = data[idx]
    if res="too" then -- spelling mistake?
        -- see note 2 below
        res = {{"too",XPG_RED,XPG_ITALIC}}
    end if
    return res
end function

procedure selected(integer idx)
    ?{"selected",idx,data[idx]}
end procedure

gdx list = gList(get_data,selected,`FONT="Consolas, 12"`),
     dlg = gDialog(list,"gList",`SIZE=240x80`)
gSetAttribute(list,"BGCLR",XPG_LIGHT_PARCHMENT)
gShow(dlg)
gMainLoop()
</eucode-->
<pre>
<font color="#000080"><i>-- demo\xpGUI\gList.exw</i></font>
<font color="#008080">include</font><font color="#000000"> xpGUI.e
</font>
<font color="#004080">sequence</font><font color="#000000"> data</font><font color="#0000FF"> = {</font><font color="#008000">"one"</font><font color="#0000FF">,</font><font color="#008000">"too"</font><font color="#0000FF">,</font><font color="#008000">"three"</font><font color="#0000FF">}</font>
<font color="#004080">integer</font><font color="#000000"> ldx</font><font color="#0000FF"> =</font><font color="#7060A8"> largest</font><font color="#0000FF">(</font><font color="#7060A8">apply</font><font color="#800000">(</font><font color="#000000">data</font><font color="#0000FF">,</font><font color="#7060A8">length</font><font color="#800000">)</font><font color="#0000FF">,</font><font color="#004600">true</font><font color="#0000FF">)
</font>
<font color="#008080">function</font><font color="#000000"> get_data</font><font color="#0000FF">(</font><font color="#004080">integer</font><font color="#000000"> idx</font><font color="#0000FF">)</font>
<font color="#008080">    if</font><font color="#000000"> idx</font><font color="#0000FF">=</font><font color="#000000">0</font><font color="#008080"> then return</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">data</font><font color="#0000FF">)</font><font color="#008080"> end if
    if</font><font color="#000000"> idx</font><font color="#0000FF">=-</font><font color="#000000">1</font><font color="#008080"> then return</font><font color="#000000"> ldx</font><font color="#008080"> end if</font><font color="#000080"><i> -- note 1</i></font>
<font color="#004080">    sequence</font><font color="#000000"> res</font><font color="#0000FF"> =</font><font color="#000000"> data</font><font color="#0000FF">[</font><font color="#000000">idx</font><font color="#0000FF">]</font>
<font color="#008080">    if</font><font color="#000000"> res</font><font color="#0000FF">=</font><font color="#008000">"too"</font><font color="#008080"> then</font><font color="#000080"><i> -- spelling mistake?
        -- see note 2 below</i></font>
<font color="#000000">        res</font><font color="#0000FF"> = {</font><font color="#800000">{</font><font color="#008000">"too"</font><font color="#0000FF">,</font><font color="#004600">XPG_RED</font><font color="#0000FF">,</font><font color="#004600">XPG_ITALIC</font><font color="#800000">}</font><font color="#0000FF">}</font>
<font color="#008080">    end if
    return</font><font color="#000000"> res</font>
<font color="#008080">end function

procedure</font><font color="#000000"> selected</font><font color="#0000FF">(</font><font color="#004080">integer</font><font color="#000000"> idx</font><font color="#0000FF">)
    ?{</font><font color="#008000">"selected"</font><font color="#0000FF">,</font><font color="#000000">idx</font><font color="#0000FF">,</font><font color="#000000">data</font><font color="#800000">[</font><font color="#000000">idx</font><font color="#800000">]</font><font color="#0000FF">}</font>
<font color="#008080">end procedure
</font>
<font color="#7060A8">gdx</font><font color="#000000"> list</font><font color="#0000FF"> =</font><font color="#7060A8"> gList</font><font color="#0000FF">(</font><font color="#000000">get_data</font><font color="#0000FF">,</font><font color="#000000">selected</font><font color="#0000FF">,</font><font color="#008000">`FONT="Consolas, 12"`</font><font color="#0000FF">),</font>
<font color="#000000">     dlg</font><font color="#0000FF"> =</font><font color="#7060A8"> gDialog</font><font color="#0000FF">(</font><font color="#000000">list</font><font color="#0000FF">,</font><font color="#008000">"gList"</font><font color="#0000FF">,</font><font color="#008000">`SIZE=240x80`</font><font color="#0000FF">)</font>
<font color="#7060A8">gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">list</font><font color="#0000FF">,</font><font color="#008000">"BGCLR"</font><font color="#0000FF">,</font><font color="#004600">XPG_LIGHT_PARCHMENT</font><font color="#0000FF">)</font>
<font color="#7060A8">gShow</font><font color="#0000FF">(</font><font color="#000000">dlg</font><font color="#0000FF">)</font>
<font color="#7060A8">gMainLoop</font><font color="#0000FF">()</font>
</pre>
          </div>
          <img alt="gList" style="float:right;" src="images/gList.png" width="240" height="80">
          <div class="clear"></div>
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
<!--            While it may sometimes be easier to store relatively small and static data directly in the gList itself, it is usually much
            more flexible to use a <a href="#DATA">DATA</a> fetch function, especially should you ever want to modify the data (as opposed 
            to wholesale replacement). -->
            A gList is technically a read-only control, however there is nothing to prevent an application from handling keyboard/mouse input 
            and modifying the data itself, and then presumably invoking <a href="gRedraw.htm">gRedraw</a>().
<!--        In some (rarer) cases it is easier/sensible to specify a (small) fixed set of strings for data, however should that data be
            frequently or in fact ever updated, it is much better to provide it via a <a href="#DATA">DATA</a> fetch function.-->
            <br>
            <br>
<!--            With a fetch function, the application assumes all responsiblity for owning/modifying/limiting the data.<br>-->
            First-class performance is a significant concern in the design of this (deliberately simple) interface element.<br>
            <small><sup>1</sup></small> Specifically when gList() asks data(-1), aka "what is the longest line?", it is <i>entirely</i> the 
            application&rsquo;s responsibility to figure out a clever way to answer that efficiently, and <i>not</i> the fault of gList() 
            should an inefficient method be used, for instance apply(data,length) is fine when done once but not ideal should it repeat 
            &gt;99.99% of the exact same work on every single keystroke. For that reason, 0 is allowed to say "don&rsquo;t care", with the 
            obvious catch of no horizontal scrollbar to view the rest of any over-long lines.
            <br>
            <br>
            Text is always left aligned, with everything in the same font face/pointsize, but optionally scrollable and each line can be 
            specified as a list of coloured and/or normal/bold/italic text fragments. Line numbers (for instance) would be the responsibility
            of the get_data() function. 
<!--
            You could also use <a href="gCanvas.htm#IDROP">IDROP</a> to draw everything yourself (except for the
            scrollbars, and/but only as long as you have no problem/can cope with the x,y you will get given).
GAK: I may yet remove IDROP support on gList, should there be even the slightest performance gain for xpEditer...
-->
            <br>
            <br>
            Should this control not meet your needs then perhaps you might consider a <a href="gTable.htm">gTable</a>() instead, 
            which can handle multiple sortable columns, with headers, numeric entries, icons[??], etc. Also, a gList is just one 
            half of the original <a href="IupList.htm">IupList</a> functionality which has been completely redesigned and split, 
            so you may actually be looking for a <a href="gDropDown.htm">gDropDown</a>() instead. Should you be looking for a 
            "dropped down with edit area" then what you probably want is actually a <a href="gBox.htm">gVbox</a>() with a pair of 
            {<a href="gText.htm">gText</a>,gList}) children instead, and performing the whole "add entry" thing explicitly yourself, 
            along with setting the <a href="gText.htm">gText</a> whenever selection changes in the gList. (Not really a fan of that 
            kind of silly nonsense, be I, but at least whenever xpGUI starts to show signs of getting a bit highly opinionated, it 
            should be relatively straightforward to change.)
<!--
            <br>
            <br>
            While technically a gList is strictly read-only, (with a fetch function) the application is free to make any required changes 
            to the data itself, and that way mimic an editable control, and in fact that is what xpEditer does/is planned to do.
-->
            <br>
            <br>
            Each element of data/returns from the <a href="#DATA">DATA</a> fetch function can be a plain string or a sequence of string or
            {string,colour[,style]} fragments. Of course you could pre-analyse (/syntax-colour) the whole of data in one go up-front, or
            perform that per-line/on demand as shown above, and the maxlen index might also change over time.<br>
            <small><sup>2</sup></small> Note the double braces on the "too" above: a <code>{"too",XPG_RED}</code> would display "too" 
            (in the current foreground colour), but then complain that XPG_RED is neither a string nor {string,colour[,style]}, where 
            colour and style are as per <a href="gCanvas.htm#gCanvasText">gCanvasText</a>() (including the -1 for "as is").
            Obviously "two" would also be valid <small>[albeit misleading/autocorrect]</small>, as would <code>{"t",{"o",XPG_RED},"o"}</code>.
            <br>
<!--
            <br>
            When the list has focus use the arrow keys to move focus from one item to another. 
            When DROPDOWN=Yes use the Alt+Down key combination to show the dropdown list. 
            While the dropdown is shown the arrow key may change the current value depending on the system, 
            on Windows will directly change the current value, on GTK will change the current value only if Enter is pressed. 
            In all systems the dropdown list is closed by using the Alt+Up key combination, or by pressing Enter or Esc keys.
//          While the dropdown list is shown the DEFAULTENTER and DEFAULTESC buttons will not be called.
            <br>
            <br>
            The <a href="gSetHandler.htm#GETFOCUS_CB">GETFOCUS_CB</a> and <a href="gSetHandler.htm#KILLFOCUS_CB">KILLFOCUS_CB</a> handlers behave 
            differently depending on the list configuration and on the native system:
            <ul>
            <li>If DROPDOWN=NO and EDITBOX=YES, then the list never gets the focus, the handlers are called only when the edit box is clicked. </li>
            <li>In Motif if DROPDOWN=YES then when the dropdown button is clicked the list looses its focus and when the dropped list is closed 
                the list regain the focus, also when that happen if the list looses its focus to another control the kill focus handler is not called. </li>
            <li>In GTK, if DROPDOWN=YES and EDITBOX=NO, both handlers are called only when navigating with the keyboard (tip: if you need those 
                handlers with mouse navigation set EDITBOX=YES and READONLY=YES). Also in GTK, if DROPDOWN=YES and EDITBOX=YES then when the 
                dropdown button is clicked the list looses its focus and it gets it back only if the edit box is clicked. </li>
            <li>In Windows, if EDITBOX=YES then the tooltips are shown only when the cursor is near the control border or at the dropdown arrow. 
                Also the selection and caret attributes are not preserved if the list loses its focus, or in other words these attributes are only 
                useful in Windows if the list has the focus.</li>
            </ul>
            <br>
            IMPORTANT: In Windows when DROPDOWN=Yes the vertical size is controlled by the system, and has the height just right to include the borders and the text. 
//          So the User height from <a href="gSetAttribute.htm#RASTERSIZE">RASTERSIZE</a> or <a href="gGetAttribute.htm#SIZE">SIZE</a> will be always ignored.
            <br>
            <br>
            In Windows, list items are limited to 255 pixels height. 
-->
<!-- (I have no way to test this anyway)
//          <br>
//          <br>
//          In GTK older than 2.12, the editbox of a dropdown will not follow the list attributes: <a href="gSetAttribute.htm#FONT">FONT</a>, 
//          <a href="gSetAttribute.htm#BGCOLOR">BGCOLOR</a>, <a href="gSetAttribute.htm#FGCOLOR">FGCOLOR</a> and SPACING.
-->
<!--
            <br>
            <br>
            Clicking and dragging a item: if SHOWDRAGDROP=Yes starts a drag. When mouse is released, the DRAGDROP_CB handler is called. <br>
            If the handler does not exist or if it returns <a href="gSetHandler.htm#IUP_CONTINUE">IUP_CONTINUE</a> then the item is moved to the new position. <br>
            If Ctrl is pressed then the node is copied instead of moved. In Windows and GTK, drag is performed with the left mouse button. <br>
            In Motif, the middle mouse button is used to drag.
            <br>
            <br>
//          The utility functions <a href="IupSetAttribute.htm#utility">IupSetAttributeId</a>, <a href="IupGetAttribute.htm#utility">IupGetAttributeId</a>, 
//          <a href="IupGetAttribute.htm#utility">IupGetIntId</a>, <a href="IupGetAttribute.htm#utility">IupGetFloatId</a>, 
//          <a href="IupSetStrAttribute.htm#utility">IupSetIntId</a>, and <a href="IupSetStrAttribute.htm#utility">IupSetFloatId</a>
//          can also be used here. Note that the C function <span class="illegal">IupSetfAttributeId</span> is not wrapped by pGUI, however that functionality is covered by the
//          optional parameters of <a href="IupSetStrAttribute.htm#utility">IupSetStrAttributeId</a>.
//          <br>        
//          <br>        
            For example:
<X!X--eucode>
//IupSetAttributeId(ih, "", 3, value) == IupSetAttribute(ih, "3", value)
//IupSetAttributeId(ih, "INSERTITEM", 8, value) == IupSetAttribute(ih, "INSERTITEM8", value)
</eucode--X>
<pre>
//<font color="#7060A8">IupSetAttributeId</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> ""</font><font color="#0000FF">,</font><font color="#000000"> 3</font><font color="#0000FF">,</font><font color="#7060A8"> value</font><font color="#0000FF">) ==</font><font color="#7060A8"> IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "3"</font><font color="#0000FF">,</font><font color="#7060A8"> value</font><font color="#0000FF">)</font>
//<font color="#7060A8">IupSetAttributeId</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "INSERTITEM"</font><font color="#0000FF">,</font><font color="#000000"> 8</font><font color="#0000FF">,</font><font color="#7060A8"> value</font><font color="#0000FF">) ==</font><font color="#7060A8"> IupSetAttribute</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "INSERTITEM8"</font><font color="#0000FF">,</font><font color="#7060A8"> value</font><font color="#0000FF">)</font>
</pre>
            <br>
-->
<!--
            These functions are faster than the traditional functions because they do not need to parse the attribute name string and the application 
            does not need to concatenate the attribute name with the id.
            <br>
            <br>
            Some further examples can be seen in demo\xpGUI\sample.exw [DEV]
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
          <br>
          <a name=MULTIPLE></a> 
         </td>
        </tr>
<!--
          <a name=COUNT></a>
        <tr>
         <td>
?         COUNT
         </td>
         <td>
            (read-only, non inheritable) returns the number of items. Note that when a <a href="#DATA">DATA</a> fetch function is in use, and
            hence the application (rather than the gList) "owns" the data, it simply returns the result from invoking that routine with 0.
            Should not be confused with <a href="#ROWS">ROWS</a>, which concerns the display size.<br>
         </td>
        </tr>
-->
<!--
          <a name=DDATA></a>
        <tr>
         <td>
?         DATA
         </td>
         <td>
            Fetch/replace the (static) control-owned data when a <a href="sequence.htm">sequence</a>, or the <a href="#DATA">DATA</a> fetch 
            function when an <a href="integer.htm">integer</a>/<a href="rtn.htm">rtn</a>. See notes above.
<X!X--
            Relatively short and reasonably static sequences
            should be fine, but it is <i>not</i> recommended to update the (ever longer) contents this way several times a second, instead 
            the application should maintain said itself and use a proper fetch function.<br>
--X>
         </td>
        </tr>
-->
        <tr>
         <td>
??        MULTIPLE
         </td>
         <td>
            (creation only) Allows selecting several items simultaneously (multiple list). Default: "NO"/0/<a href="logicops.htm#tf">false</a>.<br>
            To select multiple items, the Ctrl or Shift key must be held down.<br>
            Note this changes the required signature of any <a href="#SELECTED">SELECTED</a> handler.<br>
            Also note this is whole lines, inappropriate for and distinct from block selection in (say) an editor, which is much more of a 
            syntax-colouring thing (see <a href="#DATA">DATA</a>). The latter can however co-exist quite happily with single line selection.<br>
<!--             Only valid when EDITBOX=NO and DROPDOWN=NO. -->
          <a name=ROWS></a>
         </td>
        </tr>
        <tr>
         <td>
?         ROWS
         </td>
         <td>
            (creation only) The number of lines to be displayed at any given time, in cases where no explict <a href="gGetAttribute.htm#SIZE">SIZE</a>
            has been set. Of course using ROWS rather than SIZE helps to prevent it showing partial/vertically clipped lines, however that cannot be
            assured when it is resized or micro-scrolled. If (both are) undefined the length of data is/may be consulted and clamped to 1..50, that is 
            unless constrained by some outer container size or suchlike, say perhaps being normalised to some other sibling control.<br>
<!--
            Should not be confused with <a href="#COUNT">COUNT</a>, which can be much larger.<br>
better:<br>
-->
<!--            Typically much smaller than <a href="#COUNT">COUNT</a>, but can be a bit larger.<br>-->
            Typically much smaller than whatever get_data(0) returns, but can be a bit larger.<br>
<!--?        Can also be referenced as "VISIBLELINES".-->
         </td>
        </tr>
<!--
        <tr>
         <td>
?         SIZE
         </td>
         <td>
            Size of the interface element in pixels, which can be specified in the usual manner as either "wxh", eg "100x150" or (non-string) 
            {w,h}, eg {100,150}. If the width is not set or zero, <a href="gGetAttribute.htm#gGetTextExtent">gGetTextExtent</a>() is used on
            the longest line, and if the height is not set or zero, the same times <a href="#ROWS">ROWS</a> is used.
         </td>
        </tr>
-->
        <tr>
         <td>
??        SELECTED
         </td>
         <td>
            (read only) When <a href="#MULTIPLE">MULTIPLE</a> is <a href="logicops.htm#tf">false</a>, returns the index of the currently selected line, or 0 if none.<br>
            When <a href="#MULTIPLE">MULTIPLE</a> is <a href="logicops.htm#tf">true</a>, returns a sequence of such, or {} if none.<br>
            This can be used as an independant (and on-demand) alternative to a <a href="#SELECTED">SELECTED</a> handler.
<!--
            (non inheritable) Depends on the DROPDOWN+EDITBOX combination:
            <ul>
            <li>EDITBOX=YES: Text entered by the user. </li>
            <li>DROPDOWN=YES or MULTIPLE=NO: Integer number representing the selected item in the list (begins at 1). It can be zero if there is no selected item.
                The value can be NULL for no item selected (In Motif when DROPDOWN=YES there is always an item selected, except only when the list is empty). </li>
            <li>MULTIPLE=YES: Sequence of '+' and '-' symbols indicating the state of each item.
                When setting this value, the user must provide the same amount of '+' and '-' symbols as the amount of items in the list, otherwise the specified items will be deselected. </li>
            <li>Obs: always returns a non NULL value, event if the list is empty or the text box is empty. </li>
            </ul>
-->
         </td>
        </tr>
        <tr>
         <td>
<nobr>?       SHOWITEM
</nobr>
         </td>
         <td>
            (write-only) Ensure the specified line (1..length(data)) is visible, in other words set the vertical scrollbar as needed. <br>
            Can also be {line,fromcol[,tocol[,toline]]} to set the horizontal scrollbar as well, to show as much of that as possible.<br>
         </td>
        </tr>
        <tr>
         <td>
?         TOPITEM
         </td>
         <td>
            Position the specified line (1..length(DATA)) at the top of the list.
<!-- erm, maybe... re-read ROWS above...
            When queried, returns {topline,visible_lines}, where visible_lines is read-only and both may contain a fraction. <br>
            Setting the size of the canvas will of course affect the number of visible lines, but that <i>cannot</i> be set directly - 
            <a href="gGetAttribute.htm#gGetTextExtent">gGetTextExtent</a>() <i>might</i> be (partially) helpful, but to be honest it 
            is probably somewhat unwise to even try, imo, and sizes that "jump" in multiples of (avg?) character sizes never look good.
-->
         </td>
        </tr>
<!--
//      <tr>
//       <td>
//??          VALUESTR
//       </td>
//       <td>
//          (read only) Returns data[SELECTED] or "". Note that if data contains any zero-length strings it is not possible to distinguish 
//          a SELECTED of zero from any such line, likewise should data contain duplicates it is not possible to use VALUESTR to determine 
//          which one is actually selected. This attribute is only intended for use in the "data as sequence" creation mode, and not when 
//          a fetch function exists. 
//          Should <a href="#MULTIPLE">MULTIPLE</a> be <a href="logicops.htm#tf">true</a>, returns instead a sequence of such, or {} if none.
//       </td>
//      </tr>
-->
<!--
//      <tr>
//       <td>
//        "1","2"
//       </td>
//       <td>
//          First, Second, etc item in the list.
//          <br>
//          <br>
//          (non inheritable) The values can be any text. Items before "1" are ignored. <br>
//          Before map the first item with a NULL is considered the end of the list and items can be set in any order. 
//          <br>
//          After map, there are a few rules:
//          <ul>
//          <li>if "1" is set to NULL, all items are removed. </li>
//          <li>if "id" is set to NULL, all items after id are removed. </li>
//          <li>if "id" is between the first and the last item, the current idth item is replaced. 
//              The effect is the same as removing the old item and inserting a new one at the old position. </li>
//          <li>if "id+1" is set then it is appended after the last item. </li>
//          <li>Items after "id+1" are ignored.</li>
//          </ul>
//       </td>
//      </tr>
//      <tr>
//       <td>
//        APPENDITEM
//       </td>
//       <td>
//          (write-only) inserts an item after the last item. Ignored if set before map.
//       </td>
//      </tr>
        <tr>
         <td>
          AUTOHIDE
         </td>
         <td>
            scrollbars are shown only if they are necessary. Default: "YES".
         </td>
        </tr>
        <tr>
         <td>
          AUTOREDRAW
         </td>
         <td>
            [Windows] (non inheritable) automatically redraws the list when something has change. Set to NO to add many items to the list without updating the display. Default: "YES".
         </td>
        </tr>
//      <tr>
//       <td>
//?       <a href="gSetAttribute.htm#BGCOLOR">BGCOLOR</a>
//       </td>
//       <td>
//          Background color of the text. Default: the global attribute <a href="gGetGlobal.htm#TXTBGCOLOR">TXTBGCOLOR</a>.
//       </td>
//      </tr>
        <tr>
         <td>
          PROPAGATEFOCUS
         </td>
         <td>
            (non inheritable) enables the focus handler forwarding to the next native parent with FOCUS_CB defined. Default: NO. (since 3.23)
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          DRAGDROPLIST
         </td>
         <td>
            (non inheritable) enable or disable the drag and drop of items between lists, in the same IUP application. 
            Drag & Drop attributes must be set in order to activate the drag & drop support. 
            On the other hand, it is not necessary to register drag & drop handlers. Default: NO.
         </td>
        </tr>
        <tr>
         <td>
          DROPFILESTARGET
         </td>
         <td>
            [Windows and GTK Only] (non inheritable) Enable or disable the drop of files. 
            Default: NO, but if DROPFILES_CB is defined when the element is mapped then it will be automatically enabled.
         </td>
        </tr>
//      <tr>
//       <td>
//        DROPDOWN
//       </td>
//       <td>
//          (creation only) Changes the appearance of the list for the user: only the selected item is shown beside a button with the image of an arrow pointing down. 
//          To select another option, the user must press this button, which displays all items in the list. Can be "YES" or "NO". Default "NO".
//       </td>
//      </tr>
//      <tr>
//       <td>
//        DROPEXPAND
//       </td>
//       <td>
//          [Windows Only] When DROPDOWN=Yes the size of the dropped list will expand to include the largest text. Can be "YES" or "NO". Default: "YES".
//       </td>
//      </tr>
//      <tr>
//       <td>
//        EDITBOX
//       </td>
//       <td>
//          (creation only) Adds an edit box to the list. Can be "YES" or "NO". Default "NO".
//       </td>
//      </tr>
        <tr>
         <td>
          <a href="gSetAttribute.htm#FGCOLOR">FGCOLOR</a>
         </td>
         <td>
            Text color. Default: the global attribute <a href="gGetGlobal.htm#TXTFGCOLOR">TXTFGCOLOR</a>.
         </td>
        </tr>
//      <tr>
//       <td>
//        IMAGEid
//       </td>
//       <td>
//          (non inheritable, write only) [Windows and GTK Only] image name to be used in the specified item, where id is the specified item starting at 1. 
//          The item must already exist. 
////            Use <a href="IupSetHandle.htm">IupSetHandle</a> or <a href="IupSetAttributeHandle.htm">IupSetAttributeHandle</a> to associate an image to a name. 
//          See also <a href="gImage.htm">gImage</a>. 
//          The image is always displayed at the left of the text and only when SHOWIMAGE=Yes. When EDITBOX=Yes the image is not display at the edit box. 
//          Images don&rsquo;t need to have the same size. In Windows, list items are limited to 255 pixels height.
//       </td>
//      </tr>
//      <tr>
//       <td>
//        INSERTITEMid
//       </td>
//       <td>
//          (write-only) inserts an item before the given id position. id starts at 1. If id=COUNT+1 then it will append after the last item. 
//          Ignored if out of bounds. Ignored if set before map.
//       </td>
//      </tr>
-->
<!--
        <tr>
         <td>
          REMOVEITEM<a href="notpgui.htm#IupList"><span style="color:orange; font-size:75%;"><sup>?</sup></span></a>
         </td>
         <td>
            (write-only) removes the given value. value starts at 1. If value is NULL or "ALL" removes all the items. Ignored if set before map.
         </td>
        </tr>
        <tr>
         <td>
          SCROLLBAR
         </td>
         <td>
            (creation only) Associates automatic scrollbars to the list when DROPDOWN=NO. Can be: "YES" or "NO" (none). Default: "YES". 
//          For all systems, when SCROLLBAR=YES the natural size will always include its size even if the native system hides the scrollbars. 
            If AUTOHIDE=YES scrollbars are shown only if they are necessary, by default AUTOHIDE=YES. 
            In Motif, SCROLLBAR=NO is not supported and if EDITBOX=YES the horizontal scrollbar is never shown.
            <br>
            <br>
            When DROPDOWN=YES the scrollbars are system dependent, and do NOT depend on the SCROLLBAR or AUTOHIDE attributes. 
            Usually the scrollbars are shown if necessary. In GTK, scrollbars are never shown and all items are always visible. 
//          In Motif, the horizontal scrollbar is never shown. In Windows, if DROPEXPAND=YES then the horizontal scrollbar is never shown.
         </td>
        </tr>
        <tr>
         <td>
          SHOWDRAGDROP
         </td>
         <td>
            (creation only, non inheritable) enables the internal drag and drop of items, and enables the DRAGDROP_CB handler. Default: "NO". 
            Works only if DROPDOWN=NO and MULTIPLE=NO.
         </td>
        </tr>
        <tr>
         <td>
          SHOWDROPDOWN<a href="notpgui.htm#IupList"><span style="color:orange; font-size:75%;"><sup>?</sup></span></a>
         </td>
         <td>
            (write-only) opens or closes the dropdown list. Can be "YES" or "NO". Valid only when DROPDOWN=YES. Ignored if set before map. 
         </td>
        </tr>
        <tr>
         <td>
          SHOWIMAGE
         </td>
         <td>
            (creation only) [Windows and GTK Only] enables the use of an image for each item. Can be "YES" or "NO". Ignored if set before map.
         </td>
        </tr>
-->
<!--
//      <tr>
//       <td>
//        SORT
//       </td>
//       <td>
//          (creation only) force the list to be alphabetically sorted. When using INSERTITEMn or APPENDITEM the position will be ignored.
//       </td>
//      </tr>
-->
<!--
        <tr>
         <td>
?         SPACING
         </td>
         <td>
            internal padding for each item. Notice that vertically the distance between each item will be actually 2x the spacing. 
            It also affects the horizontal margin of the item. In Windows, the text is aligned at the top left of the item always. 
            Valid only when DROPDOWN=NO.
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          CSPACING
         </td>
         <td>
            same as SPACING but using the units of the vertical part of the SIZE attribute. It will actually set the SPACING attribute. (since 3.29)
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
          VALUEMASKED
         </td>
         <td>
            (non inheritable, write-only) sets VALUE but first checks if it is validated by MASK. If not does nothing. Works only when EDITBOX=YES.
         </td>
        </tr>
            <a name=VISIBLEITEMS></a>
        <tr>
         <td>
          VISIBLEITEMS<a href="notpgui.htm#IupList"><span style="color:orange; font-size:75%;"><sup>?</sup></span></a>
         </td>
         <td>
            [Windows and Motif Only] Number of items that are visible when DROPDOWN=YES is used for the dropdown list. Default: 5.<br>
            [PL] In a number of cases I have had to set this to N+1 otherwise it shows an extra blank line (and a scrollbar); I can 
            only assume that setting it to N+1 allows map to detect that sprintf("%d",N+1) does not exist (as part of it examining 
//          all items when determining the natural size), and therefore it closes the gap (and removes the scrollbar). Of course
            the default of 5 handles N&lt;=4 perfectly, without the N+1 trick.
         </td>
        </tr>
        <tr>
         <td>
          VISIBLECOLUMNS
         </td>
         <td>
//          Defines the number of visible columns for the Natural Size, this means that will act also as minimum number of visible columns. 
            It uses a wider character size then the one used for the <a href="gGetAttribute.htm#SIZE">SIZE</a> attribute so strings will 
            fit better without the need of extra columns. 
//          Set this attribute to speed Natural Size computation for very large lists.
         </td>
        </tr>
        <tr>
         <td>
          VISIBLELINES<a href="notpgui.htm#IupList"><span style="color:orange; font-size:75%;"><sup>?</sup></span></a>
         </td>
         <td>
//          When DROPDOWN=NO defines the number of visible lines for the Natural Size, this means that will act also as minimum number of visible lines.
         </td>
        </tr>
-->
        <tr>
         <td>
          also
         </td>
         <td>
<!--        APPEND, CLIPBOARD, FILTER, INSERT, CUEBANNER, -->
<!-- ***NB*** xpEditer is going to need a CARET!  Rather than CUEBANNER it would be an if data={} then return 1/"xxx" thing here... -->
??          CARET, CARETPOS, 
<!--SCROLLTO, -->
<!--            PADDING<a href="notpgui.htm"><span style="color:lime;"><sup>+</sup></span></a>,-->
<!--        MASK, NC, READONLY, SELECTEDTEXT, SELECTION, SELECTIONPOS, SCROLLTOPOS: 
            Same as the <a href="IupText.htm">IupText</a> attributes, but are valid only when EDITBOX=YES and effective only for the edit box inside the list.
-->
            <br>
            <br>
            <a href="gSetAttribute.htm#ACTIVE">ACTIVE</a>, 
            <a href="gSetAttribute.htm#CANFOCUS">CANFOCUS</a>, 
            <a href="gCanvas.htm#EXPAND">EXPAND</a> (see note), 
            <a href="gSetAttribute.htm#FONT">FONT</a>, 
<!--            <a href="gSetAttribute.htm#NAME">NAME</a>, -->
<!--?           <a href="gGetAttribute.htm#POSITION">POSITION</a>, -->
<!--?           <a href="gGetAttribute.htm#SCREENPOSITION">SCREENPOSITION</a>, -->
            <a href="gSetAttribute.htm#MINSIZE">MINSIZE</a>, 
            <a href="gSetAttribute.htm#MAXSIZE">MAXSIZE</a>, 
            <a href="gGetAttribute.htm#SIZE">SIZE</a>, 
            <a href="gSetAttribute.htm#TIP">TIP</a>, 
<!--            <a href="gSetAttribute.htm#RASTERSIZE">RASTERSIZE</a>,-->
<!--            <a href="gSetAttribute.htm#ZORDER">ZORDER</a>,-->
            <a href="gSetAttribute.htm#VISIBLE">VISIBLE</a>.
            <br>
            <br>
            Note that <a href="gCanvas#SCROLLSIZE">SCROLLSIZE</a> and <a href="gCanvas#VIEWPORT">VIEWPORT</a> are automatically handled on
            a gList, and you should not attempt to tamper with them.<br>
<!--
            <br>
            <br>
?           Drag & Drop attributes and handlers are supported.
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Handlers:</b>
         </td>
         <td>
          <br>
          <a name=DATA></a>
         </td>
        </tr>
        <tr>
         <td>
          DATA
         </td>
         <td>
            A fetch function for retrieving the gList entries/lines/rows.
            <br>
            <br>
            function fetch_data([<a href="gdx.htm">gdx</a> id,]
                                <a href="integer.htm">integer</a> item)<br>
            id: (optional) identifier of the element that activated the event.<br>
            item: Index of the desired line, 0 to get the total length, -1 to get the index of the longest.
            <br>
            <br>
            Naturally, specify a gdx id should you have some use for it, or just omit it otherwise.
            <br>
            <br>
            When item is 0, as shown above, should simply return the outer/vertical <a href="length.htm">length</a>().<br>
            When item is -1, returning 0, or in fact the index of any line that fully fits, simply disables the horizontal scrollbar.<br>
            Aside: idx:=fetch_data(-1) is immediately followed by line:=fetch_data(idx) for all idx>0.
            Technically speaking, for perfect horizontal scrolling, fetch_data(-1) should effectively invoke
            <a href="gGetAttribute.htm#gGetTextExtent">gGetTextExtent</a>() on <i>every</i> element of data, <!--and the
            "data as sequence" creation mode does just that,--> but in practice <a href="length.htm">length</a>() is usually 
            good enough, and in fact when a fixed-width font is in use that perfectly identifies the correct line anyway.
            <br>
            <br>
            Obviously your application may well perform much better by cacheing the results from such [getsize] calls, and
            you could also of course blatently lie, perform a full scan in the background/idle handler, then gRefresh() and 
            tell the honest truth, iyswim. Obviously, you are perfectly at liberty to break up each data[i] on every fetch, 
            rather than store it in pieces. Should some data[i] contain multiple fragments, it would be down to you to either 
            sum the gGetTextExtent/length or apply said to a contatenation of them <small>(gList does the former on the 
            line:=fetch_data(idx) mentioned)</small>. Edita keeps tables of linelengths to minimise the effort required in 
            that regard when things change, and therefore so will the new xpEditer, which will actually use a gList().
<!--
            Naturally since the application owns the data, it can easily limit the
            gGetTextExtent/length to newly added items only, whereas if the interface element owns the data, it would have 
            to start again from the top whenever given a complete replacement (with no easy way to give it a partial update).
-->
            <br>
            <br>
            The fetch_data function can simulate a cuebanner by returning 1/1/"Enter xxx" when the internal application data is {},
            of course with appropriate colour/style on the fake fragment if desired. [DEV: untested]
            <br>
            <br>
            The function should return the integer length|idx, a text string, or a sequence of {text|{text,colour[,style]}} fragments.<br>
            Only those lines which are actually being displayed are ever requested, plus, optionally, the longest.
<!--
            <br>
            <br>
??          Note that <a href="gSetHandler.htm">gSetHandler</a>(id,"DATA",fetch_data) only works as expected after creation when it was initially NULL, 
            or when a <a href="gSetAttribute.htm">gSetAttribute</a>(id,"DATA",NULL) has also occurred (the latter may need to be 2nd).<br>
            <small>[Somewhat unusually there is both a DATA handler and a DATA attribute, with the former only ever used when the latter is NULL.]<br></small>
            <small>[The latter can also be a (non-null integer) handler, which would be used (in preference to this but) in exactly the same way.]<br></small>
-->
<!--
            <br>
            <br>
            Aside: Initially I had planned a gListReplaceData() routine, before realising it is simply much better to force the use of a proper 
            fetch function like the above whenever the data is potentially subject to change, especially so regarding ownership issues.
-->
          <a name=SELECTED></a>
         </td>
        </tr>
        <tr>
         <td>
          ?SELECTED
         </td>
         <td>
            Action generated when an item in the list is selected. Note there is no "unselect" equivalent (as yet).
            <br>
            <br>
            procedure selected([<a href="gdx.htm">gdx</a> id,] <a href="integer.htm">integer</a> item)  <i>-- when MULTIPLE=NO</i><br>
            <small><i>-- or --</i><br></small>
            procedure selected([<a href="gdx.htm">gdx</a> id,] <a href="sequence.htm">sequence</a> items)  <i>-- when MULTIPLE=YES</i>
            <br>
            <br>
            id: (optional) identifier of the element that activated the event.<br>
            item: Number of the changed item starting at 1.<br>
            items: Sequence of selected items, or {} if none.
            <br>
            <br>
            Naturally, specify a gdx id should you have some use for it, and just omit it otherwise.
            <br>
            <br>
            The <a href="#MULTIPLE">MULTIPLE</a> attribute determines whether the second parameter is an integer or a sequence,
            said can also be declared as <a href="object.htm">object</a> and tested within.
         </td>
        </tr>
<!--
//      <tr>
//       <td>
//?       CARET_CB
//       </td>
//       <td>
//          Action generated when the caret/cursor position is changed.  Valid only when EDITBOX=YES.
//          <br>
//          <br>
//          function caret_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> lin, col, pos)<br>
//          ih: identifier of the element that activated the event.<br>
//          lin, col: line and column number (start at 1).<br>
//          pos: 0 based character position.
//          <br>
//          <br>
//          For lists lin is always 1, and pos is always "col-1".
//          <br>
//          <br>
//          This is the same CARET_CB handler definition as for the <a href="IupText.htm">IupText</a>.
//       </td>
//      </tr>
-->
<!--
//      <tr>
//       <td>
//?       DBLCLICK_CB
//       </td>
//       <td>
//          Action generated when the user double click an item. Called only when DROPDOWN=NO.
//          <br>
//          <br>
//          function dblclick_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> item, <a href="atom.htm">atom</a> pText)<br>
//          ih: identifier of the element that activated the event.<br>
//          item: Number of the selected item starting at 1.<br>
//          pText: Text (char*) of the selected item.
//       </td>
//      </tr>
-->
<!--
//      <tr>
//       <td>
//?       DRAGDROP_CB
//       </td>
//       <td>
//          Action generated when an internal drag and drop is executed. Only active if SHOWDRAGDROP=YES.
//          <br>
//          <br>
//          function dragdrop_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> drag_id, drop_id, isshift, iscontrol)<br>
//          ih: identifier of the element that activated the event. <br>
//          drag_id: Identifier of the clicked item where the drag start. <br>
//          drop_id: Identifier of the clicked item where the drop were executed. -1 indicates a drop in a blank area.<br>
//          isshift: flag indicating the shift key state. <br>
//          iscontrol: flag indicating the control key state.
//          <br>
//          <br>
//          Returns: if returns <a href="gSetHandler.htm#IUP_CONTINUE">IUP_CONTINUE</a>, or if the handler is not defined and SHOWDRAGDROP=YES, 
//          then the item is moved to the new position. <br>
//          If Ctrl is pressed then the item is copied instead of moved.
//       </td>
//      </tr>
-->
<!--
//      <tr>
//       <td>
//        DROPDOWN_CB
//       </td>
//       <td>
//          Action generated when the list of a dropdown is shown or hidden. Called only when DROPDOWN=YES.
//          <br>
//          <br>
//          function dropdown_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> state)<br>
//          ih: identifier of the element that activated the event.<br>
//          state: state of the list 1=shown, 0=hidden.
//       </td>
//      </tr>
-->
<!--
        <tr>
         <td>
?         DROPFILES_CB
         </td>
         <td>
            [Windows and GTK Only] Action generated when one or more files are dropped in the element.
         </td>
        </tr>
-->
<!--
//      <tr>
//       <td>
//?       EDIT_CB
//       </td>
//       <td>
//          Action generated when the text in the text box is manually changed by the user, but before its value is actually updated. Valid only when EDITBOX=YES.
//          <br>
//          <br>
//          function edit_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> c, <a href="atom.htm">atom</a> pNewValue)<br>
//          ih: identifier of the element that activated the event.<br>
//          c: valid alpha numeric character or 0.<br>
//          pNewValue: Represents the new text value (char*).
//          <br>
//          <br>
//          Returns: <a href="gSetHandler.htm#XPG_CLOSE">XPG_CLOSE</a> will be processed, but the change will be ignored. <br>
//          If <a href="gSetHandler.htm#XPG_IGNORE">XPG_IGNORE</a>, the system will ignore the new value. <br>
//          If c is valid and returns a valid alpha numeric character, this new character will be used instead. <br>
//          The VALUE attribute can be changed only if <a href="gSetHandler.htm#XPG_IGNORE">XPG_IGNORE</a> is returned.
//          <br>
//          <br>
//          This is the same ACTION handler definition as for the <a href="IupText.htm">IupText</a>.
//       </td>
//      </tr>
-->
<!-- (add MOUSEMOVE to "also" in preference and if you want...)
//      <tr>
//       <td>
//?       <a href="gSetHandler.htm#MOTION_CB">MOTION_CB</a>
//       </td>
//       <td>
//          Action generated when the mouse is moved over the list. Called only when DROPDOWN=NO. 
//          If the list has an editbox the message is called when cursor is at the listbox only (ignored at the editbox). 
//          Use <a href="IupConvertXYToPos.htm">IupConvertXYToPos</a>() to convert (x,y) coordinates in item position.
//       </td>
//      </tr>
-->
<!--
//      <tr>
//       <td>
//?       MULTISELECT_CB
//       </td>
//       <td>
//          Action generated when the state of an item in the multiple selection list is changed. But it is called only when the interaction is over.
//          <br>
//          <br>
//          function multiselect_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="atom.htm">atom</a> pValue)<br>
//          ih: identifier of the element that activated the event.<br>
//          pValue: (char*) Similar to the VALUE attribute for a multiple selection list. <br>
//          Items selected are marked with '+', items deselected are marked with '-', and non changed items are marked with an 'x'.
//          <br>
//          <br>
//          This handler is called only when MULTIPLE=YES. <br>
//          If this handler is defined the <a href="#ACTION">ACTION</a> handler will not be called.
//          <br>
//          <br>
//          The non changed items marked with 'x' are simulated internally by IUP in all systems. 
//          If you add or remove items to/from the list and you count on the 'x' values, then after 
//          adding/removing items set the VALUE attribute to ensure proper 'x' values.
//       </td>
//      </tr>
//        <a name=VALUE_CHANGED></a>
//      <tr>
//       <td>
//?       <a href="gSetHandler.htm#VALUE_CHANGED">VALUE_CHANGED</a>
//       </td>
//       <td>
//          Called after the value was interactively changed by the user, by changing the selection or when the text is edited.
//          <br>
//          <br>
//          function value_changed(<a href="gdx.htm">gdx</a> ih)<br>
//          ih: identifier of the element that activated the event.
//       </td>
//      </tr>
-->
        <tr>
         <td>
          also
         </td>
         <td>
<!--
//          <a href="gSetHandler.htm#MAP_CB">MAP_CB</a>,
//          <a href="gSetHandler.htm#UNMAP_CB">UNMAP_CB</a>,
//          <a href="gSetHandler.htm#DESTROY_CB">DESTROY_CB</a>, 
-->
            <a href="gSetHandler.htm#CLICK">CLICK</a>, 
            <a href="gCanvas.htm#IDROP">IDROP</a>, 
<!--
?           <a href="gSetHandler.htm#GETFOCUS_CB">GETFOCUS_CB</a>, 
            <a href="gSetHandler.htm#KILLFOCUS_CB">KILLFOCUS_CB</a>, 
            <a href="gSetHandler.htm#ENTERWINDOW_CB">ENTERWINDOW_CB</a>,
            <a href="gSetHandler.htm#LEAVEWINDOW_CB">LEAVEWINDOW_CB</a>, 
-->
<!--            <a href="gSetHandler.htm#HELP_CB">HELP_CB</a> -->
            <a href="gSetHandler.htm#KEY">KEY</a>,
            <a href="gSetHandler.htm#MOUSEMOVE">MOUSEMOVE</a>: All common handlers are supported.<br>
          <a name=tech></a>
<!--
            <br>
            <br>
?           Drag & Drop attributes and handlers are supported, but SHOWDRAGDROP must be set to NO. 
-->
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            As this is a <a href="g_paranormal.htm">paranormalised function</a>, and with no expectation that you should attempt to memorise 
            this lot, except maybe "dsaa", you can assume that all of the following are potentially perfectly valid, with the fairly obvious 
            restrictions that any parameters <i>must</i> be in strict dsaa-order, and no args without attributes:
            <br>
            <br>
<small>
<!--eucode>
                        gList(data)
                        gList(data, selected)
                        gList(data, attributes)
                        gList(data, attributes, args)
                        gList(data, selected, attributes, args)  -- (the full set)
</eucode-->
<pre>
<font color="#7060A8">                        gList</font><font color="#0000FF">(</font><font color="#000000">data</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gList</font><font color="#0000FF">(</font><font color="#000000">data</font><font color="#0000FF">,</font><font color="#000000"> selected</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gList</font><font color="#0000FF">(</font><font color="#000000">data</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gList</font><font color="#0000FF">(</font><font color="#000000">data</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gList</font><font color="#0000FF">(</font><font color="#000000">data</font><font color="#0000FF">,</font><font color="#000000"> selected</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">) </font><font color="#000080"><i> -- (the full set)</i></font>
</pre>
</small>
            <br>
            Note that in practice selected is actually defined as <a href="object.htm">object</a>, and attributes as 
            <a href="sequence.htm">sequence</a> rather than string, but are thoroughly verified to be of the documented types, 
            after being repositioned via xpGUI.e/paranormalise_raa() [the non-optional data fetch routine never being moved].
            <br>
            <br>
<!--
            The first parameter was, and in fact still is, either a rtn or a sequence which xpGUI.e stored: that was simply not anywhere
            near as helpful as hoped, and made these docs awful/confusing. It is planned to rip that out and make it strictly rtn-only.
-->
            The new xpEditer program uses (or rather is planned to use) a gList to implement the syntax-coloured editable text area, though it 
            is the application code which interprets all keystrokes (bar basic navigation) and modifies the text, not the gList() itself.<br>
            In that particular case the data will contain the plain text lines, with get_data() splitting requested lines into the appropriate
            syntax-colouring fragments on demand, in a similar fashion to what Edita has always done, with bracket/comment carryFwds[]s, and a
            linelengths[], since recalculating 50,000 lengths gets a bit costly when you do it on every single keystroke, etc.<br>
            Since it may be opening hundreds of files and some of those could be rather long, it initially returns 0 for the longest line, which 
            (temporarily) disables the horizontal scrollbar, then uses a background process and redraws with a proper scrollbar when done.<br>
            Likewise it might (semi-deliberately) get the initial bracket/comment carry forwards wrong, and correct the current tab if needed,
            which is only goiung to matter when it is re-opening a file from the previous session, with the viewport not at the very top.<br>
            During the implementation of all that, I will of course move as much reusable code into xpGUI.e as I can, for potential use on a 
            gTable(), which I already know will be needed for demo\rosetta\7guis\Cells.exw and possibly several other things.
            <br>
            <br>
            Another example: it might be wise to keep the last 1,000 log entries in a circular list, rather than keep all and gradually get
            slower and slower before inevitably running out of memory and crashing and finally creating a ridiculously humongous ex.err.<br>
            It is the responsibility of the gList() to deal with all that quickly and efficiently, whatever you decide to do.<br>
         </td>
        </tr>
       </table>
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
