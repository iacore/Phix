<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">gSetAttribute</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include xpGUI.e
           <br>
           <br>
            gSetAttribute(<a href="gdx.htm">gdx</a> id, <a href="string.htm">string</a> name, 
                                                        <a href="object.htm">object</a> v,
                                                        <a href="sequence.htm">sequence</a> args={})
<!--
            <br>
            <i>-- or --</i>
            <br>
//          IupSetAttributePtr(<a href="Ihandle.htm">Ihandln</a> ih, <a href="string.htm">string</a> name, <a href="atom.htm">atom</a> v)
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Sets an interface element attribute.
            <br>
            <br>
            id: Identifier(s) of the interface element, may <i>not</i> be NULL, or contain any embedded NULLs.<br>
<!--
            If NULL will set in the global environment.
-->
            name: name of the attribute, usually a literal string such as "SIZE", several more examples below.<br>
            v: value of the attribute. If NULL the default setting will be used (at least in most cases).<br>
            args: (optional) if not {} then <code>v = <a href="sprintf.htm">sprintf</a>(v,args)</code> is performed.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
<!--
//       Note that under pwa/p2js there is no distinction between IupSetAttribute() and IupSetStrAttribute(), largely due to the
          fact that everything is mapped to JavaScript attributes and CSS style settings. I suppose that means there could be some desktop/Phix
          programs which either accidentally or deliberately store a machine address and then poke that memory to effect an attribute change,
          and obviously that sort of thing will simply not work in a browser. Thankfully nothing like that has yet been encountered.
          <br>
          <br>
//        In contrast under pwa/p2js IupSetAttributePtr() simply stores a value without any of the validation or mapping performed by
//        IupSet[Str]Attribute(), and IupGetAttributePtr() will crash rather than fail should there have been no prior corresponding 
//        invocation of IupSetAttributePtr(), or perhaps gSetHandler() and similar. Said crash may or may not be replaced with (say)
//        <code>return NULL;</code>, as further implementation and refinement of pGUI.js progresses, and as needs demand.
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            Note that, unlike say <a href="gSetHandler.htm">gSetHandler[s]</a>(), the "with-s" version of this routine, ie
            <a href="gSetAttributes.htm">gSetAttributes</a>(), has a different purpose/api, being multiple attributes in one string, 
            the common implementation of inlined attributes as part of most interface element creation routines, and in fact invokes 
            this routine multiple times, whereas this "without-s" version sets a single attribute, potentially to a non-string value, 
            and with both being able to apply said to one or more elements.
            <br>
            <br>
            When args is not {}, the implicit sprintf obviously crashes when v is not string, contains bad format specifiers, etc. <br>
            Otherwise v can be anything, including integer, atom, string, [nested] sequence, or an equivalent string representation, eg:<br>
<!--eucode>
        integer w = 100, h = 180
        gSetAttribute(id,"SIZE",{w,h})
        gSetAttribute(id,"SIZE","%dx%d",{w,h})
        gSetAttributes(id,"SIZE=%dx%d",{w,h})
        gSetAttribute(id,"SIZE",{100,180})
        gSetAttribute({id},"SIZE",{100,180})
        gSetAttribute(id,"SIZE","100x180")
        gSetAttribute(id,"SIZE","{100,180}")
        gSetAttributes(id,"SIZE={100,180}")
        gSetAttributes(id,"SIZE=100x180")
</eucode-->
<pre>
<font color="#004080">        integer</font><font color="#000000"> w</font><font color="#0000FF"> =</font><font color="#000000"> 100</font><font color="#0000FF">,</font><font color="#000000"> h</font><font color="#0000FF"> =</font><font color="#000000"> 180</font>
<font color="#7060A8">        gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#008000">"SIZE"</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">w</font><font color="#0000FF">,</font><font color="#000000">h</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#7060A8">        gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#008000">"SIZE"</font><font color="#0000FF">,</font><font color="#008000">"%dx%d"</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">w</font><font color="#0000FF">,</font><font color="#000000">h</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#7060A8">        gSetAttributes</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#008000">"SIZE=%dx%d"</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">w</font><font color="#0000FF">,</font><font color="#000000">h</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#7060A8">        gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#008000">"SIZE"</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">100</font><font color="#0000FF">,</font><font color="#000000">180</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#7060A8">        gSetAttribute</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">id</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#008000">"SIZE"</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">100</font><font color="#0000FF">,</font><font color="#000000">180</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#7060A8">        gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#008000">"SIZE"</font><font color="#0000FF">,</font><font color="#008000">"100x180"</font><font color="#0000FF">)</font>
<font color="#7060A8">        gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#008000">"SIZE"</font><font color="#0000FF">,</font><font color="#008000">"{100,180}"</font><font color="#0000FF">)</font>
<font color="#7060A8">        gSetAttributes</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#008000">"SIZE={100,180}"</font><font color="#0000FF">)</font>
<font color="#7060A8">        gSetAttributes</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#008000">"SIZE=100x180"</font><font color="#0000FF">)</font>
</pre>
            <small><i>(obviously that&rsquo;s nine slightly different ways to achieve exactly the same thing, <br>
            the first being the fastest, inlined like the last generally the neatest overall code.)</i></small>
            <br>
            <br>
            You can also use the following near-aliases:<br>
            <a name=gSetInt></a>
            <br>
            <b>gSetInt</b>(<a href="gdx.htm">gdx</a> id, <a href="string.htm">string</a> name, <a href="integer.htm">integer</a> i)<br>
            <a name=gSetDouble></a>
            <b>gSetDouble</b>(<a href="gdx.htm">gdx</a> id, <a href="string.htm">string</a> name, <a href="atom.htm">atom</a> a)<br>
            <br>
            Apart from the tighter validation of the third parameter (on desktop/Phix only), and perhaps more crucially a clearer declaration 
            of intent which can help make the code a bit more self-documenting, they behave identically to gSetAttribute(). 
<!-- [DEV I might yet change my mind about this...] -->
            Since JavaScript is a <a href="glossary.htm#typeless">typeless</a> language, under 
            <a href="p2js.htm"><span class="pwap2js">pwa/p2js</span></a>, there isn&rsquo;t 
            actually any additional validation (not that I&rsquo;d struggle to add some), and 
            for now they really are just pure aliases.
            <br>
            <a name=gToggleInt></a>
            <br>
            For boolean attributes <b>gToggleInt</b>(id,"NAME") can be used instead of gSetInt(id,"NAME",not gGetInt(id,"NAME")).
<!-- worth sayin when it was called a gToglle, but now it's not:
            , and of
            course it&rsquo;ll do a <a href="gCheckbox.htm">gCheckbox</a>&rsquo;s "VALUE" just as well as all kinds of other things.
-->
<!--
//          <br>
//          IupSetAttribute can store only constant strings (like "Title", "30", etc) or application pointers.<br>
//          An error occurs if val is neither an atom nor a string.<br>
//          The given value is not duplicated as a string, only a reference is stored.<br>
//          Therefore, you can store application custom attributes, such as a context structure to be used in a handler.
//          <br>
//          <br>
//          <b>IMPORTANT</b>: The value of the v parameter <b>must</b> be a literal constant or otherwise outlive the interface element:<br>
//          <i>Unacceptable</i>: IupSetAttribute(ih,name,sprintf(fmt,x)) <small> -- (never ever ever do this)</small><br>
//          Acceptable: <a href="IupSetStrAttribute.htm">IupSet<b>Str</b>Attribute</a>(ih,name,sprint(fmt,x))<br>
//          Acceptable: <a href="IupSetStrAttribute.htm">IupSet<b>Str</b>Attribute</a>(ih,name,fmt,x)<br>
//          Acceptable: <a href="IupSetAttributes.htm">IupSetAttributes</a>(ih,"name="&fmt,x)<br>
//          Acceptable: <a href="IupSetAttributes.htm">IupSetAttributes</a>(ih,sprintf("name=%s",{fmt}),x)<br>
//          <i>Unacceptable</i>: IupSetAttribute(ih,name,stringvar) <small> -- (unless stringvar is suitably long-lived or actually a constant)</small><br>
//          Acceptable: <a href="IupSetStrAttribute.htm">IupSet<b>Str</b>Attribute</a>(ih,name,stringvar)<br>
//          Acceptable: <a href="IupSetAttributes.htm">IupSetAttributes</a>(ih,"%s=%s",{name,stringvar})<br>
-->
<!-- now in technicalia:
            Should v be a raw memory pointer, you must ensure it remains valid for the lifetime of the interface element.
-->
<!--
            <br>
            In contrast, the attribute name is always internally duplicated.
-->
<!--
DEV everything following may need to be rewritten...<br><br>
            <br>
//          While IupSetAttribute can set strings and pointers, they must be retrieved differently (see <a href="IupGetAttribute.htm">IupGetAttribute</a>).
            <br>
            <br>
//          Apart from the tighter validation of the last parameter, IupSetAttributePtr behaves identically to IupSetAttribute.<br>
//          While technically unnecessary, IupSetAttributePtr allows code to be more self-documenting, and is the logical counterpart to 
//          <a href="IupGetAttribute.htm">IupGetAttributePtr</a> (for which, in contrast, there is a very real need).<br>
//          Note that IupSetAttributePtr should only be used for "always pointer/handle/NULL" rather than "string/NULL" settings.
            <br>
            <br>
            Note that, unlike (say) <a href="gSetHandle.htm">gSetHandler</a>[s](), gSetAttribute() and <a href="gSetAttributes.htm">gSetAttributes</a>()
            are quite different.
-->
         </td>
        </tr>
<!--
          <a name=utility></a>
        <tr>
         <td>
          <b>Utility Functions</b>
         </td>
         <td>
            The following procedures can also be used to set attributes on an interface element:
            <br>
            <br>
//          <b>IupSetAttributeId</b>(<a href="Ihandle.htm">Ihandle</a> ih, <a href="string.htm">string</a> name, <a href="integer.htm">integer</a> id, 
//                                   <a href="string.htm">atom_string</a> v)<br>
//          <b>IupSetAttributeId2</b>(<a href="Ihandle.htm">Ihandle</a> ih, <a href="string.htm">string</a> name, <a href="integer.htm">integer</a> lin, col, 
//                                    <a href="string.htm">atom_string</a> v)
            <br>
            <br>
            id, lin, col: used when the attribute has additional ids.
            <br>
            <br>
            Id based attributes are always non inheritable, so these functions do not propagate the attribute to the children. 
            <br>
            <br>
            The same rules for non-volatility of v also apply here.
            <br>
            <br>
//          See also the Utility Functions in <a href="IupSetStrAttribute.htm#utility">IupSetStrAttribute</a>, which allow direct setting of integer, floating point, and RGB values.
//          Note that the C function <span class="illegal">IupSetfAttributeId</span> is not wrapped by pGUI, however that functionality is covered by the optional parameters of 
//          <a href="IupSetStrAttribute.htm#utility">IupSetStrAttributeId</a>.
         </td>
        </tr>
-->
        <tr>
         <td>
          <b>Example 1:</b>
         </td>
         <td>
<!--
gSetAttribute(indicator, "VALUE", "ON") -- (and
IupSetAttribute(dlg, sprintf("MY ITEM (%d)", i), "Test")
atom myStruct = allocate(sizeofstruct(myData))
IupSetAttribute(dlg, "MYDATA", myStruct)
-- Note that myStruct must be manually freed after dlg is destroyed
-->
<!--eucode>
gSetAttribute(dlg, "VISIBLE", true) -- (and/or "YES"/"NO")
gSetAttribute(text, "VALUE", "Hello!")
</eucode-->
<pre>
<font color="#7060A8">gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">dlg</font><font color="#0000FF">,</font><font color="#008000"> "VISIBLE"</font><font color="#0000FF">,</font><font color="#004600"> true</font><font color="#0000FF">)</font><font color="#000080"><i> -- (and/or "YES"/"NO")</i></font>
<font color="#7060A8">gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">text</font><font color="#0000FF">,</font><font color="#008000"> "VALUE"</font><font color="#0000FF">,</font><font color="#008000"> "Hello!"</font><font color="#0000FF">)</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 2:</b>
         </td>
         <td>
<!--eucode>
-- Enable or disable several buttons and/or menu entries simultaneously
gSetAttribute({b_cut,b_copy,b_delete,m_cut,m_copy,m_delete}, "ACTIVE", selected_text!={})
</eucode-->
<pre>
<font color="#000080"><i>-- Enable or disable several buttons and/or menu entries simultaneously</i></font>
<font color="#7060A8">gSetAttribute</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">b_cut</font><font color="#0000FF">,</font><font color="#000000">b_copy</font><font color="#0000FF">,</font><font color="#000000">b_delete</font><font color="#0000FF">,</font><font color="#000000">m_cut</font><font color="#0000FF">,</font><font color="#000000">m_copy</font><font color="#0000FF">,</font><font color="#000000">m_delete</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#008000"> "ACTIVE"</font><font color="#0000FF">,</font><font color="#000000"> selected_text</font><font color="#0000FF">!=</font><font color="#800000">{}</font><font color="#0000FF">)</font>
</pre>
<!--
            <br>
            You could equivalently use <a href="IupSetStrAttribute.htm#utility">IupSetInt</a> and a 
            <a href="integer.htm#bool">bool</a>, probably ever-so-slightly faster, but probably not by enough to ever actually measure.
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="gSetHandler.htm">gSetHandler</a>,
          <a href="gGetAttribute.htm">gGetAttribute</a>,
          <a href="gSetAttributes.htm">gSetAttributes</a>,
<!--          <a href="IupGetAllAttributes.htm">IupGetAllAttributes</a>,-->
          <a href="gSetGlobal.htm">gSetGlobal</a>,
          <a href="gGetGlobal.htm">gGetGlobal</a>
          <br>
          <a name=COMMON></a>   
         </td>
        </tr>
        <tr>
         <td>
          <b>Common:</b>
         </td>
         <td>
            The following attributes are common to several controls/interface element types.<br>
            See also <a href="gGetAttribute.htm#COMMON">gGetAttribute</a> for some other common read-only attributes.<br>
          <a name=ACTIVE></a>
         </td>
        </tr>
        <tr>
         <td>
          ACTIVE
         </td>
         <td>
            (inherited) Activates or inhibits user interaction. Value true/"YES" (active), false/"NO" (inactive). Default: true. <br>
<!--
//          Alternatively, <a href="IupSetStrAttribute.htm#utility">IupSetInt</a>() and <a href="IupGetAttribute.htm#utility">IupGetInt</a>()
//          can be used with true/false, or <a href="IupSetStrAttribute.htm#utility">IupToggleInt</a>().<br>
-->
            An interface element is only active if its native parent is also active.<br>
            ACTIVE can also be set for non-interactive controls and may affect their visual feedback.<br>
<!-- ??
            In GTK the inactive dialogs will still be able to move, resize and change their Z-order.<br>
-->
            Affects: All controls that have visual representation.
            <br>
          <a name=CANFOCUS></a>
         </td>
        </tr>
        <tr>
         <td>
          CANFOCUS
         </td>
         <td>
            <!--(creation only)--> 
            Enables the focus traversal of the control. Default: true.<br>
<!--??          In Windows the button will respect CANFOCUS in opposite to the other controls. <br>-->
          <a name=EXPAND></a>
         </td>
        </tr>
        <tr>
         <td>
?         EXPAND
         </td>
         <td>
            Allows the element to expand, fulfilling empty spaces inside its container.
            <br>
            <br>
            It is a non inheritable attribute, but fairly obviously the overall behaviour depends on the expansion settings of both
            a container and its children: if expansion is disabled on a container then it gets a (fixed) minumum width/height that
            accomodates the largest of its children, none of the other children (including any sub-containers) being able to expand 
            into anything beyond that. Conversely a container can only expand in a given direction if at least one of its children 
            can also expand in that direction, except when the container itself is a "sole child", namely being the single child of a
            <a href="gDialog.htm">gDialog</a>, <a href="gFrame.htm">gFrame</a>, or a direct child of <a href="gTabs.htm">gTabs</a>, 
            in which case it still expands but uses the <a href="gBox.htm#SPACE">SPACE</a> attribute to distribute any excess and
            reposition its children appropriately, with XPG_SPACE_NONE being the thing that completely disables expansion.
            Note that a fatal error may trigger on attempts to completely disable expansion on such "sole child" containers, that 
            is when you should instead be disabling resizing on the dialog or expansion on the gFrame/gTabs.
<!--
                        and in fact an error 
            occurs on any attempt to set EXPAND to anything other than BOTH/YES on any such <a href="gBox.htm">gH/Vbox</a>.</small>
-->
<!-- I think I just said that!...
            <br>
            <br>
            Likewise no child element can expand beyond the limits of its parent container and therefore the expansion of all 
            child elements is effectively constrained by the expansion settings of its parent.
-->
<!-- NO: Just put expand=NO on the container!
            <br>
            <br>
            A further caveat is "FREE" expansion, whereby a child can expand in the specified direction but does not affect the
            expansion of the container, for instance a separator might want to be full width/height but only as a shorthand for
            matching its siblings.
-->
            <br>
            <br>
<!--
             a container  expansion a container inherit its parents EXPAND attribute. <br>
            In other words, although EXPAND is non inheritable, it is inheritable for containers. <br>
            So if you set it at a container it will not affect its children, except for those who are containers.<br>
            The expansion is done equally for all expandable elements in the same container.<br>
            <br>
            For a container, the actual EXPAND value will be always a combination of its own value and the value of its children, <br>
            in the sense that a container can only expand if its children can expand too in the same direction.<br>
            <br>
            The HORIZONTALFREE and VERTICALFREE values will not behave as normal expansion. <br>
            These values will NOT affect the expansion of the container when set at its children, <br>
            the children will simply expand to the available free space at the container.<br>
            See <a href="xplayout.htm">Layout Management</a> for more details on sizes.<br>
-->
<!--<wbr>"HORIZONTALFREE", <wbr>"VERTICALFREE"-->
            Value: "NONE"[/"NO"/"FALSE"], <wbr>"HORIZONTAL", <wbr>"VERTICAL", or "BOTH"[/"YES"]. <small>(must be a string)</small><br>
            While gGetAttribute(id,"EXPAND") returns one of the above four strings, gGetInt(id,"EXPAND") returns 0..3, with bit 0b01
            indicating horizontal expansion and bit 0b10 indicating vertical expansion.
            <br>
            <br>
            Defaults:<br>
            "NONE" for <a href="gButton.htm">gButton</a>,
                       <a href="gCheckbox.htm">gCheckbox</a>, 
                       <a href="gDatePick.htm">gDatePick</a>,   
                       <a href="gDropDown.htm">gDropDown</a>,
                       <a href="gLabel.htm">gLabel</a>,
                       <a href="gProgressBar.htm">gProgressBar</a>,
                       <a href="gSlider.htm">gSlider</a>,
                       <a href="gSpin.htm">gSpin</a>,
                       <a href="gText.htm">gText</a>, <br>
<!--        "HORIZONTAL" for <a href="gCheckbox.htm">gCheckbox</a>, -->
            "BOTH" for <a href="gCanvas.htm">gCanvas</a>,
                       <a href="gGraph.htm">gGraph</a>,
                       <a href="gList.htm">gList</a>,
                       <a href="gTable.htm">gTable</a>,
                       <a href="gTreeView.htm">gTreeView</a>, <br>
            "BOTH" for <a href="gDialog.htm">gDialog</a>, 
                       <a href="gBox.htm">gH/Vbox</a>,
                       <a href="gFrame.htm">gFrame</a>,
                       <a href="gSplit.htm">gSplit</a>,
                       <a href="gTabs.htm">gTabs</a>.
            <br>
            <br>
            Note that the natural size of a gCanvas, and hence all the (next three) canvas-based controls, is just the size of 
            one character, and a gTreeView, with a natural size of {0,0}, is even smaller. Hence should you disable expansion 
            on any of them you will almost certainly need to specify an explicit <a href="#SIZE">SIZE</a>.
            <br>
            <br>
            Affects: All elements, except menus.<br>
<!--
            See Also: <a href="#SHRINK">SHRINK</a>
-->
          <a name=FONT></a>
         </td>
        </tr>
        <tr>
         <td>
          FONT
         </td>
         <td>
            (inherited) A string defining the font, in the format "&lt;face&gt;, &lt;styles&gt; &lt;size&gt;". Default: "Helvetica, 9".
            <br>
            <br>
            Since font face names are not a standard between Windows and GTK, a few names are specially handled to improve application portability. 
            Should you want to use fonts that work for all systems we recommend using Helvetica, Courier, and Times, which (are used directly for
            HTML/CSS/JavaScript and) always have a native system equivalent:
            <br>
            <br>
            <p align="center"><img alt="Fonts" src="images/xpgFonts.png" width="502" height="98"/></p>

<!-- Drove meself mad trying to centre this, easy peasy in a browser, but simply impossible in a chm file, I reluctantly concluded.
DOH: 
            <center>
            <p align="center">
            <div class="wraptocenter">
             <div id="images" class="images">
            <table>
-->
<!--            <table style="border:1px solid black;margin-left:auto;margin-right:auto;">-->
<!--            <table align="center"> -->
<!--            <center style="display:block;">-->
<!--
            <table style="display:block;border:none;width:fit-content;float:none;margin-left:auto;margin-right:auto;">
            <tr>
                <th>Recommended</th>
                <th style="text-align:center">Windows</th>
                <th style="text-align:center">GTK</th>
                <th>Description</th>
            </tr>
            <tr>
                <td><strong>Helvetica</strong></td>
                <td style="text-align:center">Arial</td>
                <td style="text-align:center">Sans</td>
                <td>without serif, variable spacing</td>
            </tr>
            <tr>
                <td><strong>Courier</strong></td>
                <td style="text-align:center">Courier New</td>
                <td style="text-align:center">Monospace</td>
                <td>with serif, fixed spacing</td>
            </tr>
            <tr>
                <td><strong>Times</strong></td>
                <td style="text-align:center">Times New Roman</td>
                <td style="text-align:center">Serif</td>
                <td>with serif, variable spacing</td>
            </tr>
            </table>
-->
<!--
             </div>
            </div>
            <div class="clear"></div>
            </p>
            </center>
            <br>
-->
            <br>
            All nine fonts listed above work on any backend - it is no harder to map all three columns three ways than only do one column two ways.
            The supported font style is a combination of: Bold and Italic (or omit both for "Normal"). <br>
            Note that Underline and Strikeout are <i>not</i> supported by pango/GTK (and cairo fonts are indeed pretty hideous) and hence those styles
            are not supported by xpGUI either. 
<!-- it might be possible to fake it with gCanvasLine(), there is probably some hideous CSS hack for that -->
<!--
erm, lets not promise vapourware, and `invoked via "FONT"` must have meant set those attributes there, but implement them via some internal REDRAW. Better:
            Note that Underline and Strikeout are are not directly supported by pango/GTK (and cairo fonts are indeed pretty hideous) and hence in fact 
            implemented as entirely separate UNDERLINE and STRIKEOUT attributes, which can theoretically be used independently, but are clobbered every 
            time FONT is set.
            - if needed it might be possible/would be more sensible to add entirely separate UNDERLINE and STRIKEOUT attributes to selected controls, 
            which could then I suppose be indirectly invoked via "FONT", that is if/when they actually exist, which may be never. <br>
-->
            Unsupported values raise an error. The face names are case-sensitive and must exactly match those shown above, whereas in contrast "bold" 
            and "italic" (for no particularly good reason) are actually perfectly acceptable and automatically mapped to their capitalised equivalents. 
            <br>
            <br>
            Fonts are automatically inherited at the point of mapping/display, and cached/pooled to minimise 
            <a name=mru></a>resource usage<small><sup><a href="#mru1">1</a></sup></small>.
<!--
//          Note that means if you gSetAttribute(id1,"FONT","Helvetica, 9") and gSetAttribute(id2,"FONT","Sans, 9"), then gGetAttribute(id2,"FONT")
//          will likely return "Helvetica" rather than "Sans", that is assuming they have both been internally mapped to the same thing (eg "Arial").
            <small><i>(Excess cacheing might itself cause problems:
            should you ever need an automatic purge of unused fonts, say on every 10<small><sup>th</sup></small> new, just let me know.)</i></small>
-->
            <br>
            <br>
            Font size is in points (1/72 inch) or in pixels (using negative values).
            <br>
            <br>
            Examples:
            <br>
            <br>
<!--eucode>
    "Times, Bold 18"
    "Arial, 24" -- (no style)
    "Courier New, Italic -30" -- (size in pixels)
</eucode-->
<pre>
<font color="#008000">    "Times, Bold 18"
    "Arial, 24"</font><font color="#000080"><i> -- (no style)</i></font>
<font color="#008000">    "Courier New, Italic -30"</font><font color="#000080"><i> -- (size in pixels)</i></font>
</pre>
<!--
            <br>
            On Windows the native handle can be obtained using the "HFONT" attribute.<br>
            On Motif the native handle can be obtained using the "XMFONTLIST" and "XFONTSTRUCT" attributes. The selected X Logical Font Description string can be obtained from the attribute "XLFD".<br>
            On GTK the native handle can be obtained using the "PANGOFONTDESC" attribute.
            <br>
-->
<!--
            <br>
            <h3>Auxiliary Attributes</h3>
            These will change the FONT attribute, and depend on it. <br>
            They are used only to set partial FONT parameters of style and size. <br>
            To do that the FONT attribute is parsed, changed and updated to the new value in the common format definition. <br>
            This means that if the attribute was set in X-Windows format or in the old Windows and IUP formats, the previous value will be replaced by a new value in the common format definition. <br>
            Pango additional styles will also be removed.
            <br>
            <br>
            <table>
             <tr><td>FONTSTYLE</td><td>(non inheritable) Replaces or returns the style of the current FONT attribute. Since font styles are case sensitive, this attribute is also case sensitive.</td></tr>
             <tr><td>FONTSIZE</td><td>(non inheritable) Replaces or returns the size of the current FONT attribute.</td></tr>
             <tr><td>FONTFACE</td><td>(non inheritable) Replaces or returns the face name of the current FONT attribute.</td></tr>
             <tr><td>CHARSIZE</td><td>(read-only, non inheritable) Returns the average character size of the current FONT attribute. 
[DEV]...
                                        This is the factor used by the 
                    <a href="#SIZE">SIZE</a><a href="notpgui.htm"><span style="color:lime;"><sup>+</sup></span></a>
                                        attribute to convert its units to pixels.</td></tr>
            </table>
-->
            <br>
            Affects: All, except <a name=em></a>menus<small><sup><a href="#em2">2</a></sup>.
            <br>
            <br>
            <a name=mru1></a><small><sup><a href="#mru">1</a></sup>
            That means for example under WinAPI after setting the font to "Sans, italic 9", gGetAttribute() returns "Arial, Italic 9", which is quite
            correct, since the internal font cache is for obvious reasons keyed/indexed on all the post-mapped/platform specific values, and further,
            any changes it has made would in fact still work just fine even on a different backend, though would obviously get a different mapping. 
            You can of course experiment with other fonts, but there is no guarantee they will be portable, and should you find any other (useful) 
            sets that seem consistent/equivalent between WinAPI, GTK, and JavaScript I will happily add them to the internal code and above table.
            </small>
            <br><br>
            <a name=em2></a><small><sup><a href="#em">2</a></sup> Note that any attempt to set the font on a menu triggers an error, especially under 
            WinAPI, hence that is not supported, and probably never will be.<br>
            </small>
          <a name=MARGIN></a>
         </td>
        </tr>
        <tr>
         <td>
          MARGIN
         </td>
         <td>
            (not inherited) Specifies the initial spacing around any content. See <a href="xplayout.htm">Layout Management</a>.
            <br>
            <br>
<!--
            While there is a fairly clear distinction between them on (say) a <a href="gButton.htm">gButton</a>, where the
            MARGIN is outside the button border and the PADDING is inside, on most controls the difference is a little more
            subtle. In some senses a containing <a href="gBox.htm">gH/Vbox</a> "owns" the child margins but "applies" the
            child padding a bit more selectively, and of course "owns" its own padding, but actually does nothing with its
            own margins, since that is a parental responsibility. The lines are indeed often a little blurred, for instance
            a <a href="gButton.htm">gButton</a> absolutely must deal with its own PADDING, but it just makes more sense for
            a container to deal with that of a <a href="gLabel.htm">gLabel</a> and several other similar controls, rather 
            than duplicate the exact same code on <i>every</i> single control type. With a few obvious exceptions, it is
            probably fair to say that any given layout could be achieved using only MARGIN, or only PADDING, or any one of
            several dozen different mixtures of the two. The only unbreakable rule is that margins are always dealt with by
            the parent, whereas padding is sometimes handled by the element itself and sometimes by the parent. The general
            advice is to favour using MARGIN whenever you can, and PADDING only when you must.
            <br>
            <br>
            Technically a <a href="gDialog.htm">gDialog</a> cannot have a MARGIN, but it quietly sets the PADDING instead,
            since that is almost certainly what you meant.
-->
            Note that on desktop/Phix margins are always handled by the parent container, and as such cannot be set on a 
            <a href="gDialog.htm">gDialog</a> but must instead be set on its (sole) child.
            <br>
            <br>
            Specified as between one and four values: <br>
            &nbsp;&nbsp;&nbsp;&nbsp;m or {m} or "m" =&gt; {m,m,m,m}, <br>
            &nbsp;&nbsp;&nbsp;&nbsp;{tb,lr} or "tbxtl" =&gt; {tb,lr,tb,lr}, <br>
            &nbsp;&nbsp;&nbsp;&nbsp;{t,lr,b} or "txlrxb"=&gt; {t,lr,b,lr}, or <br>
            &nbsp;&nbsp;&nbsp;&nbsp;{t,r,b,l} or "txrxbxl" <small><i>[unchanged]</i></small><br>
            as integer values corresponding to the top, right, bottom, and left margins(/padding) respectively/clockwise.
            <br>
            <br>
            Default: 0 (no margin). [DEV that may not be quite true...]<br>
            Returns: a sequence of length 1..4, or the atom 0 if not set.

<!--
[DEV]
//          <b><a href="gSetAttribute.htm#PADDING">PADDING</a></b>:
//          For <a href="gBox.htm">gHbox</a> and <a href="gBox.htm">gVbox</a> (only), is seamlessly added to the MARGIN of 
//          any child element.
//          <br>
//          <a name=GAP></a>
//          <br>
//          <b><a href="gSetAttribute.htm#GAP">GAP</a></b>: Specifies the initial spacing between any content. Applies to 
//          <a href="gBox.htm">gHbox</a> and <a href="gBox.htm">gVbox</a> only, an error occurs on attempting to set this 
//          on any other control. As with PADDING this is seamlessly added to the MARGIN of any child element.
//          <br>
//          <br>
//          <b><a href="gSetAttribute.htm#MARGIN">MARGIN</a></b>: It is illegal to specify a margin on any element that is 
//          not the immediate child of either a <a href="gBox.htm">gHbox</a> or <a href="gBox.htm">gVbox</a>, and that 
//          <i>includes</i> any such top-level container, which must instead use the PADDING and GAP attributes instead.
-->
            <br>
            <br>
            Affects: All elements except <a href="gDialog.htm">gDialog</a> and <a href="gMenu.htm">menus</a>.
            <br>
            <br>
<!--
            Aside: Under pGUI/IUP, these and similar attributes <i>are</i> inherited, which meant that often I would look
            at a layout and say "I just need an extra 5 pixels there", and BOOM, I got an extra 525 pixels with everything
            now completely out of place, and/or it has explicitly non-inheritable versions of dozens of such things, which 
            is fine in a way I guess, but not exactly elegant either. There may be some cases where inheritable versions
            get the first prototype up and running a tiny bit quicker, but having to avoid them for the rest of eternity 
            after that point just seems completely wrong, and I would much rather do it the other way: add explicitly
            inherited versions should they ever be useful, instead of explicitly non-inherited ones of <i>everything</i>
            to get around the inevitable issues that would occur (hindsight always has 20/20 vision and all that). Or I
            could perhaps just have "gApplyAttributeRecursivelyIfNotSet()", with (inlined) gSetAttributes using "*="...
            <br>
            <br>
-->
            See also: <a href="gBox.htm#GAP">GAP</a>,
                      <a href="#PADDING">PADDING</a>,
                      <a href="xplayout.htm#BoxModel">The HTML/CSS Box Model</a>.
            <br>
          <a name=MAXSIZE></a>
          <a name=MINSIZE></a>
         </td>
        </tr>
        <tr>
         <td>
?         MAXSIZE,<br>
          MINSIZE
         </td>
         <td>
            (non inheritable) Specifies the element maximum/minimum size in pixels during the layout process. <br>
??          Default: 0x0 (None), except for <a href="gDialog.htm">gDialog</a>() and <a href="gFrame.htm">gFrame</a>,
            which get a default MINSIZE based on their <a href="#TITLE">TITLE</a> at creation time. Note that for
            many elements the <a href="gGetAttribute.htm#NATURALSIZE">NATURALSIZE</a> also acts as a MINSIZE.
            <br>
            <br>
            See <a href="xplayout.htm">Layout Management</a> for more details on sizes.
            <br>
            <br>
            Value; "widthxheight", where width and height are integer values corresponding to the horizontal and vertical size, respectively, in pixels.
            <br>
            <br>
            You can also set only one of the parameters by removing the other one and maintaining the separator "x", but this is equivalent of setting the other value to 0. 
            For example: "x40" (height only = "0x40") or "40x" (width only = "40x0").
            <br>
            <br>
            Affects: All, except menus.
            <br>
            <br>
            Notes: The limits are applied during the layout computation. It will(/may?) limit the Natural size and the Current size. 
            <br>
            <br>
            If the element can be expanded, then its empty space will NOT be occupied by other controls although its size will be limited.
            <br>
            <br>
            On a <a href="gDialog.htm">gDialog</a> will also limit the interactive resize of the dialog, and if less than the natural size
            will allow/cause some elements to be cropped, and/or introduce automatic scrollbars[?].
            <br>
            <br>
            See Also: <a href="#SIZE">SIZE</a>
<!--
            <a href="gSetAttribute.htm#MAXSIZE">MAXSIZE</a>,
            The windowing system will not be able to change the size beyond this limit. Default: 65535x65535.
            <a href="gSetAttribute.htm#MINSIZE">MINSIZE</a>
DEV: needs testing, then the apppropriate comment adding here...
            Some systems define a very minimum size greater than this, for instance in Windows the horizontal minimum size includes the window decoration buttons.
-->
            <br>
          <a name=PADDING></a>
         </td>
        </tr>
        <tr>
         <td>
?         PADDING
         </td>
         <td>
<!--            DEV <b>NB</b> PADDING seems to be doing the job of MARGIN at the moment, that will probably get "fixed".<br>-->
            (not inherited, creation only) Similar to <a href="#MARGIN">MARGIN</a>, but only applicable to controls with a visible border
            (as listed below) and inside rather than outside that.
            <br>
            <br>
            Note that (unlike <a href="#MARGIN">MARGIN</a>) if both PADDING and <a href="#SIZE">SIZE</a> are set on a control, 
            in the <a href="xplayout.htm#BoxModel">box model</a> the former is subtracted from the latter when setting the 
            inner content size. In other words when set <a href="#SIZE">SIZE</a> always directly controls the border position 
            and changing the padding (impossible values aside) does not alter that, however padding when no usersize is set 
            <i>can and does</i> change the border position.
            <br>
            <br>
            Default: 0 (no padding). [DEV that may not be quite true...]<br>
            Returns: a sequence of length 1..4 (see <a href="#MARGIN">MARGIN</a>), or the atom 0 if not set.
            <br>
            <br>
            Affects: <a href="gButton.htm">gButton</a>, 
                     <a href="gDatePick.htm">gDatePick</a>,
                     <a href="gDropDown.htm">gDropDown</a>, 
<!--                    <a href="gFrame.htm">gFrame</a>, <a href="gProgressBar.htm">gProgressBar</a>, -->
                     <a href="gText.htm">gText</a>.
            <br>
            <br>
            See also: <a href="gBox.htm#GAP">GAP</a>,
                      <a href="#MARGIN">MARGIN</a>,
                      <a href="#SIZE">SIZE</a>,
                      <a href="xplayout.htm#BoxModel">The HTML/CSS Box Model</a>.
            <br>
          <a name=SIZE></a>
         </td>
        </tr>
        <tr>
         <td>
          SIZE
         </td>
         <td>
            (non inheritable) Specifies the element User size, and returns the Current size, in pixels.
            <!--units proportional to the size of a character.-->
<!--
            <br>
            <br>
            See <a href="xplayout.htm">Layout Management</a> for more details on sizes.
-->
            <br>
            <br>
            Value: "widthxheight", where width and height are integer values corresponding to the horizontal and vertical size, respectively.
            <!--, in characters fraction unit (see Notes below). -->
            <br>
            <br>
            You can also set only one of the parameters by removing the other one and maintaining the separator "x", but this is equivalent to 
            setting the other value to 0. <br>
            For example: "x40" (height only = "0x40") or "40x" (width only = "40x0").
            <br>
            <br>
            When this attribute is consulted the Current size of the control is returned.
            <br>
            <br>
<!--
            Notes<br>
            The size units observes the following heuristics:
            <br>
            <br>
            Width in 1/4&rsquo;s of the average width of a character for the current <a href="#FONT">FONT</a> of each control. <br>
            Height in 1/8&rsquo;s of the average height of a character for the current <a href="#FONT">FONT</a> of each control. <br>
            So, a SIZE="4x8" means 1 character width and 1 character height.
            <br>
            <br>
            Notice that this is the average character size, the space occupied by a specific string is always different to
            the number of characters times the average character size, except when using a monospaced font like Courier. <br>
            Usually for common strings this size is smaller than the actual size, so it is a good practice to leave more room than expected if you use the SIZE attribute. <br>
            For smaller font sizes this difference is more noticeable than for larger font sizes.
            <br>
            <br>
//          When this attribute is changed, the <a href="#RASTERSIZE">RASTERSIZE</a> attribute is automatically updated.
            <br>
            <br>
            SIZE depends on <a href="#FONT">FONT</a>, so when <a href="#FONT">FONT</a> is changed and SIZE is set, 
//          then <a href="#RASTERSIZE">RASTERSIZE</a> is also updated. [DEV?]
            <br>
            <br>
            The average character size of the current <a href="#FONT">FONT</a> can be obtained from the CHARSIZE attribute.
            <br>
            <br>
            To obtain the last computed Natural size of the element in pixels, use the read-only attribute 
            <a href="gGetAttribute.htm#NATURALSIZE">NATURALSIZE</a>.
            <br>
            <br>
            To obtain the User size of the element in pixels after it is mapped, use the attribute USERSIZE. (Since 3.12)
            <br>
            <br>
-->
            A User size of "0x0" can be set, it can also be set using NULL. If both values are 0 then NULL is returned.
            <br>
            <br>
            If you wish to use the User size only as an initial size, change this attribute to NULL after the control is mapped, 
            the returned size in <a href="gGetAttribute.htm">gGetAttribute</a> will still be the Current size.
            <br>
            <br>
            The element is NOT immediately repositioned. Call <a href="gRedraw.htm">gRedraw</a> to update the dialog layout.
            <br>
            <br>
<!--
            <a href="IupMap.htm">IupMap</a> also updates the dialog layout even if it is already mapped, so calling it or calling <a href="IupShow.htm">IupShow</a>, 
            <a href="IupShowXY.htm">IupShowXY</a> or <a href="IupPopup.htm">IupPopup</a> (they all call <a href="IupMap.htm">IupMap</a>) will also update the dialog layout.
            <br>
            <br>
-->
            See <a href="xplayout.htm">Layout Management</a> for mode details on sizes.
            <br>
            <br>
<!--
            Note that GTK is obscenely obstinate and outrageously overcomplicated when it comes to setting and retrieving sizes.
            <br>
            <br>
-->
            Note this replaces the RASTERSIZE attribute of pGUI, and xpGI_from_pGUI.e replaces "SIZE" with "SIZE[*charsize]" which needs manual fixup.
            <br>
            <br>
            A possible future enhancement is to allow say "[r]em:20x1" which would set the size to the [root] width of 20 and height of one 'm', with
            "pt", "px" and perhaps some other JavaScript-compatible size units also being allowed, and perhaps do better than that "SIZE[*charsize]".
            Or perhaps "SIZE:PT", "MARGIN:EM", etc..
            <br>
            <br>
            Affects: All, except menus.
            <br>
            <br>
            See Also: 
            <a href="#FONT">FONT</a>, 
<!--            <a href="#RASTERSIZE">RASTERSIZE</a>, -->
            <a href="gRedraw.htm">gRedraw</a>
            <br>
          <a name=TIP></a>
         </td>
        </tr>
        <tr>
         <td>
          TIP
         </td>
         <td>
            (non inheritable, write-only) Text to be shown when the mouse lies over the element.
            <br>
            <br>
            Value: Text.<br>
<!--
//          <br>
//          <br>
//          Additional Tip Attributes: These attributes affect the TIP display.
//          <br>
//          <br>
//          TIPBALLOON [Windows Only]: The tip window will have the appearance of a cartoon "balloon" with rounded corners and a stem pointing to the item. Default: NO.
//          <br>
//          <br>
//          TIPBALLOONTITLE [Windows Only]: When using the balloon format, the tip can also has a title in a separate area.
//          <br>
//          <br>
//          TIPBALLOONTITLEICON [Windows Only]: When using the balloon format, the tip can also has a pre-defined icon in the title area. <br>
//          Values can be:<br>
//          "0" - No icon (default)<br>
//          "1" - Info icon <br>
//          "2" - Warning icon<br>
//          "3" - Error Icon
//          <br>
//          <br>
//          TIPBGCOLOR [Windows and Motif Only]: The tip background color. Default: "255 255 225" (Light Yellow)
//          <br>
//          <br>
//          TIPDELAY [Windows and Motif Only]: Time the tip will remain visible. Default: "5000". In Windows the maximum value is 32767 milliseconds.
//          <br>
//          <br>
//          TIPFGCOLOR [Windows and Motif Only]: The tip text color. Default: "0 0 0" (Black)
//          <br>
//          <br>
//          TIPFONT [Windows and Motif Only]: The font for the tip text. If not defined the font used for the text is the same as the FONT attribute for the element. <br>
//          If the value is SYSTEM then, no font is selected and the default system font for the tip will be used.
//          <br>
//          <br>
//          TIPICON [GTK only]: name of an image to be displayed in the TIP. See <a href="IupImage.htm">IupImage</a>. (GTK 2.12)
//          <br>
//          <br>
//          TIPMARKUP [GTK only]: allows the tip string to contains Pango markup commands. Can be "YES" or "NO". Default: "NO". Must be set before setting the TIP attribute. (GTK 2.12)
//          <br>
//          <br>
//          TIPRECT (non inheritable): Specifies a rectangle inside the element where the tip will be activated. Format: "%d %d %d %d"="x1 y1 x2 y2". Default: all the element area. (GTK 2.12)
//          <br>
//          <br>
//          TIPVISIBLE: Shows or hides the tip under the mouse cursor. Use values "YES" or "NO". <br>
//          In GTK will only trigger the tip state, the given value will be ignored. Returns the current visible state. (GTK 2.12) (get since 3.5)
//          <br>
//          <br>
//          Additional Tip Handlers (since 3.5)
//          <br>
//          <br>
//          TIPS_CB: Action before a tip is displayed.
//          <br>
//          <br>
//          functiontiops_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> x, y)<br>
//          ih: identifier of the element that activated the event.<br>
//          x, y: cursor position relative to the top-left corner of the element
//          <br>
//          <br>
//          Affects: All controls that have visual representation, except menus.
//          <br>
-->
          <a name=TITLE></a>
         </td>
        </tr>
        <tr>
         <td>
          TITLE
         </td>
         <td>
            The textual title/description of the interface element, often used to modify otherwise static text, such as that on a 
            <a href="gButton.htm">gButton</a>, <a href="gCheckbox.htm">gCheckbox</a>, <a href="gDialog.htm">gDialog</a>, 
            <a href="gFrame.htm">gFrame</a>, <a href="gLabel.htm">gLabel</a>, and maybe more. 
            In most cases (except gDialog) the natural size is made large enough to include all the text in the selected font, even using multiple 
            lines, plus things like the button/frame borders or the check box, if any. 
            <br>
            <br>
            There is a completely unrelated GTITLE attribute on a <a href="gGraph.htm">gGraph</a>, similar things are handled quite differently
            on <a href="gTable.htm">gTable</a> and <a href="gTabs.htm">gTabs</a> (see links for detals), and the static text on menus is handled 
            by <a href="gMenu.htm#MenuAttr">gMenuSetAttribute</a>() rather than this routine.
            <br>
            <br>
            Value: Text.
            <br>
            <br>
            Default: ""
            <br>
            <br>
            Notes<br>
            The '\n' character usually is accepted for line change (except for menus, but they&rsquo;re not handled here anyway). <br>
            The "&" character can be used to define a MNEMONIC, use "&&" to show the "&" character instead of defining a mnemonic. <br>
            If a mnemonic is defined such as "&File" then the 'F' is underlined and pressing &lt;Alt F&gt; activates the control.<br>
            In some cases/platforms/backends the underline only appears while the Alt key is being held down.
            <br>
            <br>
            An automatic mapping of "&&","&","_" to "&","_","__" occurs under GTK, since that does mnemonics differently.<br>
            Likewise HTML/JS/CSS uses (eg) &lt;span class="malt"&gt;F&lt;/span&gt;ile, though that is stripped when read back.<br>
            Hence <a href="gGetAttribute.htm">gGetAttribute</a>(id,"TITLE") might not perfectly match that previously set, that is 
            consistently between platforms/backends, and gSetAttribute(id,"TITLE",gGetAttribute(id,"TITLE")) or similar may have 
            detrimental effects, on some. 
            However, it should be fairly rare to ever fetch a static title, I would hope, since that cannot possibly ever be manually 
            modified by the user anyway, but if you must, use say match("File",txt) rather than txt=="&File".
            <br>
            <br>
            Aside: I am not sure what this ever meant, and I&rsquo;ve not deliberately put anything like this in, but I shall reproduce 
            the following quote from the original IUP documentation: <i>&ldquo;For the benefit of GTK, should you define a mnemonic using 
            "&" and the string has an underscore, then make sure that the mnemonic comes before the underscore&rdquo;</i>. 
            I suspect but cannot be sure it is an outdated remark, from before "_"-&gt;"__", or some subtle buglette I have hopefully 
            <i>not</i> accidentally managed to replicate.
            <br>
            <br>
<!--
            In GTK, if the MARKUP attribute is defined then the title string can contains pango markup commands. 
            Works only if a mnemonic is NOT defined in the title. Not valid for menus.
            <br>
            <br>
-->
            Note that <a href="gRedraw.htm">gRedraw</a>() may be required after changing the title for all characters to be shown.
            <br>
            <br>
            The following generally applies <small><i>(named parameters used for illustrative purposes, but probably best avoided on 
            xpGUI&rsquo;s <a href="g_paranormal.htm">paranormalised</a> routines)</i>:
            <br>
            <br>
<!--eucode>
            gdx id = gElement(title:=`This loses`, attributes:=`TITLE:="This beats that but..."`)
            gSetAttribute(id,`TITLE`,`This wins`)
</eucode-->
<pre>
<font color="#7060A8">            gdx</font><font color="#000000"> id</font><font color="#0000FF"> =</font><font color="#000000"> gElement</font><font color="#0000FF">(</font><font color="#000000">title</font><font color="#0000FF">:=</font><font color="#008000">`This loses`</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">:=</font><font color="#008000">`TITLE:="This beats that but..."`</font><font color="#0000FF">)</font>
<font color="#7060A8">            gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#008000">`TITLE`</font><font color="#0000FF">,</font><font color="#008000">`This wins`</font><font color="#0000FF">)</font>
</pre>
            </small>
            <br>
            Affects: All elements with an associated text.
            <br>
            <br>
            See Also: <a href="#FONT">FONT</a>
            <br>
          <a name=VISIBLE></a>
         </td>
        </tr>
        <tr>
         <td>
?         VISIBLE
         </td>
         <td>
            Shows or hides the element.
            <br>
            <br>
            Value: "YES" (visible), "NO" (hidden). Default: "YES"
            <br>
            <br>
            Notes: An interface element is only visible if its native parent is also visible.
            <br>
            <br>
            Affects: All controls that have visual representation, except menus.<br>
          <a name=tech></a>
         </td>
        </tr>
<!--
//        <a name=BGCOLOR></a>
//      <tr>
//       <td>
//?           BGCOLOR
//       </td>
//       <td>
//          The element&rsquo;s background color.
//          <br>
//          <br>
//          On a <a href="gCanvas.htm">gCanvas</a>, and hence <a href="gGraph.htm">gGraph</a>, <a href="gList.htm">gList</a>, and 
//          <a href="gTable.htm">gTable</a>, equivalent to <a href="gCanvas.htm#gCanvasSetBackground.htm">gCanvasSetBackground</a>().
-->
<!--
//          <br>
//          <br>
//          Value: The RGB components, eg #FF0080 or equivalently "255 0 128" (three numbers 0..255).
//          <br>
//          <br>
//<X!X--
//          Values should be between 0 and 255, separated by a blank space. For example "255 0 128", red=255 blue=0 green=128.
//          <br>
//          <br>
//--X>
//          Default: The <a href="gGetGlobal.htm#DLGBGCOLOR">DLGBGCOLOR</a> global attribute, or inherited from the parent.
//<X!X--
//          <br>
//          <br>
//          Hexadecimal notation in the format "#RRGGBB" is also accepted, eg "255 0 128" can also be written as "#FF0080".--X>
//<X!X-- DEV test me
//          Note that double quotes are still required when using <a href="IupSetAttributes.htm">IupSetAttributes</a>(), and therefore the inline string attributes 
//          of control creation, eg IupSetAttributes(ih,`BGCOLOR="#FF0080"`).
//--X>
//          <br>
//          <br>
//          Affects: All controls that have visual representation, but with some restrictions. 
//          <br>
//          <br>
//          Several controls have transparent parts that are not affected by the BGCOLOR.
//          <br>
//          <br>
//          Run demo\pGUI\sample.exw and use the menu to toggle the dialog BACKGROUND, the dialog BGCOLOR and the children BGCOLOR. 
//          <br>
//          <br>
//          See Also: <a href="#FGCOLOR">FGCOLOR</a>, <a href="gGetGlobal.htm#DLGBGCOLOR">DLGBGCOLOR</a> 
//          <br>
-->
<!--
//       </td>
//      </tr>
-->
<!--
DEV we's gona need this... or something much simpler...
          <a name=CURSOR></a>
        <tr>
         <td>
          CURSOR
         </td>
         <td>
            (non inheritable) Defines the element&rsquo;s cursor.
            <br>
            <br>
            Value: Name of a cursor. 
            <br>
            <br>
            It will check first for the following predefined names:
             <div id="images" class="images">
  <table align="center" class="centered-table">
    <tr>  <th width="35" height="27" class="style1">  <img border="0" src="images/cursors/win_logo.png"/></th>
          <th width="35" height="27" class="style1">  <img border="0" src="images/cursors/x-win_logo.gif"/></th>   <th>Name</th> </tr>
    <tr>  <td width="35" height="27" align="center">&nbsp;</td>  <td width="35" height="27" align="center">&nbsp;</td>    <td>&quot;NONE&quot; or &quot;NULL&quot;</td> </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_arrow.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">  <img border="0" src="images/cursors/xcursor_arrow.gif" width="24" height="24"/></td>    <td>&quot;ARROW&quot;</td>    </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_busy.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">  <img border="0" src="images/cursors/xcursor_busy.gif" width="24" height="24"/></td>     <td>&quot;BUSY&quot;</td> </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_cross.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">  <img border="0" src="images/cursors/xcursor_cross.gif" width="24" height="24"/></td>    <td>&quot;CROSS&quot;</td>    </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_hand.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">  <img border="0" src="images/cursors/xcursor_hand.gif" width="24" height="24"/></td>     <td>&quot;HAND&quot;</td> </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_help.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">  <img border="0" src="images/cursors/xcursor_help.gif" width="24" height="24"/></td>     <td>&quot;HELP&quot;</td> </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_move.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">  <img border="0" src="images/cursors/xcursor_move.gif" width="24" height="24"/></td>     <td>&quot;MOVE&quot;</td> </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_pen.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">  <img border="0" src="images/cursors/xcursor_pen.gif" width="24" height="24"/></td>      <td>&quot;PEN&quot;</td>  </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_resize_ns.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">  <img border="0" src="images/cursors/xcursor_resize_n.gif" width="24" height="24"/></td>  <td>&quot;RESIZE_N&quot;</td> </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_resize_ns.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">  <img border="0" src="images/cursors/xcursor_resize_s.gif" width="24" height="24"/></td>  <td>&quot;RESIZE_S&quot;</td> </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_resize_ns.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">  <img border="0" src="images/cursors/xcursor_resize_ns.gif" width="24" height="24"/></td>  <td>&quot;RESIZE_NS&quot;</td>  </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_resize_we.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">  <img border="0" src="images/cursors/xcursor_resize_w.gif" width="24" height="24"/></td>  <td>&quot;RESIZE_W&quot;</td> </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_resize_we.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">  <img border="0" src="images/cursors/xcursor_resize_e.gif" width="24" height="24"/></td>  <td>&quot;RESIZE_E&quot;</td> </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_resize_we.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">  <img border="0" src="images/cursors/xcursor_resize_we.gif" width="24" height="24"/></td>  <td>&quot;RESIZE_WE&quot;</td>  </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_resize_nesw.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">  <img border="0" src="images/cursors/xcursor_resize_ne.gif" width="24" height="24"/></td>  <td>&quot;RESIZE_NE&quot;</td>  </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_resize_nesw.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">  <img border="0" src="images/cursors/xcursor_resize_sw.gif" width="24" height="24"/></td>  <td>&quot;RESIZE_SW&quot;</td>  </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_resize_nwse.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">  <img border="0" src="images/cursors/xcursor_resize_nw.gif" width="24" height="24"/></td>  <td>&quot;RESIZE_NW&quot;</td>  </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_resize_nwse.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">  <img border="0" src="images/cursors/xcursor_resize_se.gif" width="24" height="24"/></td>  <td>&quot;RESIZE_SE&quot;</td>  </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_text.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">  <img border="0" src="images/cursors/xcursor_text.gif" width="24" height="24"/></td>     <td>&quot;TEXT&quot;</td> </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_appstarting.gif" width="24" height="29"/></td>
          <td width="35" height="27" align="center">----</td>                                                                                 <td>&quot;APPSTARTING&quot; (Windows Only)</td>   </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_no.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">----</td>                                                                                 <td>&quot;NO&quot; (Windows Only)</td>    </tr>
    <tr>  <td width="35" height="27" align="center">  <img border="0" src="images/cursors/wcursor_uparrow.gif" width="24" height="24"/></td>
          <td width="35" height="27" align="center">  <img border="0" src="images/cursors/xcursor_uparrow.gif" width="24" height="24"/></td>   <td>&quot;UPARROW&quot;</td> </tr>
  </table>
             </div>
            <div class="clear"></div>
            <br>
            Default: "ARROW"
            <br>
            <br>
            The Windows SDK recommends that cursors and icons should be implemented as resources rather than created at run time.
            <br>
            <br>
            The GTK cursors have the same appearance of the X-Windows cursors, although GTK cursors can have more than 2 colors depending on the X-Server.
            <br>
            <br>
            If it is not a pre-defined name, then will check for other system cursors. <br>
            In Windows the value will be used to load a cursor from the application resources. (??)<br>
            In Motif the value will be used as a X-Windows cursor number, see definitions in the X11 header "cursorfont.h". <br>
            In GTK the value will be used as a cursor name, see the GDK documentation on Cursors. 
            <br>
            <br>
            If no system cursors were found then the value will be used to try to find an IUP image with the same name. <br>
            Use <a href="IupSetHandle.htm">IupSetHandle</a> to define a name for an <a href="IupImage.htm">IupImage</a>, 
            however the image needs an extra attribute and some specific characteristics:
            <br>
            <br>
            For an image to represent a cursor, it should have the attribute "HOTSPOT" to define the cursor hotspot (place where the mouse click is actually effective). <br>
            The default value is "0:0".
            <br>
            <br>
            Usually only color indices 0, 1 and 2 can be used in a cursor, where 0 will be transparent (must be "BGCOLOR"). <br>
            The RGB colors corresponding to indices 1 and 2 are defined just as in regular images. <br>
            In Windows and GTK the cursor can have more than 2 colors. <br>
            Cursor sizes are usually less than or equal to 32x32.
            <br>
            <br>
//          The cursor will only change when the interface system regains control or when <a href="IupFlush.htm">IupFlush</a> is called.
            <br>
            <br>
            The Windows SDK recommends that cursors and icons should be implemented as resources rather than created at run time.
            <br>
            <br>
?           When the cursor image is no longer necessary, it must be destroyed through function <a href="IupDestroy.htm">IupDestroy</a>. <br>
            Attention: the cursor cannot be in use when it is destroyed. 
            <br>
            <br>
            Affects: <a href="IupDialog.htm">IupDialog</a>, <a href="IupCanvas.htm">IupCanvas</a>
            <br>
            <br>
            See Also <a href="IupImage.htm">IupImage</a>
            <br>
         </td>
        </tr>
-->
<!--
//        <a name=FGCOLOR></a>
//      <tr>
//       <td>
//?       FGCOLOR
//       </td>
//       <td>
//          The foreground color, usually of the text.
//          <br>
//          <br>
//          Value: The RGB components, eg #FF0080 or equivalently "255 0 128" (three numbers 0..255). 
//          Default: <a href="gCanvas.htm#XPG_colours">XPG_BLACK</a>.
//<X!X-- DEV test me
//          Note that double quotes are still required when using <a href="IupSetAttributes.htm">IupSetAttributes</a>(), and therefore the inline string attributes 
//          of control creation, eg IupSetAttributes(ih,`FGCOLOR="#FF0080"`).
//--X>
//          <br>
//          <br>
//          Affects: All controls that have visual representation.
//          <br>
//          <br>
//          See Also: <a href="#BGCOLOR">BGCOLOR</a>
//          <br>
//       </td>
//      </tr>
-->
<!--
//        <a name=NAME></a>
//      <tr>
//       <td>
//        NAME
//       </td>
//       <td>
//          (non inheritable) Name of the control inside the dialog. Not related to <a href="IupSetHandle.htm">IupSetHandle</a>.
//          <br>
//          <br>
//          Value: Text.
//          <br>
//          <br>
//          The NAME value will be used by <a href="IupGetDialogChild.htm">IupGetDialogChild</a> to find a child inside a dialog.
//          <br>
//          <br>
//          Affects: All controls.
//          <br>
//          <br>
//          See Also: <a href="IupGetDialogChild.htm">IupGetDialogChild</a>
//          <br>
//       </td>
//      </tr>
-->
<!--
          <a name=SCROLLBAR></a>
        <tr>
         <td>
?         SCROLLBAR<a href="notpgui.htm#IupCanvas">
         </td>
         <td>
            (creation only) Associates a horizontal and/or vertical scrollbar to the element.
            <br>
            <br>
            Value: "VERTICAL", "HORIZONTAL", "YES" (both) or "NO" (none). Default: "NO"
            <br>
            <a name=secondaryattributes></a>
            <br>
            For <a href="IupCanvas.htm">IupCanvas</a> and <a href="IupGLCanvas.htm">IupGLCanvas</a> only, the following secondary attributes apply.
            <br>
            <br>
            <h3>Configuration Attributes</h3> (non inheritable)
            <table>
             <tr><td>DX<a href="notpgui.htm#IupCanvas"><span style="color:orange; font-size:75%;"><sup>?</sup></span></a></td>
                 <td>Size of the thumb in the horizontal scrollbar. Also the horizontal page size. Default: "0.1".</td></tr>
             <tr><td>DY<a href="notpgui.htm#IupCanvas"><span style="color:orange; font-size:75%;"><sup>?</sup></span></a></td>
                 <td>Size of the thumb in the vertical scrollbar. Also the vertical page size. Default: "0.1".</td></tr>
             <tr><td>POSX</td><td>Position of the thumb in the horizontal scrollbar. Default: "0.0".</td></tr>
             <tr><td>POSY</td><td>Position of the thumb in the vertical scrollbar. Default: "0.0".</td></tr>
             <tr><td>XMIN</td><td>Minimum value of the horizontal scrollbar. Default: "0.0".</td></tr>
             <tr><td>XMAX</td><td>Maximum value of the horizontal scrollbar. Default: "1.0".</td></tr>
             <tr><td>YMIN</td><td>Minimum value of the vertical scrollbar. Default: "0.0".</td></tr>
             <tr><td>YMAX</td><td>Maximum value of the vertical scrollbar. Default: "1.0".</td></tr>
             <tr><td>LINEX</td><td>The amount the thumb moves when an horizontal step is performed. Default: 1/10th of DX. (since 3.0)</td></tr>
             <tr><td>LINEY</td><td>The amount the thumb moves when a vertical step is performed. Default: 1/10th of DY. (since 3.0)</td></tr>
             <tr><td>XAUTOHIDE</td><td>When enabled, if DX >= XMAX-XMIN then the horizontal scrollbar is hidden. Default: "YES". (since 3.0)</td></tr>
             <tr><td>YAUTOHIDE</td><td>When enabled, if DY >= YMAX-YMIN then the vertical scrollbar is hidden. Default: "YES". (since 3.0)</td></tr>
             <tr><td>XHIDDEN</td><td>returns if the scrollbar is hidden or not when XAUTOHIDE=Yes. (since 3.13)</td></tr>
             <tr><td>YHIDDEN</td><td>returns if the scrollbar is hidden or not when YAUTOHIDE=Yes. (since 3.13)</td></tr>
            </table>
            <br>
            &nbsp;
            <br>
            The scrollbar allows you to create a virtual space associated to the element. <br>
            In the image below, such space is marked in red, as well as the attributes that affect the composition of this space. <br>
            In green you can see how these attributes are reflected on the scrollbar.
            <br>
            <br>
            <div class="wraptocenter">
             <img src="images/scrollbar.gif"/>
            </div>
            <br>
            <br>
            Hence you can clearly deduce that POSX is limited to XMIN and XMAX-DX, or  XMIN&lt;=POSX&lt;=XMAX-DX. 
            <br>
            <br>
            Usually applications configure XMIN and XMAX to a region in World coordinates, and set DX to the canvas visible area in World coordinates. <br>
//          Since the canvas can have scrollbars and borders, its visible area in pixel coordinates can be easily obtained using the DRAWSIZE attribute.
            <br>
            <br>
            IMPORTANT: the LINEX, XMAX and XMIN attributes are only updated in the scrollbar when the DX attribute is updated.
            <br>
            <br>
            IMPORTANT: when working with a virtual space with integer coordinates, set XMAX to the integer size of the virtual space, NOT to "width-1", <br>
            or the last pixel of the virtual space will never be visible. <br>
            If you decide to let XMAX with the default value of 1.0 and to control only DX, then use the formula DX=visible_width/width.
            <br>
            <br>
            IMPORTANT: When the virtual space has the same size as the canvas, i.e. when DX &gt;= XMAX-XMIN, the scrollbar is automatically hidden if XAUTOHIDE=Yes. <br>
            The width of the vertical scrollbar (the same as the height of the horizontal scrollbar) can be obtained using the SCROLLBARSIZE global attribute (since 3.9).
            <br>
            <br>
            The same is valid for YMIN, YMAX, DY and POSY. But remember that the Y axis is oriented from top to bottom in IUP. <br>
            So if you want to consider YMIN and YMAX as bottom-up oriented, then the actual YPOS must be obtained using YMAX-DY-POSY.
            <br>
            <br>
            IMPORTANT: Changes in the scrollbar parameters do NOT generate ACTION nor <a href="gSetHandler.htm#SCROLL_CB">SCROLL_CB</a> handler events. <br>
            If you need to update the canvas contents call your own action handler or call <a href="gRedraw.htm">gRedraw</a>. <br>
            But a change in the DX attribute may generate a RESIZE_CB handler event if XAUTOHIDE=Yes.
            <br>
            <br>
            If you have to change the properties of the scrollbar (XMIN, XMAX and DX) but you want to keep the thumb still (if possible) in the same relative position, <br>
            then you have to also recalculate its position (POSX) using the old position as reference to the new one. <br>
            For example, you can convert it to a 0-1 interval and then scale to the new limits:
            <br>
            <br>
            old_posx_relative = (old_posx - old_xmin)/(old_xmax - old_xmin) <br>
            posx = (xmax - xmin)*old_posx_relative + xmin
            <br>
            <br>
            <a href="IupList.htm">IupList</a>, <a href="IupTree.htm">IupTree</a>, and <a href="IupText.htm">IupText</a>/<a href="IupText.htm#IupMultiLine">IupMultiLine</a> 
            scrollbars are automatically managed and do NOT have the POS*, *MIN, *MAX and D* attributes.
            <br>
            <br>
            When updating the virtual space size, or when the canvas is resized, if XAUTOHIDE=Yes then calculating the actual DX size can be very tricky. <br>
            Here is a helpful algorithm:
            <br>
            <br><small>
<X!X--eucode>
procedure scrollbar_update(Ihandle ih, integer view_width, integer view_height)
-- view_width and view_height are the virtual space size
-- here we assume XMIN=0, XMAX=1, YMIN=0, YMAX=1
integer {elem_width, elem_height} = IupGetIntInt(ih, "RASTERSIZE")
integer canvas_width, canvas_height
integer scrollbar_size = IupGetInt(NULL, "SCROLLBARSIZE")
integer border = IupGetInt(ih, "BORDER")

    -- if view is greater than canvas in one direction,
    -- then it has scrollbars,
    -- but this affects the opposite direction
    elem_width -= 2 * border;  -- remove BORDER (always size=1)
    elem_height -= 2 * border;
    canvas_width = elem_width;
    canvas_height = elem_height;
    if view_width>elem_width then -- check for horizontal scrollbar
        canvas_height -= scrollbar_size  -- affect vertical size
    end if
    if view_height>elem_height then
        canvas_width -= scrollbar_size
    end if
    if view_width<=elem_width and view_width>canvas_width then  -- check if still has horizontal scrollbar
        canvas_height -= scrollbar_size
    end if
    if view_height<=elem_height and view_height>canvas_height then
        canvas_width -= scrollbar_size
    end if
    if canvas_width<0 then canvas_width = 0 end if
    if canvas_height<0 then canvas_height = 0 end if

    IupSetFloat(ih, "DX", canvas_width/view_width)
    IupSetFloat(ih, "DY", canvas_height/view_height)
end procedure
</eucode--X>
<pre>
<font color="#008080">procedure</font><font color="#000000"> scrollbar_update</font><font color="#0000FF">(</font><font color="#7060A8">Ihandle</font><font color="#000000"> ih</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> view_width</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> view_height</font><font color="#0000FF">)</font>
<font color="#000080"><i>-- view_width and view_height are the virtual space size
-- here we assume XMIN=0, XMAX=1, YMIN=0, YMAX=1</i></font>
<font color="#004080">integer</font><font color="#0000FF"> {</font><font color="#000000">elem_width</font><font color="#0000FF">,</font><font color="#000000"> elem_height</font><font color="#0000FF">} =</font><font color="#7060A8"> IupGetIntInt</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "RASTERSIZE"</font><font color="#0000FF">)</font>
<font color="#004080">integer</font><font color="#000000"> canvas_width</font><font color="#0000FF">,</font><font color="#000000"> canvas_height</font>
<font color="#004080">integer</font><font color="#000000"> scrollbar_size</font><font color="#0000FF"> =</font><font color="#7060A8"> IupGetInt</font><font color="#0000FF">(</font><font color="#004600">NULL</font><font color="#0000FF">,</font><font color="#008000"> "SCROLLBARSIZE"</font><font color="#0000FF">)</font>
<font color="#004080">integer</font><font color="#000000"> border</font><font color="#0000FF"> =</font><font color="#7060A8"> IupGetInt</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "BORDER"</font><font color="#0000FF">)
</font>
<font color="#000080"><i>    -- if view is greater than canvas in one direction,
    -- then it has scrollbars,
    -- but this affects the opposite direction</i></font>
<font color="#000000">    elem_width</font><font color="#0000FF"> -=</font><font color="#000000"> 2</font><font color="#0000FF"> *</font><font color="#000000"> border</font><font color="#0000FF">; </font><font color="#000080"><i> -- remove BORDER (always size=1)</i></font>
<font color="#000000">    elem_height</font><font color="#0000FF"> -=</font><font color="#000000"> 2</font><font color="#0000FF"> *</font><font color="#000000"> border</font><font color="#0000FF">;</font>
<font color="#000000">    canvas_width</font><font color="#0000FF"> =</font><font color="#000000"> elem_width</font><font color="#0000FF">;</font>
<font color="#000000">    canvas_height</font><font color="#0000FF"> =</font><font color="#000000"> elem_height</font><font color="#0000FF">;</font>
<font color="#008080">    if</font><font color="#000000"> view_width</font><font color="#0000FF">&gt;</font><font color="#000000">elem_width</font><font color="#008080"> then</font><font color="#000080"><i> -- check for horizontal scrollbar</i></font>
<font color="#000000">        canvas_height</font><font color="#0000FF"> -=</font><font color="#000000"> scrollbar_size </font><font color="#000080"><i> -- affect vertical size</i></font>
<font color="#008080">    end if
    if</font><font color="#000000"> view_height</font><font color="#0000FF">&gt;</font><font color="#000000">elem_height</font><font color="#008080"> then</font>
<font color="#000000">        canvas_width</font><font color="#0000FF"> -=</font><font color="#000000"> scrollbar_size</font>
<font color="#008080">    end if
    if</font><font color="#000000"> view_width</font><font color="#0000FF">&lt;=</font><font color="#000000">elem_width</font><font color="#008080"> and</font><font color="#000000"> view_width</font><font color="#0000FF">&gt;</font><font color="#000000">canvas_width</font><font color="#008080"> then </font><font color="#000080"><i> -- check if still has horizontal scrollbar</i></font>
<font color="#000000">        canvas_height</font><font color="#0000FF"> -=</font><font color="#000000"> scrollbar_size</font>
<font color="#008080">    end if
    if</font><font color="#000000"> view_height</font><font color="#0000FF">&lt;=</font><font color="#000000">elem_height</font><font color="#008080"> and</font><font color="#000000"> view_height</font><font color="#0000FF">&gt;</font><font color="#000000">canvas_height</font><font color="#008080"> then</font>
<font color="#000000">        canvas_width</font><font color="#0000FF"> -=</font><font color="#000000"> scrollbar_size</font>
<font color="#008080">    end if
    if</font><font color="#000000"> canvas_width</font><font color="#0000FF">&lt;</font><font color="#000000">0</font><font color="#008080"> then</font><font color="#000000"> canvas_width</font><font color="#0000FF"> =</font><font color="#000000"> 0</font><font color="#008080"> end if
    if</font><font color="#000000"> canvas_height</font><font color="#0000FF">&lt;</font><font color="#000000">0</font><font color="#008080"> then</font><font color="#000000"> canvas_height</font><font color="#0000FF"> =</font><font color="#000000"> 0</font><font color="#008080"> end if
</font>
<font color="#7060A8">    IupSetFloat</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "DX"</font><font color="#0000FF">,</font><font color="#000000"> canvas_width</font><font color="#0000FF">/</font><font color="#000000">view_width</font><font color="#0000FF">)</font>
<font color="#7060A8">    IupSetFloat</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "DY"</font><font color="#0000FF">,</font><font color="#000000"> canvas_height</font><font color="#0000FF">/</font><font color="#000000">view_height</font><font color="#0000FF">)</font>
<font color="#008080">end procedure</font>
</pre>
            <br></small>
            Inside the canvas REDRAW handler, the (x,y) offset for drawing is calculated as:
            <br>
            <br><small>
<X!X--eucode>
integer x, y, canvas_width, canvas_height
atom posy = IupGetFloat(ih, "POSY")
atom posx = IupGetFloat(ih, "POSX")

//{canvas_width, canvas_height} = IupGetIntInt(ih, "DRAWSIZE")

if canvas_width<view_width then
    x = floor(-posx*view_width)
else
    x = floor((canvas_width-view_width)/2)  -- for example, center the view
end if
if canvas_height<view_height then
    -- posy is top-bottom, CD and OpenGL are bottom-top.
    -- invert posy reference (YMAX-DY - POSY)
    atom dy = IupGetFloat(ih, "DY")
    posy = 1 - dy - posy
    y = floor(-posy*view_height)
else
    y = floor((canvas_height-view_height)/2)  -- for example, center the view
end if
</eucode--X>
<pre>
<font color="#004080">integer</font><font color="#000000"> x</font><font color="#0000FF">,</font><font color="#000000"> y</font><font color="#0000FF">,</font><font color="#000000"> canvas_width</font><font color="#0000FF">,</font><font color="#000000"> canvas_height</font>
<font color="#004080">atom</font><font color="#000000"> posy</font><font color="#0000FF"> =</font><font color="#7060A8"> IupGetFloat</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "POSY"</font><font color="#0000FF">)</font>
<font color="#004080">atom</font><font color="#000000"> posx</font><font color="#0000FF"> =</font><font color="#7060A8"> IupGetFloat</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "POSX"</font><font color="#0000FF">)

{</font><font color="#000000">canvas_width</font><font color="#0000FF">,</font><font color="#000000"> canvas_height</font><font color="#0000FF">} =</font><font color="#7060A8"> IupGetIntInt</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "DRAWSIZE"</font><font color="#0000FF">)
</font>
<font color="#008080">if</font><font color="#000000"> canvas_width</font><font color="#0000FF">&lt;</font><font color="#000000">view_width</font><font color="#008080"> then</font>
<font color="#000000">    x</font><font color="#0000FF"> =</font><font color="#7060A8"> floor</font><font color="#0000FF">(-</font><font color="#000000">posx</font><font color="#0000FF">*</font><font color="#000000">view_width</font><font color="#0000FF">)</font>
<font color="#008080">else</font>
<font color="#000000">    x</font><font color="#0000FF"> =</font><font color="#7060A8"> floor</font><font color="#0000FF">(</font><font color="#800000">(</font><font color="#000000">canvas_width</font><font color="#0000FF">-</font><font color="#000000">view_width</font><font color="#800000">)</font><font color="#0000FF">/</font><font color="#000000">2</font><font color="#0000FF">) </font><font color="#000080"><i> -- for example, center the view</i></font>
<font color="#008080">end if
if</font><font color="#000000"> canvas_height</font><font color="#0000FF">&lt;</font><font color="#000000">view_height</font><font color="#008080"> then</font>
<font color="#000080"><i>    -- posy is top-bottom, CD and OpenGL are bottom-top.
    -- invert posy reference (YMAX-DY - POSY)</i></font>
<font color="#004080">    atom</font><font color="#000000"> dy</font><font color="#0000FF"> =</font><font color="#7060A8"> IupGetFloat</font><font color="#0000FF">(</font><font color="#000000">ih</font><font color="#0000FF">,</font><font color="#008000"> "DY"</font><font color="#0000FF">)</font>
<font color="#000000">    posy</font><font color="#0000FF"> =</font><font color="#000000"> 1</font><font color="#0000FF"> -</font><font color="#000000"> dy</font><font color="#0000FF"> -</font><font color="#000000"> posy
    y</font><font color="#0000FF"> =</font><font color="#7060A8"> floor</font><font color="#0000FF">(-</font><font color="#000000">posy</font><font color="#0000FF">*</font><font color="#000000">view_height</font><font color="#0000FF">)</font>
<font color="#008080">else</font>
<font color="#000000">    y</font><font color="#0000FF"> =</font><font color="#7060A8"> floor</font><font color="#0000FF">(</font><font color="#800000">(</font><font color="#000000">canvas_height</font><font color="#0000FF">-</font><font color="#000000">view_height</font><font color="#800000">)</font><font color="#0000FF">/</font><font color="#000000">2</font><font color="#0000FF">) </font><font color="#000080"><i> -- for example, center the view</i></font>
<font color="#008080">end if</font>
</pre>
            <br></small>
            Call scrollbar_update from the RESIZE_CB handler and when you change the zoom factor that affects view_width or view_height.
            <br>
            <br>
            Affects: <a href="IupList.htm">IupList</a>, <a href="IupText.htm#IupMultiLine">IupMultiLine</a>, <a href="IupCanvas.htm">IupCanvas</a>
            <br>
            <br>
DEV         See Also: POSX, XMIN, XMAX, DX, POSY, YMIN, YMAX, DY
            <br>
         </td>
        </tr>
-->
<!--
          <a name=RASTERSIZE></a>
        <tr>
         <td>
?         RASTERSIZE
         </td>
         <td>
            (non inheritable)
            Specifies the element User size, and returns the Current size, in pixels.
            <br>
            <br>
            See <a href="xplayout.htm">Layout Management</a> for more details on sizes.
            <br>
            <br>
            Value: "widthxheight", where width and height are integer values corresponding to the horizontal and vertical size, respectively, in pixels.
            <br>
            <br>
            You can also set only one of the parameters by removing the other one and maintaining the separator "x", but this is equivalent of setting 
            the other value to 0. For example: "x40" (height only = "0x40") or "40x" (width only = "40x0").
            <br>
            <br>
            When this attribute is consulted the Current size of the control is returned.
            <br>
            <br>
            Affects: All, except menus.
            <br>
            <br>
            Notes: When this attribute is set, it resets the <a href="#SIZE">SIZE</a> attribute. 
            So changes to the <a href="#FONT">FONT</a> attribute will not affect the User size of the element.
<X!X--
            <br>
            <br>
            To obtain the last computed Natural size of the control in pixels, use the read-only attribute 
            <a href="gGetAttribute.htm#NATURALSIZE">NATURALSIZE</a>.
            <br>
            <br>
            To obtain the User size of the element in pixels after it is mapped, use the attribute USERSIZE.
--X>
            <br>
            <br>
            A User size of "0x0" can be set, it can also be set using NULL. If both values are 0 then NULL is returned.
            <br>
            <br>
            If you wish to use the User size only as an initial size, change this attribute to NULL after the control is mapped, 
            the returned size in <a href="gGetAttribute.htm">gGetAttribute</a> will still be the Current size.<br>
DEV re-test:<br>
            <b>NB</b>:
            In one case (Conway&rsquo;s game of life) setting a timer <i>before</i> the IupShow() prevented the latter from 
            returning for quite some time, and perhaps not until Escape had been keyed, so it may be prudent not to create a
            timer until after RASTERSIZE has been set to NULL, otherwise it may not behave as desired.
            <br>
            <br>
            The element is NOT immediately repositioned. Call <a href="gRedraw.htm">gRedraw</a>() to update the dialog layout. 
            <br>
            <br>
<X!X--
            <a href="IupMap.htm">IupMap</a> also updates the dialog layout even if it is already mapped, so calling it or calling 
            <a href="IupShow.htm">IupShow</a>, <a href="IupShowXY.htm">IupShowXY</a> or <a href="IupPopup.htm">IupPopup</a> (they 
            all call <a href="IupMap.htm">IupMap</a>) will also update the dialog layout.
            <br>
            <br>
--X>
            See Also: <a href="#SIZE">SIZE</a>,
                      <a href="#FONT">FONT</a>
            <br>
         </td>
        </tr>
-->
<!-- no: use minsize on the dialog...
          <a name=SHRINK></a>
        <tr>
         <td>
?         SHRINK
         </td>
         <td>
[DEV not yet attempted]<br>
            An element marked as shrinkable can become smaller than its natural size.<br>
            Value: "YES" (both directions), <wbr>"HORIZONTAL", <wbr>"VERTICAL", <wbr>"HORIZONTALFREE", <wbr>"VERTICALFREE" or "NO".<br>
            Default: "NO".
            <br>
            <br>
            The *FREE settings mean an element should be clipped by default, ie its natural size does not propagate to its container.<br>
            Therefore, zero width/height consequences are to be expected should every child be so marked, though things should start
            to reappear on manual resizing (which may be precisely the effect you are after).
            <br>
            <br>
<X!X--          It is meaningless and invalid to set the *FREE values on a container.--X>
<X!X--
            It is meaningless and invalid to set SHRINK on a container.
            Maybe: (if we can actually get it to work, I'd certainly love the implied default "NO" behaviour in the first place!)
            The HORIZONTALFREE setting has special meaning on gDialog and gFrame, being that TITLE does not impose a minimum size.
            <br>
            <br>
            Maybe:
            Note that the FREE bit is shared by EXPAND and SHRINK, so gSetAttributes(id,"SHRINK=HORIZONTALFREE, EXPAND=HORIZONTAL")
            leaves free off on both, whereas gSetAttributes(id,"SHRINK=HORIZONTAL, EXPAND=HORIZONTALFREE") leaves it on on both.
            <br>
            <br>
--X>
            See Also: <a href="#EXPAND">EXPAND</a>
         </td>
        </tr>
-->
<!--
//        <a name=THEME></a>
//      <tr>
//       <td>
//        THEME<br>
//        NTHEME
//       </td>
//       <td>
//          (since 3.26) Applies a set of attributes to a control. The THEME attribute in inheritable and the NTHEME attribute is NOT inheritable.
//          <br>
//          <br>
//          Value: Name of an <a href="IupUser.htm">IupUser</a> element that contains the attributes. <br>
//          The name is associated in C using <a href="IupSetHandle.htm">IupSetHandle</a>.<br>
//          The name association must be done before setting the attribute. 
//          <br>
//          <br>
//          Notes<br>
//          All attributes in the theme must be strings.
//          <br>
//          <br>
//          Only attributes that are registered in the element will receive its theme value.
//          <br>
//          <br>
//          Attributes that are registered as not being strings, read-only, write-only or handlers will NOT be applied.
//          <br>
//          <br>
//          The theme can contain an specialized sub-theme for the element class. <br>
//          The element class name will be used with a "IUP" prefix to identify the sub-theme. <br>
//          For instance, if the element is a label, then an attribute called "IUPLABEL" can point to another theme name to be 
//          applied at the element additionally to the already applied attributes.
//          <br>
//          <br>
//          The global attribute DEFAULTTHEME can be applied to all elements during creation.
//          <br>
//          <br>
//          Affects: All controls.
//          <br>
//          <br>
//          See Also: 
//          <a href="IupUser.htm">IupUser</a>
//          <br>
//       </td>
//      </tr>
-->
<!--
//        <a name=WID></a>
//      <tr>
//       <td>
//        WID
//       </td>
//       <td>
//          (read-only) (non inheritable) Element identifier in the native interface system. 
//          <br>
//          <br>
//          Value: In Motif, returns the Widget handle.
//          <br>
//          <br>
//          In Windows, returns the HWND handle. 
//          <br>
//          <br>
//          In GTK, return the GtkWidget* handle.
//          <br>
//          <br>
//          Notes: Verification-only attribute, available after the control is mapped.
//          <br>
//          <br>
//          If the control has not been mapped, NULL is returned.
//          For elements that do not have a native representation, (void *)(-1) is returned.
//          <br>
//          <br>
//          Affects: All.
//          <br>
//       </td>
//      </tr>
          <a name=ZORDER></a>
        <tr>
         <td>
          ZORDER
         </td>
         <td>
            (write-only) (non inheritable) Change the ZORDER of a dialog or control. 
            It is commonly used for dialogs, but it can be used to control the z-order of controls in a dialog.
            <br>
            <br>
            Value: Can be "TOP" or "BOTTOM".
            <br>
            <br>
            Affects: All controls that have visual representation.
         </td>
        </tr>
          <a name=FLATSCROLLBAR></a>
        <tr>
         <td>
          FLATSCROLLBAR
         </td>
         <td>
            Complementary attributes when a flat scrollbar is used (a drawn scrollbar). All non inheritable.
            <br>
            <br>
            Used in IupFlatScrollBox, IupFlatList, IupFlatTree and in IupMatrix when FLATSCROLLBAR=Yes is defined.
            <br>
            <br>
            When SHOWFLOATING=Yes the natural size of the IupMatrix is reduced because it will not include the scrollbars area. <br>
            But notice that when vertically scrolling the last column or horizontally scrolling the last line the visibility or 
            the cells are reduced because the scrollbar is show above the cells.
            <br>
            <br>
            The flat scrollbar does not support the XMIN nor YMIN attributes. They are considered to be 0 always. <br>
            The XAUTOHIDE and YAUTOHIDE are considered to be YES always.
            <br>
            <br>
            Also, all numeric attributes are integer numbers.
         </td>
        </tr>
//      <tr>
//       <td>
//        SB_BACKCOLOR
//       </td>
//       <td>
//          color used as background for the scrollbar. By default it will inherit from BGCOLOR.
//       </td>
//      </tr>
//      <tr>
//       <td>
//        SB_FORECOLOR
//       </td>
//       <td>
//          handler and arrow color. Default: "220 220 220". Used instead of FGCOLOR to avoid inheritance problems.
//       </td>
//      </tr>
        <tr>
         <td>
          SB_HIGHCOLOR
         </td>
         <td>
            handler and arrow color when highlight. Default: "132 132 132".
         </td>
        </tr>
        <tr>
         <td>
          SB_PRESSCOLOR
         </td>
         <td>
            handler and arrow color when pressed. Default: "96 96 96".
         </td>
        </tr>
        <tr>
         <td>
          SCROLLBARSIZE
         </td>
         <td>
            The width of the vertical scrollbar or the height of the horizontal scrollbar. Default: 15.
         </td>
        </tr>
        <tr>
         <td>
          SHOWARROWS
         </td>
         <td>
            Allow to show or hide the arrows. Default: Yes.
         </td>
        </tr>
        <tr>
         <td>
          SHOWFLOATING
         </td>
         <td>
            the scrollbar is shown only when used, over the space it occupied. <br>
            Move the mouse over the scrollbar area to show the scrollbars. <br>
            They are automatically hidden after not being used by the time defined in FLOATINGDELAY.
         </td>
        </tr>
        <tr>
         <td>
          SHOWTRANSPARENT
         </td>
         <td>
            This makes the flat scrollbar semi transparent and only interactive trough its handler. <br>
            It implies in SHOWARROWS=NO and SHOWFLATING=Yes. (since 3.26)
         </td>
        </tr>
        <tr>
         <td>
          FLOATINGDELAY
         </td>
         <td>
            time to hide the scrollbar when SHOWFLOATING=Yes in milliseconds. Default: 2000.
         </td>
        </tr>
        <tr>
         <td>
          ARROWIMAGES
         </td>
         <td>
            replace the drawn arrows by the following images.
         </td>
        </tr>
//      <tr>
//       <td>
//        SB_IMAGELEFT, <br>SB_IMAGERIGHT, <br>SB_IMAGETOP, <br>SB_IMAGEBOTTOM
//       </td>
//       <td>
//          Arrow image name (the attribute is relative to where the arrow is pointing). <br>
//          Use <a href="IupSetHandle.htm">IupSetHandle</a> or <a href="IupSetAttributeHandle.htm">IupSetAttributeHandle</a> to associate an image to a name. 
//          See also <a href="IupImage.htm">IupImage</a>. <br>
//          IMPORTANT = all images must be square with side equals to SCROLLBARSIZE.
//       </td>
//      </tr>
        <tr>
         <td>
          SB_IMAGE*HIGHLIGHT
         </td>
         <td>
            Arrow image name of the element in highlight state. If it is not defined then the IMAGE* is used.
         </td>
        </tr>
        <tr>
         <td>
          SB_IMAGE*INACTIVE
         </td>
         <td>
            Arrow image name of the element when inactive. <br>
            If it is not defined then the IMAGE* is used and its colors will be replaced by a modified version creating the disabled effect.
         </td>
        </tr>
        <tr>
         <td>
          SB_IMAGE*PRESS
         </td>
         <td>
            Arrow image name of the element in pressed state. If it is not defined then the IMAGE* is used.
         </td>
        </tr>
-->
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            While pGUI had all manner of convoluted restrictions on attributes, such as v being <a href="string.htm">atom_string</a> or the dire 
            distinction between <a href="IupSetAttribute.htm">IupSetAttribute</a>() and <a href="IupSetStrAttribute.htm">IupSetStrAttribute</a>(),
            largely because C and C-based languages cannot distinguish between an integer and a 
            <a name=str></a>string (aka char*)<small><sup><a href="#str1">1</a></sup></small>, this 
            one routine covers and replaces at least 5 and probably more pGUI routines, even technically (and apart from gSetInt() as noted above) 
            including things like <a href="IupSetStrAttribute.htm#utility">IupSetInt</a>().
            <br>
            <br>
            As well as not replicating that particular distinction, xpGUI either actions things immediately or makes a (reference counted) copy, 
            so (unlike pGUI) there is no danger here of a value "vanishing" before it can be used.
            <br>
            <br>
<!-- (while technically true, it really adds nothing...)
            While pGUI sometimes treated say "50x" as "set w but leave h unchanged" there is no similar facility in xpGUI, which treats that the
            same as "50x0", and you would indeed usually have to fetch the prior values and then set them both. Specific future enhancements are 
            always a possibility, though, for instance I would have little to say against "SIZEW" and "SIZEH", were there a genuine need.
            <br>
            <br>
-->
            Appropriate care may still sometimes be required with some values, such as a raw memory address, which must fairly obviously
            remain valid for the entire lifetime of the interface element, or at least until all copies/references to it are replaced.
            <br>
            <br>
<!-- Why offer, when a) you can't think of a use, and b) a dictionary can do it all, and quite probably far more anyway.
            Aside: I foresee little difficulty and would have no objections to providing gSetCustomAttribute() and a matching get routine,
            not that I can think of any practical use just yet, but I would consider it utter madness to have gSetAttribute() effectively 
            ignore any attribute names it does not recognise, rather than reject my many typos. By ignore I really mean <i>quietly</i> obey, 
            which is what IUP does.
            <br>
            <br>
-->
            <a name=str1></a><small><sup><a href="#str">1</a></sup></small> Of course Phix manages that via a combination of limiting integers 
            to 31/63 bits, storing 32/64 bit "integers" in an atom, and not having/depending on a pointer type, rather you store pointers in an 
            atom and it becomes your sole responsibility to use them as such, for instance the language itself would not raise an eyebrow should 
            you ask for the square root of a pointer, or for that matter use the pointer itself when you should be using whatever it points at, 
            though one it <i>would</i> catch is char* vs string. Swings and roundabouts, I guess.
         </td>
        </tr>
       </table>
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
