<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">gSetAttribute</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include xpGUI.e
          <br>
          <br>
          gSetAttribute(<a href="gdx.htm">gdx</a> id, <a href="string.htm">string</a> name, 
                                                      <a href="object.htm">object</a> v,
                                                      <a href="sequence.htm">sequence</a> args={})
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
          Sets an interface element attribute.
          <br>
          <br>
          id: Identifier(s) of the interface element, may <i>not</i> be NULL, or contain any embedded NULLs.<br>
          name: name of the attribute, usually a literal string such as "SIZE", several more examples below.<br>
          v: value of the attribute. If NULL the default setting will be used (at least in most cases).<br>
          args: (optional) if not {} then <nobr>v = <a href="sprintf.htm">sprintf</a>(v,args)</code></nobr> is performed.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm">
          <span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
          <!--
//       Note that under pwa/p2js there is no distinction between IupSetAttribute() and IupSetStrAttribute(), largely due to the
          fact that everything is mapped to JavaScript attributes and CSS style settings. I suppose that means there could be some desktop/Phix
          programs which either accidentally or deliberately store a machine address and then poke that memory to effect an attribute change,
          and obviously that sort of thing will simply not work in a browser. Thankfully nothing like that has yet been encountered.
          <br>
          <br>
//        In contrast under pwa/p2js IupSetAttributePtr() simply stores a value without any of the validation or mapping performed by
//        IupSet[Str]Attribute(), and IupGetAttributePtr() will crash rather than fail should there have been no prior corresponding 
//        invocation of IupSetAttributePtr(), or perhaps gSetHandler() and similar. Said crash may or may not be replaced with (say)
//
          <code>return NULL;</code>, as further implementation and refinement of pGUI.js progresses, and as needs demand.
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
          Note that, unlike say <a href="gSetHandler.htm">gSetHandler[s]</a>(), the "with-s" version of this routine, ie
          <a href="gSetAttributes.htm">gSetAttributes</a>(), has a different purpose/api, being multiple attributes in one string, 
          the common implementation of inlined attributes as part of most interface element creation routines, and in fact invokes 
          this routine multiple times, whereas this "without-s" version sets a single attribute, potentially to a non-string value, 
          and with both being able to apply said to one or more elements.
          <br>
          <br>
          When args is not {}, the implicit sprintf obviously crashes when v is not string, contains bad format specifiers, etc.<br>
          Otherwise v can be anything, including integer, atom, string, [nested] sequence, or an equivalent string representation, eg:
          <br>
<!--eucode>
        integer w = 100, h = 180
        gSetAttribute(id,"SIZE",{w,h})
        gSetAttribute(id,"SIZE","%dx%d",{w,h})
        gSetAttributes(id,"SIZE=%dx%d",{w,h})
        gSetAttribute(id,"SIZE",{100,180})
        gSetAttribute({id},"SIZE",{100,180})
        gSetAttribute(id,"SIZE","100x180")
        gSetAttribute(id,"SIZE","{100,180}")
        gSetAttributes(id,"SIZE={100,180}")
        gSetAttributes(id,"SIZE=100x180")
</eucode-->
<pre>
<font color="#004080">        integer</font><font color="#000000"> w</font><font color="#0000FF"> =</font><font color="#000000"> 100</font><font color="#0000FF">,</font><font color="#000000"> h</font><font color="#0000FF"> =</font><font color="#000000"> 180</font>
<font color="#7060A8">        gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#008000">"SIZE"</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">w</font><font color="#0000FF">,</font><font color="#000000">h</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#7060A8">        gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#008000">"SIZE"</font><font color="#0000FF">,</font><font color="#008000">"%dx%d"</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">w</font><font color="#0000FF">,</font><font color="#000000">h</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#7060A8">        gSetAttributes</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#008000">"SIZE=%dx%d"</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">w</font><font color="#0000FF">,</font><font color="#000000">h</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#7060A8">        gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#008000">"SIZE"</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">100</font><font color="#0000FF">,</font><font color="#000000">180</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#7060A8">        gSetAttribute</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">id</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#008000">"SIZE"</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">100</font><font color="#0000FF">,</font><font color="#000000">180</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#7060A8">        gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#008000">"SIZE"</font><font color="#0000FF">,</font><font color="#008000">"100x180"</font><font color="#0000FF">)</font>
<font color="#7060A8">        gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#008000">"SIZE"</font><font color="#0000FF">,</font><font color="#008000">"{100,180}"</font><font color="#0000FF">)</font>
<font color="#7060A8">        gSetAttributes</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#008000">"SIZE={100,180}"</font><font color="#0000FF">)</font>
<font color="#7060A8">        gSetAttributes</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#008000">"SIZE=100x180"</font><font color="#0000FF">)</font>
</pre>
          <small><i>(obviously that&rsquo;s nine slightly different ways to achieve exactly the same thing,
           <br>
           the first being the fastest, inlined like the last generally the neatest overall code.)</i>
          </small>
          <br>
          <br>
          You can also use the following near-aliases:
          <br>
          <a name=gSetInt></a>
          <br>
          <b>gSetInt</b>(<a href="gdx.htm">gdx</a> id, <a href="string.htm">string</a> name, <a href="integer.htm">integer</a> i)
          <br>
          <a name=gSetDouble></a>
          <b>gSetDouble</b>(<a href="gdx.htm">gdx</a> id, <a href="string.htm">string</a> name, <a href="atom.htm">atom</a> a)
          <br>
          <br>
          Apart from the tighter validation of the third parameter (on desktop/Phix only), and perhaps more crucially a clearer declaration 
          of intent which can help make the code a bit more self-documenting, they behave identically to gSetAttribute().
          <!-- [DEV I might yet change my mind about this...] -->
          Since JavaScript is a <a href="glossary.htm#typeless">typeless</a> language, under 
          <a href="p2js.htm"><span class="pwap2js">pwa/p2js</span></a>, there isn&rsquo;t 
          actually any additional validation (not that I&rsquo;d struggle to add some), and 
          for now they really are just pure aliases.
          <br>
          <a name=gToggleInt></a>
          <br>
          For boolean attributes <b>gToggleInt</b>(id,"NAME") can be used instead of <nobr>gSetInt(id,"NAME",not gGetInt(id,"NAME"))</nobr>.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 1:</b>
         </td>
         <td>
<!--eucode>
gSetAttribute(dlg, "VISIBLE", true) -- (and/or "YES"/"NO")
gSetAttribute(text, "VALUE", "Hello!")
</eucode-->
<pre>
<font color="#7060A8">gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">dlg</font><font color="#0000FF">,</font><font color="#008000"> "VISIBLE"</font><font color="#0000FF">,</font><font color="#004600"> true</font><font color="#0000FF">)</font><font color="#000080"><i> -- (and/or "YES"/"NO")</i></font>
<font color="#7060A8">gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">text</font><font color="#0000FF">,</font><font color="#008000"> "VALUE"</font><font color="#0000FF">,</font><font color="#008000"> "Hello!"</font><font color="#0000FF">)</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 2:</b>
         </td>
         <td>
<!--eucode>
-- Enable or disable several buttons and/or menu entries simultaneously
gSetAttribute({b_cut,b_copy,m_cut,m_copy}, "ACTIVE", selected_text!={})
</eucode-->
<pre>
<font color="#000080"><i>-- Enable or disable several buttons and/or menu entries simultaneously</i></font>
<font color="#7060A8">gSetAttribute</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">b_cut</font><font color="#0000FF">,</font><font color="#000000">b_copy</font><font color="#0000FF">,</font><font color="#000000">m_cut</font><font color="#0000FF">,</font><font color="#000000">m_copy</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#008000"> "ACTIVE"</font><font color="#0000FF">,</font><font color="#000000"> selected_text</font><font color="#0000FF">!=</font><font color="#800000">{}</font><font color="#0000FF">)</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="gSetHandler.htm">gSetHandler</a>,
          <a href="gGetAttribute.htm">gGetAttribute</a>,
          <a href="gSetAttributes.htm">gSetAttributes</a>,
          <!--          <a href="IupGetAllAttributes.htm">IupGetAllAttributes</a>,-->
          <a href="gSetGlobal.htm">gSetGlobal</a>,
          <a href="gGetGlobal.htm">gGetGlobal</a>
          <br>
          <a name=COMMON></a>
         </td>
        </tr>
        <tr>
         <td>
          <b>Common:</b>
         </td>
         <td>
          The following attributes are common to several controls/interface element types.<br>
          See also <a href="gGetAttribute.htm#COMMON">gGetAttribute</a> for some other common read-only attributes.
          <br>
          <a name=ACTIVE></a>
         </td>
        </tr>
        <tr>
         <td>
          ACTIVE
         </td>
         <td>
          (inherited) Activates or inhibits user interaction. Value <a href="logicops.htm#tf">true</a>/"YES" (active), 
          <a href="logicops.htm#tf">false</a>/"NO" (inactive). Default: <a href="logicops.htm#tf">true</a>.
          <br>
          <!--
//          Alternatively, <a href="IupSetStrAttribute.htm#utility">IupSetInt</a>() and <a href="IupGetAttribute.htm#utility">IupGetInt</a>()
//          can be used with true/false, or <a href="IupSetStrAttribute.htm#utility">IupToggleInt</a>().
          <br>
-->
          An interface element is only active if its native parent is also active.
          <br>
          ACTIVE can also be set for non-interactive controls and may affect their visual feedback.
          <br>
          <!-- ??
            In GTK the inactive dialogs will still be able to move, resize and change their Z-order.<br>
-->
          Affects: All controls that have visual representation.
          <br>
          <a name=BGCOLOR></a>
         </td>
        </tr>
        <tr>
         <td>
          BGCOLOR
         </td>
         <td>
          The interface element&rsquo;s background color, eg <a href="gCanvas.htm#XPG_colours">XPG_WHITE</a>.<br>
          If not specified, the native colour from the underlying backend (GTK/WinAPI/HTML) is used.<br>
          The alias BGCOLOUR can also be used.
          <!--
//          <br>
//
          <br>
//Maybe this should replace that...
//          On a <a href="gCanvas.htm">gCanvas</a>, and hence <a href="gGraph.htm">gGraph</a>, <a href="gList.htm">gList</a>, and 
//          <a href="gTable.htm">gTable</a>, equivalent to <a href="gCanvas.htm#gCanvasSetBackground.htm">gCanvasSetBackground</a>().
-->
          <!--
//          <br>
//
          <br>
//          Value: The RGB components, eg #FF0080 or equivalently "255 0 128" (three numbers 0..255).
//
          <br>
//
          <br>
//
//          Values should be between 0 and 255, separated by a blank space. For example "255 0 128", red=255 blue=0 green=128.
//
          <br>
//
          <br>
//          Default: The <a href="gGetGlobal.htm#DLGBGCOLOR">DLGBGCOLOR</a> global attribute, or inherited from the parent.
//
//
          <br>
//          Hexadecimal notation in the format "#RRGGBB" is also accepted, eg "255 0 128" can also be written as "#FF0080".
//
//          -- DEV test me
//          Note that double quotes are still required when using <a href="IupSetAttributes.htm">IupSetAttributes</a>(), and therefore the inline string attributes 
//          of control creation, eg IupSetAttributes(ih,`BGCOLOR="#FF0080"`).
-->
          <br>
          <br>
          <!--            Affects: All controls that have visual representation, but with some restrictions. <br>-->
          Affects: Currently only <a href="gText.htm">gText</a>.
          <br>
          <!--
//          <br>
//
          <br>
//          Several controls have transparent parts that are not affected by the BGCOLOR.
//
          <br>
//
          <br>
//          Run demo\pGUI\sample.exw and use the menu to toggle the dialog BACKGROUND, the dialog BGCOLOR and the children BGCOLOR. 
//
          <br>
//
          <br>
//          See Also: <a href="#FGCOLOR">FGCOLOR</a>, <a href="gGetGlobal.htm#DLGBGCOLOR">DLGBGCOLOR</a> 
//
          <br>
-->
          <a name=CANFOCUS></a>
         </td>
        </tr>
        <tr>
         <td>
          CANFOCUS
         </td>
         <td>
          <!--(creation only)--> 
          Enables the focus traversal of the control.
          <br>
<!--
.word-break {
  /* The following styles prevent unbroken strings from breaking the layout */
  width: 300px; /* set to whatever width you need */
  overflow: auto;
  white-space: -moz-pre-wrap; /* Mozilla */
  white-space: -hp-pre-wrap; /* HP printers */
  white-space: -o-pre-wrap; /* Opera 7 */
  white-space: -pre-wrap; /* Opera 4-6 */
  white-space: pre-wrap; /* CSS 2.1 */
//  white-space: pre-line; /* CSS 3 (and 2.1 as well, actually) */
//  word-wrap: break-word; /* IE */
  -moz-binding: url('xbl.xml#wordwrap'); /* Firefox (using XBL) */
}
.word_wrap
{
    white-space: pre-wrap; /* css-3 */
    white-space: -moz-pre-wrap; /* Mozilla, since 1999 */
    white-space: -pre-wrap; /* Opera 4-6 */
    white-space: -o-pre-wrap; /* Opera 7 */
//  word-wrap: break-word; /* Internet Explorer 5.5+ */
//word-break:break-all;
//word-wrap: break-word;
//display: table-cell; 
//display: table; 
//display: table-row; 
//word-wrap: break-word;
overflow-wrap: break-word;
word-break: break-all;
display: inline;
//display: -webkit-box;
align=justify
min-width: 0; table-layout:fixed; word-wrap: break-word; display: table-row; word-break:break-all; overflow-wrap: break-word; position: relative
style="word-wrap:normal; white-space: normal; width: 99%; display: block; overflow-wrap: anywhere; width: min-content; min-width: 100%;"
text-align:justify;
}-->
<!--
          <div style="display:flex;">
           <div>Defaults:&nbsp;
           </div>
           <div>
            <div style="display:flex;">
             <div><a href="logicops.htm#tf">true</a> for&nbsp;
             </div>
             <div style="display:flex; text-align:justify; text-wrap: wrap;">
              <wbr><a href="gButton.htm">gButton</a>,&nbsp;
              <wbr><a href="gCheckbox.htm">gCheckbox</a>,&nbsp;
              <wbr><a href="gDatePick.htm">gDatePick</a>,&nbsp;
              <wbr><a href="gDropDown.htm">gDropDown</a>,&nbsp;
              <wbr><a href="gList.htm">gList</a>,&nbsp;
              <wbr><a href="gSlider.htm">gSlider</a>,&nbsp;
              <wbr><a href="gSpin.htm">gSpin</a>,&nbsp;
              <wbr><a href="gText.htm">gText</a>,&nbsp;
              <wbr><a href="gTreeView.htm">gTreeView</a>,
             </div>
            </div>
            <div style="display:flex;">
             <div><a href="logicops.htm#tf">false</a> for&nbsp;
             </div>
             <div style="display:flex; text-align:justify; text-wrap: wrap;">
              <wbr><a href="gCanvas.htm">gCanvas</a>,&nbsp;
              <wbr><a href="gGraph.htm">gGraph</a>,&nbsp;
              <wbr><a href="gLabel.htm">gLabel</a>,&nbsp;
              <wbr><a href="gProgressBar.htm">gProgressBar</a>,&nbsp;
              <wbr><a href="gTable.htm">gTable</a>, and&nbsp;
              <wbr><a href="gDialog.htm">gDialog</a>,&nbsp;
              <wbr><a href="gBox.htm">gH/Vbox</a>,&nbsp;
              <wbr><a href="gFrame.htm">gFrame</a>,&nbsp;
              <wbr><a href="gFrame.htm">gFucktrhisshitmanrame</a>,&nbsp;
              <wbr><a href="gSplit.htm">gSplit</a>,&nbsp;
              <wbr><a href="gTabs.htm">gTabs</a>.
             </div>
            </div>
           </div>
          </div>
-->
            Defaults: <a href="logicops.htm#tf">true</a> for <a href="gButton.htm">gButton</a>,
                                                             <a href="gCheckbox.htm">gCheckbox</a>, 
                                                             <a href="gDatePick.htm">gDatePick</a>, 
                                                             <a href="gDropDown.htm">gDropDown</a>,
                                                             <a href="gList.htm">gList</a>,
                                                             <a href="gSlider.htm">gSlider</a>,
                                                             <a href="gSpin.htm">gSpin</a>,
                                                             <a href="gText.htm">gText</a>,
                                                             <a href="gTreeView.htm">gTreeView</a>, <br>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            &nbsp;<a href="logicops.htm#tf">false</a> for <a href="gCanvas.htm">gCanvas</a>,
                                                          <a href="gGraph.htm">gGraph</a>,
                                                          <a href="gLabel.htm">gLabel</a>,
                                                          <a href="gProgressBar.htm">gProgressBar</a>,
                                                          <a href="gTable.htm">gTable</a>,
                                                      and <a href="gDialog.htm">gDialog</a>, 
                                                          <a href="gBox.htm">gH/Vbox</a>,
                                                          <a href="gFrame.htm">gFrame</a>,
                                                          <a href="gSplit.htm">gSplit</a>,
                                                          <a href="gTabs.htm">gTabs</a>. <br>
          Obviously there should be no problem disabling anything in the first set, but no official support for enabling it on
          anything in the second set, except for <a href="gTable.htm">gTable</a>. It is assumed that most tables are likely to be
          read-only and there is no generic practical way to use the keyboard to perform things like column resize or column sort.
          Using specially designated/dedicated keystrokes such as &lt;Ctrl [Shift] PgUp/Down&gt; to switch between tabs is always 
          going to be better than trying to use the keyboard on the control itself, likewise for said actions on a table.
          <br>
          This setting has no influence whatsoever on an explicit <a href="gSetFocus.htm">gSetFocus</a>() call.
          <br>
          <a name=EXPAND></a>
         </td>
        </tr>
        <tr>
         <td>
?         EXPAND
         </td>
         <td>
            Allows the element to expand, fulfilling empty spaces inside its container.
          <br>
          <br>
            It is a non inheritable attribute, but fairly obviously the overall behaviour depends on the expansion settings of both
            a container and its children. If expansion is disabled on a container then it gets a (fixed) minumum width/height that
            accomodates the largest of its children, none of the other children (including any sub-containers) being able to expand 
            into anything beyond that. Should none of the children of a container expand in a given direction it can still expand but
            uses the <a href="gBox.htm#SPACE">SPACE</a> attribute to distribute any excess and reposition the children appropriately.
          <!--
            if at least one of its children 
            can also expand in that direction, except when the container itself is a <a href="xplayout.htm#SoleChild">sole child</a>,
            namely being the single child of a <a href="gDialog.htm">gDialog</a>, <a href="gFrame.htm">gFrame</a>, or a direct child 
            of <a href="gTabs.htm">gTabs</a>, in which case it still expands but 
            , with RIGHT/BOTTOM/NONE perhaps effectively completely 
            disabling expansion.-->
          <!--Note that a fatal error may trigger on attempts to completely disable expansion on such 
            <a href="xplayout.htm#SoleChild">sole child</a> containers, that is when you should instead be disabling resizing on the 
            dialog or expansion on the gFrame/gSplit/gTabs. The otherwise meaningless XPG_SPACE_NONE may also effectively disable 
            EXPAND=YES on a container when none of its children can expand, but that is officially unsupported, with EXPAND=NO (or
            on a dialog better yet <a href="gDialog.htm#RESIZE">RESIZE</a>=NO) being the recommended alternative/quick-fix.-->
          <!--
                        and in fact an error 
            occurs on any attempt to set EXPAND to anything other than BOTH/YES on any such <a href="gBox.htm">gH/Vbox</a>.
-->
          <!-- I think I just said that!...
            <br>
          <br>
            Likewise no child element can expand beyond the limits of its parent container and therefore the expansion of all 
            child elements is effectively constrained by the expansion settings of its parent.
-->
          <!-- NO: Just put expand=NO on the container!
            <br>
          <br>
            A further caveat is "FREE" expansion, whereby a child can expand in the specified direction but does not affect the
            expansion of the container, for instance a separator might want to be full width/height but only as a shorthand for
            matching its siblings.
-->
          <br>
          <br>
          <!--
             a container  expansion a container inherit its parents EXPAND attribute. <br>
            In other words, although EXPAND is non inheritable, it is inheritable for containers.
          <br>
            So if you set it at a container it will not affect its children, except for those who are containers.
          <br>
            The expansion is done equally for all expandable elements in the same container.
          <br>
          <br>
            For a container, the actual EXPAND value will be always a combination of its own value and the value of its children,
          <br>
            in the sense that a container can only expand if its children can expand too in the same direction.
          <br>
          <br>
            The HORIZONTALFREE and VERTICALFREE values will not behave as normal expansion.
          <br>
            These values will NOT affect the expansion of the container when set at its children,
          <br>
            the children will simply expand to the available free space at the container.
          <br>
            See <a href="xplayout.htm">Layout Management</a> for more details on sizes.
          <br>
-->
          <!--<wbr>"HORIZONTALFREE",
          <wbr>"VERTICALFREE"-->
          <div style="display:flex;">
           <div>Value:&nbsp;
           </div>
           <div>       "NONE"<small>[/"N"/"NO"/"FALSE"/'N'/'F'/<a href="logicops.htm#tf">false</a>/0]</small>,<br>
                       "BOTH"<small>[/"B"/"YES"/"TRUE"/'B'/'Y'/'T'/<a href="logicops.htm#tf">true</a>/1]</small>,<br>
                       "HORIZONTAL"<small>[/"H"/'H'/2]</small>, or<br>
                       "VERTICAL"<small>[/"V"/'V'/4]</small>&nbsp;
           </div>
          </div>
          <br>
          <!--DEV make this 0/1/2/4 for NBHV; and_bits(0b011)!=0 means it is horizonatally expandable, and_bits(0b101) means it is vertically expandable...<br>-->
          gGetAttribute(id,"EXPAND") returns one of the above (first) four strings, whereas<br>
<!--
          gGetInt(id,"EXPAND") returns 0/1/2/4, with<br>
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bits 0b011!=0 indicating horizontal expansion and<br>
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bits 0b101!=0 indicating vertical expansion.
-->
          <div style="display:flex;">
           <div>gGetInt(id,"EXPAND") returns 0/1/2/4:&nbsp;<br>
                        <span style="float:right">and&nbsp;</span>
           </div>
           <div>
            bits 0b011!=0 indicate horizontal expansion<br>
            bits 0b101!=0 indicate vertical expansion.
           </div>
          </div>

          <!--
             gSetInt(id,"EXPAND") accepts 0..3 and the characters N[/F]HVB[/Y/T],
            as does gSetAttribute, note however that false/FALSE works as expected (matching 'N'/'F') but true/TRUE would be treated as 'H' (rather than 'Y'/'T').
            The length-1 strings "Y" and "T" are (now) also accepted -->
          <!-- shut up Pete, give it a rest, if you can't think of anything useful to say...
            While the number of ways to set the same thing may have become a tad OTT, the intention is to let you bash in code intuitively,
            and let as many things as reasonably possible that should make sense, simply do so.
          <br>
-->
          <br>
          <!--
??          "HORIZONTAL" for <a href="gLabel.htm">gLabel</a>,
                             <a href="gText.htm">gText</a>,
          <br>
-->
          Defaults: "NONE" for <a href="gButton.htm">gButton</a>,
                               <a href="gCheckbox.htm">gCheckbox</a>, 
                               <a href="gDatePick.htm">gDatePick</a>, 
                               <a href="gDropDown.htm">gDropDown</a>,
                               <a href="gLabel.htm">gLabel</a>,
                               <a href="gProgressBar.htm">gProgressBar</a>,
                               <a href="gSlider.htm">gSlider</a>,
                               <a href="gSpin.htm">gSpin</a>,
                               <a href="gText.htm">gText</a>,
          <br>
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          &nbsp;"BOTH" for <a href="gCanvas.htm">gCanvas</a>,
                           <a href="gGraph.htm">gGraph</a>,
                           <a href="gList.htm">gList</a>,
                           <a href="gTable.htm">gTable</a>,
                           <a href="gTreeView.htm">gTreeView</a>, 
                       and <a href="gDialog.htm">gDialog</a>, 
                           <a href="gBox.htm">gH/Vbox</a>,
                           <a href="gFrame.htm">gFrame</a>,
                           <a href="gSplit.htm">gSplit</a>,
                           <a href="gTabs.htm">gTabs</a>.
          <br>
          <br>
          Note that the natural size of a gCanvas, and hence all the (next three) canvas-based controls, is just the size of one 
          character, and a gTreeView, with a natural size of {0,0}, is even smaller. Hence should you disable expansion on any 
          of them you will almost certainly need to specify an explicit <a href="gGetAttribute.htm#SIZE">SIZE</a>, that is unless 
          the <a href="xplayout.htm#SoleChild">sole child</a> rules prohibit/override the attempt to disable expansion.
          <br>
          <br>
          Affects: All elements, except menus.
          <br>
          <br>
          See also: <a href="#MARGIN">MARGIN</a>, 
                    <a href="#PADDING">PADDING</a>,
                    <a href="gBox.htm#GAP">GAP</a>,
                    <a href="gBox.htm#SPACE">SPACE</a>,
                    <a href="#MINSIZE">MINSIZE</a>,
                    <a href="#MAXSIZE">MAXSIZE</a>,
                    <a href="gDialog.htm#RESIZE">RESIZE</a>,
                    <a href="xplayout.htm">Layout Management</a>.
          <br>
          <!--            <a href="#SHRINK">SHRINK</a>-->
          <a name=FONT></a>
         </td>
        </tr>
        <tr>
         <td>
          FONT
         </td>
         <td>
          (inherited) A string defining the font, in the format "&lt;face&gt;, &lt;styles&gt; &lt;size&gt;". Default: "Helvetica, 9".
          <br>
          <br>
          Since face names are not a standard between Windows and GTK, a few are specially handled to improve application portability:
          <!--
            Should you want to use fonts that work for all systems we recommend using Helvetica, Courier, and Times, which (are used directly for
            HTML/CSS/JavaScript and) always have a native system equivalent:
-->
          <br>
          <br>
<!--
          <p align="center">
           <img alt="Fonts" src="images/xpgFonts.png" width="502" height="98"/>
          </p>
-->
<!-- THISACTUALLYWORKS!!! -->
          <div style="display:flex; align-content:center;">
           <table style="text-align: center; width: auto;" class="tb">
            <tr>
             <th>Recommended</th>
             <th style="text-align:center">Windows</th>
             <th style="text-align:center">GTK</th>
             <th>Description</th>
            </tr>
            <tr>
             <td><strong>Helvetica</strong></td>
             <td style="text-align:center">Arial</td>
             <td style="text-align:center">Sans</td>
             <td style="text-align:left;font-family:Helvetica, sans-serif;">without serif, variable spacing</td>
            </tr>
            <tr>
             <td><strong>Courier</strong></td>
             <td style="text-align:center">Courier New</td>
             <td style="text-align:center">Monospace</td>
             <td style="text-align:left;font-family:Courier, monospace; font-size: 0.9em;">with serif, fixed spacing</td>
            </tr>
            <tr>
             <td><strong>Times</strong></td>
             <td style="text-align:center">Times New Roman</td>
             <td style="text-align:center">Serif</td>
             <td style="text-align:left; font-family:Times, serif; font-size: 1.1em;">with serif, variable spacing</td>
            </tr>
           </table>
          </div>

          <br>
          All nine fonts listed above work on any backend. Face names are case-sensitive and must exactly match those shown above. Fonts are automatically
          <!--inherited, and--> cached/pooled to minimise resource usage - note that gGetAttribute() returns the post-mapped platform-specific version.
          <br>
          <br>
          The font style can be omitted (aka normal) or a combination of: bold and italic (underline and strikeout are yet to be properly supported, but
          I can tell you they won&rsquo;t ever be supported on a <a href="gCanvas.htm">gCanvas</a>). Optionally capitalised, ie/eg "bold" or "Bold".
          <!--Note the font string should only ever contain at most a single comma, to separate the face name from the rest, and
            if the latter is present it should all be single-space separated.-->
          <!--
            <br>
          <br>
            DEV: Wrong, it is pango_font_description_from_string() that does not support underline/strikeout, but pango_parse_markup() <i>does</i>
            support &lt;u&gt; and &lt;s&gt;, so maybe we should be using &lt;b&gt; and &lt;i&gt; as well... and creating fewer fontdescs.
          <br>
            &lt;big&gt;, &lt;small&gt;, &lt;sub&gt;, &lt;sup&gt;, and &lt;tt&gt; should also be re-considered (iff WinAPI will comply).
          <br>
            [NB: I am only thinking of "whole fragment" in the <a href="gList.htm">gList</a>/<a href="gCanvas.htm#gCanvasText">gCanvasText</a> sense, for now,
          <br>
            &nbsp;a (for instance) gLabel of "This
          <del>was</del> is
          <u>never</u> <i>false</i>" might become possible in v5.7... or later,<br>
            &nbsp;and that might actually involve deliberately <i>dropping</i> bold/italic/etc from the FONT attribute itself, or setting bit-flags.]<br>
-->
<!--
            Note that Underline and Strikeout are <i>not</i> supported by pango/GTK (and cairo fonts are indeed pretty hideous) and hence those styles
            are not supported by xpGUI either. 
-->
<!-- it might be possible to fake it with gCanvasLine(), there is probably some hideous CSS hack for that -->
<!--
erm, lets not promise vapourware, and `invoked via "FONT"` must have meant set those attributes there, but implement them via some internal REDRAW. Better:
            Note that Underline and Strikeout are are not directly supported by pango/GTK (and cairo fonts are indeed pretty hideous) and hence in fact 
            implemented as entirely separate UNDERLINE and STRIKEOUT attributes, which can theoretically be used independently, but are clobbered every 
            time FONT is set.
            - if needed it might be possible/would be more sensible to add entirely separate UNDERLINE and STRIKEOUT attributes to selected controls, 
            which could then I suppose be indirectly invoked via "FONT", that is if/when they actually exist, which may be never.
          <br>
            Unsupported values raise an error. The , whereas in contrast "bold" 
            and "italic" (for no particularly good reason) are actually perfectly acceptable and automatically mapped to their capitalised equivalents.
          <br>
          <br>
            Fonts are automatically inherited at the point of mapping/display, and cached/pooled to minimise 
            <a name=mru></a>resource usage
          <small>
           <sup><a href="#mru1">1</a></sup>
          </small>.
-->
          <!--
//          Note that means if you gSetAttribute(id1,"FONT","Helvetica, 9") and gSetAttribute(id2,"FONT","Sans, 9"), then gGetAttribute(id2,"FONT")
//          will likely return "Helvetica" rather than "Sans", that is assuming they have both been internally mapped to the same thing (eg "Arial").
            <small><i>(Excess cacheing might itself cause problems:
            should you ever need an automatic purge of unused fonts, say on every 10
          <small>
           <sup>th</sup>
          </small> new, just let me know.)</i>
-->
          <br>
          <br>
          Font size is in points (1/72 inch) or in pixels (using negative values).<br>
          <small>[Technically optional, but no formal guarantee of what happens when omitted.]</small>
          <br>
          <br>
          Examples:
          <br>
          <br>
<!--eucode>
    "Times, Bold 18"
    "Arial, 24" -- (no style)
    "Courier New, bold italic -30" -- (size in pixels)
</eucode-->
<pre>
<font color="#008000">    "Times, Bold 18"
    "Arial, 24"</font><font color="#000080"><i> -- (no style)</i></font>
<font color="#008000">    "Courier New, bold italic -30"</font><font color="#000080"><i> -- (size in pixels)</i></font>
</pre>
          <!--
            <br>
            On Windows the native handle can be obtained using the "HFONT" attribute.
          <br>
            On Motif the native handle can be obtained using the "XMFONTLIST" and "XFONTSTRUCT" attributes. The selected X Logical Font Description string can be obtained from the attribute "XLFD".
          <br>
            On GTK the native handle can be obtained using the "PANGOFONTDESC" attribute.
          <br>
-->
          <!--
            <br>
          <h3>Auxiliary Attributes</h3>
            These will change the FONT attribute, and depend on it.
          <br>
            They are used only to set partial FONT parameters of style and size.
          <br>
            To do that the FONT attribute is parsed, changed and updated to the new value in the common format definition.
          <br>
            This means that if the attribute was set in X-Windows format or in the old Windows and IUP formats, the previous value will be replaced by a new value in the common format definition.
          <br>
            Pango additional styles will also be removed.
          <br>
          <br>
          <table>
           <tr>
            <td>FONTSTYLE</td>
            <td>(non inheritable) Replaces or returns the style of the current FONT attribute. Since font styles are case sensitive, this attribute is also case sensitive.</td>
           </tr>
           <tr>
            <td>FONTSIZE</td>
            <td>(non inheritable) Replaces or returns the size of the current FONT attribute.</td>
           </tr>
           <tr>
            <td>FONTFACE</td>
            <td>(non inheritable) Replaces or returns the face name of the current FONT attribute.</td>
           </tr>
           <tr>
            <td>CHARSIZE</td>
            <td>(read-only, non inheritable) Returns the average character size of the current FONT attribute. 
[DEV]...
            This is the factor used by the <a href="gGetAttribute.htm#SIZE">SIZE</a> attribute to convert its units to pixels.
            </td>
           </tr>
          </table>
-->
          <br>
          Affects: All, except menus.
          <br>
          <!--
            Affects: All, except <a name=em></a>menus
          <small>
           <sup><a href="#em2">2</a></sup>.
           <br>
           <br>
            <a name=mru1></a>
           <small>
            <sup><a href="#mru">1</a></sup>
            That means for example under WinAPI after setting the font to "Sans, italic 9", gGetAttribute() returns "Arial, Italic 9", which is quite
            correct, since the internal font cache is for obvious reasons keyed/indexed on all the post-mapped/platform specific values, and further,
            any changes it has made would in fact still work just fine even on a different backend, though would obviously get a different mapping. 
            You can of course experiment with other fonts, but there is no guarantee they will be portable, and should you find any other (useful) 
            sets that seem consistent/equivalent between WinAPI, GTK, and JavaScript I will happily add them to the internal code and above table.
           </small>
           <br>
           <br>
            <a name=em2></a>
           <small>
            <sup><a href="#em">2</a></sup> Note that any attempt to set the font on a menu triggers an error, especially under 
            WinAPI, hence that is not supported, and probably never will be.
            <br>
           </small>
          </small>
-->
          <a name=MARGIN></a>
         </td>
        </tr>
        <tr>
         <td>
          MARGIN
         </td>
         <td>
          (not inherited) Specifies the initial spacing around any content. See <a href="xplayout.htm">Layout Management</a>.
          <br>
          <br>
          <!--
          While there is a fairly clear distinction between them on (say) a <a href="gButton.htm">gButton</a>, where the
          MARGIN is outside the button border and the PADDING is inside, on most controls the difference is a little more
          subtle. In some senses a containing <a href="gBox.htm">gH/Vbox</a> "owns" the child margins but "applies" the
          child padding a bit more selectively, and of course "owns" its own padding, but actually does nothing with its
          own margins, since that is a parental responsibility. The lines are indeed often a little blurred, for instance
          a <a href="gButton.htm">gButton</a> absolutely must deal with its own PADDING, but it just makes more sense for
          a container to deal with that of a <a href="gLabel.htm">gLabel</a> and several other similar controls, rather 
          than duplicate the exact same code on <i>every</i> single control type. With a few obvious exceptions, it is
          probably fair to say that any given layout could be achieved using only MARGIN, or only PADDING, or any one of
          several dozen different mixtures of the two. The only unbreakable rule is that margins are always dealt with by
          the parent, whereas padding is sometimes handled by the element itself and sometimes by the parent. The general
          advice is to favour using MARGIN whenever you can, and PADDING only when you must.
          <br>
          <br>
          Technically a <a href="gDialog.htm">gDialog</a> cannot have a MARGIN, but it quietly sets the PADDING instead,
          since that is almost certainly what you meant.
-->
          Note margins are always handled by the parent container, and cannot be set on a <a href="gDialog.htm">gDialog</a>
          <small>(but can on the sole child)</small>.
          <br>
          <br>
          Specified as between one and four values:<br>
          &nbsp;&nbsp;&nbsp;&nbsp;m or {m} or "m" =&gt; {m,m,m,m},<br>
          &nbsp;&nbsp;&nbsp;&nbsp;{tb,lr} or "tbxlr" =&gt; {tb,lr,tb,lr},<br>
          &nbsp;&nbsp;&nbsp;&nbsp;{t,lr,b} or "txlrxb"=&gt; {t,lr,b,lr}, or<br>
          &nbsp;&nbsp;&nbsp;&nbsp;{t,r,b,l} or "txrxbxl"<small><i>[unchanged]</i></small><br>
          The 1..4 integer values correspond to top, right, bottom, and left margins(/padding) respectively/clockwise.
          <br>
          <br>
          Default: 0 (no margin).
          <!-- [DEV that may not be quite true...]-->
          <br>
          Returns: a sequence of length 1..4, or the atom 0 if not set.
          <!--
[DEV]
//          <b><a href="gSetAttribute.htm#PADDING">PADDING</a></b>:
//          For <a href="gBox.htm">gHbox</a> and <a href="gBox.htm">gVbox</a> (only), is seamlessly added to the MARGIN of 
//          any child element.
//
          <br>
//          <a name=GAP></a>
//
          <br>
//          <b><a href="gSetAttribute.htm#GAP">GAP</a></b>: Specifies the initial spacing between any content. Applies to 
//          <a href="gBox.htm">gHbox</a> and <a href="gBox.htm">gVbox</a> only, an error occurs on attempting to set this 
//          on any other control. As with PADDING this is seamlessly added to the MARGIN of any child element.
//
          <br>
//
          <br>
//          <b><a href="gSetAttribute.htm#MARGIN">MARGIN</a></b>: It is illegal to specify a margin on any element that is 
//          not the immediate child of either a <a href="gBox.htm">gHbox</a> or <a href="gBox.htm">gVbox</a>, and that 
//          <i>includes</i> any such top-level container, which must instead use the PADDING and GAP attributes instead.
-->
          <br>
          <br>
          Affects: All elements except <a href="gDialog.htm">gDialog</a> and <a href="gMenu.htm">menus</a>.
          <br>
          <br>
          <!--
          Aside: Under pGUI/IUP, these and similar attributes <i>are</i> inherited, which meant that often I would look
          at a layout and say "I just need an extra 5 pixels there", and BOOM, I got an extra 525 pixels with everything
          now completely out of place, and/or it has explicitly non-inheritable versions of dozens of such things, which 
          is fine in a way I guess, but not exactly elegant either. There may be some cases where inheritable versions
          get the first prototype up and running a tiny bit quicker, but having to avoid them for the rest of eternity 
          after that point just seems completely wrong, and I would much rather do it the other way: add explicitly
          inherited versions should they ever be useful, instead of explicitly non-inherited ones of <i>everything</i>
          to get around the inevitable issues that would occur (hindsight always has 20/20 vision and all that). Or I
          could perhaps just have "gApplyAttributeRecursivelyIfNotSet()", with (inlined) gSetAttributes using "*="...
          <br>
          <br>
-->
          See also: <a href="#PADDING">PADDING</a>,
                    <a href="gBox.htm#GAP">GAP</a>,
                    <a href="gBox.htm#SPACE">SPACE</a>,
                    <a href="xplayout.htm">Layout Management</a>.
          <br>
          <a name=MAXSIZE></a>
          <a name=MINSIZE></a>
         </td>
        </tr>
        <tr>
         <td>
?         MAXSIZE,
          <br>
          MINSIZE
         </td>
         <td>
          (non inheritable) Specifies the element maximum/minimum size in pixels during the layout process.
          <br>
??        Default: 0x0 (None), except for <a href="gDialog.htm">gDialog</a>() and <a href="gFrame.htm">gFrame</a>(),
          which get a default MINSIZE based on their <a href="#TITLE">TITLE</a> at creation time.
          <br>
          Note that for many elements the <a href="gGetAttribute.htm#NATURALSIZE">NATURALSIZE</a> also acts as a MINSIZE.
          <br>
          <br>
          See <a href="xplayout.htm">Layout Management</a> for more details on sizes.
          <br>
          <br>
          Value; "widthxheight", where width and height are integer values corresponding to the horizontal and vertical size, respectively, in pixels.
          <br>
          <br>
          You can also set only one of the parameters by removing the other one and maintaining the separator "x", but this is equivalent of setting the other value to 0. 
          For example: <nobr>"x40" (height only = "0x40")</nobr> or <nobr>"40x" (width only = "40x0")</nobr>.
          <br>
          <br>
          Affects: All, except menus.
          <br>
          <br>
          Notes: The limits are applied during the layout computation. It will(/may?) limit the Natural size and the Current size.
          <br>
          <br>
          If the element can be expanded, then its empty space will NOT be occupied by other controls although its size will be limited.
          <br>
          <br>
          On a <a href="gDialog.htm">gDialog</a> will also limit the interactive resize of the dialog, 
??        and if less than the natural size will allow/cause some elements to be cropped, and/or introduce automatic scrollbars[?].
          <br>
          <br>
?         On a dialog (only), limits the manual resizing by mouse but does <i>not</i> override the NATURALSIZE or any explicit SIZE settings.
          <br>
          Note that MAXSIZE (again, on a dialog) does not work at all on the GTK2 dlls I have: <small><i>tough!</i></small>
          <br>
          <small>See demo/xpGUI/gtk_fixed.exw for a [dialog] poc, same code does not currently work in xpGUI.e (with gUseGTK) presumably because
          it messes about with gtk_window_set_default_size and friends a bit too much or completely wrongly [fixes/suggestions welcome!]
          </small>
          <br>
          <br>
          See Also: <a href="gGetAttribute.htm#SIZE">SIZE</a>
          <!--
//          <a href="#MAXSIZE">MAXSIZE</a>,
            The windowing system will not be able to change the size beyond this limit. Default: 65535x65535.
            <a href="gSetAttribute.htm#MINSIZE">MINSIZE</a>
DEV: needs testing, then the apppropriate comment adding here...
            Some systems define a very minimum size greater than this, for instance in Windows the horizontal minimum size includes the window decoration buttons.
-->
          <br>
          <a name=PADDING></a>
         </td>
        </tr>
        <tr>
         <td>
?         PADDING
         </td>
         <td>
          <!--            DEV <b>NB</b> PADDING seems to be doing the job of MARGIN at the moment, that will probably get "fixed".
          <br>-->
          (not inherited, creation only) Similar in some respects to <a href="#MARGIN">MARGIN</a>, but only applicable to controls 
          with a visible border (as listed below) and inside rather than outside that.
          <br>
          <br>
          Setting the padding automatically recalculates the <a href="#USER_SIZE">USER_SIZE</a>, and vice-versa in which case when
          PADDING is NULL
          <small>(or {0,0,0,0})</small> it automatically centres the content, as per {tb,lr}.
          <!--
          Note that (unlike <a href="#MARGIN">MARGIN</a>) if both PADDING and <a href="gGetAttribute.htm#SIZE">SIZE</a> are set on a control, 
          in the <a href="xplayout.htm#BoxModel">box model</a> the former is subtracted from the latter when setting the 
          inner content size. In other words when set <a href="gGetAttribute.htm#SIZE">SIZE</a> always directly controls the border position 
          and changing the padding (impossible values aside) does not alter that, however padding when no usersize is set 
          <i>can and does</i> change the border position.
          <br>
          Should you set <a href="gGetAttribute.htm#SIZE">SIZE</a> but not PADDING, expect the content to be jammed up top left.
-->
          <br>
          <br>
          Default: 0 (no padding). [DEV that may not be quite true...]
          <br>
          Returns: a sequence of length 1..4 (see <a href="#MARGIN">MARGIN</a>), or the atom 0 if not set.
          <br>
          <br>
          Affects: <a href="gButton.htm">gButton</a>, 
                   <a href="gDatePick.htm">gDatePick</a>,
                   <a href="gDropDown.htm">gDropDown</a>,
          <!--?                    <a href="gFrame.htm">gFrame</a>,-->
          <!--?                    <a href="gProgressBar.htm">gProgressBar</a>,-->
                   <a href="gText.htm">gText</a>.
          <br>
          <br>
          See also: <a href="#MARGIN">MARGIN</a>,
                    <a href="gBox.htm#GAP">GAP</a>,
                    <a href="gBox.htm#SPACE">SPACE</a>,
                    <a href="gGetAttribute.htm#SIZE">SIZE</a>,
                    <a href="xplayout.htm">Layout Management</a>.
          <br>
          <a name=TIP></a>
         </td>
        </tr>
        <tr>
         <td>
          TIP
         </td>
         <td>
          (non inheritable, write-only) Text to be shown when the mouse lies over the element.
          <br>
          <br>
          Value: Text.
          <br>
          <a name=TITLE></a>
         </td>
        </tr>
        <tr>
         <td>
          TITLE
         </td>
         <td>
          The textual title/description of the interface element, often used to modify otherwise static text, such as that on a 
          <a href="gButton.htm">gButton</a>, <a href="gCheckbox.htm">gCheckbox</a>, <a href="gDialog.htm">gDialog</a>, 
          <a href="gFrame.htm">gFrame</a>, <a href="gLabel.htm">gLabel</a>, and maybe more. 
          In most cases (except gDialog) the natural size is made large enough to include all the text in the selected font, even using multiple 
          lines, plus things like the button/frame borders or the check box, if any.
          <br>
          <br>
          There is a completely unrelated GTITLE attribute on a <a href="gGraph.htm">gGraph</a>, similar things are handled quite differently
          on <a href="gTable.htm">gTable</a> and <a href="gTabs.htm">gTabs</a> (see links for detals), and the static text on menus is handled 
          by <a href="gMenu.htm#MenuAttr">gMenuSetAttribute</a>() rather than this routine.
          <br>
          <br>
          Value: Text.
          <br>
          <br>
          Default: ""
          <br>
          <br>
          Notes
          <br>
          The '\n' character usually is accepted for line change (except for menus, but they&rsquo;re not handled here anyway).<br>
          The "&" character can be used to define a MNEMONIC, use "&&" to show the "&" character instead of defining a mnemonic.<br>
          If a mnemonic is defined such as "&File" then the 'F' is underlined and pressing &lt;Alt F&gt; activates the control.<br>
          In some cases/platforms/backends the underline only appears while the Alt key is being held down.
          <br>
          <br>
          An automatic mapping of "&&","&","_" to "&","_","__" occurs under GTK, since that does mnemonics differently.<br>
          Likewise HTML/JS/CSS uses (eg) &lt;span class="malt"&gt;F&lt;/span&gt;ile, though that is stripped when read back.
          <br>
          Hence <a href="gGetAttribute.htm">gGetAttribute</a>(id,"TITLE") might not perfectly match that previously set, that is 
          consistently between platforms/backends, and <nobr>gSetAttribute(id,"TITLE",gGetAttribute(id,"TITLE"))</nobr> or similar 
          may have detrimental effects, on some. 
          However, it should be fairly rare to ever fetch a static title, I would hope, since that cannot possibly ever be manually 
          modified by the user anyway, but if you must, use say match("File",txt) rather than txt=="&File".
          <br>
          <br>
          Aside: I am not sure what this ever meant, and I&rsquo;ve not deliberately put anything like this in, but I shall reproduce 
          the following quote from the original IUP documentation: <i>&ldquo;For the benefit of GTK, should you define a mnemonic using 
          "&" and the string has an underscore, then make sure that the mnemonic comes before the underscore&rdquo;</i>. 
          I suspect but cannot be sure it is an outdated remark, from before "_"-&gt;"__", or some subtle buglette I have hopefully 
          <i>not</i> accidentally managed to replicate.
          <br>
          <br>
          <!--
            In GTK, if the MARKUP attribute is defined then the title string can contains pango markup commands. 
            Works only if a mnemonic is NOT defined in the title. Not valid for menus.
            <br>
          <br>
-->
          Note that <a href="gRedraw.htm">gRedraw</a>() may be required after changing the title for all characters to be shown.
          <br>
<!--
          <br>
          The following generally applies <small><i>(named parameters used for illustrative purposes, but probably best avoided on 
          xpGUI&rsquo;s <a href="g_paranormal.htm">paranormalised</a> routines)</i>:
           <br>
           <br>
[--eucode]
    gdx id = gElement(title:=`This loses`, attributes:=`TITLE:="This beats that but..."`)
    gSetAttribute(id,`TITLE`,`This wins`)
[/eucode--]
[pre]
<font color="#7060A8">    gdx</font><font color="#000000"> id</font><font color="#0000FF"> =</font><font color="#000000"> gElement</font><font color="#0000FF">(</font><font color="#000000">title</font><font color="#0000FF">:=</font><font color="#008000">`This loses`</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">:=</font><font color="#008000">`TITLE:="This beats that but..."`</font><font color="#0000FF">)</font>
<font color="#7060A8">    gSetAttribute</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#008000">`TITLE`</font><font color="#0000FF">,</font><font color="#008000">`This wins`</font><font color="#0000FF">)</font>
[/pre]
          </small>
-->
          <br>
          Affects: All elements with an associated text.
          <br>
          <br>
          See Also: <a href="#FONT">FONT</a>
          <br>
          <a name=USER_DATA></a>
         </td>
        </tr>
        <tr>
         <td>
          USER_DATA
         </td>
         <td>
          A general storage slot: anything and everything which might be useful, especially in a handler routine, should and can 
          safely be stored here. Can be set directly via the optional fourth parameter of a <a href="gTimer.htm">gTimer</a>() on 
          creation, as for other controls it should be set independently. Fairly obviously only character strings can be set via 
          <a href="gSetAttributes.htm">gSetAttributes</a>() and the inline versions of that, whereas any object of any type can
          be stored via <a href="gSetAttribute.htm">gSetAttribute</a>(), and will be retrieved completely unaltered in any way 
          by <a href="gGetAttribute.htm">gGetAttribute</a>(). One word of caution, though: you may have to explicitly nullify
          this after retrieval in order to modify and then replace it, to avoid p2js violations. Default: NULL.
          <br>
          <a name=USER_SIZE></a>
         </td>
        </tr>
        <tr>
         <td>
?         USER_SIZE
         </td>
         <td>
          (implicit) Most applications should just do everything via <a href="gGetAttribute.htm#SIZE">SIZE</a>, and pretend that 
          USER_SIZE does not even exist.<br>
          <small>[There is indeed a valid argument this should not be made public, then.]</small>
          <br>
          <br>
          Setting the <a href="gGetAttribute.htm#SIZE">SIZE</a> attribute actually sets this instead, whereas reading that returns the 
          actual size, though obviously reading <i>this</i> gets whatever was explicitly set (via SIZE or USER_SIZE), or {0,0} if not 
          ever set, irrespective of whatever real size it might end up with.
          <br>
          <br>
          Note that both are affected by physically resizing or maximising/restoring the window, which automatically sets them to the 
          same value, on a dialog anyway, whereas child elements typically get a SIZE based on the user|natural size <i>after</i> 
          applying <a href="#EXPAND">EXPAND</a>, etc.
          Setting this is in fact indistinguishable from setting SIZE, and used by the <a href="xplayout.htm">layout manager</a> as a 
          starting point for recaclulating that. It should be obvious that we absolutely need a permanent copy of any value explicitly 
          set, otherwise things couldn&rsquo;t possibly ever "shrink" back properly, and likewise quite helpful to stash whatever it 
          actually ended up setting, somewhere, rather than trying to re-figure it out whenever asked/needed.
          <br>
          <br>
          In short, the <a href="xplayout.htm">layout manager</a> takes the max(user,natural,min) size, possibly then normalised, and 
          finally expanded (if applicable) to fill the parent container, and/or ignoring anything blatently far too small, in order 
          to obtain the actual size. Hence this can (initially) behave somewhat like a <a href="#MINSIZE">MINSIZE</a>, but without 
          the permanent restrictions, and does not in contrast ever act remotely like a <a href="#MAXSIZE">MAXSIZE</a>.
          <br>
          <br>
          Returns: integer {width,height}. For more details see <a href="xplayout.htm">Layout Management</a>.
          <br>
          <br>
          See Also: <a href="gGetAttribute.htm#SIZE">SIZE</a>
          <br>
          <a name=VALUE></a>
         </td>
        </tr>
        <tr>
         <td>
          VALUE
         </td>
         <td>
          The current content or state of a control, see individual entries for details.
          <br>
          <br>
          Affects: <a href="gTabs.htm#VALUE">gTabs</a> (also <a href="gTabs.htm#VALUEPOS">VALUEPOS</a>), 
                   <a href="gCheckbox.htm#VALUE">gCheckbox</a>,
                   <a href="gDatePick.htm#VALUE">gDatePick</a>,
                   <a href="gDropDown.htm#VALUE">gDropDown</a> (also <a href="gDropDown.htm#VALINT">VALINT</a>),
                   <a href="gList.htm#VALUE">gList</a>,
                   <a href="gProgressBar.htm#VALUE">gProgressBar</a>,
                   <a href="gSlider.htm#VALUE">gSlider</a>,
                   <a href="gSpin.htm#VALUE">gSpin</a>,
                   <a href="gText.htm#VALUE">gText</a>.
          <br>
          <a name=VISIBLE></a>
         </td>
        </tr>
        <tr>
         <td>
?         VISIBLE
         </td>
         <td>
          Shows or hides the element.
          <br>
          <br>
          Value: "YES" (visible), "NO" (hidden). Default: "YES"
          <br>
          <br>
          Notes: An interface element is only visible if its native parent is also visible.
          <br>
          <br>
          Affects: All controls that have visual representation, except menus.
          <br>
          <a name=tech></a>
         </td>
        </tr>
        <!--
DEV we's gona need this... or something much simpler...
          <a name=CURSOR></a>
        <tr>
         <td>
          CURSOR
         </td>
         <td>
          (non inheritable) Defines the element&rsquo;s cursor.
          <br>
          <br>
          Value: Name of a cursor.
          <br>
          <br>
          It will check first for the following predefined names:
          <div id="images" class="images">
           <table align="center" class="centered-table">
            <tr>
             <th width="35" height="27" class="style1">
              <img border="0" src="images/cursors/win_logo.png"/>
             </th>
             <th width="35" height="27" class="style1">
              <img border="0" src="images/cursors/x-win_logo.gif"/>
             </th>
             <th>Name</th>
            </tr>
            <tr>
             <td width="35" height="27" align="center">&nbsp;</td>
             <td width="35" height="27" align="center">&nbsp;</td>
             <td>&quot;NONE&quot; or &quot;NULL&quot;</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_arrow.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/xcursor_arrow.gif" width="24" height="24"/>
             </td>
             <td>&quot;ARROW&quot;</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_busy.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/xcursor_busy.gif" width="24" height="24"/>
             </td>
             <td>&quot;BUSY&quot;</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_cross.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/xcursor_cross.gif" width="24" height="24"/>
             </td>
             <td>&quot;CROSS&quot;</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_hand.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/xcursor_hand.gif" width="24" height="24"/>
             </td>
             <td>&quot;HAND&quot;</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_help.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/xcursor_help.gif" width="24" height="24"/>
             </td>
             <td>&quot;HELP&quot;</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_move.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/xcursor_move.gif" width="24" height="24"/>
             </td>
             <td>&quot;MOVE&quot;</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_pen.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/xcursor_pen.gif" width="24" height="24"/>
             </td>
             <td>&quot;PEN&quot;</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_resize_ns.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/xcursor_resize_n.gif" width="24" height="24"/>
             </td>
             <td>&quot;RESIZE_N&quot;</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_resize_ns.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/xcursor_resize_s.gif" width="24" height="24"/>
             </td>
             <td>&quot;RESIZE_S&quot;</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_resize_ns.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/xcursor_resize_ns.gif" width="24" height="24"/>
             </td>
             <td>&quot;RESIZE_NS&quot;</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_resize_we.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/xcursor_resize_w.gif" width="24" height="24"/>
             </td>
             <td>&quot;RESIZE_W&quot;</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_resize_we.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/xcursor_resize_e.gif" width="24" height="24"/>
             </td>
             <td>&quot;RESIZE_E&quot;</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_resize_we.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/xcursor_resize_we.gif" width="24" height="24"/>
             </td>
             <td>&quot;RESIZE_WE&quot;</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_resize_nesw.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/xcursor_resize_ne.gif" width="24" height="24"/>
             </td>
             <td>&quot;RESIZE_NE&quot;</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_resize_nesw.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/xcursor_resize_sw.gif" width="24" height="24"/>
             </td>
             <td>&quot;RESIZE_SW&quot;</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_resize_nwse.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/xcursor_resize_nw.gif" width="24" height="24"/>
             </td>
             <td>&quot;RESIZE_NW&quot;</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_resize_nwse.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/xcursor_resize_se.gif" width="24" height="24"/>
             </td>
             <td>&quot;RESIZE_SE&quot;</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_text.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/xcursor_text.gif" width="24" height="24"/>
             </td>
             <td>&quot;TEXT&quot;</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_appstarting.gif" width="24" height="29"/>
             </td>
             <td width="35" height="27" align="center">----</td>
             <td>&quot;APPSTARTING&quot; (Windows Only)</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_no.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">----</td>
             <td>&quot;NO&quot; (Windows Only)</td>
            </tr>
            <tr>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/wcursor_uparrow.gif" width="24" height="24"/>
             </td>
             <td width="35" height="27" align="center">
              <img border="0" src="images/cursors/xcursor_uparrow.gif" width="24" height="24"/>
             </td>
             <td>&quot;UPARROW&quot;</td>
            </tr>
           </table>
          </div>
          <div class="clear"></div>
          <br>
          Default: "ARROW"
          <br>
          <br>
          The Windows SDK recommends that cursors and icons should be implemented as resources rather than created at run time.
          <br>
          <br>
          The GTK cursors have the same appearance of the X-Windows cursors, although GTK cursors can have more than 2 colors depending on the X-Server.
          <br>
          <br>
          If it is not a pre-defined name, then will check for other system cursors.<br>
          In Windows the value will be used to load a cursor from the application resources. (??)<br>
          In Motif the value will be used as a X-Windows cursor number, see definitions in the X11 header "cursorfont.h".<br>
          In GTK the value will be used as a cursor name, see the GDK documentation on Cursors.
          <br>
          <br>
          If no system cursors were found then the value will be used to try to find an IUP image with the same name.<br>
          Use <a href="IupSetHandle.htm">IupSetHandle</a> to define a name for an <a href="IupImage.htm">IupImage</a>, 
          however the image needs an extra attribute and some specific characteristics:
          <br>
          <br>
          For an image to represent a cursor, it should have the attribute "HOTSPOT" to define the cursor hotspot (place where 
          the mouse click is actually effective).<br>
          The default value is "0:0".
          <br>
          <br>
          Usually only color indices 0, 1 and 2 can be used in a cursor, where 0 will be transparent (must be "BGCOLOR").<br>
          The RGB colors corresponding to indices 1 and 2 are defined just as in regular images.<br>
          In Windows and GTK the cursor can have more than 2 colors.<br>
          Cursor sizes are usually less than or equal to 32x32.
          <br>
          <br>
//        The cursor will only change when the interface system regains control or when <a href="IupFlush.htm">IupFlush</a> is called.
          <br>
          <br>
          The Windows SDK recommends that cursors and icons should be implemented as resources rather than created at run time.
          <br>
          <br>
?         When the cursor image is no longer necessary, it must be destroyed through function <a href="IupDestroy.htm">IupDestroy</a>.<br>
          Attention: the cursor cannot be in use when it is destroyed.
          <br>
          <br>
          Affects: <a href="IupDialog.htm">IupDialog</a>, <a href="IupCanvas.htm">IupCanvas</a>
          <br>
          <br>
          See Also <a href="IupImage.htm">IupImage</a>
          <br>
         </td>
        </tr>
-->
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
          While pGUI had all manner of convoluted restrictions on attributes, such as v being <a href="string.htm">atom_string</a> or the dire 
          distinction between <a href="IupSetAttribute.htm">IupSetAttribute</a>() and <a href="IupSetStrAttribute.htm">IupSetStrAttribute</a>(),
          largely because C and C-based languages cannot distinguish between an integer and a <a name=str></a>string (aka char*)
          <small><sup><a href="#str1">1</a></sup></small>, this one routine (gSetAttribute) covers and replaces at least 5 and probably more 
          pGUI routines, even technically things such as <a href="IupSetStrAttribute.htm#utility">IupSetInt</a>() - while there <i>is</i> a
          gSetInt() as noted above, you <i>can</i> pass the exact same parameters direct to gSetAttribute().
          <br>
          <br>
          As well as not replicating that particular distinction, xpGUI either actions things immediately or makes a (reference counted) copy, 
          so (unlike pGUI) there is no danger here of a value "vanishing" before it can be used.
          <br>
          <br>
          <!-- (while technically true, it really adds nothing...)
          While pGUI sometimes treated say "50x" as "set w but leave h unchanged" there is no similar facility in xpGUI, which treats that the
          same as "50x0", and you would indeed usually have to fetch the prior values and then set them both. Specific future enhancements are 
          always a possibility, though, for instance I would have little to say against "SIZEW" and "SIZEH", were there a genuine need.
          <br>
          <br>
-->
          Appropriate care may still sometimes be required with some values, such as a raw memory address, which must fairly obviously
          remain valid for the entire lifetime of the interface element, or at least until all copies/references to it are replaced.
          <br>
          <br>
          <!-- Why offer, when a) you can't think of a use, and b) a dictionary can do it all, and quite probably far more anyway.
          Aside: I foresee little difficulty and would have no objections to providing gSetCustomAttribute() and a matching get routine,
          not that I can think of any practical use just yet, but I would consider it utter madness to have gSetAttribute() effectively 
          ignore any attribute names it does not recognise, rather than reject my many typos. By ignore I really mean <i>quietly</i> obey, 
          which is what IUP does.
          <br>
          <br>
-->
          <a name=str1></a><small><sup><a href="#str">1</a></sup></small> Of course Phix manages that via a combination of limiting integers 
          to 31/63 bits, storing 32/64 bit "integers" in an atom, and not having/depending on a pointer type, rather you store pointers in an 
          atom and it becomes your sole responsibility to use them as such, for instance the language itself would not raise an eyebrow should 
          you ask for the square root of a pointer, or for that matter use the pointer itself when you should be using whatever it points at, 
          though one it <i>would</i> catch is char* vs string. Swings and roundabouts, I guess.
         </td>
        </tr>
       </table>
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
