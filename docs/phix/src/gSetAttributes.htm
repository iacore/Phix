<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">gSetAttributes</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include xpGUI.e
           <br>
           <br>
            gSetAttributes(<a href="gdx.htm">gdx</a> id, 
                           <a href="string.htm">string</a> attributes, 
                           <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Sets several attributes of an interface element or elements.
          <br>
          <br>
            id: Identifier(s) of the interface element(s).<br>
            attributes: string with the attributes in the format 
            <i>&ldquo;name<small><sub>1</sub></small>=attr<small><sub>1</sub></small>, 
                      name<small><sub>2</sub></small>=attr<small><sub>2</sub></small>,...&rdquo;</i><br>
            args: if not {}, it performs <code>attributes = <a href="sprintf.htm">sprintf</a>(attributes,args)</code>.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            Parses the (post-sprintf) attributes string and invokes 
            <a href="gSetAttribute.htm">gSetAttribute</a>(id,name<small><sub><i>i</i></sub></small>,attr<small><sub><i>i</i></sub></small>) 
            for each pair in turn. This routine itself does not care or check whether id is a single or a sequence of ids, and instead
            leaves all such handling to the "without-s" routine.
            <br>
            <br>
            Most interface elements can be created with an optional implicit inline invocation of gSetAttributes(), which can make code 
            much cleaner than invoking this function, as example 2 below shows.
            <br>
            <br>
            Fairly obviously, attribute values must be expressed(/ible) in textual form, but a <a href="integer.htm#bool">bool</a>, for
            instance, can be set using "1"/"0", "true"/"false", "YES"/"NO", "ON"/"OFF" and similar, as documented for the specific attribute, 
            with (say) "SOMEFLAG=%t, ...", {flag, ...} or a separate <a href="gSetAttribute.htm">gSetAttribute</a>(id,"SOMEFLAG",flag) being 
            some of the more obvious and straightforward choices.
            <br>
            <br>
            There may be cases such as a title of `thing="X", [SIZE=%d]` which might prove difficult if not impossible to achieve via 
            gSetAttributes(), because of the probable mis-parsing of commas, spaces, [mixed] quotes, and equal signs. Bear this in mind, 
            especially when the data originates from file or user input, and may in fact require careful sanitisation, or even rejection.
            While quotation marks <i>are</i> parsed, so for example gSetAttributes(id,`TITLE="Address Book", SIZE=500x300`) works fine, 
            there is however quite simply <i>no way</i> to include literal quotation marks in a value when using gSetAttributes(). Any 
            such potentially confusing fields must be set individually using <a href="gSetAttribute.htm">gSetAttribute</a>() directly.
            If there is any doubt, especially with settings that are not fixed constants, just do them one at a time.
<!-- [FIXED]
            <br>
            <br>
            Note also that hex values require quotes, eg gSetAttributes(ih,"FGCOLOR=#008000") does not work but 
            gSetAttributes(ih,`FGCOLOR="#008000"`) does. [DEV test me]
-->
            <br>
            <br>
            While the most common use is to set several attributes on a single element, it is also possible to set the same attribute(s) on
            several elements, as example 3 below shows.
            <br>
            <br>
<!--
//          The function <span class="illegal">IupSetAttributesf</span> has been removed, since that functionality is now provided by the optional 
//          <code>string attributes="", sequence args={}</code> parameters on all relevant element creation routines (with non-default
//          values triggering an internal invocation of this very routine).<br>
//          Likewise the <span class="illegal">IupSetAtt</span> function has been removed, see example 2 below, though admittedly when a non-null name has
//          been provided that may require extra <a href="IupSetHandle.htm">IupSetHandle</a>() calls (which, btw, is equivalent
//          to making the handle global, and therefore potentially troublesome).<br>
-->
            C code that uses nested IupSetAtt[ributes[f]]() calls should normally be converted into a single 
            <a href="g_paranormal.htm">paranormalised function</a> call when possible, otherwise be broken down into consecutive 
            statements that all get passed the same id, and/or explicit variables created (suitably/sensibly/nicely named) for 
            any (previously anonymous) inner elements. Sometimes that can be a bit of a drag, but more often than not the code
            ends up both easier to read and easier to modify at some later date.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 1:</b>
         </td>
         <td>
DEV: all examples need testing/updating<br><br>
            Select the appropriate file dialog type and title.
         </td>
        </tr>
        <tr>
         <td>
         </td>
         <td>
<!--eucode>
string dlgtype = iff(bOpen?`DIALOGTYPE=OPEN, TITLE=Open`
                          :`DIALOGTYPE=SAVE, TITLE=Save`)
gSetAttributes(filedlg, dlgtype)
</eucode-->
<pre>
<font color="#004080">string</font><font color="#000000"> dlgtype</font><font color="#0000FF"> =</font><font color="#7060A8"> iff</font><font color="#0000FF">(</font><font color="#000000">bOpen</font><font color="#0000FF">?</font><font color="#008000">`DIALOGTYPE=OPEN, TITLE=Open`</font>
<font color="#0000FF">                          :</font><font color="#008000">`DIALOGTYPE=SAVE, TITLE=Save`</font><font color="#0000FF">)</font>
<font color="#7060A8">gSetAttributes</font><font color="#0000FF">(</font><font color="#000000">filedlg</font><font color="#0000FF">,</font><font color="#000000"> dlgtype</font><font color="#0000FF">)</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 2:</b>
         </td>
         <td>
            Creates a list with country names and defines Japan as the selected option.
         </td>
        </tr>
        <tr>
         <td>
         </td>
         <td>
            Translate C code such as
            <br>
            <small><br>
             <code>list = IupList(); IupSetAtt(NULL, list, "VALUE", "3", "1", "Brazil", "2", "USA", "3", "Japan", "4", "France", NULL);</code>
            <br></small>
            <br>
             to
            <br>
            <small><br></small>
<!--eucode>
gdx list = gList(`VALUE=3, 1=Brazil, 2=USA, 3=Japan, 4=France`)
</eucode-->
<pre>
<font color="#7060A8">gdx</font><font color="#000000"> list</font><font color="#0000FF"> =</font><font color="#7060A8"> gList</font><font color="#0000FF">(</font><font color="#008000">`VALUE=3, 1=Brazil, 2=USA, 3=Japan, 4=France`</font><font color="#0000FF">)</font>
</pre>
            <small><br></small>
            Admittedly that is more of an example of when <i>not</i> to use gSetAttributes(), or more accurately implicitly inline it.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="gGetAttribute.htm">gGetAttribute</a>,
          <a href="gSetAttribute.htm">gSetAttribute</a>,
          <a href="gList.htm">gList</a>
         </td>
        </tr>
       </table>
        <div style="clear:both;height:1px;"> </div>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
