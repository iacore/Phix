<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">gShow</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include xpGUI.e
            <br>
            <br>
            gShow(<a href="gdx.htm">gdx</a> id, <a href="integer.htm">integer</a> x=XPG_CURRENT, y=XPG_CURRENT)
<!--
            <br>
            <i>-- or --</i>
            <br>
            gPopup(<a href="gdx.htm">gdx</a> id, <a href="integer.htm">integer</a> x=XPG_CURRENT, y=XPG_CURRENT)
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Displays a dialog, optionally in a given position on the screen.
            <br>
            <br>
            id: a result from <a href="gDialog.htm">gDialog</a>() <small><i>[use <a href="gMenu.htm#gPopupMenu">gPopupMenu</a> for menus]</i></small><br>
            x, y: top left corner in pixels, or one of the predefined constants listed below.
            <br>
            <br>
            Equivalent to <a href="gSetAttribute.htm">gSetAttribute</a>(id,"VISIBLE",true) when used on individual elements and sub-containers.
<!-- DEV...
            Note that <a href="gSetAttribute.htm">gSetAttribute</a>(id,"VISIBLE",bVisible) should be used in preference on individual elements and 
            sub-containers.
            An additional bool bModal=false parameter is planned but not yet implemented.
-->
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
<!--
            dlg: identifier of the dialog.
            <br>
            <br>
            x: horizontal position on the screen of the top left corner of the window, in pixels.<br>
            y: vertical ""
            <br>
            <br>
-->
            Optionally the following definitions can also be used for x (instead of a specific pixel co-ordinate):
            <ul>
            <li>XPG_LEFT: Positions the dialog on the left corner of the screen</li>
            <li>XPG_CENTER: Horizontally centralizes the dialog on the screen</li>
            <li>XPG_RIGHT: Positions the dialog on the right corner of the screen</li>
            <li>XPG_MOUSEPOS: Positions the left/right edge of the dialog on the mouse position</li>
            <li>XPG_CENTERPARENT: Horizontally centralizes the dialog relative to its parent</li>
            <li>XPG_CURRENT: use the current position of the dialog, XPG_CENTER if not known. </li>
            <li>XPG_LEFTPARENT: Positions the element on the left border of its parent. Not valid for menus.</li>
            <li>XPG_RIGHTPARENT: Positions the element on the right border of its parent. Not valid for menus.</li>
            </ul>
            and likewise the following definitions can also be used for y (instead of a specific pixel co-ordinate):
            <ul>
            <li>XPG_TOP: Positions the dialog on the top of the screen </li>
            <li>XPG_CENTER: Vertically centralizes the dialog on the screen </li>
            <li>XPG_BOTTOM: Positions the dialog on the base of the screen </li>
            <li>XPG_MOUSEPOS: Positions the top/bottom edge of the dialog on the mouse position</li>
            <li>XPG_CENTERPARENT: Vertically centralizes the dialog relative to its parent</li>
            <li>XPG_CURRENT: use the current position of the dialog, XPG_CENTER if not known.</li>
            <li>XPG_TOPPARENT: Positions the element on the top border of its parent. Not valid for menus.</li>
            <li>XPG_BOTTOMPARENT: Positions the element on the bottom border of its parent. Not valid for menus.</li>
            </ul>
<!--
            If the dialog needs to be mapped and the current position is not known then the dialog is centered. 
            <br>
            <br>
-->
            Note that XPG_CENT<b><i>RE</i></b> is for <a href="gCanvas.htm#gCanvasText">gCanvasText</a>() and the wrong constant,
            treated as 0 here (since it is) which in this case is taken to mean top/left.
            <br>
            <br>
<!--DEV
            x and y positions are the same as returned by the <a href="gGetAttribute.htm#SCREENPOSITION">SCREENPOSITION</a> attribute.
            <br>
            <br>
-->
<!--        Calling gShow() and setting the <a href="gSetAttribute.htm#VISIBLE">VISIBLE</a> attribute to YES are equivalent. <br>-->
            Invokes <a href="gMap.htm">gMap</a>() automatically, when needed.
            <br>
            <br>
            See the <a href="gDialog.htm#PLACEMENT">PLACEMENT</a> attribute for other position and show options.
            <br>
            <br>
            When XPG_CURRENT is used at the first time the dialog is shown then it is replaced by XPG_CENTERPARENT.
            <br>
            <br>
            When XPG_CENTERPARENT is used but no parent is defined then it is treated the same as XPG_CENTER.
            <br>
            <br>
            When either x or y is XPG_MOUSEPOS they must both be. The window is positioned such that the top left corner is
            at the mouse pointer co-ordinates, unless that would exceed the right hand side of the screen in which case it is
            positioned with the right edge touching the mouse pointer, and/or if it would drop below the bottom of the screen
            the dialog is positioned above the mouse pointer, in other words one of the four corners of the window will be on 
            the mouse pointer. Should the window exceed half the height or width of the screen, then from certain positions 
            the top left corner of the window may end up off-screen, in which case either use a smaller window or constrain 
            where the mouse can be when this can happen towards the edges and away from the centre of the screen - so for
            instance you could still have a ridiculously huge popup when clicking on the properties of a monopoly board. For
            anything fancier you could always just calculate the co-ordinates yourself, it&rsquo;s not exactly hard.
            <br>
            <br>
            The main screen size does not include additional monitors.
            <br>
            <br>
            This function can be executed more than once for the same dialog. 
            This will make the dialog be placed above all other dialogs in the application, changing its Z-order, and update its position and/or size on screen. 
            <br>
            <br>
            IMPORTANT: Calling gShow() for a visible dialog previously shown with bModal:=true does nothing.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
gShow(dlg)
</eucode-->
<pre>
<font color="#7060A8">gShow</font><font color="#0000FF">(</font><font color="#000000">dlg</font><font color="#0000FF">)</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="gHide.htm">gHide</a>,
<!--          <a href="IupPopup.htm">IupPopup</a>, -->
          <a href="gMap.htm">gMap</a><br>
          <a name=tech></a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            Unlike the C API and pGUI and thanks to optional parameters there is no need for a separate IupShowXY() or gShowXY() routine.
<!--
            <br>
            <br>
            There is (as yet) no equivalent or replacement for <a href="IupPopup.htm">IupPopup</a>(), though I hope to figure something
            out. One thing that absolutely cannot be done, from a <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js</b></span></a>
            perspective, is "control is only returned to the application after XPG_CLOSE/gHide() or when a menu item is selected", since
            JavaScript simply does not work that way/execution cannot be "paused". It would instead have to disable all open windows, and
            any "post-popup" code (manually) shifted into a "CLOSE" handler, and (somehow) re-enable those windows around the same time
            that is invoked. Invoking a (new, as yet unwritten) gPopup() on an already visible dialog is likely to become a fatal error,
            though replacing any such with a gShow() just to move the window should in theory be fine.
-->
         </td>
        </tr>
       </table>
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
