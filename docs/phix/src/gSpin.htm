<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">gSpin</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include xpGUI.e
            <br>
            <br>
            <a href="gdx.htm">gdx</a> id = gSpin([<a href="rtn.htm">rtn</a> value_changed=NULL,] 
                                                 <a href="string.htm">string</a> attributes="",
                                                 <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Creates a spin control.
            <br>
            <br>
            value_changed: (optional) a procedure to be invoked when the contents are changed, see <a href="#VALUE_CHANGED">VALUE_CHANGED</a> below.<br>
            For more information on the attributes and args parameters see <a href="gSetAttributes.htm">gSetAttributes</a>().<br>
            This is a <a href="g_paranormal.htm">paranormalised function</a>.  <small>(see <a href="#tech" onclick="opentech()">technicalia</a>)</small>
            <br>
            <br>
            Returns: the identifier of the created element.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
            Supported.
         </td>
        </tr>
<!--
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="gList.htm">gList</a>
         </td>
        </tr>
-->
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
          <div style="float:left;">
<!--eucode>
-- demo\xpGUI\gSpin.exw
include xpGUI.e

procedure value_changed(gdx id)
    ?{"value_changed",id,gGetInt(id,"VALUE")}
end procedure

gdx spin = gSpin(value_changed,"MARGIN=13x13,VALUE=5"),
    dlg = gDialog(gHbox({spin}),`gSpin`,`SIZE=240x80`)
gShow(dlg)
gMainLoop()
</eucode-->
<pre>
<font color="#000080"><i>-- demo\xpGUI\gSpin.exw</i></font>
<font color="#008080">include</font><font color="#000000"> xpGUI.e
</font>
<font color="#008080">procedure</font><font color="#000000"> value_changed</font><font color="#0000FF">(</font><font color="#7060A8">gdx</font><font color="#000000"> id</font><font color="#0000FF">)
    ?{</font><font color="#008000">"value_changed"</font><font color="#0000FF">,</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#7060A8">gGetInt</font><font color="#800000">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#008000">"VALUE"</font><font color="#800000">)</font><font color="#0000FF">}</font>
<font color="#008080">end procedure
</font>
<font color="#7060A8">gdx</font><font color="#000000"> spin</font><font color="#0000FF"> =</font><font color="#7060A8"> gSpin</font><font color="#0000FF">(</font><font color="#000000">value_changed</font><font color="#0000FF">,</font><font color="#008000">"MARGIN=13x13,VALUE=5"</font><font color="#0000FF">),</font>
<font color="#000000">    dlg</font><font color="#0000FF"> =</font><font color="#7060A8"> gDialog</font><font color="#0000FF">(</font><font color="#7060A8">gHbox</font><font color="#800000">(</font><font color="#800080">{</font><font color="#000000">spin</font><font color="#800080">}</font><font color="#800000">)</font><font color="#0000FF">,</font><font color="#008000">`gSpin`</font><font color="#0000FF">,</font><font color="#008000">`SIZE=240x80`</font><font color="#0000FF">)</font>
<font color="#7060A8">gShow</font><font color="#0000FF">(</font><font color="#000000">dlg</font><font color="#0000FF">)</font>
<font color="#7060A8">gMainLoop</font><font color="#0000FF">()</font>
</pre>
          </div>
          <img alt="gSpin" style="float:right;" src="images/gSpin.png" width="240" height="80"/>
          <div class="clear"></div>
         </td>
        </tr>
<!--
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
?           WinAPI uses/requires a {text,spin} buddy-pair: some messages might not be quite correctly forwarded yet,
            and the merged/split/align/etc sizes of said pair are certainly not handled properly yet either.

            When MULTILINE=YES the Enter key will add a new line, and the Tab key will insert a Tab. 
//          So the "DEFAULTENTER" button will not be processed when the element has the keyboard focus, also to change focus to the next element press 
            &lt;Ctrl&gt;+&lt;Tab&gt;.
            <br>
            <br>
            In Windows, if you press a Ctrl+key combination that is not supported by the control, then a beep is sound.
            <br>
            <br>
            When using UTF-8 strings in GTK be aware that all attributes are indexed by characters, NOT by byte index, because some characters in UTF-8 can use more than one byte. 
            This also applies to Windows if FORMATTING=YES depending on the Windows codepage (for example East Asian codepage where some characters take two bytes).
            <br>
            <br>
            Internal Drag&Drop support is enabled by default. But in Windows the internal Drag&Drop is enabled only if FORMATTING=YES. 
            In GTK the internal Drag&Drop can NOT be disabled, so it will conflict with the Drag & Drop attributes and handlers.
            <br>
            <br>
            Some examples can be seen in demo\xpGUI\sample.exw
         </td>
        </tr>
-->
        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
            <a name="RANGE"></a>
         </td>
        </tr>
<!--
        <tr>
         <td>
?         ALIGNMENT
         </td>
         <td>
            [Windows and GTK Only] (non inheritable) text alignment. <br>
            Possible values: "ALEFT", "ARIGHT", "ACENTER". Default: "ALEFT". <br>
            In Motif, text is always left aligned.
         </td>
        </tr>
        <tr>
         <td>
?         APPEND<a href="notpgui.htm#IupText"><span style="color:orange; font-size:75%;"><sup>?</sup></span></a>
         </td>
         <td>
            (write-only) Inserts a text at the end of the current text. 
            In the Multiline, if APPENDNEWLINE=YES, a "\n" character will be automatically inserted before 
            the appended text if the current text is not empty(APPENDNEWLINE default is YES). 
            Ignored if set before map.
         </td>
        </tr>
-->
<!--
//      <tr>
//       <td>
//?       <a href="gSetAttribute.htm#BGCOLOR">BGCOLOR</a><a href="notpgui.htm#IupText"><span style="color:orange; font-size:75%;"><sup>?</sup></span></a>
//       </td>
//       <td>
//          Background color of the text. Default: the global attribute <a href="gGetGlobal.htm#TXTBGCOLOR">TXTBGCOLOR</a>.
//       </td>
//      </tr>
-->
<!--
//      <tr>
//       <td>
//?       <a href="gSetAttribute.htm#FGCOLOR">FGCOLOR</a>
//       </td>
//       <td>
//          Text color. Default: the global attribute <a href="gGetGlobal.htm#TXTFGCOLOR">TXTFGCOLOR</a>.
//       </td>
//      </tr>
-->
<!--
        <tr>
         <td>
?         <a href="gGetAttribute.htm#SIZE">SIZE</a>
         </td>
         <td>
            (non inheritable) Since the contents can be changed by the user, the Natural Size is not affected by the text contents. <br>
<X!X--          Use VISIBLECOLUMNS and VISIBLELINES to control the Natural Size. --X>
            <br>
          <a name=SPIN></a>
         </td>
        </tr>
        <tr>
         <td>
???       SPIN<a href="notpgui.htm"><span style="color:lime;"><sup>+</sup></span></a>
         </td>
         <td>
            (non inheritable, creation only) enables a spin control attached to the element. Default: NO. <br>
            The spin increments and decrements an integer number. <br>
            The editing in the element is still available.
            <br>
            <br>
            For an example, or rather four, see demo\pGUI\boids3d.exw.
         </td>
        </tr>
        <tr>
         <td>
?         SPINVALUE
         </td>
         <td>
            (non inheritable) the current value of the spin. <br>
            The value is limited to the minimum and maximum values.
         </td>
        </tr>
-->
        <tr>
         <td>
          RANGE
         </td>
         <td>
            the min/maximum values. Default: {0,100}.<br>
            <a name="STEP"></a>
         </td>
        </tr>
        <tr>
         <td>
          STEP
         </td>
         <td>
            the inc/decrement value, must be a positive integer <small>(see <a href="#tech" onclick="opentech()">technicalia</a>)</small>. Default: 1.
            <br>
            <a name="VALUE"></a>
         </td>
        </tr>
<!--
        <tr>
         <td>
?         SPINALIGN
         </td>
         <td>
            (creation only) the position of the spin. Can be LEFT or RIGHT. Default: RIGHT. In GTK is always RIGHT.
         </td>
        </tr>
//      <tr>
//       <td>
//?       SPINAUTO
//       </td>
//       <td>
//          (creation only) enables the automatic update of the text contents. Default: YES. <br>
//          Use SPINAUTO=NO and the VALUE attribute during SPIN_CB to control the text contents when the spin is incremented.
//          <br>
//          <br>
//          In Windows, the increment is multiplied by 5 after 2 seconds and multiplied by 20 after 5 seconds of a spin button pressed. <br>
//          In GTK, the increment change is progressively accelerated when a spin button is pressed.
//       </td>
//      </tr>
-->
        <tr>
         <td>
          VALUE
         </td>
         <td>
            The current (integer) value of the control, initially blank.<br>
            <a name="WRAP"></a>
         </td>
        </tr>
<!--
        <tr>
         <td>
?         VISIBLECOLUMNS
         </td>
         <td>
            Defines the number of visible columns for the Natural Size, this means that will act also as minimum number of visible columns. <br>
            It uses a wider character size then the one used for the <a href="gGetAttribute.htm#SIZE">SIZE</a> attribute so strings will fit better 
            without the need of extra columns. <br>
            As for <a href="gGetAttribute.htm#SIZE">SIZE</a> you can set to NULL after map to use it as an initial value. Default: 5
         </td>
        </tr>
-->
        <tr>
         <td>
          WRAP
         </td>
         <td>
            (creation only) should the position reach either limit, continue from the opposite limit. 
            Default: <a href="logicops.htm#tf">false</a>.
            <br>
<!--
            <br>
            Only works for integer values.
-->
         </td>
        </tr>
        <tr>
         <td>
          also
         </td>
         <td>
            <a href="gSetAttribute.htm#ACTIVE">ACTIVE</a>, 
            <a href="gSetAttribute.htm#CANFOCUS">CANFOCUS</a>, 
            <a href="gSetAttribute.htm#FONT">FONT</a>, 
<!--        <a href="gSetAttribute.htm#NAME">NAME</a>, -->
            <a href="gSetAttribute.htm#EXPAND">EXPAND</a>, 
<!--?           <a href="gGetAttribute.htm#POSITION">POSITION</a>, -->
<!--?           <a href="gGetAttribute.htm#SCREENPOSITION">SCREENPOSITION</a>, -->
            <a href="gSetAttribute.htm#MARGIN">MARGIN</a>, 
            <a href="gSetAttribute.htm#MINSIZE">MINSIZE</a>, 
            <a href="gSetAttribute.htm#MAXSIZE">MAXSIZE</a>,
            <a href="gGetAttribute.htm#SIZE">SIZE</a>,
<!--            <a href="gSetAttribute.htm#WID">WID</a>, -->
            <a href="gSetAttribute.htm#TIP">TIP</a>, 
<!--            <a href="gSetAttribute.htm#RASTERSIZE">RASTERSIZE</a>,-->
<!--            <a href="gSetAttribute.htm#ZORDER">ZORDER</a>,-->
            <a href="gSetAttribute.htm#VISIBLE">VISIBLE</a>.
         </td>
        </tr>
        <tr>
         <td>
          <b>Handlers:</b>
         </td>
         <td>
          <a name=VALUE_CHANGED></a>
            <br>
         </td>
        </tr>
<!--
        <tr>
         <td>
?         <a href="gSetHandler.htm#CLICK">CLICK</a>
         </td>
         <td>
            Event generated when any mouse button is pressed or released. <br>
<X!X--          Use <a href="IupConvertXYToPos.htm">IupConvertXYToPos</a>() to convert (x,y) coordinates in character positioning. (since 3.0)--X>
         </td>
        </tr>
-->
        <tr>
         <td>
          <a href="gSetHandler.htm#VALUE_CHANGED">VALUE_CHANGED</a>
         </td>
         <td>
            Called after the value was interactively changed by the user.
            <br>
            <br>
            procedure value_changed(<a href="gdx.htm">gdx</a> id)<br>
            id: identifier of the element that activated the event.
         </td>
        </tr>
<!--
        <tr>
         <td>
?         SPIN_CB
         </td>
         <td>
            Event generated when a spin button is pressed. Valid only when SPIN=YES. <br>
            When this handler is invoked the <a href="#ACTION">ACTION</a> handler is not called. <br>
            The VALUE attribute can be changed during this handler only if SPINAUTO=NO. (since 3.0)
            <br>
            <br>
            function spin_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> pos)<br>
            ih: identifier of the element that activated the event.<br>
            pos: the value of the spin (after it was incremented).
            <br>
            <br>
<X!X--DEV test me--X>
            Returns: <a href="gSetHandler.htm#XPG_IGNORE">XPG_IGNORE</a> is processed.
            <X!X-- in Windows and Motif.--X>
         </td>
        </tr>
-->
        <tr>
         <td>
          also
         </td>
         <td>
<!--
//          <a href="gSetHandler.htm#MAP_CB">MAP_CB</a>,
//          <a href="gSetHandler.htm#UNMAP_CB">UNMAP_CB</a>,
//          <a href="gSetHandler.htm#DESTROY_CB">DESTROY_CB</a>, 
-->
<!--
?           <a href="gSetHandler.htm#GETFOCUS_CB">GETFOCUS_CB</a>, 
            <a href="gSetHandler.htm#KILLFOCUS_CB">KILLFOCUS_CB</a>, 
            <a href="gSetHandler.htm#ENTERWINDOW_CB">ENTERWINDOW_CB</a>,
            <a href="gSetHandler.htm#LEAVEWINDOW_CB">LEAVEWINDOW_CB</a>, 
-->
<!--            <a href="gSetHandler.htm#HELP_CB">HELP_CB</a> -->
            <a href="gSetHandler.htm#CLICK">CLICK</a>,
            <a href="gSetHandler.htm#KEY">KEY</a>: All common handlers are supported. <br>
          <a name=tech></a>
<!--
            <br>
            <br>
?           Drag & Drop handlers are supported. See Notes above.-->
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            As this is a <a href="g_paranormal.htm">paranormalised function</a>, and with no expectation that you should memorise this lot,
            except maybe "raa", you can assume that all of the following are potentially perfectly valid, with the fairly obvious restrictions 
            that any parameters <i>must</i> be in strict raa-order, and no args without attributes:
            <br>
            <br>
<small>
<!--eucode>
                        gSpin()
                        gSpin(rid)
                        gSpin(attributes)
                        gSpin(attributes, args)
                        gSpin(rid, attributes)
                        gSpin(rid, attributes, args)    -- (the full set)
</eucode-->
<pre>
<font color="#7060A8">                        gSpin</font><font color="#0000FF">()</font>
<font color="#7060A8">                        gSpin</font><font color="#0000FF">(</font><font color="#000000">rid</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gSpin</font><font color="#0000FF">(</font><font color="#000000">attributes</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gSpin</font><font color="#0000FF">(</font><font color="#000000">attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gSpin</font><font color="#0000FF">(</font><font color="#000000">rid</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gSpin</font><font color="#0000FF">(</font><font color="#000000">rid</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">)   </font><font color="#000080"><i> -- (the full set)</i></font>
</pre>
</small>
            <br>
            Note that in practice rid is actually defined as <a href="object.htm">object</a>, and attributes as
            a <a href="sequence.htm">sequence</a> rather than a string, but verified to be of the documented types, 
            after being repositioned via xpGUI.e/paranormalise_raa().
            <br>
            <br>
            While JavaScript copes admirably with fractional steps, GTK purports to but did not work for me, and WinAPI quite clearly has 
            no support for non-integers whatsoever. Hence STEP/RANGE/VALUE are limited to integers. Implementing a fake control for 
            desktop/Phix should be perfectly feasible (gText+button/image+KEY?) but is left as an exercise for the reader. Whatever I end 
            up having to do for <a href="gDatePick.htm">gDatePick</a>() on GTK, less the pop-up, will probably be somewhat similar, and 
            the 100% fake scrollbars of demo\xpGUI\scroller.exw strike me as pretty solid evidence that sort of thing <i>can</i> be done.
            <br>
<!--
//          <br>
//          <br>
//??            Technically, a gSpin() is just a gText() with a "now-private spin bit", but it is harder to document them together,
//          and there is no point encouraging/allowing switching the same control between the two mid-run. Also replaces the IUP
//          messed-up madness that is
//          <a href="IupSpin.htm">IupSpin</a>()/<a href="IupSpin.htm">IupSpinBox</a>()/<a href="IupText.htm">IupText</a>(SPIN).
-->
         </td>
        </tr>
       </table>
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
