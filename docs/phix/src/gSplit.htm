<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">gSplit</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include xpGUI.e
            <br>
            <br>
            <a href="gdx.htm">gdx</a> id = gSplit(<a href="gdx.htm">gdx</a> child1, child2,
                                                  <a href="string.htm">string</a> orientation="VERTICAL",
                                                  <a href="string.htm">string</a> attributes="",
                                                  <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            [Not yet implemented] Creates a gH/Vbox with three children, the middle one being a movable resizer.
            <br>
            <br>
            chile1, child2, orientation: self explanatory.<br>
            For more information on the attributes and args parameters see <a href="gSetAttributes.htm">gSetAttributes</a>.
<!--            This is a <a href="g_paranormal.htm">paranormalised function</a>.  <small>(see <a href="#tech" onclick="opentech()">technicalia</a>)</small>-->
            <br>
            <br>
            Returns: the identifier of the created element.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          [DEV] not yet Supported.
         </td>
        </tr>
<!--
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="gList.htm">gList</a>
         </td>
        </tr>
-->
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
            <p align="center"><img alt="gSplit" src="images/gSplit.png" width="240" height="80"/></p>
<!--eucode>
-- NB: WORK IN PROGRESS
-- demo\xpGUI\gSplit.exw
include xpGUI.e

gdx tx1 = gLabel(`1`), tx2 = gLabel(`2`), tx3 = gLabel(`3`)
    gSetAttribute({tx1,tx2,tx3},"MARGIN","40x40")
gdx shv = gSplit(tx1,gSplit(tx2,tx3),"HORIZONTAL"),
    dlg = gDialog(shv,"gSplit","SIZE=240x80")
gShow(dlg)
gMainLoop()
</eucode-->
<pre>
<font color="#000080"><i>-- NB: WORK IN PROGRESS
-- demo\xpGUI\gSplit.exw</i></font>
<font color="#008080">include</font><font color="#000000"> xpGUI.e
</font>
<font color="#7060A8">gdx</font><font color="#000000"> tx1</font><font color="#0000FF"> =</font><font color="#7060A8"> gLabel</font><font color="#0000FF">(</font><font color="#008000">`1`</font><font color="#0000FF">),</font><font color="#000000"> tx2</font><font color="#0000FF"> =</font><font color="#7060A8"> gLabel</font><font color="#0000FF">(</font><font color="#008000">`2`</font><font color="#0000FF">),</font><font color="#000000"> tx3</font><font color="#0000FF"> =</font><font color="#7060A8"> gLabel</font><font color="#0000FF">(</font><font color="#008000">`3`</font><font color="#0000FF">)</font>
<font color="#7060A8">    gSetAttribute</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">tx1</font><font color="#0000FF">,</font><font color="#000000">tx2</font><font color="#0000FF">,</font><font color="#000000">tx3</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#008000">"MARGIN"</font><font color="#0000FF">,</font><font color="#008000">"40x40"</font><font color="#0000FF">)</font>
<font color="#7060A8">gdx</font><font color="#000000"> shv</font><font color="#0000FF"> =</font><font color="#7060A8"> gSplit</font><font color="#0000FF">(</font><font color="#000000">tx1</font><font color="#0000FF">,</font><font color="#7060A8">gSplit</font><font color="#800000">(</font><font color="#000000">tx2</font><font color="#0000FF">,</font><font color="#000000">tx3</font><font color="#800000">)</font><font color="#0000FF">,</font><font color="#008000">"HORIZONTAL"</font><font color="#0000FF">),</font>
<font color="#000000">    dlg</font><font color="#0000FF"> =</font><font color="#7060A8"> gDialog</font><font color="#0000FF">(</font><font color="#000000">shv</font><font color="#0000FF">,</font><font color="#008000">"gSplit"</font><font color="#0000FF">,</font><font color="#008000">"SIZE=240x80"</font><font color="#0000FF">)</font>
<font color="#7060A8">gShow</font><font color="#0000FF">(</font><font color="#000000">dlg</font><font color="#0000FF">)</font>
<font color="#7060A8">gMainLoop</font><font color="#0000FF">()</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
            The default orientation is VERTICAL, ie a <a href="gBox.htm">gVbox</a>() containing a <i>horizontal</i> splitter,
            whereby the two main halves are stacked vertically, as shown for '2'/'3' above, whereas (obviously) a HORIZONTAL 
            orientation gets a <a href="gBox.htm">gHbox</a>() containing a <i>vertical</i> splitter, as shown for '1'/pair,
            with the two children side-by-side. I suppose it would not be entirely unfair to say that VERTICAL is shorthand 
            for VERTICALLY_STACKED_CHILDREN_WITH_A_HORIZONTAL_SPLITTER, and I&rsquo;ll not bore you with the opposite one.
            <br>
            <br>
            The whole point of a gSplit() is to draw that separator, update the mouse pointer when it&rsquo;s on it, and handle 
            drag/drop of it with the mouse. The initial position is based on the initial natural/user sizes of the two children, 
            both of which must of course be expandable in the appropriate direction, and is appropriately limited by both the
            <a href="gSetAttribute.htm#MINSIZE">MINSIZE</a> and <a href="gSetAttribute.htm#MAXSIZE">MAXSIZE</a> of both children.
         </td>
        </tr>
        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
            None spring to mind...
         </td>
        </tr>
<!--
//      <tr>
//       <td>
//?       <a href="gSetAttribute.htm#BGCOLOR">BGCOLOR</a><a href="notpgui.htm#IupText"><span style="color:orange; font-size:75%;"><sup>?</sup></span></a>
//       </td>
//       <td>
//          Background color of the text. Default: the global attribute <a href="gGetGlobal.htm#TXTBGCOLOR">TXTBGCOLOR</a>.
//       </td>
//      </tr>
-->
<!--
//      <tr>
//       <td>
//?       <a href="gSetAttribute.htm#FGCOLOR">FGCOLOR</a>
//       </td>
//       <td>
//          Text color. Default: the global attribute <a href="gGetGlobal.htm#TXTFGCOLOR">TXTFGCOLOR</a>.
//       </td>
//      </tr>
-->
<!--
        <tr>
         <td>
???       VALUE
         </td>
         <td>
            (non inheritable) Text displayed to or entered/modified by the user. <br>
            The '\n' character indicates a new line, valid only when MULTILINE=YES. <br>
            After the element is mapped and if there is no text will return the empty string "".
         </td>
        </tr>
-->
        <tr>
         <td>
          also
         </td>
         <td>
?           <a href="gSetAttribute.htm#ACTIVE">ACTIVE</a>, 
<!--            <a href="gSetAttribute.htm#CANFOCUS">CANFOCUS</a>,  -->
<!--            <a href="gSetAttribute.htm#FONT">FONT</a>, -->
<!--        <a href="gSetAttribute.htm#NAME">NAME</a>, -->
<!--            <a href="gSetAttribute.htm#EXPAND">EXPAND</a>, -->
<!--?           <a href="gGetAttribute.htm#POSITION">POSITION</a>, -->
<!--?           <a href="gGetAttribute.htm#SCREENPOSITION">SCREENPOSITION</a>, -->
<!--            <a href="gSetAttribute.htm#MINSIZE">MINSIZE</a>, -->
<!--            <a href="gSetAttribute.htm#MAXSIZE">MAXSIZE</a>,-->
<!--            <a href="gSetAttribute.htm#TIP">TIP</a>, -->
<!--            <a href="gSetAttribute.htm#RASTERSIZE">RASTERSIZE</a>,-->
<!--            <a href="gSetAttribute.htm#ZORDER">ZORDER</a>,-->
?           <a href="gSetAttribute.htm#VISIBLE">VISIBLE</a>.
         </td>
        </tr>
        <tr>
         <td>
          <b>Handlers:</b>
         </td>
         <td>
            probably none
            <br>
         </td>
        </tr>
<!--
        <tr>
         <td>
?         <a href="gSetHandler.htm#CLICK">CLICK</a>
         </td>
         <td>
            Event generated when any mouse button is pressed or released. <br>
          <a name=VALUE_CHANGED></a>
         </td>
        </tr>
        <tr>
         <td>
?         <a href="gSetHandler.htm#VALUE_CHANGED">VALUE_CHANGED</a>
         </td>
         <td>
            Called after the value was interactively changed by the user.
            <br>
            <br>
            procedure value_changed(<a href="gdx.htm">gdx</a> id)<br>
            id: identifier of the element that activated the event.
         </td>
        </tr>
        <tr>
         <td>
          also
         </td>
         <td>
            <a href="gSetHandler.htm#KEY">KEY</a>: All common handlers are supported. <br>
          <a name=tech></a>
         </td>
        </tr>
-->
<!--
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            As this is a <a href="g_paranormal.htm">paranormalised function</a>, and with no expectation that you should memorise this lot,
            except maybe "raa", you can assume that all of the following are potentially perfectly valid, with the fairly obvious restrictions 
            that any parameters <i>must</i> be in strict raa-order, and no args without attributes:
            <br>
            <br>
<small>
<X!X--eucode>
                        gText()
                        gText(rid)
                        gText(attributes)
                        gText(attributes, args)
                        gText(rid, attributes)
                        gText(rid, attributes, args)    -- (the full set)
</eucode--X>
 <pre>
<font color="#7060A8">                        gText</font><font color="#0000FF">()</font>
<font color="#7060A8">                        gText</font><font color="#0000FF">(</font><font color="#000000">rid</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gText</font><font color="#0000FF">(</font><font color="#000000">attributes</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gText</font><font color="#0000FF">(</font><font color="#000000">attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gText</font><font color="#0000FF">(</font><font color="#000000">rid</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gText</font><font color="#0000FF">(</font><font color="#000000">rid</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">)   </font><font color="#000080"><i> -- (the full set)</i></font>
 </pre>
</small>
            <br>
            Note that in practice rid is actually defined as <a href="object.htm">object</a>, and attributes as
            a <a href="sequence.htm">sequence</a> rather than a string, but verified to be of the documented types, 
            after being repositioned via xpGUI.e/paranormalise_raa().
            <br>
            <br>
            Technically, a gSpin() is just a gText() with a "now-private spin bit", but it is harder to document them together,
            and there is no point encouraging/allowing switching the same control between the two mid-run. Also replaces the IUP
            <a href="IupSpin.htm">IupSpin</a>()/<a href="IupSpin.htm">IupSpinBox</a>()/<a href="IupText.htm">IupText</a>(SPIN).
         </td>
        </tr>
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
-->
       </table>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
