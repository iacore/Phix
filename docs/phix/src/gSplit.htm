<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">gSplit</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include xpGUI.e
            <br>
            <br>
            <a href="gdx.htm">gdx</a> id = gSplit(<a href="gdx.htm">gdx</a> child1, child2,
                                                  <a href="string.htm">string</a> orientation="VERTICAL")
<!--                                                  <a href="string.htm">string</a> attributes="",
                                                  <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
<!--
            <b>INCOMPLETE</b>: Almost there, but the actual dragging is very flakey to say the least, bigger fish to fry...<br> 
            <small>Might have better luck with js though I doubt that will give me many clues to help Phix/desktop.</small>
            <br>
            <br>
-->
            Creates a gH/Vbox with three children, the middle one being a (private) movable resizer.
            <br>
            <br>
            child1/2, orientation: should be fairly self explanatory, see notes below.
<!--            For more information on the attributes and args parameters see <a href="gSetAttributes.htm">gSetAttributes</a>().<br>-->
<!--            This is a <a href="g_paranormal.htm">paranormalised function</a>.  <small>(see <a href="#tech" onclick="opentech()">technicalia</a>)</small>-->
            <br>
            <br>
            Returns: the identifier of the created element.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          [DEV] Not yet supported. <small>(but have got meself E:\downloads\misc\js\simpledrag.htm/js as a fairly simple proof of concept)<small>
         </td>
        </tr>
<!--
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="gList.htm">gList</a>
         </td>
        </tr>
-->
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
          <div style="float:left;">
<!--eucode>
-- demo\xpGUI\gSplit.exw
include xpGUI.e
procedure edge(gdx canvas, integer w,h)
    gCanvasRect(canvas,1,w-2,1,h-2)
    string txt = sprintf("%d",canvas) -- "1"/"2"/"3"
    gCanvasText(canvas,w/2,h/2,txt,XPG_C)
end procedure

gdx c1 = gCanvas(edge), 
    c2 = gCanvas(edge), 
    c3 = gCanvas(edge),
    sv = gSplit(c2,c3),--"VERTICAL"),
    sh = gSplit(c1,sv,"HORIZONTAL"),
    dlg = gDialog(sh,"gSplit","SIZE=240x80")
gSetAttribute({c1,c2,c3},"BGCLR",XPG_PARCHMENT)
gSetAttribute({c1,c2,c3},"FGCLR",XPG_OLIVE)
gShow(dlg)
gMainLoop()
</eucode-->
<pre>
<font color="#000080"><i>-- demo\xpGUI\gSplit.exw</i></font>
<font color="#008080">include</font><font color="#000000"> xpGUI.e</font>
<font color="#008080">procedure</font><font color="#000000"> edge</font><font color="#0000FF">(</font><font color="#7060A8">gdx</font><font color="#000000"> canvas</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> w</font><font color="#0000FF">,</font><font color="#000000">h</font><font color="#0000FF">)</font>
<font color="#7060A8">    gCanvasRect</font><font color="#0000FF">(</font><font color="#000000">canvas</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">w</font><font color="#0000FF">-</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">h</font><font color="#0000FF">-</font><font color="#000000">2</font><font color="#0000FF">)</font>
<font color="#004080">    string</font><font color="#000000"> txt</font><font color="#0000FF"> =</font><font color="#7060A8"> sprintf</font><font color="#0000FF">(</font><font color="#008000">"%d"</font><font color="#0000FF">,</font><font color="#000000">canvas</font><font color="#0000FF">)</font><font color="#000080"><i> -- "1"/"2"/"3"</i></font>
<font color="#7060A8">    gCanvasText</font><font color="#0000FF">(</font><font color="#000000">canvas</font><font color="#0000FF">,</font><font color="#000000">w</font><font color="#0000FF">/</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#000000">h</font><font color="#0000FF">/</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#000000">txt</font><font color="#0000FF">,</font><font color="#004600">XPG_C</font><font color="#0000FF">)</font>
<font color="#008080">end procedure
</font>
<font color="#7060A8">gdx</font><font color="#000000"> c1</font><font color="#0000FF"> =</font><font color="#7060A8"> gCanvas</font><font color="#0000FF">(</font><font color="#000000">edge</font><font color="#0000FF">), </font>
<font color="#000000">    c2</font><font color="#0000FF"> =</font><font color="#7060A8"> gCanvas</font><font color="#0000FF">(</font><font color="#000000">edge</font><font color="#0000FF">), </font>
<font color="#000000">    c3</font><font color="#0000FF"> =</font><font color="#7060A8"> gCanvas</font><font color="#0000FF">(</font><font color="#000000">edge</font><font color="#0000FF">),</font>
<font color="#000000">    sv</font><font color="#0000FF"> =</font><font color="#7060A8"> gSplit</font><font color="#0000FF">(</font><font color="#000000">c2</font><font color="#0000FF">,</font><font color="#000000">c3</font><font color="#0000FF">),</font><font color="#000080"><i>--"VERTICAL"),</i></font>
<font color="#000000">    sh</font><font color="#0000FF"> =</font><font color="#7060A8"> gSplit</font><font color="#0000FF">(</font><font color="#000000">c1</font><font color="#0000FF">,</font><font color="#000000">sv</font><font color="#0000FF">,</font><font color="#008000">"HORIZONTAL"</font><font color="#0000FF">),</font>
<font color="#000000">    dlg</font><font color="#0000FF"> =</font><font color="#7060A8"> gDialog</font><font color="#0000FF">(</font><font color="#000000">sh</font><font color="#0000FF">,</font><font color="#008000">"gSplit"</font><font color="#0000FF">,</font><font color="#008000">"SIZE=240x80"</font><font color="#0000FF">)</font>
<font color="#7060A8">gSetAttribute</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">c1</font><font color="#0000FF">,</font><font color="#000000">c2</font><font color="#0000FF">,</font><font color="#000000">c3</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#008000">"BGCLR"</font><font color="#0000FF">,</font><font color="#004600">XPG_PARCHMENT</font><font color="#0000FF">)</font>
<font color="#7060A8">gSetAttribute</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">c1</font><font color="#0000FF">,</font><font color="#000000">c2</font><font color="#0000FF">,</font><font color="#000000">c3</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#008000">"FGCLR"</font><font color="#0000FF">,</font><font color="#004600">XPG_OLIVE</font><font color="#0000FF">)</font>
<font color="#7060A8">gShow</font><font color="#0000FF">(</font><font color="#000000">dlg</font><font color="#0000FF">)</font>
<font color="#7060A8">gMainLoop</font><font color="#0000FF">()</font>
</pre>
          </div>
          <img alt="gSplit" style="float:right;" src="images/gSplit.png" width="240" height="80"/>
          <div class="clear"></div>
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
            The whole point of a gSplit() is to draw, set the mouse pointer, and handle drag/drop of the separator.<br>
            It is just a gH/Vbox({child1,<i>&lt;private canvas&gt;</i>,child2}) masquerading as a builtin/native control, 
            but one that handles all the resizing, display, cursors, and mouse handling automatically for you.<br>
            The initial position is based on the initial natural/user sizes of the two children, both of which must of course 
            be expandable in the appropriate direction, and is appropriately limited by both the
            <a href="gSetAttribute.htm#MINSIZE">MINSIZE</a> and 
            <a href="gSetAttribute.htm#MAXSIZE">MAXSIZE</a> of both children. <small>(DEV: the latter (ie MIN/MAX) not yet - 
            dragging on WinAPI is also still very flickery... might work much better with a timer)</small>
            <br>
            <br>
            The default orientation is VERTICAL, ie a <a href="gBox.htm">gVbox</a>() containing a <i>horizontal</i> splitter,
            whereby the two main halves are stacked vertically, as shown for '2'/'3' above, whereas (obviously) a HORIZONTAL 
            orientation gets a <a href="gBox.htm">gHbox</a>() containing a <i>vertical</i> splitter, as shown for '1'/pair,
            with the two children side-by-side. I suppose it would not be entirely unfair to say that VERTICAL is shorthand 
            for VERTICALLY_STACKED_CHILDREN_WITH_A_HORIZONTAL_SPLITTER, and I&rsquo;ll not bore you with the other one.
            <br>
            <br>
<!--
?           Physically using a gSplit immediately clobbers the natural, normal, and user sizes in the appropriate direction.
            <br>
            <br>
            There is (as yet?) no suppport for <a href="gSetAttribute.htm#MARGIN">MARGIN</a>, <a href="gBox.htm#GAP">GAP</a>, 
            or <a href="gBox.htm#SPACE">SPACE</a> on a gSplit() itself, attempts to use them may lead to unpredictable results, 
            likewise 
-->
            Failing to set <a href="gSetAttribute.htm#EXPAND">EXPAND</a> on either child may lead to unpredictable results,
            probably crashing in the primary orientation, and something no doubt downright weird in the cross orientation.
            <br>
         </td>
        </tr>
        <tr>
         <td>
          <b>Attributes:</b>
         </td>
         <td>
<!--
            None spring to mind... oh, ACTIVE (cursors not changed/WM_SETCURSOR, inheritance...), VISIBLE on child1/2...<br>
            [WIDTH/STYLE/COLOUR/CANVAS may be added at a later date?]<br>
-->
         </td>
        </tr>
        <tr>
         <td>
          <a href="gBox.htm#GAP"><span class="illegal">GAP</span></a>,<br>
          <a href="gSetAttribute.htm#MARGIN"><span class="illegal">MARGIN</span></a>,<br>
          <a href="gSetAttribute.htm#PADDING"><span class="illegal">PADDING</span></a>,<br>
          <a href="gBox.htm#SPACE"><span class="illegal">SPACE</span></a><br>
         </td>
         <td>
            Not supported and in fact specifically prohibited.<br>
            A <a href="gSetAttribute.htm#MARGIN">MARGIN</a> <!--or perhaps <a href="gSetAttribute.htm#PADDING">PADDING</a>--> should instead
            be specified on a parent container, perhaps one specifically introduced for that purpose.
            Likewise <a href="gBox.htm#SPACE">SPACE</a>, which should have no effect in the primary orientation anyway, may need a child
            container (also expanding in the cross orientation) or two to be deliberately/explicitly introduced. Further the internal workings
            of a gSplit are already complicated enough and handled specially and unlikely to honour any margins set on child1/2: you may need
            to "double-nest" and specify a margin on the grand-children instead to achieve the effect you want.<br>
            <a name=FRAC></a>
         </td>
        </tr>
<!--
//      <tr>
//       <td>
//?       <a href="gSetAttribute.htm#BGCOLOR">BGCOLOR</a><a href="notpgui.htm#IupText"><span style="color:orange; font-size:75%;"><sup>?</sup></span></a>
//       </td>
//       <td>
//          Background color of the text. Default: the global attribute <a href="gGetGlobal.htm#TXTBGCOLOR">TXTBGCOLOR</a>.
//       </td>
//      </tr>
-->
<!--
//      <tr>
//       <td>
//?       <a href="gSetAttribute.htm#FGCOLOR">FGCOLOR</a>
//       </td>
//       <td>
//          Text color. Default: the global attribute <a href="gGetGlobal.htm#TXTFGCOLOR">TXTFGCOLOR</a>.
//       </td>
//      </tr>
-->
        <tr>
         <td>
          FRAC
         </td>
         <td>
            A fraction of the sizes of the two children which is occupied by child1, ranging between 0.0 (splitter dragged fully left/up) 
            and 1.0 (splitter dragged fully right/down). <br>
            Default: -1, meaning "not yet in use", aka "use the natural sizes" - for example were the latter 20 and 30, a window size of 100 
            would make them 40 and 60.
            <br>
            <br>
            You might save/restore this to mimic hiding or showing one of the children, such as a side panel or message area. <br>
(DEV: currently not:)<br>
            Note that any MIN/MAX are applied automatically, and you would have to remove any and all such in order to hide a child.<br>
            Suppose that fl and fh are the minimum and maximum values of f that would honour any MIN/MAX: dragging is limited to fl..fh, 
            however resizing or explicitly setting it simply clamps f to fl..fh at the point of use, but without actually changing it. <br>
            The value must always be an atom in the range 0.0..1.0, or -1.
<!-- !!!

, values that don&rsquo;t are on you
            <br>
            <br>
            Aside: This is a critical part of a spltter on desktop/Phix, whereas technically there is no such thing under pwa/p2js,
            though it is imitated at the point of use. Some discrepancies are unavoidable: an "over-dragged" splitter will be reported
            as that on the former but as the actual size ratio on the latter. Such effects may only become apparent after a window is
            manually resized, and be moreso when restoring from some different size (which is <i>not</i> as daft as it might sound).
            It should of course be perfectly usable and easily manually adjusted by the user, just not immediately identical.
-->
            <br>
         </td>
        </tr>
        <tr>
         <td>
          also
         </td>
         <td>
?           <a href="gSetAttribute.htm#ACTIVE">ACTIVE</a>, 
<!--            <a href="gSetAttribute.htm#CANFOCUS">CANFOCUS</a>,  -->
<!--            <a href="gSetAttribute.htm#FONT">FONT</a>, -->
<!--        <a href="gSetAttribute.htm#NAME">NAME</a>, -->
<!--            <a href="gSetAttribute.htm#EXPAND">EXPAND</a>, -->
<!--?           <a href="gGetAttribute.htm#POSITION">POSITION</a>, -->
<!--?           <a href="gGetAttribute.htm#SCREENPOSITION">SCREENPOSITION</a>, -->
<!--            <a href="gSetAttribute.htm#MINSIZE">MINSIZE</a>, -->
<!--            <a href="gSetAttribute.htm#MAXSIZE">MAXSIZE</a>,-->
<!--            <a href="gSetAttribute.htm#TIP">TIP</a>, -->
<!--            <a href="gSetAttribute.htm#RASTERSIZE">RASTERSIZE</a>,-->
<!--            <a href="gSetAttribute.htm#ZORDER">ZORDER</a>,-->
?           <a href="gSetAttribute.htm#VISIBLE">VISIBLE</a>.
            <br>
          <a name=tech></a>
         </td>
        </tr>
<!--
        <tr>
         <td>
          <b>Handlers:</b>
         </td>
         <td>
            probably none (or rather CLICK/MOUSEMOVE/REDRAW on the private canvas are all, erm, private... as is a hidden SPLIT on the hidden canvas...)
            <br>
          <a name=tech></a>
         </td>
        </tr>
-->
<!--
        <tr>
         <td>
?         <a href="gSetHandler.htm#CLICK">CLICK</a>
         </td>
         <td>
            Event generated when any mouse button is pressed or released. <br>
          <a name=VALUE_CHANGED></a>
         </td>
        </tr>
        <tr>
         <td>
?         <a href="gSetHandler.htm#VALUE_CHANGED">VALUE_CHANGED</a>
         </td>
         <td>
            Called after the value was interactively changed by the user.
            <br>
            <br>
            procedure value_changed(<a href="gdx.htm">gdx</a> id)<br>
            id: identifier of the element that activated the event.
         </td>
        </tr>
        <tr>
         <td>
          also
         </td>
         <td>
            <a href="gSetHandler.htm#KEY">KEY</a>: All common handlers are supported. <br>
          <a name=tech></a>
         </td>
        </tr>
-->
<!--
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            As this is a <a href="g_paranormal.htm">paranormalised function</a>, and with no expectation that you should memorise this lot,
            except maybe "12oaa", you can assume that all of the following are potentially perfectly valid, with the fairly obvious restrictions 
            that any parameters <i>must</i> be in strict 12oaa-order, and no args without attributes:
            <br>
            <br>
<small>
<X!--eucode>
                        gSplit(child1, child2)
                        gSplit(child1, child2, orientation)
                        gSplit(child1, child2, attributes)                      -- (see note)
                        gSplit(child1, child2, attributes, args)
                        gSplit(child1, child2, orientation, attributes)
                        gSplit(child1, child2, orientation, attributes, args)   -- (the full set)
</eucode--X>
<pre>
<font color="#7060A8">                        gSplit</font><font color="#0000FF">(</font><font color="#000000">child1</font><font color="#0000FF">,</font><font color="#000000"> child2</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gSplit</font><font color="#0000FF">(</font><font color="#000000">child1</font><font color="#0000FF">,</font><font color="#000000"> child2</font><font color="#0000FF">,</font><font color="#000000"> orientation</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gSplit</font><font color="#0000FF">(</font><font color="#000000">child1</font><font color="#0000FF">,</font><font color="#000000"> child2</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">)                     </font><font color="#000080"><i> -- (see note)</i></font>
<font color="#7060A8">                        gSplit</font><font color="#0000FF">(</font><font color="#000000">child1</font><font color="#0000FF">,</font><font color="#000000"> child2</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gSplit</font><font color="#0000FF">(</font><font color="#000000">child1</font><font color="#0000FF">,</font><font color="#000000"> child2</font><font color="#0000FF">,</font><font color="#000000"> orientation</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">)</font>
<font color="#7060A8">                        gSplit</font><font color="#0000FF">(</font><font color="#000000">child1</font><font color="#0000FF">,</font><font color="#000000"> child2</font><font color="#0000FF">,</font><font color="#000000"> orientation</font><font color="#0000FF">,</font><font color="#000000"> attributes</font><font color="#0000FF">,</font><font color="#000000"> args</font><font color="#0000FF">)  </font><font color="#000080"><i> -- (the full set)</i></font>
</pre>
</small>
            <br>
            Note that in practice attributes is actually defined as <a href="sequence.htm">sequence</a>, but verified to be string after 
            being repositioned via xpGUI.e/paranormalise_taa(). The children are non-optional and take no part in the paranormalisation handling.
            <br>
            <br>
            A gSplit(child1,child2,orientation) is distinguished from gSplit(child1,child2,attributes) by the presence of an '=',
            see <a href="g_paranormal.htm#eqch">here</a>.
            <br>
            <br>
            Just so you know, an explicit orientation of "" would be quietly mapped to "VERTICAL" without any fuss.
         </td>
        </tr>
-->
       </table>
<!--
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
-->
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
