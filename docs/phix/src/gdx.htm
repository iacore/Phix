<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">gdx</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include xpGUI.e
            <br>
            <br>
            gdx <i>identifier</i> <small>[= gDialog/gTreeView/...(...)]</small>
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Type. A non-negative <a href="integer.htm">integer</a>, being 0/NULL or an integer index into the private control tables of xpGUI,
            or a flat sequence of them (which may sometimes contain embedded nulls).
            <br>
            <br>
            Use this to define interface element variables. It is probably <a href="usingtypes.htm#can">unwise</a> to use this to determine 
            whether an object is in fact such, as many things which are clearly not (eg 0, 1, '2', "345") may pass, the latter only when 53
            (=='5') or more interface elements have been defined, it does however check [each element] is a non-negative integer between 
            zero (inclusive) and the current control table length. Some <i>uses</i> of a gdx may prohibit [embedded] nulls, but it is never
            an error for a variable declared as type gdx to hold such.
            <br>
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported, or at least understood by pwa/p2js and mapped to "let /*gdx*/".<br>
          As per <a href="usingtypes.htm#can">unwise</a>, xpGUI.js does not even have a fake version.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
include xpGUI.e

gdx quit_bt = gButton("Quit")
</eucode-->
<pre>
<font color="#008080">include</font><font color="#000000"> xpGUI.e
</font>
<font color="#7060A8">gdx</font><font color="#000000"> quit_bt</font><font color="#0000FF"> =</font><font color="#7060A8"> gButton</font><font color="#0000FF">(</font><font color="#008000">"Quit"</font><font color="#0000FF">)</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="gButton.htm">gButton</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            Note that the pGUI distinctions between IupHandl(e|n)[s] have been dropped in favour of crashing when some element/container 
            cannot be created or attempting to use a NULL or multiple handle[s] inappropriately. One thing in particular is that
            IupG/SetAttribute(NULL,...) being equivalent to IupG/SetGlobal(...) has been completely dropped, in favour of having
            gGet/SetAttribute(NULL,...) immediately crash, since that <i>should</i> help catch a few more little slip-ups.
            <br>
            <br>
            Also it is now a more routine-specific choice as to whether an [embedded] NULL is ignored or invalid, for instance the parent of 
            a new control can be NULL, and gDestroy() [which you might be handling within a try/catch, and initialising things to NULL] skips 
            any that were not needed or some other failure occurred before they were created, but (eg) gSetAttribute() as just said will crash.<br>
            Likewise the distinction between Ihandle and Ihandles has also been ditched, but you will for instance get an error should you try
            to specify more than one parent (and in some cases child) when creating a new interface element.
            <br>
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
