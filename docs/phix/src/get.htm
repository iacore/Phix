<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">get</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Syntax:</b>
         </td>
         <td>
          <font face = "Arial, Helvetica"> include get.e
           <BR>
             sequence s = get(integer fn)
          </font>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>Input, from file fn, a human-readable string of characters
             representing a Euphoria object. Convert the string into the
             numeric value of that object. s will be a 2-element sequence:
          <b>{error status, value}</b>. Error status codes are:
         </td>
        </tr>
        <tr>
         <td></td>
         <td>
<!--eucode>
    GET_SUCCESS -- object was read successfully
    GET_EOF     -- end of file before object was read
    GET_FAIL    -- object is not syntactically correct
</eucode-->
<pre>
<font color="#000000">    GET_SUCCESS</font><font color="#000080"> -- object was read successfully
</font><font color="#000000">    GET_EOF    </font><font color="#000080"> -- end of file before object was read
</font><font color="#000000">    GET_FAIL   </font><font color="#000080"> -- object is not syntactically correct</font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b></b>
         </td>
         <td>get() can read arbitrarily complicated Euphoria objects. You
             could have a long sequence of values in braces and separated by
             commas, e.g. {23, {49, 57}, 0.5, -1, 99, 'A', "john"}.
          <font color="#020202">
           <b>A single call to get() will read in this
             entire sequence and return its value as a result.
           </b>
          </font>
          <p>
            Each call to get() picks up where the previous call left off. For
             instance, a series of 5 calls to get() would be needed to read
             in:
          </p>
          <p>
                99 5.2 {1,2,3} "Hello" -1
          </p>
          <p>
            On the sixth and any subsequent call to get() you would see a
             GET_EOF status. If you had something like:
          </p>
          <p>
            {1, 2, xxx}
          </p>
          <p>
            in the input stream you would see a GET_FAIL error status
             because xxx is not a Euphoria object.
          </p>
          <p>
            Multiple "top-level" objects in the input stream must be
             separated from each other with one or more "whitespace"
             characters (blank, tab, \r or \n). Whitespace is not necessary
           <b>
            <i>within</i>
           </b> a top-level object. A call to get() will 
             read one entire top-level object, plus one additional 
             (whitespace) character.
          </p>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>The combination of print() and get() can be used to save a
             Euphoria object to disk and later read it back. This technique
             could be used to implement a database as one or more large
             Euphoria sequences stored in disk files. The sequences could be
             read into memory, updated and then written back to disk after
             each series of transactions is complete. Remember to write out
             a whitespace character (using puts()) after each call to print().
          <p>
            The value returned is not meaningful unless you have a
             GET_SUCCESS status.
          </p>
          <p>Note this is an "inherited" routine, that I don&rsquo;t much like.
            Whenever I try to use it, I tend to get stuck, give up, and roll 
            my own. However if it works for you, then fine.
          </p>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>Suppose your program asks the user to enter a number from the keyboard.
         </td>
        </tr>
        <tr>
         <td></td>
         <td>
<!--eucode>
-- If he types 77.5, get(0) would return:
{GET_SUCCESS, 77.5}
-- whereas gets(0) would return:
"77.5\n"
</eucode-->
<pre>
<font color="#000000"></font><font color="#000080">-- If he types 77.5, get(0) would return:
</font><font color="#0000FF">{</font><font color="#000000">GET_SUCCESS</font><font color="#0000FF">,</font><font color="#000000"> 77.5</font><font color="#0000FF">}
</font><font color="#000080">-- whereas gets(0) would return:
</font><font color="#008000">"77.5\n"</font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example Program:</b>
         </td>
<!--DEV-->
         <td>
          <font color="#5500FF">
           <b>demo\mydata.ex</b>
          </font>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="print.htm">print</a>,
          <a href="value.htm">value</a>,
          <a href="gets.htm">gets</a>,
          <a href="getc.htm">getc</a>,
          <a href="prompt_number.htm">prompt_number</a>,
          <a href="prompt_string.htm">prompt_string</a>
         </td>
        </tr>
       </table>
       <p></p>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
