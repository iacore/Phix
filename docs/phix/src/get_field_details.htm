<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">get_field_details</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include cffi.e
          <br>
          <a href="sequence.htm">sequence</a> res = get_field_details(<a href="integer.htm">integer</a> id, <a href="string.htm">atom_string</a> field)
          whre res is {<a href="integer.htm">integer</a> offset, <a href="integer.htm">integer</a> size, 
                       <a href="integer.htm">integer</a> signed, <a href="string.htm">string</a> mtype}
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Get the low level details of a named field in a structure previously defined by <a href="define_struct.htm">define_struct</a>().
          <br>
          <br>
            id: a result from <a href="define_struct.htm">define_struct</a>().<br>
            pStruct: a result from <a href="allocate_struct.htm">allocate_struct</a>().<br>
            field: a string name or, caveat emptor, a numeric index.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          <a href="notpgui.htm"><span class="illegal">Not supported</span></a>.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            Normally field is a string, which is searched for in the private table of field names, or it can already be an integer to skip that step.
            <br>
            <br>
            It is normally sufficient to use <a href="set_struct_field.htm">set_struct_field</a>() and
            <a href="get_struct_field.htm">get_struct_field</a>(), however this routine may be necessary to deal with
            arrays of structures, nested or hybrid structures, unions, etc.
          <br>
          <br>
            While it is reasonable to suggest that compiling even several hundred structs and functions, once at startup,
            is unlikely to cause a measurable performance issue, the same cannot in the general case be said for repeated 
            named lookups on individual fields. Use of this routine prior to a tight inner loop might offer significant
            performance benefits - but unless you are going to be calling something <i>more</i> than a million times I 
            would advise you not to bother.
          <br>
          <br>
            The offset would normally be added to a value from <a href="allocate_struct.htm">allocate_struct</a>() or similar.<br>
            The size and signed can be passed to <a href="peek.htm">peekNS</a>(), and size to <a href="poke.htm">pokeN</a>().
          <br>
          <br>
            The mtype is for diagnostic assistance purposes only. Note that cffi.e itself only knows the [name/subscript, which
            is passed to this routine and the] offset and size in bytes, and whether it is signed, which of course this routine 
            has already returned to you, and cannot provide any further assistance with obscure C types. While it might not be a
            bad idea to verify your app understands all types in use, especially should it be automatically extracting from the 
            latest lib.h file, generally speaking anything along the lines of <code>if mtype="long" or...</code> should certainly 
            be considered a "bad code smell", unless as just implied you know there will be no sudden/quietly hidden surprises.
            It is not particularly unusual for say <i>int</i> to evolve into <i>lib_int</i>, usually for reasons that have very 
            little impact on or relevance to Phix interfacing with precompiled dll/so files.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
include cffi.e
integer idMBP = define_struct(...)
atom pMBP = allocate_struct(idMBP)
..
atom pTitle = get_struct_field(idMBP,pMBP,"lpszText")
?peek_string(pTitle)
constant {title_offset,tsize,tsign} = get_field_details(idMBP,"lpszText")
?peek_string(peekNS(pMBP+title_offset,tsize,tsign))
</eucode-->
<pre>
<font color="#008080">include</font><font color="#000000"> cffi.e</font>
<font color="#004080">integer</font><font color="#000000"> idMBP</font><font color="#0000FF"> =</font><font color="#7060A8"> define_struct</font><font color="#0000FF">(...)</font>
<font color="#004080">atom</font><font color="#000000"> pMBP</font><font color="#0000FF"> =</font><font color="#7060A8"> allocate_struct</font><font color="#0000FF">(</font><font color="#000000">idMBP</font><font color="#0000FF">)
..</font>
<font color="#004080">atom</font><font color="#000000"> pTitle</font><font color="#0000FF"> =</font><font color="#7060A8"> get_struct_field</font><font color="#0000FF">(</font><font color="#000000">idMBP</font><font color="#0000FF">,</font><font color="#000000">pMBP</font><font color="#0000FF">,</font><font color="#008000">"lpszText"</font><font color="#0000FF">)
?</font><font color="#7060A8">peek_string</font><font color="#0000FF">(</font><font color="#000000">pTitle</font><font color="#0000FF">)</font>
<font color="#008080">constant</font><font color="#0000FF"> {</font><font color="#000000">title_offset</font><font color="#0000FF">,</font><font color="#000000">tsize</font><font color="#0000FF">,</font><font color="#000000">tsign</font><font color="#0000FF">} =</font><font color="#7060A8"> get_field_details</font><font color="#0000FF">(</font><font color="#000000">idMBP</font><font color="#0000FF">,</font><font color="#008000">"lpszText"</font><font color="#0000FF">)
?</font><font color="#7060A8">peek_string</font><font color="#0000FF">(</font><font color="#7060A8">peekNS</font><font color="#800000">(</font><font color="#000000">pMBP</font><font color="#0000FF">+</font><font color="#000000">title_offset</font><font color="#0000FF">,</font><font color="#000000">tsize</font><font color="#0000FF">,</font><font color="#000000">tsign</font><font color="#800000">)</font><font color="#0000FF">)</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="define_struct.htm">define_struct</a>,
          <a href="set_struct_field.htm">set_struct_field</a>,
          <a href="get_struct_field.htm">get_struct_field</a>,
          <a href="allocate_struct.htm">allocate_struct</a>,
          <a href="peek.htm">peek</a>,
          <a href="poke.htm">poke</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
