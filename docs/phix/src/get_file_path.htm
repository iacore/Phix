<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">get_file_path</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          <a href="string.htm">string</a> path = get_file_path(<a href="string.htm">string</a> filepath, <a href="integer.htm#bool">bool</a> dropslash=true))
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Obtain the directory of a file.
            <br>
            <br>
            filepath: the filepath from which to extract information.<br>
            dropslash: if false (0) the final path separator is retained.
            <br>
            <br>
            Returns a <a href="string.htm">string</a>, the directory where the file is located.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            Uses <a href="get_proper_path.htm">get_proper_path</a>(), so on Windows if the directory exists
            the case of the result will match the actual directory, and as mentioned in 
            <a href="get_proper_dir.htm">get_proper_dir</a>(), `demo\rosetta` and `demo\rosetta\` yield 
            different results - independently of dropslash, see the last four examples.
            <br>
            <br>
            In other words, dropslash (for which the use of a <a href="procedures.htm#namedparams">named parameter</a> is recommended) 
            is primarily intended for/behaves more consistently when filepath identifies a file, rather than a directory, and indeed
            the main purpose of this whole routine is to split a path from a filename, rather than a path from a subdirectory.
            <br>
            <br>
            Both forwardslash ('/') and backslash ('\\') are supported on all platforms, and converted appropriately in the output.
            <br>
            <br>
            If a relative path is specified, the result is a fully qualified path, and if no path whatsoever is specified, 
            the result (at least with dropslash left set to true) should match <a href="current_dir.htm">current_dir</a>().
            <a name=andname></a>
         </td>
        </tr>
        <tr>
         <td>
          <b>Auxillary function:</b>
         </td>
         <td>
            <a href="string.htm">string</a> {path, name} = <b>get_file_path_and_name</b>(<a href="string.htm">string</a> filepath,
                                                                                         <a href="integer.htm#bool">bool</a> dropslash=true)
            <br>
            <br>
            Convenience function that avoids having to invoke both get_file_path() and get_file_name(), with the same parameter.<br>
            Note there is also a <a href="get_file_name.htm#andpath">get_file_name_and_path</a>() function which returns the same
            values the other way round, for when that seems more natural, besides having both means one less thing for the compiler 
            to prod and poke you and get all uppity and snooty about.
         </td>
        </tr>
        <tr>
         <td>
          <b>Examples:</b>
         </td>
         <td>
<!--eucode>
?get_file_path("C:/Program Files (x86)/Phix/builtins/vm/papnd.e",0)
?get_file_path(`C:\Program Files (x86)\Phix\builtins\vm\papnd.e`,0)
?get_file_path("test.txt")
?get_file_path(`demo\test.txt`)
?get_file_path(`demo\rosetta`)
?get_file_path(`demo\rosetta\`)
?get_file_path(`demo\rosetta`,dropslash:=false)
?get_file_path(`demo\rosetta\`,dropslash:=false)
-- output: 
-- `C:\Program Files (x86)\Phix\builtins\VM\`
-- `C:\Program Files (x86)\Phix\builtins\VM\`
-- `C:\Program Files (x86)\Phix`
-- `C:\Program Files (x86)\Phix\demo`
-- `C:\Program Files (x86)\Phix\demo`
-- `C:\Program Files (x86)\Phix\demo\rosetta`
-- `C:\Program Files (x86)\Phix\demo\`
-- `C:\Program Files (x86)\Phix\demo\rosetta\`
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">?</font><font color="#5E005E">get_file_path</font><font color="#0000FF">(</font><font color="#008000">"C:/Program Files (x86)/Phix/builtins/vm/papnd.e"</font><font color="#0000FF">,</font><font color="#000000">0</font><font color="#0000FF">)
?</font><font color="#5E005E">get_file_path</font><font color="#0000FF">(</font><font color="#008000">`C:\Program Files (x86)\Phix\builtins\vm\papnd.e`</font><font color="#0000FF">,</font><font color="#000000">0</font><font color="#0000FF">)
?</font><font color="#5E005E">get_file_path</font><font color="#0000FF">(</font><font color="#008000">"test.txt"</font><font color="#0000FF">)
?</font><font color="#5E005E">get_file_path</font><font color="#0000FF">(</font><font color="#008000">`demo\test.txt`</font><font color="#0000FF">)
?</font><font color="#5E005E">get_file_path</font><font color="#0000FF">(</font><font color="#008000">`demo\rosetta`</font><font color="#0000FF">)
?</font><font color="#5E005E">get_file_path</font><font color="#0000FF">(</font><font color="#008000">`demo\rosetta\`</font><font color="#0000FF">)
?</font><font color="#5E005E">get_file_path</font><font color="#0000FF">(</font><font color="#008000">`demo\rosetta`</font><font color="#0000FF">,</font><font color="#000000">dropslash</font><font color="#0000FF">:=</font><font color="#004600">false</font><font color="#0000FF">)
?</font><font color="#5E005E">get_file_path</font><font color="#0000FF">(</font><font color="#008000">`demo\rosetta\`</font><font color="#0000FF">,</font><font color="#000000">dropslash</font><font color="#0000FF">:=</font><font color="#004600">false</font><font color="#0000FF">)
</font><font color="#000080"><i>-- output: 
-- `C:\Program Files (x86)\Phix\builtins\VM\`
-- `C:\Program Files (x86)\Phix\builtins\VM\`
-- `C:\Program Files (x86)\Phix`
-- `C:\Program Files (x86)\Phix\demo`
-- `C:\Program Files (x86)\Phix\demo`
-- `C:\Program Files (x86)\Phix\demo\rosetta`
-- `C:\Program Files (x86)\Phix\demo\`
-- `C:\Program Files (x86)\Phix\demo\rosetta\`</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\pfile.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="get_proper_path.htm">get_proper_path</a>,
          <a href="get_proper_dir.htm">get_proper_dir</a>,
          <a href="get_file_name.htm">get_file_name</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            For compatibility with Euphoria, pathname() is a simple alias of get_file_path(), and behaves identically.<br>
            Note however that pathname() in Euphoria only accepts one parameter.<br>
            Euphoria also has dirname(sequence path, integer pcd); the second parameter is used for a different purpose, 
            returning "." when no path is given(?), and there is no attempt to replicate that functionality in Phix.<br>
            Additional testing is recommended should you be using pathname() in any software which is meant to run on both,
            in particular I am not sure how forward and backward slashes are handled by Euphoria on Windows and Linux.
<!--
            Also note that for aesthetic reasons/because it is simply too annoying, and/or because in my opinion it is a 
            [somewhat] poor choice of function name, pathname() is <b><i>not</i></b> syntax-coloured in Edita/Edix.
            Or, I may decide to colour it illegal?-->
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
