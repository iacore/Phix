<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">getters/setters</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
class <i>identifier</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;private <i>type</i> <i>field</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;public function get_<i>field</i>() return <i>field</i> end function<br>
&nbsp;&nbsp;&nbsp;&nbsp;public procedure set_<i>field</i>(<i>type</i> <i>v</i>) <i>field</i> = <i>v</i> end procedure<br>
end class
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            If attempts to fetch or modify a private <i>field</i> would otherwise trigger a fatal error, but <br>
            a suitable public get_<i>field</i> function or set_<i>field</i> procedure exists, it is invoked instead.
            <br>
            <br>
            Obviously when neither routine is present, the field is properly private.<br>
            With only a getter, the field is read-only, and with only a setter it would be write-only.<br>
            With both, it looks public, but you can validate inputs and/or perform additional tasks.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          <a href="notpgui.htm"><span class="illegal">Not supported</span></a>.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
class test
    private string s = "1"

    public function get_s()
        printf(1,"get_s() called\n")
        return s
    end function

    public procedure set_s(string v)
        printf(1,"set_s(%s) called\n",v)
        s = v
    end procedure
end class

test t = new()
?t.s        -- get_s() called, "1"
t.s = "2"   -- set_s(2) called
?t.s        -- get_s() called, "2"
</eucode-->
<pre>
<font color="#008080">class</font><font color="#000000"> test</font>
<font color="#008080">    private</font><font color="#004080"> string</font><font color="#000000"> s</font><font color="#0000FF"> =</font><font color="#008000"> "1"
</font>
<font color="#008080">    public function</font><font color="#000000"> get_s</font><font color="#0000FF">()</font>
<font color="#5E005E">        printf</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"get_s() called\n"</font><font color="#0000FF">)</font>
<font color="#008080">        return</font><font color="#000000"> s</font>
<font color="#008080">    end function

    public procedure</font><font color="#000000"> set_s</font><font color="#0000FF">(</font><font color="#004080">string</font><font color="#000000"> v</font><font color="#0000FF">)</font>
<font color="#5E005E">        printf</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"set_s(%s) called\n"</font><font color="#0000FF">,</font><font color="#000000">v</font><font color="#0000FF">)</font>
<font color="#000000">        s</font><font color="#0000FF"> =</font><font color="#000000"> v</font>
<font color="#008080">    end procedure
end class
</font>
<font color="#000000">test t</font><font color="#0000FF"> =</font><font color="#5E005E"> new</font><font color="#0000FF">()
?</font><font color="#000000">t</font><font color="#0000FF">.</font><font color="#000000">s       </font><font color="#000080"><i> -- get_s() called, "1"</i></font>
<font color="#000000">t</font><font color="#0000FF">.</font><font color="#000000">s</font><font color="#0000FF"> =</font><font color="#008000"> "2"  </font><font color="#000080"><i> -- set_s(2) called</i></font>
<font color="#0000FF">?</font><font color="#000000">t</font><font color="#0000FF">.</font><font color="#000000">s       </font><font color="#000080"><i> -- get_s() called, "2"</i></font>
</pre>
          <br>
          The use of private and public above is in fact unnecessary, since it matches the default behaviour.
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            As per <a href="struct.htm">struct</a>
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
            <a href="class.htm">class</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            It is simply a matter of prefixing the field name with "get_" or "set_".<br>
            Obviously <i>function <b>s</b>et_xxx</i> simply won&rsquo;t work, neither will <i>procedure <b>g</b>et_xxx</i>.
            <br>
            <br>
            Note that getters and setters are not applied inside class methods, otherwise we would have <br>
            eg get_field() invoking itself ad infinitum instead of just fetching the field directly, and<br>
            naturally the presence or absence of such routines in no way alters then ability of the <br>
            class itself to modify its own private fields as it sees fit.
            <br>
            <br>
            You can of course call any such getters and setters directly, which should be slightly faster, and <br>
            they can have additional optional parameters, that obviously won&rsquo;t be provided via s.field syntax, <br>
            but can be supplied when calling directly.<br>
            It is not possible to prohibit the direct calling of public getter and setter routines.<br>
            If a field is public there is no attempt to locate or invoke any getter or setter routines.<br>
            Likewise if a getter/setter is private, it will <i>never</i> be invoked automatically.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
