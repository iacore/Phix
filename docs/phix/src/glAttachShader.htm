<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glAttachShader</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          include opengl.e
          <br>
          <br>
          glAttachShader(<a href="integer.htm">integer</a> program, shader)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Attaches a shader object to a program object
          <br>
          <br>
            program: Specifies the program object to which a shader object will be attached.<br>
            shader: Specifies the shader object that is to be attached.
          <br>
          <br>
            In order to create a complete shader program, there must be a way to specify the list of things that will be linked together. <br>
            Program objects provide this mechanism. Shaders that are to be linked together in a program object must first be attached to that program object. <br>
            glAttachShader attaches the shader object specified by shader to the program object specified by program. <br>
            This indicates that shader will be included in link operations that will be performed on program.
            <br>
            <br>
            All operations that can be performed on a shader object are valid whether or not the shader object is attached to a program object. <br>
            It is permissible to attach a shader object to a program object before source code has been loaded into the shader object or before the 
            shader object has been compiled. <br>
            It is permissible to attach multiple shader objects of the same type because each may contain a portion of the complete shader. <br>
            It is also permissible to attach a shader object to more than one program object. <br>
            If a shader object is deleted while it is attached to a program object, it will be flagged for deletion, and deletion will not 
            occur until glDetachShader is called to detach it from all program objects to which it is attached.
         </td>
        </tr>
        <tr>
         <td>
          <b>Errors:</b>
         </td>
         <td>
            GL_INVALID_VALUE is generated if either program or shader is not a value generated by OpenGL.<br>
            GL_INVALID_OPERATION is generated if program is not a program object.<br>
            GL_INVALID_OPERATION is generated if shader is not a shader object.<br>
            GL_INVALID_OPERATION is generated if shader is already attached to program.<br>
         </td>
        </tr>
        <tr>
         <td>
          <b>Associated Gets:</b>
         </td>
         <td>
            glGetAttachedShaders with the handle of a valid program object<br>
            <a href="glGetShaderInfoLog.htm">glGetShaderInfoLog</a><br>
            glGetShaderSource<br>
            glIsProgram<br>
            glIsShader
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="glCompileShader.htm">glCompileShader</a>,
          <a href="glCreateShader.htm">glCreateShader</a>,
          <a href="xor_bits.htm">xor_bits</a>,
          <a href="xor_bits.htm">xor_bits</a>,
          <a href="xor_bits.htm">xor_bits</a>,
          <a href="glShaderSource.htm">glShaderSource</a>
          <br>
DEV
See Also
//glCompileShader, //glCreateShader, glDeleteShader, glDetachShader, glLinkProgram, //glShaderSource
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
