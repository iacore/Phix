<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glCreateBuffer</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          include opengl.e
          <br>
          <br>
          <a href="integer.htm">integer</a> res = glCreateBuffer()
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            generate a buffer object name
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
            glCreateBuffer() wraps the <span class="illegal">glGenBuffers</span> C api to match the WebGL api, but one at a time.
<!--
            <span class="illegal">glGenBuffers</span> returns n buffer object names in buffers. <br>
            There is no guarantee that the names form a contiguous set of integers; however, it is guaranteed that none of the returned names 
            was in use immediately before the call to <span class="illegal">glGenBuffers</span>.
-->
            <br>
            <br>
            Buffer object names <!--returned by a call to <span class="illegal">glGenBuffers</span>--> are not returned by subsequent calls, 
            unless they are first deleted with glDeleteBuffers.
            <br>
            <br>
            No buffer objects are associated with the returned buffer object names until they are first bound by calling 
            <a href="glBindBuffer.htm">glBindBuffer</a>().
            <br>
            <br>
            If data is NULL, a data store of the specified size is still created, but its contents remain uninitialized and thus undefined.
            <br>
            <br>
            Clients must align data elements consistent with the requirements of the client platform, with an additional base-level 
            requirement that an offset within a buffer to a datum comprising N bytes be a multiple of N.
         </td>
        </tr>
        <tr>
         <td>
          <b>Errors:</b>
         </td>
         <td>
            GL_INVALID_VALUE is generated if n is negative.
         </td>
        </tr>
        <tr>
         <td>
          <b>Associated Gets:</b>
         </td>
         <td>
            glIsBuffer
         </td>
        </tr>
<!--
Examples
Load an index buffer into OpenGL for later rendering.
// data_size_in_bytes is the size in bytes of your vertex data.
// data_indices is an array of integer offsets into your vertex data.

GLuint index_buffer; // Save this for later rendering
glGenBuffers(1, &index_buffer);
glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, index_buffer);
glBufferData(GL_ELEMENT_ARRAY_BUFFER, data_size_in_bytes, 0, GL_STATIC_DRAW);
glBufferSubData(GL_ELEMENT_ARRAY_BUFFER, 0, data_size_in_bytes, data_indices);

GLint size = 0;
glGetBufferParameteriv(GL_ELEMENT_ARRAY_BUFFER, GL_BUFFER_SIZE, &size);
if(data_size_in_bytes != size)
{
    glDeleteBuffers(1, &index_buffer);
    // Log the error
    return;
}

// Success

Load a vertex buffer into OpenGL for later rendering.
// data_size_in_bytes is the size in bytes of your vertex data.
// data_vertices is your actual vertex data, probably a huge array of floats

GLuint vertex_buffer; // Save this for later rendering
glGenBuffers(1, &vertex_buffer);
glBindBuffer(GL_ARRAY_BUFFER, vertex_buffer);
glBufferData(GL_ARRAY_BUFFER, data_size_in_bytes, 0, GL_STATIC_DRAW);
glBufferSubData(GL_ARRAY_BUFFER, 0, data_size_in_bytes, data_vertices);

GLint size = 0;
glGetBufferParameteriv(GL_ARRAY_BUFFER, GL_BUFFER_SIZE, &size);
if(data_size_in_bytes != size)
{
    glDeleteBuffers(1, &vertex_buffer);
    // Log the error
    return;
}

// Success
-->
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="glBindBuffer.htm">glBindBuffer</a>,
          <a href="glGet.htm">Y</a>,
          <a href="glGet.htm">glGet</a>
<br>
DEV 
See Also
//glBindBuffer, glDeleteBuffers, //glGet
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
