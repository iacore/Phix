<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glCreateShader</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          include opengl.e
          <br>
          <br>
          <a href="integer.htm">integer</a> res = glCreateShader(<a href="integer.htm">integer</a> shaderType)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Creates a shader object
          <br>
          <br>
            shaderType: Specifies the type of shader to be created. Must be one of GL_COMPUTE_SHADER, GL_VERTEX_SHADER, 
            GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER, or GL_FRAGMENT_SHADER.
          <br>
          <br>
            glCreateShader creates an empty shader object and returns a non-zero value by which it can be referenced. <br>
            A shader object is used to maintain the source code strings that define a shader. <br>
            shaderType indicates the type of shader to be created. Five types of shader are supported.<br>
            A shader of type GL_COMPUTE_SHADER is a shader that is intended to run on the programmable compute processor. <br>
            A shader of type GL_VERTEX_SHADER is a shader that is intended to run on the programmable vertex processor. <br>
            A shader of type GL_TESS_CONTROL_SHADER is a shader that is intended to run on the programmable tessellation processor in the control stage. <br>
            A shader of type GL_TESS_EVALUATION_SHADER is a shader that is intended to run on the programmable tessellation processor in the evaluation stage. <br>
            A shader of type GL_GEOMETRY_SHADER is a shader that is intended to run on the programmable geometry processor. <br>
            A shader of type GL_FRAGMENT_SHADER is a shader that is intended to run on the programmable fragment processor.
            <br>
            <br>
            When created, a shader object&rsquo;s GL_SHADER_TYPE parameter is set to either GL_COMPUTE_SHADER, GL_VERTEX_SHADER, 
            GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER, depending on the value of shaderType.
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
            Like buffer and texture objects, the name space for shader objects may be shared across a set of contexts, as long as 
            the server sides of the contexts share the same address space. <br>
            If the name space is shared across contexts, any attached objects and the data associated with those attached objects are shared as well.
            <br>
            <br>
            Applications are responsible for providing the synchronization across API calls when objects are accessed from different execution threads.
            <br>
            <br>
            GL_COMPUTE_SHADER is available only if the GL version is 4.3 or higher.
         </td>
        </tr>
        <tr>
         <td>
          <b>Errors:</b>
         </td>
         <td>
            This function returns 0 if an error occurs creating the shader object.<br>
            GL_INVALID_ENUM is generated if shaderType is not an accepted value.
         </td>
        </tr>
        <tr>
         <td>
          <b>Associated Gets:</b>
         </td>
         <td>
            <a href="glGetShaderParameter.htm">glGetShaderParameter</a> with a valid shader object and the parameter to be queried<br>
            <a href="glGetShaderInfoLog.htm">glGetShaderInfoLog</a> with a valid shader object<br>
            glGetShaderSource with a valid shader object<br>
            glIsShader
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="glAttachShader.htm">glAttachShader</a>,
          <a href="glCompileShader.htm">glCompileShader</a>,
          <a href="glDeleteShader.htm">glDeleteShader</a>,
          <a href="glDetachShader.htm">glDetachShader</a>,
          <a href="glShaderSource.htm">glShaderSource</a>
          <br>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
