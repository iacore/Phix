<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glDeleteProgram</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          include opengl.e
          <br>
          <br>
          integer res = glDeleteProgram(<a href="integer.htm">integer</a> program)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            delete a program object
          <br>
          <br>
            program: Specifies the program object to be deleted.<br>
            Returns 0 (the C api does not do that), typically program = glDeleteShader(program) is recommended to avoid the 
            sort of accidents caused by keeping hold of a program index that might soon get re-used, plus logic flow is 
            easier if you are in a position to test for zero, and as below calling it twice is not going to be an issue.
          <br>
          <br>
            glDeleteProgram frees the memory and invalidates the name associated with the program object specified by program. <br>
            This command effectively undoes the effects of a call to glCreateProgram.
            <br>
            <br>
            If a program object is in use as part of current rendering state, it will be flagged for deletion, but it will 
            not be deleted until it is no longer part of current state for any rendering context. <br>
            If a program object to be deleted has shader objects attached to it, those shader objects will be automatically 
            detached but not deleted unless they have already been flagged for deletion by a previous call to glDeleteShader. <br>
            A value of 0 for program will be silently ignored.
            <br>
            <br>
            To determine whether a program object has been flagged for deletion, call 
            <a href="glGetProgramParameter.htm">glGetProgramParameter</a>(program, GL_DELETE_STATUS).
         </td>
        </tr>
        <tr>
         <td>
          <b>Errors:</b>
         </td>
         <td>
            GL_INVALID_VALUE is generated if program is not a value generated by OpenGL.
         </td>
        </tr>
        <tr>
         <td>
          <b>Associated Gets:</b>
         </td>
         <td>
            glGet with argument GL_CURRENT_PROGRAM<br>
            <a href="glGetProgramParameter.htm">glGetProgramParameter</a> with arguments program and GL_DELETE_STATUS<br>
            glIsProgram
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="glCreateProgram.htm">glCreateProgram</a>,
          <a href="glCreateShader.htm">glCreateShader</a>,
          <a href="glCreateShader.htm">Y</a>,
          <a href="glUseProgram.htm">glUseProgram</a>
<br>
DEV 
See Also
//glCreateShader, glDetachShader, //glUseProgram
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
