<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glDeleteShader</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          include opengl.e
          <br>
          <br>
          integer res = glDeleteShader(<a href="integer.htm">integer</a> shader)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            delete a shader object
          <br>
          <br>
            shader: Specifies the shader object to be deleted.<br>
            Returns 0 (the C api does not do that), typically shader = glDeleteShader(shader) is recommended to avoid the 
            sort of accidents caused by keeping hold of a shader index that might soon get re-used, plus logic flow is 
            easier if you are in a position to test for zero, and as below calling it twice is not going to be an issue.
          <br>
          <br>
            glDeleteShader frees the memory and invalidates the name associated with the shader object specified by shader. <br>
            This command effectively undoes the effects of a call to glCreateShader.
            <br>
            <br>
            If a shader object to be deleted is attached to a program object, it will be flagged for deletion, but it will 
            not be deleted until it is no longer attached to any program object, for any rendering context (i.e., it must be 
            detached from wherever it was attached before it will be deleted). A value of 0 for shader will be silently ignored.
            <br>
            <br>
            To determine whether an object has been flagged for deletion, call 
            <a href="glGetShaderParameter">glGetShaderParameter</a>(shader,GL_DELETE_STATUS).
         </td>
        </tr>
        <tr>
         <td>
          <b>Errors:</b>
         </td>
         <td>
            GL_INVALID_VALUE is generated if shader is not a value generated by OpenGL.
         </td>
        </tr>
        <tr>
         <td>
          <b>Associated Gets:</b>
         </td>
         <td>
            glGetAttachedShaders with the program object to be queried<br>
            <a href="glGetShaderParameter.htm">glGetShaderParameter</a> with arguments shader and GL_DELETE_STATUS<br>
            glIsShader
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="glCreateProgram.htm">glCreateProgram</a>,
          <a href="glCreateShader.htm">glCreateShader</a>,
          <a href="glCreateShader.htm">Y</a>,
          <a href="glUseProgram.htm">glUseProgram</a>
<br>
DEV 
See Also
//glCreateProgram, //glCreateShader, glDetachShader, //glUseProgram
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
