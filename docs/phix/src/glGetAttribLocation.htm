<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glGetAttribLocation</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          include opengl.e
          <br>
          <br>
          <a href="integer.htm">integer</a> res = glGetAttribLocation(<a href="integer.htm">integer</a> program, <a href="string.htm">string</a> name)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            return the location of an attribute variable
          <br>
          <br>
            program: Specifies the program object to be queried.<br>
            name: the name of the attribute variable whose location is to be queried.
          <br>
          <br>
            glGetAttribLocation queries the previously linked program object specified by program for the attribute variable 
            specified by name and returns the index of the generic vertex attribute that is bound to that attribute variable. <br>
            If name is a matrix attribute variable, the index of the first column of the matrix is returned. <br>
            If the named attribute variable is not an active attribute in the specified program object or if name starts with 
            the reserved prefix "gl_", a value of -1 is returned.
            <br>
            <br>
            The association between an attribute variable name and a generic attribute index can be specified at any time by 
            calling glBindAttribLocation. <br>
            Attribute bindings do not go into effect until glLinkProgram is called. <br>
            After a program object has been linked successfully, the index values for attribute variables remain fixed until 
            the next link command occurs. <br>
            The attribute values can only be queried after a link if the link was successful. <br>
            glGetAttribLocation returns the binding that actually went into effect the last time glLinkProgram was called 
            for the specified program object. <br>
            Attribute bindings that have been specified since the last link operation are not returned by glGetAttribLocation.
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
            Technically shader compiler support is optional, however opengl.e and pwa/p2js simply assume it is always available.
<!--
            Shader compiler support is optional, and thus must be queried before use by calling glGet with argument GL_SHADER_COMPILER. <br>
            glShaderSource, glCompileShader, glGetShaderPrecisionFormat, and glReleaseShaderCompiler will each generate GL_INVALID_OPERATION 
            on implementations that do not support a shader compiler, as will glGetShaderiv queries of GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, 
            and <span class="illegal">GL_SHADER_SOURCE_LENGTH</a>. <br>
            Such implementations instead offer the glShaderBinary alternative for supplying a pre-compiled shader binary.
-->
            <br>
            <br>
<!--
            If an error is generated, no change is made to the contents of params.
-->
            If an error is generated the specified default is returned, but checking that glGetError() does not return GL_NO_ERROR should
            normally be used to verify that an error did actually occur, unless the specified default is unequivocably invalid.
         </td>
        </tr>

        <tr>
         <td>
          <b>Errors:</b>
         </td>
         <td>
            GL_INVALID_OPERATION is generated if program is not a value generated by OpenGL.<br>
            GL_INVALID_OPERATION is generated if program is not a program object.<br>
            GL_INVALID_OPERATION is generated if program has not been successfully linked.
         </td>
        </tr>
        <tr>
         <td>
          <b>Associated Gets:</b>
         </td>
         <td>
            glGetActiveAttrib with argument program and the index of an active attribute<br>
            glIsProgram
         </td>
        </tr>
<!--
Examples
Retrieve uniform data after the shader has been compiled
// The index returned from these GLint functions gets passed to glEnableVertexAttribArray during rendering.
GLint position_attrib_index = glGetAttribLocation(program, "position"); // program is what is returned by glCreateProgram.
GLint texcoord_attrib_index = glGetAttribLocation(program, "texcoord");
GLint normal_attrib_index = glGetAttribLocation(program, "normal");
GLint color_attrib_index = glGetAttribLocation(program, "color");

glBindFragDataLocation(program, 0, "output_color"); // "output_color" is an output value in your vertex shader and an input value in your fragment shader.

GLint num_uniforms;
glGetProgramiv(program, GL_ACTIVE_UNIFORMS, &num_uniforms);
GLchar uniform_name[256];
GLsizei length;
GLint size;
GLenum type;
for (int i = 0; i < num_uniforms; i++)
{
    glGetActiveUniform(program, i, sizeof(uniform_name), &length, &size, &type, uniform_name);
    // ... save this uniform data so it can be used during rendering
}
-->
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="glBindAttribLocation.htm">glBindAttribLocation</a>,
          <a href="glLinkProgram.htm">glLinkProgram</a>,
          <a href="glShaderSource.htm">Y</a>,
          <a href="glVertexAttribPointer.htm">glVertexAttribPointer</a>
<br>
DEV 
See Also
//glBindAttribLocation, //glLinkProgram, glVertexAttrib, //glVertexAttribPointer
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
