<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glGetShaderInfoLog</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          include opengl.e
          <br>
          <br>
          <a href="string.htm">string</a> res = glGetShaderInfoLog(<a href="integer.htm">integer</a> shader)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            return the information log for a shader object
          <br>
          <br>
            shader: Specifies the shader object whose information log is to be queried.<br>
<!--
            maxLength: Specifies the size of the character buffer for storing the returned information log.<br>
            A length of 0 is replaced by invoking glGetShaderiv(shader, GL_INFO_LOG_LENGTH) [recommended, however at least
            one example tests for a non-zero length to decide whether to fetch and display it].<br>
-->
<!--
length: Returns the length of the string returned in infoLog (excluding the null terminator).<br>
infoLog: Specifies an array of characters that is used to return the information log.<br>
-->
            The opengl.e wrapper and pGUI.js take care of the required buffer automatically, you do not need to and in 
            fact cannot provide your own temporary buffer (unlike the C api).
          <br>
          <br>
            glGetShaderInfoLog returns the information log for the specified shader object. <br>
            The information log for a shader object is modified when the shader is compiled. <br>
            The string that is returned will be null terminated.
<!--
            <br>
            <br>
            glGetShaderInfoLog returns in infoLog as much of the information log as it can, up to a maximum of maxLength characters. <br>
            The number of characters actually returned, excluding the null termination character, is specified by length. <br>
            If the length of the returned string is not required, a value of NULL can be passed in the length argument. <br>
            The size of the buffer required to store the returned information log can be obtained by calling glGetShaderiv with the value GL_INFO_LOG_LENGTH.
-->
            <br>
            <br>
            The information log for a shader object is a string that may contain diagnostic messages, 
            warning messages, and other information about the last compile operation. <br>
            When a shader object is created, its information log will be a string of length 0.
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
            The information log for a shader object is the OpenGL implementer's primary mechanism for conveying information about the compilation process. <br>
            Therefore, the information log can be helpful to application developers during the development process, even when compilation is successful. <br>
            Application developers should not expect different OpenGL implementations to produce identical information logs.
         </td>
        </tr>
        <tr>
         <td>
          <b>Errors:</b>
         </td>
         <td>
            GL_INVALID_VALUE is generated if shader is not a value generated by OpenGL.<br>
            GL_INVALID_OPERATION is generated if shader is not a shader object.<br>
            GL_INVALID_VALUE is generated if maxLength is less than 0.
         </td>
        </tr>
        <tr>
         <td>
          <b>Associated Gets:</b>
         </td>
         <td>
<!--
            <a href="glGetShaderParameter.htm">glGetShaderParameter</a>() with argument GL_INFO_LOG_LENGTH<br>
-->
            glIsShader
         </td>
        </tr>
<!--
Examples
Compile a program from a vertex shader and a fragment shader.
GLuint vshader = glCreateShader(GL_VERTEX_SHADER);
glShaderSource(vshader, 1, &vertex_shader_source, NULL); // vertex_shader_source is a GLchar* containing glsl shader source code
glCompileShader(vshader);

GLint vertex_compiled;
>>glGetShaderParameter
glGetShaderiv(vshader, GL_COMPILE_STATUS, &vertex_compiled);
if (vertex_compiled != GL_TRUE)
{
    GLsizei log_length = 0;
    GLchar message[1024];
    glGetShaderInfoLog(vshader, 1024, &log_length, message);
    // Write the error to a log
}

GLuint fshader = glCreateShader(GL_FRAGMENT_SHADER);
glShaderSource(fshader, 1, &fragment_shader_source, NULL); // fragment_shader_source is a GLchar* containing glsl shader source code
glCompileShader(fshader);

GLint fragment_compiled;
>>glGetShaderParameter
glGetShaderiv(fshader, GL_COMPILE_STATUS, &fragment_compiled);
if (fragment_compiled != GL_TRUE)
{
    GLsizei log_length = 0;
    GLchar message[1024];
    glGetShaderInfoLog(fshader, 1024, &log_length, message);
    // Write the error to a log
}

GLuint program = glCreateProgram();

// This step is unnecessary if you use the location specifier in your shader
// e.g. layout (location = 0) in vec3 position;
glBindAttribLocation(program, 0, "position"); // The index passed into glBindAttribLocation is
glBindAttribLocation(program, 1, "texcoord"); // used by glEnableVertexAttribArray. "position"
glBindAttribLocation(program, 2, "normal");   // "texcoord" "normal" and "color" are the names of the
glBindAttribLocation(program, 3, "color");    // respective inputs in your fragment shader.

glAttachShader(program, vshader);
glAttachShader(program, fshader);
glLinkProgram(program);

GLint program_linked;
>>glGetProgramParameter
glGetProgramiv(program, GL_LINK_STATUS, &program_linked);
if (program_linked != GL_TRUE)
{
    GLsizei log_length = 0;
    GLchar message[1024];
    glGetProgramInfoLog(program, 1024, &log_length, message);
    // Write the error to a log
}
-->
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="glCompileShader.htm">glCompileShader</a>,
          <a href="glCreateShader.htm">X</a>,
          <a href="glLinkProgram.htm">glLinkProgram</a>,
          <a href="glGenLists.htm">Z</a>
<br>
DEV 
See Also
//glCompileShader, glGetProgramInfoLog, //glLinkProgram, glValidateProgram
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
