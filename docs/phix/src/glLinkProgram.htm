<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glLinkProgram</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          include opengl.e
          <br>
          <br>
          glLinkProgram(<a href="integer.htm">integer</a> program)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Links a program object
          <br>
          <br>
            program: Specifies the handle of the program object to be linked.
          <br>
          <br>
            glLinkProgram() links the program object specified by program. <br>
            If any shader objects of type GL_VERTEX_SHADER are attached to program, they will be used to create an executable that 
            will run on the programmable vertex processor. <br>
            If any shader objects of type GL_GEOMETRY_SHADER are attached to program, they will be used to create an executable that 
            will run on the programmable geometry processor. <br>
            If any shader objects of type GL_FRAGMENT_SHADER are attached to program, they will be used to create an executable that 
            will run on the programmable fragment processor.
            <br>
            <br>
            The status of the link operation will be stored as part of the program object's state. <br>
            This value will be set to GL_TRUE if the program object was linked without errors and is ready for use, and GL_FALSE otherwise. <br>
            It can be queried by calling glGetProgram with arguments program and GL_LINK_STATUS.
            <br>
            <br>
            As a result of a successful link operation, all active user-defined uniform variables belonging to program will be 
            initialized to 0, and each of the program object's active uniform variables will be assigned a location that can be 
            queried by calling glGetUniformLocation. <br>
            Also, any active user-defined attribute variables that have not been bound to a generic vertex attribute index will be bound to one at this time.
            <br>
            <br>
            Linking of a program object can fail for a number of reasons as specified in the OpenGL Shading Language Specification. <br>
            The following lists some of the conditions that will cause a link error.
            <br>
            <br>
            The number of active attribute variables supported by the implementation has been exceeded.<br>
            The storage limit for uniform variables has been exceeded.<br>
            The number of active uniform variables supported by the implementation has been exceeded.<br>
            The main function is missing for the vertex, geometry or fragment shader.<br>
            A varying variable actually used in the fragment shader is not declared in the same way (or is not declared at all) 
            in the vertex shader, or geometry shader if present.<br>
            A reference to a function or variable name is unresolved.<br>
            A shared global is declared with two different types or two different initial values.<br>
            One or more of the attached shader objects has not been successfully compiled.<br>
            Binding a generic attribute matrix caused some rows of the matrix to fall outside the allowed maximum of GL_MAX_VERTEX_ATTRIBS.<br>
            Not enough contiguous vertex attribute slots could be found to bind attribute matrices.<br>
            The program object contains objects to form a fragment shader but does not contain objects to form a vertex shader.<br>
            The program object contains objects to form a geometry shader but does not contain objects to form a vertex shader.<br>
            The program object contains objects to form a geometry shader and the input primitive type, output primitive type, or 
            maximum output vertex count is not specified in any compiled geometry shader object.<br>
            The program object contains objects to form a geometry shader and the input primitive type, output primitive type, or 
            maximum output vertex count is specified differently in multiple geometry shader objects.<br>
            The number of active outputs in the fragment shader is greater than the value of GL_MAX_DRAW_BUFFERS.<br>
            The program has an active output assigned to a location greater than or equal to the value of GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 
            and has an active output assigned an index greater than or equal to one.<br>
            More than one varying out variable is bound to the same number and index.<br>
            The explicit binding assigments do not leave enough space for the linker to automatically assign a location for 
            a varying out array, which requires multiple contiguous locations.<br>
            The count specified by glTransformFeedbackVaryings is non-zero, but the program object has no vertex or geometry shader.<br>
            Any variable name specified to glTransformFeedbackVaryings in the varyings array is not declared as an output in the 
            vertex shader (or the geometry shader, if active).<br>
            Any two entries in the varyings array given glTransformFeedbackVaryings specify the same varying variable.<br>
            The total number of components to capture in any transform feedback varying variable is greater than the constant 
            GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS and the buffer mode is GL_SEPARATE_ATTRIBS.
            <br>
            <br>
            When a program object has been successfully linked, the program object can be made part of current state by calling 
            <a href="glUseProgram.htm">glUseProgram</a>(). <br>
            Whether or not the link operation was successful, the program object&rsquo;s information log will be overwritten. <br>
            The information log can be retrieved by calling <a href="glGetProgramInfoLog.htm">glGetProgramInfoLog</a>().
            <br>
            <br>
            glLinkProgram() will also install the generated executables as part of the current rendering state if the link operation was successful 
            and the specified program object is already currently in use as a result of a previous call to 
            <a href="glUseProgram.htm">glUseProgram</a>(). <br>
            If the program object currently in use is relinked unsuccessfully, its link status will be set to GL_FALSE , but the executables and 
            associated state will remain part of the current state until a subsequent call to <a href="glUseProgram.htm">glUseProgram</a>()
            removes it from use. <br>
            After it is removed from use, it cannot be made part of current state until it has been successfully relinked.
            <br>
            <br>
            If program contains shader objects of type GL_VERTEX_SHADER, and optionally of type GL_GEOMETRY_SHADER, but does not contain shader 
            objects of type GL_FRAGMENT_SHADER, the vertex shader executable will be installed on the programmable vertex processor, the geometry 
            shader executable, if present, will be installed on the programmable geometry processor, but no executable will be installed on the 
            fragment processor. The results of rasterizing primitives with such a program will be undefined.
            <br>
            <br>
            The program object's information log is updated and the program is generated at the time of the link operation. <br>
            After the link operation, applications are free to modify attached shader objects, compile attached shader objects, detach shader 
            objects, delete shader objects, and attach additional shader objects. <br>
            None of these operations affects the information log or the program that is part of the program object.
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
            If the link operation is unsuccessful, any information about a previous link operation on program is lost 
            (i.e., a failed link does not restore the old state of program ). <br>
            Certain information can still be retrieved from program even after an unsuccessful link operation. <br>
            See for instance glGetActiveAttrib and glGetActiveUniform.
         </td>
        </tr>
        <tr>
         <td>
          <b>Errors:</b>
         </td>
         <td>
            GL_INVALID_VALUE is generated if program is not a value generated by OpenGL.<br>
            GL_INVALID_OPERATION is generated if program is not a program object.<br>
            GL_INVALID_OPERATION is generated if program is the currently active program object and transform feedback mode is active.
         </td>
        </tr>
        <tr>
         <td>
          <b>Associated Gets:</b>
         </td>
         <td>
            glGet with the argument GL_CURRENT_PROGRAM<br>
            glGetActiveAttrib with argument program and the index of an active attribute variable<br>
            glGetActiveUniform with argument program and the index of an active uniform variable<br>
            glGetAttachedShaders with argument program<br>
            glGetAttribLocation with argument program and an attribute variable name<br>
            glGetProgram with arguments program and GL_LINK_STATUS<br>
            <a href="glGetProgramInfoLog.htm">glGetProgramInfoLog</a> with argument program<br>
            glGetUniform with argument program and a uniform variable location<br>
            glGetUniformLocation with argument program and a uniform variable name<br>
            glIsProgram
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="glAttachShader.htm">glAttachShader</a>,
          <a href="glBindAttribLocation.htm">glBindAttribLocation</a>,
          <a href="glCreateShader.htm">glCreateShader</a>,
          <a href="glCompileShader.htm">glCompileShader</a>,
          <a href="glCreateProgram.htm">glCreateProgram</a>,
          <a href="glDeleteProgram.htm">glDeleteProgram</a>,
          <a href="glDetachShader.htm">glDetachShader</a>,
          <a href="glUniform.htm">glUniform</a>,
          <a href="glUseProgram.htm">glUseProgram</a>,
          <a href="glTexCoord.htm">glTexCoord</a>
          <br>
DEV
See Also
//glAttachShader, //glBindAttribLocation, //glCreateShader, //glCompileShader, //glCreateProgram, //glDeleteProgram, //glDetachShader, //glUniform, //glUseProgram, glValidateProgram
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
