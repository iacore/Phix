<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glShaderSource</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          include opengl.e
          <br>
          <br>
          glShaderSource(<a href="integer.htm">integer</a> shader, <a href="string.htm">string</a> source)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Replaces the source code in a shader object
          <br>
          <br>
            shader: Specifies the handle of the shader object whose source code is to be replaced.<br>
            source: Specifies an array of pointers to strings containing the source code to be loaded into the shader.<br>
            Note that in contrast to the C api, which accepts a count and arrays of strings and length, this (currently) only
            allows a single source which is assumed to be null terminated, so there is no need for a length array.
          <br>
          <br>
            glShaderSource sets the source code in shader to the source code in the array of strings specified by string. <br>
            Any source code previously stored in the shader object is completely replaced. <br>
<!--
            The number of strings in the array is specified by count. <br>
            If length is NULL, each string is assumed to be null terminated. <br>
            If length is a value other than NULL, it points to an array containing a string length for each of the corresponding elements of string. <br>
            Each element in the length array may contain the length of the corresponding string (the null character is not counted as part of the string length) 
            or a value less than 0 to indicate that the string is null terminated. <br>
            The source code strings are not scanned or parsed at this time; they are simply copied into the specified shader object.

-->
            The source code string is not scanned or parsed at this time; it is simply copied into the specified shader object.
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
            OpenGL copies the shader source code strings when glShaderSource is called, so an application may free its copy of the source code 
            strings immediately after the function returns.
         </td>
        </tr>
        <tr>
         <td>
          <b>Errors:</b>
         </td>
         <td>
            GL_INVALID_VALUE is generated if shader is not a value generated by OpenGL.<br>
            GL_INVALID_OPERATION is generated if shader is not a shader object.<br>
            GL_INVALID_VALUE is generated if count is less than 0.
         </td>
        </tr>
        <tr>
         <td>
          <b>Associated Gets:</b>
         </td>
         <td>
<!--
            glGetShaderParameter with arguments shader and GL_SHADER_SOURCE_LENGTH<br>
-->
            glGetShaderSource with argument shader<br>
            glIsShader
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="xor_bits.htm">xor_bits</a>,
          <a href="glCreateShader.htm">glCreateShader</a>,
          <a href="glTexCoord.htm">glTexCoord</a>
          <br>
DEV
See Also
glCompileShader, //glCreateShader, glDeleteShader
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
