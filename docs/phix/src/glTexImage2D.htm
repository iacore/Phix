<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glTexImage2D</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          include opengl.e
          <br>
          <br>
          glTexImage2D(<a href="integer.htm">integer</a> target, level, components, width, height, border, fmt, typ, 
                       <a href="atom.htm">atom</a>  pixels)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            The glTexImage2D function specifies a two-dimensional texture image.
            <br>
            <br>
            target: The target texture. Must be GL_TEXTURE_2D.<br>
            level: The level-of-detail number. Level 0 is the base image level. Level n is the n<sup><small>th</small></sup> mipmap reduction image.<br>
            internalformat: The number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: <br>
            &nbsp;&nbsp;GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, <br>
            &nbsp;&nbsp;GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, <br>
            &nbsp;&nbsp;GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, <br>
            &nbsp;&nbsp;GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, <br>
            &nbsp;&nbsp;GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, <br>
            &nbsp;&nbsp;GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, <br>
            &nbsp;&nbsp;GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.<br>
            width: The width of the texture image. Must be 2n + 2(border) for some integer n.<br>
            height: The height of the texture image. Must be 2<sup><small>*m*</small></sup> + 2(border) for some integer m.<br>
            border: The width of the border. Must be either 0 or 1.<br>
            format: The format of the pixel data. It can assume one of nine symbolic values.<br>
            <table>
            <tr><td>GL_COLOR_INDEX</td>     <td>Each element is a single value, a color index. <br>
                                                It is converted to fixed point (with an unspecified number of 0 bits to the right of the binary point), 
                                                shifted left or right depending on the value and sign of GL_INDEX_SHIFT, and added to GL_INDEX_OFFSET (see glPixelTransfer). <br>
                                                The resulting index is converted to a set of color components using the GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, 
                                                GL_PIXEL_MAP_I_TO_B, and GL_PIXEL_MAP_I_TO_A tables, and clamped to the range [0,1].</td></tr>
            <tr><td>GL_RED</td>             <td>Each element is a single red component. <br>
                                                It is converted to floating point and assembled into an RGBA element by attaching 0.0 for green and blue, and 1.0 for alpha. <br>
                                                Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the 
                                                range [0,1] (see glPixelTransfer).</td></tr>
            <tr><td>GL_GREEN</td>           <td>Each element is a single green component. <br>
                                                It is converted to floating point and assembled into an RGBA element by attaching 0.0 for red and blue, and 1.0 for alpha. <br>
                                                Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the 
                                                range [0,1] (see glPixelTransfer).</td></tr>
            <tr><td>GL_BLUE</td>            <td>Each element is a single blue component. <br>
                                                It is converted to floating point and assembled into an RGBA element by attaching 0.0 for red and green, and 1.0 for alpha. <br>
                                                Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the 
                                                range [0,1] (see glPixelTransfer).</td></tr>
            <tr><td>GL_ALPHA</td>           <td>Each element is a single red component. <br>
                                                It is converted to floating point and assembled into an RGBA element by attaching 0.0 for red, green, and blue. <br>
                                                Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the 
                                                range [0,1] (see glPixelTransfer).</td></tr>
            <tr><td>GL_RGB</td>             <td>Each element is an RGB triple. <br>
                                                It is converted to floating point and assembled into an RGBA element by attaching 1.0 for alpha. <br>
                                                Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the 
                                                range [0,1] (see glPixelTransfer).</td></tr>
            <tr><td>GL_RGBA</td>            <td>Each element is a complete RGBA element. <br>
                                                It is converted to floating point. <br>
                                                Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the 
                                                range [0,1] (see glPixelTransfer).</td></tr>
            <tr><td>GL_BGR_EXT</td>         <td>Each pixel is a group of three components in this order: blue, green, red.<br>
                                                GL_BGR_EXT provides a format that matches the memory layout of Windows device-independent bitmaps (DIBs). <br>
                                                Thus your applications can use the same data with Windows function calls and OpenGL pixel function calls.</td></tr>
            <tr><td>GL_BGRA_EXT</td>        <td>Each pixel is a group of four components in this order: blue, green, red, alpha. <br>
                                                GL_BGRA_EXT provides a format that matches the memory layout of Windows device-independent bitmaps (DIBs). <br>
                                                Thus your applications can use the same data with Windows function calls and OpenGL pixel function calls.</td></tr>
            <tr><td>GL_LUMINANCE</td>       <td>Each element is a single luminance value. <br>
                                                It is converted to floating point, and then assembled into an RGBA element by replicating the luminance value three times for 
                                                red, green, and blue, and attaching 1.0 for alpha. <br>
                                                Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the 
                                                range [0,1] (see glPixelTransfer).</td></tr>
            <tr><td>GL_LUMINANCE_ALPHA</td> <td>Each element is a luminance/alpha pair. <br>
                                                It is converted to floating point, and then assembled into an RGBA element by replicating the luminance value three times for 
                                                red, green, and blue. <br>
                                                Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the 
                                                range [0,1] (see glPixelTransfer).</td></tr>
            </table>
            type: The data type of the pixel data. The following symbolic values are accepted: <br>
            GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, and GL_FLOAT.
            pixels: A pointer to the image data in memory.
          <br>
          <br>
          No error is returned, but on failure the following error codes can be retrieved by <a href="glGetError.htm">glGetError</a>():<br>
          <a href="glGetError.htm">GL_INVALID_ENUM</a> - target not GL_TEXTURE_2D, or format/type unacceptable.<br>
          <a href="glGetError.htm">GL_INVALID_VALUE</a> - level/internalformat/width/height/border unacceptable.<br>
          <a href="glGetError.htm">GL_INVALID_OPERATION</a> - glBegin/glEnd in progress.
         </td>
        </tr>
        <tr>
         <td>
          <b>Remarks</b>
         </td>
         <td>
            The glTexImage2D function specifies a two-dimensional texture image. <br>
            Texturing maps a portion of a specified texture image onto each graphical primitive for which texturing is enabled. <br>
            Two-dimensional texturing is enabled and disabled using glEnable and glDisable with argument GL_TEXTURE_2D.
            <br>
            <br>
            Texture images are defined with glTexImage2D. <br>
            The arguments describe the parameters of the texture image, such as height, width, width of the border, level-of-detail number (see glTexParameter), 
            and number of color components provided. <br>
            The last three arguments describe the way the image is represented in memory. <br>
            These arguments are identical to the pixel formats used for glDrawPixels.
            <br>
            <br>
            Data is read from pixels as a sequence of signed or unsigned bytes, shorts or longs, or single-precision floating-point values, depending on type. <br>
            These values are grouped into sets of one, two, three, or four values, depending on format, to form elements. <br>
            If type is GL_BITMAP, the data is considered as a string of unsigned bytes (and format must be GL_COLOR_INDEX). <br>
            Each data byte is treated as eight 1-bit elements, with bit ordering determined by GL_UNPACK_LSB_FIRST (see glPixelStore). <br>
            Please see glDrawPixels for a description of the acceptable values for the type parameter.
            <br>
            <br>
            A texture image can have up to four components per texture element, depending on components. <br>
            A one-component texture image uses only the red component of the RGBA color extracted from pixels. <br>
            A two-component image uses the R and A values. <br>
            A three-component image uses the R, G, and B values. <br>
            A four-component image uses all of the RGBA components.
            <br>
            <br>
            Texturing has no effect in color-index mode.
            <br>
            <br>
            The texture image can be represented by the same data formats as the pixels in a glDrawPixels command, except 
            that GL_STENCIL_INDEX and GL_DEPTH_COMPONENT cannot be used. <br>
            The glPixelStore and glPixelTransfer modes affect texture images in exactly the way they affect glDrawPixels.
            <br>
            <br>
            A texture image with zero height or width indicates the null texture. <br>
            If the null texture is specified for level-of-detail 0, it is as if texturing were disabled.
            <br>
            <br>
            The following functions retrieve information related to glTexImage2D:<br>
            glGetTexImage<br>
            glIsEnabled with argument GL_TEXTURE_2D
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="glBegin.htm">glBegin</a>,
          <a href="glEnd.htm">glEnd</a>
<br>
[DEV]See also
//glBegin
glDrawPixels
//glEnd
glFog
glIsEnabled
glPixelStore
glPixelTransfer
glTexEnv
glTexGen
glTexImage1D
glTexParameter

         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
