<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glUniform</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          include opengl.e
          <br>
          <br>
          glUniform1f(<a href="integer.htm">integer</a> location, <a href="atom.htm">atom</a> v0)
          <br>
          <i>-- or --</i>
          <br>
          glUniform1i(<a href="integer.htm">integer</a> location, <a href="integer.htm">integer</a> v0)
<!--
          <br>
          <i>-- or --</i>
          <br>
          glUniformMatrix3d(<a href="atom.htm">atom</a> {x,y,z}) <small>(actually declared as a single <a href="sequence.htm">sequence</a> parameter)</small>
-->
          <br>
          <i>-- or --</i>
          <br>
          glUniformMatrix4fv(<a href="integer.htm">integer</a> location, transpose, <a href="atom.htm">atom</a> pData)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Specify the value of a uniform variable for the current program object.
          <br>
          <br>
            location: Specifies the location of the uniform variable to be modified.<br>
            v0, v1, v2, v3: For the scalar commands, specifies the new values to be used for the specified uniform variable.<br>
            transpose: Specifies whether to transpose the matrix as the values are loaded into the uniform variable. Must be GL_FALSE.<br>
            pData: Specifies a pointer to a (single) matrix that will be used to update the specified uniform variable.<br>
            Note that the C API allows a count parameter such that if non-1 pData is an array of matrices, however WebGL does not
            support such a feature so it is coerced (on desktop/Phix) to 1.
            <br>
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
<!-- (matches desktop...)
        , though only as glUniform1f(), glUniform1i(), and glUniformMatrix4fv() at present.
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
<!--
void glUniform1f(GLint location, GLfloat v0);
void glUniform2f(GLint location, GLfloat v0, GLfloat v1);
void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void glUniform1i(GLint location, GLint v0);
void glUniform2i(GLint location, GLint v0, GLint v1);
void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void glUniform1ui(GLint location, GLuint v0);
void glUniform2ui(GLint location, GLuint v0, GLuint v1);
void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
void glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void glUniform1fv(GLint location, GLsizei count, const GLfloat *value);
void glUniform2fv(GLint location, GLsizei count, const GLfloat *value);
void glUniform3fv(GLint location, GLsizei count, const GLfloat *value);
void glUniform4fv(GLint location, GLsizei count, const GLfloat *value);
void glUniform1iv(GLint location, GLsizei count, const GLint *value);
void glUniform2iv(GLint location, GLsizei count, const GLint *value);
void glUniform3iv(GLint location, GLsizei count, const GLint *value);
void glUniform4iv(GLint location, GLsizei count, const GLint *value);
void glUniform1uiv(GLint location, GLsizei count, const GLuint *value);
void glUniform2uiv(GLint location, GLsizei count, const GLuint *value);
void glUniform3uiv(GLint location, GLsizei count, const GLuint *value);
void glUniform4uiv(GLint location, GLsizei count, const GLuint *value);
void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
 
Parameters
count
For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
transpose
For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
value
For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
-->

            glUniform modifies the value of a uniform variable or a uniform variable array.<br>
            The location of the uniform variable to be modified is specified by location, which should be a value returned by glGetUniformLocation. <br>
            glUniform operates on the program object that was made part of current state by calling <a href="glUseProgram.htm">glUseProgram</a>().
            <br>
            <br>
            The commands glUniform{1|2|3|4}{f|i|ui} are used to change the value of the uniform variable specified by location using the values passed as arguments. <br>
            The number specified in the command should match the number of components in the data type of the specified uniform variable 
            (e.g., 1 for float, int, unsigned int, bool; 2 for vec2, ivec2, uvec2, bvec2, etc.). <br>
            The suffix f indicates that floating-point values are being passed; <br>
            the suffix i indicates that integer values are being passed; <br>
            the suffix ui indicates that unsigned integer values are being passed, <br>
            and this type should also match the data type of the specified uniform variable. <br>
            The i variants of this function should be used to provide values for uniform variables defined as int, ivec2, ivec3, ivec4, or arrays of these. <br>
            The ui variants of this function should be used to provide values for uniform variables defined as unsigned int, uvec2, uvec3, uvec4, or arrays of these. <br>
            The f variants should be used to provide values for uniform variables of type float, vec2, vec3, vec4, or arrays of these. <br>
            Either the i, ui or f variants may be used to provide values for uniform variables of type bool, bvec2, bvec3, bvec4, or arrays of these. <br>
            The uniform variable will be set to false if the input value is 0 or 0.0f, and it will be set to true otherwise.
            <br>
            <br>
            All active uniform variables defined in a program object are initialized to 0 when the program object is linked successfully. <br>
            They retain the values assigned to them by a call to glUniform until the next successful link operation occurs on the program object, 
            when they are once again initialized to 0.<br>
            The commands glUniform{1|2|3|4}{f|i|ui}v can only be used to modify a single uniform variable, unlike the C API the WebGL interface 
            does not allow a count parameter, so therefore neither do opengl.e/js. <br>

<!--
            The commands glUniform{1|2|3|4}{f|i|ui}v can be used to modify a single uniform variable or a uniform variable array. <br>
            These commands pass a count and a pointer to the values to be loaded into a uniform variable or a uniform variable array. <br>
            A count of 1 should be used if modifying the value of a single uniform variable, and a count of 1 or greater can be used to modify 
            an entire array or part of an array. <br>
-->
            When loading n elements starting at an arbitrary position m in a uniform variable array, elements m + n - 1 in the array will be replaced with the new values. <br>
            If m + n - 1 is larger than the size of the uniform variable array, values for all array elements beyond the end of the array will be ignored. <br>
            The number specified in the name of the command indicates the number of components for each element in value, and it should match the number of components 
            in the data type of the specified uniform variable (e.g., 1 for float, int, bool; 2 for vec2, ivec2, bvec2, etc.). <br>
            The data type specified in the name of the command must match the data type for the specified uniform variable as described previously for glUniform{1|2|3|4}{f|i|ui}.
            <br>
            <br>
            For uniform variable arrays, each element of the array is considered to be of the type indicated in the name of the command 
            (e.g., glUniform3f or glUniform3fv can be used to load a uniform variable array of type vec3).
<!--
             <br>
            The number of elements of the uniform variable array to be modified is specified by count.
-->
            <br>
            <br>
<!--
            The commands glUniformMatrix{2|3|4|2x3|3x2|2x4|4x2|3x4|4x3}fv are used to modify a matrix or an array of matrices. <br>
-->
            The commands glUniformMatrix{2|3|4|2x3|3x2|2x4|4x2|3x4|4x3}fv are used to modify a matrix. <br>
            The numbers in the command name are interpreted as the dimensionality of the matrix. <br>
            The number 2 indicates a 2 x 2 matrix (i.e., 4 values), <br>
            the number 3 indicates a 3 x 3 matrix (i.e., 9 values), and <br>
            the number 4 indicates a 4 x 4 matrix (i.e., 16 values). <br>
            Non-square matrix dimensionality is explicit, with the first number representing the number of columns and the second number representing the number of rows. <br>
            For example, 2x4 indicates a 2 x 4 matrix with 2 columns and 4 rows (i.e., 8 values). <br>
            If transpose is GL_FALSE, each matrix is assumed to be supplied in column major order. <br>
            If transpose is GL_TRUE, each matrix is assumed to be supplied in row major order. <br>
<!--
            The count argument indicates the number of matrices to be passed. <br>
            A count of 1 should be used if modifying the value of a single matrix, and a count greater than 1 can be used to modify an array of matrices.
-->
            <br>
            <br>
            glUniform1i and glUniform1iv are the only two functions that may be used to load uniform variables defined as sampler types. <br>
            Loading samplers with any other function will result in a GL_INVALID_OPERATION error.<br>
<!--
            If count is greater than 1 and the indicated uniform variable is not an array, a GL_INVALID_OPERATION error is generated and 
            the specified uniform variable will remain unchanged.<br>
            Other than the preceding exceptions, if the type and size of the uniform variable as defined in the shader do not match the 
-->
            Other than the preceding exception, if the type and size of the uniform variable as defined in the shader do not match the 
            type and size specified in the name of the command used to load its value, a GL_INVALID_OPERATION error will be generated and 
            the specified uniform variable will remain unchanged.<br>
            If location is a value other than -1 and it does not represent a valid uniform variable location in the current program object, 
            an error will be generated, and no changes will be made to the uniform variable storage of the current program object. <br>
            If location is equal to -1, the data passed in will be silently ignored and the specified uniform variable will not be changed.
         </td>
        </tr>
        <tr>
         <td>
          <b>Errors:</b>
         </td>
         <td>
            GL_INVALID_OPERATION is generated if:<br>
            &nbsp; there is no current program object.<br>
            &nbsp; the size of the uniform variable declared in the shader does not match the size indicated by the glUniform command.<br>
            &nbsp; one of the signed or unsigned integer variants of this function is used to load a uniform variable of type 
            float, vec2, vec3, or vec4,<br>
<!--
            float, vec2, vec3, vec4, or an array of these,<br>
-->
            &nbsp; one of the floating-point variants of this function is used to load a uniform variable of type 
<!--
            int, ivec2, ivec3, ivec4, unsigned int, uvec2, uvec3, uvec4, or an array of these.<br>
-->
            int, ivec2, ivec3, ivec4, unsigned int, uvec2, uvec3, or uvec4.<br>
            &nbsp; one of the signed integer variants of this function is used to load a uniform variable of type 
<!--
            unsigned int, uvec2, uvec3, uvec4, or an array of these.<br>
-->
            unsigned int, uvec2, uvec3, or uvec4.<br>
            &nbsp; one of the unsigned integer variants of this function is used to load a uniform variable of type 
<!--
            int, ivec2, ivec3, ivec4, or an array of these.<br>
-->
            int, ivec2, ivec3, or ivec4.<br>
            &nbsp; location is an invalid uniform location for the current program object and location is not equal to -1.<br>
<!--
            &nbsp; count is greater than 1 and the indicated uniform variable is not an array variable.<br>
-->
            &nbsp; a sampler is loaded using a command other than glUniform1i and glUniform1iv.<br>
<!--
            GL_INVALID_VALUE is generated if count is less than 0.
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Remarks:</b>
         </td>
         <td>
            There are 24 C functions (see index/below, coloured illegal and linked here) named glUniformNx[v], where N is 1..4, and x is 
            f/i/ui, plus 12 C functions named glUniformMatrixNxMfv, when N and M are 2..4 with the xM omitted for N==M. <br>
            Since GL_INVALID_OPERATION is generated if the size of the uniform variable declared in the shader does not match the size 
            indicated by the glUniform command, it is not immediately obvious how to map to/from a single glUniform() entry (or maybe 4),
            and for now they are individually implemented on an ad-hoc basis. Maybe once I have done/can test half a dozen or more I can
            perhaps re-think unifying them, or prove/conclude/accept that cannot be done. I am hoping that signed integer variants can be
            used to set floats, and "object" or "v with a length of 1" can be used to set individual items, to make just four or five
            entry points sufficient. Either way there is no point implementing all 36 routines but only testing one properly.
<!--
            The optional parameters and generic atom types of Phix mean these can and should all be wrapped into a single pGUI function.<br>
            The gl!V!e!r!t!e!x!3d routine was made an exception because some code already had the required parameters in a sequence, and it 
            would be pointless to de-sequence that only to re-sequence it shortly after.
-->
            <br>
            <br>
            For searching purposes only, here is a full list of all the C functions: 
            glUniform1f
            glUniform2f
            glUniform3f
            glUniform4f
            glUniform1i
            glUniform2i
            glUniform3i
            glUniform4i
            glUniform1ui
            glUniform2ui
            glUniform3ui
            glUniform4ui
            glUniform1fv
            glUniform2fv
            glUniform3fv
            glUniform4fv
            glUniform1iv
            glUniform2iv
            glUniform3iv
            glUniform4iv
            glUniform1uiv
            glUniform2uiv
            glUniform3uiv
            glUniform4uiv
            glUniformMatrix2fv
            glUniformMatrix2x3fv
            glUniformMatrix2x4fv
            glUniformMatrix3fv
            glUniformMatrix3x2fv
            glUniformMatrix3x4fv
            glUniformMatrix4fv
            glUniformMatrix4x2fv
            glUniformMatrix4x3fv
         </td>
        </tr>
        <tr>
         <td>
          <b>Associated Gets:</b>
         </td>
         <td>
            glGet with the argument GL_CURRENT_PROGRAM<br>
            glGetActiveUniform with the handle of a program object and the index of an active uniform variable<br>
            glGetUniform with the handle of a program object and the location of a uniform variable<br>
            glGetUniformLocation with the handle of a program object and the name of a uniform variable
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="glLinkProgram.htm">glLinkProgram</a>,
          <a href="glUseProgram.htm">glUseProgram</a>,
          <a href="glmath.htm">glmath</a>
<!--
          <a href="glTexCoord.htm">glTexCoord</a>
-->
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
