<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glUseProgram</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          include opengl.e
          <br>
          <br>
          glUseProgram(<a href="integer.htm">integer</a> program)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Installs a program object as part of current rendering state
          <br>
          <br>
            program: Specifies the handle of the program object whose executables are to be used as part of current rendering state.
          <br>
          <br>
            glUseProgram() installs the program object specified by program as part of current rendering state. <br>
            One or more executables are created in a program object by successfully attaching shader objects to it with 
            <a href="glCompileShader.htm">glCompileShader</a>(), successfully compiling the shader objects with 
            <a href="glCompileShader.htm">glCompileShader</a>, and successfully linking the program object with 
            <a href="glLinkProgram.htm">glLinkProgram</a>().
            <br>
            <br>
            A program object will contain an executable that will run on the vertex processor if it contains one or more 
            shader objects of type GL_VERTEX_SHADER that have been successfully compiled and linked. <br>
            A program object will contain an executable that will run on the geometry processor if it contains one or more 
            shader objects of type GL_GEOMETRY_SHADER that have been successfully compiled and linked. <br>
            Similarly, a program object will contain an executable that will run on the fragment processor if it contains 
            one or more shader objects of type GL_FRAGMENT_SHADER that have been successfully compiled and linked.
            <br>
            <br>
            While a program object is in use, applications are free to modify attached shader objects, compile attached 
            shader objects, attach additional shader objects, and detach or delete shader objects. <br>
            None of these operations will affect the executables that are part of the current state. <br>
            However, relinking the program object that is currently in use will install the program object as part of the 
            current rendering state if the link operation was successful, see <a href="glLinkProgram.htm">glLinkProgram</a>(). <br>
            If the program object currently in use is relinked unsuccessfully, its link status will be set to GL_FALSE, 
            but the executables and associated state will remain part of the current state until a subsequent call to 
            glUseProgram() removes it from use. <br>
            After it is removed from use, it cannot be made part of current state until it has been successfully relinked.
            <br>
            <br>
            If program is zero, then the current rendering state refers to an invalid program object and the results of 
            shader execution are undefined. However, this is not an error.
            <br>
            <br>
            If program does not contain shader objects of type GL_FRAGMENT_SHADER, an executable will be installed on the 
            vertex, and possibly geometry processors, but the results of fragment shader execution will be undefined.
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
            Like buffer and texture objects, the name space for program objects may be shared across a set of contexts, as long as 
            the server sides of the contexts share the same address space. <br>
            If the name space is shared across contexts, any attached objects and the data associated with those attached objects are shared as well.
            <br>
            <br>
            Applications are responsible for providing the synchronization across API calls when objects are accessed from different execution threads.
         </td>
        </tr>
        <tr>
         <td>
          <b>Errors:</b>
         </td>
         <td>
            GL_INVALID_VALUE is generated if program is neither 0 nor a value generated by OpenGL.<br>
            GL_INVALID_OPERATION is generated if program is not a program object.<br>
            GL_INVALID_OPERATION is generated if program could not be made part of current state.<br>
            GL_INVALID_OPERATION is generated if transform feedback mode is active.
         </td>
        </tr>
        <tr>
         <td>
          <b>Associated Gets:</b>
         </td>
         <td>
            glGet with the argument GL_CURRENT_PROGRAM<br>
            glGetActiveAttrib with a valid program object and the index of an active attribute variable<br>
            glGetActiveUniform with a valid program object and the index of an active uniform variable<br>
            glGetAttachedShaders with a valid program object<br>
            glGetAttribLocation with a valid program object and the name of an attribute variable<br>
            glGetProgram with a valid program object and the parameter to be queried<br>
            <a href="glGetProgramInfoLog.htm">glGetProgramInfoLog</a> with a valid program object<br>
            glGetUniform with a valid program object and the location of a uniform variable<br>
            glGetUniformLocation with a valid program object and the name of a uniform variable<br>
            glIsProgram
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="glAttachShader.htm">glAttachShader</a>,
          <a href="glBindAttribLocation.htm">glBindAttribLocation</a>,
          <a href="glCreateShader.htm">glCreateShader</a>,
          <a href="glCompileShader.htm">glCompileShader</a>,
          <a href="glCreateProgram.htm">glCreateProgram</a>,
          <a href="glDeleteProgram.htm">glDeleteProgram</a>,
          <a href="glDetachShader.htm">glDetachShader</a>,
          <a href="glLinkProgram.htm">glLinkProgram</a>,
          <a href="glUniform.htm">glUniform</a>,
          <a href="xor_bits.htm">xor_bits</a>,
          <a href="glTexCoord.htm">glTexCoord</a>
          <br>
DEV
See Also
//glAttachShader, //glBindAttribLocation, //glCreateShader, //glCompileShader, //glCreateProgram, //glDeleteProgram, //glDetachShader, //glLinkProgram, //glUniform, glValidateProgram, glVertexAttrib
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
