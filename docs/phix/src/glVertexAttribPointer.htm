<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glVertexAttribPointer</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          include opengl.e
          <br>
          <br>
          glVertexAttribPointer(<a href="integer.htm">integer</a> index, size, datatype, normalized, stride, <a href="atom.htm">atom</a> pVertices)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            define an array of generic vertex attribute data
          <br>
          <br>
            index: Specifies the index of the generic vertex attribute to be modified.<br>
            size: Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.<br>
            datatype: Specifies the data type of each component in the array. <br>
            Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_FIXED, or GL_FLOAT are accepted. <br>
            The initial value is GL_FLOAT.<br>
            normalized: Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point 
            values (GL_FALSE) when they are accessed.<br>
            stride: Specifies the byte offset between consecutive generic vertex attributes. <br>
            If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.<br>
            pVertices: Specifies a pointer to the first component of the first generic vertex attribute in the array.<br>
            <!-- The initial value is 0. ??? -->
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
            Note that in the C api it is natural to use the (address of) an array, whereas with opengl.e memory must be explicitly
            allocated and poked, using eg gl_float_array(), and eventually freed.
          <br>
          <br>
            glVertexAttribPointer specifies the location and data format of the array of generic vertex attributes at index index to use when rendering. <br>
            size specifies the number of components per attribute and must be 1, 2, 3, or 4. <br>
            type specifies the data type of each component, and stride specifies the byte stride from one attribute to the next, allowing vertices and 
            attributes to be packed into a single array or stored in separate arrays. <br>
            If set to GL_TRUE, normalized indicates that values stored in an integer format are to be mapped to the range [-1,1] (for signed values) or 
            [0,1] (for unsigned values) when they are accessed and converted to floating point. <br>
            Otherwise, values will be converted to floats directly without normalization.
            <br>
            <br>
            If a non-zero named buffer object is bound to the GL_ARRAY_BUFFER target [see <a href="glBindBuffer.htm">glBindBuffer</a>()] while a generic 
            vertex attribute array is specified, the pointer is treated as a byte offset into the buffer object&rsquo;s data store. <br>
            Also, the buffer object binding (GL_ARRAY_BUFFER_BINDING) is saved as generic vertex attribute array client-side state 
            (GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING) for index index.
            <br>
            <br>
            When a generic vertex attribute array is specified, size, type, normalized, stride, and pointer are saved as client-side state, 
            in addition to the current vertex array buffer object binding.
            <br>
            <br>
            To enable and disable a generic vertex attribute array, call glEnableVertexAttribArray and glDisableVertexAttribArray with index. <br>
            If enabled, the generic vertex attribute array is used when glDrawArrays or glDrawElements is called.
            <br>
            <br>
            Each generic vertex attribute array is initially disabled and isn't accessed when glDrawElements or glDrawArrays is called.
            <br>
            <br>
            glVertexAttribPointer is typically implemented on the client side.
         </td>
        </tr>
        <tr>
         <td>
          <b>Errors:</b>
         </td>
         <td>
            GL_INVALID_ENUM is generated if type is not an accepted value.<br>
            GL_INVALID_VALUE is generated if index is greater than or equal to GL_MAX_VERTEX_ATTRIBS.<br>
            GL_INVALID_VALUE is generated if size is not 1, 2, 3, or 4.<br>
            GL_INVALID_VALUE is generated if stride is negative.
         </td>
        </tr>
        <tr>
         <td>
          <b>Associated Gets:</b>
         </td>
         <td>
            glGet with argument GL_MAX_VERTEX_ATTRIBS<br>
            glGetVertexAttrib with arguments index and GL_VERTEX_ATTRIB_ARRAY_ENABLED<br>
            glGetVertexAttrib with arguments index and GL_VERTEX_ATTRIB_ARRAY_SIZE<br>
            glGetVertexAttrib with arguments index and GL_VERTEX_ATTRIB_ARRAY_TYPE<br>
            glGetVertexAttrib with arguments index and GL_VERTEX_ATTRIB_ARRAY_NORMALIZED<br>
            glGetVertexAttrib with arguments index and GL_VERTEX_ATTRIB_ARRAY_STRIDE<br>
            glGetVertexAttrib with arguments index and GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING<br>
            glGet with argument GL_ARRAY_BUFFER_BINDING<br>
            glGetVertexAttribPointerv with arguments index and GL_VERTEX_ATTRIB_ARRAY_POINTER
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="glBindAttribLocation.htm">glBindAttribLocation</a>,
          <a href="glBindBuffer.htm">glBindBuffer</a>,
          <a href="glEnableVertexAttribArray.htm">glDisableVertexAttribArray</a>,
          <a href="glCreateShader.htm">W</a>,
          <a href="glCreateShader.htm">X</a>,
          <a href="glEnableVertexAttribArray.htm">glEnableVertexAttribArray</a>,
          <a href="glUseProgram.htm">Z</a>
<br>
DEV 
See Also
//glBindAttribLocation, //glBindBuffer, //glDisableVertexAttribArray, glDrawArrays, glDrawElements, //glEnableVertexAttribArray, glVertexAttrib
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
