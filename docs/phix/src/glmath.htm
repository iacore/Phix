<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glmath</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e<br>
          include opengl.e  -- (see notes)<br>
          <br>
          <a href="sequence.htm">sequence</a> res = m4_crossProduct(<a href="sequence.htm">sequence</a> a, b)
          <br>
          <i>-- or --</i>
          <br>
          <a href="sequence.htm">sequence</a> res = m4_inverse(<a href="sequence.htm">sequence</a> m)
          <br>
          <i>-- or --</i>
          <br>
          <a href="sequence.htm">sequence</a> res = m4_lookAt(<a href="sequence.htm">sequence</a> cPosn, tgt, up)
          <br>
          <i>-- or --</i>
          <br>
          <a href="sequence.htm">sequence</a> res = m4_multiply(<a href="sequence.htm">sequence</a> a, b)
          <br>
          <i>-- or --</i>
          <br>
          <a href="sequence.htm">sequence</a> res = m4_normalize(<a href="sequence.htm">sequence</a> v)
          <br>
          <i>-- or --</i>
          <br>
          <a href="sequence.htm">sequence</a> res = m4_perspective(<a href="atom.htm">atom</a> fieldOfViewInRadians, aspect, near, far)
          <br>
          <i>-- or --</i>
          <br>
          <a href="sequence.htm">sequence</a> res = m4_subtractVectors(<a href="sequence.htm">sequence</a> a, b)
          <br>
          <i>-- or --</i>
          <br>
          <a href="sequence.htm">sequence</a> res = m4_xRotate(<a href="sequence.htm">sequence</a> m, <a href="atom.htm">atom</a> angleInRadians)
          <br>
          <i>-- or --</i>
          <br>
          <a href="sequence.htm">sequence</a> res = m4_yRotate(<a href="sequence.htm">sequence</a> m, <a href="atom.htm">atom</a> angleInRadians)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            A collection of matrix array maths routines, mostly (manually) translated from JavaScript as found on 
            https://webglfundamentals.org into Phix, and then (automatically) back into JavaScript by pwa\p2js<br>
            Note that demo\pGUI\opengl.e includes builtins\glmath.e, and pwa\p2js understands enough to effect the same,
            and although it is not an autoinclude the latter treats it pretty much the same.
            <br>
            <br>
            <a href="sequence.htm">sequence</a> res = <b>m4_crossProduct</b>(<a href="sequence.htm">sequence</a> a, b)<br>
            Computes the cross product of 2 vectors (both of length 3), returns a new vector
            <br>
            <br>
            <a href="sequence.htm">sequence</a> res = <b>m4_inverse</b>(<a href="sequence.htm">sequence</a> m)<br>
            Computes the inverse of a matrix.<br>
            m: matrix to compute inverse of (a 4x4 matrix represented as a flat 16-element sequence)<br>
            Returns a new 4x4 matrix represented as a flat 16-element sequence.
            <br>
            <br>
            <a href="sequence.htm">sequence</a> res = <b>m4_lookAt</b>(<a href="sequence.htm">sequence</a> cPosn, tgt, up)<br>
            Creates a lookAt matrix, a world matrix for a camera. <br>
            In other words it will transform from the origin to a place and orientation in the world. <br>
            For a view matrix take the inverse of this.<br>
            cPosn: position of the camera (a vector of length 3)<br>
            tgt: position of the target ("")<br>
            up: direction ("")<br>
            Returns a new 4x4 matrix represented as a flat 16-element sequence.
            <br>
            <br>
            <a href="sequence.htm">sequence</a> res = <b>m4_multiply</b>(<a href="sequence.htm">sequence</a> a, b)<br>
            Takes two 4-by-4 matrices, a and b (represented as flat 16-element sequences), and computes the product in the order
            that pre-composes b with a.  In other words, the matrix returned will transform by b first and then a.<br>
            Note this is subtly different from just multiplying the matrices together.<br>
            For given a and b, this function returns the same object in both row-major and column-major mode.<br>
            Returns a new 4x4 matrix represented as a flat 16-element sequence.
            <br>
            <br>
            <a href="sequence.htm">sequence</a> res = <b>m4_normalize</b>(<a href="sequence.htm">sequence</a> v)<br>
            Normalizes a vector.<br>
            v: vector (length 3) to normalize<br>
            Returns a new vector
            <br>
            <br>
            <a href="sequence.htm">sequence</a> res = <b>m4_perspective</b>(<a href="atom.htm">atom</a> fieldOfViewInRadians, aspect, near, far)<br>
            Computes a 4-by-4 perspective transformation matrix given the angular height
            of the frustum, the aspect ratio, and the near and far clipping planes.<br>
            The arguments define a frustum extending in the negative z direction.<br>
            The given angle is the vertical angle of the frustum, and the horizontal angle is determined to produce the given aspect ratio. <br>
            The arguments near and far are the distances to the near and far clipping planes.  <br>
            Note that near and far are not z coordinates, but rather they are distances along the negative z-axis.<br>
            The matrix generated sends the viewing frustum to the unit box.<br>
            We assume a unit box extending from -1 to 1 in the x and y dimensions and from -1 to 1 in the z dimension.
            <br>
            fieldOfViewInRadians: field of view in y axis<br>
            aspect: aspect of viewport (width / height)<br>
            near: near Z clipping plane<br>
            far: far Z clipping plane<br>
            Returns a new 4x4 matrix represented as a flat 16-element sequence.
            <br>
            <br>
            <a href="sequence.htm">sequence</a> res = <b>m4_subtractVectors</b>(<a href="sequence.htm">sequence</a> a, b)<br>
            Subtracts 2 vectors (both of length 3), returns a new vector.
            <br>
            <br>
            <a href="sequence.htm">sequence</a> res = <b>m4_xRotate</b>(<a href="sequence.htm">sequence</a> m,
                                                                        <a href="atom.htm">atom</a> angleInRadians)<br>
            Multiply by an x rotation matrix<br>
            m: matrix to multiply (a 4x4 matrix represented as a flat 16-element sequence)<br>
            angleInRadians: amount to rotate<br>
            Returns a new 4x4 matrix represented as a flat 16-element sequence.
            <br>
            <br>
            <a href="sequence.htm">sequence</a> res = <b>m4_yRotate</b>(<a href="sequence.htm">sequence</a> m, 
                                                                        <a href="atom.htm">atom</a> angleInRadians)<br>
            Multiply by a y rotation matrix<br>
            m: matrix to multiply (a 4x4 matrix represented as a flat 16-element sequence)<br>
            angleInRadians: amount to rotate<br>
            Returns a new 4x4 matrix represented as a flat 16-element sequence.
            <br>
            <br>
            Not much else to say about them really, but as usual improvements, bug fixes, extensions, suggestions, and 
            so on are all welcome.
            <br>
            <br>
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="glUniform.htm">glUniform</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
