<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">My pet hate: heredoc</h1>
      <div id="mainSection">
<!--
Oh that rings so true. Can&rsquo;t quite remember now but last week I was staring at the GTK docs and a "fill" parameter, 
and in about seven different places it said something like "The fill parameter contains the fill setting for the control." 
I still have absolutely no idea what it was - a bool, an enum, a width, a colour... 
-->
        My pet hate is "heredoc", whenever I see "it's better than nothing" I just plead back at the screen "NO IT ****** ISN&rsquo;T". <br>
        Were there no such thing, someone might at least <i>try</i>, and "partial" good beats "complete" drivel every time for me.
        <br>
        <br>
        Of course I would have no problem with useful information such as routine signatures being automatically extracted from the source 
        <i>code</i>, but a) forcing the programmer to replicate that information as a comment is liable to error and just plain stupid, and 
        b) describing the collected remarks as <i>documentation</i> is plain incorrect, a far better term would be <i>utter garbage</i>.
        <br>
        <br>
        For a completely random example of what vexes me, try 
        <a href="javascript:ExternalLink('ext666');" title='https://openeuphoria.org/docs/std_net_dns.html#_5216_addr_protocol'
        id="ext666" style="color:#9B5565" >this link</a>, and I mean who exactly does that actually help, <i>ever</i>?
        <br>
        <br>
        There are without doubt many sound reasons for breaking something like GTK down into five or more implementation units, but prohibiting
        <i>any</i> cross-references and limiting the search function to one fifth or less of the product is nothing short of utterly ridiculous.
        I have in fact resorted to running Dependency Walker to get and save a list of the available functions, and it is quite something that 
        running that a dozen or more times is way easier than navigating the official (di-docgen) help documents! The GTK docs quite adamantly
        state they know <i>nothing</i> about the window decorations, to the extent that questions of that ilk go unanswered on StackOverflow,
        but actually GDK <i>does</i> know! Why on earth though, would the <i>GDK</i> team ever want to proof read the <i>GTK</i> docs??!!
        Were the GTK docs a car manual, they would give you <i>some</i> information about every component, but essentially nothing more than
        what you could ascertain by picking up and inspecting part JG37-004T yourself, and only a few rare accidental hints where it might go 
        or what it actually does or how to put anything at all together. Apart from the function signatures, which I find easier to obtain by
        searching the GTK sources anyway, I personally find the GTK docs to be (almost) completely useless. Other heredocs are equally awful.<br>
        The GTK3 docs severely vex me simply by containing the phrase "No further description available" literally tens of thousands of times.<br>
        The GTK4 docs are not magically better just because someone (presumably) tweaked di-docgen to stop outputting that particular phrase.
        <br>
        <br>
        Programmers are not generally noted for their eloquence in explaining things in simple terms, and (evidently) only very rarely give any 
        consideration to the holositic whole. They say a picture paints a thousand words, but I&rsquo;d wager it would very rarely even cross 
        the mind of a programmer to insert an image link in the middle of a heredoc comment, and even if it did, they probably wouldn&rsquo;t 
        know how to write an xxgen-compatible link, if such a thing even exists, or for that matter where precisely the image should be stored.
        <br>
        <br>
        So, why have so many technical authors been sacked and this mess been foisted upon us? Once <a href="OOP.htm">object orientation</a> 
        is allowed to actively <i>encourage complexity</i>, technical authors could simply never keep up, and quite probably the world wanted 
        a way to <i>slow those crazy programmers down</i>, at least and most cruciually on the meaningless abstraction side of things, but,
        alas, it didn&rsquo;t really work. At least some of my issues with heredoc no doubt lie with the astonishing appetite throughout the 
        software industry as a whole to create things so ridiculously over-complicated they could simply <i>never</i> be adequately documented.
        Then again, heredoc <i>enables</i> them to do just that, whereas if they <i>had</i> to produce proper docs, they would probably also
        produce software which would be far easier to use, even if it still had completely useless documentation.
        <br>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
