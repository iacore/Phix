<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">packages</h1>
      <div id="mainSection">
        Phix: <br>
        Does not yet have any kind of package manager, unless you count PCAN (I don&rsquo;t).
        <br>
        <br>
        Python: pip... (pretty good, but I have absolutely no idea how that whole infrastructure works)
        <br>
        <br>
        Julia: <br>
        ERROR: LoadError: ArgumentError: Package Images not found in current path.<br>
        Run `import Pkg; Pkg.add("Images")` to install the Images package.
        <br>
        <br>
        It is a little buried in the output, and one has to wonder why it is not automated/prompted. Once it gets going it<br>
        is very good, but astonishingly slow, then again you can see it /is/ installing an absolute shedload of stuff, and<br>
        as they say, these days computers are so fast, no-one cares if it takes a couple of hours to install something...
        <br>
        <br>
        Go: <br>
        Has the potential to be world-beating. Trouble is, I just don&rsquo;t "get" the go notion of packages, and they break
        <i>everything</i> on pretty much <i>every</i> release - I have tried no less than four IUP wrappers but they were all 
        broken by the time I got to them.
        <br>
        <br>
        Wren: <br>
        Only thing I know of is code squirreled away on rosettacode talk pages: relies entirely on manual copy and paste, and 
        has zero checks for updates, but at least I know where to look. However, it is the simplest thing that could possibly 
        work, and more of a basic idea than anything like a finished product. GitHub might be a better place to store things,
        except for the push/pull restrictions that a public wiki does not suffer from, and rosettacode implicitly has a fair
        community-driven moderation aspect with several sets of eyes monitoring the recent changes that would help catch any
        acts of vandalism. The missing bit is automatic download, and perhaps a slightly more controlled "approved checksum"
        system that will "at your own risk" recent changes, and/or some kind of version history (which technically rc has).
        Maybe if we just simply said "same on rosettacode and PCAN === approved" that would suffice? I would also not be
        against adding a new step to the build process and shipping some extra files/checksums with each new release, or
        having some (new) means of pulling the lastest set from the official Phix repository between them.<br>
        Then again, I&rsquo;m prett sure I&rsquo;m overcomplicating this, maybe include file.e [from url[,date|version]] is
        the way to go, with url being a private site or PCAN:name, the [from] part only being used on error, and/or maybe
        with Phix keeping some kind of record of what it has already dealt with... Lastly, while "PCAN:" could mean the
        existing http://phix.x10.mx/pmwiki/pmwiki.php there should be a way for someone to setup [partial] copies of all
        that stuff on a different site, should they wish, and be prepared to maintain it/back-update PCAN as needed.
        <br>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
