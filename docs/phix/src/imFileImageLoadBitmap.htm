<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">imFileImageLoadBitmap</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include pGUI.e
            <br>
            <br>
            <a href="cdCanvas.htm#imImage">imImage</a> im = imFileImageLoadBitmap(<a href="string.htm">string</a> filename, 
                                                                                  <a href="integer.htm">integer</a> index=0,
                                                                                  <a href="atom.htm">atom</a> pError=NULL)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Loads an image from file, but forces the image to be a bitmap. Opens, loads and closes the file. 
            <br>
            <br>
            filename: Name of the file to be loaded.<br>
            index: specifies the image number between 0 and image_count-1. <br>
            pError: pointer to allocated memory which recieves an error code.
            <br>
            <br>
<!--DEV
File Access Error Codes

In Lua use im.ErrorStr(err) to convert the error number into a string.
Enumerator:
IM_ERR_NONE     
No error.

IM_ERR_OPEN     
Error while opening the file (read or write).

IM_ERR_ACCESS   
Error while accessing the file (read or write).

IM_ERR_FORMAT   
Invalid or unrecognized file format.

IM_ERR_DATA     
Invalid or unsupported data.

IM_ERR_COMPRESS         
Invalid or unsupported compression.

IM_ERR_MEM      
Insufficient memory

IM_ERR_COUNTER  
Interrupted by the counter

C:\Program Files (x86)\Phix\demo\pGUI\pGUI.e:4734   IM_ERR_NONE=0, IM_ERR_OPEN, IM_ERR_ACCESS, IM_ERR_FORMAT, 
C:\Program Files (x86)\Phix\demo\pGUI\pGUI.e:4735   IM_ERR_DATA, IM_ERR_COMPRESS, IM_ERR_MEM, IM_ERR_COUNTER 
C:\Program Files (x86)\Phix\demo\pGUI\pGUI.e:5312 Returns IM_ERR_NONE, IM_ERR_DATA or IM_ERR_COUNTER, see also imErrorCodes. 
C:\Program Files (x86)\Phix\demo\pGUI\pGUI.e:5317     if err!=IM_ERR_NONE then ?9/0 end if
C:\Program Files (x86)\Phix\demo\pGUI\simple_paint.exw:320         case IM_ERR_OPEN:       show_error("Error Opening File.", 1)
C:\Program Files (x86)\Phix\demo\pGUI\simple_paint.exw:321         case IM_ERR_MEM:        show_error("Insufficient memory.", 1)
C:\Program Files (x86)\Phix\demo\pGUI\simple_paint.exw:322         case IM_ERR_ACCESS:     show_error("Error Accessing File.", 1)
C:\Program Files (x86)\Phix\demo\pGUI\simple_paint.exw:323         case IM_ERR_DATA:       show_error("Image type not Supported.", 1)
C:\Program Files (x86)\Phix\demo\pGUI\simple_paint.exw:324         case IM_ERR_FORMAT:     show_error("Invalid Format.", 1)
C:\Program Files (x86)\Phix\demo\pGUI\simple_paint.exw:325         case IM_ERR_COMPRESS:   show_error("Invalid or unsupported compression.", 1)

-->
            Returns NULL on failure. Attributes from the file will be stored with the image. See also imErrorCodes.
         </td>
        </tr>
        <tr>
         <td>
          <b>Notes:</b>
         </td>
         <td>
            This wraps the C function imFileImageLoadBitmap, which IupLoadImage invokes internally (when appropriate).
            Use IupLoadImage to obtain an <a href="Ihandle.htm">Ihandle</a> which can be used on a control; imFileImageLoadBitmap returns an 
            <a href="cdCanvas.htm#imImage">imImage</a>, which is more suitable for image manipulation. See simple_paint.exw for an example of use.
            <br>
              <a name=aux></a>
         </td>
        </tr>
        <tr>
         <td>
          <b>Auxillary Functions</b>
         </td>
         <td>
            The following routines can be used with <a href="cdCanvas.htm#imImage">imImage</a> handles (see simple_paint.exw for examples of use):
            <br>
            <br>
            <a href="integer.htm">integer</a> width = <b>im_width</b>(<a href="cdCanvas.htm#imImage">imImage</a> image) &nbsp;          -- (ie <code>im_width(image)</code> is equilvalent to <code>image-&gt;width</code> in C)
            <br>
            <br>
            <a href="integer.htm">integer</a> height = <b>im_height</b>(<a href="cdCanvas.htm#imImage">imImage</a> image)   &nbsp;          -- (ie <code>im_height(image)</code> is equilvalent to <code>image-&gt;height</code> in C)
            <br>
            <br>
            <a href="integer.htm">integer</a> depth = <b>im_depth</b>(<a href="cdCanvas.htm#imImage">imImage</a> image) &nbsp;          -- (ie <code>im_depth(image)</code> is equilvalent to <code>image-&gt;depth</code> in C)
            <br>
            <br>
            <a href="integer.htm">integer</a> color_space = <b>im_color_space</b>(<a href="cdCanvas.htm#imImage">imImage</a> image) &nbsp; -- (ie <code>im_color_space(image)</code> is equilvalent to <code>image-&gt;color_space</code> in C)
            <br>
            <br>
            <a href="atom.htm">atom</a> dataptr = <b>im_data</b>(<a href="cdCanvas.htm#imImage">imImage</a> image) &nbsp;               -- (ie <code>im_data(image)</code> is equilvalent to <code>image-&gt;data</code> in C)
            <br>
            <br>
            <a href="integer.htm">integer</a> {r,g,b} = <b>im_pixel</b>(<a href="cdCanvas.htm#imImage">imImage</a> image, <a href="integer.htm">integer</a> x, y)
            <br>
            <br>
            <b>imImageSetAttribString</b>(<a href="cdCanvas.htm#imImage">imImage</a> image, <a href="string.htm">string</a> attrib, <a href="string.htm">nullable_string</a> v)
            <br>
            <br>
            <a href="string.htm">string</a> res = <b>imImageGetAttribString</b>(<a href="cdCanvas.htm#imImage">imImage</a> image, <a href="string.htm">string</a> attrib)   Returns "" if not found.
            <br>
            <br>
            <a href="integer.htm">integer</a> error = <b>imFileImageSave</b>(<a href="string.htm">string</a> filename, <a href="string.htm">string</a> fmt, <a href="cdCanvas.htm#imImage">imImage</a> image)
            <br>
            <br>
            <b>imProcessRenderFloodFill</b>(<a href="cdCanvas.htm#imImage">imImage</a> image, <a href="integer.htm">integer</a> start_x, start_y, <a href="sequence.htm">sequence</a> replace_color, <a href="atom.htm">atom</a> tolerance)
            <br>
            <br>
            <b>imProcessRenderConstant</b>(<a href="cdCanvas.htm#imImage">imImage</a> image, <a href="sequence.htm">sequence</a> v)
            <br>
            <br>
            <a href="cdCanvas.htm#imImage">imImage</a> image = <b>imImageDestroy</b>(<a href="cdCanvas.htm#imImage">imImage</a> image) -- (returns/sets image to NULL)
            <br>
            <br>
            <b>imConvertPacking</b>(<a href="atom.htm">atom</a> pSrcData, pDstData, <a href="integer.htm">integer</a> width, height, src_depth, dst_depth, data_type, src_is_packed)
            <br>
            <br>
            <b>imImageRemoveAlpha</b>(<a href="cdCanvas.htm#imImage">imImage</a> image)
            <br>
            <br>
            <a href="cdCanvas.htm#imImage">imImage</a> res = <b>imImageCreateBased</b>(<a href="cdCanvas.htm#imImage">imImage</a> image, <a href="integer.htm">integer</a> width=-1, height=-1, color_space=-1, data_type=-1)
            <br>
            <br>
            <b>imConvertColorSpace</b>(<a href="cdCanvas.htm#imImage">imImage</a> src_image, <a href="cdCanvas.htm#imImage">imImage</a> dst_image)
            <br>
            <br>
            <a href="cdCanvas.htm#imImage">imImage</a> image = <b>imImageCreate</b>(<a href="integer.htm">integer</a> width, height, color_space, data_type)
            <br>
            <br>
            <b>imProcessResize</b>(<a href="cdCanvas.htm#imImage">imImage</a> src_image, <a href="cdCanvas.htm#imImage">imImage</a> dst_image, <a href="integer.htm">integer</a> order)
            <br>
            <br>
            <a href="cdCanvas.htm#imImage">imImage</a> clone = <b>imImageClone</b>(<a href="cdCanvas.htm#imImage">imImage</a> image)
            <br>
            <br>
            <b>imProcessMirror</b>(<a href="cdCanvas.htm#imImage">imImage</a> src_image, <a href="cdCanvas.htm#imImage">imImage</a> dst_image)
            <br>
            <br>
            <b>imProcessFlip</b>(<a href="cdCanvas.htm#imImage">imImage</a> src_image, <a href="cdCanvas.htm#imImage">imImage</a> dst_image)
            <br>
            <br>
            <b>imProcessRotate180</b>(<a href="cdCanvas.htm#imImage">imImage</a> src_image, <a href="cdCanvas.htm#imImage">imImage</a> dst_image)
            <br>
            <br>
            <b>imProcessRotate90</b>(<a href="cdCanvas.htm#imImage">imImage</a> src_image, <a href="cdCanvas.htm#imImage">imImage</a> dst_image, <a href="integer.htm">integer</a> dir_clockwise)
            <br>
            <br>
            <b>imProcessNegative</b>(<a href="cdCanvas.htm#imImage">imImage</a> src_image, <a href="cdCanvas.htm#imImage">imImage</a> dst_image)
            <br>
            <br>
            <b>imProcessToneGamut</b>(<a href="cdCanvas.htm#imImage">imImage</a> src_image, <a href="cdCanvas.htm#imImage">imImage</a> dst_image, <a href="integer.htm">integer</a> op, <a href="sequence.htm">sequence</a> params)
            <br>
            <br>
            <a href="atom.htm">atom</a> pData = <b>imImageGetOpenGLData</b>(<a href="cdCanvas.htm#imImage">imImage</a> image)
            <br>
<!--
 imFileImageLoadBitmap.htm#aux
-->
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
