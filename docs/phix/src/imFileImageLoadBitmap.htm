<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">imFileImageLoadBitmap</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Syntax:</b>
         </td>
         <td>
          <font face = "Arial, Helvetica">
            include pGUI.e
            <br>
            <br>
            imImage im = imFileImageLoadBitmap(string filename, integer index, atom pError)
          </font>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Loads an image from file, but forces the image to be a bitmap. Opens, loads and closes the file. 
            <br>
            <br>
            filename: Name of the file to be loaded.<br>
            index: specifies the image number between 0 and image_count-1. <br>
            pError: pointer to allocated memory which recieves an error code.
            <br>
            <br>
            Returns NULL on failure. Attributes from the file will be stored with the image. See also imErrorCodes.
         </td>
        </tr>
        </tr>
        <tr>
         <td valign=top>
          <b>Notes:</b>
         </td>
         <td>
            This wraps the C function imFileImageLoadBitmap, which IupLoadImage invokes internally (when appropriate).
            Use IupLoadImage to obtain an Ihandle which can be used on a control; imFileImageLoadBitmap returns an 
            imImage, which is more suitable for image manipulation. See simple_paint.exw for an example of use.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <a name=aux></a>
          <b>Auxillary Functions</b>
         </td>
         <td>
            The following routines can be used with imImage handles (see simple_paint.exw for examples of use):
            <br>
            <br>
            integer width = <b>im_width</b>(imImage image) &nbsp;               -- (ie <code>im_width(image)</code> is equilvalent to <code>image-&gt;width</code> in C)
            <br>
            <br>
            integer height = <b>im_height</b>(imImage image)    &nbsp;          -- (ie <code>im_height(image)</code> is equilvalent to <code>image-&gt;height</code> in C)
            <br>
            <br>
            integer color_space = <b>im_color_space</b>(imImage image) &nbsp;   -- (ie <code>im_color_space(image)</code> is equilvalent to <code>image-&gt;color_space</code> in C)
            <br>
            <br>
            atom dataptr = <b>im_data</b>(imImage image)    &nbsp;              -- (ie <code>im_data(image)</code> is equilvalent to <code>image-&gt;data</code> in C)
            <br>
            <br>
            <b>imImageSetAttribString</b>(imImage image, string attrib, nullable_string v)
            <br>
            <br>
            string res = <b>imImageGetAttribString</b>(imImage image, string attrib)    Returns "" if not found.
            <br>
            <br>
            integer error = <b>imFileImageSave</b>(string filename, string fmt, imImage image)
            <br>
            <br>
            <b>imProcessRenderFloodFill</b>(imImage image, integer start_x, integer start_y, sequence replace_color, atom tolerance)
            <br>
            <br>
            <b>imProcessRenderConstant</b>(imImage image, sequence v)
            <br>
            <br>
            <b>imImageDestroy</b>(imImage image)
            <br>
            <br>
            <b>imImageRemoveAlpha</b>(imImage image)
            <br>
            <br>
            imImage res = <b>imImageCreateBased</b>(imImage image, integer width=-1, integer height=-1, integer color_space=-1, integer data_type=-1)
            <br>
            <br>
            <b>imConvertColorSpace</b>(imImage src_image, imImage dst_image)
            <br>
            <br>
            imImage image = <b>imImageCreate</b>(integer width, integer height, integer color_space, integer data_type)
            <br>
            <br>
            <b>imProcessResize</b>(imImage src_image, imImage dst_image, integer order)
            <br>
            <br>
            imImage clone = <b>imImageClone</b>(imImage image)
            <br>
            <br>
            <b>imProcessMirror</b>(imImage src_image, imImage dst_image)
            <br>
            <br>
            <b>imProcessFlip</b>(imImage src_image, imImage dst_image)
            <br>
            <br>
            <b>imProcessRotate180</b>(imImage src_image, imImage dst_image)
            <br>
            <br>
            <b>imProcessRotate90</b>(imImage src_image, imImage dst_image, integer dir_clockwise)
            <br>
            <br>
            <b>imProcessNegative</b>(imImage src_image, imImage dst_image)
            <br>
            <br>
            <b>imProcessToneGamut</b>(imImage src_image, imImage dst_image, integer op, sequence params)
            <br>
<!--
 imFileImageLoadBitmap.htm#aux
-->
         </td>
        </tr>
       </table>
       <p></p>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
