<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">integer</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          integer <i>identifier</i>
          <br>
          <i>-- or --</i>
          <br>
          <a href="integer.htm#bool">bool</a> res = integer(<a href="object.htm">object</a> x)
          <small>
          <br>
          <br>
          <i>-- or --</i>
          <br>
          <br>
          </small>
          int <i>identifier</i>
          <br>
          <i>-- or --</i>
          <br>
          <a href="integer.htm#bool">bool</a> res = int(<a href="object.htm">object</a> x)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            This serves to define the integer type. int is just a simple alias of integer.<br>
            You can also call it like an ordinary function to determine whether an object is an integer.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported, however JavaScript is a <i><a href="glossary.htm#typeless">typeless</a></i> language, with 
          "<i><code>integer i</code></i>" being <a href="mappings.htm">mapped</a> to 
          "<i><code>let /*integer*/ i;</code></i>" and there are no run-time typechecks, 
          or at least they are very rare (see implementation notes below). An explicit hll/Phix "if integer(x)" and similar 
          expressions all work under pwa/p2js exactly as expected, except for:
          <br>
          <br>
          Note that within JavaScript, an integer is +/-9,007,199,254,740,992 (ie 2^53).
<!--        , and that (eg) integer(fn) is a normal test yielding true/false whereas integer(fn,"fn") is an explicit typecheck.-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            When invoked as a function, returns <a href="logicops.htm#tf">true</a> (1) if x is an integer, otherwise returns <a href="logicops.htm#tf">false</a> (0).<br>
            On 32-bit, integers are whole numbers in the range -1,073,741,824 to +1,073,741,823 (-#40000000 to #3FFFFFFF, technically 31-bit)<br>
            On 64-bit, integers are whole numbers in the range -4,611,686,018,427,387,904 to +4,611,686,018,427,387,903 (-#4000000000000000 to #3FFFFFFFFFFFFFFF, technically 63-bit)<br>
            Obviously, however, any code which should work on both 32 and 64-bit should conform to the 32-bit limits.
         </td>
        </tr>
        <tr>
         <td>
          <b>Supplemental:</b>
         </td>
         <td>
          <a name=bool></a>
            In psym.e (part of the compiler), <b>bool</b> is a simple alias of integer, which does not validate that the value is 
            <a href="logicops.htm#tf">true</a>(1) or <a href="logicops.htm#tf">false</a>(0) only - instead, 0 is false, and any 
            other value is deemed true. However there is a more rigorous version, <b>boolean</b>, defined in builtins/ptypes.e -
            not an autoinclude but used/included by <a href="pGUI.htm">pGUI</a>, <a href="mpfr.htm">mpfr</a>, <a href="cffi.htm">cffi</a>, 
            and hence indirectly <a href="structs.htm">builtins\structs.e</a>, so any of those will make it available.<br>
            Obviously there is no harm whatsoever in storing a boolean in a bool or integer, and only rarely is there any advantage to using the former.
<!--
            , resulting in the following 
            behaviour:<br>
    <x!x-x-eucode>
    bool test
    test = 5                    -- fine
    include builtins/ptypes.e   -- (or pGUI.e or mpfr.e or cffi.e or structs.e)
    boolean test2
    test2 = 5                   -- error
    </eucode-x-x>x
    <pre>
    <font color="#000000"></font><font color="#004080">bool</font><font color="#000000"> test
    test</font><font color="#0000FF"> =</font><font color="#000000"> 5                   </font><font color="#000080"><i> -- fine
    </i></font><font color="#008080">include</font><font color="#000000"> builtins</font><font color="#0000FF">/</font><font color="#000000">ptypes.e  </font><font color="#000080"><i> -- (or pGUI.e or mpfr.e)
    </i></font><font color="#000000">test</font><font color="#0000FF"> =</font><font color="#000000"> 5                   </font><font color="#000080"><i> -- fine
    </i></font><font color="#004080">bool</font><font color="#000000"> test2
    test2</font><font color="#0000FF"> =</font><font color="#000000"> 5                  </font><font color="#000080"><i> -- error</i></font>
    </pre>
-->
            <br>
            <br>
            Ideally boolean variables should (probably) begin with is/are/has or similar, eg isVisible/areEqual/hasEncryption in preference to 
            visible/equal/encryption, or perhaps say bUgly (aka hungarian notation), with identifiers such as is_visible being more suggestive 
            of a function that presumably returns a true/false result. Admittedly I tend to mix and mash those sort of rules and rather than
            getting too pedantic, try to focus on communicating the underlying intent as clearly as reasonably possible.
            <br>
            <br>
            The builtin constants <b><a href="logicops.htm#tf">true</a></b> and <b><a href="logicops.htm#tf">false</a></b> can and should be used 
            for variables and parameters declared as type bool[ean], or, if you prefer, TRUE, True, FALSE, and False, are identical/aliases 
            - mainly for compatibility with legacy code, but ultimately also one less thing (upper/lower case) that you have to remember, or fix.
<!--
             Of course the above example would not show any deviation were it using true/1/false/0 instead of the patently illogical 5.
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 1:</b>
         </td>
         <td>
<!--eucode>
integer z = -1
</eucode-->
<pre>
<font color="#004080">integer</font><font color="#000000"> z</font><font color="#0000FF"> = -</font><font color="#000000">1</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 2:</b>
         </td>
         <td>
<!--eucode>
if integer(y/x) then
    puts(1, "y is an exact multiple of x")
end if
</eucode-->
<pre>
<font color="#008080">if</font><font color="#004080"> integer</font><font color="#0000FF">(</font><font color="#000000">y</font><font color="#0000FF">/</font><font color="#000000">x</font><font color="#0000FF">)</font><font color="#008080"> then</font>
<font color="#7060A8">    puts</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000"> "y is an exact multiple of x"</font><font color="#0000FF">)</font>
<font color="#008080">end if</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            There are generic versions of the integer function implemented as :%opInt in builtins\VM\pType.e and :%opInt0 in builtins\VM\pJcc.e that 
            the compiler only invokes as a last resort, preferring instead to inline that functionality if the argument is known to be assigned or the
            result variable, if any, is known to be an integer, ie does not require decref/dealloc. The compiler may also completely omit the test 
            and/or any related code, if type inference/propagation determines that the result will always be true or always false.<br>
            As already mentioned, builtins/ptypes.e is where the supplemental types are defined.<br>
            The file pwa/p2js.js defines integer() with an optional name parameter, which if not "" triggers unassigned or type check errors, but that 
            (parameter) is not intended for or available from hll/Phix code, and only meant for use in manually hand-crafted replacements elsewhere 
            in p2js.js, and in practice it ended up being invoked (that way) rather more sparingly than first predicted.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="atom.htm">atom</a>,
          <a href="sequence.htm">sequence</a>,
          <a href="string.htm">string</a>,
          <a href="object.htm">object</a>,
          <a href="floor.htm">floor</a>,
          <a href="puts.htm">puts</a>,
          <a href="language.htm">Core Language</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
          A value such as '123456.0000000001' could appear as '123456' in trace, ex.err, and other diagnostic output, 
          because the standard default is to display a maximum of six decimal places. A trailing ".0" is now added by 
          print() and sprint() [see builtins\VM\psprintN.e] when a non-integer atom value is rounded in such a manner 
          by sprintf(), to avoid that potential source of confusion. (To reiterate what I just said: sprintf() may chop
          off a trailing ".0"; sprint() [without the f] may stick it back on.)
          <br>
          <br>
          Phix does not have an unsigned integer type - since the downsides of unexpected and ludicrous math results far outweigh any possible benefits,
          and besides, the 31/63 bit aspect would slap a massive black hole smack in the middle of an extended unsigned range anyway, as in #00..#3F ok,
          #40..BF fail, #C0..#FF ok, making them completely useless, but atoms can cope perfectly well enough.<br>
          The most significant loss here would be that a C-style <code>(unsigned)idx &lt; s.len</code> must be replaced with 
          <code>idx&gt;=1 and idx&lt;=length(s)</code>, plus a couple of <a href="abs.htm">abs</a>() calls if you also want to allow 
          <a href="subscripts.htm#negative">negative subscripts</a>.
          <br>
          <br>
          The sq_int() routine can be used to apply an integer() test to all top-level elements of a sequence, eg
          <code>sq_int({1,1.5,"string",{1,1.5,"string",{}}) ==&gt; {true,false,false,false}</code>.  That routine 
          returns a single true/false if passed an atom or string, otherwise a "flat" sequence of true/false of
          the same length as the input argument. Note there are no known valid uses of the sq_int() routine, as yet.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
