<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">JavaScript in pwa/p2js</h1>
      <div id="mainSection">
        Obviously more complete references can be found easily enough - the whole point of this is to hook
        into the Edita/Edix F1 Help system, and that way speed up the development of pwa/p2js itself.
        <br>
        <br>
        There may be some subtle implications of using these routines from an imperative mindset (as
        opposed to say a prototype or object orientated mindset) that may be clearer here than elsewhere,
        plus there may be for instance optional parameters and the like that pwa/p2js does not use and/or
        specifically advises against. Lastly, by only documenting those fields and methods actually used, 
        they should be a tad easier to locate, and hopefully impose significantly less cognitive overload.
        <br>
        <br>
        Apart from an initial trawl, entries are likely to be added on an ad-hoc basis, as I realise it is
        now the <i>N</i>th time I&rsquo;ve had to go to 
        <a href="javascript:ExternalLink('ext606','https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model');"
           id="ext606" style="color:#9B5565" >MDN</a> (the definititive fount of all knowledge) or. 
        <a href="javascript:ExternalLink('ext707','https://www.w3schools.com/js/default.asp');"
           id="ext707" style="color:#9B5565" >w3schools</a> (what it lacks in detail it makes up for in 
        navigability). Things I use very rarely or are easily cribbed are unlikely to get a mention in
        here, for instance I&rsquo;m not about to try and document JavaScript regular expressions.
        <br>
        <br>
        Note that p2js.js in particular implements many of the standard Phix builtins, and others are
        auto-translated, so if you spot something rather familiar, perhaps you should treat it as such.
        <br>
        <br>
        This covers both the use of JavaScript in p2js.js and pGUI.js, as well as providing some explanation 
        for the sort of code that pwa/p2js.exw spits out.
        <br>
        <br>
        Transpilation is largely a mechanical process of mapping between language syntax and compatible 
        features, for example <br>
        "procedure p() end procedure" &lt;==&gt; "function p() { }" with no return statement.
        <br>
        <br>
        Javascript is a typeless language, however I would prefer to keep the output legible so have opted 
        for eg "integer i" &lt;==&gt; "let /*integer*/ i;".
        <br>
        <br>
        Phix sequences are actually a much closer match to JavaScript Arrays than Objects, so we use []
        syntax rather than {}. <br>
        Phix sequences are 1-based, whereas Javascript Arrays are (loosely) 0-based, so we use eg 
        `{1,2,3}` &lt;==&gt; `["sequence",1,2,3]`.
        <br>
        <br>
        JavaScript strings are immutable (and 0-based), and JavaScript has no concept of a character, so
        we have eg `s[i]` &lt;==&gt; `s.charCodeAt(i-1)` and such monstrosities as "s[i] = 'A'" &lt;==&gt; 
        `s.splice(i-1,i,String.fromCharCode(65))`. Note that for this to work you may need to be more
        explicit with the string type, eg "initial = table[i][NAME][1]" won&rsquo;t work and instead you
        will need to code "string name = table[i][NAME]; initial = name[1]". Obviously you can store and
        retrieve strings deep inside other structures, but any manipulation/subscripting/slicing, and even
        perhaps concatenating, should be performed on a plain string variable, like that 'name' above.
        <br>
        <br>
        Phix is a reference counted language with copy-on-write semantics, which poses some problems as
        JavaScript is absolutely anything but that. So sequence a = b may have to perform a deep copy, but 
        since that can be expensive it should scan the AST (abstract syntax tree) to see if it can be avoided
        - obviously if it is not being modified, but also if it is reassigned when the function returns. 
        I toyed with a = ...b before realising the spread operator only does a shallow copy, so now it uses 
        a = $deepcopy(b);
        <br>
        <br>
        Obviously, p2js.js and pGUI.js should only expose identifiers that would normally be considered
        builtin and available to the desktop environment, not any of its internal bits. To be honest, I had
        read <i>so much</i> hand-wringing and whining and moaning about this, I thought it was going to be
        difficult, turns out it is trivial and you simply don&rsquo;t need any of that anonymous iife drivel
        (don&rsquo;t ask). There are however a <i>tiny</i> number that would be useful, and thankfully 
        JavaScript allows $ in identifier names, so any of $_apply, (and $PROC, $FUNC,) $_concat, $deepcopy, 
        $docbody, $paranormalise, $prefer_backtick, $seed, $store_attr, or $tce 
        [told you it was a fairly short list] are just things we don&rsquo;t want to interfere with or be 
        accidentally accessible from transpiled user-code-land.
        <br>
        <br>
<!--
https://www.w3.org/wiki/JavaScript_best_practices erm, better: https://dev.opera.com/articles/javascript-best-practices/ (2009) Christian Heilmann

Ah ha: [DEV, get rid of some of them $...] -= done, see (eg) const createTVelem = IupTreeAddNodes("createTVelem"); in pGUI.js

function initValidation() {
    // irrelevant code here
    function validate(_block){
        console.log( "test", _block );
    }
    
    initValidation.validate = validate;
}
initValidation();
initValidation.validate( "hello" );
//test hello

-->
        <h3>arrays</h3>
        In the following, assume that a14 is the pure JavaScript Array [1,2,3,4], <br>
        whereas s14 is the JavaScript equivalent of the Phix sequence {1,2,3,4}, namely ["sequence",1,2,3,4].
        <br>
        <br>
        <style type="text/css">
          .flexbox { display: flex; }
        </style>
        <a name=from></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*Array*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr>Array.<b>from</b>(</nobr>
         </div>
         <div>
            <nobr><i>myvar</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory: create a real Array from something array-like, such as a NodeList, or maybe a string (in p2js.js, both 
            compare() and equal() do just that, when one argument is a string and the other is an Array, since you cannot subscript 
            strings [in the same way as Arrays] in JavaScript).<br>
         </div>
        </div>
        <br>

        <a name=isArray></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*bool*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr>Array.<b>isArray</b>(</nobr>
         </div>
         <div>
            <nobr><i>myvar</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory: returns false for numbers, strings, and JavaScript Objects. <br>
            Phix sequences are actually Arrays, however the standard sequence() [which uses this] is clearly better.<br>
            Obviously eg myvar.isArray(myvar) [arg rqd] only half-works/crashes on types with no isArray method/is 
            pretty much useless, so always use the "Array" form.
         </div>
        </div>
        <br>

        <a name=forEach></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>array</i>.<b>forEach</b>(</nobr>
         </div>
         <div>
            <nobr><i>fn</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Similar to <a href="apply.htm">papply</a>(). fn should be of the form function(ai[,idx]), <i>not</i> returning anything,
            possibly inlined/fat arrow - however giving it a sensible name makes the code <i>much</i> more self documenting, as in
            "function addSizer(id,idx) {...} rd.forEach(addSizer);" clearly beats "rd.forEach((id, idx) => { ...} );" in my book.
         </div>
        </div>
        <br>

        <a name=indexOf></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*integer*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>array</i>.<b>indexOf</b>(</nobr>
         </div>
         <div>
            <nobr><i>x</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory. Note that s14.indexOf(1) is 1, whereas a14.indexOf(1) is 0, of course. <br>
            While s14 has that special marker of s14[0]==="sequence", there is nothing similar on strings, so 
            the odd +1 is required. Also note that JavaScript does not have a character type, so indexOf() 
            behaves more like match() on Strings, but more like find() on Arrays.<br>
            Returns -1 if not found.
         </div>
        </div>
        <br>

        <a name=length></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*integer*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>array</i>.<b>length</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory. Note that s14.length is 5, whereas length(s14) is 4, and length(a14) <i>should</i> trigger an error.<br>
            In JavaScript it is permitted to set .length directly. See also <a href="#stringlength">string.length below</a>.
         </div>
        </div>
        <br>

        <a name=push></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*integer*/ len =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>array</i>.<b>push</b>(</nobr>
         </div>
         <div>
            <nobr><i>item</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Equivalent to array = append(array,item), and in fact used to implement that.<br>
            pGUI.js only ever pushes a single item, and does not use the returned new length.
         </div>
        </div>
        <br>

        <a name=pop></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*object*/ item =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>array</i>.<b>pop</b>(</nobr>
         </div>
         <div>
            <nobr>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Inverse of array.push.
         </div>
        </div>
        <br>

        <a name=slice></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*Array*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>array</i>.<b>slice</b>(</nobr>
         </div>
         <div>
            <nobr><i>start</i>,</nobr> <nobr><i>end</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            NB shallow copy, 0-based. a14.slice(2) is [3,4], and a14.slice(1,2) is [2].<br>
            Note that Phix deliberately <a href="eucompat.htm#slice">does not have a slice builtin</a>. 
            See also <a href="#stringslice">string.slice below</a>.
         </div>
        </div>
        <br>

        <a name=splice></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*Array*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>array</i>.<b>splice</b>(</nobr>
         </div>
         <div>
            <nobr><i>index</i></nobr> <nobr>[,<i>deleteCount</i></nobr> <nobr>[,<i>item...</i>]]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            a14.splice(1,1) sets a14 to [1,3,4].<br>
            r = a14.splice(1,1,'ache','bug') sets r to [2] and a14 to [1,'ache','bug',3,4].
         </div>
        </div>
        <br>

        <h3>strings</h3>
<!--
toLowerCase
// Quickref:
// =========
//  "ABC".charAt(0) is "A" (a length-one string)
//      equiv to "ABC".slice(0, 1);
//  "ABC".charCodeAt(0) is 65
//
-->
        <a name=fromCharCode></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr>String.<b>fromCharCode</b>(</nobr>
         </div>
         <div>
            <nobr><i>arg1</i>[,</nobr> <nobr>...<i>argN</i>]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory. Needed because JavaScript has no character type, and coerces eg "A" + 65 to "A65" rather than "AA".<br>
            String.fromCharCode(65) is "A", String.fromCharCode(65,66,67) is "ABC".
         </div>
        </div>
        <br>

        <a name=stringlength></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*integer*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>string</i>.<b>length</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory. Note that unlike <i>array</i>.length, both <i>string</i>.length and length(<i>string</i>) yield 
            the same result.
         </div>
        </div>
        <br>

        <a name=stringslice></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>string</i>.<b>slice</b>(</nobr>
         </div>
         <div>
            <nobr><i>start</i>,</nobr> <nobr><i>end</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Extracts part of a string, eg "1234".slice(1,3) is "23". <br>
            Note that JavaScript indexes are 0-based, so what that is actually saying is <br>
            from s[1](==='2') up to but not including s[3](==='4'). <br>
            In other words the start is as expected off-by-one, but the end works just <br>
            like Phix&rsquo;s 1-based indexes would (inclusive). <br>
            So we have str[i..j] &lt;==&gt; s.slice(i-1,j); though do bear in mind some of the <br>
            direct uses in p2js.js may bear little resemblence to Phix &lt;==&gt; js transpilation.<br>
            If the second parameter is omitted, it yields all of the rest of the string, <br>   
            same as supplying <i>string</i>.length (===length(<i>string</i>)).
         </div>
        </div>
        <br>

        <h3>elements</h3>

        <a name=addEventListener></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>elem</i>.<b>addEventListener</b>(</nobr>
         </div>
         <div>
<!--
            <nobr>/*string*/ <i>event_type</i>,</nobr> <nobr>/*function*/ <i>fn</i>,</nobr> <nobr>/*bool*/ <i>use_capture=false</i>);</nobr>
-->
            <nobr>/*string*/&nbsp;<i>event_type</i>,</nobr> <br>
            <nobr>/*function*/&nbsp;<i>fn</i>,</nobr> <br>
            <nobr>/*bool*/&nbsp;<i>use_capture=false</i>);</nobr>
<!--
            <nobr><i>event_type</i>,</nobr> <nobr><i>fn</i>,</nobr> <nobr><i>use_capture=false</i>);</nobr>
-->
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Reasonably self explanatory.<br>
            event_type can be 'click', 'contextmenu', 'dblclick', 'DOMContentLoaded', 'keydown', 'keypress', 'keyup', 
                                'mousedown', 'mouseenter', 'mouseleave', 'mousemove', 'mouseup', 'resize', etc.<br>
            fn: a listener function which optionally accepts a single event parameter (sometimes inlined/fat arrow).<br>
            use_capture: true (parent before child) or false (child before parent, aka bubbling) [I think]<br>
            Assigning .onclick, .oncontextmenu, .onresize, .onkeydown, etc is equivalent (sans use_capture setting).
         </div>
        </div>
        <br>

        <a name=appendChild></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*elem*/ <i>child</i> =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>appendChild</b>(</nobr>
         </div>
         <div>
            <nobr>/*elem*/ <i>child</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory
         </div>
        </div>
        <br>

        <a name=classList></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*DOMTokenList*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>classList</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            A DOMTokenList is an Array-like collection of the class attributes of the element.
         </div>
        </div>
        <br>

        <a name=add></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>elem</i>.classList.<b>add</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ <i>token</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory
         </div>
        </div>
        <br>

        <a name=contains></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*bool*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.classList.<b>contains</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ <i>token</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory
         </div>
        </div>
        <br>

        <a name=remove></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>elem</i>.classList.<b>remove</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ <i>token</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory (quietly does nothing if token is not present)
         </div>
        </div>
        <br>

        <a name=toggle></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*bool*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.classList.<b>toggle</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ <i>token</i>,</nobr> <nobr>/*bool*/ bForce);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory, yields true if added, false if removed<br>
            The second parameter is not used in pGUI.js, it makes the call behave as add (true) or remove (false).
         </div>
        </div>
        <br>

        <a name=className></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>className</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory, the (space-separated) plain text version of classList.
         </div>
        </div>
        <br>

        <a name=createElement></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*elem*/ <i>res</i> =&nbsp;</nobr>
         </div>
         <div>
            <nobr>document.<b>createElement</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ <i>tag</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory. tag may be eg 'button', 'div', 'li', 'table', 'tbody', 'td', 'th', 'thead', 'tr', 'ul', etc.<br>
            pGUI.js does not use (or understand) the options argument.<br>
            createElementNS is similar but allows/requires a namespace to be specified, in pGUI.js that would (always) be "http://www.w3.org/2000/svg".
         </div>
        </div>
        <br>

        <a name=firstChild></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*elem*/ <i>res</i> =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>firstChild</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory.
         </div>
        </div>
        <br>

        <a name=getAttribute></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>getAttribute</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ <i>attributename</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory, as in say an elem of <code>&lt;div data="thing"&gt;</code>, elem.getAttribute('data') 
            yields "thing", or null (some older browsers may return "") if no such attribute exists.
         </div>
        </div>
        <br>

        <a name=getElementsByClassName></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*NodeList*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>getElementsByClassName</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ classname);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Similar to querySelectorAll, likewise a classname of "this that" would obtain the same results as querySelectorAll(".this, .that").
         </div>
        </div>
        <br>

        <a name=hasChildNodes></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*bool*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>hasChildNodes</b>(</nobr>
         </div>
         <div>
            <nobr>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory.
         </div>
        </div>
        <br>

        <a name=innerHTML></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>innerHTML</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Can be set or retrieved, otherwise pretty self explanatory, unlike innerText it is parsed when set.<br>
            It also retrieves everything, whereas innerText omits any hidden parts.
         </div>
        </div>
        <br>

        <a name=innerText></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>innerText</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Can be set or retrieved, otherwise pretty self explanatory, pGUI.js should only use this on plain (and visible) text rather than nested nodes.<br>
            Unlike elem.textContent, this returns something close to what the user sees, no styles(/aka applied), nothing hidden, line breaks honoured.
         </div>
        </div>
        <br>

        <a name=nextSibling></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>elem</i>.<b>nextSibling</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory.
         </div>
        </div>
        <br>

        <a name=parentNode></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>elem</i>.<b>parentNode</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory.
         </div>
        </div>
        <br>

        <a name=querySelector></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*elem*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>querySelector</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ query);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            returns the first child element that matches the CSS selector.
            query is a CSS selector such as <br>
            '.selected' (the first sub-element of that class), <br>
            'td' (the first &lt;ul&gt; sub-element).<br>
         </div>
        </div>
        <br>

        <a name=querySelectorAll></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*NodeList*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>querySelectorAll</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ query);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            query is a CSS selector such as <br>
            '.nestmenu, .menuitem' (all sub-element children that are of either class), <br>
            '.topmenu > span' (all span sub-elements with a parent of topmenu class), <br>
            'td' (all &lt;td&gt; sub-elements).<br>
            The returned NodeList can often be treated as an Array, but sometimes needs res = Array.from(res);
         </div>
        </div>
        <br>

        <a name=removeAttribute></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>elem</i>.<b>removeAttribute</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ <i>attributename</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory (quietly does nothing if attributename is not present)
         </div>
        </div>
        <br>

        <a name=removeChild></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>elem</i>.<b>removeChild</b>(</nobr>
         </div>
         <div>
            <nobr>/*elem*/ <i>node</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory (quietly does nothing if node is not present)
         </div>
        </div>
        <br>

        <a name=setAttribute></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>elem</i>.<b>setAttribute</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ <i>attributename</i>,</nobr> <nobr>/*string*/ <i>attributevalue</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory, can be used for custom attributes such as ('data-sorted', 'A'/'D') or even ('class','fill'). Another
            useful one is ('tabindex','0') which means "can recieve focus, in document order".
         </div>
        </div>
        <br>

        <a name=style></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*CSSStyleDeclaration*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>style</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Too many to list, but the fields pGUI.js uses are: top, left, width, height, bottom, right, maxWidth, textAlign,
            margin, marginTop, marginBottom, marginLeft, marginRight, background, cursor, position, display, and zIndex.
         </div>
        </div>
        <br>

        <a name=textContent></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>textContent</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Can be set or retrieved, otherwise pretty self explanatory.<br>
            Unlike elem.innerText, this returns a sort of html-stripped innerHTML, with hidden text, scraps of styles, and line breaks ignored.
         </div>
        </div>
        <br>

        <a name=title></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>elem</i>.<b>title</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            The "title" in this case means/is shown as a tooltip.
         </div>
        </div>
        <br>

        <h3>events</h3>

        <a name=currentTarget></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>event</i>.<b>currentTarget</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            The element to which the listener was attached, rather than the element actually clicked. See also event.target.<br>
            This is often the better choice, for instance if you want the containing li clicked on, rather than a specifc scrap 
            of bold or italic text within that li.
         </div>
        </div>
        <br>

        <a name=preventDefault></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>event</i>.<b>preventDefault</b>();</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory
         </div>
        </div>
        <br>

        <a name=stopPropagation></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>event</i>.<b>stopPropagation</b>();</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory
         </div>
        </div>
        <br>

        <a name=target></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>event</i>.<b>target</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            The element that was clicked. See also event.currentTarget.<br>
            event.srcElement was the name used for this in IE6-8 and should be replaced without hesitation.
         </div>
        </div>
        <br>

        <a name=typeof></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><b>typeof</b>(<i>obj</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Technically a prefix operator, it is used as a function in p2js/pGUI.js. Valid results are "string",
            "number", "undefined", "boolean", and "object". Note the latter is returned for arrays...
         </div>
        </div>
        <br>

        <a name=this></a>
        <div style="clear:both;height:1px;"> </div>
        <b>this</b> is avoided at all costs in p2js/pGUI.js. Besides, rather than say dlg.show(), we use <a href="IupShow.htm">IupShow</a>(dlg).
        <br>
        <h3>operators</h3>
        <br>
        <div style="clear:both;height:1px;"> </div>
        <table>
         <tr>
            <th>Operator</th>
            <th>Meaning</th>
         </tr>
         <tr>
            <td>
             !
            </td>
            <td>
              Logical not, equivalent to "not" in Phix.
            </td>
         </tr>
         <tr>
            <td>
             +
            </td>
            <td>
              In JavaScript, the plus operator not only performs mathematical addition, but also string concatenation. <br>
              The binary operator casts both operands to strings unless both operands are numbers. In contrast, the - operator
              always casts both operands to numbers, as do both the unary forms of + and -.<br>
              Use with caution (that is, in p2js.js and pGUI.js).
            </td>
         </tr>
         <tr>
            <td>
             ++
            </td>
            <td>
              Avoid (ditto --), in particular because of the "blind spot" that is the difference between ++i and i++, ie when asked like that, 
              easily stated, but when (casually) reading code, those sort of errors can be almost impossible to spot.
            </td>
         </tr>
         <tr>
            <td>
             ===
            </td>
            <td>
              In JavaScript, the = operator is always assignment, so eg if (a=b) {} is almost always just plain wrong, and <i>always</i> bad style.<br>
              Always use === in preference to == since the latter performs type coercion, eg "0"==0 is true, whereas "0"===0 is false.
            </td>
         </tr>
         <tr>
            <td>
             ...
            </td>
            <td>
              The spread operator. Used for eg fn(...args) much like call_func(fn,args). It might have been good for cloning arrays,
              but it only performs a shallow copy, see notes above.
            </td>
         </tr>
        </table>
        <br>
        &nbsp;
        <br>
        <table>
         <tr>
            <th>Globals</th>
            <th>Meaning</th>
         </tr>
         <tr>
            <td>
             $deepcopy()
            </td>
            <td>
              Needed because JavaScript has the polar opposite of the copy-on-write semantics of Phix.
            </td>
         </tr>
         <tr>
            <td>
             <nobr>$paranormalise()</nobr>
            </td>
            <td>
              A hand-translated version of the (private) <a href="paranormal.htm">paranormalise</a>() routine from pGUI.e.
            </td>
         </tr>
         <tr>
            <td>
             $store_attr[]
            </td>
            <td>
              element-specific attribute handlers/setters, eg $store_attr["dialog"]["TITLE"] is set_dialog, a (private) routine
              (defined in pGUI.js) for setting the dialog title.
            </td>
         </tr>
        </table>
        <br>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
