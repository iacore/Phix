<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">JavaScript in pwa/p2js</h1>
      <div id="mainSection">
        Obviously more complete references can be found easily enough - the whole point of this is to hook
        into the Edita/Edix F1 Help system, and that way speed up the development of pwa/p2js itself.
        Again, this is of no particular help to anyone actually using pwa/p2js.
        <br>
        <br>
        There may be some subtle implications of using these routines from an imperative mindset (as opposed to 
        say a prototype or object orientated mindset) that may be clearer here than elsewhere, plus there may be 
        for instance optional parameters and the like (of the javascript builtin functions listed below) that 
        pwa/p2js does not use and/or specifically advises against. Lastly, by only documenting those fields and 
        methods actually used, they should be a tad easier to locate, and hopefully impose significantly less 
        cognitive overload.
        <br>
        <br>
        Apart from an initial trawl, entries are likely to be added on an ad-hoc basis, as I realise it is
        now the <i>Nth</i> time I&rsquo;ve had to go to 
        <a href="javascript:ExternalLink('ext606');" title='https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model'
           id="ext606" style="color:#9B5565" >MDN</a> (the definititive fount of all knowledge) or 
        <a href="javascript:ExternalLink('ext707');" title='https://www.w3schools.com/js/default.asp'
           id="ext707" style="color:#9B5565" >w3schools</a> (what it lacks in detail it makes up for in 
        navigability). Things I use very rarely or are easily cribbed are unlikely to get a mention in
        here, for instance I&rsquo;m not about to try and document JavaScript regular expressions.
        <br>
        <br>
        Note that p2js.js in particular implements many of the standard Phix builtins, and others are
        auto-translated, so if you spot something rather familiar, perhaps you should treat it as such.
        <br>
        <br>
        This covers both the use of JavaScript in p2js.js and pGUI.js, as well as providing some explanation 
        for the sort of code that pwa/p2js.exw spits out. Several pages such as <a href="atom.htm">atom</a>
        and <a href="length.htm">length</a> have JavaScript-links to this page in their "See Also"/p2js sections, 
        rather than have that weird little popup when Phix.chm opens whereby despite their different cases both 
        number and Number lookups (from eg xpEditer) would ask you to pick between atom and javascript, and
        then mess up the focus, often with the newly opened chm window hidden/relegated to the background.
        Obviously Phix gets preference over JavaScript in respect of which it opens first/by default.
        <br>
        <br>
        Transpilation is largely a mechanical process of <a href="mappings.htm">mapping</a> between language 
        syntax and compatible features, for example <br>
        "procedure p() end procedure" &lt;==&gt; "function p() { }" with no return statement.
        <br>
        <br>
        Javascript is a <i><a href="glossary.htm#typeless">typeless</a></i> language, however to keep the output 
        legible/reversible I have opted for eg "integer i" &lt;==&gt; "let /*integer*/ i;".
        <br>
        <br>
        Phix sequences are actually a much closer match to JavaScript Arrays than Objects, so we use []
        syntax rather than {}. <br>
        Phix sequences are 1-based, whereas Javascript Arrays are (loosely) 0-based, so we use eg 
        `{1,2,3}` &lt;==&gt; `["sequence",1,2,3]`.
<!--
//      <br>
//      <br>
//      Out of date, see $repe(), $repss(), $subse(), and $subss(), below.<br>
//      JavaScript strings are immutable (and 0-based), and JavaScript has no concept of a character, so
//      we have eg `s[i]` &lt;==&gt; `s.codePointAt(i-1)` and such monstrosities as "s[i] = 'A'" &lt;==&gt; 
//      `s.splice(i-1,i,String.fromCodePoint(0X41))`. Note that for this to work you may need to be more
//      explicit with the string type, eg "initial = table[i][NAME][1]" won&rsquo;t work and instead you
//      will need to code "string name = table[i][NAME]; initial = name[1]". Obviously you can store and
//      retrieve strings deep inside other structures, but any manipulation, subscripting, slicing, and even
//      perhaps concatenating, should be performed on a plain string variable, like that 'name' above.
//      <br>
//      <br>
//      Phix is a reference counted language with copy-on-write semantics, which poses some problems as
//      JavaScript is absolutely anything but that. So sequence a = b may have to perform a deep copy, but 
//      since that can be expensive it should scan the AST (abstract syntax tree) to see if it can be avoided
//      - obviously if it is not being modified, but also if it is reassigned when the function returns. 
//      I toyed with a = ...b before realising the spread operator only does a shallow copy, so now it uses 
//      a = deep_copy(b);
-->
        <br>
        <br>
        Obviously, p2js.js and pGUI.js should only expose identifiers that would normally be considered
        builtin and available to the desktop environment, not any of its internal bits. To be honest, I had
        read <i>so much</i> hand-wringing and whining and moaning about this, I thought it was going to be
        difficult, turns out it is trivial and you simply don&rsquo;t need any of that anonymous iife drivel
        (don&rsquo;t ask). There are however a <i>tiny</i> number that would be useful, and thankfully 
        JavaScript allows $ in identifier names, so any of $conCat, $docBody, $paranormalise, $prefer_backtick, 
        $seed, $storeAttr, $topZindex, or $typeCheckError [told you it was a fairly short list] are just things 
        we don&rsquo;t want to interfere with or be accidentally accessible from transpiled user-code-land.
<!-- needs more thought, would I ever actually use it anyway??...
        <br>
        <br>
        Due to an obsolete quirk of IE being propagated into all modern browsers (for compatibility, but 
        quite wrongly in almost everyone&rsquo;s opinions), a DOM element with an id such as 
        <code>&lt;div id="myDiv"&gt;&lt;/div&gt;</code> sets the variable myDiv in the global namespace, 
        allowing a bare <code>myDiv</code> to act the same as <code>document.getElementById('myDiv')</code>.
        While some would say this is a bad idea, it leads to shorter code, pwa/p2js.exw should really check 
        anyway that no such global clashes are occurring, and the true culprit is clearly in <i>any</i> use 
        of id, besides, clashing ids can and will go just as wrong with getElementById() anyway.
        Since doing so would not necessarily help, pwa/p2js does <i>not</i> necessarily shy away from the 
        shorthand version. Should it ever bite, pwa/p2js probably needs more checking, not more concealing,
        plus phix generally allows &gt;1 of anything simultaneously on-screen, which kinda rules out most
        uses of id anyway.
-->
        <br>
        <br>
<!--
https://www.w3.org/wiki/JavaScript_best_practices erm, better: https://dev.opera.com/articles/javascript-best-practices/ (2009) Christian Heilmann

Ah ha: [DEV, get rid of some of them $...] -= done, see (eg) const createTVelem = IupTreeAddNodes("createTVelem"); in pGUI.js

function initValidation() {
    // irrelevant code here
    function validate(_block){
        console.log( "test", _block );
    }
    
    initValidation.validate = validate;
}
initValidation();
initValidation.validate( "hello" );
//test hello

-->
        <h3>arrays</h3>
        In the following, assume that a14 is the pure JavaScript Array [1,2,3,4], <br>
        whereas s14 is the JavaScript equivalent of the Phix sequence {1,2,3,4}, namely ["sequence",1,2,3,4].
        <br>
        <br>
        <style type="text/css">
          .flexbox { display: flex; }
        </style>
        <a name=from></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*Array*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr>Array.<b>from</b>(</nobr>
         </div>
         <div>
            <nobr><i>myvar</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory: create a real Array from something array-like, such as a NodeList. Note that Array.from(string)
            produces lots of diddy-strings whereas $charArray (see below) produces the array of codePointAt I was expecting, 
            and eg both compare() and equal() use that internally, when one argument is a string and the other is an Array.<br>
            There is also a <a href="forin.htm">from</a> pseudo-keyword on a for in statement, were you looking for that.
         </div>
        </div>
        <br>

        <a name=isArray></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*bool*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr>Array.<b>isArray</b>(</nobr>
         </div>
         <div>
            <nobr><i>myvar</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory: returns <a href="logicops.htm#tf">false</a> for numbers, strings, and JavaScript Objects. <br>
            Phix sequences are actually Arrays, however the standard sequence() [which uses this] is clearly better.<br>
            Obviously eg myvar.isArray(myvar) [arg rqd] only half-works/crashes on types with no isArray method/is 
            pretty much useless, so always use the "Array" form.
         </div>
        </div>
        <br>

        <a name=forEach></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>array</i>.<b>forEach</b>(</nobr>
         </div>
         <div>
            <nobr><i>fn</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Similar to <a href="apply.htm">papply</a>(). fn should be of the form function(ai[,idx]), <i>not</i> returning anything,
            possibly inlined/fat arrow - however giving it a sensible name makes the code <i>much</i> more self documenting, as in
            "function addSizer(id,idx) {...} rd.forEach(addSizer);" clearly beats "rd.forEach((id, idx) => { ...} );" in my book.
         </div>
        </div>
        <br>

        <a name=indexOf></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*integer*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>array</i>.<b>indexOf</b>(</nobr>
         </div>
         <div>
            <nobr><i>x</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory. Note that s14.indexOf(1) is 1, whereas a14.indexOf(1) is 0, of course. <br>
            While s14 has that special marker of s14[0]==="sequence", there is nothing similar on strings, so 
            the odd +1 is required. Also note that JavaScript does not have a character type, so indexOf() 
            behaves more like match() on Strings, but more like find() on Arrays.
            <i>array</i>.<b>lastIndexOf</b>() should require no further explanation.<br>
            Returns -1 if not found.
         </div>
        </div>
        <br>

        <a name=length></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*integer*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>array</i>.<b>length</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Not quite what you might expect. Technically it returns the largest numeric index plus 1, and p2js puts "sequence" in <i>array</i>[0] 
            before using 1-based indices to match Phix. Even if p2js omitted s[0] (and used 1-based indices) it would still be "out-by-one". 
            Note that s14.length is 5, whereas length(s14) is 4, a14.length is 4, and length(a14) <i>should</i> trigger an error.<br>
            In JavaScript it is permitted to set .length directly, and in fact just set <i>empty_array</i>[100] without hitch, which
            achieves much the same effect, ie/eg <code>a[100]:=x</code> automatically sets the length property to max(a.length,100+1),
            as in that is what all browsers and other JavaScript implementations do, as opposed to something my or your code does. 
            See also <a href="#stringlength">string.length below</a>.
         </div>
        </div>
        <br>

        <a name=push></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*integer*/ len =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>array</i>.<b>push</b>(</nobr>
         </div>
         <div>
            <nobr><i>item</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Equivalent to array = append(array,item), and in fact used to implement that.<br>
            pGUI.js only ever pushes a single item, and does not use the returned new length.
         </div>
        </div>
        <br>

        <a name=pop></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*object*/ item =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>array</i>.<b>pop</b>(</nobr>
         </div>
         <div>
            <nobr>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Inverse of array.push.
         </div>
        </div>
        <br>

        <a name=slice></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*Array*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>array</i>.<b>slice</b>(</nobr>
         </div>
         <div>
            <nobr><i>start</i>,</nobr> <nobr><i>end</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            NB shallow copy, 0-based. a14.slice(2) is [3,4], and a14.slice(1,2) is [2].<br>
            Note that Phix deliberately <a href="eucompat.htm#slice">does not have a slice builtin</a>. 
            See also <a href="#stringslice">string.slice below</a>.
         </div>
        </div>
        <br>

        <a name=splice></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*Array*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>array</i>.<b>splice</b>(</nobr>
         </div>
         <div>
            <nobr><i>index</i></nobr> <nobr>[,<i>deleteCount</i></nobr> <nobr>[,<i>item...</i>]]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            a14.splice(1,1) sets a14 to [1,3,4].<br>
            r = a14.splice(1,1,'ache','bug') sets r to [2] and a14 to [1,'ache','bug',3,4].
         </div>
        </div>
        <br>

        <h3>strings</h3>
<!--
toLowerCase
// Quickref:
// =========
//  "ABC".charAt(0) is "A" (a length-one string)
//      equiv to "ABC".slice(0, 1);
//  "ABC".codePointAt(0) is 65
//
-->
        <a name=codePointAt></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*integer*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>string</i>.<b>codePointAt</b>(</nobr>
         </div>
         <div>
            <nobr><i>idx</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Obtain the unicode code point starting at idx. Note that idx is 0-based and UTF-16 surrogate-pair-based, MDN recommends using ... 
            (the spread operator) or for...of and codePointAt(0), rather than a traditional index. While p2js.js and xpGUI.js use this to
            convert say a colour of "#80FF00" which should be fine, there may be some s[i] -> $subse() and the like which require manually
            calling utf8_to_utf32() or similar to get some things to work (and there is certainly one such case already on rosettacode).
         </div>
        </div>
        <br>

        <a name=fromCharCode></a>
        <a name=fromCodePoint></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr>String.<b>fromCodePoint</b>(</nobr>
         </div>
         <div>
            <nobr><i>arg1</i>[,</nobr> <nobr>...<i>argN</i>]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory. Needed because JavaScript has no character type, and coerces eg "A" + 65 to "A65" rather than "AA".<br>
            String.fromCodePoint(65) is "A", String.fromCodePoint(65,66,67) is "ABC". Always use String.fromCodePoint() as opposed
            to s.fromCodePoint() (because it is a <i>static method</i> of String, whatever that really means).
<!--
             Note that the numbers are UTF-16 code units, rather than UTF-32, should that ever matter, and
            perhaps String.fromCodePoint() would be easier and better. [YEP, 14/9/21]
-->
         </div>
        </div>
        <br>

        <a name=stringlength></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*integer*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>string</i>.<b>length</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory. Note that unlike <i>array</i>.length, both <i>string</i>.length and length(<i>string</i>) yield 
            the same result.
         </div>
        </div>
        <br>

        <a name=parseFloat></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*atom*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><b>parseFloat</b>(</nobr>
         </div>
         <div>
            <nobr>/* string*/ <i>s</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Coerces s to a string, strips leading whitespace, and converts the first number to a floating point [or Nan].<br>
            Note that anything after the first number is simply ignored, and it also parses ["-"]"Infinity" as [-]Infinity.<br>
            /*atom*/ res = <b>Number</b>(v) is probably better, since it coerces the parameter to a number primitive, including BigInts
            (provided they fit), fails when there is trailing garbage, converts booleans to 0 or 1, and handles leading "0x", "0b", and 
            "0o", which parseFloat does not. <br>
            Note that "new Number()" (which MDN warns you should rarely use) is one of those completely whacko <a href="OOP.htm">OOP</a> jobbies 
            that does my head in, eg new Number(42) !== 42, ie new Number(42) === 42 yields false but the less strict new Number(42) == 42 yields true.
         </div>
        </div>
        <br>

        <a name=parseInt></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*integer*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><b>parseInt</b>(</nobr>
         </div>
         <div>
            <nobr>/* string*/ <i>s</i>[, radix]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Coerces s to a string, strips leading whitespace, and converts the first number to an integer [or Nan].<br>
            The radix defaults to 10 unless s begins [+/-]0x (or X) in which case it becomes 16. No other bases are supported, and neither is
            scientific notation: like parseFloat it ignores (what it thinks is) trailing garbage and "1e3"/"1.3"/"1_3"/"1,3" yield 1.
         </div>
        </div>
        <br>

        <a name=stringslice></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>string</i>.<b>slice</b>(</nobr>
         </div>
         <div>
            <nobr><i>start</i>,</nobr> <nobr><i>end</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Extracts part of a string, eg "1234".slice(1,3) is "23". <br>
            Note that JavaScript indexes are 0-based, so what that is actually saying is <br>
            from s[1](==='2') up to but not including s[3](==='4'). <br>
            In other words the start is as expected off-by-one, but the end works just <br>
            like Phix&rsquo;s 1-based indexes would (inclusive). <br>
            So we have str[i..j] &lt;==&gt; s.slice(i-1,j); though do bear in mind some of the <br>
            direct uses in p2js.js may bear little resemblence to Phix &lt;==&gt; js transpilation.<br>
            If the second parameter is omitted, it yields all of the rest of the string, <br>   
            same as supplying <i>string</i>.length (===length(<i>string</i>)).<br>
            Negative subscripts are also supported, for example if s="the lazy dog." then
            s.slice(-4) is "dog." and s.slice(-9, -5) is "lazy".<br>
            <i>string</i>.<b>substring</b>(start,end) is similar, but treats negative subscripts as
            0 and swaps start&gt;end.
         </div>
        </div>
        <br>

        <a name=toUpperCase></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>string</i>.<b>toUpperCase</b>();</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory, ditto toLowerCase().<br>
         </div>
        </div>
        <br>


        <h3>elements</h3>

        <a name=createElement></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*elem*/ <i>res</i> =&nbsp;</nobr>
         </div>
         <div>
            <nobr>document.<b>createElement</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ <i>tag</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory. tag may be "a", "button", "canvas", "div", "fieldset", "input", "label", "legend", "li", "nav", "option", "progress", 
            "script", "select", "table", "tbody", "td", "th", "thead", "tr", "textarea", "ul", etc.<br>
            The following values are not (currently) used by xpGUI.js: "b", "br", "i", "hr", "output", "p", etc.<br>
            xpGUI.js does not use (or understand) the options argument - ignore that if you don&rsquo;t know what it means.<br>
            xpGUI.js contains a trivial $ocument_createElement() shim that, for some but not all uses, assigns a .ID which is used within printf() to
            mimic the integer id of xpGUI.e strictly for diagnostic purposes, but is otherwise completely unused.<br>
            <b>createElementNS</b>(namespace, tag) is similar but allows/requires a namespace to be specified, in xpGUI.js that would (always) be 
            "http://www.w3.org/2000/svg", and at least in xpGUI.js only ever uses the tags "svg" and "path".<br>
            <b>createTextNode</b>(<i>text</i>) is similar but will html-escape the text.<br>
         </div>
        </div>
        <br>

        <a name=activeElement></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*elem*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr>document.<b>activeElement</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            (read-only) Implements <a href="gSetFocus.htm">gGetFocus</a>().
         </div>
        </div>
        <br>

        <a name=addEventListener></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>elem</i>.<b>addEventListener</b>(</nobr>
         </div>
         <div>
<!--
            <nobr>/*string*/ <i>event_type</i>,</nobr> <nobr>/*function*/ <i>fn</i>,</nobr> <nobr>/*bool*/ <i>use_capture=false</i>);</nobr>
-->
            <nobr>/*string*/&nbsp;<i>event_type</i>,</nobr> <br>
            <nobr>/*function*/&nbsp;<i>fn</i>,</nobr> <br>
            <nobr>/*bool*/&nbsp;<i>use_capture=<a href="logicops.htm#tf">false</a></i>);</nobr>
<!--
            <nobr><i>event_type</i>,</nobr> <nobr><i>fn</i>,</nobr> <nobr><i>use_capture=false</i>);</nobr>
-->
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Reasonably self explanatory.<br>
            event_type can be 'click', 'contextmenu', 'dblclick', 'DOMContentLoaded', 'keydown', 'keypress', 'keyup', 
                                'mousedown', 'mouseenter', 'mouseleave', 'mousemove', 'mouseup', 'resize', etc.<br>
            fn: a listener function which optionally accepts a single event parameter (sometimes inlined/fat arrow).<br>
            use_capture: <a href="logicops.htm#tf">true</a> (parent before child) or <a href="logicops.htm#tf">false</a> 
                        (child before parent, aka bubbling) [I think]<br>
            Assigning .onclick, .oncontextmenu, .ondblclick, .ondragstart, .onkeydown, .onkeyup, 
            .onmousedown, .onmousemove, .onmouseup, .onresize, .onselectstart, etc is equivalent (sans use_capture setting).
         </div>
        </div>
        <br>

        <a name=appendChild></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*elem*/ <i>child</i> =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>appendChild</b>(</nobr>
         </div>
         <div>
            <nobr>/*elem*/ <i>child</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory
         </div>
        </div>
        <br>

        <a name=childNodes></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*NodeList*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>childNodes</b>(</nobr>
         </div>
         <div>
            <nobr>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Probably better to use children instead, since this contains elements, text(/whitespace), and comments.<br>
            That said, xpGUI.js should not be creating text and comment nodes in the DOM it is explicitly creating.<br>
            /*bool*/ res = <i>elem</i>.<b>hasChildNodes</b>(); would return true should there be any/only such guff.
         </div>
        </div>
        <br>

        <a name=children></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*HTMLCollection*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>children</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Actual elements-only, otherwise self explanatory. <i>elem</i>.<b>childElementCount</b>; returns the (ditto) length.
         </div>
        </div>
        <br>

        <a name=classList></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*DOMTokenList*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>classList</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            A DOMTokenList is an Array-like collection of the class attributes of the element.
         </div>
        </div>
        <br>

        <a name=classList_add></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>elem</i>.<b>classList</b>.<b>add</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ <i>token</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory
         </div>
        </div>
        <br>

        <a name=classList_contains></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*bool*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>classList</b>.<b>contains</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ <i>token</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory
         </div>
        </div>
        <br>

        <a name=classList_remove></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>elem</i>.<b>classList</b>.<b>remove</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ <i>token</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory (quietly does nothing if token is not present)
         </div>
        </div>
        <br>

        <a name=classList_toggle></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*bool*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>classList</b>.<b>toggle</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ <i>token</i>,</nobr> <nobr>/*bool*/ bForce);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory, yields <a href="logicops.htm#tf">true</a> if added, <a href="logicops.htm#tf">false</a> if removed<br>
            The second parameter is not used in pGUI.js, it makes the call behave as add (true) or remove (false).
         </div>
        </div>
        <br>

        <a name=className></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>className</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory, the (space-separated) plain text version of classList.
         </div>
        </div>
        <br>

        <a name=clientXXX></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>clientHeight</b>;</nobr><br>
<!--
            <nobr><i>elem</i>.<b>offsetLeft</b>;</nobr><br>
            <nobr><i>elem</i>.<b>offsetTop</b>;</nobr><br>
-->
            <nobr><i>elem</i>.<b>clientWidth</b>;</nobr><br>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            (read-only) eg "100px". padding+content (w/o border/margin).<br>
         </div>
        </div>
        <br>

        <a name=disabled></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*bool*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>disabled</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory, can also be set. Implements <a href="gSetAttribute.htm#ACTIVE">ACTIVE</a>, but may not perfectly match desktop/Phix.
         </div>
        </div>
        <br>

        <a name=firstElementChild></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*elem*/ <i>res</i> =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>firstElementChild</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory. <i>elem</i>.<b>firstChild</b> is similar, but does not skip text and comment nodes.<br>
            Likewise <i>elem</i>.<b>lastElementChild</b> and <i>elem</i>.<b>lastChild</b>
         </div>
        </div>
        <br>

        <a name=getAttribute></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>getAttribute</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ <i>attributename</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory, as in say an elem of <code>&lt;div data="thing"&gt;</code>, elem.getAttribute('data') 
            yields "thing", or null (some older browsers may return "") if no such attribute exists.
         </div>
        </div>
        <br>

        <a name=getComputedStyle></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*object*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><b>getComputedStyle</b>(</nobr>
         </div>
         <div>
            <nobr><i>elem</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Erm, might be best to avoid using this if at all possible...
         </div>
        </div>
        <br>

        <a name=getElementsByClassName></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*NodeList*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>getElementsByClassName</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ classname);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Similar to querySelectorAll, likewise a classname of "this that" would obtain the same results as querySelectorAll(".this, .that").
         </div>
        </div>
        <br>

        <a name=innerHTML></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>innerHTML</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Can be set or retrieved, otherwise pretty self explanatory, unlike innerText it is parsed when set.<br>
            It also retrieves everything, whereas innerText omits any hidden parts.
         </div>
        </div>
        <br>

        <a name=innerText></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>innerText</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Can be set or retrieved, otherwise pretty self explanatory, pGUI.js should only use this on plain (and visible) text rather than nested nodes.<br>
            Unlike elem.textContent, this returns something close to what the user sees, no styles(/aka applied), nothing hidden, line breaks honoured.
         </div>
        </div>
        <br>

        <a name=isConnected></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*bool*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>isConnected</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Pretty self explanatory, true if part of the document, false if not yet added.<br>
         </div>
        </div>
        <br>

        <a name=nextElementSibling></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*elem*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>nextElementSibling</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory. <i>elem</i>.<b>nextSibling</b> is similar, but does not skip text and comment nodes.<br>
            Likewise <i>elem</i>.<b>previousElementSibling</b> and <i>elem</i>.<b>previousSibling</b>.
         </div>
        </div>
        <br>

        <a name=offsetXXX></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>offsetHeight</b>;</nobr><br>
            <nobr><i>elem</i>.<b>offsetLeft</b>;</nobr><br>
            <nobr><i>elem</i>.<b>offsetTop</b>;</nobr><br>
            <nobr><i>elem</i>.<b>offsetWidth</b>;</nobr><br>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            (read-only) eg "100px". border+padding+content (w/o margin).<br>
         </div>
        </div>
        <br>

        <a name=parentNode></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*elem*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>parentNode</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory.
         </div>
        </div>
        <br>

        <a name=querySelector></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*elem*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>querySelector</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ query);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            returns the first child element that matches the CSS selector.
            query is a CSS selector such as <br>
            '.selected' (the first sub-element of that class), or 
            'ul' (the first &lt;ul&gt; sub-element).<br>
         </div>
        </div>
        <br>

        <a name=querySelectorAll></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*NodeList*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>querySelectorAll</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ query);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            query is a CSS selector such as <br>
            '.nestmenu, .menuitem' (all sub-element children that are of either class), <br>
            '.topmenu > span' (all span sub-elements with a parent of topmenu class), <br>
            'td' (all &lt;td&gt; sub-elements).<br>
            The result can often be treated as an Array, but sometimes needs res = Array.from(res);
         </div>
        </div>
        <br>

        <a name=removeAttribute></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>elem</i>.<b>removeAttribute</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ <i>attributename</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory (quietly does nothing if attributename is not present)
         </div>
        </div>
        <br>

        <a name=removeChild></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>elem</i>.<b>removeChild</b>(</nobr>
         </div>
         <div>
            <nobr>/*elem*/ <i>node</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory (quietly does nothing if node is not present)
         </div>
        </div>
        <br>

        <a name=setAttribute></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>elem</i>.<b>setAttribute</b>(</nobr>
         </div>
         <div>
            <nobr>/*string*/ <i>attributename</i>,</nobr> <nobr>/*string*/ <i>attributevalue</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory, can be used for custom attributes such as ('data-sorted', 'A'/'D') or even ('class','fill'). Another
            useful one is ('tabindex','0') which means "can recieve focus, in document order".
         </div>
        </div>
        <br>

        <a name=style></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*CSSStyleDeclaration*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>style</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Too many to fully list, but the fields pGUI.js uses, with examples, are: <br>
            <i>elem</i>.<b>style</b>.<b>alignItems</b> = "flex-start"; /* or "center"/"stretch"/"flex-end" */<br>
            <i>elem</i>.<b>style</b>.<b>alignSelf</b> = "flex-start"; /* or "center"/"stretch"/"flex-end" */<br>
            <i>elem</i>.<b>style</b>.<b>background</b> = "transparent";<br>
            <i>elem</i>.<b>style</b>.<b>backgroundColor</b> = "#808080";<br>
            <i>elem</i>.<b>style</b>.<b>color</b> = "#FF0080";<br>
            <i>elem</i>.<b>style</b>.<b>cursor</b> = "nw-resize"; /* nw can also ne jn/ne/e/nw */<br>
            <i>elem</i>.<b>style</b>.<b>display</b> = "flex"; /*  or"block"/"none" */<br>
            <i>elem</i>.<b>style</b>.<b>flexBasis</b> = "200px"; /* ?? */<br>
            <i>elem</i>.<b>style</b>.<b>flexDirection</b> = "row"; /* or "column" */<br>
            <i>elem</i>.<b>style</b>.<b>flexGrow</b> = 1; /* ?? */<br>
            <i>elem</i>.<b>style</b>.<b>fontFamily</b> = "Arial";<br>
            <i>elem</i>.<b>style</b>.<b>fontSize</b> = "10px"; /* or "10pt" */<br>
            <i>elem</i>.<b>style</b>.<b>fontStyle</b> = "italic";<br>
            <i>elem</i>.<b>style</b>.<b>fontWeight</b> = "bold";<br>
            <i>elem</i>.<b>style</b>.<b>justifyContent</b> = "flex-start"; <small>/* or "center"/"space-between"/"space-evenly"/"flex-end" */</small><br>
            <i>elem</i>.<b>style</b>.<b>margin</b> = "1px"; /* or ..."1px 2px 3px 4px", see <a href="xplayout.htm#margin">here</a> */<br>
            <i>elem</i>.<b>style</b>.<b>marginBottom</b> = "1px";<br>
            <i>elem</i>.<b>style</b>.<b>marginLeft</b> = "1px";<br>
            <i>elem</i>.<b>style</b>.<b>marginRight</b> = "1px";<br>
            <i>elem</i>.<b>style</b>.<b>marginTop</b> = "1px";<br>
            <i>elem</i>.<b>style</b>.<b>opacity</b> = 0.5; /* 0 is transparent, 1 fully opaque */<br>
            <i>elem</i>.<b>style</b>.<b>paddingBottom</b> = "1px";<br>
            <i>elem</i>.<b>style</b>.<b>paddingLeft</b> = "1px";<br>
            <i>elem</i>.<b>style</b>.<b>paddingRight</b> = "1px";<br>
            <i>elem</i>.<b>style</b>.<b>paddingTop</b> = "1px";<br>
            <i>elem</i>.<b>style</b>.<b>position</b> = "absolute"; /* or "relative"/"fixed" */<br>
            <i>elem</i>.<b>style</b>.<b>textAlign</b> = "left"; /* or "center"/"right" */<br>
            <i>elem</i>.<b>style</b>.<b>textBaseline</b> = "top"; /* or "middle"/"bottom" */<br>
            <i>elem</i>.<b>style</b>.<b>textDecoration</b> = "underline"; /* or "line-through" */<br>
            <i>elem</i>.<b>style</b>.<b>transform</b> = "rotate(90deg)";<br>
            <i>elem</i>.<b>style</b>.<b>height</b> = "80px"; <small>/* only has effect on block-level or absolute/fixed position elements */</small><br>
            <i>elem</i>.<b>style</b>.<b>width</b> = "240px"; <small>/* ditto */</small><br>
            <i>elem</i>.<b>style</b>.<b>left</b> = "100px";<br>
            <i>elem</i>.<b>style</b>.<b>top</b> = "100px";<br>
            also [?]: bottom, right, maxWidth, and zIndex.
         </div>
        </div>
        <br>

        <a name=textContent></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>textContent</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Can be set or retrieved, otherwise pretty self explanatory.<br>
            Unlike elem.innerText, this returns a sort of html-stripped innerHTML, with hidden text, scraps of styles, and line breaks ignored.
         </div>
        </div>
        <br>

        <a name=title></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>title</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            (also settable) The "title" in this case means/is shown as a tooltip, and implements <a href="gSetAttribute.htm#TIP">TIP</a>.
         </div>
        </div>
        <br>

        <a name=width></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*integer*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>elem</i>.<b>width</b>/<b>height</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Erm... width/height of embedded objects... xpGUI.js should probably not be using these...
         </div>
        </div>
        <br>

        <h3>canvas</h3>

        <a name=getContext></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr>/*CanvasRenderingContext2D*/&nbsp;</nobr>
         </div>
         <div>
            <nobr>ctx =&nbsp;</nobr>
         </div>
         <div>
            <nobr><i>canvas</i>.<b>getContext</b>("2d");</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Get a drawing context, on which all drawing operations occur.<br>
            When OpenGL is being used, "webgl" instead of "2d" yields a similar /*WebGLRenderingContext*/.<br>
         </div>
        </div>
        <br>

        <a name=beginPath></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>ctx</i>.<b>beginPath</b>()</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Start a new path by emptying the list of sub-paths.
         </div>
        </div>
        <br>

        <a name=bezierCurveTo></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>ctx</i>.<b>bezierCurveTo</b>(</nobr>
         </div>
         <div>
            <nobr>xc1, xc2, yc1, yc2, x2, y2);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Extend the path with a bezier curve. <br>
            The current position is used as x1,y1. <br>
            Use stroke() or fill() to draw the path.
         </div>
        </div>
        <br>

        <a name=closePath></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>ctx</i>.<b>closePath</b>();</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Extend the path with a line from the current position to the start.
            Use stroke() or fill() to draw the path.
         </div>
        </div>
        <br>

        <a name=ellipse></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>ctx</i>.<b>ellipse</b>(</nobr>
         </div>
         <div>
            <nobr>x, y, radiusX, radiusY,&nbsp;</nobr>
         </div>
         <div>
            <nobr>rotation, startAngle, endAngle,&nbsp;</nobr>
         </div>
         <div>
            <nobr>counterclockwise);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            x,y: ellipse centre<br>
            radiusX: major axis radius<br>
            radiusY: minor axis radius<br>
            rotation: in radians<br>
            startAngle: "", clockwise from x axis<br>
            endAngle: ditto. 0..2*PI is full.<br>
            counterclockwise: self explanatory<br>
         </div>
        </div>
        <br>

        <a name=fill></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>ctx</i>.<b>fill</b>();</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Draw the path and fill it.
         </div>
        </div>
        <br>

        <a name=fillRect></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>ctx</i>.<b>fillRect</b>(</nobr>
         </div>
         <div>
            <nobr>x, y, w, h);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Draw and fill a recangle. (does not change the current path)
         </div>
        </div>
        <br>

        <a name=fillStyle></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>ctx</i>.<b>fillStyle</b> = "#FF0080";</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            All the <a href="gCanvas.htm#XPG_colours">standard colours</a> are also valid.
         </div>
        </div>
        <br>

        <a name=ctx_font></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>ctx</i>.<b>font</b> = "bold 12px sans-serif";</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Note this is quite different from the way most other elements use the <a href="#style">style</a> to set the font.
         </div>
        </div>
        <br>

        <a name=getImageData></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>ctx</i>.<b>getImageData</b>(</nobr>
         </div>
         <div>
            <nobr>x, y, w, h);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Obtain an ImageData object representing the underlying pixel data for a specified portion of the canvas.
         </div>
        </div>
        <br>

        <a name=lineTo></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>ctx</i>.<b>lineTo</b>(</nobr>
         </div>
         <div>
            <nobr>x, y);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Extend the path with a line from the current position to x,y.
            Use stroke() or fill() to draw the path.
         </div>
        </div>
        <br>

        <a name=lineWidth></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>ctx</i>.<b>lineWidth</b>(1);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Implements <a href="gCanvas.htm#LINEWIDTH">LINEWIDTH</a>.
         </div>
        </div>
        <br>

        <a name=moveTo></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>ctx</i>.<b>moveTo</b>(</nobr>
         </div>
         <div>
            <nobr>x, y);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Move the current position to x,y.
         </div>
        </div>
        <br>

        <a name=setLineDash></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>ctx</i>.<b>setLineDash</b>(<i>array</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Implements <a href="gCanvas.htm#LINESTYLE">LINESTYLE</a>.
         </div>
        </div>
        <br>

        <a name=stroke></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>ctx</i>.<b>stroke</b>();</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Draw the path, without filling it.
         </div>
        </div>
        <br>

        <a name=strokeRect></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>ctx</i>.<b>strokeRect</b>(</nobr>
         </div>
         <div>
            <nobr>x, y, w, h);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Draw a recangle, without filling it. (does not change the current path)
         </div>
        </div>
        <br>

        <a name=strokeStyle></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>ctx</i>.<b>strokeStyle</b> = "#FF0080";</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            All the <a href="gCanvas.htm#XPG_colours">standard colours</a> are also valid.
         </div>
        </div>
        <br>


        <h3>events</h3>

        <a name=currentTarget></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>event</i>.<b>currentTarget</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            The element to which the listener was attached, rather than the element actually clicked. See also event.target.<br>
            This is often the better choice, for instance if you want the containing li clicked on, rather than a specifc scrap 
            of bold or italic text within that li.
         </div>
        </div>
        <br>

        <a name=preventDefault></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>event</i>.<b>preventDefault</b>();</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory
         </div>
        </div>
        <br>

        <a name=stopPropagation></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>event</i>.<b>stopPropagation</b>();</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Self explanatory
         </div>
        </div>
        <br>

        <a name=target></a>
        <div style="clear:both;height:1px;"> </div>
        <div class="flexbox">
         <div>
            <nobr><i>event</i>.<b>target</b>;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            The element that was clicked. See also event.currentTarget.<br>
            event.<span class="illegal">srcElement</span> was the name used for this in IE6-8 and should be replaced without hesitation
            (ie changed to <i>event</i>.target).
         </div>
        </div>
        <div style="clear:both;height:1px;"> </div>
        <br>

        <a name=setTimeout></a>
        <div class="flexbox">
         <div>
            <nobr><b>setTimeout</b>(</nobr>
         </div>
         <div>
            <nobr><i>fn</i>, <i>delay</i>[, <i>params...</i>]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Invoke fn with params after delay milliseconds.
         </div>
        </div>
        <br>

        <a name=typeof></a>
        <div class="flexbox">
         <div>
            <nobr>/*string*/ res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><b>typeof</b>(<i>obj</i>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Technically a prefix operator, it is used as a function in p2js/pGUI.js. Valid results are "string",
            "number", "undefined", "boolean", "function", and "object". Note the latter is returned for arrays,
            see <a href="#isArray">isArray</a>.
         </div>
        </div>
        <br>

        <a name=this></a>
        <div style="clear:both;height:1px;"> </div>
        <b>this</b> is avoided at all costs in p2js/xpGUI.js. Besides, rather than say dlg.show(), we use <a href="gShow.htm">gShow</a>(dlg).
        <br>
        <h3>operators</h3>
        <br>
        <div style="clear:both;height:1px;"> </div>
        <table style="width: auto;">
         <tr>
            <th>Operator</th>
            <th>Meaning</th>
         </tr>
         <tr>
            <td>
             !
            </td>
            <td>
              Logical not, equivalent to "not" in Phix.
            </td>
         </tr>
         <tr>
            <td>
             +
            </td>
            <td>
              In JavaScript, the plus operator not only performs mathematical addition, but also string concatenation. <br>
              The binary operator casts both operands to strings unless both operands are numbers. In contrast, the - operator
              always casts both operands to numbers, as do both the unary forms of + and -.<br>
              Use with caution (that is, in p2js.js and pGUI.js).
            </td>
         </tr>
         <tr>
            <td>
             ++
            </td>
            <td>
              Avoid (ditto --), in particular because of the "blind spot" that is the difference between ++i and i++, ie when asked like that, 
              easily stated, but when (casually) reading code, those sort of errors can be almost impossible to spot. For instance, the result
              of <code>i = i++;</code> is formally both 
              <a href="javascript:ExternalLink('ext832');" title='http://en.wikipedia.org/wiki/Unspecified_behavior'
                 id="ext832" style="color:#9B5565" >unspecified</a> and 
              <a href="javascript:ExternalLink('ext833');" title='http://en.wikipedia.org/wiki/Undefined_behavior'
                 id="ext833" style="color:#9B5565" >undefined</a> behaviour - while a specific compiler(/browser) may (or may not) produce 
              predictable results, it won&rsquo;t be hard to find a different compiler/browser that gives different results.
            </td>
         </tr>
         <tr>
            <td>
             &
            </td>
            <td>
              Bitwise and operation, similar to and_bits(). In Phix & performs concatenation.
            </td>
         </tr>
         <tr>
            <td>
             &&
            </td>
            <td>
              Logical and operation, similar to and_bits(). In Phix && is bitwise.
            </td>
         </tr>
         <tr>
            <td>
             ===
            </td>
            <td>
              In JavaScript, the = operator is always assignment, so eg if (a=b) {} is almost always just plain wrong, and <i>always</i> bad style.<br>
              Always use === in preference to == since the latter performs type coercion, eg "0"==0 is true, whereas "0"===0 is false.
            </td>
         </tr>
         <tr>
            <td>
             ...
            </td>
            <td>
              The spread operator. Used for eg fn(...args) much like call_func(fn,args). It might have been good for cloning arrays,
              but it only performs a shallow copy, see notes above.
            </td>
         </tr>
         <!-- https://www.joshwcomeau.com/operator-lookup/ -->
        </table>
        <div class="clear"></div>
        <div style="clear:both;height:1px;"> </div>
        <a name=globals></a>
        <br>
        Note the following might have been complete for pGUI.js, but for xpGUI.js it is very much a subset, only those I could be 
        bothered to write something about. Should you figure out something useful to add (beyond "document $all"), let me know.<br>
        <br>
        <table style="width: auto;">
         <tr>
            <th>Globals</th>
            <th>Meaning</th>
         </tr>
         <tr>
            <td>
             $catch()
            </td>
            <td>
              In Javascript a catch(e) can receive a string, number, boolean, or object, this just quietly maps such to
              a more desktop/Phix compatible sequence, so that a subsequent e[E_USER] (for example) does not crash.
              Obviously you won&rsquo;t get much in the way of source file and line number out of the browser, at best 
              it will correspond to the transpiler output rather than its input, which if nothing else should 
              teach you to debug things properly on the desktop first.
            </td>
         </tr>
         <tr>
            <td>
             $charArray()
            </td>
            <td>
              Needed because Array.from(string) produces lots of diddy-strings, whereas this produces the array of codePointAt I was expecting.<br>
              Should only ever be passed a string argument, and crashes when that is not the case. Note that res[0] is "sequence".<br>
              Only used in p2js.js, should not be emitted in generated code.
            </td>
         </tr>
<!-- (now private)
         <tr>
            <td>
             $class_name()
            </td>
            <td>
              Simple sanity checking, for instance we can close a dialog but it makes no sense to try and close a button. Of more use to 
              ensure that internally everything was hooked up correctly, than to catch user code calling the wrong thing.<br>
              Only used in pGUI.js, should not be emitted in generated code.
            </td>
         </tr>
-->
         <tr>
            <td>
             <a name=conCat></a>
             $conCat()
            </td>
            <td>
              Replacement for the & operator of Phix, which internally uses += for strings and array.concat(slice) for sequences.<br>
              Will be emitted in generated code. Note that since JavaScript does not have reference counts, you have / p2js_emit has
              to explicitly distinguish <code>s = $conCat(s,x,false)</code> [ie do not clone] from <code>s = $conCat(t,x[,true])</code> 
              [ie must clone t and that way leave the original undamaged]. Also note that, due to ref counts, desktop/Phix knows when, 
              in something like <code>s = [tmp57:=]&lt;expr&gt; & x</code> aka <code>s = $conCat([tmp57:=]&lt;expr&gt;,x)</code> it 
              <i>can</i> safely (re)use the hidden/unnamed tmp57, whereas JavaScript (and for the most part p2js) cannot, hence should
              you rework code to have more <code><i>&lt;var&gt;</i> = $conCat(<i>&lt;var&gt;</i>,..</code> then there will be fewer 
              (hidden/unnamed temps and as a direct consequence) unnecessary clones, and therefore more speed. 
              Of course more <code><i>&lt;var&gt;</i> &= ..</code> is/achieves the very same thing.
            </td>
         </tr>
<!-- (now deep_copy())
         <tr>
            <td>
             $deepCopy()
            </td>
            <td>
              Needed because JavaScript has the polar opposite of the copy-on-write semantics of Phix (pass-by-sharing semantics).<br>
              May be emitted in generated code (but is not so far).
            </td>
         </tr>
-->
         <tr>
            <td>
             $docBody
            </td>
            <td>
              Set to document.body for normal/stand-alone use, but the output panel when running in the <a href="interface.htm">online repl</a>.<br>
              Only used in p2js.js (for puts) and pGUI.js, should not be emitted in generated code.
            </td>
         </tr>
         <tr>
            <td>
             <a name=ocument_createElement></a>
             $ocument_createElement
            </td>
            <td>
              A trivial wrapper to <a href="#createElement">createElement</a> which sets a dummy (integer) id to mimic desktop/Phix, in case we try to print it.
            </td>
         </tr>
         <tr>
            <td>
             <nobr>$paranormalise()</nobr>
            </td>
            <td>
              A hand-translated version of the (private) <a href="paranormal.htm">paranormalise</a>() routine from pGUI.e.<br>
              There are now also five others, ~_traa(), ~_qraa(), ~_raa(), ~_taa(), and ~_paab() in xpGUI.js.<br>
              Only used in [x]pGUI.js, should not be emitted in generated code.
            </td>
         </tr>
         <tr>
            <td>
             $repe(s,idx,x,idii)
            </td>
            <td>
              Replacement for subscript assignment, uses String.fromCodePoint(x) and zero-based indexes for string(s), 1-based slices for sequences. <br>
              The first three parameters, s, idx, and x should be self-explanatory (s[idx] := x). <br>
              The optional fourth parameter, idii, is a sequence of nested subscripts, eg/ie 
<!--
              s[i][j][k] = x maps to $repe(s,k,x,["sequence",i,j]).<br>
-->
              <code>s[g][h][i] = x</code> maps to <code>$repe(s,i,x,["sequence",h,g])</code>
              <small>(a "backwards" idii proved a tiny smidgen easier but that&rsquo;s not set in stone)</small>.<br>
            
<!--
              Note: at the time of writing, subscripts in the parse tree are nested, and therefore may appear
              as such instead of using idii.<br>
-->
              Will be emitted in generated code. Note this takes advantage of JavaScript&rsquo;s pass-by-sharing semantics.
<!--             Note that s[i][j][k] produces nested calls to this routine. -->
             <!-- I am not overly adamant about the "sequence" part. Defined in p2js.js. -->
            </td>
         </tr>
         <tr>
            <td>
             $repss(s,ss,se,x,idii)
            </td>
            <td>
              Replacement for slice assignment, uses String.slice(ss-1,se) (as in JavaScript they are 0-based), but 
              Array.slice(ss,se+1) for dword-sequences (since we put a "sequence" in at s[0]). <br>
              The first four parameters, s, ss, se, and x, should be self-explanatory (s[ss..se] = x). <br>
              The optional fifth parameter, idii, is a sequence of nested subscripts, eg/ie s[i][j][k][ss..se] maps to 
              $repss(s,ss,se,x,["sequence",k,j,i]) <small>(ditto "backwards" idii)</small>.<br>
<!--
              Note: at the time of writing, subscripts in the parse tree are nested, and therefore may appear
              as such instead of using idii.<br>
-->
              Will be emitted in generated code. Note this takes advantage of JavaScript&rsquo;s pass-by-sharing semantics.
<!--            Note that s[i][j][k][ss..se] just uses nested $subse calls.-->
            </td>
         </tr>
         <tr>
            <td>
             $sidii(s,idii)
            </td>
            <td>
              Common code for $repe(), $repss(), $subse(), and $subss(). Also handles negative subscripts, as do those four.<br>
              Only used in p2js.js, should not be emitted in generated code.
            </td>
         </tr>
         <tr>
            <td>
             <a name=storeAttr></a>
             $storeAttr[]
            </td>
            <td>
              element-specific attribute handlers/setters, eg $storeAttr["dialog"]["TITLE"] is set_dialog, a (private) routine
              (defined in pGUI.js) for setting the dialog title (and other things).<br>
              Only used in pGUI.js, should not be emitted in generated code.
            </td>
         </tr>
         <tr>
            <td>
             $subse(s,idx)
            </td>
            <td>
              Replacement for subscripting, uses s.codePointAt(idx-1) for strings, s[idx] for sequences. <br>
<!--
              The first two parameters, s and idx should be self-explanatory. <br>
              The optional third parameter, idii, is a sequence of nested subscripts, eg/ie s[i][j][k] maps to 
              $subse(s,k,["sequence",i,j]).<br>
              Note: at the time of writing, subscripts in the parse tree are nested, and therefore may appear
              as such instead of using idii.<br>
-->
              Will be emitted in generated code. Note that s[i][j][k] produces nested calls to this routine.
             <!-- I am not overly adamant about the "sequence" part. Defined in p2js.js. -->
            </td>
         </tr>
         <tr>
            <td>
             $subss(s,ss,se)
            </td>
            <td>
              Replacement for slicing, uses String.slice(ss-1,se) for strings (as in JavaScript they are 0-based), but 
              Array.slice(ss,se+1) for dword-sequences (since we&rsquo;ve put a "sequence" in at s[0]). <br>
<!--
              The first three parameters, s, ss, and se, should be self-explanatory. <br>
              The optional fourth parameter, idii, is a sequence of nested subscripts, eg/ie s[x][y][z][ss..se] maps to 
              $subss(s,ss,se,["sequence",x,y,z]).<br>
              Note: at the time of writing, subscripts in the parse tree are nested, and therefore may appear
              as such instead of using idii.<br>
-->
              Will be emitted in generated code. Note that s[i][j][k][ss..se] just uses nested $subse calls.
            </td>
         </tr>
         <tr>
            <td>
             <nobr>$typeCheckError()</nobr>
            </td>
            <td>
              Common code for integer()/atom()/string()/sequence()/object(). If the optional second parameter is passed it should be 
              a string holding the variable name and triggers a fatal runtime error, if omitted then false can be returned.
              In p2js.js the standard five types just named also accept an optional second (name) parameter.
              Generally the fatal option is only used (by hand) on a few selected builtins, at the very top of the routine,
              and the usual desktop practice of checking after assignment is omitted.<br>
              Will not be emitted in generated code, except indirectly as above (and thus far without a name).
            </td>
         </tr>
<!--
        JavaScript allows $ in identifier names, so any of $, $paranormalise, 
        $prefer_backtick, $seed, $storeAttr, $topZindex, or $typeCheckError 
-->
        </table>
        <div class="clear"></div>
        <br>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
