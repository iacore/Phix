<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Core Language</h1>
      <div id="mainSection">
       Phix has just five builtin data types:
       <pre>
        &lt;-------- object ---------&gt;
        |                |
        +-atom           +-sequence
          |                |
          +-integer        +-string
       </pre>
       <ul>
        <li>An <a href="object.htm">object</a> can hold any Phix data, specifically either an <a href="atom.htm">atom</a> or a <a href="sequence.htm">sequence</a>.
        </li>
        <li>An <a href="atom.htm">atom</a> can hold a single floating point numeric value, or an integer.
        </li>
        <li>An <a href="integer.htm">integer</a> can hold a single whole number (at least +/- 1,000,000,000).
        </li>
        <li>A <a href="sequence.htm">sequence</a> can hold a collection of values, nested to any depth, or a string
        </li>
        <li>A <a href="string.htm">string</a> can hold a series of characters, or raw binary data.
        </li>
       </ul>
        At the very low level, and only when needed, Phix has all the tools required (about a dozen) to 
        allocate some memory, set the appropriate bits and bytes, invoke operating system or third party 
        routines (in a dll/so, typically written in C), and finally (you can automate this) release memory 
        for reuse. It is also possible to do all that directly with inline assembly (which most users should 
        quite rightly avoid). Such code (eg builtins\VM or demo\pGUI) is normally written once and used in 
        several different projects.
       <br>
       <br>
        However, for day-to-day use at the normal high/human-readable level, in Phix you just use the
        five simple types listed above. It is entirely expected that anyone who has experience of more 
        "advanced" languages might blurt out "ridiculous" or something similar or cruder at this point. 
        However, the Phix compiler/interpreter, which can re-compile itself (four times) in just 6 seconds, 
        the Edita programmers editor, all the demonstration programs included in the package, and indeed 
        the program used to generate this very help file (docs\phix\makephix.exw), use nothing else, and 
        are testament to the fact that the above five simple types are more than perfectly adequate.
       <br>
       <br>
        You could theoretically write an entire application declaring all variables and parameters as 
        type object, except that it would probably not catch errors the way you might expect it to. While
        Phix does also allow user defined types to be declared, they are used primarily for validation
        and debugging purposes, rather than being fundamentally different to the above.
       <br>
       <br>
<!--    
       <p>This section describes the fundamental day-to-day aspects of the language and contains everything you need to know to get started.</p>

       <p>In contrast, the much larger Library Routines section can be treated as a reference to be dipped into as and when needed.</p>

strives to be minimal... search for examples in the demos... test using the repl...
divided into easy-to-digest pieces.. blah blah.. fundamental types, builtins routines, later auto includes, library
-->
       <table>
        <col style="width: 8%"/>
<!--
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="not_bits.htm">not_bits</a>
         </td>
        </tr>
-->
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
          For comparison, I stumbled on this in a Ruby pdf
 <pre>
                         +------------------+
                         |                  |
           Object---->(Object)              |
            ^  ^        ^  ^                |
            |  |        |  |                |
            |  |  +-----+  +---------+      |
            |  |  |                  |      |
            |  +-----------+         |      |
            |     |        |         |      |
     +------+     |     Module--->(Module)  |
     |            |        ^         ^      |
OtherClass-->(OtherClass)  |         |      |
                           |         |      |
                         Class---->(Class)  |
                           ^                |
                           |                |
                           +----------------+
 </pre>
          with a  
          <a id="exR644" style="color:#9B5565" href="javascript:ExternalLink('exR644','http://www.ruby-doc.org/core/classes/Class.html');">link</a>
          to an updated version:
 <pre>
                         +----------+             +-...
                         |          |             |
         BasicObject-----|--->(BasicObject)-------|-...
             ^           |          ^             |
             |           |          |             |
          Object---------|------>(Object)---------|-...
             ^           |          ^             |
             |           |          |             |
             +-------+   |          +--------+    |
             |       |   |          |        |    |
             |    Module-|----------|--->(Module)-|-...
             |       ^   |          |        ^    |
             |       |   |          |        |    |
             |     Class-|----------|---->(Class)-|-...
             |       ^   |          |        ^    |
             |       +---+          |        +----+
             |                      |
obj--->OtherClass------------>(OtherClass)----------...
 </pre>
          neither of which make the slightest bit of sense to me...
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
