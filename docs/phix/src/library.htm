<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Library Routines</h1>
      <div id="mainSection">
        A large number of library routines are provided. It is strongly recommended to use the index and search 
        facilities (on the far left) to navigate this section effectively, rather than the central content tree
        (which is more about trying to keep relevant stuff nearby), that is unless of course you already know 
        where you&rsquo;re going. Suggestions for improvements would always be warmly welcomed.
        <br>
        <br>
        Some are written in low-level inline assembly, and some are written hll. Most are automatically included 
        as and when needed, but some require an explicit include statement before they can be used. 
        In the latter case, the appropriate include file is noted in the "Definition" part of the description.
<!--
        Of course an include file need 
        only be included once in your program. The editor displays in magenta those routines that are 
        built into the interpreter, and require no include file. 
-->
       <br>
       <br>
<!--
         [OLD] To indicate what kind of
       <b><a href="object.htm">object</a></b> may be passed in and returned, the following prefixes are used:
       <br>
       <br>
        <table style="width: auto;">
         <col style="width: 5%"/>
         <tr>
          <td>
           <b>x</b>
          </td>
          <td width=10>-</td>
          <td>a general
           <a href="language.htm">object</a> (atom or sequence)
          </td>
         </tr>
         <tr>
          <td>
           <b>s</b>
          </td>
          <td width=10>-</td>
          <td>a
           <a href="sequences.htm">sequence</a>
          </td>
         </tr>
         <tr>
          <td>
           <b>s</b>
          </td>
          <td width=10>-</td>
          <td>a
           <a href="strings.htm">string</a>
          </td>
         </tr>
         <tr>
          <td>
           <b>a</b>
          </td>
          <td width=10>-</td>
          <td>an
           <a href="atoms.htm">atom</a>
          </td>
         </tr>
         <tr>
          <td>
           <b>i</b>
          </td>
          <td width=10>-</td>
          <td>an
           <a href="integer.htm">integer</a>
          </td>
         </tr>
         <tr>
          <td>
           <b>fn</b>
          </td>
          <td width=10>-</td>
          <td>an
           <a href="integer.htm">integer</a> used as a file number
          </td>
         </tr>
         <tr>
          <td>
           <b>st</b>
          </td>
          <td width=10>-</td>
          <td>a
           <a href="strings.htm">string sequence</a>, or
           <a href="strings.htm#char">single-character atom</a>
          </td>
         </tr>
        </table>
        <div class="clear"></div>
       <br>
        &nbsp;
       <br>
        [NEW] I have replaced the above with 
-->
        Routines are documented using an explicit type declaration style syntax. For example where you see a definition such as
<!--eucode>
integer i = length(sequence s)
</eucode-->
<pre>
<font color="#004080">integer</font><font color="#000000"> i</font><font color="#0000FF"> =</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#004080">sequence</font><font color="#000000"> s</font><font color="#0000FF">)</font>
</pre>
        You should understand that denotes actual statements which look more like:
<!--eucode>
i = length(s)
</eucode-->
<pre>
<font color="#000000">i</font><font color="#0000FF"> =</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">s</font><font color="#0000FF">)</font>
</pre>
        The examples, when provided, often give a clearer illustration of the required syntax than the formal definition at the start.
       <br>
       <br>
        Some routines are not available on all platforms, in particular there are significant limitations on code that can be run in a web browser,
        such as not being able to read disk files, load a dll/so, execute system commands, allocate memory, or use multitasking or multithreading.<br>
        All library programs are clearly marked with their suitability or otherwise for being transpiled by 
        <a href="p2js.htm"><span class="pwap2js">pwa/p2js</span></a> so they can be run in a web browser, examples where they cannot include 
        <a href="open.htm">open</a>(), <a href="c_func.htm">c_func</a>(), <a href="system_exec.htm">system_exec</a>(), and 
        <a href="allocate.htm">allocate</a>().<br>
        Occaionally there are differences between Windows and Linux, for instance <a href<a href="message_box.htm">message_box</a>() and 
        <a href="text_rows.htm">text_rows</a>() are strictly Windows only, while <a href="instance.htm">instance</a>() and 
        <a href="cursor.htm">cursor</a>() do nothing useful on Linux.
       <br>
       <br>
        A run-time error message will usually result if an illegal argument value is passed to any of these routines.
<!--
        You can override the definition
         of these built-in routines by defining your own routine with the same name.
         You will get a suppressible warning if you do this.
-->
       <br>
        <a name="bo"></a>
       <br>
         It is <b><i>not</i></b> permitted to override builtins (at least not globally) or (re)define operators in Phix. 
         While there are a few neat little tricks that sort of thing can achieve, the mental drain of always having to 
         worry whether some builtin routine or operator is doing what you expect (due to some shenanigans hidden away
         in a [project-specific] file you did not even know existed) becomes significantly reduced, besides the superior 
         and far friendlier compile-time and run-time error messages make modifying several files far less terrifying 
         (or <a name=eci></a>excessively<sup><small><a href="#eci1">1</a></small></sup> compiler-intensive) in Phix than 
         it usually is in other programming languages.<br>
         Note there is a somewhat hidden distinction between "true builtins" which cannot be overridden and 
         "utility routines" where that is not quite so strict, as previously briefly mentioned in 
         <a href="declarations.htm">Declarations</a>. If the implementation notes read something like
         <a href="length.htm">length</a>()&rsquo;s `:%opLen in builtins\VM\pLen.e` then it is a true builtin, 
         whereas for something like <a href="join.htm">join</a>()&rsquo;s `builtins\flatten.e` which has no opcode or 
         "VM" in it, it is just normal hll code, and since the compiler has to allow that, it is therefore also going 
         to (have to) allow you to redefine it. Furture releases are fairly likely to gradually become increasingly 
         stricter in that regard, though nothing immediate is planned, checking that builtins are actually/only defined 
         in the builtins directory has some appeal and is one such possibility. <br>
         Of course Phix is an open source language that can be rebuilt in under twenty seconds, so even the core 
         fundamentals can be changed and there is no guarantee that has not already happened, however there is a 
         significant difference between that and "any source file" on a completely untainted installation, or for
         that matter the exact same source code behaving completely differently in different projects.
       <br>
       <br>
        <a name=eci1></a><sup><small><a href="#eci">1</a></small></sup> In some programming languages, simply "touching" 
        a file triggers the compiler into complete overdrive, whereas in Phix, which is much faster to begin with anyway, 
        it makes no difference whatsoever, nor is there ever any need to run around "touching" files because compiler 
        dependencies are foobar&rsquo;d. It will no doubt horrify some readers to learn that Phix never caches the results
        of any compilation, but the reality is it simply does not need to - by far the biggest stalling point is when your
        AV kicks in because a new execuable file has been created, even then at most a few seconds, and prior compilations 
        being cached would have absolutely no effect on that at all.
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
