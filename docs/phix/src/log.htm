<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">log / exp / sqrt / power</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          <a href="atom.htm">atom</a> res = log(<a href="atom.htm">atom</a> x)
          <br>
          <i>-- or --</i>
          <br>
          <a href="atom.htm">atom</a> res = ln(<a href="atom.htm">atom</a> x)
          <br>
          <i>-- or --</i>
          <br>
          <a href="atom.htm">atom</a> res = log10(<a href="atom.htm">atom</a> x)
          <br>
          <i>-- or --</i>
          <br>
          <a href="atom.htm">atom</a> res = log2(<a href="atom.htm">atom</a> x)
          <br>
          <i>-- or --</i>
          <br>
          <a href="atom.htm">atom</a> res = exp(<a href="atom.htm">atom</a> x)
          <br>
          <i>-- or --</i>
          <br>
          <a href="atom.htm">atom</a> res = sqrt(<a href="atom.htm">atom</a> x)
          <br>
          <i>-- or --</i>
          <br>
          <a href="atom.htm">atom</a> res = power(<a href="atom.htm">atom</a> x, y)
          <br>
          <i>-- or --</i>
          <br>
          <a href="atom.htm">atom</a> res = powmod(<a href="atom.htm">atom</a> base, exponent, modulus)
          <br>
          <i>-- or --</i>
          <br>
          <a href="atom.htm">atom</a> res = mulmod(<a href="atom.htm">atom</a> a, b, modulus)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            log[10/2]() returns the natural or base 10/2 logarithm of x.<br>
            exp() returns the inverse of log(), implemented trivially as power(EULER,x).<br>
            sqrt() returns the square root of x. x must not be negative.<br>
            power() returns the x raised to the power y.<br>
            powmod() returns the equivalent of rmdr|mod(power(base,exponent),modulus) only much faster and more accurate.<br>
            mulmod() returns the equivalent of rmdr|mod(a*b,modulus) only (sometimes somewhat slower and) more accurate.<br>
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            These functions may be applied to an <a href="atom.htm">atom</a> or sq_log[10/2](), sq_sqrt(), sq_power() to all 
            elements of a <a href="sequence.htm">sequence</a>.<br>
            The rules for <a href="seqops.htm">sequence operations</a> apply.
          <br>
          <br>
            Note that logarithms are only defined for positive numbers. Your program will abort with a message should
            you try to obtain one of a negative number or zero.
            <br>
            <br>
            <b>ln</b>() is a simple alias of log(), likewise <b>sq_ln</b>() and hll_ln(), which emphasize they yield the natural logarithm; 
            were it not for legacy code and compatibility issues, I&rsquo;d probably just deprecate/delete the [sq_|hll_]log() names.
            <br>
            <br>
            <b>log10</b>() is a simple wrapper to log(), multiplied by (1/log(10)). Likewise <b>log2</b>(), which also contains 
            some code to ensure that non-negative integer powers of 2 yeild an integer result [pre-1.0.2 log2(8) gave 3-(4.44e-16) 
            on 32-bit, while 64-bit fared a bit better up to log2(8192) which gave 13-(8.67e-19), ie both pretty close but no cigar],
            covering 0..31 on 32-bit, and 0..63 on 64-bit. A slightly less efficient version of that code was also added to log10(), 
            but only guarantees 0..9 on 32-bit (aka <a href="integer.htm">integer</a> inputs of 1, 10, .. 1_000_000_000), and 0..19 
            on 64-bit. Should the (reduced) performance of log10/2 be an issue, you would be much better off by invoking ln() and 
            performing said multiplication by a predefined constant inline.
            <br>
            <br>
            log() is directly supported by the floating point hardware and as such, without any wrapper/multiplication, may prove noticeably 
            faster, and perhaps slightly more accurate.
            <br>
            <br>
            <b>exp</b>(<a href="atom.htm">atom</a> x) is the inverse of log(), and is implemented simply as return power(EULER,x).<br>
            There is no similar builtin function for the inverse of log10(); you are expected to use power(10,x) directly, likewise log2().<br>
            Also, there is currently no sq_exp() function, it has simply never been needed or asked for (plus it don&rsquo;t quite fit 
            in the <a href="seqops.htm">seqops</a> table).
            <br>
            <br>
            Powers of 2 are calculated very efficiently.
            <br>
            <br>
            Other languages have a ** or ^ operator to perform the same action as power(), though in some languages ^ is the xor function.<br>
            It is also noted that any potential ambiguity in, say, "-5^2" simply does not occur in power(-5,2) vs. -power(5,2).
            <br>
            <br>
            Theoretically power(0,0) is undefined, however the result is 1, mainly for consistency with other programming languages.<br>
            Attempting to raise any value &lt;=0 to a negative or non integer power causes a fatal runtime error (same as python).<br>
            Obvious workarounds exist, for instance should you require a function that returns the cubic root of negative (and positive) numbers:
            <br>
            <br>
<!--eucode>
function cube_root(atom c)
    return sign(c)*power(abs(c),1/3)
end function
</eucode-->
<pre>
<font color="#008080">function</font><font color="#000000"> cube_root</font><font color="#0000FF">(</font><font color="#004080">atom</font><font color="#000000"> c</font><font color="#0000FF">)</font>
<font color="#008080">    return</font><font color="#7060A8"> sign</font><font color="#0000FF">(</font><font color="#000000">c</font><font color="#0000FF">)*</font><font color="#7060A8">power</font><font color="#0000FF">(</font><font color="#7060A8">abs</font><font color="#800000">(</font><font color="#000000">c</font><font color="#800000">)</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#0000FF">/</font><font color="#000000">3</font><font color="#0000FF">)</font>
<font color="#008080">end function</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Examples:</b>
         </td>
         <td>
<!--eucode>
?log(100)   -- prints 4.605170186
?log10(100) -- prints 2 -- (exact in 1.0.2+)
?log2(8)    -- prints 3 --        ""
?sqrt(16)   -- prints 4
?power(5,2) -- prints 25
?powmod(13789,722341,2345) -- prints 2029
</eucode-->
<pre>
<font color="#0000FF">?</font><font color="#7060A8">log</font><font color="#0000FF">(</font><font color="#000000">100</font><font color="#0000FF">)  </font><font color="#000080"><i> -- prints 4.605170186</i></font>
<font color="#0000FF">?</font><font color="#7060A8">log10</font><font color="#0000FF">(</font><font color="#000000">100</font><font color="#0000FF">)</font><font color="#000080"><i> -- prints 2 -- (exact in 1.0.2+)</i></font>
<font color="#0000FF">?</font><font color="#7060A8">log2</font><font color="#0000FF">(</font><font color="#000000">8</font><font color="#0000FF">)   </font><font color="#000080"><i> -- prints 3 --        ""</i></font>
<font color="#0000FF">?</font><font color="#7060A8">sqrt</font><font color="#0000FF">(</font><font color="#000000">16</font><font color="#0000FF">)  </font><font color="#000080"><i> -- prints 4</i></font>
<font color="#0000FF">?</font><font color="#7060A8">power</font><font color="#0000FF">(</font><font color="#000000">5</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">)</font><font color="#000080"><i> -- prints 25</i></font>
<font color="#0000FF">?</font><font color="#7060A8">powmod</font><font color="#0000FF">(</font><font color="#000000">13789</font><font color="#0000FF">,</font><font color="#000000">722341</font><font color="#0000FF">,</font><font color="#000000">2345</font><font color="#0000FF">)</font><font color="#000080"><i> -- prints 2029</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            log(): via :%opLog in builtins\VM\pTrig.e (an autoinclude).<br>
            log10() and log2(): see builtins\log10.e (an autoinclude) for details of the actual implementation.<br>
            exp(): see builtins\pmaths.e (an autoinclude) for details of the actual implementation.<br>
            sqrt(): via :%opSqrt in builtins\VM\pTrig.e (an autoinclude).<br>
            power(): via :%opPow in builtins\VM\pPower.e (an autoinclude). <br>
            powmod() and mulmod(): see builtins\pmaths.e. NB: no formal statement regards matching mod() or rmdr() is made, in other
            words only lightly tested and currently only formally supported for all-positive parameters, but as ever I will be happy
            to fix any glitches that hinder a real-world need. One unknown is whether there should be a bool all_ints=true parameter,
            which would make them check the parameters are not fractional and do not exceed the <a href="Atoms.htm#maxatm">"integer" 
            precision limits of an atom</a>.<br>
            The constant <b>EULER</b> (renamed from E in 1.0.2) is defined in psym.e/syminit(), part of the compiler, 
            as 2.71828182845904523536, the last two digits of which are probably beyond precision limits of 64-bit,
            with the last 6 digits likewise being of course pretty much irrelevant on 32-bit. 
            There is also a commented-out (and undocumented) routine in mpfr.e which will generate a string version
            of that constant to however many digits you have patience for (easily portable to mpfr.js if needed).
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
