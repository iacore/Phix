<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Machine Level Interface</h1>
      <div id="mainSection">
        We have grouped here a number of routines that you can use to access your machine at a low-level. <br>
        With this low-level machine interface you can read and write to memory. <br>
        You can also set up your own machine language routines and call them.
       <br>
       <br>
        Some of the routines listed below are unsafe, in the sense that Phix
        cannot protect you if you use them incorrectly. You could crash your
        program or even your system. 
        <br>
        <br>
        Under Windows, the operating system will usually pop up a termination box 
        giving a diagnostic message plus register information. <br>
        Under Linux you will typically get a segmentation violation.<br>
        Note there is no such thing as safe.e for Phix, that is Euphoria-only.
<!--
       <dl>
        <dt>
         <a name=safe></a>
         <b>
          <font color="navy">Note:</font>
         </b>
         <dd>
         To assist programmers in debugging code involving these unsafe routines,
         we have supplied [DEV (safe.e)]
<br><br>DEV:<br>
--DOCS: Sort out safe.e: add a constant to pAlloc.e of SAFETY=NORMAL/DYNAMIC/VALIDATE.<br>
-- NORMAL: best performance, no checking<br>
-- DYNAMIC: can be enabled per-application (via allocation_safety(bool active=false)<br>
-- VALIDATE: always checked.<br>
--<br>
-- The argument to allocation_safety() can be true/false.<br>
-- When SAFETY=NORMAL (as distributed) the compiler should not emit any extra code or runtime tests, <br>
--  resulting in the best possible performance, and will ignore any calls to alloction_safety().<br>
-- Note that Phix does not have the safe.e (of Euphoria, to replace machine.e), <br>
--  largely because of the auto-include system, so this is the replacement.<br>
<br><br>
           <b>safe.e</b>, an alternative to <b>machine.e</b>. If you copy
           <b>euphoria\include\safe.e</b> into the directory containing your program, and you rename
           <b>safe.e</b> as <b>machine.e</b> in that directory, your program will run using safer 
         (but slower) versions of these low-level
         routines.
           <b>safe.e</b> can catch many errors, such as poking into a bad memory location.
         See the comments at the top of safe.e for complete instructions on
         how to use it. When using a package such as
          <b>Win32Lib</b> that 
         does not use the <a href="allocate.htm">allocate</a>() function, you can only make limited use of
           <b>safe.e</b>.
         </dd>
        </dt>
       </dl>
-->
        <br>
        <br>
        These machine-level-interface routines are important because they allow access to low-level features of the hardware and operating system.<br>
        For some applications this is essential.
       <br>
       <br>
        Machine code routines can be written by hand, or taken from the disassembled output of a compiler for C or some other language.<br>
        There are many examples of inline assembly needed for the Phix runtime, perhaps the simplest of which is builtins\VM\pLen.e
        which implements the <a href="length.htm">length</a>() function (but only when the compiler does not inline it, as per the
        technicalia dropdown on that link).
       <br>
       <br>
        Only int_to_bytes() and bytes_to_int() are supported by <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js</b></span></a>.
       <br>
        &nbsp;
       <br>
        <table>
        <col style="width: 5%"/>
         <tr>
          <td>
           <a href="peek.htm">
            <b>peek</b>
           </a>
          </td>
          <td width=10 align=center>-</td>
          <td>read one or more bytes from memory</td>
         </tr>
         <tr>
          <td>
           <a href="poke.htm">
            <b>poke</b>
           </a>
          </td>
          <td width=10 align=center>-</td>
          <td>write one or more bytes to memory</td>
         </tr>
         <tr>
          <td>
           <a href="mem_copy.htm">
            <b>mem_copy</b>
           </a>
          </td>
          <td width=10 align=center>-</td>
          <td>copy a block of memory</td>
         </tr>
         <tr>
          <td>
           <a href="mem_set.htm">
            <b>mem_set</b>
           </a>
          </td>
          <td width=10 align=center>-</td>
          <td>set a block of memory to a value</td>
         </tr>
         <tr>
          <td>
           <a href="call.htm">
            <b>call</b>
           </a>
          </td>
          <td width=10 align=center>-</td>
          <td>call a machine language routine</td>
         </tr>
         <tr>
          <td>
           <a href="allocate.htm">
            <b>allocate</b>
           </a>
          </td>
          <td width=10 align=center>-</td>
          <td>allocate a block of memory</td>
         </tr>
         <tr>
          <td>
           <a href="free.htm">
            <b>free</b>
           </a>
          </td>
          <td width=10 align=center>-</td>
          <td>deallocate a block of memory</td>
         </tr>
         <tr>
          <td>
           <a href="allocate_string.htm">
            <b>allocate_string</b>
           </a>
          </td>
          <td width=10 align=center>-</td>
          <td>allocate a string of characters with 0 terminator</td>
         </tr>
<!-- (these entries are now in eucompat.htm)
         <tr>
          <td>
           <a href="register_block.htm">
            <b>register_block</b>
           </a>
          </td>
          <td width=10 align=center>-</td>
          <td>register an externally-allocated block of memory</td>
         </tr>
         <tr>
          <td>
           <a href="unregister_block.htm">
            <b>unregister_block</b>
           </a>
          </td>
          <td width=10 align=center>-</td>
          <td>unregister an externally-allocated block of memory</td>
         </tr>
-->
         <tr>
          <td>
           <a href="int_to_bytes.htm">
            <b>int_to_bytes</b>
           </a>
          </td>
          <td width=10 align=center>-</td>
          <td>convert an integer to a sequnce of bytes</td>
         </tr>
         <tr>
          <td>
           <a href="bytes_to_int.htm">
            <b>bytes_to_int</b>
           </a>
          </td>
          <td width=10 align=center>-</td>
          <td>convert a sequence of bytes to an integer</td>
         </tr>
         <tr>
          <td>
           <a href="int_to_bits.htm">
            <b>int_to_bits</b>
           </a>
          </td>
          <td width=10 align=center>-</td>
          <td>convert an integer to a <a href="sequence.htm">sequence</a> of bits</td>
         </tr>
         <tr>
          <td>
           <a href="bits_to_int.htm">
            <b>bits_to_int</b>
           </a>
          </td>
          <td width=10 align=center>-</td>
          <td>convert a <a href="sequence.htm">sequence</a> of bits to an integer</td>
         </tr>
         <tr>
          <td>
           <a href="atom_to_floatNN.htm">
            <b>atom_to_floatNN</b>
           </a>
          </td>
          <td width=10 align=center>-</td>
          <td>convert an <a href="atom.htm">atom</a> to a <a href="sequence.htm">sequence</a> of 4/8/10 bytes in IEEE 32/64/80-bit floating-point format
          </td>
         </tr>
         <tr>
          <td>
           <a href="floatNN_to_atom.htm">
            <b>floatNN_to_atom</b>
           </a>
          </td>
          <td width=10 align=center>-</td>
          <td>convert a <a href="sequence.htm">sequence</a> of 4/8/10 bytes in IEEE 32/64/80-bit floating-point format, to an <a href="atom.htm">atom</a>
          </td>
         </tr>
        </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
