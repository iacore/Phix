<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">min / max / etc</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          <a href="object.htm">object</a> res = min(<a href="object.htm">object</a> x, y)
          <br>
          <i>-- or --</i>
          <br>
          <a href="object.htm">object</a> res = min(<a href="sequence.htm">sequence</a> s) <small>(see <a href="#tech" onclick="opentech()">technicalia</a>)</small>
          <br>
          <i>-- or --</i>
          <br>
          <a href="object.htm">object</a> res = smallest(<a href="sequence.htm">sequence</a> s, 
                                                         <a href="integer.htm#bool">bool</a> return_index=<a href="logicops.htm#tf">false</a>)
          <small><br>
          <i>-- or --</i>
          <br>
          <a href="object.htm">object</a> res = sq_min(<a href="object.htm">object</a> a, b)
          </small>
<!--
          <br>
          <i>-- or --</i>
          <br>
          <a href="object.htm">object</a> res = smallest(<a href="sequence.htm">sequence</a> set, 
                                                        <a href="integer.htm#bool">bool</a> return_index=<a href="logicops.htm#tf">false</a>)
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>Returns the smallest of x and y, or the smallest element in <a href="sequence.htm">sequence</a> s.
            Atoms are considered to be less than sequences. Sequences are compared "alphabetically" (case sensitive, 
            ie 'Z'&lt;'a') starting with the first element until a difference is found.
            <br>
            <br>
            The sq_min(a,b) function applies min() to the <i>top-level</i> elements of a and b when they are both sequences,
            in which case they <i>must</i> be the same length, otherwise it applies an atom to all the elements of the other, 
            or if they are both atoms it behaves identically to min(a,b). The result is a sequence in all but the latter case.
            Note that it is <i><b>not</b></i> recursive, and passing a single argument to sq_min() is not allowed.
            <br>
            <br>
            As of 1.0.3, the <b>smallest</b>() function became a simple alias of minsq(), and is now the preferred name.<br>
            <br>
            <br>
            There are similar functions <b>max</b>()<small><b>, sq_max</b>(), <b>maxsq</b>(),<small> and <b>largest</b>() for obtaining
            (you&rsquo;ve guessed it) the largest. <br>
            There are no sq_smallest or sq_largest routines.
         </td>
        </tr>
        <tr>
         <td>
          <b>Additional:</b>
         </td>
         <td>
            <a href="atom.htm">atom</a> res = <b>median</b>(<a href="sequence.htm">sequence</a> s)<br>
            s must be a non-empty sequence on entry, and pre-sorted for meaningful results <small>(<i>not</i> verified)</small>.<br>
            Returns the middle element for odd-length sequences, or the average of the middle two elements for even-length sequences.<br>
            Yields the same result as <a href="sum.htm">average</a>() when the spread is perfectly balanced, eg {1,40,50,60,99}.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
a = min(7,5)                            -- a is 5
b = min({9,7,5})                        -- b is 5
c = min("two","three")                  -- c is "three"
d = min({"one","two","three","four"})   -- d is "four"
s = sq_min(s,1)         -- no element of s is now > 1
?smallest({"this",{3,5,7},9})       -- prints 9
?largest({"this",{3,5,7},9})        -- prints "this"
</eucode-->
<pre>
<font color="#000000">a</font><font color="#0000FF"> =</font><font color="#7060A8"> min</font><font color="#0000FF">(</font><font color="#000000">7</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#0000FF">)                           </font><font color="#000080"><i> -- a is 5</i></font>
<font color="#000000">b</font><font color="#0000FF"> =</font><font color="#7060A8"> min</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">9</font><font color="#0000FF">,</font><font color="#000000">7</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#800000">}</font><font color="#0000FF">)                       </font><font color="#000080"><i> -- b is 5</i></font>
<font color="#000000">c</font><font color="#0000FF"> =</font><font color="#7060A8"> min</font><font color="#0000FF">(</font><font color="#008000">"two"</font><font color="#0000FF">,</font><font color="#008000">"three"</font><font color="#0000FF">)                 </font><font color="#000080"><i> -- c is "three"</i></font>
<font color="#000000">d</font><font color="#0000FF"> =</font><font color="#7060A8"> min</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">"one"</font><font color="#0000FF">,</font><font color="#008000">"two"</font><font color="#0000FF">,</font><font color="#008000">"three"</font><font color="#0000FF">,</font><font color="#008000">"four"</font><font color="#800000">}</font><font color="#0000FF">)  </font><font color="#000080"><i> -- d is "four"</i></font>
<font color="#000000">s</font><font color="#0000FF"> =</font><font color="#7060A8"> sq_min</font><font color="#0000FF">(</font><font color="#000000">s</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#0000FF">)        </font><font color="#000080"><i> -- no element of s is now &gt; 1</i></font>
<font color="#0000FF">?</font><font color="#7060A8">smallest</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">"this"</font><font color="#0000FF">,</font><font color="#800080">{</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#0000FF">,</font><font color="#000000">7</font><font color="#800080">}</font><font color="#0000FF">,</font><font color="#000000">9</font><font color="#800000">}</font><font color="#0000FF">)      </font><font color="#000080"><i> -- prints 9</i></font>
<font color="#0000FF">?</font><font color="#7060A8">largest</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">"this"</font><font color="#0000FF">,</font><font color="#800080">{</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#0000FF">,</font><font color="#000000">7</font><font color="#800080">}</font><font color="#0000FF">,</font><font color="#000000">9</font><font color="#800000">}</font><font color="#0000FF">)       </font><font color="#000080"><i> -- prints "this"</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\pmaths.e (an autoinclude), and psqop.e, and the <a href="#tech" onclick="opentech()">technicalia</a> dropdown, 
            for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
<!--          <a href="smallest.htm">smallest</a>, -->
          <a href="equal.htm">equal</a>,
          <a href="compare.htm">compare</a>,
<!--          <a href="max.htm">max</a>, -->
          <a href="relops.htm">relational operators</a>,
          <a href="seqops.htm">sequence operations</a><br>
          <a name=tech></a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            min(s) is an "alias" for smallest(s) aka minsq(s); the compiler automatically substitutes the function when only one parameter is passed. <br>
            <small>[At some point I should probably just retire minsq and force the use of smallest, ditto maxsq/largest.]</small>
            <small>[Mind you, I have half a mind to retire sq_min() as well, since <a href="apply.htm">apply</a>() should do perfectly well enough.]</small>
            Note that providing the return_index parameter prevents such a substitution, ie min(s,true) is just plain wrong, as is minsq(x,y).<br>
            <small>(To clarify that, min(s,true) would just return the true, unless there was something smaller in s, and <i>never</i> an index.)</small><br>
            Both routines are declared in builtins\pmaths.e (an auto-include). Some extra care must be taken with routine_id("min"), as obviously 
            no equivalent mapping occurs for the one or two parameter cases.
         <br>
         <br>
            The Euphoria version of min() only accepts a single argument and behaves (via self-recursion) as smallest(flatten(s)), whereas the Phix version 
            is <b><i>not</i></b> recursive. <br>
            Unlike the Euphoria version, min(&lt;atom&gt;) generates a runtime error, as does min({}). <br>
            This function is only compatible with Euphoria when passed a single argument that is a non-empty and non-nested sequence of atoms. <br>
            Unlike several other functions the min() and sq_min() functions are not recursive. <br>
            Should you (for some strange reason) believe that min({"one","two","three"}) should yield 'e', or min({}) should yield +inf, then 
            may I politely suggest that you go away and write your own version of this routine.
            <br>
            <br>
            The smallest/largest functions differ from the Euphoria versions in std\stats.e in (at least) three ways:<br>
            * The set passed in the first parameter must be a non-empty sequence (compilation or run-time error if passed an atom or {})<br>
            * It can return non-atoms in the set (if no atoms occur, it will be the first/last in an alphabetical and case-sensitive ordering)<br>
            * It can return the index of the lowest/highest entry, rather than only the actual value of said.
            <br>
            <br>
            None of that should cause sensibly-written code to be incompatible or misbehave (imho/ymmv).
         </td>
        </tr>
       </table>
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
