<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Multiple Assignment</h1>
      <div id="mainSection">
        Sometimes it can be convenient to make several assignments in one statement, for example
<!--eucode>
    {a,b,c} = somefunc()
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">    {</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#000000">b</font><font color="#0000FF">,</font><font color="#000000">c</font><font color="#0000FF">} =</font><font color="#000000"> somefunc</font><font color="#0000FF">()</font>
</pre>
        is (functionally) the same as
<!--eucode>
    tmp = somefunc()
    c = tmp[3]
    b = tmp[2]
    a = tmp[1]
</eucode-->
<pre>
<font color="#000000">    tmp</font><font color="#0000FF"> =</font><font color="#000000"> somefunc</font><font color="#0000FF">()
</font><font color="#000000">    c</font><font color="#0000FF"> =</font><font color="#000000"> tmp</font><font color="#0000FF">[</font><font color="#000000">3</font><font color="#0000FF">]
</font><font color="#000000">    b</font><font color="#0000FF"> =</font><font color="#000000"> tmp</font><font color="#0000FF">[</font><font color="#000000">2</font><font color="#0000FF">]
</font><font color="#000000">    a</font><font color="#0000FF"> =</font><font color="#000000"> tmp</font><font color="#0000FF">[</font><font color="#000000">1</font><font color="#0000FF">]</font>
</pre>
        Alternatively you may want to initialise several items to the same thing, eg
<!--eucode>
    {names,dates,sizes} @= {}
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">    {</font><font color="#000000">names</font><font color="#0000FF">,</font><font color="#000000">dates</font><font color="#0000FF">,</font><font color="#000000">sizes</font><font color="#0000FF">} @= {}</font>
</pre>
        which is functionally the same as
<!--eucode>
    sizes = {}
    dates = {}
    names = {}
</eucode-->
<pre>
<font color="#000000">    sizes</font><font color="#0000FF"> = {}
</font><font color="#000000">    dates</font><font color="#0000FF"> = {}
</font><font color="#000000">    names</font><font color="#0000FF"> = {}</font>
</pre>
        Like everywhere else, instead of the plainer "=" you can use ":=", which is 
        normally pronounced "becomes equal to", whereas "@=" is normally pronounced 
        "all become equal to". (The comparison form of "=", "==", which is normally
        pronounced "is equal to", is not used anywhere else on this page.)
       <p></p>
        You can also nest (to any level) and combine the two types of multiple assignment:
<!--eucode>
    {{a,b},{c,d}} = {{1,2},{3,4}}       -- (becomes equal to)
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">    {</font><font color="#800000">{</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#000000">b</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">c</font><font color="#0000FF">,</font><font color="#000000">d</font><font color="#800000">}</font><font color="#0000FF">} = {</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">4</font><font color="#800000">}</font><font color="#0000FF">}      </font><font color="#000080"> -- (becomes equal to)</font>
</pre>
        is functionally equivalent to
<!--eucode>
    {c,d} = {3,4}
    {a,b} = {1,2}
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">    {</font><font color="#000000">c</font><font color="#0000FF">,</font><font color="#000000">d</font><font color="#0000FF">} = {</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">4</font><font color="#0000FF">}
    {</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#000000">b</font><font color="#0000FF">} = {</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">}</font>
</pre>
        which in turn is functionally equivalent to
<!--eucode>
    d = 4
    c = 3
    b = 2
    a = 1
</eucode-->
<pre>
<font color="#000000">    d</font><font color="#0000FF"> =</font><font color="#000000"> 4
    c</font><font color="#0000FF"> =</font><font color="#000000"> 3
    b</font><font color="#0000FF"> =</font><font color="#000000"> 2
    a</font><font color="#0000FF"> =</font><font color="#000000"> 1</font>
</pre>
        whereas
<!--eucode>
    {{a,b},{c,d}} @= {{1,2},{3,4}}      -- (all become equal to)
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">    {</font><font color="#800000">{</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#000000">b</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">c</font><font color="#0000FF">,</font><font color="#000000">d</font><font color="#800000">}</font><font color="#0000FF">} @= {</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">4</font><font color="#800000">}</font><font color="#0000FF">}     </font><font color="#000080"> -- (all become equal to)</font>
</pre>
        is functionally equivalent to
<!--eucode>
    {c,d} = {{1,2},{3,4}}
    {a,b} = {{1,2},{3,4}}
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">    {</font><font color="#000000">c</font><font color="#0000FF">,</font><font color="#000000">d</font><font color="#0000FF">} = {</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">4</font><font color="#800000">}</font><font color="#0000FF">}
    {</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#000000">b</font><font color="#0000FF">} = {</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">4</font><font color="#800000">}</font><font color="#0000FF">}</font>
</pre>
        (any nested multiple assignments are always the plainer "="/":=") which is the same as
<!--eucode>
    d = {3,4}
    c = {1,2}
    b = {3,4}
    a = {1,2}
</eucode-->
<pre>
<font color="#000000">    d</font><font color="#0000FF"> = {</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">4</font><font color="#0000FF">}
</font><font color="#000000">    c</font><font color="#0000FF"> = {</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">}
</font><font color="#000000">    b</font><font color="#0000FF"> = {</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">4</font><font color="#0000FF">}
</font><font color="#000000">    a</font><font color="#0000FF"> = {</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">}</font>
</pre>
        Subscripts and slices are also permitted; if s is {1,2,3,4} then
<!--eucode>
    {s[1],s[2..$]} = {s[$],s[1..$-1]}
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">    {</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">1</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">2</font><font color="#0000FF">..</font><font color="#000000">$</font><font color="#800000">]</font><font color="#0000FF">} = {</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">$</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">1</font><font color="#0000FF">..</font><font color="#000000">$</font><font color="#0000FF">-</font><font color="#000000">1</font><font color="#800000">]</font><font color="#0000FF">}</font>
</pre>
        leaves s as {4,1,2,3}. It would require named temporary variables to achieve the same
        thing using multiple statements, whereas the above form uses unnamed temps, which, 
        obviously enough, need not (and indeed cannot) be declared. However see performance 
        notes below (multiple assignment is designed for comfort and convenience not speed).
       <p></p>
        Use '{}' (or '?') to omit elements
<!--eucode>
    {a,{},c} = {1,2,3}
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">    {</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#800000">{}</font><font color="#0000FF">,</font><font color="#000000">c</font><font color="#0000FF">} = {</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#000000">3</font><font color="#0000FF">}</font>
</pre>
        is functionally the same as
<!--eucode>
    c = 3
    a = 1
</eucode-->
<pre>
<font color="#000000">    c</font><font color="#0000FF"> =</font><font color="#000000"> 3
    a</font><font color="#0000FF"> =</font><font color="#000000"> 1</font>
</pre>
        and ditto for "{a,?,c} = {1,2,3}".
       <p></p>
        You can also omit everything:
<!--eucode>
    {} = f()
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">    {} =</font><font color="#000000"> f</font><font color="#0000FF">()</font>
</pre>
        which explicitly discards the result of the function call. Alternatively if you prefer 
        "{?} = f()" has exactly the same effect (however "? = f()" is not legal syntax). Note 
        that OpenEuphoria (imo wrongly) allows /implicit/ discarding of function results, which 
        Phix does not, whereas, cmiiw, OpenEuphoria does not support any of the subscripting, 
        nesting, "@=", "{}=", ":=", or "==" forms of (multiple) assignment that Phix does.
       <p></p>
        You may be wondering why I appear to have written the equivalents "backwards".
        Any subscripts on the lhs are pushed onto opstack (in pmain.e) from left to
        right, hence the assignments are always performed from right to left to pick
        up any subscripts from the top of the stack, in the right order. Of course 
        relying on such subtleties would constitute very bad practice, and in reality
        that is an implementation detail that could fairly easily be changed, if it
        ever proves necessary that is.
       <p></p>
<!--DEV rewrite this, including fix as per aside-->
        I have carefully considered "left to right" behaviour, however the idiom:
<!--eucode>
    if sequence(id) then
        {id,subitem} = id
    end if
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    if</font><font color="#004080"> sequence</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">)</font><font color="#008080"> then
</font><font color="#0000FF">        {</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#000000">subitem</font><font color="#0000FF">} =</font><font color="#000000"> id
</font><font color="#008080">    end if</font>
</pre>
        generally outweighs (imo) the ability to code things like:
<!--eucode>
    {main,mainHwnd} = {create(Window,...),getHwnd(main)} -- error!
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">    {</font><font color="#000000">main</font><font color="#0000FF">,</font><font color="#000000">mainHwnd</font><font color="#0000FF">} = {</font><font color="#7060A8">create</font><font color="#800000">(</font><font color="#000000">Window</font><font color="#0000FF">,..</font><font color="#000000">.</font><font color="#800000">)</font><font color="#0000FF">,</font><font color="#000000">getHwnd</font><font color="#800000">(</font><font color="#000000">main</font><font color="#800000">)</font><font color="#0000FF">}</font><font color="#000080"> -- error!</font>
</pre>
        <b>Aside:</b>
        <blockquote>
            Ahem, it took me several months to realise this, but this silly little gotcha (to "At this point")
            could easily be completely avoided via a <code>tmp:=rhs</code> at the start, in all cases where 
            this would otherwise apply. That has not yet been done (needs mucho testing), but is planned.
            Once done, this should just read "
            Note that in some cases, when the rhs is a single plain variable, the compiler automatically performs 
            a <code>tmp:=rhs</code> to avoid out-of-order operations (on rhs) yielding unexpected results.
            "
        </blockquote>
        One consequence of this "right to left" behaviour is that it is illegal to
        assign the rhs anywhere but the leftmost element, for (an invalid) example:
<!--eucode>
    sequence name = {1,"name"}
    integer encoding
        {encoding,name} = name      -- (invalid code)
        {name[2],name[1]} = name    -- (invalid code)
</eucode-->
<pre>
<font color="#000000"></font><font color="#004080">    sequence</font><font color="#000000"> name</font><font color="#0000FF"> = {</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"name"</font><font color="#0000FF">}
</font><font color="#004080">    integer</font><font color="#000000"> encoding
</font><font color="#0000FF">        {</font><font color="#000000">encoding</font><font color="#0000FF">,</font><font color="#000000">name</font><font color="#0000FF">} =</font><font color="#000000"> name     </font><font color="#000080"> -- (invalid code)
</font><font color="#0000FF">        {</font><font color="#000000">name</font><font color="#800000">[</font><font color="#000000">2</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">name</font><font color="#800000">[</font><font color="#000000">1</font><font color="#800000">]</font><font color="#0000FF">} =</font><font color="#000000"> name   </font><font color="#000080"> -- (invalid code)</font>
</pre>
        which (together) would leave encoding as 'n' and name as "aame". I shall leave a 
        detailed explanation of that as an exercise for the reader. The rule (enforced with 
        a compilation error) is that when the rhs is a plain variable, with no operators, 
        subscripts, {}, function calls, etc, then it can only be altered in the leftmost 
        slot on the lhs. For example, this time perfectly valid:
<!--eucode>
    sequence name = {"name",1}
    integer encoding
        {name,encoding} = name
</eucode-->
<pre>
<font color="#000000"></font><font color="#004080">    sequence</font><font color="#000000"> name</font><font color="#0000FF"> = {</font><font color="#008000">"name"</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#0000FF">}
</font><font color="#004080">    integer</font><font color="#000000"> encoding
</font><font color="#0000FF">        {</font><font color="#000000">name</font><font color="#0000FF">,</font><font color="#000000">encoding</font><font color="#0000FF">} =</font><font color="#000000"> name</font>
</pre>
        which behaves exactly as you would expect it to. If you really need to, you can 
        either append "[1..$]" to the rhs, or increase nesting, to avoid the error:
<!--eucode>
    sequence name = {1,"name"}
    integer encoding
    --  {encoding,name} = name          -- oops, invalid
        {encoding,name} = name[1..$]    -- but this is valid
        name = {1,"name"}               -- (reset things)
        {{encoding,name}} = {name}      -- also valid
</eucode-->
<pre>
<font color="#000000"></font><font color="#004080">    sequence</font><font color="#000000"> name</font><font color="#0000FF"> = {</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"name"</font><font color="#0000FF">}
</font><font color="#004080">    integer</font><font color="#000000"> encoding
</font><font color="#000080">    --  {encoding,name} = name          -- oops, invalid
</font><font color="#0000FF">        {</font><font color="#000000">encoding</font><font color="#0000FF">,</font><font color="#000000">name</font><font color="#0000FF">} =</font><font color="#000000"> name</font><font color="#0000FF">[</font><font color="#000000">1</font><font color="#0000FF">..</font><font color="#000000">$</font><font color="#0000FF">]   </font><font color="#000080"> -- but this is valid
</font><font color="#000000">        name</font><font color="#0000FF"> = {</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"name"</font><font color="#0000FF">}              </font><font color="#000080"> -- (reset things)
</font><font color="#0000FF">        {</font><font color="#800000">{</font><font color="#000000">encoding</font><font color="#0000FF">,</font><font color="#000000">name</font><font color="#800000">}</font><font color="#0000FF">} = {</font><font color="#000000">name</font><font color="#0000FF">}     </font><font color="#000080"> -- also valid</font>
</pre>
        Likewise
<!--eucode>
    {name[2],name[1]} = name[1..2]
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">    {</font><font color="#000000">name</font><font color="#800000">[</font><font color="#000000">2</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">name</font><font color="#800000">[</font><font color="#000000">1</font><font color="#800000">]</font><font color="#0000FF">} =</font><font color="#000000"> name</font><font color="#0000FF">[</font><font color="#000000">1</font><font color="#0000FF">..</font><font color="#000000">2</font><font color="#0000FF">]</font>
</pre>
        is the correct/legal way to change "name" into "anme".
       <p></p>
        At this point it is worth noting that using all of these features together in
        one statement could easily create completely unreadable code; ideally they
        should be used wisely to make code clearer rather than harder to understand.
        I should also warn you that I am just about to push the boundaries of what is 
        and is not possible with multiple assignment, and I trust it is understood
        that any "bad/ugly/confusing" stuff should be avoided at all costs.
       <p></p>
        The first example of such things that springs to mind is the slightly dodgy:
<!--eucode>
    {s[idx],idx} = <something>
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">    {</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">idx</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">idx</font><font color="#0000FF">} = &lt;</font><font color="#000000">something</font><font color="#0000FF">&gt;</font>
</pre>
        which is perhaps understandable, but may be "an accident waiting to happen".
        Clearly someone could read that and assume it is setting the old idx of s,
        before getting a new value of idx for something else later, but of course
        that would be the effect of {idx,s[idx]} = &lt;something&gt;. Not nice, really,
        either way round.
       <p></p>
        Certainly the lhs should never rely on something having "already happened" on 
        the rhs, or otherwise attempt to modify something twice in a single statement,
        except for "static" subscripts. As an example to clarify that last point, if
        you try to make various substitutions in say "The [noun] [verb] the [object]",
        all in a single statement and possibly in any order, and further the lengths 
        and positions all change several times mid-statement, expect problems! Do them
        one at a time, and figure out where things are, after, rather than before they
        have moved(!!), and it should all be plain sailing.
       <blockquote>
    &lt;aside&gt;
       <p></p>
        OK, to further clarify that, consider this longhand version:
<!--eucode>
            s = "The [noun] [verb] on the [object]"
            --   123456789012345678901234567890123
            --           -1-       -2-       -3-
            s[26..33] = "mat"
            s[12..17] = "sat"
            s[5..10] = "cat"
</eucode-->
<pre>
<font color="#000000">            s</font><font color="#0000FF"> =</font><font color="#008000"> "The [noun] [verb] on the [object]"
</font><font color="#000080">            --   123456789012345678901234567890123
            --           -1-       -2-       -3-
</font><font color="#000000">            s</font><font color="#0000FF">[</font><font color="#000000">26</font><font color="#0000FF">..</font><font color="#000000">33</font><font color="#0000FF">] =</font><font color="#008000"> "mat"
</font><font color="#000000">            s</font><font color="#0000FF">[</font><font color="#000000">12</font><font color="#0000FF">..</font><font color="#000000">17</font><font color="#0000FF">] =</font><font color="#008000"> "sat"
</font><font color="#000000">            s</font><font color="#0000FF">[</font><font color="#000000">5</font><font color="#0000FF">..</font><font color="#000000">10</font><font color="#0000FF">] =</font><font color="#008000"> "cat"</font>
</pre>
        which is fine, but you should really avoid this nastiness:
<!--eucode>
            {s[26..33],s[12..17],s[5..10]} = {"mat","sat","cat"}
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">            {</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">26</font><font color="#0000FF">..</font><font color="#000000">33</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">12</font><font color="#0000FF">..</font><font color="#000000">17</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">5</font><font color="#0000FF">..</font><font color="#000000">10</font><font color="#800000">]</font><font color="#0000FF">} = {</font><font color="#008000">"mat"</font><font color="#0000FF">,</font><font color="#008000">"sat"</font><font color="#0000FF">,</font><font color="#008000">"cat"</font><font color="#0000FF">}</font>
</pre>
        or this nasty mess:
<!--eucode>
            {s[5..10],s[12..17],s[26..33]} = {"cat","sat","mat"}
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">            {</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">5</font><font color="#0000FF">..</font><font color="#000000">10</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">12</font><font color="#0000FF">..</font><font color="#000000">17</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">26</font><font color="#0000FF">..</font><font color="#000000">33</font><font color="#800000">]</font><font color="#0000FF">} = {</font><font color="#008000">"cat"</font><font color="#0000FF">,</font><font color="#008000">"sat"</font><font color="#0000FF">,</font><font color="#008000">"mat"</font><font color="#0000FF">}</font>
</pre>
        I bet that intuitively, if told one of them does not work most people would 
        assume the first works but the second does not, when in fact it is the other 
        way round. Few people would (immediately) understand what I have done with 
        the indexes to get (/force) these alternatives to work:
<!--eucode>
            {s[20..27],s[9..14],s[5..10]} = {"mat","sat","cat"}
            {s[20..27],s[5..10],s[12..17]} = {"mat","cat","sat"}
            {s[9..14],s[23..30],s[5..10]} = {"sat","mat","cat"}
            {s[9..14],s[5..10],s[26..33]} = {"sat","cat","mat"}
            {s[5..10],s[23..30],s[12..17]} = {"cat","mat","sat"}
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">            {</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">20</font><font color="#0000FF">..</font><font color="#000000">27</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">9</font><font color="#0000FF">..</font><font color="#000000">14</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">5</font><font color="#0000FF">..</font><font color="#000000">10</font><font color="#800000">]</font><font color="#0000FF">} = {</font><font color="#008000">"mat"</font><font color="#0000FF">,</font><font color="#008000">"sat"</font><font color="#0000FF">,</font><font color="#008000">"cat"</font><font color="#0000FF">}
            {</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">20</font><font color="#0000FF">..</font><font color="#000000">27</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">5</font><font color="#0000FF">..</font><font color="#000000">10</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">12</font><font color="#0000FF">..</font><font color="#000000">17</font><font color="#800000">]</font><font color="#0000FF">} = {</font><font color="#008000">"mat"</font><font color="#0000FF">,</font><font color="#008000">"cat"</font><font color="#0000FF">,</font><font color="#008000">"sat"</font><font color="#0000FF">}
            {</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">9</font><font color="#0000FF">..</font><font color="#000000">14</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">23</font><font color="#0000FF">..</font><font color="#000000">30</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">5</font><font color="#0000FF">..</font><font color="#000000">10</font><font color="#800000">]</font><font color="#0000FF">} = {</font><font color="#008000">"sat"</font><font color="#0000FF">,</font><font color="#008000">"mat"</font><font color="#0000FF">,</font><font color="#008000">"cat"</font><font color="#0000FF">}
            {</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">9</font><font color="#0000FF">..</font><font color="#000000">14</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">5</font><font color="#0000FF">..</font><font color="#000000">10</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">26</font><font color="#0000FF">..</font><font color="#000000">33</font><font color="#800000">]</font><font color="#0000FF">} = {</font><font color="#008000">"sat"</font><font color="#0000FF">,</font><font color="#008000">"cat"</font><font color="#0000FF">,</font><font color="#008000">"mat"</font><font color="#0000FF">}
            {</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">5</font><font color="#0000FF">..</font><font color="#000000">10</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">23</font><font color="#0000FF">..</font><font color="#000000">30</font><font color="#800000">]</font><font color="#0000FF">,</font><font color="#000000">s</font><font color="#800000">[</font><font color="#000000">12</font><font color="#0000FF">..</font><font color="#000000">17</font><font color="#800000">]</font><font color="#0000FF">} = {</font><font color="#008000">"cat"</font><font color="#0000FF">,</font><font color="#008000">"mat"</font><font color="#0000FF">,</font><font color="#008000">"sat"</font><font color="#0000FF">}</font>
</pre>
        (Notice how "mat" goes to s[20..27], s[23..30] or s[26..33])
        Of course in a real world program, we would not use fixed literal
        integers but the results from find or match, and dynamically apply
        adjustments to those results. Technically it can be made to work,
        but regardless, this sort of stuff is truly horrid, don't do it!
        (except perhaps when participating in a code obfuscation contest)
       <p></p>
    &lt;/aside&gt;
       </blockquote>

        The "{s[1],s[2..$]} = {s[$],s[1..$-1]}" example already given is perhaps the
        most complex thing that can be considered "static" subscripts. No s[i] is
        updated twice and there is no confusion or dependency on any destination, 
        though admittedly it relies on all "gathering" occuring before any update, 
        which is a general rule for all forms of assignment anyway. (And I should
        quickly remind you, again, to check out the performance notes below before 
        considering using such a statement.)
       <p></p>
       <h4>Performance notes</h4>
       <p></p>
        Multiple assignment is ideally suited to function results and table entries.
        If you are using {} or & on the rhs (at the top level) of a multiple assigmnent
        statement, then a longhand version will almost certainly be slightly faster, 
        due to the creation and subscripting of the temporary sequence being absent, 
        though obviously any such overhead is insignificant except in the most 
        crititical of inner loops, and as always there is no point pre-emptively 
        optimising anything unless profiling shows it really is expending some real 
        effort and time there.
       <p></p>
        The "{s[1],s[2..$]} = {s[$],s[1..$-1]}" example given above obviously creates 
        an entirely new copy of s in a new temporary sequence, then copies it all back, 
        whereas "z = s[$], s = s[1..$-1], s = prepend(s,z)" can do things "in situ",
        and therefore exhibit exponetially better performance on very long sequences.
        Also worth noting is that "{s} = {append(s,stuff)}" will thwart optimisations
        that can get applied to the simpler "s = append(s,stuff)". Other cases exist.
       <p></p>
        This is the reason I have used "functionally" quite excessively in this section,
        because the actual code emitted may be quite different, though it will achieve
        the same results. The compiler makes some attempts to avoid any such overheads, 
        but (as just shown) there are limits to what it can reasonably do. You may like
        to compare the list.asm from "p -d -nodiag t57" with and without the test flag
        "testemitONis0" being set.
       <p></p>
        Another common idiom worth mentioning is the simple swap:
<!--eucode>
    {a,b} = {b,a}
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">    {</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#000000">b</font><font color="#0000FF">} = {</font><font color="#000000">b</font><font color="#0000FF">,</font><font color="#000000">a</font><font color="#0000FF">}</font>
</pre>
        which, as you probably already know and ignoring any (integer-only) xor tricks,
        has no longhand equivalent that does not use a (named) temporary variable. But
<!--eucode>
    tmp := b
    b := a
    a := tmp
</eucode-->
<pre>
<font color="#000000">    tmp</font><font color="#0000FF"> :=</font><font color="#000000"> b
    b</font><font color="#0000FF"> :=</font><font color="#000000"> a
    a</font><font color="#0000FF"> :=</font><font color="#000000"> tmp</font>
</pre>
        is noticeably faster (in a pointless benchmark) than the code the one-liner generates:
<!--eucode>
    tmp = {b,a}
    b = tmp[2]
    a = tmp[1]
</eucode-->
<pre>
<font color="#000000">    tmp</font><font color="#0000FF"> = {</font><font color="#000000">b</font><font color="#0000FF">,</font><font color="#000000">a</font><font color="#0000FF">}
</font><font color="#000000">    b</font><font color="#0000FF"> =</font><font color="#000000"> tmp</font><font color="#0000FF">[</font><font color="#000000">2</font><font color="#0000FF">]
</font><font color="#000000">    a</font><font color="#0000FF"> =</font><font color="#000000"> tmp</font><font color="#0000FF">[</font><font color="#000000">1</font><font color="#0000FF">]</font>
</pre>
        It would however be quite wrong to believe that additional variables always 
        introduce unnecessary overhead. In fact the compiler often has to introduce 
        an unnamed temporary which has /exactly/ the same costs as a named variable. 
        Apart from the disadvantage of having to declare s, the advantage to say
<!--eucode>
    s = f(...)
    {...} = s
</eucode-->
<pre>
<font color="#000000">    s</font><font color="#0000FF"> =</font><font color="#000000"> f</font><font color="#0000FF">(..</font><font color="#000000">.</font><font color="#0000FF">)
    {..</font><font color="#000000">.</font><font color="#0000FF">} =</font><font color="#000000"> s</font>
</pre>
        is that an ex.err may contain some extra valuable and time saving information.
        It should never be any slower (or faster) than the one-line version, and indeed
        there may be cases where you can explicitly deassign ("s:={}") and avoid some
        hidden refcounting issue that you cannot so easily fix with the one-liner.
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
