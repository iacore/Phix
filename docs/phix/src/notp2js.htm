<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Incompatibilities</h1>
      <div id="mainSection">
        Obviously there are significant restrictions on what can be run in the browser compared to a desktop application.<br>
        This page summarises the desktop-only features of phix than cannot be used in pwa/p2js.
        <br>
        <br>
        You <i>must</i> understand and accept the following before using pwa/p2js:
        <ol>
        <li><b>true!==1</b> and <b>false!==0</b>. The JavaScript equality operators are simply weird, for
        instance 2==="2" yields false, whereas 2=="2" yields true (and 2="2" is an invalid assignment 
        statement). Since we/Phix could never work with ==, we use === exclusively. In almost all other 
        respects, true is 1 and false is 0, for instance 1+true evaluates to 2, just like Phix. It is only
        direct comparison for equality using an infix operator which fails, and that is simply something 
        you just have to live with. There is no such issue with equal() and compare().<br><br></li>

        <li><b>pass by sharing</b> is the underlying semantic nature of JavaScript, in contrast with the
        pass by reference with copy on write semantics of Phix (arguably somewhat quirky, and certainly 
        unique, bar Euphoria). Precariously perching a counterfeit copy-on-write semantics scheme on top 
        of the JavaScript copy-by-sharing semantics unfortunately lies somewhere between frankly insane 
        and outrageously ridiculous. Short of an out-and-out interpreter which would run many hundreds of 
        times slower than JavaScript, you simply cannot perform reference counting. In reality this bites 
        far less often than I first imagined. An example (noting that parameter passing and variable 
        assignment are effectively the same thing) is <code>O={3}; P=O; O[1]=5; ==&gt; P!={3}</code>. 
        Because of pass by sharing, P gets updated too. I always imagined I would be really upset by that 
        sort of thing, but it turns out that I&rsquo;m really not all that bothered, surprised me too. 
        One simple solution is just to replace that <code>P=O;</code> with <code>P=$deepCopy(O);</code>. 
        There is not as yet any mechanism to do that. Several times now I have modified code so that it 
        does not rely on copy-on-write semantics, most noticeably in builtins/psqop.e:sq_eq(), and it 
        turns out to be quite straightforward. So what I&rsquo;m planning to do, and I never thought 
        I&rsquo;d say this, is to ditch copy-on-write semantics. I&rsquo;m also not about to deliberately 
        generate code that relies on pass-by-sharing semantics (just a very small handful of places in 
        p2js.js do rely on that, one being $repe() for nested/multiple subscript assignments) nor am I 
        about to implement that semantic mechanism on the desktop. What is actually far more sensible, 
        and technically reasonably straightforward, is to add a compiler/transpiler directive "with js" 
        aka "with javascript_semantics" which ensures code does not rely on the implicit behaviour of 
        <i>either</i> semantic model, and crashes on the desktop when a violation occurs, with a human 
        readable error of course (probably "Blah blah semantic, had a little BLAM."). Yet to do.<br><br></li>
<!-- p2js violation: relies on copy on write semantics -->

        <li><b>no include (scope)</b> Apart from multiple <code>&lt;script src="..."&&gt;&lt;/script&gt;</code>
        JavaScript does not really do include files, and does not grant different scopes to each file.
        Although pwa/p2js handles p2js.js, pGUI.js, and the autoincludes in builtins/ as separate 
        script tags, it bundles all other sources into a single script tag. Any clashes are detected
        and reported as an error. Using multiple script tags would not solve anything. There is also
        no support for namespaces in JavaScript, so any "as" on an include statement is bluntly rejected,
        as is a standalone namespace directive within an include file itself, along with any attempt to
        use namespaces anywhere else in the code.<br><br></li>

        <li><b>no typechecking</b> There is some limited parameter typechecking withing p2js.js itself,
        for instance <code><a href="puts.htm">puts</a>(fn,x)</code> begins with 
        <code><a href="integer.htm">integer</a>(fn,"fn");</code>, where the optional second parameter to
        integer (on the browser only) makes it a fatal typecheck, however that is not widely applied. 
        While you can define user defined types and variables and invoke them explicitly, pwa/p2js simply 
        maps them to the builtin types, and JavaScript will <i>never</i> invoke them implicitly (ie on 
        assignment). You can still (mostly) use types to aid development on the desktop, but once a 
        program is debugged and run through the transpiler, much of that is largely lost. If you are 
        expecting run-time type checks in a typeless language, or worse are abusing types and expecting 
        side effects on assignment, you will be sorely disappointed. However, if you are simply using 
        types to make the code a bit more self-documenting, and/or using them to control logic flow, as
        as noted in a <a href="usingtypes.htm#can">somewhat unsafe manner</a>, that&rsquo;s fine.
        <br><br></li>

        <li><b>structs/classes</b> are (on the desktop) based on user defined types ...
        (At the moment I don&rsquo;t even try to parse such things, more investigation would be needed to 
        see if there is any possible mapping to js.)<br><br></li>

        <li><b>file i/o</b> is simply not possible from within a browser. The transpiler <i>should</i> barf.
        Storage, database, security, and similar mechanisms have all yet to be devised.<br><br></li>

        <li><b>progress</b>() is not supported. The JavaScript event loop is not suitable for long-running
        console-based applications, and invoking something like <a href="progress.htm">progress</a>() will
        have no effect until the process goes idle. A GUI application with an IupProgressBar updated from
        a re-entrant idle handler that processes things in smaller chunks or similar is much more suited,
        for example the syntax colouring code in p2js itself.<br>
        You must wrap any progress() calls in <code>if platform()!=JS then</code> or similar.<br><br></li>

        <li><b>no tab</b>. Accoring to JavaScript the tab, and backspace, form feed, newline, carriage 
        return, and vertical tab characters, were originally designed to control typewriters, teletypes, 
        and fax machines, and do not make any sense in HTML. In practice, should you invoke say 
        f("&nbsp;&nbsp;&nbsp;&nbsp","\t") then f receives two identical parameters of 4 spaces each. 
        There is absolutely nothing we can do but ban it/raise an error. 
        It is not quite so mental on the other control characters.<br><br></li>

        <li><b>keywords</b>. Must be extended to cover both Phix and JavaScript, so identifiers such as
        this, in, void, byte, etc. must all be renamed. The transpiler should point &rsquo;em out.<br><br></li>

        <li><b>20 year old code</b> is not likely to run under pwa/p2js. Changes should be kept minimal,
        however it is probably best to consider p2js as effectively a brand new language and something
        that will only run brand new code written specifically for it.</li>
        </ol>
        <br>
        <br>
        The following workarounds are used in the transpiler:
        <ol>
        <li><b>no char</b>. You do not have to look very far to find JavaScript that looks like it is using 
        characters, there is even some in p2js.js, but trust me it&rsquo;s all strings. In Phix, '2'+1 is '3', 
        in JavaScript it&rsquo;s '21'. The transpiler converts eg 'A' to 0X41 to avoid this issue.<br><br></li>

        <li><b>repeated</b>().Since repeat() is not a hll routine (see builtins/VM/pRepeatN.e) it would have 
        difficulty invoking deep_copy() as-is. Ideally in the long term we might move deep_copy() into asm 
        proper, and :%opRepCh/:%opRepeat into pHeap.e for direct access to the flag that "with js" sets, 
        along with deep_copy() itself, to tidy up some refcount=1 checking. For now you may have to replace 
        some repeat() with repeated() under "with js".<br><br></li>
        </ol>
        
        Say bye-bye to:<br>
        User defined types, and structs/classes<br>
        Exception handling<br>
        Include statements[*]<br>
        Trace and profile[*]<br>
        Format directives, shared libraries, c_func[*]<br>
        File i/o, including console input[*]<br>
        Command_line, system and system_exec[*]<br>
        Allocate/peek/poke<br>
        delete_routine<br>
        Multi-tasking and multi-threading<br>
        
        <br>
        <br>
        All runtime error handling, once it has been transpiled to JavaScript, is delegated to the browser development tools.<br>
        Press &lt;Ctrl+Shift+I&gt; to open the latter in the browser, if anything appears amiss, and hunt for/open the "console".<br>
        Ideally, however, you should iron out all bugs in the desktop version, before the very first test in the browser.
        <br>
        <br>
        , and hide the window decorations in the browser if desired, simply by setting the 
        pGUI.js-specific attribute HIDEHEADERS [DEV], which pGUI.e simply ignores.
>> Often web applications do not have such window decorations, in fact I suspect the whole "single page applications"
movement is (partly) an attempt to re-frame (see what I did there) the situation from a browser weakness to a browser 
strength. Then again, such window decorations simply waste too much real estate for a tablet or mobile phone. If you
uncomment out the HIDEHEADERS setting (which pGUI.e simply ignores) then the window is maximised and the window
decorations are removed, in this case leaving a fairly lonely-looking "World" in the middle of an otherwise blank screen.
Note however that would not be reactive, whereas this would: ...
<!--
SUG: in IupSetAttributes, if not found then [] = IupAttrError(ih,name,v,INT|TXT):
function IupAttrError(ih, name, v, flags)
    static_flags |= flags;
[[if we can rely on t/f results...]]
    if (!(static_flags & INT) && IupSetInt(ih,name,v)) {
        error "name must be set with IupSetInt()"
    } else if (!(static_flags & TXT) && IupSetAttribute(ih,name,v)) {
        error "name must be set with IupSetAttribute()"
    } else {
        error "name not supported..."   
    }
    static_flags = 0;
}
-->
        <br>
        <br>
        Note that pwa/p2js does <b><i>not</i></b> support:<br>
        file i/o, other than output to 1 (stdout, appended to docbody) and 2 (stderr, prepended to docbody).<br>
        &nbsp;&nbsp;&nbsp;<small>(That includes locking/getc/get_key/wait_key(except as a dummy function)/...)</small><br>
        memory management, such as allocate/peek/poke.<br>
        cffi, such as open_dll/c_func/c_proc.<br>
        tasks/threads.<br>
        routine_id, other than as first class use (which on 0.8.2+ is, vs. implicit, quite unnecessary anyway).<br>
        &nbsp;&nbsp;&nbsp;<small>(ie/eg no routine_id(expr), as opposed to routine_id("<i>string</i>"))</small>
<!-- dev?? - you do know JavaScript is a pretty capabable language, right?
        routine_id, other than as first class use.<br>
        &nbsp;&nbsp;&nbsp;<small><i>(ie/eg instead of <code>fn = routine_id("myfunc"), call_func(fn,args)</code> just use <code>fn = myfunc; fn(...args)</code>)</a></small><br>
        &nbsp;&nbsp;&nbsp;<small><i>(and by "..." I mean longhand spreading or [fixed plus] single-sequence-argument-style routines only)</i></small><br>
-->
<!--
locking, video_config,  ...
-->     
        <br>
        <br>
        Likewise, realistically pwa/pGUI.js probably only actually supports around 1% of pGUI.e - but hopefully the good/right/necessary bits.
        <br>
        <br>
        The annotations below are written in a JavaScript-esque style.<br>
        Since JavaScript is typeless, p2js converts eg "integer a" into "let /*integer*/ a", ie comments out any type.<br>
        &nbsp;&nbsp;&nbsp;<small>(I initially tried that style here in the docs, but not surprisingly it quickly became completely unreadable.)</small><br>
        Phix sequences, which use {}, become JavaScript arrays, which use [], rather than the {} of JavaScript objects, <br>
        which are more like a <a href="dict.htm">dictonary</a>, with unordered non-integer keys (or alphanumerically ordered, so "9" is after "10").
        <br>
        <br>
        The following standard builtins are not supported under p2js.
        <br>
        <br>
        <style type="text/css">
          .flexbox { display: flex; }
        </style>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="allocate.htm">allocate</a>(</nobr>
         </div>
         <div>
            <nobr>b);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues.)</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <small><i>procedure&nbsp;</i></small>
         </div>
         <div>
            <nobr><a href="assert.htm">assert</a>(</nobr>
         </div>
         <div>
            <nobr>condition,</nobr> <nobr>msg="");</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues.)</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="atom.htm">atom</a>(</nobr>
         </div>
         <div>
            <nobr>a,</nobr> <nobr>name="");</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small>Note that within JavaScript, (eg) atom(a) is a normal test yielding true/false whereas atom(a,"a") is an explicit typecheck<br>
             - the latter as emitted by p2js rather than something it will accept or you can write, you understand.<br>
            Also note that typechecking in transpiled JavaScript is somewhat sporadic at best.</small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="compare.htm">compare</a>(</nobr>
         </div>
         <div>
            <nobr>a,</nobr> <nobr>b);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues.)</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <small><i>procedure&nbsp;</i></small>
         </div>
         <div>
            <nobr><a href="crash.htm">crash</a>(</nobr>
         </div>
         <div>
            <nobr>msg,</nobr> <nobr>args=[]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Displays an error at the top of the document, and throws an exception.<br>
            Error handling is responsibility of browser development tools.<br>
            <small>(Note that any nFrames parameter is simply ignored.)</small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="equal.htm">equal</a>(</nobr>
         </div>
         <div>
            <nobr>a,</nobr> <nobr>b);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues.)</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="factors.htm">factors</a>(</nobr>
         </div>
         <div>
            <nobr>n,</nobr> <nobr>include1=0);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues.)</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="find.htm">find</a>(</nobr>
         </div>
         <div>
            <nobr>needle,</nobr> <nobr>haystack,</nobr> <nobr>start=1);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues.)</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="get_rand.htm">get_rand</a>();</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues.)</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="integer.htm">integer</a>(</nobr>
         </div>
         <div>
            <nobr>i,</nobr> <nobr>name="");</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small>Note that within JavaScript, (eg) integer(fn) is a normal test yielding true/false whereas integer(fn,"fn") is an explicit typecheck<br>
             - the latter as emitted by p2js rather than something it will accept or you can write, you understand.<br>
            Also, javascript integers are +/-9,007,199,254,740,992 (ie 2^53) rather than -1073741824..+1073741823 (ie 31-bit), or 63-bit.</small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="length.htm">length</a>(</nobr>
         </div>
         <div>
            <nobr>s);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues.)</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="match.htm">match</a>(</nobr>
         </div>
         <div>
            <nobr>needle,</nobr> <nobr>haystack,</nobr> <nobr>start=1,</nobr> <nobr>case_sensitive=true);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small>Note that under p2js this only works for strings.</small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="object.htm">object</a>(</nobr>
         </div>
         <div>
            <nobr>o,</nobr> <nobr>name="");</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small>Note that within JavaScript, (eg) object(p) is a normal test yielding true/false whereas object(o,"o") is an explicit typecheck<br>
             - the latter as emitted by p2js rather than something it will accept or you can write, you understand. <br>
            On the desktop, unassigned variables trigger that specific error before an object typecheck, but that is not necessarily so under p2js.</small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="prepend.htm">prepend</a>(</nobr>
         </div>
         <div>
            <nobr>a,</nobr> <nobr>b);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues.)</i></small><br>
            <small>Note however that the desktop prepend() is highly optimised, with a gap at the start and a sliding header, <br>
                   whereas JavaScript Arrays [as used by p2js.js] aren&rsquo;t, and excessive prepending on long sequences<br>
                   will eventually get exponentially slower. No point panicking for < 1000 items though.</small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <small><i>procedure&nbsp;</i></small>
         </div>
         <div>
            <nobr><a href="print.htm">print</a>(</nobr>
         </div>
         <div>
            <nobr>fn,</nobr> <nobr>x);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>Uses sprint() and puts(), so the same applies here too.</i></small>
         </div>
        </div>
        <!-- (deliberately hard against each other) -->
        <div class="flexbox">
         <div>
            <small><i>procedure&nbsp;</i></small>
         </div>
         <div>
            <nobr><a href="printf.htm">printf</a>(</nobr>
         </div>
         <div>
            <nobr>fn,</nobr> <nobr>fmt,</nobr> <nobr>args=[]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>Uses sprintf() and puts(), ditto.</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="sum.htm">product</a>(</nobr>
         </div>
         <div>
            <nobr>x);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues.)</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="platform.htm">platform</a>(</nobr>
         </div>
         <div>
            <nobr>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Optimised to literal (WEB==4) by p2js in much the same way as the desktop version, and no code is emitted for irrelevant if-branches.<br>
            Note the presence of an "else" without an explicit WEB(/JS/JAVASCRIPT) branch triggers a transpile-time error.<br> <!-- DEV -->
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <small><i>procedure&nbsp;</i></small>
         </div>
         <div>
            <nobr><a href="pp.htm">pp</a>(</nobr>
         </div>
         <div>
            <nobr>o,</nobr> <nobr>options=[]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Note that since wait_key() has no effect under pwa/p2js, neither does pp_Pause. [DEV finish documenting this, ppOpt, ppf()]
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <small><i>procedure&nbsp;</i></small>
         </div>
         <div>
            <nobr><a href="puts.htm">puts</a>(</nobr>
         </div>
         <div>
            <nobr>fn,</nobr> <nobr>x);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            fn must be 1 (append to document body) or 2 (prepend to document body), as text not html.<br>
            Any '\n' in x are automatically replaced with '&lt;br&gt;', <br>
            likewise <small>(beforehand, so they appear normal)</small> '&amp;|&lt;|&gt;' ==&gt; '&amp;amp|lt|gt;', <br>
            and should you want to show say '&amp;amp;' you&rsquo;ll have to output '&amp;amp;amp;'.<br>
            <small>(TIP: do NOT look at docs\phix\src\p2js.htm for that: my txt->chm bears little or no resemblence to your txt->puts->browser!)</small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="rand.htm">rand</a>(</nobr>
         </div>
         <div>
            <nobr>range);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues.)</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="repeat.htm">repeat</a>(</nobr>
         </div>
         <div>
            <nobr>item,</nobr> <nobr>count);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small>Note that strings of length 1 are treated as chars
                    (unlike phix, in js there is no difference between "a" and 'a')</small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="rnd.htm">rnd</a>();</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues.)</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="sequence.htm">sequence</a>(</nobr>
         </div>
         <div>
            <nobr>p,</nobr> <nobr>name="");</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small>Note that within JavaScript, (eg) sequence(p) is a normal test yielding true/false whereas sequence(p,"p") is an explicit typecheck<br>
             - the latter as emitted by p2js rather than something it will accept or you can write, you understand.</small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <small><i>procedure&nbsp;</i></small>
         </div>
         <div>
            <nobr><a href="set_rand.htm">set_rand</a>(</nobr>
         </div>
         <div>
            <nobr>seed);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues.)</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="sprint.htm">sprint</a>(</nobr>
         </div>
         <div>
            <nobr>x);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Uses JavaScript .toString(), which instead of eg "{1,{2,3}}" just yields (a flattened) "1,2,3". <br>
            I have however artificially glued on an outer top-level "{" and "}" for respectability&rsquo;s sake.<br>
            There is no maxlen parameter (anything provided will simply be ignored).
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="sprintf.htm">sprintf</a>(</nobr>
         </div>
         <div>
            <nobr>fmt,</nobr> <nobr>args=[]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Should give a reasonable approximation to the desktop builtin, but unlikely to ever be perfect...<br>
            Expect occasional [] instead of {}, some minor rounding differences, %g picks %f or %e differently. <br>
            <small><i>Uses puts(), so the same applies here too. See also pwa\printf_tests.html</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="string.htm">string</a>(</nobr>
         </div>
         <div>
            <nobr>s,</nobr> <nobr>name="");</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small>Note that within JavaScript, (eg) string(s) is a normal test yielding true/false whereas string(s,"s") is an explicit typecheck<br>
             - the latter as emitted by p2js rather than something it will accept or you can write, you understand.</small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="sum.htm">sum</a>(</nobr>
         </div>
         <div>
            <nobr>x);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues.)</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>[] =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="wait_key.htm">wait_key</a>(</nobr>
         </div>
         <div>
            <nobr>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Dummy routine, returns [] for the {} = wait_key() case.<br>
            I am assuming it is being used to allow the console to be read before it vanishes, which the browser is not too likely to do
            <small>(although it does close the tab when you close the last window)</small>, rather than as a pause before something scrolls 
            off screen because of reams and reams of further (console) output.
         </div>
        </div>
        <br>
        <br>
        The following constants, routines, elements, and containers of <a href="pGUI.htm">pGUI</a> are supported/imitated/emulated in pGUI.js<br>
        pGUI.js fully supports the <a href="paranormal.htm">paranormalised functions</a> of pGUI.e [some of them anyway].
        <br>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="Icallback.htm">Icallback</a>(</nobr>
         </div>
         <div>
            <nobr>func);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Dummy function, returns it&rsquo;s argument unaltered. <br>
            <small>(Exists primariliy so that phix &lt;==&gt; js can be bi-directional, for testing purposes.)</small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>ih =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="IupButton.htm">IupButton</a>(</nobr>
         </div>
         <div>
            <nobr>title=NULL,</nobr> <nobr>[[action=NULL,]</nobr> <nobr>func=NULL,]</nobr> <nobr>attributes="",</nobr> <nobr>args=[]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            IupFlatButton() is treated identically.<br>
            Supported attributes: <br>
            Untested: ALIGNMENT, BGCOLOR, CANFOCUS, PROPAGATEFOCUS, FLAT, FGCOLOR, IMAGE, 
                      IMINACTIVE, IMPRESS, IMPRESSBORDER, IMAGEPOSITION, PADDING,
                      CPADDING, SPACING, CSPACING, TITLE  <br>
            Unsupported: MARKUP
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <small><i>constant&nbsp;</i></small>
         </div>
         <div>
            <nobr><a href="callbacks.htm#IUP_DEFAULT">IUP_DEFAULT</a></nobr>
         </div>
         <div>
            <nobr> = -2;</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <small><i>procedure&nbsp;</i></small>
         </div>
         <div>
            <nobr><a href="IupClose.htm">IupClose</a>(</nobr>
         </div>
         <div>
            <nobr>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Dummy routine. (Doesn&rsquo;t really appear to do very much on the desktop, anyway.)
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <small><i>procedure&nbsp;</i></small>
         </div>
         <div>
            <nobr><a href="IupClose.htm">IupCloseOnEscape</a>(</nobr>
         </div>
         <div>
            <nobr>dlg);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues. Now invoked by default from IupDialog() anyway, in both pGUI.e and pGUI.js.)</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>res =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="IupDestroy.htm">IupDestroy</a>(</nobr>
         </div>
         <div>
            <nobr>dlg);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Dummy function, returns null. Note that (say) dlg = IupDestroy(dlg) after an <span class="illegal">IupMainLoop</span>() 
            would otherwise spanner the whole show, and hence, like the <span class="illegal">IupMainLoop</span>(), subsequent calls 
            need to end up inside an <code>if platform()!=JS then</code> guard.
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>ih =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="IupDialog.htm">IupDialog</a>(</nobr>
         </div>
         <div>
            <nobr>child,</nobr> <nobr>attributes="",</nobr> <nobr>args=[]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Supported attributes: GAP[?], MARGIN, MINSIZE, RASTERSIZE, TITLE
                                  <br>
            Untested: ACTIVE, ACTIVEWINDOW, BACKGROUND, BGCOLOR, BORDER, BORDERSIZE, BRINGFRONT, CHILDOFFSET, CLIENTSIZE, 
                      CURSOR, DEFAULTENTER, DEFAULTESC, DIALOGFRAME, EXPAND, FONT, ICON, 
                      MAXBOX, MAXIMIZED, MAXSIZE, MENU, MENUBOX, MINBOX, MINIMIZED, MODAL, 
                      NACTIVE, NAME, PARENTDIALOG, PLACEMENT, RESIZE, SCREENPOSITION,
                      SHRINK, SIMULATEMODAL, SIZE, STARTFOCUS, TIP, TOOLBOX, TOPMOST, VISIBLE, ZORDER
                      <br>
            Unsupported: COMPOSITED, CONTROL, CUSTOMFRAME, CUSTOMFRAMECAPTION, CUSTOMFRAMECAPTIONHEIGHT, CUSTOMFRAMECAPTIONLIMITS, CUSTOMFRAMEDRAW, CUSTOMFRAMESIMULATE, 
                         DIALOGHINT, DROPFILESTARGET, FULLSCREEN, HELPBUTTON, HIDETASKBAR, HIDETITLEBAR, HWND, MAXIMIZEATPARENT, 
                         MDIACTIVATE, MDIACTIVE, MDIARRANGE, MDICHILD, MDICLIENT, MDICLOSEALL, MDIFRAME, MDIMENU, MDINEXT,
                         NATIVEPARENT, OPACITY, OPACITYIMAGE, SAVEUNDER, SHAPEIMAGE, SHOWMINIMIZENEXT, SHOWNOACTIVE, SHOWNOFOCUS,
                         TASKBARBUTTON, TASKBARPROGRESS, TASKBARPROGRESSSTATE, TASKBARPROGRESSVALUE, 
                         TRAY, TRAYIMAGE, TRAYTIP, TRAYTIPBALLOON, TRAYTIPBALLOONDELAY, TRAYTIPBALLOONTITLE, TRAYTIPBALLOONTITLEICON, TRAYTIPMARKUP,
                         WID, XWINDOW
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>ih =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="IupFill.htm">IupFill</a>(</nobr>
         </div>
         <div>
            <nobr>attributes="",</nobr> <nobr>args=[]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Supported attributes: <br>
            Untested: EXPAND, FONT, MINSIZE, MAXSIZE, NAME, POSITION, RASTERSIZE, SIZE 
                      <br>
            Unsupported: WID
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>ih =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="IupHbox.htm">IupHbox</a>(</nobr>
         </div>
         <div>
            <nobr>children,</nobr> <nobr>attributes="",</nobr> <nobr>args=[]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Supported attributes: <br>
            Untested: ALIGNMENT, CLIENTSIZE, CLIENTOFFSET, EXPAND, EXPANDCHILDREN, EXPANDWEIGHT, 
                      FLOATING, FONT, GAP, CGAP, NGAP, NCGAP, HOMOGENEOUS, MARGIN, CMARGIN, NMARGIN, NCMARGIN, 
                      MINSIZE, MAXSIZE, NAME, NORMALIZESIZE, POSITION, ORIENTATION, SIZE, RASTERSIZE, 
                      <br>
            Unsupported: WID
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <small><i>procedure&nbsp;</i></small>
         </div>
         <div>
            <nobr><a href="IupHide.htm">IupHide</a>(</nobr>
         </div>
         <div>
            <nobr>ih);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            When then last window is hidden/closed, the browser tab is automatically closed.
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>ih =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="IupLabel.htm">IupLabel</a>(</nobr>
         </div>
         <div>
            <nobr>title=NULL,</nobr> <nobr>attributes="",</nobr> <nobr>args=[]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            IupFlatLabel() is treated identically.<br>
            Supported attributes: ALIGNMENT, EXPAND, TITLE<br>
            Untested: ACTIVE, DROPFILESTARGET, ELLIPSIS, FGCOLOR, IMAGE, IMINACTIVE, 
                      PADDING, CPADDING, SEPARATOR, WORDWRAP  <br>
            Unsupported: MARKUP
            <a name=IupMainLoop></a>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <small><i>procedure&nbsp;</i></small>
         </div>
         <div>
            <nobr><a href="IupMainLoop.htm"><span class="illegal">IupMainLoop</span></a>(</nobr>
         </div>
         <div>
            <nobr>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Invalid: we simply rely on the JavaScript event loop instead, and hence any <span class="illegal">IupMainLoop</span>() needed for the desktop
            along with any subsequent IupDestroy() <i>must</i> be placed inside an <code>if <a href="platform.htm">platform</a>()!=JS then</code> guard.
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <small><i>procedure&nbsp;</i></small>
         </div>
         <div>
            <nobr><a href="IupOpen.htm">IupOpen</a>(</nobr>
         </div>
         <div>
            <nobr>);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues, performs some important initialisation, same as the desktop nothing works if this is not called.)</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <small><i>procedure&nbsp;</i></small>
         </div>
         <div>
            <nobr><a href="IupSetStrAttribute.htm">IupSetStrAttribute</a>(</nobr>
         </div>
         <div>
            <nobr>ih,</nobr> <nobr>name,</nobr> <nobr>v,</nobr> <nobr>args=[]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues, beyond being rather limited in what attributes are actually supported.)</i></small><br>
            IupStoreAttribute() and IupSetAttribute() are treated identically, also [DEV?] IupSetInt(). 
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <small><i>procedure&nbsp;</i></small>
         </div>
         <div>
            <nobr><a href="IupSetAttributes.htm">IupSetAttributes</a>(</nobr>
         </div>
         <div>
            <nobr>ih,</nobr> <nobr>attributes,</nobr> <nobr>args=[]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues, beyond being rather limited in what attributes are actually supported.)</i></small><br>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <small><i>procedure&nbsp;</i></small>
         </div>
         <div>
            <nobr><a href="IupSetCallback.htm">IupSetCallback</a>(</nobr>
         </div>
         <div>
            <nobr>ih,</nobr> <nobr>name,</nobr> <nobr>func);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues.)</i></small><br>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <small><i>procedure&nbsp;</i></small>
         </div>
         <div>
            <nobr><a href="IupShow.htm">IupShow</a>(</nobr>
         </div>
         <div>
            <nobr>ih);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues.)</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>ih =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="IupTable.htm">IupTable</a>(</nobr>
         </div>
         <div>
            <nobr>columns,</nobr> <nobr>data,</nobr> <nobr>visible=10,</nobr> <nobr>attributes="",</nobr> <nobr>args=[]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues.)</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <small><i>procedure&nbsp;</i></small>
         </div>
         <div>
            <nobr><a href="IupTreeAddNodes.htm">IupTreeAddNodes</a>(</nobr>
         </div>
         <div>
            <nobr>tree,</nobr> <nobr>tree_nodes,</nobr> <nobr>id=-1);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues.)</i></small><br>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>ih =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="IupTable.htm">IupTreeView</a>(</nobr>
         </div>
         <div>
            <nobr>tree_nodes,</nobr> <nobr>branchopen_cb=NULL,</nobr> <nobr>attributes="",</nobr> <nobr>args=[]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            <small><i>(No known issues.)</i></small>
         </div>
        </div>
        <br>
        <div class="flexbox">
         <div>
            <nobr>ih =&nbsp;</nobr>
         </div>
         <div>
            <nobr><a href="IupHbox.htm">IupHbox</a>(</nobr>
         </div>
         <div>
            <nobr>children,</nobr> <nobr>attributes="",</nobr> <nobr>args=[]);</nobr>
         </div>
         <div>
            &nbsp;&nbsp;
         </div>
         <div>
            Supported attributes: <i>&lt;none&gt;</i><br>
            Untested: ALIGNMENT, CLIENTSIZE, CLIENTOFFSET, EXPAND, EXPANDCHILDREN, EXPANDWEIGHT, 
                      FLOATING, FONT, GAP, CGAP, NGAP, NCGAP, HOMOGENEOUS, MARGIN, CMARGIN, NMARGIN, NCMARGIN, 
                      MINSIZE, MAXSIZE, NAME, NORMALIZESIZE, POSITION, ORIENTATION, SIZE, RASTERSIZE 
                      <br>
            Unsupported: WID
         </div>
        </div>
       <br>
       <table>
        <col style="width: 8%"/>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
          <sup>1</sup> (regarding ES6 compatibility) The highly esteemed and ever capable Mr Donald Trump Snr, Grand 
            Ex-President of the United States of America, has agreed to use his special little tiny hands to write any 
            polyfills needed to get this running on IE 11 (wow, what a great piece of software) all the way back to IE 
            6, can I just say, all American, you know, built by one of the greatest companies - no <i>the</i> greatest 
            company the world has ever seen, in Redmond, Washington State - a beautiful, beautiful state, by the way, 
            with lovely trees, and great, great people, let me tell you, all American, no Chinese there, good old 
            fashioned American software at it&rsquo;s finest, that&rsquo;s for sure. <small><i>(not)</i></small>
          <br>
          <br>
          There is (currently) a limit on how far p2js_emit.e will go to preserve indentation. See demo\pGUI\submenu.exw
          for an example of one way to reduce nesting levels so it copes, and/or something to restore and improve on.
          It is more than fair to say that p2js_emit.e is a bit of a ropey first stab and deserves a complete rewite.
          It is the polar opposite of well designed, and was written with a "just deal with it" mindset, where "it" 
          was never particularly well defined in the first place, and in fact "it" was/is changed as needed, by going
          back and (almost literally) hacking away at p2js_parse.e, and that on day 1 the input would be completely
          and utterly wrong and useless, which "it" was. <a href="parse_tree.htm">parse_tree.htm</a> is my attempt to 
          reverse-design things.
          <br>
          <br>
          While true/false are 1/0 in Phix they are distinct in JavaScript, although type coercion will often paper over
          the cracks. In particular, t04unary needed a couple of tweaks: <code>(not 0)==1</code> needed to be changed to
          <code>(not 0)==true</code>, ie <code>true===1</code> (and <code>1===true</code>) fails, but thankfully such 
          explicit comparisons of booleans to 0/1 are fairly rare. Whilst not exactly recommended, the use of true/false 
          to increment or decrement seems OK.
          <br>
          <br>
          Some effort is spent checking that (Phix ==&gt; JavaScript ==&gt; Phix) produces runnable code.<br>
          It will never be character-perfect:<br>
          Some mid-expression comments may be dropped, due to difficulties storing them in the parse tree.<br>
          Parenthesis is re-constituted, some unnecessary may be dropped and some clarifying may be added.<br>
          Likewise indentation goes through a whole slew of (undocumented/ad-hoc) rules of its own.<br>
          a &= b ==&gt; a = $conCat(a,b) ==&gt; a = a & b<br>
          #1234 ==&gt; 0x1234 ==&gt; 0x1234, and the same for all other non-decimal bases, eg 0b, etc.<br>
          
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
