<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">object</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          object <i>identifier</i>
          <br>
          <i>-- or --</i>
          <br>
          <a href="integer.htm#bool">bool</a> b = object(object x)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            This serves to define the object type. <br>
            You can also call it like an ordinary function to test if x is of type object. <br>
            This will always be true for all legal values of x, be that <a href="integer.htm">integer</a>, 
            <a href="atom.htm">atom</a>, <a href="string.htm">string</a>, 
            or <a href="sequence.htm">sequence</a>, so object() will always return <a href="logicops.htm#tf">true</a> (1), except when x is unassigned.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported, however JavaScript is a <i><a href="glossary.htm#typeless">typeless</a></i> language, with 
          "<i><code>object o</code></i>" being <a href="mappings.htm">mapped</a> to "<i><code>let /*object*/ o;</code></i>". 
          An explicit hll/Phix "if object(x)" and similar expressions all work under pwa/p2js exactly as expected.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            All <a href="usingtypes.htm">predefined</a> and <a href="usingtypes.htm#type">user-defined types</a> can also be used as
            functions to test if a value is legal for that type. <br>
            In previous versions of Phix, object(x) would crash when x was unassigned, but now yields <a href="logicops.htm#tf">false</a> (0).
         </td>
        </tr>
<!--
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
-->
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
? object({1,2,3})   -- always prints 1
</eucode-->
<pre>
<font color="#0000FF">?</font><font color="#004080"> object</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#000000">3</font><font color="#800000">}</font><font color="#0000FF">)  </font><font color="#000080"><i> -- always prints 1</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            There is a generic version of the object function implemented as :%opObj in builtins\VM\pType.e that the compiler only invokes as a last resort, 
            preferring instead to inline that functionality if the argument is known to be assigned or the result variable, if any, is known to be an integer, 
            ie does not require decref/dealloc. The compiler may also completely omit the test and/or any related code, if type inference/propagation determines 
            that the result will always be <a href="logicops.htm#tf">true</a> or always <a href="logicops.htm#tf">false</a>.<br>
            The file pwa/p2js.js defines object() with an optional name parameter, which if not "" triggers unassigned errors, but that (parameter) is not 
            intended for or available from hll/Phix code, and only meant for use in manually hand-crafted replacements elsewhere 
            in p2js.js, and in practice it ended up being invoked (that way) rather more sparingly than first predicted.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="atom.htm">atom</a>,
          <a href="integer.htm">integer</a>,
          <a href="sequence.htm">sequence</a>,
          <a href="string.htm">string</a>,
          <a href="language.htm">Core Language</a>
         </td>
        </tr>
       </table>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
