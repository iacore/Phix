<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">open_dll</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            <a href="atom.htm">atom</a> a = open_dll(<a href="sequence.htm">sequence</a> s)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Open a Windows dynamic link library (.dll) file, or a Linux shared library (.so) file. <br>
            A base address will be returned, or 0 if the file cannot be found. <br>
            The parameter s can be a string representing a relative or an absolute file name, or a sequence of such. <br>
            On Windows the normal search path is used for for locating .dll files.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            The value returned by open_dll() can be passed to <a href="define_c_proc.htm">define_c_proc</a>(), 
            <a href="define_c_func.htm">define_c_func</a>(), or <a href="define_c_var.htm">define_c_var</a>().
          <br>
          <br>
            You can open the same .dll or .so file multiple times.
            No extra memory is used and you will get the same address returned each time.
          <br>
          <br>
            Phix closes the .dll or .so for you automatically at the end of execution.
          <br>
          <br>
            A 32-bit application can only open 32-bit dll/so files, and likewise a 64-bit application
            can only open 64-bit dll/so files. On 64-bit windows, somewhat confusingly, 64-bit dlls 
            are typically kept in C:\Windows\System32, while 32-bit dlls are stored in C:\Windows\SysWOW64.
            They can also just be kept in the application directory, and sometimes in Phix\builtins, and
            in the case of <a href="pGUI.htm">pGUI</a> the windows dlls are kept in demo\pGUI\win32 and win64 directories.
          <br>
          <br>
            On windows, it is useful, but not mandatory, to explicitly identify .dll files with a bit size,
            eg libcurl32.dll and/or libcurl64.dll, or even say libcurl-7.57.0-32.dll. For standalone dlls,
            such renaming is usually fine, however it may prevent inter-dependent dlls from loading.<br>
            On linux, .so files are typically built/installed by a package manager or script, and it is 
            generally unwise to attempt similar renaming tricks manually (or worry about where they were
            installed).
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
atom user32 = open_dll("user32.dll")
if user32=0 then
    puts(1, "Could not open user32.dll!\n")
end if
</eucode-->
<pre>
<font color="#000000"></font><font color="#004080">atom</font><font color="#000000"> user32</font><font color="#0000FF"> =</font><font color="#7060A8"> open_dll</font><font color="#0000FF">(</font><font color="#008000">"user32.dll"</font><font color="#0000FF">)
</font><font color="#008080">if</font><font color="#000000"> user32</font><font color="#0000FF">=</font><font color="#000000">0</font><font color="#008080"> then
</font><font color="#7060A8">    puts</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000"> "Could not open user32.dll!\n"</font><font color="#0000FF">)
</font><font color="#008080">end if</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\VM\pcfunc.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="define_c_func.htm">define_c_func</a>,
          <a href="define_c_proc.htm">define_c_proc</a>,
          <a href="define_c_var.htm">define_c_var</a>,
          <a href="c_func.htm">c_func</a>,
          <a href="c_proc.htm">c_proc</a>,
          <a href="ccall.htm">Calling C Functions</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            On Linux (unlike Windows), should define_c_func/proc be passed 0/NULL for the library, it automatically searches all open shared libraries.<br>
            Some legacy code contains open_dll(""), which is quite obviously utterly pointless (it just returns 0/NULL). <br>
            You should also note that p (as in the Linux version of p.exe) depends on libc and libdl (you can check that using demo/pGUI/filedump.exw), 
            whereas Euphoria&rsquo;s eui also relies on libm, and hence you may find some old Euphoria code, which uses that "trick" to declare libm 
            functions, will not work on Phix - and of course that can normally be rectified simply by replacing <code>libm = open_dll("")</code> 
            with/adding <code>libm = open_dll("libm.so")</code>.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
