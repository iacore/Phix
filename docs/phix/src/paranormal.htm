<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Paranormalised Functions</h1>
      <div id="mainSection">
        Several routines perform a little trickery that, once you get used to the idea, make them easier to use. For example this help contains:
        <br>
        <br>
        <small>
        <code>
        <a href="IupButton.htm">IupButton</a>(<a href="string.htm">nullable_string</a> title=NULL, 
                                              [[<a href="string.htm">nullable_string</a> action=NULL,] 
                                              <a href="Icallback.htm">cbfunc</a> func=NULL,] 
                                              <a href="string.htm">string</a> attributes="", 
                                              <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})</code>
        <br>
        <br>
        <code>
        <a href="IupText.htm">IupText</a>([[<a href="string.htm">nullable_string</a> action=NULL,] 
                                          <a href="Icallback.htm">cbfunc</a> func=NULL,] 
                                          <a href="string.htm">string</a> attributes="", 
                                          <a href="html/glossary.htm#dwordseq">dword_seq</a> args={})
        </code>
        </small>
        <br>
        <br>
        The idea is that [action, func] are doubly-optional. Any items before the "[[" are element-specific; this note covers the handling of 
        {action,func,attributes,args}. If you want to provide any of the parameters after the "[[", you must provide everything before it, 
        unless using <a href="procedures.htm#namedparams">named parameters</a>. I made up the term paranormalise as a jokey way to explain that 
        you have more flexibility than normal in how you can provide the parameters. In short you can assume the following are all valid:
        <small>
 <pre>
    IupButton()                                   [NB title/NULL must be provided in all other cases]
    IupButton(title)
    IupButton(title,action,func)                             [NB func is /not/ optional in this case]
    IupButton(title,func)
    IupButton(title,attributes[,args])
    IupButton(title,func,attributes[,args])
    IupButton(title,action,func,attributes[,args])                         [ditto: func not optional]</pre>
        </small>
        You can imagine the same less "title" for <a href="IupText.htm">IupText</a>.<br>
        Note that, unless using <a href="procedures.htm#namedparams">named parameters</a>, you cannot change the order, eg:
        <small>
 <pre>
    IupButton(title,attributes[,args][,action],func)            -- !INVALID!
    IupButton(title,func,attributes,args,action)                -- !Stop this madness!
    IupButton(action,attributes,args,func,title)                -- !You're being silly now!
    IupButton(attributes:="FLAT=YES",func:=ok_cb,title:="OK")   -- but this is fine </pre>
        </small>
        The action and func parameters are actually declared as <a href="object.htm">object</a>, attributes as 
        <a href="sequence.htm">sequence</a>, and args as <a href="html/glossary.htm#dwordseq">dword_seq</a>,
        but manually and thoroughly verified to be of the documented types, after they have all been repositioned.
        See pGUI.e/paranormalise() for the precise details of this handling, which is of course absolutely identical
        across all the interface elements that use it, plus a full set of unit tests. Same in pGUI.js, less the tests.
        <br>
        <br>
        There is an underlying assumption that if func is NULL then action is meaningless; what that specifically
        means is <code>IupButton(title,action,func)</code> is ok, however <code>IupButton(title,action)</code> is not 
        supported - it would in fact be misinterpreted as <code>IupButton(title,attributes)</code>. (In general the
        ability to override action names is discouraged and sometimes outright prohibited in pGUI, as below.)
        <br>
        <br>
        If any of this troubles you, just provide the full set of parameters every time, and re-visit this once you 
        get bored with that. Alternatively, break the line up into several discrete statements, ie/eg:
        <small>
 <pre>
    Ihandle button = IupButton([title])
    IupSetCallback(button, <i>"action name"</i>, Icallback(<i>"function name"</i>)) 
    IupSetAttributes(button, attributes[, args]) 
    IupSetAttribute(button, name, v) </pre>
        </small>    
        Of course when you are not entirely sure which attributes are needed, multiple calls to <a href="IupSetAttribute.htm">IupSetAttribute</a>
        are easier to comment in/out for testing, and multiple callbacks can only be set via <a href="IupSetCallback.htm">IupSetCallback[s]</a> anyway.
        <br>
        <br>
        What this mechanism really attacks is the use of nested <a href="IupSetCallback.htm">IupSetCallbackf</a>() and 
        <a href="IupSetAttributes.htm"><span class="illegal">IupSetAttributesf</span></a>(), with all the extra parenthesis 
        and indentation that requires, which can get real ugly real fast.
<!-- DEV (IDE/plade)
It also provides a unified and consistent mechanism for declaring interface elements, which greatly simplifies Edix/Tools/Window Painter.
-->
        <br>
        <br>
        Admittedly paranormalisation is less useful on more complex elements and containers, especially if there are
        multiple callbacks required, or no callbacks at all, or any slightly fiddly or non-string attributes.
        This mechanism has not been applied where it has not yet proved useful, for example <a href="IupMatrix.htm">IupMatrix</a>, 
        <a href="IupTree.htm">IupTree</a>, and <a href="IupRadio.htm">IupRadio</a>. 
        In fact I originally made <a href="IupDialog.htm">IupDialog</a> paranormalised, before realising that was not helpful.
        <br>
        <br>
        Technicalia: Most elements have more than one callback, and the action name is used to distinguish them - see 
        the documentation of the specific interface element. pGUI replaces a NULL action name with "ACTION", which is
        suitable for <a href="IupButton.htm">IupButton</a>, <a href="IupCanvas.htm">IupCanvas</a>, 
        <a href="IupList.htm">IupList</a>, <a href="IupMenuItem.htm">IupMenuItem</a>(aka IupItem), 
        <a href="IupText.htm">IupText</a>, and <a href="IupToggle.htm">IupToggle</a>, but meaningless
        on most other elements. The C API strongly implies you can override "ACTION" (or "ACTION_CB") with a name of 
        your choosing on selected interface elements: I cannot see that as useful (in my personal opinion it probably 
        originates from a pre-<a href="IupSetAttributeHandle.htm">IupSetAttributeHandle</a> era, when all handles had 
        to be explicitly named and set via two or even three separate function calls, and/or the deprecated combination
        mentioned in the Notes of <a href="IupSetCallback.htm">IupSetCallback</a>()), and pGUI effectively prohibits it.
        <br>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
