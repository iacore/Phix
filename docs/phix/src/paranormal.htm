<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Paranormalised Functions</h1>
      <div id="mainSection">
        Several routines perform a little trickery to make them (once you get used to the idea) easier to use, for example this documentation contains
 <pre>
        IupButton(nullable_string title=NULL, [[nullable_string action=NULL,] atom func=NULL,] string attributes="", sequence data={}) </pre>

        the idea being that [action, func] are doubly-optional. Items before the "[[" are element-specific; this note covers the handling 
        of {action,func,attributes,data} [afad]. I made up the term paranormalise as a jokey way to explain that you have more flexibility 
        than normal in how you can provide the parameters. In short you can assume:
 <pre>
        IupButton()       [NB title/NULL must be provided in all other cases]
        IupButton(title)
        IupButton(title,action,func) [NB func is /not/ optional in this case]
        IupButton(title,func)
        IupButton(title,attributes[,data])
        IupButton(title,func,attributes[,data])
        IupButton(title,action,func,attributes[,data])</pre>

        are all valid. Note that (unless using named parameters) you cannot change the order [afad], eg:
 <pre>
        IupButton(title,attributes[,data][,action],func)    -- !INVALID!
        IupButton(title,func,attributes,data,action)        -- !Stop this madness!
        IupButton(action,attributes,data,func,title)        -- !You're being silly now! </pre>

        The action and func parameters are actually declared as object, attributes as sequence, and data as dword_seq,
        but manually and thoroughly verified to be of the documented types, after they have all been repositioned.
        See pGUI.e/paranormalise() for the precise details of this handling, plus a full set of unit tests.
        <br>
        <br>
        There is an underlying assumption that if func is NULL then action is meaningless; what that specifically
        means is <code>IupButton(title,action,func)</code> is ok, however <code>IupButton(title,action)</code> is not 
        supported - it would in fact be misinterpreted as <code>IupButton(title,attributes)</code>. (In general the
        ability to override action names is discouraged and sometimes outright prohibited in pGUI, as below.)
        <br>
        <br>
        If any of this troubles you, just provide the full set of parameters every time, and re-visit this once you 
        get bored with that. Alternatively, break the line up into several discrete statements, ie/eg:
        <pre>
        Ihandle button = IupButton([title])
        IupSetCallback(button, <i>"action name"</i>, Icallback(<i>"function name"</i>)) 
        IupSetAttributes(button, attributes[, data]) 
        IupSetAttribute(button, name, v) </pre>
        
        Of course when you are not entirely sure which attributes are needed, multiple calls to IupSetAttribute are
        easier to comment in/out for testing, and multiple callbacks can only be set via IupSetCallback anyway.
        <br>
        <br>
        What this mechanism really attacks is the use of nested IupSetCallbackf() and IupSetAttributesf(), with all
        the extra paraenthesis and indentation that requires, which can get real ugly real fast.
        <br>
        <br>
        Technicalia: Most elements have more than one callback, and the action name is used to distinguish them - see 
        the documentation of the specific interface element. pGUI replaces a NULL action name with "ACTION", which is
        suitable for IupButton, IupCanvas, IupList, IupMenuItem(aka IupItem), IupText, and IupToggle, but meaningless
        on most other elements. The C API strongly implies you can override "ACTION" (or "ACTION_CB") with a name of 
        your choosing on selected interface elements: I cannot see that as useful, and pGUI effectively prohibits it.
        <br>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
