<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Perl/Raku operators</h1>
      <div id="mainSection">
        In Perl, anything is a one-liner if you know the 
        <a href="javascript:ExternalLink('ext773','http://www.ozonehouse.com/mark/periodic/Periodic%20Table%20of%20the%20Operators%20A4%20300dpi.jpg');"
           id="ext773" style="color:#9B5565">magic operator</a>
        (the original from five years earlier can still be seen 
        <a href="javascript:ExternalLink('ext774','http://www.ozonehouse.com/mark/blog/code/PeriodicTable.pdf');"
           id="ext774" style="color:#9B5565">here</a>)
        - an amusing "periodic table" of the Perl/Raku operators, their <a href="precedence.htm">precedence</a> levels and, well, judge for yourself.
<!--
        You can find (some) Raku operators 
        <a href="javascript:ExternalLink('ext827','https://docs.raku.org/language/operators');"
           id="ext827" style="color:#9B5565">here</a>.
-->
        <br>
        <br>
        More than once I have fretted that Phix does not (for instance) have an infix exponentiation operator, but relies on the 
        <a href="power.htm">power</a>() function, and just as often found evidence of people struggling with the subtle differences of an infix form, 
        esp. between various different programming languages, eg is <code>-5^2</code> the same as <code>(-5)^2</code> or <code>-(5^2)</code> (trust me, 
        it is [consistent within each programming language but overall] pretty much 50:50, aka utterly random), whereas of course and in contrast there 
        can be absolutely no doubt whatsoever about the exact meaning of either <code>power(-5,2)</code> or <code>-power(5,2)</code>.
        <br>
        <br>
<!--
        If you think I&rsquo;m being silly, I am, because of course Raku, being Raku, allows you to override the precedence of <i>any</i> operator 
-->
        Of course Raku, being Raku, the <small><i>&lt;ahem&gt;</i></small> "programming language" formerly known as Perl 6 (RIP Prince), allows you to 
        override the precedence of <i>any</i> operator (essentially by re-implementing it) and therefore any component can <i>willfully</i> introduce 
        subtle and nearly impossible to track and trace bugs into <i>any</i> other part of the application. The same can be said for Ruby.
        Code that works perfectly in one application simply won&rsquo;t work in another. Neat.
        <br>
        <br>
        The argument that no sane programmer would ever do that does not convince me: I have seen the internet.
        <br>
        <br>
        <small><i>Ermmm... Hang on a minute... OK sunshine, if no-one is ever going to use it...</i></small>
<!--
        <br>
        <br>
        On the plus side, that diagram makes me feel a whole lot less guilty about dragging my heels over assigning 
        <a href="precedence.htm">precedences</a> to && || &gt;&gt; and &lt;&lt;. (in 0.8.2)
-->
        <br>
        <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
