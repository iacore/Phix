{{Infobox programming language
| name = Phix
| logo = [[File:Phixlogo32.png|Phix logo]]
| caption = Phix logo
| paradigm = [[Imperative programming|Imperative, procedural]], [[object-oriented programming|object-oriented]]
| released = {{Start date and age|2006}}
| developer = Pete Lomax
| latest release version = 0.8.2
| latest release date = {{Start date and age|2020|11|24}}
| typing = [[Type_system#Static_type_checking|static]], [[Type_system#Dynamic_type_checking_and_runtime_type_information|dynamic]], [[Strong and weak typing|strong]], [[Duck typing|duck]]
| programming_language = [[Self-hosting_(compilers)|self-hosted]]
| operating system = [[Microsoft Windows|Windows]], [[Linux]], [[#Hello world, GUI|Browser]]
| genre = [[Interpreted language]] or [[compiled language]]
| license = [[Open_Software_License|Open Software License 3.0]] / [[Academic_Free_License|Academic Free License 3.0]]
| file_ext = .e, .ex, .exw, .edb
| influenced by = [http://openeuphoria.org/ Euphoria]
| website = {{URL|phix.x10.mx}}
}}
'''Phix'''  is the [[Open_source|open source]], [[Self-hosting_(compilers)|self-hosted]], [[Interpreted language|interpreted]] and [[compiled language|compiled]] [[programming language]] that emphasizes simplicity and programmer friendly error messages.
==History==
Phix was released in 2006 based on the [[Euphoria_(programming_language)|Euphoria]] programming language written by Robert Craig in 1993.
In 2013 Phix was re-written to replace the closed-source [[FASM]] back-end with open-source inline assembly.
==Overview==
Phix.<ref>{{cite web |url=http://www.worldsoftcat.com |title=Phix|accessdate=2021-01-10}}</ref>
is designed to be simple, clear, and generic. The goal of Phix is to make writing programs, and then debugging easier.
Phix is a hybrid
<ref>{{cite web|url=http://phix.x10.mx/pmwiki/pmwiki.php|title=Phix docs hybrid|accessdate=2021-01-10}}</ref>
interpreter/compiler:
* As an ''interpreter'':
**{{mono| p hello.exw}}
** Phix reads, parses, makes executable code, and then executes it (directly from memory).
* As a ''compiler'':
** {{mono| p -c hello.exw}}
** Duplicates interpreting, and saves the executable code to a file.
** You can run the saved program at any time (and ship it, without need for Phix anymore).
The is no extra step of a [[virtual machine]] interpreting [[bytecode]] as with [[Python]]. While compiling, some additional optimizations may be found, so a compiled program may run faster than an interpreted program.
Phix extends the Euphoria tradition
<ref>{{cite web|url=http://www.linuxformat.com/includes/download.php?PDF=LXF176.code_oeuphoria.pdf|title=LinuxFormat|accessdate=2021-01-10}}</ref>
of "fast to read, fast to pickup and fast to run".
===Design features===
For new programmers:
* Available for [[Microsoft Windows|Windows]] and [[Linux]], in both 32 and 64 bit versions.
* The Windows installation includes a complete [[graphical user interface]] pGUI <ref >{{cite web|url=http://phix.x10.mx/docs/html/pGUI.htm|title=pGUI documentation|accessdate=2020-12-31}}</ref> <ref >{{cite web|url=http://webserver2.tecgraf.puc-rio.br/iup/|title=IUP|accessdate=2020-12-31}}</ref>out of the box.
* The [[compiler]] generates executable binary files directly without the need to install any other compiler or linker; re-compiles itself by typing {{mono|p -cp}}.
* Compiler and run-time errors are made as human-readable as possible, and always include the offending source file name and line number.
* The five primitive data types.
* Explicitly tagged ends, such as {{mono|if ... then ... end if}} catch mores errors and avoids problems like the [[Dangling_else|dangling else]].
* Strings are fully mutable with variable length slice substitution. Sequences can grow and shrink at will with no manual housekeeping.
* Consistent operators such that {{mono|&}} operator always concatenates, and the {{mono|+}} operator always adds unlike JavaScript<ref >{{cite web|url=https://en.wikipedia.org/wiki/JavaScript#Weakly_typed|title=Javascript + operator|accessdate=2021-01-09}}</ref>
* Lots of examples: PCAN<ref >{{cite web|url=http://phix.x10.mx/pmwiki/pmwiki.php|title=PCAN|accessdate=2021-01-16}}</ref>online archive, 500 bundled demos, and over 1250 entries on Rosettacode <ref >{{cite web|url=https://rosettacode.org/wiki/Category:Phix|title=Phix on Rosetta Code|accessdate=2021-01-14}}</ref>
For experienced programmers:
* Automatic [[Garbage collection (computer science)|garbage collection]]; available even for manually allocated raw memory
* Run-time checking for out-of-bounds subscripts, uninitialized variables, inappropriate types.
* A [[Debugger|debugger]] provides single-stepping and the ability to enable/disable on selected blocks/files
* Execution [[Profiling_(computer_programming)|profiling]]
* The {{mono|switch}} statement requires an explict {{mono|fallthrough}} statement which avoids need for continuous {{mono|break}} statements
* A simple built-in [[database]] <ref >{{cite web|url=http://phix.x10.mx/docs/html/database.htm|title=database documentation|accessdate=2020-12-31}}</ref>and SQlite <ref >{{cite web|url=http://www.sqlite.org|title=SQLite|accessdate=2021-01-14}}</ref>, <ref >{{cite web|url=http://phix.x10.mx/docs/html/pSQLite.htm|title=pSQLite documentation|accessdate=2021-01-14}}</ref> wrappers.
* Components such as ipc<ref >{{cite web|url=http://phix.x10.mx/docs/html/ipc.htm|title=ipc documentation|accessdate=2021-01-14}}</ref>, [[JSON|json]] <ref >{{cite web|url=http://phix.x10.mx/docs/html/json.htm|title=json documentation|accessdate=2021-01-14}}</ref> , curl <ref >{{cite web|url=http://phix.x10.mx/docs/html/libcurl.htm|title=libcurl documentation|accessdate=2021-01-14}}</ref>, zip <ref >{{cite web|url=http://phix.x10.mx/docs/html/LiteZip.htm|title=LiteZip documentation|accessdate=2021-01-14}}</ref>,gmp <ref >{{cite web|url=http://phix.x10.mx/docs/html/mpfr.htm|title=gmp/mpfr documentation|accessdate=2021-01-14}}</ref>, regular expressions <ref >{{cite web|url=http://phix.x10.mx/docs/html/regex.e.htm|title=regex documentation|accessdate=2021-01-14}}</ref>, sockets <ref >{{cite web|url=http://phix.x10.mx/docs/html/sockets.htm|title=sockets documentation|accessdate=2021-01-14}}</ref>, and unit testing <ref >{{cite web|url=http://phix.x10.mx/docs/html/unit_test.htm|title=unit test documentation|accessdate=2021-01-14}}</ref>
==Types==
Phix only needs five [[Primitive data type|primitive data types]]:
<pre>
            ┌────────┐
          ┌─┤ object ├─┐        ✼ Five primitive data-types
          │ └────────┘ │
          │            │
        number     sequence
          │            │
        integer      string
      └──────────┬─────────┘
                 │              ✼ Write your own ''type''
                type              to limit permitted values
    └────────────┬───────────┘
              struct            ✼ Reference data-types
              class               provide dot-notation and OOP
</pre>
Phix has a novel view of data-types;
<ref >{{cite web|url=http://phix.x10.mx/pmwiki/pmwiki.php|title=Phix docs|accessdate=2021-01-10}}</ref>
you can do anything with just five data-types. All values are objects, "a constituent that is acted upon," while a data-type "limits permitted values." That makes a Phix {{mono|object}} the ''unlimited'' data-type.
There are only two distinct data-types you must learn: number and sequence.
* An {{mono|object}} is any value: number or sequence
* A {{mono|number}} is an integer or a floating point numeric value
** An {{mono|integer}} is a whole number (in the range ±1,000,000,000 )
** ( An {{mono|integer}} is also a {{mono|number}} )
* A {{mono|sequence}} is a list of objects, of any length, and of any nesting level.
** A {{mono|string}} corresponds to UTF8 encoding; a list of character or byte values
** ( A {{mono|string}} is also a {{mono|sequence}} )
A {{mono|type}} is a user defined data-type. It is used to declare variables and for type-checking values as programs execute.
Because it is programmable, you can add extra features beyond type-checking. For example, you could issue user created error messages.
The reference data-types, {{mono|struct}} and {mono|class}}, deliver dot notation and OOP behavior.
The complexity of memory allocation and de-allocation is hidden and handled automatically by reference counting.
The programmer only sees that data-types appear to be simple.
==Indexing==
The {{mono|sequence}} is fundamental to the simplicity of Phix. Phix uses 1-based indexing because:
* the first item is indexed is 1
* the last index n is equal to the length of the sequence
* numbering from the head {{mono|1 ... n}}  is symmetrical to numbering from the tail {{mono|-n ... -1}}
* when searching for an item, an index value of 0 means "item not found"
* a slice is inclusive from the first index to the last index
* there are no off-by-one complications as found with 0-based indexing
Sequences with mixed values and strings work the same; both sequences and strings are mutable.
There have been many debates
<ref >{{cite web|url=https://www.jsoftware.com/papers/indexorigin.htm|title=Is Index Origin 0 a Hindrance? Roger Hui|accessdate=2021-01-09}}</ref>
<ref >{{cite web|url=https://groups.google.com/forum/?hl=en#!topic/julia-dev/tNN72FnYbYQ|title=Thread on Julia google groups|accessdate=2021-01-09}}</ref>
<ref >{{cite web|url=https://hisham.hm/2021/01/18/again-on-0-based-vs-1-based-indexing/|title=Again on 0-based vs. 1-based indexing|accessdate=2021-01-20}}</ref>
<ref >{{cite web|url=https://andregarzia.com/2021/01/lua-a-misunderstood-language.html|title=Lua, a misunderstood language|accessdate=2021-01-20}}</ref>
about the use of 0-based compared to 1-based indexing.
Pointer based languages, and pointer arithmetic, as described by
<ref >{{cite web|url=https://docs.google.com/document/d/11ZKaR0a6hvc6xmYLfmslAAPnkVRSZFGz5GZYRNmxmsQ/edit|title=Indexing of Arrays: 0 vs 1|accessdate=2021-01-17}}</ref>
by [[Edsger_W._Dijkstra|Edsger W. Dijkstra]], have their place.
Phix has no pointers and has no need for 0-based indexing.
<pre>
-- is a line comment
// is also a line comment
//              1   2   3   4   5    -- index head to tail
sequence s = { 10, 20, 30, 40, 50 }
//             -5  -4  -3  -2  -1    -- index tail to head
// one item
    ? s[2]
    ? s[-4]
                -- output for both is:
    ----->  30
// slice of one item
    ? s[2..2]
    ? s[-4..-4]
                -- output for both is:
    -----> {30}
// inclusive slice
    ? s[2..4]
    ? s[-4..-2]
                -- output for both is:
    -----> {30,40,50}
// empty sequence
    ? s[3..2]
    ? s[-3..-4]
                -- output for both is:
    -----> {}
// insert
    s[3..2] = {99}
    ? s
    -----> {10,20,99,30,40,50}
// prepend and append
    s = { 10,20,30,40,50 }
    s[1..0] = {0}               -- prepend
    s[$+1..$] = {6}             -- append
    ? s
    -----> {0,10,20,99,30,40,50,6}
    s[0..-1] = {9999}           -- append
    ? s
    -----> {0,10,20,99,30,40,50,6,9999}
// delete
    s = { 10,20,30,40,50 }
    s[2..2] = {}        -- item deleted
    ? s
    -----> {10,30,40,50}
    s[2..3] = {}        -- slice deleted
    ? s
    -----> {10,50}
</pre>
The ''virtual space'' between items {{mono|2}} and{{mono|3}} is indexed as {{mono|s[3..2]}}; this is where you can insert one item, or splice (concatenate) a sequence.
Assigning a slice to an empty sequence {{mono|{}}} deletes that slice. Use {{mono|$}} as a shorthand for {{mono|length(s)}}.
You may now use {{mono|s[1..0]}} to prepend a value to the head of sequence, and {{mono|s[$+1..$]}} or even {{mono|s[0..-1]}} to append a value to the tail of a sequence.
In "What&rsquo;s the big deal? 0 vs 1 based indexing"
<ref >{{cite web|url=https://discourse.julialang.org/t/whats-the-big-deal-0-vs-1-based-indexing/1102|title=What&rsquo;s the big deal? 0 vs 1 based indexing|accessdate=2021-01-14}}</ref>
Steven Sagaert provides a simple explanation (for [[Julia_(programming_language)|Julia]]):
<blockquote>
 That&rsquo;s exactly it.
 1-based indexing is actual indexing like in mathematics,
 while 0-based “indexing” isn&rsquo;t indexing at all but pointer arithmetic.
 This comes from C where an array is just syntactic sugar for a pointer.
</blockquote>
One-based indexing provides: intuitive and comprehensive operations
[[https://en.wikibooks.org/wiki/Non-Programmer%27s_Tutorial_for_Python_3]] not possible with 0-based indexing), and that work identically for sequences and strings.
==Parameter passing==
All arguments are used as if they are passed as [[Call_by_value|pass-by-value]].
An {{mono|integer}} is passed by value, whereas {{mono|number}}, {{mono|sequence}}, and {{mono|string}} are passed by reference with [[Copy-on-write| copy-on-write]] semantics. This gives the performance benefits of [[Evaluation strategy| pass-by-reference]] but with the simple behavior of pass-by-value.
<pre>
function set55(sequence s)
   s[5][5] = 5
   return s
end function
sequence a,b
// Case I
a = repeat(repeat(0,5),5) -- a 5x5 matrix
? a
    --> {{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}
// Case II
b = a
? b
    --> {{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}
// Case III
b = set55(a)
? b
    --> {{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,5}}
</pre>
In Case I, sequence {{mono|a}} is item {{mono|{0,0,0,0,0}}} and four pointers to this item. No un-needed duplication occurs.
In Case II, sequence {{mono|b}} is a pointer to {{mono|a}}. No copying occurs.
In Case III, sequence {{mono|a}} is unaltered. The unchanged items of {{mono|b}} (that is {{mono|b[1..4]}}) still point to {{mono|a}} and only {{mono|b[5]}} is actually changed.
Here {{mono|a}} and {{mono|b}} end up looking quite different but in fact still share 80% of their (lowest-level) contents.
====Automatic PBR optimization====
It is idiomatic use a sequence as an argument to a function and then immediately assign the result back to that sequence:
<pre>
function chop( sequence a )
    for i=1 to length(a) do
        a[i] = truncate(a[i])
    end for
    return a
end function
sequence a = { 1.1, 2.2, 3.3, 4.4, 5.5 }
a = chop(a)
? a
    --> { 1,2,3,4,5}
</pre>
Here the compiler applies a special optimization to make the local variable undefined over the call,
leaving the parameter with a reference count of 1 and therefore amenable to in-situ modification.
In general, when parameters are modified ''locally'' (within the routine), sequences and sub-sequences are implemented very efficiently,
because of [[copy-on-write]] semantics.
====Reference types====
In contrast {{mono|dictionary}}, {{mono|struct}}, and {{mono|class}} instance parameters are more accurately described as pass-by-reference, similar to Java
<ref >{{cite web|url=http://www.javadude.com/articles/passbyvalue.htm|title=Java is Pass-by-Value, Dammit!|accessdate=2021-01-17}}</ref>
<pre>
class mytest
  public string s
end class
procedure change(mytest c, d)
  c = new({"c"})
  d.s = "d"
end procedure
mytest
    a = new({"a"}),
    b = new({"b"})
change(a,b)
? a.s --> "a"
? b.s --> "d"
</pre>
* The parameter {{mono|c}} points to the argument {{mono|a}}. The assignment of {{mono|c}} to {{mono|new()}}, disconnects it from the argument, making {{mono|c}} an independent variable. Changes to {{mono|c}} are not visible in {{mono|a}}.
* The parameter {{mono|d}} points to the argument {{mono|b}}; changes to {{mono|d}} are visible in {{mono|b}}.
The statement {{mono|delete(c)}} within the {{mono|change}} procedure would cause the destruction of {{mono|c}}, which in turn, would cause {{mono|a.s}} to be destroyed. References to {{mono|a.s}} would then crash Phix.
==Examples==
Line comments start with a double hyphen {{mono|--}} or a C-style {{mono|//}} and continue to the end of line.
Block comments start with {{mono|/*}} and finish with {{mono|*/}}.
====Hello world, console====
<pre>
puts(1, "Hello, World!\n")
</pre>
====Hello world, gui====
<pre>
include pGUI.e
IupOpen()
IupShow(IupDialog(IupVbox({IupLabel("World!")},"MARGIN=90x20"),"TITLE=Hello"))
if platform()!=JS then
  IupMainLoop()
  IupClose()
end if
</pre>
<gallery widths="217px" heights="87px" mode=nolines>
File:phix-hwwin.png|Windows desktop
File:phix-hwlnx.png|Linux desktop
</gallery>
====Simple function====
<pre>
include pGUI.e  -- for CD_DEG2RAD
function deg_to_rad(number deg)
    return deg*CD_DEG2RAD
end function
?deg_to_rad(180)        -- outputs 3.141592654
{} = deg_to_rad(360)    -- explict discard rqd
</pre>
====User defined types====
<pre>
type index(object x)
    return integer(x) and x>0
end type
index ndx = 5
ndx = -2    -- run-time error "type check failure, ndx is -2", plus source code file name and line number
</pre>
User defined types are used primarily for validation and debugging purposes, rather than being fundamentally different to the five core builtin types.
====String mutation====
Strings and sequences have the same behavior. Strings are fully mutable, with variable length slice substitution:
<pre>
string s = "food"  ?s   --> outputs "food"
s[2..3] = "e"      ?s   --> outputs "fed"
s[2..1] = "east"   ?s   --> outputs "feasted"
</pre>
====Exception handling====
<pre>
try
   integer i = 1/0
   -- or, for example, throw("file in use")
catch e
   ?e[E_USER]
end try
puts(1,"still running...\n")
</pre>
Output:
<pre>
 "attempt to divide by 0" -- or "file in use"
 still running...
</pre>
====Filtering====
<pre>
function odd(integer a) return remainder(a,2)=1 end function
function even(integer a) return remainder(a,2)=0 end function
?filter(tagset(10),odd)     -- ==> {1,3,5,7,9}
?filter(tagset(10),even)    -- ==> {2,4,6,8,10}
</pre>
====Version control====
<pre>
requires("0.8.2")           -- crashes on 0.8.1 and earlier
requires(WINDOWS)           -- crashes on Linux
requires(64)                -- crashes on 32-bit
</pre>
Specify what versions and/or operating systems are required to run the source code:
In the latter case, if you try to run a 64-bit-only program with a 32-bit interpreter, it will try to locate a suitable 64-bit interpreter and offer to re-run it with that (and vice-versa, for instance the older arwen and win32lib libraries are 32-bit only).
====Unit testing====
<pre>
test_equal(2+2,4,"2+2 is not 4 ====")
test_summary()
</pre>
If all goes well, no output is shown, and the program carries on normally.
You can easily force a summary to be output, quietly create a logfile, etc.
<ref >{{cite web|url=http://phix.x10.mx/docs/html/unit_test.htm|title=unit test documentation|accessdate=2021-01-14}}</ref>
====Error reporting====
When a Phix program crashes, it produces a programmer-readable file,{{mono|ex.err}}, which contains the full call stack and the value of
every variable at that point. These can be quite large, but the most pertinent information is typically at the start of the file.
Error messages are made as clear as possible, for example
<pre>
  C:\Program Files (x86)\Phix\demo\ilest.exw:43 in function strip_comments()
  type check failure, line is {"--","-- builtins/assert.e (an autoinclude)..
</pre>
At that particular point line was supposed to be a string, not a list of strings.
Where possible the compiler tries to pre-empt that kind of run-time error with a compile-time error:
<pre>
  C:\Program Files (x86)\Phix\demo\ilest.exw:43 in function strip_comments()
  line = 5
       ^ type error (storing atom in string)
</pre>
====Source level tracing====
Place {{mono|with trace}} before any block of code you want to step through, and {{mono|without trace}} before any block you want to skip
The program will then run until the condition (}}i=1234}}) is met, before single-stepping through the subsequent code.
[[File:Phix debug.png|Source level tracing in Phix]]
====Type based debugging====
Suppose some table{{mono|t}} has the contents {{mono|{12.35, 15.87, 17.17, ..}}} at some point of failure, but you were expecting {{mono|t[3]}} to be {{mono|17.57}}.
It would normally be very helpful to know where exactly the wrong contents were placed in that table. Edit and re-run with say:
<pre>
--sequence t = {}
type badtable(sequence t)
   if length(t)>=3 and t[3]<17.2 then
      ?9/0
   end if
   return true
end type
badtable t = {}
</pre>
That will crash at the required point, producing an {{mono|ex.err}}, alternatively you could {{mono|trace(1)}} to start source-level tracing instead.
Note that {{mono|without typecheck}} directives in the source code can completely disable this technique.
==Feature summary==
Paradigms: imperative, procedural, optionally object-oriented
Standardized: No, the manual includes the language specification
Type strength: strong
Type safety: safe
Expression of types: explicit, partially implicit
Type compatibility: duck
Type checking: dynamic, static
Parameter Passing Methods Available: copy on write, immutable reference, multiple returns
Garbage collection: Reference counting
Intended use: Application, Educational, General, High-level scripting, Text processing
Design goals: Simplicity, Readability, Ease of use
==Unsupported features==
Phix does not (although most can be emulated) directly support operator/builtin/function overloading, lambda expressions, closures, currying, eval, partial function application, function composition, function prototyping, monads, generators, anonymous recursion, the Y combinator, aspect oriented programming, interfaces, delegates, first class environments, implicit type conversion (of the destructive kind), interactive programming, inverted syntax, list comprehensions, metaprogramming, pointers (other than to raw allocated memory), topic variables, enforced singletons, safe mode, s-expressions, or formal proof construction. The author wryly comments "That should both scare off and attract the right people"
No [[Operator_overloading|operator overloading]] means that {{mono|+}} always adds values.
No [[Function_overloading|function overloading]] refers to there being at most one (polymorphic) version of a routine in a given scope
A simple and compact language is not limiting.  Phix has some 1,277
<ref >{{cite web|url=https://rosettacode.org/wiki/Category:Phix|title=Phix on Rosetta Code|accessdate=2021-01-14}}</ref>
completed Rosettacode
<ref >{{cite web|url=https://rosettacode.org/wiki/Rosetta_Code|title=Rosetta Code|accessdate=2021-01-14}}</ref>
tasks (second
<ref >{{cite web|url=https://rosettacode.org/wiki/Rosetta_Code/Count_examples/Full_list|title=Rosetta Code/Count examples/Full list|accessdate=2021-01-14}}</ref>
only to [[Go (programming language)|Go]]).
==Criticism==
The inline assembly on which Phix is based is x86/64 only, making an ARM port extremely difficult.
The extensive run-time checking, which can increase productivity, incurs an inevitable performance penalty (at times a factor of 8), Type-checking can be reduced with the {{mono|without typecheck}} statement, but not eliminated completely.
Floating point operations typically incur additional indirection and/or memory allocation compared to other languages.
The use of inline assembly to alleviate runtime hotspots is both difficult to understand and poorly documented.
==Comparable languages==
* [[Euphoria_(programming_language)|Euphoria]]
* [[Lua (programming language)|Lua]]
* [[Go_(programming_language)|Go]]
* [[Python (programming language)|Python]]
* [[JavaScript]]
* [[Julia_(programming_language)|Julia]]
* [[REBOL]]
* [[Ruby (programming language)|Ruby]]
==External links==
* {{Official website|http://phix.x10.mx}} Phix (inc free downloads)
* [http://phix.x10.mx/pmwiki/pmwiki.php PCAN] - Phix Contributions & Assorted Nicknacks
* [http://openeuphoria.org/forum/index.wc openEuphoria Forum]
* [https://github.com/petelomax/Phix Phix · GitHub] Development repositories.
* [https://news.ycombinator.com/item?id=22654250 Discussion on ycombinator]
* [https://www.facebook.com/1884586571784596/posts/the-phix-programming-language-httpphixx10mx-comments-httpsnewsycombinatorcomitem/2619456228297623/ Hacker News on facebook link]
* [https://openeuphoria.org/forum/117074.wc Discussion of differences with Euphoria]
* [https://titanwolf.org/Network/Articles/Article?AID=cc9a41b6-4af8-4795-8dc9-d2a88294bd1a#gsc.tab=0 How to implement a program for History variables in Phix]
* [https://drive.google.com/file/d/1OOUkO_zrPZDsqvZDO6pzg9XUZfTAYPyb/view Learn To Phix Programming]
* [https://openeuphoria.org/forum/133546.wc#133546 Phix Tutorial: Basic Sequence Actions]
* [https://openeuphoria.org/forum/133545.wc#133545 Phix Tutorial: Basic Sequence Operations]
* [https://openeuphoria.org/forum/m/117059.wc Comparison of Phix and Euphoria] on OEforum (Nov 2011)
* [https://openeuphoria.org/forum/m/133443.wc Comparison of Phix and Euphoria] on OEforum (Jan 2019)
==Languages implemented in Phix==
* [https://klingphix.jimdofree.com/ Phixmonti and Klingphix] (spanish) see also [http://www.rosettacode.org/wiki/Category:Phixmonti Phixmonti] and [http://www.rosettacode.org/wiki/Category:Klingphix Klingphix]  on rosettacode
==References==
{{DEFAULTSORT:Phix (programming language)}}
[[:Category:Procedural programming languages]]
[[:Category:Cross-platform software]]
[[:Category:Programming languages created in 2006]]
[[:Category:Free educational software]]
== The Phix Programming Language ==
