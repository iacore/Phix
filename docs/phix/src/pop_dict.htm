<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">pop_dict</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          <a href="object.htm">object</a> {key,data} = pop_dict(<a href="integer.htm">integer</a> tid=1,
                                                                <a href="integer.htm#bool">bool</a> rev=<a href="logicops.htm">false</a>)
          <br>
          <i>-- or --</i>
          <br>
          <a href="object.htm">object</a> {key,data} = peep_dict(<a href="integer.htm">integer</a> tid=1,
                                                                 <a href="integer.htm#bool">bool</a> rev=<a href="logicops.htm">false</a>)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Retrieves the lowest (or highest if rev is true) {key,data} in the specified dictionary and in the case of pop_dict deletes it.
            <br>
            <br>
            tid can be omitted, to use the default dictionary, or the result of a previous <a href="new_dict.htm">new_dict</a>() call.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            If the dictionary is empty, returns the default of NULL or as overidden by <a href="setd_default.htm">setd_default</a>().<br>
            Obviously, overidding the default with a suitable 2-element sequence can prevent some crashes when trying to subscript or
            directly assign the key and data from the result, and/or reduce the need for potentially fiddly tests on it or having to
            check that <a href="dict_size.htm">dict_size</a>() is not zero first.
            <br>
            <br>
            There is no push_dict() routine, rather <a href="setd.htm">setd</a>() will add an entry to the dictionary, not at the end 
            of a "queue", but instead at the appropriate location in the dictionary index according to the specified key. For a true
            (in-order-of-addition) queue or stack, simply use a standard Phix <a href="sequence.htm">sequence</a>, and invoke 
            <a href="append.htm">append</a>()/<a href="prepend.htm">prepend</a>() to push items, and slice off the same/other end to
            pop them, depending on the fifo/filo/lifo/lilo type of queue/stack needed.
            <br>
            <br>
            In many cases, a <a href="pqueue.htm">priority queue</a> can be much faster, however there is no (sensible) way as yet to 
            tell whether or not said queue already contains a specific key/priority (it would have to perform a near-full traversal).
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
setd_default({NULL,NULL},mydict)
-- for ... (say)
    if getd_index(key,mydict)=NULL then -- (optional)
        setd(key,data,mydict)
    end if
-- end for
-- ...
-- while ... (say)
    object {key,data} = pop_dict(mydict)
    if key=NULL then exit end if -- mydict empty
-- end while
</eucode-->
<pre>
<font color="#5E005E">setd_default</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#004600">NULL</font><font color="#0000FF">,</font><font color="#004600">NULL</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#000000">mydict</font><font color="#0000FF">)</font>
<font color="#000080"><i>-- for ... (say)</i></font>
<font color="#008080">    if</font><font color="#5E005E"> getd_index</font><font color="#0000FF">(</font><font color="#000000">key</font><font color="#0000FF">,</font><font color="#000000">mydict</font><font color="#0000FF">)=</font><font color="#004600">NULL</font><font color="#008080"> then</font><font color="#000080"><i> -- (optional)</i></font>
<font color="#5E005E">        setd</font><font color="#0000FF">(</font><font color="#000000">key</font><font color="#0000FF">,</font><font color="#000000">data</font><font color="#0000FF">,</font><font color="#000000">mydict</font><font color="#0000FF">)</font>
<font color="#008080">    end if</font>
<font color="#000080"><i>-- end for
-- ...
-- while ... (say)</i></font>
<font color="#004080">    object</font><font color="#0000FF"> {</font><font color="#000000">key</font><font color="#0000FF">,</font><font color="#000000">data</font><font color="#0000FF">} =</font><font color="#5E005E"> pop_dict</font><font color="#0000FF">(</font><font color="#000000">mydict</font><font color="#0000FF">)</font>
<font color="#008080">    if</font><font color="#000000"> key</font><font color="#0000FF">=</font><font color="#004600">NULL</font><font color="#008080"> then exit end if</font><font color="#000080"><i> -- mydict empty
-- end while</i></font>
</pre>
            <br>
            The <a href="getd_index.htm">getd_index</a>() check shown can avoid some unnecessary re-balancing checks, and 
            hence if there is a reasonably high probability that a key already exists, and assuming that if it does either 
            there is no need or you don&rsquo;t want to update the data, then it can be noticeably faster. Conversely if
            there is a fairly low probability that a key already exists, it can prove quite a bit slower.
            <br>
            <br>
            Typically of course there is some kind of loop involved around such calls, it could be the same one.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="new_dict.htm">new_dict</a>,
          <a href="setd.htm">setd</a>,
          <a href="setd_default.htm">setd_default</a>,
          <a href="getd.htm">getd</a>,
          <a href="getd_index.htm">getd_index</a>,
          <a href="deld.htm">deld</a>,
          <a href="dict_size.htm">dict_size</a>,
          <a href="pqueue.htm">pqueue<a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
