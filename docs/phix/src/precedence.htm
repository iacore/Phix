<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Precedence Chart</h1>
      <div id="mainSection">
         The precedence of operators in expressions is as follows:
        <br>
        <br>
<!-- 
<<, >> (bit shift) between +- and &.
==, != should be lower than the other four
&& || (bitwise) after ==, !=, before and/or
-->
          <div id="images" class="images" align="center">
           <table style="border:none; border-collapse:separate; border-spacing: 0 5px;">
            <tbody>
             <tr><td style="border:none;"><nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#009999">highest precedence:</font>&nbsp;&nbsp;</nobr></td>
                 <td style="border:none;">parenthesis/function calls&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</nobr></td>
                 <td style="border:none;"><nobr><i><small>(internal values)</small></i></nobr></td></tr>
             <tr><td style="border:none;"></td>
                 <td style="border:none;">subscripts/slices  .</td>
                 <td style="border:none;"><nobr><i><small>(pSubsc = 11)</small></i></nobr></td></tr>
             <tr><td style="border:none;"></td>
                 <td style="border:none;">unary-  unary+  not   ~</td>
                 <td style="border:none;"><i><small>(pUnary = 10)</small></i></td></tr>
             <tr><td style="border:none;"></td>
                 <td style="border:none;">* /</td>
                 <td style="border:none;"><i><small>(pMuldiv = 9)</small></i></td></tr>
             <tr><td style="border:none;"></td>
                 <td style="border:none;">+ -</td>
                 <td style="border:none;"><i><small>(pAddsub = 8)</small></i></td></tr>
             <tr><td style="border:none;"></td>
                 <td style="border:none;">&gt;&gt; &lt;&lt;</td>
                 <td style="border:none;"><i><small>(pBitshift = 7)</small></i></td></tr>
             <tr><td style="border:none;"></td>
                 <td style="border:none;">&</td>
                 <td style="border:none;"><i><small>(pConcat = 6)</small></i></td></tr>
             <tr><td style="border:none;"></td>
                 <td style="border:none;">&lt;  &gt;  &lt;=  &gt;=</td>
                 <td style="border:none;"><i><small>(pRelops = 5)</small></i></td></tr>
             <tr><td style="border:none;"></td>
                 <td style="border:none;">= !=</td>
                 <td style="border:none;"><i><small>(pEqorne = 4)</small></i></td></tr>
             <tr><td style="border:none;"></td>
                 <td style="border:none;">&& ||</td>
                 <td style="border:none;"><i><small>(pBitops = 3)</small></i></td></tr>
             <tr><td style="border:none;"></td>
                 <td style="border:none;">and   or  xor</td>
                 <td style="border:none;"><i><small>(pLogop = 2)</small></i></td></tr>
             <tr><td style="border:none;"><nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#009999">lowest precedence:</font>&nbsp;&nbsp;</nobr></td>
                 <td style="border:none;">{ , , , }</td>
                 <td style="border:none;"><i><small>(pAllops = 0)</small></i></td></tr>
            </tbody>
           </table>
          </div>
          <div style="clear:both;height:1px;"> </div>
        <br>
        Thus 2+6*3 means 2+(6*3) rather than (2+6)*3. Operators on the same line have equal precedence and are evaluated left to right.
        <br>
        <br>
        The use of explicit parenthesis when <i>mixing</i> anything other than the four main arithmetic <small><code>( * / + - )</code></small>, 
        unary <small><code>( + - not ~ )</code></small> and concatenation <small><code>( & )</code></small> operators is generally advised, 
        except when doing so would be blatently gratuitous, overly tedious, and/or completely unnecessary.
        <br>
        <br>
        The equals symbol ('=', or ':=') used in an <a href="assignment.htm">assignment statement</a> is not an operator, just part of 
        the syntax of the language, whereas it is an operator (same as '==') when used mid-expression. You may prefer to use the ':='
        and '==' forms to avoid any potential ambiguity, albeit such things are normally pretty self-evident from context anyway.
        <br>
       <blockquote>
        In many other languages '=' <b><i>is</i></b> an operator that returns the result of the assignment, allowing and encouraging the 
        infamous and notorious <nobr><small><code>if(a=b)</code></small></nobr> slip-up, an otherwise legal but often mis-typed 
        <nobr><small><code>if(a==b)</code></small></nobr>, which has lead many a programmer <i>desperately</i> resorting to coding all 
        their tests in an awkward and un-natural 'backward' style, eg <nobr><small><code>if('Y'==ch)</code></small></nobr>, which 
        obviously cannot possibly help one iota when comparing two variables anyway.<br>
        In contrast, the only way to achieve an assignment mid-expression in phix would be via a function call, which <i>cannot</i> 
        modify local variables, and due to <a href="shortcircuit.htm">short-circuit evaluation</a> may <i>not even get called</i>. <br>
        Hence that sort of thing is generally discouraged, that is when aiming for clear, intuitive, and readable code. I would also
        note that it is easier to debug <nobr><small><code>integer tmp = <i>&lt;expr&gt;</i>; if tmp</code></small></nobr> and (with 
        a better name) it can be easier/faster to comprehend, while having no real additional overhead compared to the un-named temp 
        that the compiler would otherwise quietly use anyway.
       <br>
       <br>
        In practice, for instance, pLogop causes parsing of <nobr><small><code>a and b and c</code></small></nobr> to pause at the 
        <nobr><small><code>a and b</code></small></nobr> stage, whereas (an outer) pAllops triggers left-association, ie 
        <nobr><small><code>(a and b) and c</code></small></nobr>. Note that I agonised over setting the precedence levels of 
        && || &lt;&lt; and &gt;&gt;, eventually copying from Python/C/JavaScript only to find several expressions still required 
        parenthesis, eg <nobr><small><code>hi << 16 + lo</code></small></nobr> is treated as 
        <nobr><small><code>hi << (16 + lo)</code></small></nobr> rather than the 
        <nobr><small><code>(hi << 16) + lo</code></small></nobr> that was needed and initially expected. 
        Conversely, the (usually) equivalent <nobr><small><code>hi << 16 || lo</code></small></nobr> works the same as 
        <nobr><small><code>(hi << 16) || lo</code></small></nobr> even without the parenthesis, and likewise
        <nobr><small><code>lo || hi << 16</code></small></nobr> is the same as 
        <nobr><small><code>lo || (hi << 16)</code></small></nobr>. Aside: watch out for <nobr><small><code>||</code></small></nobr> 
        hitting 32-bit limits that <nobr><small><code>+</code></small></nobr> does not.
        <br>
        <br>
        The eagle-eyed may have spotted the leap from 0 to 2 over a missing 1. Originally it was intended for "and" to have a 
        slightly different precedence than "or" (/"xor") but in the end I decided that forcing parenthesis was simply better.<br>
        <small>(and even now with Python/C/JavaScript tables to hand, I <i>still</i> can&rsquo;t quite say which should be lower/higher)</small>
       </blockquote>
<!--
DEV:<br>
        Note that the && and || operators introduced in 0.8.2 as alternatives to <a href="and_bits.htm">and_bits</a>() and 
        <a href="or_bits.htm">or_bits</a>() do not have a formal/verified precedence assignment as yet.<br>
        They probably inherited the same level as and/or/xor, which is probably quite wrong, so if in any doubt add extra parenthesis <br>
        and/or (see what I did there) stick with the existing function-style calls. It is also quite likely that as explained next for <br>
        and/or (see what I did there) I will decide to enforce additional parenthesis (anyway) should they (&& and ||) be mixed.<br>
        <small>(obviously 0 && (1 || 2) gives a different result to (0 && 1) || 2, being 0 and 2 respectively.)</small><br>
        The same applies to the new &gt;&gt; and &lt;&lt; bit-shifting operators. See <a href="arithops.htm">here</a> for some examples.
       <br>
       <br>
-->
        Parenthesis is required to mix <small><code>and</code></small>, <small><code>or</code></small>, and <small><code>xor</code></small>
        in an expression. If the compiler finds <small><code>"a or b and c"</code></small> it will <i><b>not</b></i> assume 
        <small><code>"(a or b) and c"</code></small> over <small><code>"a or (b and c)"</code></small> (or vice versa) but demands that
        you state exactly which you mean. Most programmers have at one point or another coded something apparently "obvious" such as
<!--eucode>
    if a and b
    or c and d then
</eucode-->
<pre>
<font color="#008080">    if</font><font color="#000000"> a</font><font color="#008080"> and</font><font color="#000000"> b</font>
<font color="#008080">    or</font><font color="#000000"> c</font><font color="#008080"> and</font><font color="#000000"> d</font><font color="#008080"> then</font>
</pre>
       or
<!--eucode>
    if  a or b 
    and c or d then
</eucode-->
<pre>
<font color="#008080">    if </font><font color="#000000"> a</font><font color="#008080"> or</font><font color="#000000"> b </font>
<font color="#008080">    and</font><font color="#000000"> c</font><font color="#008080"> or</font><font color="#000000"> d</font><font color="#008080"> then</font>
</pre>
        and then been surprised when (in some other programming language) it does not work. Other compilers may treat them as
<!--eucode>
    (a and b) or (c and d)  -- which is probably as intended
    (a or (b and c)) or d   -- somewhat less likely to be as intended
    ((a and b) or c) and d  -- even ""
    ((a or b) and c) or d   --  ""
</eucode-->
<pre>
<font color="#0000FF">    (</font><font color="#000000">a</font><font color="#008080"> and</font><font color="#000000"> b</font><font color="#0000FF">)</font><font color="#008080"> or</font><font color="#0000FF"> (</font><font color="#000000">c</font><font color="#008080"> and</font><font color="#000000"> d</font><font color="#0000FF">) </font><font color="#000080"><i> -- which is probably as intended</i></font>
<font color="#0000FF">    (</font><font color="#000000">a</font><font color="#008080"> or</font><font color="#800000"> (</font><font color="#000000">b</font><font color="#008080"> and</font><font color="#000000"> c</font><font color="#800000">)</font><font color="#0000FF">)</font><font color="#008080"> or</font><font color="#000000"> d  </font><font color="#000080"><i> -- somewhat less likely to be as intended</i></font>
<font color="#0000FF">    (</font><font color="#800000">(</font><font color="#000000">a</font><font color="#008080"> and</font><font color="#000000"> b</font><font color="#800000">)</font><font color="#008080"> or</font><font color="#000000"> c</font><font color="#0000FF">)</font><font color="#008080"> and</font><font color="#000000"> d </font><font color="#000080"><i> -- even ""</i></font>
<font color="#0000FF">    (</font><font color="#800000">(</font><font color="#000000">a</font><font color="#008080"> or</font><font color="#000000"> b</font><font color="#800000">)</font><font color="#008080"> and</font><font color="#000000"> c</font><font color="#0000FF">)</font><font color="#008080"> or</font><font color="#000000"> d  </font><font color="#000080"><i> --  ""</i></font>
</pre>
        To avoid such issues, phix simply forces the programmer to supply enough additional explicit parenthesis until everything is completely unambiguous, eg/ie
<!--eucode>
    if (a and b)
    or (c and d) then
</eucode-->
<pre>
<font color="#008080">    if</font><font color="#0000FF"> (</font><font color="#000000">a</font><font color="#008080"> and</font><font color="#000000"> b</font><font color="#0000FF">)</font>
<font color="#008080">    or</font><font color="#0000FF"> (</font><font color="#000000">c</font><font color="#008080"> and</font><font color="#000000"> d</font><font color="#0000FF">)</font><font color="#008080"> then</font>
</pre>
        or
<!--eucode>
    if  (a or b)
    and (c or d) then
</eucode-->
<pre>
<font color="#008080">    if </font><font color="#0000FF"> (</font><font color="#000000">a</font><font color="#008080"> or</font><font color="#000000"> b</font><font color="#0000FF">)</font>
<font color="#008080">    and</font><font color="#0000FF"> (</font><font color="#000000">c</font><font color="#008080"> or</font><font color="#000000"> d</font><font color="#0000FF">)</font><font color="#008080"> then</font>
</pre>
        The higher precedence of not means that (eg) <small><code>not a or not b</code></small> and <small><code>(not a) or (not b)</code></small>
        are equivalent, making the extra parenthesis strictly unnecessary, however I consider the latter good practice, plus be warned that phix is 
        more like C-based languages, which treat <small><code>(!a==b)</code></small> as <small><code>((!a)==b)</code></small> whereas in Python 
        (for example) the precedence of the otherwise equivalent "not" is much lower, so <small><code>not a == b</code></small> is treated as 
        <small><code>not (a == b)</code></small> - fwiw, I would agree that having <small><code>not a == b</code></small> behave exactly the same
        as <small><code>a != b</code></small> is not particularly helpful, so Phix don&rsquo;t do dat. Mind you, it&rsquo;s not quite as whacky
        as PHP and Ruby having <small><code>&&</code></small> and <small><code>and</code></small>, likewise <small><code>||</code></small> and 
        <small><code>or</code></small>, as two (pairs of two) operators with the same meaning but different precedences <i>(wow!)</i>.
        <br>
        <br>
        On a related note, <small><code>"a*(b/c)"</code></small> and <small><code>"(a*b)/c"</code></small> are mathematically equivalent, however 
        precision limits of the physical hardware may mean they give very different results, especially for partial results that approach or exceed 
        the floating point hardware limits.
        In practice the compiler treats <small><code>"a*b/c"</code></small> as <small><code>"(a*b)/c"</code></small>, however in general that is an 
        implementation detail that should not be overly relied on - should one day some bright spark invent a safe and simple method to automatically 
        minimise precision loss in the un-parenthesised case, I would take it. (I did once work with an actual Dr Watson (PhD in Nuclear Physics, no
        less) who spent many weeks on almost exactly such a routine, that I never quite managed to understand, but it&rsquo;s all long gone now.)
       <br>
       <br>
        Other programming languages may have subtle differences in precedence. For instance, in python 'or' has a lower precedence than 'and', 
        so take that into account when translating some python code and Phix starts demanding extra parenthesis. In python the 'not' operator has a lower 
        precedence than '+', so <small><code>idx + not flag + offset</code></small> is treated as <small><code>idx + not (flag + offset)</code></small>, 
        quite unlike the Phix interpretation which is <small><code>idx + (not flag) + offset</code></small>. 
        My recommendation is to use as much parenthesis as you can bear, and when it gets too much that is as good an excuse as any to break the 
        expression down into more manageable pieces. Besides, storing partial results in appropriately named variables can not only make the intent 
        much clearer but also make debugging significantly easier and faster, and does not normally incur any additional penalty whatsoever 
        over the hidden unnamed temporary variable that the compiler would otherwise use anyway (except as noted at the very end of the 
        <a href="iff.htm">ternary ops</a> technicalia drop-down).
       <br>
       <br>
        Note that phix does not really do associativity handling: of course unary operators are
        right associative, because they have to be, but everything else is left associative. eg
<!--eucode>
    a*b/c*d/e is ((((a*b)/c)*d)/e)
    a*-b/c*not d/e is ((((a*(-b))/c)*(not d))/e)
    a == b == c is (a == b) == c    -- (unlike Python in which it is a == (b == c)...)
</eucode-->
<pre>
<font color="#000000">    a</font><font color="#0000FF">*</font><font color="#000000">b</font><font color="#0000FF">/</font><font color="#000000">c</font><font color="#0000FF">*</font><font color="#000000">d</font><font color="#0000FF">/</font><font color="#000000">e is</font><font color="#0000FF"> (</font><font color="#800000">(</font><font color="#800080">(</font><font color="#00FF00">(</font><font color="#000000">a</font><font color="#0000FF">*</font><font color="#000000">b</font><font color="#00FF00">)</font><font color="#0000FF">/</font><font color="#000000">c</font><font color="#800080">)</font><font color="#0000FF">*</font><font color="#000000">d</font><font color="#800000">)</font><font color="#0000FF">/</font><font color="#000000">e</font><font color="#0000FF">)</font>
<font color="#000000">    a</font><font color="#0000FF">*-</font><font color="#000000">b</font><font color="#0000FF">/</font><font color="#000000">c</font><font color="#0000FF">*</font><font color="#008080">not</font><font color="#000000"> d</font><font color="#0000FF">/</font><font color="#000000">e is</font><font color="#0000FF"> (</font><font color="#800000">(</font><font color="#800080">(</font><font color="#00FF00">(</font><font color="#000000">a</font><font color="#0000FF">*</font><font color="#000080">(</font><font color="#0000FF">-</font><font color="#000000">b</font><font color="#000080">)</font><font color="#00FF00">)</font><font color="#0000FF">/</font><font color="#000000">c</font><font color="#800080">)</font><font color="#0000FF">*</font><font color="#800080">(</font><font color="#008080">not</font><font color="#000000"> d</font><font color="#800080">)</font><font color="#800000">)</font><font color="#0000FF">/</font><font color="#000000">e</font><font color="#0000FF">)</font>
</pre>
        See also <a href="perlops.htm">Perl/Raku operators</a>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
