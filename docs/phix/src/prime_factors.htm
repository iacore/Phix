<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">prime_factors</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         <a href="sequence.htm">sequence</a> s = prime_factors(<a href="atom.htm">atom</a> n, 
                                                               <a href="integer.htm#bool">bool</a> duplicates=false,
                                                               <a href="integer.htm">integer</a> maxprime=100)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Returns a list of prime factors of n, which must be an integer (as stored in an atom) between 1 and 
            <a href="power.htm">power</a>(2,<a href="iff.htm">iff</a>(<a href="machine_bits.htm">machine_bits</a>()=32?53:64)).
            <br>
            <br>
            Note that, when duplicates is false, prime_factors() always returns {} when passed a prime number (or 1).
            <br>
            <br>
            When duplicates is true, returns a list such that multiplying all the elements of it together produces the value n, 
            ie a true decomposition. <br>
            In fact, prime_factors(1,true) yields {1} as a special case to fulfil that requirement, despite 1 not actually 
            being a prime number.<br>
            That special case is also the one and only time the result can ever contain a 1.
            <br>
            <br>
            The maxprime argument limits the number of prime number factors that are checked, for more details see
            <a href="mpfr.htm#mpzextras">mpz_prime_factors</a>(), which is also capable of handling much larger inputs.<br>
            The <a href="is_prime.htm">get_maxprime</a>() function can be used to obtain a suitable maxprime index by performing
            a fast <a href="bsearch.htm">binary_search</a>() for floor(sqrt(p)), which ensures all appropriate primes are 
            checked. However that routine is unlikely to be suitable for <a href="mpfr.htm#mpzextras">mpz_prime_factors</a>()
            for reasons outlined therein. Alternatively you can pass -1 to maxprime (in this routine) and have it invoke
            get_maxprime() for you, but of course that potentially means an unnecessary sqrt() and binary_search() every time. 
         </td>
        </tr>
        <tr>
         <td>
          <b>Auxillary functions:</b>
         </td>
         <td>
            <a href="integer.htm#bool">bool</a> res = <b>square_free</b>(<a href="atom.htm">atom</a> n, <a href="integer.htm">integer</a> maxprime=100)<br>
            returns true if prime_factors(n,true,maxprime) would contain no duplicates, but without constructing an s, and quitting early on false.
            <br>
            <br>
            <a href="integer.htm#bool">bool</a> res = <b>is_prime</b>(<a href="atom.htm">atom</a> n)<br>
            returns true if prime_factors(n,false,get_maxprime(p)) would yield {}, but using a faster/simplified version of almost the same algorithm.
            Bear in mind, however, that while this is pretty fast, even on 15 or 16 digit numbers, it is still a trial division approach and no doubt 
            <a href="mpfr.htm">mpz_prime</a>() will be much faster on larger numbers, plus of course not bound by any 53/64 bit precision limts.
            <br>
            <br>
            The checks on the legal range of n and handling of -1 in maxprime as noted above apply equally to these routines.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
s = prime_factors(6) -- s is {2,3}
s = prime_factors(720) -- s is {2,3,5}
s = prime_factors(12345) -- s is {3,5,823}
s = prime_factors(27) -- s is {3}
s = prime_factors(27,duplicates:=true) -- s is {3,3,3}
atom a = power(2*get_prime(101),2)
s = prime_factors(a,true)       -- s is {2,2,299209}
s = prime_factors(a,true,101)   -- s is {2,2,547,547}
</eucode-->
<pre>
<font color="#000000">s</font><font color="#0000FF"> =</font><font color="#5E005E"> prime_factors</font><font color="#0000FF">(</font><font color="#000000">6</font><font color="#0000FF">)</font><font color="#000080"><i> -- s is {2,3}
</i></font><font color="#000000">s</font><font color="#0000FF"> =</font><font color="#5E005E"> prime_factors</font><font color="#0000FF">(</font><font color="#000000">720</font><font color="#0000FF">)</font><font color="#000080"><i> -- s is {2,3,5}
</i></font><font color="#000000">s</font><font color="#0000FF"> =</font><font color="#5E005E"> prime_factors</font><font color="#0000FF">(</font><font color="#000000">12345</font><font color="#0000FF">)</font><font color="#000080"><i> -- s is {3,5,823}
</i></font><font color="#000000">s</font><font color="#0000FF"> =</font><font color="#5E005E"> prime_factors</font><font color="#0000FF">(</font><font color="#000000">27</font><font color="#0000FF">)</font><font color="#000080"><i> -- s is {3}
</i></font><font color="#000000">s</font><font color="#0000FF"> =</font><font color="#5E005E"> prime_factors</font><font color="#0000FF">(</font><font color="#000000">27</font><font color="#0000FF">,</font><font color="#000000">duplicates</font><font color="#0000FF">:=</font><font color="#004600">true</font><font color="#0000FF">)</font><font color="#000080"><i> -- s is {3,3,3}
</i></font><font color="#004080">atom</font><font color="#000000"> a</font><font color="#0000FF"> =</font><font color="#7060A8"> power</font><font color="#0000FF">(</font><font color="#000000">2</font><font color="#0000FF">*</font><font color="#5E005E">get_prime</font><font color="#800000">(</font><font color="#000000">101</font><font color="#800000">)</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">)
</font><font color="#000000">s</font><font color="#0000FF"> =</font><font color="#5E005E"> prime_factors</font><font color="#0000FF">(</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#004600">true</font><font color="#0000FF">)      </font><font color="#000080"><i> -- s is {2,2,299209}
</i></font><font color="#000000">s</font><font color="#0000FF"> =</font><font color="#5E005E"> prime_factors</font><font color="#0000FF">(</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#004600">true</font><font color="#0000FF">,</font><font color="#000000">101</font><font color="#0000FF">)  </font><font color="#000080"><i> -- s is {2,2,547,547}</i></font>
</pre>
            <br>
            In contrast, <a href="factors.htm">factors</a>(720) is 
            {2,<wbr>3,<wbr>4,<wbr>5,<wbr>6,<wbr>8,<wbr>9,<wbr>10,<wbr>12,<wbr>15,<wbr>16,<wbr>18,<wbr>20,<wbr>24,<wbr>30,<wbr>36,<wbr>40,<wbr>45,<wbr>48,<wbr>60,<wbr>72,<wbr>80,<wbr>90,<wbr>120,<wbr>144,<wbr>180,<wbr>240,<wbr>360},
            and <a href="factors.htm">factors</a>(12345) is {3,<wbr>5,<wbr>15,<wbr>823,<wbr>2469,<wbr>4115}.
            <br>
            <br>
            The use of a <a href="procedures.htm#namedparams">named parameter</a> when setting the duplicates flag is recommended, 
            to make the intent clear and the code easier to read.
            <a name=aux></a>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\pfactors.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="factors.htm">factors</a>,
          <a href="power.htm">power</a>,
          <a href="iff.htm">iff</a>,
          <a href="machine_bits.htm">machine_bits</a>,
          <a href="mpfr.htm#mpzextras">mpz_prime_factors</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
