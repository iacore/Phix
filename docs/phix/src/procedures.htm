<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Procedures</h1>
      <div id="mainSection">
         These perform some computation and may have a list of parameters, e.g.
<!--eucode>
    procedure plot(integer x, integer y, object char='*')
        position(x, y)
        if sequence(char) then
            if length(char)>1 then
                setfont(char[2])
                -- ... etc
            end if
            char = iff(length(char)=0?'?':char[1])
        end if  
        puts(1, char)
    end procedure
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    procedure</font><font color="#000000"> plot</font><font color="#0000FF">(</font><font color="#004080">integer</font><font color="#000000"> x</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> y</font><font color="#0000FF">,</font><font color="#004080"> object</font><font color="#000000"> char</font><font color="#0000FF">=</font><font color="#008000">'*'</font><font color="#0000FF">)
</font><font color="#7060A8">        position</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#0000FF">,</font><font color="#000000"> y</font><font color="#0000FF">)
</font><font color="#008080">        if</font><font color="#004080"> sequence</font><font color="#0000FF">(</font><font color="#000000">char</font><font color="#0000FF">)</font><font color="#008080"> then
            if</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">char</font><font color="#0000FF">)&gt;</font><font color="#000000">1</font><font color="#008080"> then
</font><font color="#000000">                setfont</font><font color="#0000FF">(</font><font color="#000000">char</font><font color="#800000">[</font><font color="#000000">2</font><font color="#800000">]</font><font color="#0000FF">)
</font><font color="#000080"><i>                -- ... etc
</i></font><font color="#008080">            end if
</font><font color="#000000">            char</font><font color="#0000FF"> =</font><font color="#7060A8"> iff</font><font color="#0000FF">(</font><font color="#7060A8">length</font><font color="#800000">(</font><font color="#000000">char</font><font color="#800000">)</font><font color="#0000FF">=</font><font color="#000000">0</font><font color="#0000FF">?</font><font color="#008000">'?'</font><font color="#0000FF">:</font><font color="#000000">char</font><font color="#800000">[</font><font color="#000000">1</font><font color="#800000">]</font><font color="#0000FF">)
</font><font color="#008080">        end if  
</font><font color="#7060A8">        puts</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000"> char</font><font color="#0000FF">)
</font><font color="#008080">    end procedure</font>
</pre>
        A copy of the value of each argument is passed in. The formal parameter 
        variables may be modified inside the procedure but this does not affect the 
        value of the arguments (in the calling routine).
       <dl>
        <dt>
          <b>
           <font color="navy">Performance Note:</font>
          </b>
         <dd>
            <br>
            The interpreter does not actually copy sequences or
            floating-point numbers unless it becomes necessary. For example,
<!--eucode>
     y = {1,2,3,4,5,6,7,8.5,"ABC"}
     x = y
</eucode-->
<pre>
<font color="#000000">     y</font><font color="#0000FF"> = {</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">4</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#0000FF">,</font><font color="#000000">6</font><font color="#0000FF">,</font><font color="#000000">7</font><font color="#0000FF">,</font><font color="#000000">8.5</font><font color="#0000FF">,</font><font color="#008000">"ABC"</font><font color="#0000FF">}
</font><font color="#000000">     x</font><font color="#0000FF"> =</font><font color="#000000"> y</font>
</pre>
            The statement x = y does not actually cause a new copy of y to be
            created. Both x and y will simply "point" to the same sequence. If we
            later perform x[3] = 9, then a separate sequence will be created for x
            in memory (although there will still be just one shared copy of 8.5 and
            "ABC") and y is not altered. The same thing applies to "copies" of 
            arguments passed in to subroutines.
         </dd>
        </dt>
       </dl>
       <br>
         If there are no parameters, the parentheses are still required, on both the procedure declaration and any calls to it, e.g.
<!--eucode>
    procedure empty()
    end procedure
    ...
    empty()
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    procedure</font><font color="#000000"> empty</font><font color="#0000FF">()
</font><font color="#008080">    end procedure
</font><font color="#0000FF">    ..</font><font color="#FF0000">.
</font><font color="#000000">    empty</font><font color="#0000FF">()</font>
</pre>

        Repeated consecutive parameter types may be omitted, for example in (integer a, b, string c, d) the compiler assumes
        b is another integer, and d is another string.
        <br>
        <br>
        <b>Optional parameters</b> can be declared simply by defining a default value, as shown for char (you can use either = or :=, 
        on the routine declaration they are treated identically). In many languages variable-length parameter lists are impossible. 
        In C, you must set up strange mechanisms that are complex enough that the average programmer cannot do it without consulting 
        a manual or a local guru. In Phix the only rule is that all non-optional parameters must be grouped together on the left, and
        obviously any defaults must be legal values for the specified type.
       <br>
       <br>
        Alternatively, optional parameters can be emulated by specifying a single
        sequence parameter, which can be populated by anything from a zero-length 
        sequence up to the maximum that the routine can handle. This approach is
        used, amongst others, by 
        <a href="printf.htm">printf</a>, 
        <a href="call_proc.htm">call_proc</a>, 
        <a href="call_func.htm">call_func</a>, 
        <a href="define_c_proc.htm">define_c_proc</a>, 
        <a href="define_c_func.htm">define_c_func</a>, 
        <a href="c_proc.htm">c_proc</a>, 
        <a href="c_func.htm">c_func</a>, 
        <a href="free.htm">free</a>, 
        <a href="min.htm">min</a>, 
        <a href="max.htm">max</a>, 
        <a href="smallest.htm">smallest</a>, 
        <a href="decode_flags.htm">decode_flags</a>, and
        <a href="join_path.htm">join_path</a>, 
        as well as all the explicit <a href="seqops.htm">sequence operators</a>.
       <br>
       <br>
         <b>Named parameters</b> (handiest when there are quite a few optional parameters)
         can be used in any order desired using &lt;name&gt;:=&lt;value&gt; syntax:
<!--eucode>
    plot(10,20)
    plot(10,20,'*')
    plot(10,20,char:='*')
    plot(10,y:=20)
    plot(y:=20,x:=10)
    plot(char:='*',x:=10,y:=20)
    plot(x:=10,y:=20,char:='*')
</eucode-->
<pre>
<font color="#000000">    plot</font><font color="#0000FF">(</font><font color="#000000">10</font><font color="#0000FF">,</font><font color="#000000">20</font><font color="#0000FF">)
</font><font color="#000000">    plot</font><font color="#0000FF">(</font><font color="#000000">10</font><font color="#0000FF">,</font><font color="#000000">20</font><font color="#0000FF">,</font><font color="#008000">'*'</font><font color="#0000FF">)
</font><font color="#000000">    plot</font><font color="#0000FF">(</font><font color="#000000">10</font><font color="#0000FF">,</font><font color="#000000">20</font><font color="#0000FF">,</font><font color="#000000">char</font><font color="#0000FF">:=</font><font color="#008000">'*'</font><font color="#0000FF">)
</font><font color="#000000">    plot</font><font color="#0000FF">(</font><font color="#000000">10</font><font color="#0000FF">,</font><font color="#000000">y</font><font color="#0000FF">:=</font><font color="#000000">20</font><font color="#0000FF">)
</font><font color="#000000">    plot</font><font color="#0000FF">(</font><font color="#000000">y</font><font color="#0000FF">:=</font><font color="#000000">20</font><font color="#0000FF">,</font><font color="#000000">x</font><font color="#0000FF">:=</font><font color="#000000">10</font><font color="#0000FF">)
</font><font color="#000000">    plot</font><font color="#0000FF">(</font><font color="#000000">char</font><font color="#0000FF">:=</font><font color="#008000">'*'</font><font color="#0000FF">,</font><font color="#000000">x</font><font color="#0000FF">:=</font><font color="#000000">10</font><font color="#0000FF">,</font><font color="#000000">y</font><font color="#0000FF">:=</font><font color="#000000">20</font><font color="#0000FF">)
</font><font color="#000000">    plot</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#0000FF">:=</font><font color="#000000">10</font><font color="#0000FF">,</font><font color="#000000">y</font><font color="#0000FF">:=</font><font color="#000000">20</font><font color="#0000FF">,</font><font color="#000000">char</font><font color="#0000FF">:=</font><font color="#008000">'*'</font><font color="#0000FF">)</font>
</pre>
        All seven calls achieve exactly the same thing. You can supply the first few 
        non-optional parameters as normal, and then start using named parameters, or 
        you can use the names of all of them. Obviously you must supply all the 
        non-optional parameters, somewhere, and once a name has been specified then 
        all subsequent parameters must also be named. Quite possibly the ultimate 
        example of named parameters is the <a href="timedelta.htm">timedelta</a>
        routine. Another example can be found in Edix:
<!--eucode>
    function saveFile(integer warnBackup=1)
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    function</font><font color="#000000"> saveFile</font><font color="#0000FF">(</font><font color="#004080">integer</font><font color="#000000"> warnBackup</font><font color="#0000FF">=</font><font color="#000000">1</font><font color="#0000FF">)</font>
</pre>
        Normal calls, which display a warning if for any reason the backup could not be made, are invoked as 
        <code>saveFile()</code>, whereas <code>saveFile(warnBackup:=0)</code> is used when performing saveas 
        or similar, in which case it still tries to make a backup but does not display any warning should it
        fail. The named parameter makes the slightly unusual invocation much clearer and self-documenting.
       <br>
       <br>
        <b>NB</b>: the ":=" signifies the use of named parameters; "=" has an entirely different meaning.
        It is perfectly legitimate, assuming you have local variables x and y, to write plot(x:=x,y:=y), 
        which would be equivalent to the simpler plot(x,y), whereas in the same circumstances the statement 
        plot(x=x,y=y) would, barring unassigned errors, always be equivalent to plot(1,1), aka plot(TRUE,TRUE).<br>
        Although somewhat obscure, it may be worth understanding the derivation of named parameter syntax: from
        proc(proc:name=value) via proc(:name=value) to the recommended proc(name:=value), with all three forms
        being perfectly legal code, what looks like a normal explict assignment operator is in fact a special
        "assign to the parameter namespace of the routine being called" operator.
       <br>
       <br>
        <b>Un-named parameters</b> are also permitted (added in version 0.6.8). In many cases, especially callbacks, 
        a routine must accept a fixed set of parameters, even if it does not use them. This can cause annoying 
        "not used" warnings. Instead of
<!--eucode>
    function mainHandler(integer id, integer msg, atom wParam, object lParam)
        if id or wParam or object(lParam) then end if   -- suppress warnings
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    function</font><font color="#000000"> mainHandler</font><font color="#0000FF">(</font><font color="#004080">integer</font><font color="#000000"> id</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> msg</font><font color="#0000FF">,</font><font color="#004080"> atom</font><font color="#000000"> wParam</font><font color="#0000FF">,</font><font color="#004080"> object</font><font color="#000000"> lParam</font><font color="#0000FF">)
</font><font color="#008080">        if</font><font color="#000000"> id</font><font color="#008080"> or</font><font color="#000000"> wParam</font><font color="#008080"> or</font><font color="#004080"> object</font><font color="#0000FF">(</font><font color="#000000">lParam</font><font color="#0000FF">)</font><font color="#008080"> then end if  </font><font color="#000080"><i> -- suppress warnings</i></font>
</pre>
        (in which the "if then if" generates no code) you can instead declare it as
<!--eucode>
    function mainHandler(integer /*id*/, integer msg, atom /*wParam*/, object /*lParam*/)
        -- (and obviously all comments, including this one, are optional)
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    function</font><font color="#000000"> mainHandler</font><font color="#0000FF">(</font><font color="#004080">integer</font><font color="#000080"><i> /*id*/</i></font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> msg</font><font color="#0000FF">,</font><font color="#004080"> atom</font><font color="#000080"><i> /*wParam*/</i></font><font color="#0000FF">,</font><font color="#004080"> object</font><font color="#000080"><i> /*lParam*/</i></font><font color="#0000FF">)
</font><font color="#000080"><i>        -- (and obviously all comments, including this one, are optional)</i></font>
</pre>
        Note that typechecking of un-named parameters still occurs, which can lead to interesting run-time error messages, eg
<!--eucode>
    procedure test(integer a, integer /*b*/, integer c)
        ?{a,c}
    end procedure
--  test(1,"error",2)   -- (causes a perfectly sensible compile-time error)
    call_proc(routine_id("test"),{1,"error",3})
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    procedure</font><font color="#000000"> test</font><font color="#0000FF">(</font><font color="#004080">integer</font><font color="#000000"> a</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000080"><i> /*b*/</i></font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> c</font><font color="#0000FF">)
        ?{</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#000000">c</font><font color="#0000FF">}
</font><font color="#008080">    end procedure
</font><font color="#000080"><i>--  test(1,"error",2)   -- (causes a perfectly sensible compile-time error)
</i></font><font color="#7060A8">    call_proc</font><font color="#0000FF">(</font><font color="#5E005E">routine_id</font><font color="#800000">(</font><font color="#008000">"test"</font><font color="#800000">)</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"error"</font><font color="#0000FF">,</font><font color="#000000">3</font><font color="#800000">}</font><font color="#0000FF">)</font>
</pre>
        triggers something like
 <pre>
C:\test\test.exw:1 in procedure test()
type check failure, ???(symtab[472][S_name]=0) is "error"
    a = 1
    c = 3
... called from test.exw:5

--&gt; see C:\Program Files (x86)\Phix\ex.err
Press Enter...</pre>    
        - at least it indicates the offending source code line, and it should be fairly obvious the problem is with "/*b*/", for want of a better name.
        Of course no such errors would happen for parameters declared as type object. You should also be aware that the absence of "/*b*/" in the ex.err 
        file, as deliberately shown above, may sometimes make debugging somewhat more difficult. One example of the latter that immediately springs to 
        mind is pEmit2.e/blurph(), where I added a lineno parameter purely as a debugging aid. Admittedly I now fiddle with it to make it an even more
        effective debugging aid, but the implication still stands that making it unnamed would have rendered it ("/*lineno*/") utterly useless.
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
