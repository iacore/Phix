<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">profile</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          profile(<a href="integer.htm#bool">bool</a> bOn)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Enable or disable profiling at run-time. This works for both <b>execution-count</b> and <b>time-profiling</b>.<br>
            If bOn is 1(/true) then profiling will be enabled, and samples/counts will be recorded.<br>
            If bOn is 0(/false) then profiling will be disabled and samples/counts will not be recorded.
            <br>
            <br>
            An ex.pro file containing a special listing of your program is produced by the interpreter when the program finishes execution.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          <a href="notpgui.htm"><span class="illegal">Not supported</span></a>. 
          It would of course be rather difficult for the browser to write an ex.pro file.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            After a <b>with profile</b> or <b>with profile_time</b> statement, profiling is turned on automatically. <br>
            Use profile(0/false) to turn it off. <br>
            Use profile(1/true) to turn it back on when execution reaches the code that you wish to focus the profile on.
          <br>
          <br>
            Profiling does not apply to inline assembly (#ilASM{}), only hll code.
          <br>
          <br>
            The comments in the technicalia drop-down on the <a href="trace.htm">trace</a> documentation apply equally to profiling.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 1:</b>
         </td>
         <td>
<!--eucode>
profile(0)
  ...
procedure slow_routine()
profile(1)
  ...
profile(0)
end procedure
</eucode-->
<pre>
<font color="#2C5C2C">profile</font><font color="#0000FF">(</font><font color="#000000">0</font><font color="#0000FF">)
  ...</font>
<font color="#008080">procedure</font><font color="#000000"> slow_routine</font><font color="#0000FF">()</font>
<font color="#2C5C2C">profile</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">)
  ...</font>
<font color="#2C5C2C">profile</font><font color="#0000FF">(</font><font color="#000000">0</font><font color="#0000FF">)</font>
<font color="#008080">end procedure</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            via :%opProfile in builtins\VM\pProfile.e (an autoinclude/part of the compiler).
         </td>
        </tr>

        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="trace.htm">trace</a>,
          <a href="debugging.htm#2">profiling</a>,
          <a href="specialtop.htm">special top-level statements</a>
         </td>
        </tr>
       </table>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
