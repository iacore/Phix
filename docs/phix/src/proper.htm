<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">proper</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         <a href="string.htm">string</a> res = proper(<a href="string.htm">string</a> s, method="CAPITALISE")
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Perform selected upper/lowercase operations on a string.
            <br>
            <br>
            s: the string to be modified<br>
            method: one of "LOWER","UPPER","CAPITALISE","SENTENCE","INVERT".
            <br>
            <br>
            Obviously LOWER/UPPER overlap functionally with lower()/upper(), but it might be useful to dynamically specify such options at runtime.<br>
            SENTENCE is far from perfect, INVERT has (potential) use in Edita/Edix, to correct something just typed in with the wrong caps lock setting, and
            it is probably not a bad idea to retry failed passwords using that option.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
constant s = "this is England. so there",
         methods = {"LOWER","UPPER","CAPITALISE","SENTENCE","INVERT"}
for i=1 to length(methods) do
    printf(1,"%s (%s case)\n",{proper(s,methods[i]),proper(methods[i])})
end for
-- Output:
--  this is england. so there (Lower case)
--  THIS IS ENGLAND. SO THERE (Upper case)
--  This Is England. So There (Capitalise case)
--  This is england. So there (Sentence case)
--  THIS IS eNGLAND. SO THERE (Invert case)
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">constant</font><font color="#000000"> s</font><font color="#0000FF"> =</font><font color="#008000"> "this is England. so there"</font><font color="#0000FF">,
</font><font color="#000000">         methods</font><font color="#0000FF"> = {</font><font color="#008000">"LOWER"</font><font color="#0000FF">,</font><font color="#008000">"UPPER"</font><font color="#0000FF">,</font><font color="#008000">"CAPITALISE"</font><font color="#0000FF">,</font><font color="#008000">"SENTENCE"</font><font color="#0000FF">,</font><font color="#008000">"INVERT"</font><font color="#0000FF">}
</font><font color="#008080">for</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">1</font><font color="#008080"> to</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">methods</font><font color="#0000FF">)</font><font color="#008080"> do
</font><font color="#5E005E">    printf</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"%s (%s case)\n"</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#5E005E">proper</font><font color="#800080">(</font><font color="#000000">s</font><font color="#0000FF">,</font><font color="#000000">methods</font><font color="#00FF00">[</font><font color="#000000">i</font><font color="#00FF00">]</font><font color="#800080">)</font><font color="#0000FF">,</font><font color="#5E005E">proper</font><font color="#800080">(</font><font color="#000000">methods</font><font color="#00FF00">[</font><font color="#000000">i</font><font color="#00FF00">]</font><font color="#800080">)</font><font color="#800000">}</font><font color="#0000FF">)
</font><font color="#008080">end for
</font><font color="#000080"><i>-- Output:
--  this is england. so there (Lower case)
--  THIS IS ENGLAND. SO THERE (Upper case)
--  This Is England. So There (Capitalise case)
--  This is england. So there (Sentence case)
--  THIS IS eNGLAND. SO THERE (Invert case)</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\pcase.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="upper.htm">upper</a>,
          <a href="lower.htm">lower</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            Unlike the Euphoria version, this routine deliberately only handles strings, and not nested sub-sequences.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
