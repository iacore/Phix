<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">remainder / mod</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         <a href="atom.htm">atom</a> res = remainder(<a href="atom.htm">atom</a> x, y)
          <br>
          <i>-- or --</i>
          <br>       
         <a href="atom.htm">atom</a> res = rmdr(<a href="atom.htm">atom</a> x, y)
          <br>
          <i>-- or --</i>
          <br>       
         <a href="atom.htm">atom</a> res = mod(<a href="atom.htm">atom</a> x, y)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Compute the remainder after dividing x by y, using floored division in the case of mod().
            <br>
            <br>
            An error occurs when y is zero, otherwise the magnitude of the result is less than that of y, 
            ie <a href="abs.htm">abs</a>(res) &lt; <a href="abs.htm">abs</a>(y).<br>
            When the two operands have the same sign, mod() returns the same result as remainder().<br>
            When the signs are different mod() rounds away from zero whereas remainder() rounds towards zero.<br>
            The result of mod() has the same sign as y, whereas that of remainder() has the same sign as x.<br>
            rmdr() is just a simple alias of remainder() and thus always behaves identically, ditto sq_rmdr() and sq_remainder().<br>
            There is no infix % operator, instead you must use rmdr()/mod() and that way explicitly choose the desired behaviour.
            <br>
            <br>
            Should you be confident that x and y always have the same sign, stick to remainder/rmdr, since that is faster.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            These functions may be applied to an <a href="atom.htm">atom</a> or sq_rmdr(), sq_mod() to all elements
            of a <a href="sequence.htm">sequence</a>.<br>
            The rules for <a href="seqops.htm">sequence operations</a> apply.
            <br>
            <br>
            The Phix implementation of mod() tries to yield the same results as plain C, however <small><i>(I wasn&rsquo;t expecting this, 
            either!)</i></small> a quick glance at <a href="javascript:ExternalLink('ext426');" id="ext426" 
             style="color:#9B5565">https://en.wikipedia.org/wiki/Modulo_operation#In_programming_languages</a>
            reveals the modulus operation is just about as far from a standard thing as anything could ever be.
            <br>
            <br>
<!--
            Note that remainder(i,2) is 0 for all even numbers, 1 for all positive odd numbers, and -1 for all negative odd numbers,
            whereas <a href="remainder.htm">mod</a>(1,2) is 0 for all even numbers and 1 for <i>all</i> odd numbers, and therefore the
            latter is logically a better choice for odd/even testing. Implementation concerns may however mean that remainder(i,2)
            being = or != to 0 may turn out faster, with and_bits(i,1) being even better.
-->
            As of 1.0.2, the <a href="abs.htm">odd</a>(x) and <a href="abs.htm">even</a>(x) builtins outperform use of remainder|mod(x,2).<br>
            (There is, incidentally, no performance difference between odd/even and <a href="and_bits.htm">and_bits</a>(x,1), just so you know.)<br>
            Also note that remainder(x,2) yields -1, not +1, for negative odd integers, which may very well [sometimes be desired and]
            sometimes be a latent bug, as in unnoticed or automatically fixed/introduced by switching to odd()/even().
            <br>
            <br>
            <b>NB</b> modular arithmetic is brainache personified. While I have tried my level best here to explain the differences between 
            remainder() and mod(), in practice when one doesn&rsquo;t work I simply just try the other, and there will doubtless be instances 
            within this very documentation where I have inadvertently mixed them up. The intellectual concept of zero is probably much more
            recent than you might imagine, in fact the mathematician Fibonacci is credited with introducing zero to Europe around <i>1200 AD!</i>.
            I suppose akin to that the very idea of <i>negative remainders</i> is much more than just a little bit academic, abstract, unreal, 
            and tbh meaningless. <small>(But when you need &rsquo;em, you need &rsquo;em.)</small>
         </td>
        </tr>
        <tr>
         <td>
          <b>Examples:</b>
         </td>
         <td>
<!--eucode>
               x,y: -9,-4  -9,+4  +9,-4  +9,+4
    remainder(x,y):    -1     -1     +1     +1
          mod(x,y):    -1     +3     -3     +1      -- (matches the C % operator)

?sq_rmdr({81,-3.5,-9,5.5}, {8,-1.7,2,-4})   -- {1,-0.1,-1,1.5}
?sq_mod( {81,-3.5,-9,5.5}, {8,-1.7,2,-4})   -- {1,-0.1,1,-2.5}
?sq_rmdr({17,12,34}, 16)                    -- {1,12,2} -- (ditto mod)
?sq_rmdr(16, {2,3,5})                       -- {0,1,1}  -- (ditto mod)
</eucode-->
<pre>
<font color="#000000">               x</font><font color="#0000FF">,</font><font color="#000000">y</font><font color="#0000FF">: -</font><font color="#000000">9</font><font color="#0000FF">,-</font><font color="#000000">4 </font><font color="#0000FF"> -</font><font color="#000000">9</font><font color="#0000FF">,+</font><font color="#000000">4 </font><font color="#0000FF"> +</font><font color="#000000">9</font><font color="#0000FF">,-</font><font color="#000000">4 </font><font color="#0000FF"> +</font><font color="#000000">9</font><font color="#0000FF">,+</font><font color="#000000">4</font>
<font color="#7060A8">    remainder</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#0000FF">,</font><font color="#000000">y</font><font color="#0000FF">):    -</font><font color="#000000">1    </font><font color="#0000FF"> -</font><font color="#000000">1    </font><font color="#0000FF"> +</font><font color="#000000">1    </font><font color="#0000FF"> +</font><font color="#000000">1</font>
<font color="#7060A8">          mod</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#0000FF">,</font><font color="#000000">y</font><font color="#0000FF">):    -</font><font color="#000000">1    </font><font color="#0000FF"> +</font><font color="#000000">3    </font><font color="#0000FF"> -</font><font color="#000000">3    </font><font color="#0000FF"> +</font><font color="#000000">1     </font><font color="#000080"><i> -- (matches the C % operator)
</i></font>
<font color="#0000FF">?</font><font color="#7060A8">sq_rmdr</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">81</font><font color="#0000FF">,-</font><font color="#000000">3.5</font><font color="#0000FF">,-</font><font color="#000000">9</font><font color="#0000FF">,</font><font color="#000000">5.5</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#800000"> {</font><font color="#000000">8</font><font color="#0000FF">,-</font><font color="#000000">1.7</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">,-</font><font color="#000000">4</font><font color="#800000">}</font><font color="#0000FF">)  </font><font color="#000080"><i> -- {1,-0.1,-1,1.5}</i></font>
<font color="#0000FF">?</font><font color="#7060A8">sq_mod</font><font color="#0000FF">(</font><font color="#800000"> {</font><font color="#000000">81</font><font color="#0000FF">,-</font><font color="#000000">3.5</font><font color="#0000FF">,-</font><font color="#000000">9</font><font color="#0000FF">,</font><font color="#000000">5.5</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#800000"> {</font><font color="#000000">8</font><font color="#0000FF">,-</font><font color="#000000">1.7</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">,-</font><font color="#000000">4</font><font color="#800000">}</font><font color="#0000FF">)  </font><font color="#000080"><i> -- {1,-0.1,1,-2.5}</i></font>
<font color="#0000FF">?</font><font color="#7060A8">sq_rmdr</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">17</font><font color="#0000FF">,</font><font color="#000000">12</font><font color="#0000FF">,</font><font color="#000000">34</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#000000"> 16</font><font color="#0000FF">)                   </font><font color="#000080"><i> -- {1,12,2} -- (ditto mod)</i></font>
<font color="#0000FF">?</font><font color="#7060A8">sq_rmdr</font><font color="#0000FF">(</font><font color="#000000">16</font><font color="#0000FF">,</font><font color="#800000"> {</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#800000">}</font><font color="#0000FF">)                      </font><font color="#000080"><i> -- {0,1,1}  -- (ditto mod)</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            remainder(): via :%opRmdr in builtins\VM\pRmdr.e (an autoinclude)<br>
            mod(): see builtins\pmaths.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="floor.htm">floor</a>,
          <a href="log.htm">powmod</a>,
          <a href="log.htm">mulmod</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
