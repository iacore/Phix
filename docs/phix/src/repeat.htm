<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">repeat</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          <a href="sequence.htm">sequence</a> s = repeat(<a href="object.htm">object</a> x,
                                                         <a href="integer.htm">integer</a> n,
                                                         <a href="integer.htm#bool">bool</a> allow_strings=<a href="logicops.htm#tf">true</a>)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Create a <a href="sequence.htm">sequence</a> of length n where each element is x.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Prior to version 1.0.0 the repeat function would perform a bulk refcount update and rely on subsequent copy-on-write 
          semantics. For example, <code>repeat(repeat(0,100),100)</code> would use 800ish bytes and an internal refcount of
          100, whereas JavaScript and other programming languages, and in fact Phix itself in probably fairly short order,
          would use 40,000 bytes. While that was a nice idea, and occasionally might improve startup times a tiny fraction,
          on deeper reflection it is a completely <i>fake saving</i>, and probably reduces overall performance, especially 
          if anything needs reloading to cache just for the clone, as well as being wholly and utterly incompatible with
          the pass-by-sharing semantics of JavaScript, and therefore <a href="p2js.htm">pwa/p2js</a>. It now performs a
          <a href="deep_copy.htm">deep_copy</a>(x) when needed, and I have yet to notice any significant performance loss.
          For more details see the <a href="notp2js.htm">Incompatibilities</a> section of the p2js documentation.
          <br>
          <br>
          The optional third parameter was introduced in 1.0.2 to help alleviate a significant performance issue when using
          a binary string to create <a href="IupImage.htm">IupImage</a>() pixel data, for more details see comments. 
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            When you repeat a <a href="string.htm">string</a> or a floating-point number the interpreter does not actually 
            make multiple copies in memory, instead a single copy is "pointed to" a number of times, though as above nested
            <a href="sequence.htm">sequence</a> elements are now <a href="deep_copy.htm">deep_copy</a>()&rsquo;d.
          <br>
          <br>
            For efficiency reasons, if the item to be repeated appears to be a character, ie is an integer in the range 7 to 255, 
            a <a href="string.htm">string</a> is created, otherwise a <a href="glossary.htm#dwordseq">dword-sequence</a> 
            is created. Better overall performance was also observed by making repeat(0,n) create a dword-sequence rather than a 
            string of nulls which was very likely to be auto-expanded to a dword sequence in the near future. Generally speaking, 
            all further handling of the result is completely transparent whether a string or dword-sequence is created, with the 
            following exceptions: performance gains, explicit tests with the <a href="string.htm">string</a>() builtin, 
            #<a href="glossary.htm#isginfo">isginfo</a> directives, accessing it using inline assembly, and lastly holding raw 
            binary can be done in a string as one byte per element, rather than 4 or 8, which might need a secondary 
            <a href="poke.htm">poke</a>() before use.
          <br>
          <br>
            In JavaScript, strings are "immutable", and hence pwa/p2js.js/$repe() performs <code>s[1..i-1] & ch & s[i+1..$]</code> 
            aka <code>t = t.substring(0,idx-1) + String.fromCodePoint(x) + t.substring(idx);</code> which for a 500x500 
            <a href="IupImage.htm">IupImage</a>() pixel data could mean copying 250,000 bytes to set each pixel (this problem was 
            only first noticed after some 18 months of using p2js). No such penalty occurs for dword-sequences aka JavaScript Arrays.
            For that reason, repeat() now [1.0.2+] has an optional third parameter to prevent it from creating (binary) strings.</li>
          <br>
          <br>
            Compatibility note: Euphoria allows an atom length/count, whereas Phix requires an integer, since I believe that 
            deliberately trapping say 11.99 (which Euphoria truncates to 11) may help expose the occasional programming error 
            at source, rather than ten minutes later when the sequence turns out to be one element too short.
         </td>
        </tr>
<!--
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
            Supported.
         </td>
        </tr>
-->
        <tr>
         <td>
          <b>Example 1:</b>
         </td>
         <td>
<!--eucode>
repeat(0, 10)       -- {0,0,0,0,0,0,0,0,0,0}
</eucode-->
<pre>
<font color="#7060A8">repeat</font><font color="#0000FF">(</font><font color="#000000">0</font><font color="#0000FF">,</font><font color="#000000"> 10</font><font color="#0000FF">)      </font><font color="#000080"><i> -- {0,0,0,0,0,0,0,0,0,0}</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 2:</b>
         </td>
         <td>
<!--eucode>
repeat("JOHN", 4)   -- {"JOHN", "JOHN", "JOHN", "JOHN"}
-- The interpreter creates only one copy of "JOHN" in memory,
--  and increases the reference count of that one item by 4.
</eucode-->
<pre>
<font color="#7060A8">repeat</font><font color="#0000FF">(</font><font color="#008000">"JOHN"</font><font color="#0000FF">,</font><font color="#000000"> 4</font><font color="#0000FF">)  </font><font color="#000080"><i> -- {"JOHN", "JOHN", "JOHN", "JOHN"}
-- The interpreter creates only one copy of "JOHN" in memory,
--  and increases the reference count of that one item by 4.</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 3:</b>
         </td>
         <td>
<!--eucode>
repeat('=', 10)     -- "=========="  (a string)
</eucode-->
<pre>
<font color="#7060A8">repeat</font><font color="#0000FF">(</font><font color="#008000">'='</font><font color="#0000FF">,</font><font color="#000000"> 10</font><font color="#0000FF">)    </font><font color="#000080"><i> -- "=========="  (a string)</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
<!--            See builtins\VM\pRepeatN.e (an autoinclude) for details of the actual implementation.-->
            See builtins\repeat.e (an autoinclude) for details of the actual implementation. [Moved from VM\pRepeatN.e in 1.0.0]<br>
            There is also a different hand-crafted version in p2js.js which obviously uses native JavaScript functions instead
            of %:pAllocSeq, etc.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="append.htm">append</a>,
          <a href="prepend.htm">prepend</a>,
          <a href="seqformation.htm">sequence-formation operator</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            Internally, when the compiler spots an obvious character, it maps repeat() to repeatch(), which can be called explicitly
            and has the advantage of yielding type string, rather than sequence (string|dword_sequence), and in so doing may permit
            subsequent optimisations, via type inference. There are in fact a couple of places in the compiler itself that take 
            advantage of the fact that repeat(0,n) and repeat(&lsquo;\0&rsquo;,n) are treated differently, and specifically there are
            #<a href="glossary.htm#isginfo">isginfo</a>{code/data_section,T_String..} directives to ensure that interpretation can use 
            them in-situ rather than allocate and poke every time we run anything. Note that explicitly calling repeatch, which is not 
            available on Euphoria, performs an implicit "non-integer agnostic" low-level and_bits(x,#FF), and hence yields incorrect 
            results if x is not an integer or outside the range 0..255, rather than an error, so if you must use repeatch(), do so 
            sparingly and carefully. Of course repeating a unicode character/code point of #100 or perhaps more realistically #80 and
            above would require a <a href="glossary.htm#dwordseq">dword-sequence</a> rather than a "string", and the equivalent UTF-8
            string would be constructed either by applying <a href="utf32_to_utf8.htm">utf32_to_utf8</a>() to said or perhaps applying
            <a href="join.htm">join</a>() to several multi-byte strings, but in either case repeatch() would be wholly inapplicable.
            <br>
            <br>
            repeatch() has an optional third parameter, nFrames, for the benefit of repeat(), so that the runtime error message 
            "repeat count must not be negative" always points at user code rather than within builtins/repeat.e itself.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
