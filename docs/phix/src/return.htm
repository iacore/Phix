<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Return Statement</h1>
      <div id="mainSection">
        A <b>return statement</b> returns from a subroutine. <br>
        If the subroutine is a function or type then a value must also be returned. e.g.
<!--eucode>
procedure p()
    if something then return end if     -- (early exit)
--  return  -- (completely unnecessary, but not actually harmful)
end procedure

function f()
    return {50, "FRED", {}} -- (an error coccurs if omitted)
end function
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    return
    return</font><font color="#0000FF"> {</font><font color="#000000">50</font><font color="#0000FF">,</font><font color="#008000"> "FRED"</font><font color="#0000FF">,</font><font color="#800000"> {}</font><font color="#0000FF">}</font>
</pre>
        <br>
        If you&rsquo;re coming from a VisualBasic background, the last one is equivalent to a (in my opinion utterly bizzare and horrible) f = {50, "FRED", {}} statement.<br>
        <small>(Just to be crystal clear, that might be valid syntax in VisualBasic, but it is not and there are <i>no</i> plans to ever make it valid in Phix.)</small>
        <br>
        <br>
        If you&rsquo;re coming from a JavaScript background, a procedure is just like a function with no return statement (which is illegal in Phix), and 
        if you&rsquo;re coming from a C background, a procedure is just like a void function (ditto). Note that in Phix you are expected to do something with all
        function results, even if that is just an explicit discard along the lines of <code>{} = somefunc()</code>, and likewise you&rsquo;ll get a compilation error
        should you try do so something with a procedure result, since there isn&rsquo;t one.
        <br>
        <br>
        Should there be no return statement at all in a function, you&rsquo;ll get a compile-time error, but it does not have to be the last thing, for instance that could be
        an "end while" with a return (or two) mid-loop, and an automatic fatal (but catchable) run-time error if it somehow manages to exit that loop.
        <br>
        <br>
        There is no explicit form of any kind of "finally" clause, however you can mimic Go&rsquo;s defer handling via <a href="delete_routine.htm">delete_routine</a>() on a
        local variable, and that processing will be triggered either when the local variable is overwritten, or when the routine exits, as long as you haven&rsquo;t stashed
        a reference to that data value somewhere more permanent.
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
