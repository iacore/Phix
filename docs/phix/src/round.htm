<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">round</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         <a href="atom.htm">atom</a> x2 = round(<a href="atom.htm">atom</a> x1, <a href="atom.htm">atom</a> inverted_precision=1)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>round x1 to the specified precision.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            The precision is the inverse of what you might have expected, for example:<br>
            to round a number to the nearest 0.1, specify an inverted precision of 10, <br>
            to round a number to the nearest 1000, specify an inverted precision of 0.001.
            <br>
            <br>
            This function may be applied to an <a href="atom.htm">atom</a> or sq_round() to all elements
            of a <a href="sequence.htm">sequence</a>. The rules for
            <a href="seqops.htm">sequence operations</a> apply.
         </td>
        </tr>
        <tr>
         <td>
          <b>Auxillary Function</b>
         </td>
         <td>
            <a href="integer.htm">integer</a> pennies = <b>bankers_rounding</b>(<a href="atom.htm">atom</a> pence, 
                                                                                <a href="integer.htm">integer</a> precison=1)
            <br>
            <br>
            In the standard round() function, exact .5s are rounded up (matching Euphoria) whereas banker&rsquo;s rounding yields the nearest even number, eg:
            <br>
            <br>
<!--eucode>
constant x1 = {-4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5}
?apply(x1,round)
?apply(x1,bankers_rounding)
function precision100(atom xi) return bankers_rounding(xi*100,100) end function
?apply(x1,precision100)
-- output:
-- {-4,-3,-2,-1,0,1,2,3,4,5}
-- {-4,-4,-2,-2,0,0,2,2,4,4}
-- {-400,-400,-200,-200,0,0,200,200,400,400}
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">constant</font><font color="#000000"> x1</font><font color="#0000FF"> = {-</font><font color="#000000">4.5</font><font color="#0000FF">, -</font><font color="#000000">3.5</font><font color="#0000FF">, -</font><font color="#000000">2.5</font><font color="#0000FF">, -</font><font color="#000000">1.5</font><font color="#0000FF">, -</font><font color="#000000">0.5</font><font color="#0000FF">,</font><font color="#000000"> 0.5</font><font color="#0000FF">,</font><font color="#000000"> 1.5</font><font color="#0000FF">,</font><font color="#000000"> 2.5</font><font color="#0000FF">,</font><font color="#000000"> 3.5</font><font color="#0000FF">,</font><font color="#000000"> 4.5</font><font color="#0000FF">}
?</font><font color="#5E005E">apply</font><font color="#0000FF">(</font><font color="#000000">x1</font><font color="#0000FF">,</font><font color="#5E005E">round</font><font color="#0000FF">)
?</font><font color="#5E005E">apply</font><font color="#0000FF">(</font><font color="#000000">x1</font><font color="#0000FF">,</font><font color="#5E005E">bankers_rounding</font><font color="#0000FF">)
</font><font color="#008080">function</font><font color="#000000"> precision100</font><font color="#0000FF">(</font><font color="#004080">atom</font><font color="#000000"> xi</font><font color="#0000FF">)</font><font color="#008080"> return</font><font color="#5E005E"> bankers_rounding</font><font color="#0000FF">(</font><font color="#000000">xi</font><font color="#0000FF">*</font><font color="#000000">100</font><font color="#0000FF">,</font><font color="#000000">100</font><font color="#0000FF">)</font><font color="#008080"> end function
</font><font color="#0000FF">?</font><font color="#5E005E">apply</font><font color="#0000FF">(</font><font color="#000000">x1</font><font color="#0000FF">,</font><font color="#000000">precision100</font><font color="#0000FF">)
</font><font color="#000080"><i>-- output:
-- {-4,-3,-2,-1,0,1,2,3,4,5}
-- {-4,-4,-2,-2,0,0,2,2,4,4}
-- {-400,-400,-200,-200,0,0,200,200,400,400}</i></font>
</pre>
            <br>
            The reason you might want to use banker&rsquo;s rounding is so that the average of the rounded numbers is as close as possible to 
            the average of the original numbers (ditto total), whereas always rounding up obviously introduces a systemic bias. <br>
            Above, the standard rounding average is out by 0.1, whereas the average x1 and the average bankers are both exactly zero (not
            that it would be difficult to construct a deliberately biased x1 such that the opposite were true; you only get better outputs
            for evenly-dispersed/unbiased inputs).
            <br>
            <br>
            Note that this is only possible when working in whole (integer) pennies/cents (and above), <i>not</i> pounds/dollars to 2dp, and the 
            precision is <i>not</i> inverted (see Technicalia). Should you want to store things in 2dp format, that&rsquo;s fine as long as you 
            round(*100) to get exact whole integer penny/cent values back out when you retrieve them, that is prior to attempting any subsequent 
            calculations that are likely to end up requiring any further banker&rsquo;s rounding, but of course you don&rsquo;t need to do that
            if all you&rsquo;re going to do is print or add and subtract them. [It should make no difference whatsoever if you use round() or
            bankers_rounding() to retrieve the whole integer penny/cent values.]
         </td>
        </tr>

        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
r = round(1.4)          -- r is 1
r = round(1.6)          -- r is 2
r = round(8.136,100)    -- r is 8.14
</eucode-->
<pre>
<font color="#000000">r</font><font color="#0000FF"> =</font><font color="#5E005E"> round</font><font color="#0000FF">(</font><font color="#000000">1.4</font><font color="#0000FF">)         </font><font color="#000080"><i> -- r is 1
</i></font><font color="#000000">r</font><font color="#0000FF"> =</font><font color="#5E005E"> round</font><font color="#0000FF">(</font><font color="#000000">1.6</font><font color="#0000FF">)         </font><font color="#000080"><i> -- r is 2
</i></font><font color="#000000">r</font><font color="#0000FF"> =</font><font color="#5E005E"> round</font><font color="#0000FF">(</font><font color="#000000">8.136</font><font color="#0000FF">,</font><font color="#000000">100</font><font color="#0000FF">)   </font><font color="#000080"><i> -- r is 8.14</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\pmaths.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="apply.htm">apply</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            The precision is specified in inverted form for a simple practical reason: atoms cannot hold the 
            <a href="accuracy.htm">exact</a> value of a decimal fraction such as 0.01, which is particularly 
            significant when attempting to round values near to the accuracy limits of the physical hardware, 
            where a small deviation in the input can easily manifest as a large discrepancy in the result. 
            <br>
            <br>
            While much the same effect can be observed both when rounding to the nearest very small amount as 
            when rounding to the nearest very large amount, any discrepancy in the latter is percentagewise 
            insignificant, and less likely to be multiplied by a very big number, and therefore less critical.
            <br>
            <br>
            Since eg 0.045 cannot be held exactly in an IEEE 754 floating point, it would be rather difficult 
            to coerce it to (almost) 0.04 rather than (almost) 0.05 - it would instead naturally fall depending 
            on whether the nearest admissible representation was out by +/-epsilon. 
            An <a href="abs.htm">abs</a>(frac-0.5)<1e-13 or similar rather than frac=0.5 (see pmaths.e) might 
            work, but could introduce another (small) bias of the very same kind that we are trying to eliminate. 
            Best to just stick with integers. There is of course nothing to stop you taking a copy of 
            bankers_rounding() and creating a (renamed) application specific version of it, tweaked however you like.
            <br>
            <br>
            Likewise if bankers_rounding() had an inverted precision, inaccuracies in the representation of 
            (eg) 0.01 could totally spanner it, hence it has an non-inverted (and integer) precision.<br>
            The integer return type of bankers_rounding is quite, quite, deliberate.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
