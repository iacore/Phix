<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">round</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         <a href="atom.htm">atom</a> x2 = round(<a href="atom.htm">atom</a> x1, <a href="atom.htm">atom</a> inverted_precision=1)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>round x1 to the specified precision.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            The precision is the inverse of what you might have expected, for example:<br>
            to round a number to the nearest 0.1, specify an inverted precision of 10, <br>
            to round a number to the nearest 1000, specify an inverted precision of 0.001.
            <br>
            <br>
            This function may be applied to an <a href="atom.htm">atom</a> or sq_round() to all elements
            of a <a href="sequence.htm">sequence</a>. The rules for
            <a href="seqops.htm">sequence operations</a> apply.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
r = round(1.4)          -- r is 1
r = round(1.6)          -- r is 2
r = round(8.136,100)    -- r is 8.14
</eucode-->
<pre>
<font color="#000000">r</font><font color="#0000FF"> =</font><font color="#5E005E"> round</font><font color="#0000FF">(</font><font color="#000000">1.4</font><font color="#0000FF">)         </font><font color="#000080"><i> -- r is 1
</i></font><font color="#000000">r</font><font color="#0000FF"> =</font><font color="#5E005E"> round</font><font color="#0000FF">(</font><font color="#000000">1.6</font><font color="#0000FF">)         </font><font color="#000080"><i> -- r is 2
</i></font><font color="#000000">r</font><font color="#0000FF"> =</font><font color="#5E005E"> round</font><font color="#0000FF">(</font><font color="#000000">8.136</font><font color="#0000FF">,</font><font color="#000000">100</font><font color="#0000FF">)   </font><font color="#000080"><i> -- r is 8.14</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\pmaths.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            The precision is specified in inverted form for a simple practical reason: atoms cannot hold the 
            <a href="accuracy.htm">exact</a> value of a decimal fraction such as 0.01, which is particularly 
            significant when attempting to round values near to the accuracy limits of the physical hardware, 
            where a small deviation in the input can easily manifest as a large discrepancy in the result. 
            <br>
            <br>
            While much the same effect can be observed both when rounding to the nearest very small amount as 
            when rounding to the nearest very large amount, any discrepancy in the latter is percentagewise 
            insignificant, and less likely to be multiplied by a very big number, and therefore less critical.
            <br>
            <br>
            <h3>Banker&rsquo;s rounding</h3>
            It is in now, and staying, but I think the final analysis would be that I wasted my time adding it.
            <br>
            <br>
            If the precision is zero, then x1 must be true/false specifying whether to use banker&rsquo;s rounding on
            subsequent calls. By default lone trailing 5s are rounded up (matching Euphoria) whereas under 
            banker&rsquo;s rounding, ie after <code>{} = round(true,0)</code>, they are rounded to the nearest even 
            number, eg:
            <br>
            <br>
<!--eucode>
              x1  -4.5 -3.5 -2.5 -1.5 -0.5  0.5  1.5  2.5  3.5  4.5
        standard  -4   -3   -2   -1    0    1    2    3    4    5  
        bankers   -4   -4   -2   -2    0    0    2    2    4    4  
</eucode-->
<pre>
<font color="#000000">              x1 </font><font color="#0000FF"> -</font><font color="#000000">4.5</font><font color="#0000FF"> -</font><font color="#000000">3.5</font><font color="#0000FF"> -</font><font color="#000000">2.5</font><font color="#0000FF"> -</font><font color="#000000">1.5</font><font color="#0000FF"> -</font><font color="#000000">0.5  0.5  1.5  2.5  3.5  4.5
        standard </font><font color="#0000FF"> -</font><font color="#000000">4  </font><font color="#0000FF"> -</font><font color="#000000">3  </font><font color="#0000FF"> -</font><font color="#000000">2  </font><font color="#0000FF"> -</font><font color="#000000">1    0    1    2    3    4    5  
        bankers  </font><font color="#0000FF"> -</font><font color="#000000">4  </font><font color="#0000FF"> -</font><font color="#000000">4  </font><font color="#0000FF"> -</font><font color="#000000">2  </font><font color="#0000FF"> -</font><font color="#000000">2    0    0    2    2    4    4  </font>
</pre>
            <br>
            Note that banker&rsquo;s rounding operates as you might expect on exact halves, however the inherent 
            inaccuracies of floating point numbers may easily fool you: if you are rounding to the nearest penny/cent, 
            only eighths (0.125*[1..7]) can be held exactly, a number such as 0.045 is not quite what you think it is 
            and which way that falls depends on whether the nearest admissible representation was out by +/-epsilon. 
            Likewise rounding to the nearest 10 and above is affected by 0.1 not being held exactly. The real reason 
            you might want to use banker&rsquo;s rounding is so that the average of the rounded numbers is as close 
            as possible to the average of the original numbers, whereas rounding up obviously introduces a systemic 
            bias.
            <br>
            <br>
            Sadly a bias might also be introduced by 0.1 and downwards being consistently slightly wrong, mind you 
            rounding to the nearest 10<sup><small>n</small></sup> is very unlikely to sum to anywhere near the total 
            of the originals anyway, and even though there is a small bias, you would probably need to be quite 
            unlucky for the rounded totals not to match exactly (under banker&rsquo;s rounding). If you were paying
            attention above, you would have noticed that the standard rounding average is out by 0.1, whereas the
            average x1 and the average bankers are both exactly zero.
            <br>
            <br>
            You should also be aware that if you do set banker&rsquo;s rounding mode, it applies to the entire 
            application, unless of course you toggle it on and off quite a bit. It is also true to say that if
            inverted_precision is 100, banker&rsquo;s rounding only has any real impact on just four fractional
            values of x1, being 0.125, 0.375, 0.625, and 0.875, and two of those give the same result as standard 
            rounding. And yes, I really do mean that out of all possible valid bit patterns of IEEE 754 floating 
            point numbers that lie between 0 and 1 (equally true for 64 or 80 bit), just <b>two</b> of them make 
            any difference at all, although of course there are another 2 in 1..2, and in 2..3, and so on, and
            similar things will happen for other (>=10) values of inverted_precision.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
