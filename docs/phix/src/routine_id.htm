<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">routine_id</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          <a href="integer.htm">integer</a> rid = routine_id(<a href="string.htm">string</a> rtn_name)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Return an integer id number, in fact an index to the symbol table, for a user-defined procedure or function.
            <br>
            <br>
            The name of the procedure or function is given by the string sequence rtn_name.
            <br>
            <br>
            -1 is returned if the named routine cannot be found (see Technicalia).
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
            Supported, although as of 0.8.2 a bare <code>action_cb</code> is equivalent to <code>routine_id("action_cb")</code>, 
            and is recommended. Be advised that JavaScript is fundamentally a function-scoped language and there are no namespaces 
            or different scopes for different include files.
            
<!--
            <br>
            <br>
DEV test, then delete:
            In practice, pwa/p2js.exw tries to strip any unnecessary routine_id calls, routine_id() in p2js.js is a dummy routine
            that returns a string result, and call_func/proc
          <b><i>Partially</i> not supported</b> - 
            Since there is no symbol table as such in JavaScript, the ability to "stitch together" and lookup a routine name is not 
            possible, for instance <code>routine_id(module&"_"&action&iff(bCallback?"_cb":""))</code>, and it is specifically that 
            part which is <b>"not supported"</b>. 
            fixed literal strings. Note however that in 0.8.2 and later, routine_id("<i>name</i>") 
            and <i>name</i> not followed by '(' are the same, so obviously the latter is recommended - and one less thing 
            for pwa/p2js to potentially get wrong! 
                         In short, if the compiler can
            figure it out at compile-time, it&rsquo;s fine, whereas 
            is not supported.has
            to be able to fu, routine_id("<i>name</i>") and <i>name</i> not followed by '(' are the same. The latter
            (a bare identifier) is fine and recommended, pwa/p2js.exw may or may not succeed in stripping the routine_id("") parts,
            but it certainly won&rsquo;t put them back on in any reverse trip and would therefore fail some reversibility tests.<br>
            Standard/Sane use should be fine.<br>
            <small>(You know what, it might just be fine, I might rescind all that...)</small>
it is: window["functionName"](arguments);
-->
            <br>
            <br>
<!--
            Also note that get_routine_info() is not supported by p2js: the one place it was really needed, in the heart of 
            <a href="apply.htm">apply</a>(), is coded somewhat differently in p2js.js (with considerably relaxed error checking).
            JavaScript does in fact have an fn.length property, which can be used to determine maxp, however there is no minp,
            obviously no sig in a typeless language, and the routine name would be a fiddly regex on fn.toString;
            <br>
            <br>
            Likewise s-->
            Since core components are coded without inline assembly in p2js.js there is no need for hll_stubs.
            <br>
            <br>
            On a related note, <a href="Icallback.htm">Icallback</a>() is in fact a dummy function in pGUI.js which does not attempt to
            replicate the safety/sanity checks of <a href="Icallback.htm">cbfunc</a>() - of course that is still valuable when developing
            on the desktop, and of course if you forego testing things first on the desktop and switch to a direct edit/browser mode
            of development instead, that&rsquo;s on you. 
<!--
            It would be perfectly possible and fairly straightforward for p2js.js to 
            contain a similar dummy routine_id(), just in that case utterly pointless.
-->
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            The id number can be passed to call_proc() or call_func(), to indirectly call the routine named by rtn_name.<br>
            It can also be called directly, as of 0.8.1 routine_ids are first class, and as of 0.8.2 a bare reference to
            an existing routine name not followed by '(' is treated as if routine_id had been used, see example 1 below.
          <br>
          <br>
            The routine named by rtn_name must be visible, i.e. callable, at the place where routine_id() is used to get the id number. 
            Indirect calls to the routine can appear earlier in the program than the definition of the routine, but the id number can 
            only be obtained in code that comes <i>after</i> the definition of the routine - see example 2 below.
          <br>
          <br> 
            Once obtained, a valid <b>routine id</b> can be used at <b><i>any</i></b> place in the program to call a routine indirectly 
            via call_proc()/call_func(), or now directly.
          <br>
          <br>
            Some typical uses of routine_id() are:<br>
             1. Creating a subroutine that takes another routine as a parameter. (See Example 2 below)<br>
             2. Setting up an Object-Oriented system.<br>
             3. Defining a call_back(). (See <a href="ccall.htm">Calling C Functions</a>)
          <br>
          <br>
             Note that C routines, callable by Phix, also have (non-first-class) routine ids, but from
             <a href="define_c_proc.htm">define_c_proc</a>() and <a href="define_c_func.htm">define_c_func</a>(), not this.
            <a name=aux></a>
         </td>
        </tr>
        <tr>
         <td>
          <b>Auxillary function:</b>
         </td>
         <td>
            {<a href="integer.htm">integer</a> maxp, 
             <a href="integer.htm">integer</a> minp, 
             <a href="string.htm">string</a> sig[, 
             <a href="object.htm">object</a> name]} = <b>get_routine_info</b>(<a href="integer.htm">integer</a> rid,
                                                                              <a href="integer.htm#bool">bool</a> bName=true)<br>
            Returns the maximum and minimum number of parameters, along with a string representing the signature in roottype format,
            and optionally the actual name of the routine, except when rid refers to a class method, when -1 is returned <small>(on 
            purpose, since their proper names are kept in builtins/structs.e, and are passed in as text anyway, so you don&rsquo;t 
            want or need multiple conflicting entries messing up the symtab. You still(/only) get max/min/sig for class methods.)</small>
            <br>
            <br>
            For instance get_routine_info(<a href="apply.htm">apply</a>) yields {3,2,"FOIO","apply"}. Note that invoking this routine
            with bName=true coerces the run-time into populating the symbol table with actual names, which may make startup a fraction 
            of a second slower when interpreting, especially on larger programs - hopefully not quite enough for anyone to actually 
            notice, but if you don&rsquo;t need the name there is not a lot of point asking for it.
            <br>
            <br>
            Under <a href="p2js.htm">pwa/p2js</a> minp is always 0 and sig is always "" (hardly surprising in a typeless language), 
            but maxp and name are fine, and unlike desktop/Phix there is no associated penalty of populating the symbol table names, 
            so a bName of false is ignored and name is always returned.
            <br>
            <br>
            Note that p.exw deliberately invokes get_routine_info(-9) to permanently disable it, that is within p.exe itself, since 
            populating the symtab with actual names mid-compilation kinda spanners everything. In other words this routine is not 
            available to the compiler itself, at least for now. In reality, p.exe is already pre-populated, no issue there, however
            this and "p p" might or might not trigger armageddon, so I&rsquo;ve played it safe, perhaps for no good reason at all.
            <br>
            <br>
            Intended for internal use in routines such as <a href="apply.htm">apply</a>() to make a more informed choice about precisely 
            how to invoke a routine, but of course it is also available for use at the application level. It is now used (at runtime) 
            in structs.e, to check the validity of any getters and setters it finds before invoking them, and twice in pGUI.e, in the
            <a href="Icallback.htm">Icallback[i]</a>() routine, and to check the <a href="callbacks.htm#K_ANY">K_ANY</a> callback does 
            not have a time-bomb signature, since I&rsquo;ve managed to put quite a few of those in myself while translating C code.
            <a name=hllstubs></a>
         </td>
        </tr>
        <tr>
         <td>
          <b>hll_stubs:</b>
         </td>
         <td>
            The file builtins/hll_stubs.e (an auto-include, except as noted below) contains hll verions of many builtins implemented in 
            assembly, for use when you need a routine_id. Prior to 0.8.2 you would have had to roll your own such mini-shim(s).
            <br>
            <br>
            While you should not really care much, the overwhelming majority of routines documented in this help file are implemented as 
            standard hll routines (eg <a href="abs.htm">abs</a>), but many what you might call "true builtins" are written in assembly 
            for performance or practical reasons, eg you might struggle to use a hll routine as any part of the mechanism for calling a 
            hll routine, and between them <a href="length.htm">length</a>() and <a href="append.htm">append</a>() are so ubiquitous that 
            just making those two alone always use a hll wrapper could easily make almost everything (including the compiler itself) 
            run three or four times slower<sup><small>2</small></sup>.<br>
            It would probably not be helpful (except as noted below) for either you to study or me to document which is which, rather 
            simply you should just assume anything (genuinely useful) should be available, and let me know of anything that ain&rsquo;t.<br>
            Equally you should not get too miffed should a new release "upgrade" an existing hll routine to asm in the name of performance,
            or (as has happened to <a href="find.htm">find</a>(), <a href="match.htm">match</a>() and <a href="repeat.htm">repeat</a>()
            already) "downgraded" in the name of simplicity and sanity or enhanced functionality, although that sort of thing should 
            probably only ever matter when grafting on the "hll_" manually, as described below.<br>
            One thing you should <i>not</i> assume is that everything goes through such wrappers, in fact the vast majority won&rsquo;t.
            <br>
            <br>
            The compiler automatically substitutes routine_id("length") with routine_id("hll_length") and likewise a bare 'length' with 
            no following '(' with the same implied routine_id.
            <br>
            <br>
            Note the equivalent existing <a href="seqops.htm">sq_xxx</a> routines may prove significantly faster, and perhaps easier.<br>
            For instance <a href="atom.htm">sq_atom</a>(s) and <a href="apply.htm">apply</a>(s,<a href="atom.htm">atom</a>) both yield
            exactly the same results, the former however being noticeably quicker. For completeness, I should also note that
            <a href="apply.htm">apply</a>(true,[hll_]<a href="atom.htm">atom</a>,{s}) also yields the same results, however
            <a href="apply.htm">apply</a>(true,<a href="atom.htm">sq_atom</a>,{s}) yields something subtly different.
            <br>
            <br>
            Also, if you are dynamically constructing the names passed to routine_id, you may need to graft on the "hll_" part yourself. <br>
            The compiler only does so for inline literals and not for anything like "len"&"gth" or apply({"length","integer"},routine_id).<br>
            At the last count, there are some 25 such hll_xxx routines, and despite what I said above I suppose you do need to know which
            is which to figure out which is going to need the hll_prefix, but you can gather that from builtins/hll_stubs.e easily enough,
            or if you prefer they are all listed alphabetically in the index of phix.chm (and all linking directly to this very section),
            just type "hll" in the index and they&rsquo;ll all appear.<br>
            Also I would hope obviously this file is only an auto-include in the cases where the compiler has spotted it is needed: if 
            you are having to graft on the "hll_" yourself, then you will probably need to "include hll_stubs.e" explicitly as well.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 1:</b>
         </td>
         <td>
<!--eucode>
procedure foo()
    puts(1, "Hello World\n")
end procedure
constant r_foo = routine_id("foo")
call_proc(r_foo, {})    -- same as calling foo()
r_foo()                 -- "", in 0.8.1+
call_proc(foo, {})      -- "", in 0.8.2+
</eucode-->
<pre>
<font color="#008080">procedure</font><font color="#000000"> foo</font><font color="#0000FF">()</font>
<font color="#7060A8">    puts</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000"> "Hello World\n"</font><font color="#0000FF">)</font>
<font color="#008080">end procedure
constant</font><font color="#000000"> r_foo</font><font color="#0000FF"> =</font><font color="#5E005E"> routine_id</font><font color="#0000FF">(</font><font color="#008000">"foo"</font><font color="#0000FF">)</font>
<font color="#7060A8">call_proc</font><font color="#0000FF">(</font><font color="#000000">r_foo</font><font color="#0000FF">,</font><font color="#800000"> {}</font><font color="#0000FF">)   </font><font color="#000080"><i> -- same as calling foo()</i></font>
<font color="#000000">r_foo</font><font color="#0000FF">()                </font><font color="#000080"><i> -- "", in 0.8.1+</i></font>
<font color="#7060A8">call_proc</font><font color="#0000FF">(</font><font color="#000000">foo</font><font color="#0000FF">,</font><font color="#800000"> {}</font><font color="#0000FF">)     </font><font color="#000080"><i> -- "", in 0.8.2+</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 2:</b>
         </td>
         <td>
<!--eucode>
function apply_to_all(sequence s, integer f)
-- apply the specified function to all elements of a sequence
    for i=1 to length(s) do
        s[i] = call_func(f, {s[i]})
    end for
    return s
end function

function add1(atom x)
    return x + 1
end function

?apply_to_all({1, 2, 3}, routine_id("add1"))  -- displays {2,3,4}
?apply({1, 2, 3}, add1)  -- (equivalent in 0.8.2+ - add1 valid & apply builtin)
</eucode-->
<pre>
<font color="#008080">function</font><font color="#000000"> apply_to_all</font><font color="#0000FF">(</font><font color="#004080">sequence</font><font color="#000000"> s</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> f</font><font color="#0000FF">)</font>
<font color="#000080"><i>-- apply the specified function to all elements of a sequence</i></font>
<font color="#008080">    for</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">1</font><font color="#008080"> to</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">s</font><font color="#0000FF">)</font><font color="#008080"> do</font>
<font color="#000000">        s</font><font color="#0000FF">[</font><font color="#000000">i</font><font color="#0000FF">] =</font><font color="#7060A8"> call_func</font><font color="#0000FF">(</font><font color="#000000">f</font><font color="#0000FF">,</font><font color="#800000"> {</font><font color="#000000">s</font><font color="#800080">[</font><font color="#000000">i</font><font color="#800080">]</font><font color="#800000">}</font><font color="#0000FF">)</font>
<font color="#008080">    end for
    return</font><font color="#000000"> s</font>
<font color="#008080">end function

function</font><font color="#000000"> add1</font><font color="#0000FF">(</font><font color="#004080">atom</font><font color="#000000"> x</font><font color="#0000FF">)</font>
<font color="#008080">    return</font><font color="#000000"> x</font><font color="#0000FF"> +</font><font color="#000000"> 1</font>
<font color="#008080">end function
</font>
<font color="#0000FF">?</font><font color="#000000">apply_to_all</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000"> 2</font><font color="#0000FF">,</font><font color="#000000"> 3</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#5E005E"> routine_id</font><font color="#800000">(</font><font color="#008000">"add1"</font><font color="#800000">)</font><font color="#0000FF">) </font><font color="#000080"><i> -- displays {2,3,4}</i></font>
<font color="#0000FF">?</font><font color="#5E005E">apply</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000"> 2</font><font color="#0000FF">,</font><font color="#000000"> 3</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#000000"> add1</font><font color="#0000FF">) </font><font color="#000080"><i> -- (equivalent in 0.8.2+ - add1 valid &amp; apply builtin)</i></font>
</pre>
            <br>
            Note that add1 could be a private function in a completely different file; there is no need for it to be in scope when (actually) called.
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\VM\prtnidN.e (an autoinclude) for details of the actual implementation.
            <br>
            <br>
            Note however that the compiler tries very hard to avoid calling/including that code, if things can be resolved at compile-time.
            <br>
            <br>
            The get_routine_info() routine is implemented separately, in builtins\get_routine_info.e (another autoinclude)
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="call_proc.htm">call_proc</a>,
          <a href="call_func.htm">call_func</a>,
          <a href="apply.htm">apply</a>,
          <a href="call_back.htm">call_back</a>,
          <a href="define_c_func.htm">define_c_func</a>,
          <a href="define_c_proc.htm">define_c_proc</a>,
          <a href="ccall.htm">Calling C Functions</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
          When possible the routine_id is resolved at compile-time, but (especially for constructed strings) can be left until run-time.
          There is also an inline assembler compiler directive of the same name, which <i>must</i> however be resolved at compile-time,
          and forward references are explicitly disallowed. See pilasm.e for implementation details.
          <br>
          <br>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_12a65b96-c3ab-4175-936c-8e1295c81946');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_12a65b96-c3ab-4175-936c-8e1295c81946" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
    #ilASM{
            ...
            mov edx,routine_id(fopen)           -- mov edx,imm32 (sets K_ridt)
            mov ecx,$_Ltot                      -- (symtab[fopen][S_Ltot])
            call :%opFrame
            pop dword[ebp]                      -- filepath
            pop dword[ebp-4]                    -- openmode
            mov [ebp+28],:openret
            jmp $_il                            -- (symtab[fopen][S_il])
          ::openret
            ...
          }
</eucode-->
<pre>
<font color="#000000">    #</font><font color="#008080">ilASM</font><font color="#0000FF">{
            ...</font>
<font color="#000000">            mov edx</font><font color="#0000FF">,</font><font color="#5E005E">routine_id</font><font color="#800000">(</font><font color="#000000">fopen</font><font color="#800000">)          </font><font color="#000080"><i> -- mov edx,imm32 (sets K_ridt)</i></font>
<font color="#000000">            mov ecx</font><font color="#0000FF">,</font><font color="#000000">$_Ltot                     </font><font color="#000080"><i> -- (symtab[fopen][S_Ltot])</i></font>
<font color="#7060A8">            call</font><font color="#0000FF"> :</font><font color="#000000">%opFrame
            pop dword</font><font color="#800000">[</font><font color="#000000">ebp</font><font color="#800000">]                     </font><font color="#000080"><i> -- filepath</i></font>
<font color="#000000">            pop dword</font><font color="#800000">[</font><font color="#000000">ebp</font><font color="#0000FF">-</font><font color="#000000">4</font><font color="#800000">]                   </font><font color="#000080"><i> -- openmode</i></font>
<font color="#000000">            mov</font><font color="#800000"> [</font><font color="#000000">ebp</font><font color="#0000FF">+</font><font color="#000000">28</font><font color="#800000">]</font><font color="#0000FF">,:</font><font color="#000000">openret
            jmp $_il                           </font><font color="#000080"><i> -- (symtab[fopen][S_il])</i></font>
<font color="#0000FF">          ::</font><font color="#000000">openret</font>
<font color="#0000FF">            ...
          }</font>
</pre>
             </div>
            </div>
           </div>
          </div>
            Note that there are no quotes around the routine name when invoked in this manner within #ilASM. As shown, $_Ltot and $_il can be used to obtain the equivalent
            fixed constant literal values from the symtab entry corresponding to the most recent routine_id directive. It is currently coded to issue an error if you forget
            to use all three, routine_id first. The statement "mov edx,routine_id(fopen)" is compiled to and executes as (say) "mov edx,118", and also sets the K_ridt (known 
            routine_id target) flag on symtab[fopen], therefore forcing full parameter typechecking.
            <br>
            <br>
            The above example is taken from builtins\VM\pfileioN.e (wherein you can find 32 and 64-bit versions with proper reference counting) and implements a hll open() 
            statement. Of course the latter is much easier, and this method should only be used when some other reason makes it necessary, in this specific case that would
            be a combination of getting these things into the optable (so that pfileioN.e does not have to be recompiled every time when interpreting) and the subsequent 
            implications for thread-safety (in top-level code).
            <br>
            <br>
            In Phix, a return value of 0 for failure would probably make more sense, however for compatibility with Euphoria, on which 0 <i>is</i> a valid routine_id,
            it returns -1. Previous versions of Phix could also return -2 if there were multiple globals of that name, and -3 if the namespace did not exist, and some
            (Phix-only) routines check the result for &lt;=0, or even &lt;=T_const1(==26) as nothing in the symbol table &lt;=26 can be a valid routine_id target.
<!--
            <br>
            <br>
            The SetHandler() routine in win32lib.ew performs special handling of -1 [clear] and -2 [prefix] in the (list of) routine_ids: that handling is unchanged
            but there may be some subtle differences as routine_id() now generates 0 - my hope is that it exposes a few bugs that might have previously slipped under 
            the radar, rather than causing problems it should not.

old/partially attempted before deciding against:
            <br>
            <br>
            If the name cannot be found, 0 is returned. For compatibility with Euphoria, which returns -1, and older versions of Phix, which returned -1/-2/-3, the 
            result should be tested for &lt;=0 (should you see anything testing for "=-1", please change it to "&lt;=0" and, if appropriate, let me know).
-->
            <br>
            <br>
            As of 0.8.1, routine_ids are first class, ie [also] callable directly, and as of 0.8.2 known routine names not followed by '(' are
            treated as valid routine_ids [routine_id() itself still exists and is still sometimes necessary, eg for constructed string names]. Eg:
            <br>
            <br>
<!--eucode>
            procedure show(string s) ?s end procedure
            constant r_show = routine_id("show")
            -- show("40")   (normal non-routine_id call [still valid!])
            call_proc(r_show,{"41"})                -- old style [""!]
            r_show("42")                            -- *** new (0.8.1) ***
            call_proc(show,{"43"})                  -- *** new (0.8.2) ***

            function f(integer i) return i end function
            constant r_f = routine_id("f")
            --?f(40)        (normal non-routine_id call [still valid!])
            ?call_func(r_f,{41})                    -- old style [""!]
            ?r_f(42)                                -- *** new (0.8.1) ***
            ?call_func(f,{43})                      -- *** new (0.8.2) ***
</eucode-->
<pre>
<font color="#008080">            procedure</font><font color="#000000"> show</font><font color="#0000FF">(</font><font color="#004080">string</font><font color="#000000"> s</font><font color="#0000FF">) ?</font><font color="#000000">s</font><font color="#008080"> end procedure
            constant</font><font color="#000000"> r_show</font><font color="#0000FF"> =</font><font color="#5E005E"> routine_id</font><font color="#0000FF">(</font><font color="#008000">"show"</font><font color="#0000FF">)</font>
<font color="#000080"><i>            -- show("40")   (normal non-routine_id call [still valid!])</i></font>
<font color="#7060A8">            call_proc</font><font color="#0000FF">(</font><font color="#000000">r_show</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#008000">"41"</font><font color="#800000">}</font><font color="#0000FF">)               </font><font color="#000080"><i> -- old style [""!]</i></font>
<font color="#000000">            r_show</font><font color="#0000FF">(</font><font color="#008000">"42"</font><font color="#0000FF">)                           </font><font color="#000080"><i> -- *** new (0.8.1) ***</i></font>
<font color="#7060A8">            call_proc</font><font color="#0000FF">(</font><font color="#000000">show</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#008000">"43"</font><font color="#800000">}</font><font color="#0000FF">)                 </font><font color="#000080"><i> -- *** new (0.8.2) ***
</i></font>
<font color="#008080">            function</font><font color="#000000"> f</font><font color="#0000FF">(</font><font color="#004080">integer</font><font color="#000000"> i</font><font color="#0000FF">)</font><font color="#008080"> return</font><font color="#000000"> i</font><font color="#008080"> end function
            constant</font><font color="#000000"> r_f</font><font color="#0000FF"> =</font><font color="#5E005E"> routine_id</font><font color="#0000FF">(</font><font color="#008000">"f"</font><font color="#0000FF">)</font>
<font color="#000080"><i>            --?f(40)        (normal non-routine_id call [still valid!])</i></font>
<font color="#0000FF">            ?</font><font color="#7060A8">call_func</font><font color="#0000FF">(</font><font color="#000000">r_f</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">41</font><font color="#800000">}</font><font color="#0000FF">)                   </font><font color="#000080"><i> -- old style [""!]</i></font>
<font color="#0000FF">            ?</font><font color="#000000">r_f</font><font color="#0000FF">(</font><font color="#000000">42</font><font color="#0000FF">)                               </font><font color="#000080"><i> -- *** new (0.8.1) ***</i></font>
<font color="#0000FF">            ?</font><font color="#7060A8">call_func</font><font color="#0000FF">(</font><font color="#000000">f</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">43</font><font color="#800000">}</font><font color="#0000FF">)                     </font><font color="#000080"><i> -- *** new (0.8.2) ***</i></font>
</pre>
            <br>
            Any integer followed by '(' is treated as a call_func() or a call_proc(), depending on the context, and obviously as above the normal/old styles remain perfectly 
            valid and fully supported. However I decided against supporting this sort of thing (at least not before someone comes up with a compelling reason to):
            <br>
            <br>
<!--eucode>
            --?r_f(r_f)(44)
            --r_f(r_show)(45)
            --sequence rids = {r_show}
            --rids[1](46)
</eucode-->
<pre>
<font color="#000080"><i>            --?r_f(r_f)(44)
            --r_f(r_show)(45)
            --sequence rids = {r_show}
            --rids[1](46)</i></font>
</pre>
            <br>
            Instead you have to code integer rid=r_f(r_f) then ?rid(44), etc. (Some wag might say that makes them second class, but it is not like you could ever do anything 
            like that with "show" anyway.) Note that i(5) where i is not a routine_id will fail just as badly and in exactly the same way as call_func/proc(i,{5}) always did.<br>
            Likewise the additional compile-time validation of argument types that occurs on a show() call is not performed/deferred until run-time on r_show(), in exactly 
            the same way as it always was for explicit/old-style call_func/proc() calls. <br>
            These changes (first class routine_ids) were made to complement the syntax enhancements for the new struct/class handling, specifically class methods.
            <br>
            <br>
            There is inevitably<sup><small>1</small></sup> perhaps three or four times as much overhead on a call_func/proc(), and equivalently on r_show()-style, as there is 
            on a direct call, however that should be of no concern unless you are invoking it millions of times, in which case I would suggest you consider three versions of 
            a tight inner loop rather than just the one inner loop that can call any of three different routines.<br>
            <sup><small>1</small></sup> The arguments are boxed into a single sequence, additional validation occurs on rid and the length of said sequence, then each element
            of the sequence is individually extracted and put into place (same deal for r_show()-style), whereas of course a direct call has no rid to validate, the number 
            and type of arguments is validated (and fairly often only) at compile-time, and each argument is put directly into place. Each routine that might be a target of
            routine_id/call_func/proc is also marked with K_ridt, which forces full typechecking on all parameters, whereas for direct-only routines the compiler uses type
            inferencing and omits any provably unnecessary typechecking.
            <sup><small>2</small></sup> A similar argument applies to hll routines with their variables in memory and typechecks vs. asm and direct/specific CPU registers.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
