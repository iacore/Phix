<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">rtn</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include xpGUI.e
            <br>
            <br>
            rtn <i>identifier</i> <small><i>[but more often just specified inline]</i></small>
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Type. Technically an integer index into the symbol table, or NULL, but usually specified as the plain identifier of a 
            function or procedure, <i>without</i> a trailing '(', since that would of course make it an invocation of that code.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported, or at least understood by pwa/p2js and mapped to "let /*rtn*/" aka (almost) completely ignored, since JavaScript is a 
          <a href="glossary.htm#typeless">typeless</a> language.
          As per <a href="usingtypes.htm#can">unwise</a>, xpGUI.js does not even have a fake version, which <i>you should not ever want anyway</i>.<br>
          Note that on desktop/Phix a rtn is an integer (index to the symbol table) whereas in JavaScript it is the actual (raw) function [pointer].<br>
          Hence like <a href="gdx.htm">gdx</a>, an application should refrain from printing, comparing (etc) rtn variables, except perhaps during 
          initial debugging.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
include xpGUI.e

function quit(gdx h)
    return XPG_CLOSE
end function

gdx quit_btn = gButton("Quit",quit) -- << last param here
</eucode-->
<pre>
<font color="#008080">include</font><font color="#000000"> xpGUI.e
</font>
<font color="#008080">function</font><font color="#000000"> quit</font><font color="#0000FF">(</font><font color="#7060A8">gdx</font><font color="#000000"> h</font><font color="#0000FF">)</font>
<font color="#008080">    return</font><font color="#004600"> XPG_CLOSE</font>
<font color="#008080">end function
</font>
<font color="#7060A8">gdx</font><font color="#000000"> quit_btn</font><font color="#0000FF"> =</font><font color="#7060A8"> gButton</font><font color="#0000FF">(</font><font color="#008000">"Quit"</font><font color="#0000FF">,</font><font color="#000000">quit</font><font color="#0000FF">)</font><font color="#000080"><i> -- &lt;&lt; last param here</i></font>
</pre>
            Note that <a href="gButton.htm#gQuit">gQuit</a> is functionally identical to and can be used in place of the quit function above.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="gButton.htm">gButton</a>,
          <a href="routine_id.htm#aux">get_routine_info</a><br>
          <a name=tech></a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            You can theoretically (and xpGUI.e does) use <a href="routine_id.htm#aux">get_routine_info</a>() to get further details, and as ever 
            should bear in mind the standard <a href="usingtypes.htm#can">unwise</a> nature of using this type to definitively determine whether 
            an object is in fact such, as many things which are clearly not (eg 145, '7') may well pass, aka the rtn type is not "properly tagged".
            It does however check that a non-null value is numerically greater than the last routine of xpGUI.e, ie it is a routine which has been
            declared somewhere <i>after</i> the "include xpGUI.e" statement, as it would need to be if, say, using the gdx type or returning XPG_CLOSE,
            most notably excluding all builtins. It also explicitly permits a small handful of internal/private/default handlers.
         </td>
        </tr>
       </table>
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
