<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">safe_poke</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
<!--DEV provisional-->
          safe_poke(atom base, integer offset, object x)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>If x is an atom, write a single byte value to memory address a.
          <br>
          <br>
            If x is a sequence, write a sequence of byte values to
             consecutive memory locations starting at location a.
          <br>
<br>
<i>&lt;provisional&gt;</i>
<br>
            If the address is supplied in the {base, offset} form, where base is a value 
            obtained from the builtin <a href="allocate.htm">allocate</a>() function, then
            additional safety checks are performed. Specifically (see builtins/VM/pHeap.e)
            it checks that the Phix Heap Manager pRoots are not corrupted and validates 
            against nSize for the requested operation. Typically the extra overhead is
            negligle, however in a tight inner loop the cost of constructing the sequence
            {base, offset} may be quite noticeable, but of course detecting corruption in
            the heap as soon as possible makes debugging far easier, if you are pointed at
            the line making the error rather than one that suffers an inexplicable fault
            because of something that happened who-knows-when/where. Note there are times 
            when this form cannot be used, for instance the Windows API WM_GETMINMAXINFO 
            message supplies a MINMAXINFO structure, that has nothing to do with the heap 
            manager, and therefore any desired updates must be performed using an atom 
            address.
<br>
<i>&lt;/provisional&gt;</i>
          <br>
          <br>
            There are in fact 4 other variations of the poke procedure:
          <br>
          <br>
<pre>
      poke1  poke2  poke4  poke8
</pre>
          <br>
            which write byte/word/dword/qword value(s) to memory.
            The poke procedure is an alias of poke1.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>
            For poke (/poke1) the lower 8 bits of each byte value, i.e.
          <b>remainder(x, 256)</b>,
            are stored in memory, and likewise for poke2/4, the lower 16/32.
          <br>
          <br>
            The poke8 function is intended for use on 64-bit architectures; invoking 
            it on 32-bit may cause some loss of precision, and special care must be 
            taken with the results from <a href="peek.htm">peek8s/u</a>.
            Further note that attempts to code 64-bit literals in a 32-bit program
            are likely to miss, for example "#8000000000000000" actually ends up as
            #7FFFFFFFFFFFFC00, however better results can be achieved by coding the 
            value using "#80000000*#100000000". (In truth that is probably a fixable
            bug, but one I have no time or inclination to investigate right now, <!--DEV-->
            especially given that say #8000000000000001 simply cannot be stored, at
            least not in a single atom, on 32-bit, as per <a href="peek.htm">peek8s/u</a>.)
          <br>
          <br>
            It is faster to write several bytes at once by poking a sequence
            of values, than it is to write one byte at a time in a loop.
          <br>
          <br>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
a = allocate(100)   -- allocate 100 bytes in memory
-- poke one byte at a time:
poke({a,0},97)          -- (or poke(a,97))
poke({a,1},98)          -- (or poke(a+1,98))
poke({a,2},99)          -- (or poke(a+2,99))
-- poke 3 bytes at once:
poke({a,0},{97,98,99})  -- (or poke(a,{97,98,99}))
</eucode-->
<pre>
<font color="#000000">a</font><font color="#0000FF"> =</font><font color="#7060A8"> allocate</font><font color="#0000FF">(</font><font color="#000000">100</font><font color="#0000FF">)  </font><font color="#000080"><i> -- allocate 100 bytes in memory
-- poke one byte at a time:
</i></font><font color="#7060A8">poke</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#000000">0</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#000000">97</font><font color="#0000FF">)         </font><font color="#000080"><i> -- (or poke(a,97))
</i></font><font color="#7060A8">poke</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#000000">98</font><font color="#0000FF">)         </font><font color="#000080"><i> -- (or poke(a+1,98))
</i></font><font color="#7060A8">poke</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#000000">99</font><font color="#0000FF">)         </font><font color="#000080"><i> -- (or poke(a+2,99))
-- poke 3 bytes at once:
</i></font><font color="#7060A8">poke</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#000000">0</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">97</font><font color="#0000FF">,</font><font color="#000000">98</font><font color="#0000FF">,</font><font color="#000000">99</font><font color="#800000">}</font><font color="#0000FF">) </font><font color="#000080"><i> -- (or poke(a,{97,98,99}))</i></font>
</pre>
         </td>
        </tr>
<!-- DEV (demo\dos32\callmach.ex)
        <tr>
         <td valign=top>
          <b>Example Program:</b>
         </td>
         <td>
          <font color="#5500FF">
           <b>demo\dos32\callmach.ex</b>
          </font>
         </td>
        </tr>
-->
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="safe_poke.htm">safe_poke</a>,
          <a href="peek.htm">peek</a>,
          <a href="allocate.htm">allocate</a>,
          <a href="free.htm">free</a>,
          <a href="call.htm">call</a>,
          <a href="library.htm#safe">
           <font color="#5500FF">
            <b>safe.e</b>
           </font>
          </a>
         </td>
        </tr>
       </table>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
