<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">scanf</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         <a href="sequence.htm">sequence</a> paramsets = scanf(<a href="string.htm">string</a> s, 
                                                               <a href="string.htm">string</a> fmt)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Attempt to find a <a href="sequence.htm">sequence</a> for which <a href="sprintf.htm">sprintf</a>(fmt,params) could have produced s.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            May return more than one set, for example
            <br>
            <br>
<!--eucode>
    res = scanf("one two three","%s %s") -- res is {{"one","two three"},{"one two","three"}}
</eucode-->
<pre>
<font color="#000000">    res</font><font color="#0000FF"> =</font><font color="#5E005E"> scanf</font><font color="#0000FF">(</font><font color="#008000">"one two three"</font><font color="#0000FF">,</font><font color="#008000">"%s %s"</font><font color="#0000FF">)</font><font color="#000080"><i> -- res is {{"one","two three"},{"one two","three"}}</i></font>
</pre>
            <br>
            Note that scanf relies heavily on literal separators, especially spaces. It is illegal to specify back-to-back
            strings, integers, or atoms with format strings such as "%s%s", "%d%d", "%s%d", etc. The one exception is that
            a string can immediately follow a number, an example of which is "4th" and "%d%s".
            <br>
            <br>
            Theoretically it might be possible to write a scanf that yields {{1,23},{12,3}} from scanf("123","%d%d") but I 
            for one cannot think of a single practical use, and getting {{"","AB"},{"A","B"},{"AB",""}} from scanf("AB","%s%s") 
            is also of highly questionable worth. Likewise it is deemed completely unnecessary to be able to get {"hello",12} 
            from "hello12", which proves hard, as opposed to getting that same result from "hello 12", which is trivial.
            Should this routine not quite meet your needs, you are <i>strongly advised</i> to write your own ditty: even the 
            most basic assumption about what to expect can make that exponentially easier than modifying fully generic code,
            see also the <a href="#final_remark" onclick="opentech()">final remark</a>.

            <br>
            <br>
            Any width/precision/justify/zerofill details are for the most part quietly ignored: you may get the same results
            from %d/%d/%d as %02d/%02d/%04d, but obviously the latter might make the intent clearer. If scanf is about to 
            return several possibilities, it tests the results of sprintf and trims the result set down to those with an 
            exact character-by-character match, as long as that last pass does not trim the result set down to zero.
            For more details regarding format strings please refer to <a href="printf.htm">printf</a>.
            All characters not part of a %-group are treated as literal.
            <br>
            <br>
            The d/x/o/b formats can be explicitly overriden within s such that scanf("#FF","%d") and scanf("255","%d") both
            succeed, as do scanf("#FF","#%x"), scanf("#FF","%x") and scanf("FF","%x"), with the first of those explicitly 
            un-overriding the base, and the last providing the base to use in the format only.
            <br>
            <br>
            Failure is indicated by {}. Otherwise each element of the results has as many elements as there were format
            specifications in the format string, in the same order as specfied. A perfect unique and unambiguous result
            is indicated by length(res)=1.
            <br>
            <br>
            If you are confident of success, and happy to take the first should more than one result set be returned, then
            <br>
            <br>
<!--eucode>
    {{x,y}} = scanf(line,"%d %d")
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">    {</font><font color="#800000">{</font><font color="#000000">x</font><font color="#0000FF">,</font><font color="#000000">y</font><font color="#800000">}</font><font color="#0000FF">} =</font><font color="#5E005E"> scanf</font><font color="#0000FF">(</font><font color="#000000">line</font><font color="#0000FF">,</font><font color="#008000">"%d %d"</font><font color="#0000FF">)</font>
</pre>
            <br>
            is the typical syntax. The double braces are needed to select the first of several possible result sets (not that
            I can imagine any case where "%d %d" would generate more than one result, but other formats might). Of course
            <br>
            <br>
<!--eucode>
    sequence res = scanf(line,"%d %d")
    if length(res)=0 (or !=1) then return/exit/error end if
    {{x,y}} = res
</eucode-->
<pre>
<font color="#000000"></font><font color="#004080">    sequence</font><font color="#000000"> res</font><font color="#0000FF"> =</font><font color="#5E005E"> scanf</font><font color="#0000FF">(</font><font color="#000000">line</font><font color="#0000FF">,</font><font color="#008000">"%d %d"</font><font color="#0000FF">)
</font><font color="#008080">    if</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">res</font><font color="#0000FF">)=</font><font color="#000000">0</font><font color="#0000FF"> (</font><font color="#008080">or</font><font color="#0000FF"> !=</font><font color="#000000">1</font><font color="#0000FF">)</font><font color="#008080"> then return</font><font color="#0000FF">/</font><font color="#008080">exit</font><font color="#0000FF">/</font><font color="#000000">error</font><font color="#008080"> end if
</font><font color="#0000FF">    {</font><font color="#800000">{</font><font color="#000000">x</font><font color="#0000FF">,</font><font color="#000000">y</font><font color="#800000">}</font><font color="#0000FF">} =</font><font color="#000000"> res</font>
</pre>
            <br>
            is the safer way, again needing the double braces.
            <br>
            <br>
            The <a href="parse_date_string.htm">parse_date_string</a>() function of <a href="timedate.htm">timedate</a>
            is a much better way to process date and time strings.
            <br>
            <br>
            <i>(programming note: %s is all the wildcard-matching we can handle; ? and * are just literals.)</i>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 1:</b>
         </td>
         <td>
<!--eucode>
function isNumber(string s)
    return scanf(s,"%f")!={}
end function
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">function</font><font color="#000000"> isNumber</font><font color="#0000FF">(</font><font color="#004080">string</font><font color="#000000"> s</font><font color="#0000FF">)
</font><font color="#008080">    return</font><font color="#5E005E"> scanf</font><font color="#0000FF">(</font><font color="#000000">s</font><font color="#0000FF">,</font><font color="#008000">"%f"</font><font color="#0000FF">)!={}
</font><font color="#008080">end function</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 2:</b>
         </td>
         <td>
<!--eucode>
?scanf("file_name.gif","file_%s.%s")        -- {{"name","gif"}}
?scanf("file_test.name.gif","file_%s.%s")   -- {{"test","name.gif"},{"test.name","gif"}}
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">?</font><font color="#5E005E">scanf</font><font color="#0000FF">(</font><font color="#008000">"file_name.gif"</font><font color="#0000FF">,</font><font color="#008000">"file_%s.%s"</font><font color="#0000FF">)       </font><font color="#000080"><i> -- {{"name","gif"}}
</i></font><font color="#0000FF">?</font><font color="#5E005E">scanf</font><font color="#0000FF">(</font><font color="#008000">"file_test.name.gif"</font><font color="#0000FF">,</font><font color="#008000">"file_%s.%s"</font><font color="#0000FF">)  </font><font color="#000080"><i> -- {{"test","name.gif"},{"test.name","gif"}}</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\scanf.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="printf.htm">printf</a>,
          <a href="sprintf.htm">sprintf</a>,
          <a href="timedate.htm">timedate</a>,
          <a href="parse_date_string.htm">parse_date_string</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            The C routine scanf reads from stdin; this is much closer to the C routine sscanf, but is not particularly based on either.
            <br>
            <a name=final_remark></a>
            <br>
            There are some obvious deficiencies in this routine, for instance there is no (easy) way to get {r,g,b} from "#RRGGBB": feel 
            free to try and improve it, however it is probably one of those routines that someone somewhere will always be able to think
            of yet something else it could or should do.
         </td>
        </tr>
       </table>
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
