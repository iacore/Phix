<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">sequence</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          sequence <i>identifier</i>
          <br>
          <i>-- or --</i>
          <br>
          <a href="integer.htm#bool">bool</a> b = sequence(<a href="object.htm">object</a> x)
          <small>
          <br>
          <br>
          <i>-- or --</i>
          <br>
          <br>
          </small>
          seq <i>identifier</i>
          <br>
          <i>-- or --</i>
          <br>
          <a href="integer.htm#bool">bool</a> res = seq(<a href="object.htm">object</a> x)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            This serves to define the sequence type. seq is just a simple alias of sequence.<br>
            You can also call it like an ordinary function to determine if an object is a sequence.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported, however JavaScript is a <i><a href="glossary.htm#typeless">typeless</a></i> language, with 
          "<i><code>sequence q</code></i>" being <a href="mappings.htm">mapped</a> to 
          "<i><code>let /*sequence*/ q;</code></i>" and there are no run-time typechecks, 
          or at least they are very rare (see implementation notes below). An explicit hll/Phix "if sequence(x)" and similar 
          expressions all work under pwa/p2js exactly as expected.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            When invoked as a function, returns <a href="logicops.htm">true</a> (1) if x is a sequence otherwise <a href="logicops.htm">false</a> (0).
            <br>
            <br>
            Note that <code>sequence(x)</code> and <code>not atom(x)</code> are effectively identical.
            <br>
            <br>
            A sequence can hold all string values, but the reverse is not true.
         </td>
        </tr>
<!--
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
-->
        <tr>
         <td>
          <b>Example 1:</b>
         </td>
         <td>
<!--eucode>
sequence s = {1,2,3}
</eucode-->
<pre>
<font color="#004080">sequence</font><font color="#000000"> s</font><font color="#0000FF"> = {</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#000000">3</font><font color="#0000FF">}</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 2:</b>
         </td>
         <td>
<!--eucode>
if sequence(x) then
    total = 0
    for i=1 to length(x) do
        total += x[i]
    end for
else
    -- x must be an atom
    total = x
end if
</eucode-->
<pre>
<font color="#008080">if</font><font color="#004080"> sequence</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#0000FF">)</font><font color="#008080"> then</font>
<font color="#000000">    total</font><font color="#0000FF"> =</font><font color="#000000"> 0</font>
<font color="#008080">    for</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">1</font><font color="#008080"> to</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#0000FF">)</font><font color="#008080"> do</font>
<font color="#000000">        total</font><font color="#0000FF"> +=</font><font color="#000000"> x</font><font color="#0000FF">[</font><font color="#000000">i</font><font color="#0000FF">]</font>
<font color="#008080">    end for
else</font>
<font color="#000080"><i>    -- x must be an atom</i></font>
<font color="#000000">    total</font><font color="#0000FF"> =</font><font color="#000000"> x</font>
<font color="#008080">end if</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            There are generic versions of the sequence function implemented as :%opSq in builtins\VM\pType.e and :%opSq0 in builtins\VM\pJcc.e that 
            the compiler only invokes as a last resort, preferring instead to inline that functionality if the argument is known to be assigned or the
            result variable, if any, is known to be an integer, ie does not require decref/dealloc. Note that opSeq is an equality test, and must not 
            be confused with opSq, which is the sequence test. The compiler may also completely omit the test and/or any related code, if type 
            inference/propagation determines that the result will always be true or always false.<br>
            The file pwa/p2js.js defines sequence() with an optional name parameter, which if not "" triggers unassigned or type check errors, but that 
            (parameter) is not intended for or available from hll/Phix code, and only meant for use in manually hand-crafted replacements elsewhere 
            in p2js.js, and in practice it ended up being invoked (that way) rather more sparingly than first predicted.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="atom.htm">atom</a>,
          <a href="integer.htm">integer</a>,
          <a href="string.htm">string</a>,
          <a href="object.htm">object</a>,
          <a href="sequences.htm">Sequences</a>,
          <a href="language.htm">Core Language</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
          The sq_seq() routine can be used to apply a sequence() test to all top-level elements of a sequence, eg
          <code>sq_seq({1,1.5,"string",{1,1.5,"string",{}}) ==&gt; {false,false,true,true}</code>. That routine 
          returns a single true/false if passed an atom or string, otherwise a "flat" sequence of true/false of
          the same length as the input argument. There are no known valid uses of the sq_seq() routine, though, as yet.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
