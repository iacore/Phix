<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">serialize.e</h1>
      <div id="mainSection">
        The file builtins\serialize.e (an autoinclude) provides routines for serialization of any data objects, 
        ie conversion to and from a flat series of bytes.
        <br>
        <br>
        For instance, when transmitting some value between programs or over a network connection, you might 
        be fine with say 'X', 42, and even "Hello", but are likely to encounter snags with larger integers, 
        fractions, exponents, and most significantly of all, deeply nested sequences. <br>
        Perhaps you could use human-readable strings, but that might introduce discrepancies in some extreme 
        values, and will be a bit longer and therefore slower than it really needs to be. <br>
        Instead, this component is easy to use and provides exact results with the bonus of needing a bit 
        less space, not that it incorporates any compression techniques along the lines of zip, bz2, or lzma 
        (as yet).
        <br>
        <br>
        The code is based on and provides partial compatibility for Euphoria&rsquo;s std\serialize.e
        <br>
        <br>
        An additional parameter has been added to deserialize to control whether or not the final pos should 
        be returned when processing a sequence input. (The Euphoria version always returns {value,pos} when 
        given a sequence, but not a file.) The deserialize routine has also been enhanced to allow retrieval
        directly from a raw memory address.
        <br>
        <br>
        Obviously these routines should not be changed too much otherwise they might stop working with 
        Euphoria-encoded things, but I thought I had better produce a thread-safe version, because chucking 
        big sequences over a slow network connection is precisely the sort of thing that gets relegated to 
        a background thread.
<!--
        <br>
        <br>
        Not supported on <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js</b></span></a> since it uses
        <a href="atom_to_floatNN.htm">atom_to_float32/64/80</a>() and 
        <a href="floatNN_to_atom.htm">float32/64/80_to_atom</a>() - hopefully one day I will find a way to
        implement those in JavaScript...
         It would probably be reasonably 
        straightforward to do something with JavaScript&rsquo;s JSON.stringify/parse, but obviously without
        any file handle, memory address, or position stuff, so a couple of new simpler entry points that 
        provide compatibility between the desktop and browser would appear to be in order. Alternatively,
        if I could ever find a suitable way to implement those offending routines in JavaScript...
-->
        <br>
        <br>
        <table>
         <col style="width: 5%"/>
         <tr>
          <td>
           <a href="serialize.htm">
            <b>serialize</b>
           </a>
          </td>
          <td width=10 align=center>-</td>
          <td>return the serialized representation of any object, as a sequence of bytes
          </td>
         </tr>
         <tr>
          <td>
           <a href="deserialize.htm">
            <b>deserialize</b>
           </a>
          </td>
          <td width=10 align=center>-</td>
          <td>convert a series of bytes back to a standard useable object.
          </td>
         </tr>
        </table>
        <br>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
