<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">setd</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          setd(<a href="object.htm">object</a> key, <a href="object.htm">object</a> data, <a href="integer.htm">integer</a> tid=1)
          <br>
          <br>
          putd() is a simple alias of setd() and as such behaves identically.
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Add a key and data pair to a dictionary.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            tid can be omitted, to use the default dictionary, or the result of a previous <a href="new_dict.htm">new_dict</a>() call.
            <br>
            <br>
            Any key can be mapped to any value, and both can be anything 
            (<a href="integer.htm">integer</a>|<a href="atom.htm">atom</a>|<a href="string.htm">string</a>|[nested]<a href="sequence.htm">sequence</a>, including 0|NULL).
            <br>
            <br>
            It makes no difference whatsoever if you use putd() or setd(); it is simply a matter of personal preference (and in my
            case, forgetfulness).
            <br>
            <br>
            If the key already exists, no error occurs, and the existing previously associated data is simply overwritten.
            <br>
            <br>
            Note that it makes little sense to use reference types, such as structs, mpfr variables, or allocated memory addresses
            as keys: ordering would be pretty unpredictable, changing whatever they refer to would have no effect whatsoever on the 
            behaviour of the dictionary, be that struct fields, numeric values, or memory contents, and finally should you mislay 
            such a key there is no sensible way to recreate one, your only option would be a full traversal. Thinking in terms of 
            an allocated memory address is the easiest way to see why: after <code>atom pMem = allocate(100)</code>, pMem might be 
            #400860, and no amount of peek/poke on those 100 bytes would change pMem itself, whereas should you use peek(pMem) as 
            a key, that&rsquo;s different. A simple test is that if <code>?key</code> doesn&rsquo;t show full and proper details, 
            it is probably not a sensible key, though things like <a href="gdx.htm">gdx</a> variables are quite likely to be fine 
            despite failing that test, that is as long as their ordering doesn&rsquo;t matter, and there may well be other cases 
            where the obstinate non-volatility of reference types as keys in dictionaries is actually an asset.
            <br>
            <br>
            Particularly in the case of a struct it would normally make much more sense to add further fields to hold additional 
            data, rather than using a separate dictionary anyway, and much the same could be said for taking proper advantage of
            <a href="gSetAttribute.htm#USER_DATA">USER_DATA</a> for anything xpGUI-related.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
setd("key","data")
</eucode-->
<pre>
<font color="#7060A8">setd</font><font color="#0000FF">(</font><font color="#008000">"key"</font><font color="#0000FF">,</font><font color="#008000">"data"</font><font color="#0000FF">)</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="getd.htm">getd</a> (regarding case-insensitive keys),
          <a href="new_dict.htm">new_dict</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
