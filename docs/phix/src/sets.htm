<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">sets.e</h1>
      <div id="mainSection">
        The file builtins/sets.e (not an autoinclude) contains routines for simple handling of sets.
        <br>
        <br>
        Aside: For no particularly good reason I launched a full-on rewrite, which has ended up in builtins/sets2.e - and
        was not in the end proved any better or worse, however I realised set-ids just make debugging harder, I think...
        <br>
        <br>
        Internally these routines use a private set_type, but that is documented as sequence here since
        that is what an application should use.
<!--
        Dictionaries can be kept as a standard <a href="sequence.htm">sequence</a>, which will be faster when kept in-order,
        or in a <a href="is_dict.htm">dictionary</a>, which may be faster on larger sets.
-->
        <br>
        <br>
        These routines all work just fine under <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js</b></span></a>,
        aka "with js", although <a href="deep_copy.htm">deep_copy</a>() may be required when result!=s1.
<!-- DONK: you just proved this *IS* possible, dintcha?
        , and
        while you can transpile on the desktop for running in the browser, that will not be possible from the
        online repl, because it is not an autoinclude.
-->
        <br>
        <br>
        <style type="text/css">
          dl {margin:0;padding:0;}
          dt {margin:0;padding:0;}
          dd {margin:0;padding:0;}
          dd.pad {padding-left:8em;}
        </style>
        <div id="nopad" class="nopad" align="center">
         <table cellspacing="0" cellpadding="0" border="0" style="padding: 0; border-style: none;">
          <tr><td align="right" style="padding: 0; border-style: none;">
            <nobr>bool result =&nbsp;</nobr>
          </td><td align="left" style="padding: 0; border-style: none;">
            <dl><dt>
            <b>is_empty</b>(sequence s1)   -- returns true if s1 is empty
            </dt><dd class="pad">
            <br>
            Symbolically represented with a circle with a diagonal through it: &empty;
            <br>
            <br>
            </dd></dl>
          </td></tr>

          <tr><td align="right" style="padding: 0; border-style: none;">
            <nobr>bool result =&nbsp;</nobr>
          </td><td align="left" style="padding: 0; border-style: none;">
            <dl><dt>
            <b>is_member</b>(sequence s1, object x)   -- returns true if x is a member of s1
            </dt><dd class="pad">
            <br>
            Symbolically represented with an E shape: &isin;
            <br>
            <br>
            </dd></dl>
          </td></tr>

          <tr><td align="right" style="padding: 0; border-style: none;">
            <nobr>sequence result =&nbsp;</nobr>
          </td><td align="left" style="padding: 0; border-style: none;">
            <dl><dt>
            <b>add_member</b>(sequence s1, object x)    -- returns s1 with x added if it was not already present
            <br>
            <br>
            </dt></dl>
          </td></tr>

          <tr><td align="right" style="padding: 0; border-style: none;">
            <nobr>sequence result =&nbsp;</nobr>
          </td><td align="left" style="padding: 0; border-style: none;">
            <dl><dt>
            <b>remove_member</b>(sequence s1, object x)   -- returns s1 with x removed if it was present
            <br>
            <br>
            </dt></dl>
          </td></tr>

          <tr><td align="right" style="padding: 0; border-style: none;">
            <nobr>sequence result =&nbsp;</nobr>
          </td><td align="left" style="padding: 0; border-style: none;">
            <dl><dt>
            <b>union</b>(sequence s1, object s2=-1)
            </dt><dd class="pad">
            <br>
            Returns anything that occurs in any set.<br>
            Symbolically represented with a U shape: &cup;<br>
            Can be invoked as union(s1,s2) or union({s1,s2}), where s1 and s2 are sequences and the second
            form permits more than two/any number of sets.<br>
            The union of empty sets is the empty set, as is the union of an empty set of sets. Otherwise 
            empty sets have no impact on the result when in the presence of other non-empty sets.<br>
            An error ocurs when s1 or s2 or elements within that should be sequences/sets are in fact atoms.<br>
            While s1 can be a set of sets, an error occurs if at the same time s2 is a set or set of sets.<br>
            Strings (char sets) are perfectly fine too.
            <br>
            <br>
            </dd></dl>
          </td></tr>

          <tr><td align="right" style="padding: 0; border-style: none;">
            <nobr>sequence result =&nbsp;</nobr>
          </td><td align="left" style="padding: 0; border-style: none;">
            <dl><dt>
            <b>intersection</b>(sequence s1, object s2=-1)
            </dt><dd class="pad">
            <br>
            Returns anything that occurs in every set.<br>
            Symbolically represented as upsidedown U: &cap;<br>
            Can be invoked as intersection(s1,s2) or as intersection({s1,s2}), where s1 and s2 are sequences 
            and the second form permits more than two/any number of sets.<br>
            The intersection of empty sets is the empty set, as is the intersection of an empty set of sets, 
            or a set of just one set. <br>
            The presence of any empty set means that the result will also be the empty set.<br>
            An error ocurs when s1 or s2 or elements within that should be sequences/sets are in fact atoms.<br>
            While s1 can be a set of sets, an error occurs if at the same time s2 is a set or set of sets.<br>
            Strings (char sets) are perfectly fine too.
            <br>
            <br>
            </dd></dl>
          </td></tr>

          <tr><td align="right" style="padding: 0; border-style: none;">
            <nobr>sequence result =&nbsp;</nobr>
          </td><td align="left" style="padding: 0; border-style: none;">
            <dl><dt>
            <b>difference</b>(sequence s1, object s2=-1, bool symmetric=<a href="logicops.htm#tf">true</a>)
            </dt><dd class="pad">
            <br>
            Returns anything missing from some other set.<br>
            If symmetric is <a href="logicops.htm#tf">false</a> only items from s1 or s1[1] are returned, otherwise the result contains 
            each and every item in any set that is missing from any of the other sets.<br>
            Obviously difference(s1,s2,true) is effectively the same as union(difference(s1,s2,false),difference(s2,s1,false))<br>
            [slightly more complicated than that when s1 is a set of sets, but you should get the idea]<br>
            Symbolically represented as: <br>
            symmetric: a triangle, or sometimes as a circle with a horizontal line,<br>
            relative: a backslash
            <br>
            <br>
            </dd></dl>
          </td></tr>

          <tr><td align="right" style="padding: 0; border-style: none;">
            <nobr>bool result =&nbsp;</nobr>
          </td><td align="left" style="padding: 0; border-style: none;">
            <dl><dt>
            <b>is_subset</b>(sequence subset, superset)    -- returns <a href="logicops.htm#tf">false</a> if any element of subset is not in superset
            </dt><dd class="pad">
            <br>
            Symbolically represented as: &sub;
            <br>
            <br>
            </dd></dl>
          </td></tr>

          <tr><td align="right" style="padding: 0; border-style: none;">
            <nobr>bool result =&nbsp;</nobr>
          </td><td align="left" style="padding: 0; border-style: none;">
            <dl><dt>
            <b>is_superset</b>(sequence superset, subset)    -- returns <a href="logicops.htm#tf">true</a> if all elements of subset are in superset
            </dt><dd class="pad">
            <br>
            Symbolically represented as: &sup;
            <br>
            <br>
            </dd></dl>
          </td></tr>
         </table>
        </div>
        <div style="clear:both;height:1px;"> </div>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
