<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">shorten</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            sequence res = <b>shorten</b>(<a href="sequence.htm">sequence</a> s,
                                          <a href="string.htm">string</a> what="digits", 
                                          <a href="integer.htm">integer</a> ml=20,
                                          <a href="string.htm">string</a> fmt=""))
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Crops longer output when necessary.
            <br>
            <br>
            s: the sequence/string to be shortened (when needed).<br>
            what: a name to use in any added suffix.<br>
            ml: the start/end length, as in half the total number of digits/characters/elements, to always keep.<br>
            fmt: for non-string s only, a format to apply to each element as part of the joining process.
            <br>
            <br>
            The original text/sequence is returned unaltered if it is already shorter than 2*ml, or if it would be longer with "..." and the suffix.<br>
            Obviously you might want to replace "digits" with "chars"/"elements"/etc, and keep more/less of the first/last, as per examples below.<br>
            If what is specified as "" then there is no suffix, eg shorten("0123456789","",1) returns "0...9". <br>
            If fmt is not "" then sprintf is applied to each element returned, rather than having to do so to all of them, and except of 
            course for any "..." in the middle or "(NNN what)" at the end. A fatal crash occcurs if s is a string and fmt is <i>not</i> "".
            <br>
            <br>
            If s is not a string then a sequence of strings is assumed (doubly so if a non-empty fmt is supplied), the "..." and final suffix are 
            inserted as string elements, more suitable for say <a href="join.htm">join</a>() or <a href="join_by.htm">join_by</a>(), and giving 
            a default (unflattened) max result length of 42.
            <br>
            <br>
            See also <a href="mpfr.htm#mpz_get_short_str">mpz_get_short_str</a>(), which may be significantly faster for million-digit-plus
            numbers, since it doesn&rsquo;t even build the middle part of the string in the first place.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
          <small>
<!--eucode>
?shorten(repeat('1',9999)) -- prints "11111111111111111111...11111111111111111111 (9,999 digits)"
?shorten(repeat('1',9999),"ones",4) -- prints "1111...1111 (9,999 ones)"
?shorten(get_primes_le(100),"primes",2) -- prints {"2","3","...","89","97"," (25 primes)"}
</eucode-->
<pre>
<font color="#0000FF">?</font><font color="#5E005E">shorten</font><font color="#0000FF">(</font><font color="#7060A8">repeat</font><font color="#800000">(</font><font color="#008000">'1'</font><font color="#0000FF">,</font><font color="#000000">9999</font><font color="#800000">)</font><font color="#0000FF">)</font><font color="#000080"><i> -- prints "11111111111111111111...11111111111111111111 (9,999 digits)"</i></font>
<font color="#0000FF">?</font><font color="#5E005E">shorten</font><font color="#0000FF">(</font><font color="#7060A8">repeat</font><font color="#800000">(</font><font color="#008000">'1'</font><font color="#0000FF">,</font><font color="#000000">9999</font><font color="#800000">)</font><font color="#0000FF">,</font><font color="#008000">"ones"</font><font color="#0000FF">,</font><font color="#000000">4</font><font color="#0000FF">)</font><font color="#000080"><i> -- prints "1111...1111 (9,999 ones)"</i></font>
<font color="#0000FF">?</font><font color="#5E005E">shorten</font><font color="#0000FF">(</font><font color="#5E005E">get_primes_le</font><font color="#800000">(</font><font color="#000000">100</font><font color="#800000">)</font><font color="#0000FF">,</font><font color="#008000">"primes"</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">)</font><font color="#000080"><i> -- prints {"2","3","...","89","97"," (25 primes)"}</i></font>
</pre>
          </small>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\ptrim.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
       </table>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
