<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">sprint</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          <a href="string.htm">string</a> s = sprint(<a href="object.htm">object</a> x, 
                                                     <a href="integer.htm">integer</a> asCh=<a href="logicops.htm#tf">false</a><small><sup>1</sup></small>, 
                                                                                       maxlen=-1<small>[, nest=0]</small>)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
          The representation of x as a string of characters is returned, exactly the same as 
          <a href="print.htm">print</a>(fn, x[, asCh[, maxlen]]), except that the output is returned 
          as a <a href="string.htm">string</a>, rather than being sent to a file or device.
          <br>
          <br>
          x: can be any phix <a href="object.htm">object</a>.<br>
          <div id="nopad" class="nopad" align="left">
           <table cellspacing="0" cellpadding="0" border="1" style="padding: 0; border-style: none; width: auto;">
            <tr>
             <td align="left" style="padding: 0; border-style: none;">
                <nobr>asCh: <a href="logicops.htm#tf">true</a>:&nbsp;</nobr>
             </td>
             <td align="left" style="padding: 0; border-style: none;">
                print eg 65 as 65'A', 
             </td>
            </tr>
            <tr>
             <td align="right" style="padding: 0; border-style: none;">
                <a href="logicops.htm#tf">false</a>:&nbsp;
             </td>
             <td align="left" style="padding: 0; border-style: none;">
                not top-level, 
             </td>
            </tr>
            <tr>
             <td align="right" style="padding: 0; border-style: none;">
                -1:&nbsp;
             </td>
             <td align="left" style="padding: 0; border-style: none;">
                sticky/nested <a href="logicops.htm#tf">false</a>.
             </td>
            </tr>
            <tr>
             <td align="right" style="padding: 0; border-style: none;">
                <small><sup>1</sup></small>&nbsp;&nbsp;
             </td>
             <td align="left" style="padding: 0; border-style: none;">
                if asCh is in {9,10,11} it is treated as {-1,0,1} and becomes the new default.<br>
             </td>
            </tr>
           </table>
          </div>
          <div style="clear:both;height:1px;"> </div>
          <div id="nopad" class="nopad" align="left">
           <table cellspacing="0" cellpadding="0" border="0" style="padding: 0; border-style: none; width: auto;">
            <tr>
             <td align="left" style="padding: 0; border-style: none;">
                       maxlen:&nbsp;
             </td>
             <td align="left" style="padding: 0; border-style: none;">
                (desktop only) the maximum desired length in characters of the returned result, anything<br>
                beyond this is indicated by a trailing "..", potentially in addition to the specified length.<br>
             </td>
            </tr>
           </table>
          </div>
          <div style="clear:both;height:1px;"> </div>
          See the <a href="#tech" onclick="opentech()">technicalia</a> for more details and the <small>nest</small> parameter.
          <br>
          <br>
          Most calls would probably only provide the first and maybe second parameter.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.<!--, via JavaScript .toString(), so eg instead of "{1,2,3}" you get just "1,2,3".--> No maxlen or nest parameters (as yet, see below).
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            The atoms contained within x will be displayed to a maximum of 10 significant digits, just as with print().
            <br>
            <br>
            An asCh of <a href="logicops.htm#tf">false</a> means that sprint(65) yields "65" whereas sprint({65,66,67}) yields "{65'A',66'B',67'C'}"
            and the same for %v in <a href="printf.htm">(s)printf</a>() and the <a href="qu.htm">?</a> shorthand.
            The %V format specifies a -1 for asCh. The presence of the string type makes asCh=<a href="logicops.htm#tf">true</a> handling less necessary 
            (than Eu) in Phix, except for debugging, where eg {97'a',98'b',"c"} may make it easier for you to realise your 
            mistake than {97,98,"c"} would, or indeed spot such a value as being erroneous in the first place.
         </td>
        </tr>
        <tr>
         <td>
          <b>Examples:</b>
         </td>
         <td>
<!--eucode>
s = sprint(12345)                       -- s is "12345"
s = sprint({1,2.5,"hello",{4,5.5}})     -- s is `{1,2.5,"hello",{4,5.5}}`
s = sprint("hello")                     -- s is `"hello"`
s = sprint("hello"&-1)                  -- s is `{104'h',101'e',108'l',108'l',111'o',-1}`
s = sprint("hello"&-1,-1)               -- s is `{104,101,108,108,111,-1}`
{} = sprint(0,9) -- (set the default asCh to -1)
</eucode-->
<pre>
<font color="#000000">s</font><font color="#0000FF"> =</font><font color="#7060A8"> sprint</font><font color="#0000FF">(</font><font color="#000000">12345</font><font color="#0000FF">)                      </font><font color="#000080"><i> -- s is "12345"</i></font>
<font color="#000000">s</font><font color="#0000FF"> =</font><font color="#7060A8"> sprint</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2.5</font><font color="#0000FF">,</font><font color="#008000">"hello"</font><font color="#0000FF">,</font><font color="#800080">{</font><font color="#000000">4</font><font color="#0000FF">,</font><font color="#000000">5.5</font><font color="#800080">}</font><font color="#800000">}</font><font color="#0000FF">)    </font><font color="#000080"><i> -- s is `{1,2.5,"hello",{4,5.5}}`</i></font>
<font color="#000000">s</font><font color="#0000FF"> =</font><font color="#7060A8"> sprint</font><font color="#0000FF">(</font><font color="#008000">"hello"</font><font color="#0000FF">)                    </font><font color="#000080"><i> -- s is `"hello"`</i></font>
<font color="#000000">s</font><font color="#0000FF"> =</font><font color="#7060A8"> sprint</font><font color="#0000FF">(</font><font color="#008000">"hello"</font><font color="#0000FF">&amp;-</font><font color="#000000">1</font><font color="#0000FF">)                 </font><font color="#000080"><i> -- s is `{104&rsquo;h&rsquo;,101&rsquo;e&rsquo;,108&rsquo;l&rsquo;,108&rsquo;l&rsquo;,111&rsquo;o&rsquo;,-1}`</i></font>
<font color="#000000">s</font><font color="#0000FF"> =</font><font color="#7060A8"> sprint</font><font color="#0000FF">(</font><font color="#008000">"hello"</font><font color="#0000FF">&amp;-</font><font color="#000000">1</font><font color="#0000FF">,-</font><font color="#000000">1</font><font color="#0000FF">)              </font><font color="#000080"><i> -- s is `{104,101,108,108,111,-1}`</i></font>
<font color="#0000FF">{} =</font><font color="#7060A8"> sprint</font><font color="#0000FF">(</font><font color="#000000">0</font><font color="#0000FF">,</font><font color="#000000">9</font><font color="#0000FF">)</font><font color="#000080"><i> -- (set the default asCh to -1)</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\VM\pprntfN.e (an autoinclude) for details of the actual implementation. <small>(Moved/merged from psprintN.e in 0.8.2)</small>
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="print.htm">print</a>,
          <a href="sprintf.htm">sprintf</a>,
          <a href="value.htm">value</a>,
          <a href="get.htm">get</a><br>
          <a name=tech></a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            For reasons of simplicity, the desired length, if specified, may be exceeded by a few characters, especially when a very small value is
            passed (eg sprint(12345,1) yields 12345, a length of 5), or when it adds quotes, braces and trailing double dots. It is obviously simpler 
            to leave a small margin rather than try and post-process the results, or of course write a small loop that re-invokes sprint with decreasing
            length until the result passes muster. At the time of writing there is only one confirmed use of maxlen, and that is in edix/plade.exw, so
            there is little reason to support maxlen in p2js.js.
            <br>
            <br>
            There is in fact a fourth parameter, nest, which is intended only for internal use to signify recursive calls, and controls whether or not
            ".." should be appended when the length exceeds maxlen (if specified). Since print() is in fact implemented as puts(fn,sprint()), there is 
            deliberately no nest parameter for print().
<!--            and also whether strings should be quoted.-->
         </td>
        </tr>
       </table>
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
