<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">sqlite3_column</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include pSQLite.e
            <br>
            <br>
            <a href="integer.htm">integer</a> res = sqlite3_column_count(<a href="sqlconst.htm#types">sqlite3_stmt</a> pStmt)
            <br>
            <i>-- or --</i>
            <br>
            <a href="integer.htm">integer</a> res = sqlite3_data_count(<a href="sqlconst.htm#types">sqlite3_stmt</a> pStmt)
            <br>
            <br>
            <i>-- and --</i>
            <br>
            <br>
            <a href="integer.htm">integer</a> res = sqlite3_column_type(<a href="sqlconst.htm#types">sqlite3_stmt</a> pStmt,
                                                                        <a href="integer.htm">integer</a> column)
            <br>
            <i>-- or --</i>
            <br>
            <a href="string.htm">string</a> res = sqlite3_column_decltype(<a href="sqlconst.htm#types">sqlite3_stmt</a> pStmt,
                                                                          <a href="integer.htm">integer</a> column)
            <br>
            <i>-- or --</i>
            <br>
            <a href="string.htm">string</a> res = sqlite3_column_name(<a href="sqlconst.htm#types">sqlite3_stmt</a> pStmt,
                                                                      <a href="integer.htm">integer</a> column)
<!--
            <br>
            <i>-- or --</i>
            <br>
            <a href="integer.htm">integer</a> res = sqlite3_column_bytes(<a href="sqlconst.htm#types">sqlite3_stmt</a> pStmt,
                                                                         <a href="integer.htm">integer</a> column)
-->
            <br>
            <br>
            <i>-- and --</i>
            <br>
            <br>
            <a href="integer.htm">integer</a> res = sqlite3_column_int(<a href="sqlconst.htm#types">sqlite3_stmt</a> pStmt,
                                                                       <a href="integer.htm">integer</a> column)
            <br>
            <i>-- or --</i>
            <br>
            <a href="atom.htm">atom</a> res = sqlite3_column_double(<a href="sqlconst.htm#types">sqlite3_stmt</a> pStmt,
                                                                    <a href="integer.htm">integer</a> column)
            <br>
            <i>-- or --</i>
            <br>
            <a href="string.htm">string</a> res = sqlite3_column_text(<a href="sqlconst.htm#types">sqlite3_stmt</a> pStmt,
                                                                      <a href="integer.htm">integer</a> column)
            <br>
            <i>-- or --</i>
            <br>
            <a href="object.htm">object</a> res = sqlite3_column_blob(<a href="sqlconst.htm#types">sqlite3_stmt</a> pStmt,
                                                                      <a href="integer.htm">integer</a> column)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            These routines return information about a single column of the current result row of a query.
            <br>
            <br>
            pStmt: A pointer to the sqlite3_stmt structure returned from <a href="sqlite3_prepare.htm">sqlite3_prepare</a>().<br>
            column: a number in the range 1..sqlite3_column_count(pStmt).
            <br>
            <br>
            The sqlite3_column_count() function returns the number of columns in the result set returned by the prepared SQL statement. <br>
            It can be called at any time after <a href="sqlite3_prepare.htm">sqlite3_prepare</a>(), and returns 0 if pStmt does not return data (for example an UPDATE).
            <br>
            <br>
            The sqlite3_data_count() function returns the number of values in the current row of the result set.<br>
            It works similarly to sqlite3_column_count() except that it only works following 
            <a href="sqlite3_step.htm">sqlite3_step</a>().<br>
            After a call to <a href="sqlite3_step.htm">sqlite3_step</a>() that returns 
            <a href="sqlconst.htm#SQLITE_ROW">SQLITE_ROW</a>, 
            this routine will return the same value as the sqlite3_column_count() function. <br>
            After <a href="sqlite3_step.htm">sqlite3_step</a>() has returned an <a href="sqlconst.htm#SQLITE_DONE">SQLITE_DONE</a>, 
            <a href="sqlconst.htm#SQLITE_BUSY">SQLITE_BUSY</a> or an error code, or 
            before <a href="sqlite3_step.htm">sqlite3_step</a>() has been called on pStmt, this routine returns 0, whereas 
            sqlite3_column_count() will continue to return the number of columns in the result set. 
            <br>
            <br>
            The sqlite3_column_type() function returns the datatype for the value in the specified column (1-based).<br>
            The return value is one of these (as declared in pSQLite.e):
            <br>
            <br>
<!--eucode>
global constant SQLITE_INTEGER  = 1,
                SQLITE_FLOAT    = 2,
                SQLITE_TEXT     = 3,
                SQLITE_BLOB     = 4,
                SQLITE_NULL     = 5
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">global constant</font><font color="#004600"> SQLITE_INTEGER </font><font color="#0000FF"> =</font><font color="#000000"> 1</font><font color="#0000FF">,
</font><font color="#004600">                SQLITE_FLOAT   </font><font color="#0000FF"> =</font><font color="#000000"> 2</font><font color="#0000FF">,
</font><font color="#004600">                SQLITE_TEXT    </font><font color="#0000FF"> =</font><font color="#000000"> 3</font><font color="#0000FF">,
</font><font color="#004600">                SQLITE_BLOB    </font><font color="#0000FF"> =</font><font color="#000000"> 4</font><font color="#0000FF">,
</font><font color="#004600">                SQLITE_NULL    </font><font color="#0000FF"> =</font><font color="#000000"> 5</font>
</pre>
            <br>
            The sqlite3_column_decltype() routine returns text which is the declared type of the column in the CREATE TABLE statement.<br>
            For an expression, the return type is an empty string.
            <br>
            <br>
            sqlite3_column_name() returns the name of the Nth column.
<!--
            <br>
            <br>
            sqlite3_column_bytes() returns the number of bytes in a column that has type BLOB or the number of bytes in a TEXT string with UTF-8 encoding.<br>
            If the result is a BLOB then the sqlite3_column_bytes() routine returns the number of bytes in that BLOB.<br>
            No type conversions occur, the length will match that of the <a href="serialize.htm">serialize</a>d object.<br>
            If the result is a string (or a number since a number can be converted into a string) then sqlite3_column_bytes() converts the value 
            into a UTF-8 string and returns the number of bytes in the resulting string.<br>
            The value returned does not include the \0 terminator at the end of the string.
-->
            <br>
            <br>
            The sqlite3_column_int() function returns an <a href="integer.htm">integer</a>.
            <br>
            <br>
            The sqlite3_column_double() function returns an <a href="atom.htm">atom</a>.
            <br>
            <br>
            The sqlite3_column_text() function returns a <a href="string.htm">string</a>.
            <br>
            <br>
            The sqlite3_column_blob() function returns any phix <a href="object.htm">object</a>, after <a href="deserialize.htm">deserialization</a>.<br>
            Note that sqlite3_column_blob (or more accurately that way it is currently wrapped in pSQLite.e) does not distinguish between a NULL meaning 
            nothing stored and a NULL or zero that has actually been stored.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            It is not necessary to retrieve data in the format specify by sqlite3_column_type().<br>
            If a different format is requested, the data is converted automatically.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
            See <a href="sqlite3_prepare.htm">sqlite3_prepare</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
