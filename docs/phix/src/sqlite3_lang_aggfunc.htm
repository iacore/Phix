<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Aggregate Functions</h1>
      <div id="mainSection">
       <p>
        The aggregate functions shown below are available by default.
        <!--
        Additional aggregate functions written in C may be added using the 
        [a href="c3ref/create_function.htm?"]sqlite3_create_function[/a]() API. [not wrapped]
        -->
       </p>
       <p>
        In any aggregate function that takes a single argument, that argument
        can be preceded by the keyword DISTINCT.  In such cases, duplicate
        elements are filtered before being passed into the aggregate function.
        For example, the function "count(distinct X)" will return the number
        of distinct values of column X instead of the total number of non-null
        values in column X.
       </p>
       <dl>
        <a name="avg"></a>
        <dt>
         <p>
          <b>avg(<i>X</i>)</b>
         </p>
        </dt>
        <dd>
         <p>
            The avg() function
            returns the average value of all non-NULL <i>X</i> within a
            group.  String and BLOB values that do not look like numbers are
            interpreted as 0.
            The result of avg() is always a floating point value as long as
            at there is at least one non-NULL input even if all
            inputs are integers.  The result of avg() is NULL if and only if
            there are no non-NULL inputs.
         </p>
        </dd>
        <a name="count"></a>
        <dt>
         <p>
          <b>
            count(<i>X</i>)
          <br />
            count(*)
          </b>
         </p>
        </dt>
        <dd>
         <p>
            The count(X) function returns
            a count of the number of times
            that <i>X</i> is not NULL in a group.  The count(*) function
            (with no arguments) returns the total number of rows in the group.
         </p>
        </dd>
        <a name="groupconcat"></a>
        <dt>
         <p>
          <b>
            group_concat(<i>X</i>)
          <br />
            group_concat(<i>X</i>,<i>Y</i>)
          </b>
         </p>
        </dt>
        <dd>
         <p>
            The group_concat() function returns a string which is the concatenation of
            all non-NULL values of <i>X</i>.  If parameter <i>Y</i> is present then
            it is used as the separator between instances of <i>X</i>.  A comma (",") 
            is used as the separator if <i>Y</i> is omitted.  
            The order of the concatenated elements is arbitrary.
         </p>
        </dd>
        <a name="maxggunc"></a>
        <dt>
         <p>
          <b>max(<i>X</i>)</b>
         </p>
        </dt>
        <dd>
         <p>
            The max() aggregate function
            returns the maximum value of all values in the group.
            The maximum value is the value that would be returned last in an
            ORDER BY on the same column.  Aggregate max() returns NULL 
            if and only if there are no non-NULL values in the group.
         </p>
        </dd>
        <a name="minggunc"></a>
        <dt>
         <p>
          <b>min(<i>X</i>)</b>
         </p>
        </dt>
        <dd>
         <p>
            The min() aggregate function
            returns the minimum non-NULL value of all values in the group.
            The minimum value is the first non-NULL value that would appear
            in an ORDER BY of the column.
            Aggregate min() returns NULL if and only if there are no non-NULL
            values in the group.
         </p>
        </dd>
        <a name="sumunc"></a>
        <dt>
         <p>
          <b>sum(<i>X</i>)
          <br />
            total(<i>X</i>)
          </b>
         </p>
        </dt>
        <dd>
         <p>
            The sum() and total() aggregate functions
            return sum of all non-NULL values in the group.
            If there are no non-NULL input rows then sum() returns
            NULL but total() returns 0.0.
            NULL is not normally a helpful result for the sum of no rows
            but the SQL standard requires it and most other
            SQL database engines implement sum() that way so SQLite does it in the
            same way in order to be compatible.   The non-standard total() function
            is provided as a convenient way to work around this design problem
            in the SQL language.
         </p>
         <p>
            The result of total() is always a floating point value.
            The result of sum() is an integer value if all non-NULL inputs are integers.
            If any input to sum() is neither an integer or a NULL
            then sum() returns a floating point value
            which might be an approximation to the true sum.
         </p>
         <p>
            Sum() will throw an "integer overflow" exception if all inputs
            are integers or NULL
            and an integer overflow occurs at any point during the computation.
            Total() never throws an integer overflow.
         </p>
        </dd>
       </dl>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
