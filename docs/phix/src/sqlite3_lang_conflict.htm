<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">ON CONFLICT clause</h1>
      <div id="mainSection">
        <b><a href="sqlite3_lang_syntaxdiagrams.htm#conflict-clause">conflict-clause:</a></b>
       <button id='x1141' onclick='hideorshow("x1141","x1142")'>hide</button>
       <div id='x1142' class='imgcontainer'>
        <img alt="syntax diagram conflict-clause" src="images/syntax/conflict-clause.gif" />
       </div>
       <p>The ON CONFLICT clause is not a separate SQL command.  It is a
        non-standard clause that can appear in many other SQL commands.
        It is given its own section in this document because it is not
        part of standard SQL and therefore might not be familiar.
       </p>
       <p>The syntax for the ON CONFLICT clause is as shown above for
        the CREATE TABLE command.  For the INSERT and
        UPDATE commands, the keywords "ON CONFLICT" are replaced by "OR" so that
        the syntax reads more naturally.  For example, instead of
        "INSERT ON CONFLICT IGNORE" we have "INSERT OR IGNORE".
        The keywords change but the meaning of the clause is the same
        either way.
       </p>
       <p>The ON CONFLICT clause applies to <a href="sqlite3_lang_createtable.htm#uniqueconst">UNIQUE</a>, <a href="sqlite3_lang_createtable.htm#notnullconst">NOT NULL</a>,
        <a href="sqlite3_lang_createtable.htm#ckconst">CHECK</a>, and <a href="sqlite3_lang_createtable.htm#primkeyconst">PRIMARY KEY</a> constraints.
        The ON CONFLICT algorithm does not
        apply to <a href="sqlite3_lang_foreignkeys.htm">FOREIGN KEY constraints</a>.
        There are five conflict resolution algorithm choices:
        ROLLBACK, ABORT, FAIL, IGNORE, and REPLACE.
        The default conflict resolution algorithm is ABORT.  This
        is what they mean:
       </p>
       <dl>
        <dt><b>ROLLBACK</b></dt>
        <dd>
         <p> When an applicable constraint violation occurs, the ROLLBACK
        resolution algorithm aborts the current SQL statement with
        an <a href="sqlconst.htm#SQLITE_CONSTRAINT">SQLITE_CONSTRAINT</a> error and rolls back the current transaction.
        If no transaction is
        active (other than the implied transaction that is created on every
        command) then the ROLLBACK resolution algorithm works the same as the
        ABORT algorithm.
         </p>
        </dd>
        <dt><b>ABORT</b></dt>
        <dd>
         <p> When an applicable constraint violation occurs, the ABORT
        resolution algorithm aborts the current SQL statement
        with an <a href="sqlconst.htm#SQLITE_CONSTRAINT">SQLITE_CONSTRAINT</a> error and backs out any changes
        made by the current SQL statement; but changes caused
        by prior SQL statements within the same transaction are preserved and the
        transaction remains active.
        This is the default behavior and the behavior specified by the SQL
        standard.
         </p>
        </dd>
        <dt><b>FAIL</b></dt>
        <dd>
         <p> When an applicable constraint violation occurs, the FAIL
        resolution algorithm aborts the current SQL statement with an
        <a href="sqlconst.htm#SQLITE_CONSTRAINT">SQLITE_CONSTRAINT</a> error.  But the FAIL resolution does not
        back out prior changes of the SQL statement that failed nor does
        it end the transaction.
        For example, if an UPDATE
        statement encountered a constraint violation on the 100th row that
        it attempts to update, then the first 99 row changes are preserved
        but changes to rows 100 and beyond never occur.
         </p>
        </dd>
        <dt><b>IGNORE</b></dt>
        <dd>
         <p> When an applicable constraint violation occurs, 
        the IGNORE resolution algorithm skips the one row that contains
        the constraint violation and continues processing subsequent rows
        of the SQL statement as if nothing went wrong.
        Other rows before and after the row that
        contained the constraint violation are inserted or updated
        normally. No error is returned when the IGNORE conflict resolution
        algorithm is used.
         </p>
        </dd>
        <dt><b>REPLACE</b></dt>
        <dd>
         <p> When a <a href="sqlite3_lang_createtable.htm#uniqueconst">UNIQUE</a> or <a href="sqlite3_lang_createtable.htm#primkeyconst">PRIMARY KEY</a> constraint violation occurs, 
        the REPLACE algorithm
        deletes pre-existing rows that are causing the constraint violation
        prior to inserting or updating the current row and the command continues 
        executing normally.
        If a <a href="sqlite3_lang_createtable.htm#notnullconst">NOT NULL</a> constraint violation occurs, the REPLACE conflict
        resolution replaces the NULL value with
        the default value for that column, or if the column has no default
        value, then the ABORT algorithm is used.
        If a <a href="sqlite3_lang_createtable.htm#ckconst">CHECK</a> constraint violation occurs, the REPLACE conflict resolution
        algorithm always works like ABORT.
         </p>
         <p>When the REPLACE conflict resolution strategy deletes rows in order to
        satisfy a constraint, <a href="sqlite3_lang_createtrigger.htm">delete triggers</a> fire if and only if
        <a href="sqlite3_lang_pragma.htm#pragma_recursive_triggers">recursive triggers</a> are enabled.
         </p>
         <p>The [a href="c3ref/update_hook.htm?"]update hook[/a] [not implemented] is not invoked for rows that
        are deleted by the REPLACE conflict resolution strategy.  Nor does
        REPLACE increment the [a href="c3ref/changes.htm?"]change counter[/a] [not implemented].
        The exceptional behaviors defined in this paragraph might change 
        in a future release.
         </p>
        </dd>
       </dl>
       <p>The algorithm specified in the OR clause of an INSERT or UPDATE
        overrides any algorithm specified in a CREATE TABLE.
        If no algorithm is specified anywhere, the ABORT algorithm is used.
       </p>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
