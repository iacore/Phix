<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">sqlite3_step</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            include pSQLite.e
            <br>
            <br>
            <a href="integer.htm">integer</a> ret = sqlite3_step(<a href="sqlconst.htm#types">sqlite3_stmt</a> pStmt)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Execute a previously prepared SQL statement.
            <br>
            <br>
            pStmt: A pointer to the sqlite3_stmt structure returned from <a href="sqlite3_prepare.htm">sqlite3_prepare</a>().
            <br>
            <br>
            After <a href="sqlite3_bind.htm">binding</a> any wildcards, this function must be called one or more times to run the statement.
            <br>
            <br>
            Returns: <a href="sqlconst.htm#SQLITE_ROW">SQLITE_ROW</a>, 
            <a href="sqlconst.htm#SQLITE_DONE">SQLITE_DONE</a>, or 
            <a href="sqlconst.htm#SQLITE_BUSY">SQLITE_BUSY</a>.
            <br>
            <br>
            <a href="sqlconst.htm#SQLITE_ROW">SQLITE_ROW</a> is returned when there is a row of data ready to be read with the 
            <a href="sqlite_column.htm">sqlite_column</a> functions.<br>
            Once that row has been processed call sqlite3_step() again, to get the next row of data, if any.
            <br>
            <br>
            <a href="sqlconst.htm#SQLITE_DONE">SQLITE_DONE</a> is returned when there are no more rows to be read, ie the statement has 
            finished executing successfully.<br>
            Call <a href="sqlite3_reset.htm">sqlite3_reset</a>() and a few <a href="sqlite3_bind.htm">sqlite3_bind</a>() before calling
            sqlite3_step() again.
            <br>
            <br>
            <a href="sqlconst.htm#SQLITE_BUSY">SQLITE_BUSY</a> means that the database engine attempted to open a locked database 
            and there is no busy callback registered.<br>
            Call sqlite3_step() again to retry the open, typically after some pause or prompt.
            <br>
            <br>
            The <a href="sqlconst.htm#ehand">standard error handler</a> automatically deals with the following errors:
            <br>
            <br>
            <a href="sqlconst.htm#SQLITE_ERROR">SQLITE_ERROR</a> means that a run-time error (such as a constraint violation) has occurred.<br>
            sqlite3_step() should not be called again on the VM.
            <br>
            <br>
            <a href="sqlconst.htm#SQLITE_MISUSE">SQLITE_MISUSE</a> means that the this routine was called inappropriately.<br>
            Perhaps it was called on a virtual machine that had already been finalized or on one that had previously returned 
            <a href="sqlconst.htm#SQLITE_ERROR">SQLITE_ERROR</a> or 
            <a href="sqlconst.htm#SQLITE_DONE">SQLITE_DONE</a>.<br>
            Or it could be the case the the same database connection is being used simulataneously by two or more threads.
            <br>
            <br>
            Non-atom values may be returned if <a href="sqlconst.htm#ehand">SQLITE3_NON_FATAL</a> or a similar
            user provided error handler routine is in force.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
            See <a href="sqlite3_prepare.htm">sqlite3_prepare</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
