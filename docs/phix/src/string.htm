<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">string</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          string <i>identifier</i>
          <br>
          <i>-- or --</i>
          <br>
          <a href="integer.htm#bool">bool</a> b = string(<a href="object.htm">object</a> x)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            This serves to define the string type. <br>
            You can also call it like an ordinary function to determine if an object is a string.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            When invoked as a function, returns <a href="logicops.htm">true</a> (1) if x is a string otherwise <a href="logicops.htm">false</a> (0).
            <br>
            <br>
            A type check error occurs if a variable declared as a string is assigned with a <a href="html/glossary.htm#dwordseq">dword-sequence</a>.
            <br>
            <br>
            Note the string type is really a sequence of bytes #00..#FF, it can actually hold raw binary as well as ascii and UTF-8 strings,
            however UTF-32 is 32 bits (or more strictly 21) per character and UTF-16 has 16-bit chars/surrogate pairs, and hence both must 
            instead be kept in a <a href="sequence.htm">sequence</a>.
         </td>
        </tr>
<!--
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported. However that does not (yet) include the supplemental types listed below.
         </td>
        </tr>
-->
        <tr>
         <td>
          <b>Supplemental:</b>
         </td>
         <td>
            The following are also defined in builtins/ptypes.e (not an autoinclude, but used by 
            <a href="pGUI.htm">pGUI</a>, <a href="mpfr.htm">mpfr</a>, <a href="cffi.htm">cffi</a>, and
            hence indirectly <a href="structs.htm">builtins/structs.e</a> (which is auto-included as 
            soon as any structs or classes are defined), and the <a href="filter.htm">filter</a>() builtin
            (which is also an autoinclude), so any of those will include it):<br>
            global type <b>nullable_string</b>(object o) - o must be a string or NULL.<br>
            global type <b>rid_string</b>(object o) - o must be a string or an integer <a href="routine_id.htm">routine_id</a>.<br>
            global type <b>atom_string</b>(object o) - o must be a string or an unsigned non-fractional 
            machine-word-sized <a href="atom.htm">atom</a>, such as the result from 
            <a href="allocate_string.htm">allocate_string</a>() or a char* from 
            <a href="c_func.htm">c_func</a>(), or any other pointer, or an integer index, or NULL, etc.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 1:</b>
         </td>
         <td>
<!--eucode>
string s = "hello"
</eucode-->
<pre>
<font color="#004080">string</font><font color="#000000"> s</font><font color="#0000FF"> =</font><font color="#008000"> "hello"</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 2:</b>
         </td>
         <td>
<!--eucode>
if string(x) then
    puts(1,x)
else
    -- x must be an atom or dword-sequence
    ? x
end if
</eucode-->
<pre>
<font color="#008080">if</font><font color="#004080"> string</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#0000FF">)</font><font color="#008080"> then</font>
<font color="#7060A8">    puts</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">x</font><font color="#0000FF">)</font>
<font color="#008080">else</font>
<font color="#000080"><i>    -- x must be an atom or dword-sequence</i></font>
<font color="#0000FF">    ?</font><font color="#000000"> x</font>
<font color="#008080">end if</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            There are generic versions of the string function implemented as :%opStr in builtins\VM\pType.e and :%opStr0 in builtins\VM\pJcc.e that 
            the compiler only invokes as a last resort, preferring instead to inline that functionality if the argument is known to be assigned or the
            result variable, if any, is known to be an integer, ie does not require decref/dealloc. The compiler may also completely omit the test 
            and/or any related code, if type inference/propagation determines that the result will always be true or always false.<br>
            As already mentioned, builtins/ptypes.e is where the supplemental types are defined.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="atom.htm">atom</a>,
          <a href="integer.htm">integer</a>,
          <a href="sequence.htm">sequence</a>,
          <a href="object.htm">object</a>,
          <a href="sequences.htm">Sequences</a>,
          <a href="language.htm">Core Language</a>,
          <a href="strings.htm">Strings</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
          The sq_str() routine can be used to apply a string() test to all top-level elements of a sequence, eg
          <code>sq_string({1,1.5,"string",{1,1.5,"string",{}}) ==&gt; {false,false,true,false}</code>.  That routine 
          returns a single true/false if passed an atom or string, otherwise a "flat" sequence of true/false of
          the same length as the input argument. Note there are no known valid uses of the sq_str() routine, as yet.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
