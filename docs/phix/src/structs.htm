<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">builtins\structs.e</h1>
      <div id="mainSection">
        The file builtins\structs.e (an autoinclude) contains the actual implementation of <a href="sandc.htm">Structs and Classes</a>.<br>
        It is documented here for completeness only: pmain.e/DoStruct() and several other places in that file map the new syntax to routines in 
        this file, <i>both</i> as part of the compilation process, and much the same calls shortly-to-be-repeated at run-time, plus a few more. 
        Hence some of these routines may have the odd subtly awkward trick to invocation, and it may often prove significantly easier to write 
        an extra shim layer than to alter the calling convention directly. Obviously you are free to experiment, however some problems that may
        arise may prove rather difficult and perhaps even impossible to fix, that is without breaking something else. There is no commitment
        these routines will not alter drastically between releases, and should there be any doubt you should always trust the actual code of
        builtins\structs.e instead of these notes, and (conversely/probably/secondary) these notes over any comments in that file.
        <br>
        <br>
        I cannot possibly stress enough (as already mentioned in the above link) that structs are a programmer convenience that inevitably incurs 
        some performance overhead. Should that be neither insignificant nor outweighed by improved code clarity, simply don&rsquo;t use structs!
        Everything should be just fine for up to hundreds of thousands of calls, but not necessarily on the other side of several million calls.
        <br>
        <br>
        In truth, a large part of the reason for documenting this is to act as a subtle deterrant, by properly syntax-colouring these routines
        in Edita/Edix and giving F1 lookup something to do, and perhaps helping you to understand why, for instance, your own <a href="#new">new</a>()
        routine might have just gone so horribly wrong, that is if it got confused with <a href="#new">this one</a> somehow.
        <br>
        <br>
        None of these routines are supported by <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js</b></span></a>.
        <br>
        <br>
        <dl>
        <dt>bool res = <b>struct</b>(object s)</dt>
         <dd>
            The lowest-level builtin struct, identical to <code>class()</code>, implemented as <code>is_struct(s,0)</code>, see next<br>
            <small><i>Aside: the F1 lookup of Edita/Edix </i>is<i> meant to go to <a href="struct.htm">struct</a>, ditto new(), and likewise 
            <a href="class.htm">class</a>, but the rest here.</i><br></small>
         </dd>
            <a name=is_struct></a>
        <br>
        <dt>bool res = <b>is_struct</b>(object s, integer rid)</dt>
         <dd>
            Implements the implicit <a href="usingtypes.htm#type">user defined types</a> created for each struct/class, for example (automatically generated):<br>
            <code>type bridge(object b) return is_struct(b,routine_id("bridge")) end type</code><br>
            <i>NB: global so that it <i>can</i> be called from such implicit user defined types, rather than being useful itself directly.</i><br>
            The builtin struct/class passes 0 for rid, other types pass their own routine_id, which is guaranteed to be unique.<br>
            res: true if s is an instance of the specified class/struct, false otherwise.<br>
            TIP: since <code>class()</code> and <code>struct()</code> are in fact identical, <code>get_struct_type(s)=S_CLASS/S_STRUCT</code>
            (see below) can(/should perhaps) be used to distinguish between them (lowest-level-builtins) instead.<br>
         </dd>
            <a name=struct_start></a>
        <br>
        <dt>procedure <b>struct_start</b>(integer flags, string struct_name, integer rid=routine_id(struct_name), string base_name="")</dt>
         <dd>
            flags: S_STRUCT(1)/S_CLASS(2)/S_DYNAMIC(3)/S_CFFI(9)<br>
            struct_name: eg "bridge" or "person"<br>
            rid: routine_id of the implicit user defined type (same as the rid of is_struct)<br>
            base_name: the class being extended, or in the case of S_CFFI, the C definition<br>
<!--
            <i>Aside: the flag of S_SEQUENCE(5) was dropped for the first release, but may get resurrected one day.</i><br>
            <i>I also half-expect non-S_CFFI base_name to become a sequence, possibly of integer rids, if multiple inheritance is ever added.</i><br>
-->
         </dd>
            <a name=struct_add_field></a>
        <br>
        <dt>procedure <b>struct_add_field</b>(string name, integer tid, field_flags=0, object dflt=NULL, bool bDflt=false)</dt>
         <dd>
            name: eg "name"<br>
            tid: ST_INTEGER(1)/ST_ATOM(3)/ST_STRING(8)/ST_SEQUENCE(12)/ST_OBJECT(15), or the routine_id of the element&rsquo;s type<br>
            field_flags: SF_PUBLIC(0)|SF_PRIVATE(1) [+ SF_PROC(#10)|SF_FUNC(#20)]<br>
<!--
            dflt: the default value, if any<br>
            bDflt: if true, replace a dflt of NULL with something more appropriate, eg/ie "" for ST_STRING, {} for ST_SEQUENCE<br>
            <i>(dflt/bDflt should be used in tandem: either neither is passed, or both with bDflt being true.)</i><br>
-->
            dflt/bDflt work in tandem: either neither is passed and a NULL dlft gets replaced 
            with a more type-safe setting, such as "" for ST_STRING, whereas a true in bDflt
            means "use NULL as the actual default, if that's what it happens to be".<br>
         </dd>
            <a name=end_struct></a>
        <br>
        <dt>procedure <b>end_struct</b>()</dt>
         <dd>
            End the struct/class definition. Not needed for S_CFFI.<br>
         </dd>
            <a name=extend_struct></a>
        <br>
        <dt>procedure <b>extend_struct</b>(string struct_name, base_name="")</dt>
         <dd>
            struct_name: eg "bridge" or "person" (must already exist)<br>
            base_name: for multiple inheritance:<br>
            To implement "extends a,b" the compiler invokes <code>start_struct(..,"a"); end_struct(); extend_struct(..,"b")</code>.<br>
<!--            <small>Should both a and b have a conflicting field it will simply die, whereas conflicting methods are as above cheerfully overwritten.<br></small>-->
            <small>Note that fields in a and b must be unique, else it just simply dies, whereas methods are cheerfully overwritten in the order encountered.<br></small>
            The compiler would then carry on adding any fields and methods being defined up to the <code>end class</code>, as usual.<br>
            <small>In theory this could also be used to manually extend a class at some later point, but that is completely untested.<br></small>
         </dd>
            <a name=struct_dx></a>
        <br>
        <dt>integer sdx = <b>struct_dx</b>(object s, bool rid=false)</dt>
         <dd>
            <i>NB: this is currently private to structs.e, but potentially quite useful...</i><br>
            s: can be a string, routine_id (if rid is true), or an instance<br>
            rid: if true then s can be a routine_id, otherwise it cannot [specifically not the field_dx() routine&rsquo;s sdx]<br>
            sdx: a unique internal index, which really only has meaning to structs.e - <i>cannot</i> be zero<br>
            <i>Aside: be advised that struct_dx (and to a slightly lesser extent field_dx) may differ between compile-time and run-time, especially 
            if the programmer resorts to directly invoking any of the routines detailed in this very file. Obviously they are completely consistent
            within those two halves but cannot cross over: the compiler must not emit actual values, but re-calc at run-time.</i><br>
         </dd>
            <a name=field_dx></a>
        <br>
        <dt>integer fdx = <b>field_dx</b>(object sdx, string name)</dt>
         <dd>
            <i>NB: this is currently private to structs.e, but potentially quite useful...</i><br>
            sdx: can be string or instance, or (internally) a prior struct_dx() result, but <i>not</i> a routine_id, <i>nor</i> a c-struct/S_CFFI<br>
            name: eg "name"<br>
            fdx: a unique internal index, which really only has meaning to structs.e - <i>can</i> be zero<br>
<!--
            <i>Aside: may be required to improve compile-time errors, and may become very significant should S_SEQUENCE ever be resurrected.</i><br>
            <i>Used when checking for compile-time errors, but as above typically only in a "!=0" capacity.</i><br>
            (erm, in the end I went with get_field_type() instead)<br>
-->
            <a name=get_struct_type></a>
         </dd>
        <br>
        <dt>integer res = <b>get_struct_type</b>(object s)</dt>
         <dd>
            s: can be a string, routine_id, or an instance<br>
            res: S_STRUCT(1)/S_CLASS(2)/S_DYNAMIC(3)/S_CFFI(9)<br>
         </dd>
            <a name=get_struct_name></a>
        <br>
        <dt>string res = <b>get_struct_name</b>(object s)</dt>
         <dd>
            s: as per get_struct_type (str/rid/inst)<br>
            res: eg "bridge"<br>
            You can, rather pointlessly, query <code>get_struct_name("bridge")</code> and/or <code>get_struct_name(routine_id("bridge"))</code>,
            however it is probably slightly more useful when passed an instance. Useful perhaps for diagnostic output, but if you are
            (regularly) using this to control the processing logic, you are probably doing it all wrong/missing a trick or two - the very
            bits that vary by class deserve to be defined within the very class where they vary!<br>
         </dd>
            <a name=get_struct_flags></a>
        <br>
        <dt>integer/string res = <b>get_struct_flags</b>(object s, bool bAsText=false)</dt>
         <dd>
            s: as per get_struct_type (str/rid/inst)<br>
            bAsText: if true the result is a string, from <a href="decode_flags.htm">decode_flags</a>()<br>
            res: [S_ABSTRACT(#10)]+[S_NULLABLE(#20)]<br>
         </dd>
            <a name=get_struct_fields></a>
        <br>
        <dt>sequence res = <b>get_struct_fields</b>(object s)</dt>
         <dd>
            s: as per get_struct_type (str/rid/inst)<br>
            res: for experimentation/diagnostics only<br>
         </dd>
            <a name=new></a>
        <br>
        <dt>struct/class res = <b>new</b>(integer|string sdx<i>=&lt;inferred_from_context&gt;</i>, sequence imm={})</dt>
         <dd>
            <small><i>Aside: the F1 lookup for new() of Edita/Edix is meant to go to <a href="struct.htm">struct</a>, ditto struct, but the rest here.</i><br></small>
            sdx: the routine_id of the user_defined type, inferred when possible, or a string<br>
            imm: initial field settings, if any, assigned in numerical order<br>
            res: an instance of the requested type<br>
            The result is a <i>reference type</i>, which is <b>not</b> (in general) suitable for passing to <a href="repeat.htm">repeat</a>(), except perhaps in<br>
            &nbsp;sq = repeat(don&rsquo;t care/ignore/clobber each other,N) followed by (several) sq[vital] = new(class).<br>
            The front-end attempts to provide/insert a suitable default for sdx from context, see T_new in pmain.e/ParamList().<br>
            No attempt has been made to support or mimic inline named parameters (that is, beyond "sdx" and "imm" with above caveat). Instead of
            <br>
            <br>
<!--eucode>
            politician p := new(name := "boris", age := 3)
</eucode-->
<pre>
<font color="#000000">            politician p</font><font color="#0000FF"> :=</font><font color="#7060A8"> new</font><font color="#0000FF">(</font><font color="#000000">name</font><font color="#0000FF"> :=</font><font color="#008000"> "boris"</font><font color="#0000FF">,</font><font color="#000000"> age</font><font color="#0000FF"> :=</font><font color="#000000"> 3</font><font color="#0000FF">)</font>
</pre>
            use
            <br>
<!--eucode>
            politician p := new()
                       p.name := "boris"
                       p.age := 3
</eucode-->
<pre>
<font color="#000000">            politician p</font><font color="#0000FF"> :=</font><font color="#7060A8"> new</font><font color="#0000FF">()</font>
<font color="#000000">                       p</font><font color="#0000FF">.</font><font color="#000000">name</font><font color="#0000FF"> :=</font><font color="#008000"> "boris"</font>
<font color="#000000">                       p</font><font color="#0000FF">.</font><font color="#000000">age</font><font color="#0000FF"> :=</font><font color="#000000"> 3</font>
</pre>
            Alternatively you can of course write your own <code>new_politician()</code> function and use named parameters on that.<br>
            Note that since <code>new()</code> is now a proper (auto-included) builtin, along with all that T_new handling in pmain.e, 
            you are not allowed another of that name - hence the one that was in <a href="map.htm">builtins\map.e</a> has been renamed 
            to <code>new_map()</code>.<br>
         </dd>
            <a name=store_field></a>
        <br>
        <dt>procedure <b>store_field</b>(struct s, string field_name, object v, context=0)</dt>
         <dd>
            s: an instance<br>
            fdx: eg "name"<br>
            v: the value to store<br>
            context: as sdx of new(), allows class methods to access private fields<br>
         </dd>
            <a name=fetch_field></a>
        <br>
        <dt>object res = <b>fetch_field</b>(struct s, string field_name, object context=0)</dt>
         <dd>
            s: an instance<br>
            fdx: usually a string field name<br>
            context: as sdx of new(), allows class methods to access private fields<br>
            res: any type - you can store pretty much anything in a struct<br>
         </dd>
            <a name=get_field_default></a>
        <br>
        <dt>object res = <b>get_field_default</b>(object s, string field_name)</dt>
         <dd>
            <i>Aside: not entirely sure this has much use, besides showing off on rosettacode</i><br>
            s: as per get_struct_type (str/rid/inst). A fatal error occurs if s is S_CFFI.<br>
            field_name: eg "name"<br>
            res: any type - you can store pretty much anything in a struct<br>
         </dd>
            <a name=set_field_default></a>
        <br>
        <dt>procedure <b>set_field_default</b>(object s, string field_name, object v)</dt>
         <dd>
            <i>Required (by the compiler) for replacing virtual methods
            <small> (ie override whatever[/virtual] start_struct() or extend_struct() set, when we encounter another[/the real deal]) </small></i><br>
            s: as per get_struct_type (str/rid/inst). A fatal error occurs if s is S_CFFI.<br>
            field_name: eg "task"<br>
            v: any type, though obviously for methods it is an integer routine_id<br>
         </dd>
            <a name=get_field_flags></a>
        <br>
        <dt>integer res = <b>get_field_flags</b>(object s, string field_name, bool bAsText=false)</dt>
         <dd>
            s: as per get_struct_type (str/rid/inst)<br>
            field_name: eg "name"<br>
            bAsText: if true the result is a string, from <a href="decode_flags.htm">decode_flags</a>()<br>
            res: SF_PUBLIC(0)|SF_PRIVATE(1) [+SF_PROC(#10)|SF_FUNC(#20)], as per struct_add_field(), or NULL if field_name not found.<br>
<!--        Note that "SF_PUBLIC" is returned when bAsText is true and no such field exists, instead of NULL.<br> (now fixed with fdx!=0) -->
            Note that a NULL ==> "SF_PUBLIC" result occurs when bAsText is true, but only if field_name actually exists.<br>
            <i>Used by pmain.e when checking for compile-time errors (duplicate fields).</i><br>
            A fatal error occurs if s is S_CFFI: at best, perhaps
<!--eucode>
integer sdx = s[I_SDX],
        id = structs[sdx][S_BDX],
        {offset,size,signed/*[, string mtype]*/} = cffi:get_field_details(id,field_name)
</eucode-->
<pre>
<font color="#004080">integer</font><font color="#000000"> sdx</font><font color="#0000FF"> =</font><font color="#000000"> s</font><font color="#0000FF">[</font><font color="#000000">I_SDX</font><font color="#0000FF">],</font>
<font color="#000000">        id</font><font color="#0000FF"> =</font><font color="#000000"> structs</font><font color="#0000FF">[</font><font color="#000000">sdx</font><font color="#0000FF">][</font><font color="#000000">S_BDX</font><font color="#0000FF">],
        {</font><font color="#000000">offset</font><font color="#0000FF">,</font><font color="#000000">size</font><font color="#0000FF">,</font><font color="#000000">signed</font><font color="#000080"><i>/*[, string mtype]*/</i></font><font color="#0000FF">} =</font><font color="#000000"> cffi</font><font color="#0000FF">:</font><font color="#7060A8">get_field_details</font><font color="#0000FF">(</font><font color="#000000">id</font><font color="#0000FF">,</font><font color="#000000">field_name</font><font color="#0000FF">)</font>
</pre>
            but that is/gets nothing remotely like the "res" detailed above.</i><br>
         </dd>
            <a name=get_field_type></a>
        <br>
        <dt>integer res = <b>get_field_type</b>(object s, string field_name, bool bAsText=false)</dt>
         <dd>
            s: as per get_struct_type (str/rid/inst). A fatal error occurs if s is S_CFFI.<br>
            field_name: eg "name"<br>
            bAsText: if true the result is a string, one of "ST_INTEGER".."ST_OBJECT", or an embedded struct type. Note however 
            that other user defined types (ie legacy, not struct or class) will not be recognised correctly.<br>
            res: ST_INTEGER(1)..ST_OBJECT(15), or the routine_id of a type, as per struct_add_field(), or NULL if not found.<br>
         </dd>
            <a name=struct_mem></a>
        <br>
        <dt>atom pMem = <b>struct_mem</b>(object s)</dt>
         <dd>
            s: A fatal error occurs if s is <i><b>not</b></i> an instance of an S_CFFI struct.<br>
            pMem: the result, suitable/intended for passing to <a href="c_func.htm">c_func</a>/<a href="c_proc.htm">proc</a>(), and possibly 
            <a href="set_struct_field.htm">set_struct_field</a>(), <a href="poke.htm">poke</a>(), <a href="peek.htm">peek</a>(), etc.<br>
         </dd>
        <br>
        </dl>
        <br>
        <br>
        <H3>TODO:</H3>
        Structure fields are not (yet) fully integrated into every possible aspect/corner of the language, for instance: 
<!--eucode>
s.name[1] = upper(s.name[1])
       ^ not yet supported
</eucode-->
<pre>
<font color="#000000">s</font><font color="#0000FF">.</font><font color="#000000">name</font><font color="#0000FF">[</font><font color="#000000">1</font><font color="#0000FF">] =</font><font color="#7060A8"> upper</font><font color="#0000FF">(</font><font color="#000000">s</font><font color="#0000FF">.</font><font color="#000000">name</font><font color="#800000">[</font><font color="#000000">1</font><font color="#800000">]</font><font color="#0000FF">)</font>
<font color="#000000">       ^</font><font color="#008080"> not</font><font color="#000000"> yet supported</font>
</pre>
        The rhs is in fact fine, however the left hand side needs a fetch/modify/store, since it is not implemented in the
        same (low-level) way as (eg) %opRepe. Similar things can happen for <nobr><code>s.age += 1</code></nobr> and/or  
        <nobr><code>s.name &= " (deceased)"</code></nobr>, etc. Some things may never ever bother anyone enough to actually 
        warrant being implemented, but you should always get a human readable rejection, as opposed to requiring a detailed 
        debug session. Two of many possible ways to fix the above:
<!--eucode>
string name = s.name
name[1] = upper(name[1])    -- (this line be all-traditional-non-struct-code)
s.name = name
-- or --
s.name = proper(s.name)

-- and, for those last two compound assigments, the obvious workaround...
s.age = s.age + 1
s.name = s.name & " (deceased)"
</eucode-->
<pre>
<font color="#004080">string</font><font color="#000000"> name</font><font color="#0000FF"> =</font><font color="#000000"> s</font><font color="#0000FF">.</font><font color="#000000">name
name</font><font color="#0000FF">[</font><font color="#000000">1</font><font color="#0000FF">] =</font><font color="#7060A8"> upper</font><font color="#0000FF">(</font><font color="#000000">name</font><font color="#800000">[</font><font color="#000000">1</font><font color="#800000">]</font><font color="#0000FF">)   </font><font color="#000080"><i> -- (this line be all-traditional-non-struct-code)</i></font>
<font color="#000000">s</font><font color="#0000FF">.</font><font color="#000000">name</font><font color="#0000FF"> =</font><font color="#000000"> name</font>
<font color="#000080"><i>-- or --</i></font>
<font color="#000000">s</font><font color="#0000FF">.</font><font color="#000000">name</font><font color="#0000FF"> =</font><font color="#7060A8"> proper</font><font color="#0000FF">(</font><font color="#000000">s</font><font color="#0000FF">.</font><font color="#000000">name</font><font color="#0000FF">)
</font>
<font color="#000080"><i>-- and, for those last two compound assigments, the obvious workaround...</i></font>
<font color="#000000">s</font><font color="#0000FF">.</font><font color="#000000">age</font><font color="#0000FF"> =</font><font color="#000000"> s</font><font color="#0000FF">.</font><font color="#000000">age</font><font color="#0000FF"> +</font><font color="#000000"> 1
s</font><font color="#0000FF">.</font><font color="#000000">name</font><font color="#0000FF"> =</font><font color="#000000"> s</font><font color="#0000FF">.</font><font color="#000000">name</font><font color="#0000FF"> &amp;</font><font color="#008000"> " (deceased)"</font>
</pre>
        Once I get stuck in, I expect/hope such things might be reasonably easy to fix/implement, but I also expect there to be quite a few.
        <br>
        <a name=constructor></a>
        <br>
        There is some code for handling a simple constructor in new() [see variable ctor]. Currently, for class bridge, 
        <code>new()</code> creates a new instance then looks for a <code>bridge()</code> constructor, and should one be found
        passes it two parameters, the implicit/hidden "this" (just created), and the sequence imm from the new() call.<br>
        However that argument handling is probably not ideal and probably conflicts with how it might be called directly.<br>
<!--
        One thing I certainly want to avoid, constructors or otherwise, is overloaded routines of any kind, which pretty much 
        rules out using a standard name such as constructor(), new([!!]) or __init__():
-->
        A derived <code>class pontoon extends bridge</code> could invoke <code>this.bridge([args])</code> without problem, 
        unlike a more generic or ambiguous (super|parent).constructor/__init__(), especially under multiple inheritance, hence
        (de)constructors are more sensibly named as (~)bridge/pontoon.<br>
        I need to have a bit more of a think/play with constructor arguments, specifically x = new bridge(...) syntax - which 
        is much more constructor-specific than anything we have right now, but still gets an implicit this, which might only
        be permitted/prove sensible for nullable classes. [Ding, penny just dropped: have builtins\structs.e maintain [CRID]
        on each class and make is_struct() do a final "if flags!=S_NULLABLE then <check callstack for [CRID]> end if".]
        Plus of course document and properly test all these things.<br>
        Also note that, currently, destructors are not guaranteed to be called in a timely fashion, or indeed at all. This is
        becase something like s.show(true) is invoked using call_proc(s.show,{s,true}) and that s buried in the opMkSq of the
        call_proc() clings on to a reference count, potentially forever. There /must/ be a way to fix that... [Erm, test that,
        shouldn&rsquo;t the tmp be passed non-incref & nulled to call_proc()...]
        There may also be other (non-opMkSq) things that ultimately cause the same or very similar effects. 
        I am beginning to think that you should never be allowed to call a destructor directly/explicitly but should instead 
        invoke delete() [optionally and with appropriate care not to carry on using whatever it is you just threw at delete()], 
        and there should be nothing in the form of hierarchical/automatic/nested destructors, except that if say ~bridge() 
        calls release_mem() then the ~pontoon() routine w/c/should also need to invoke release_mem() explicitly as well. 
        Destructors would naturally be argument-less, except for the single implicit this.
<!--
        which would be virtually
        (tee hee) impossible from (say) an <code>__init__()</code> routine due to the way virtual routines are overriden, plus 
        of course a <code>super.__init__()</code> or similar would likely be ambiguous under multiple inheritance.<br>
-->
<!--
         cwould be better, plus the syntax
        <code>bridge b = new bridge(...)</code> is currently illegal, but might be something we want for named parameters, etc.<br>
        Currently, <code>new()</code> creates an instance then passes it to the constructor for tweaking/discarding.<br>
        Invoking super.constructor() could also be sufficiently tricky for me to flatly state that it is just not done and each
        class needs a full and complete constructor of its very own.<br>
-->
        <br>
        <br>
        To facilitate lazy binding, all methods are invoked via <a href="call_func.htm">call_func</a>/<a href="call_proc.htm">proc</a>(), 
        which interferes with/prevents any named parameter handling, which should really be available under early binding...
        <br>
        <br>
        Implement/honour abstract/final on class methods.
        <br>
        <br>
        Resurrect sequence-based structs? The main difficulty is nesting/embedding them, and/or perhaps not converting to 
        literal integer indexes asap, so if we bar/do then things should progress a bit better? [PROBABLY NOT]
        <br>
        <br>
        Also, S_CFFI handling deserves quite a bit more testing than just the light skimming it got.
        <br>
        <br>
<!-- DONE!!
        The missing other half of "first class functions" is that my_rtn (assuming it is a recognised identifier) without a 
        trailing '(' should be equivalent to routine_id("my_rtn"), at least as a non-nested expression. For the latter I 
        expect pmain.e/Expr() needs a new "depth" parameter, plus test that eg my_rtn+1 triggers an appropriate error.
(Erm, +1 is not so hot. We can stop 1+, but not so easily the other way round...  revisit iff[f] it causes severe grief)
-->
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
