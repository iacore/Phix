<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">substitute</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
         <a href="sequence.htm">sequence</a> text = substitute(<a href="sequence.htm">sequence</a> text, 
                                                               <a href="object.htm">object</a> s, r,
                                                               <a href="integer.htm">integer</a> limit=-1)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Replace at most limit instances, or all if limit is -1, of s in text with r.<br>
            s and r can be strings or individual characters (or one of each).
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          Supported.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            Ideal for extensive text manipulation, eg re-indenting html or stripping tags to leave plain text.
            <br>
            <br>
            Very long strings that need thousands of replacements are broken up into thousands of chunks and 
            re-assembled once at the end, which makes this far more efficient than an "in situ" operation, since 
            individual characters (in particular the last few) are moved just twice rather than thousands of times.
            <br>
            <br>
            The Euphoria match_replace() routine offers similar but less efficient functionality, especially when 
            the lengths of s and r differ. The previous replace_all() routine of Euphoria has been deprecated in 
            favour of match_replace(). The Phix implementation of substitute() as found in builtins\substitute.e
            and reproduced below should work on Euphoria, once all the string types are replaced with sequence types.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
?substitute("abracadabra", "ra", "X")       -- displays "abXcadabX"
?substitute("abracadabra", "a", "")         -- displays "brcdbr"
</eucode-->
<pre>
<font color="#0000FF">?</font><font color="#7060A8">substitute</font><font color="#0000FF">(</font><font color="#008000">"abracadabra"</font><font color="#0000FF">,</font><font color="#008000"> "ra"</font><font color="#0000FF">,</font><font color="#008000"> "X"</font><font color="#0000FF">)      </font><font color="#000080"><i> -- displays "abXcadabX"</i></font>
<font color="#0000FF">?</font><font color="#7060A8">substitute</font><font color="#0000FF">(</font><font color="#008000">"abracadabra"</font><font color="#0000FF">,</font><font color="#008000"> "a"</font><font color="#0000FF">,</font><font color="#008000"> ""</font><font color="#0000FF">)        </font><font color="#000080"><i> -- displays "brcdbr"</i></font>
</pre>
         </td>
        </tr>
<!--DEV example program: minireindent.exw -->
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\substitute.e (an autoinclude), reproduced in the technicalia dropdown below, for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
<!--DEV replace_all, match_replace -->
          <a href="join.htm">join</a>,
          <a href="tagset.htm">tagset</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            I have reproduced this routine here because I think it is interesting to study, especially since
            it can in some cases prove to be several thousand times faster than a simpler/in situ method.
            <br>
            <br>
<!--eucode>
global function substitute(sequence text, object s, r, integer limit=-1)
-- replace all instances of s in text with r
    integer k = 1, 
            l = iff(atom(s)?1:length(s)),
            startidx = 1
    sequence chunks = {}
    while limit=-1 or length(chunks)<limit do
        k = match(s,text,k)
        if k=0 then exit end if
        chunks = append(chunks,text[startidx..k-1])
        k += l
        startidx = k
    end while
    if length(chunks) then
        chunks = append(chunks,text[startidx..$])
        text = chunks[1]
        for i=2 to length(chunks) do
            text &= r
            text &= chunks[i]
        end for
    end if
    return text
end function
</eucode-->
<pre>
<font color="#008080">global function</font><font color="#7060A8"> substitute</font><font color="#0000FF">(</font><font color="#004080">sequence</font><font color="#000000"> text</font><font color="#0000FF">,</font><font color="#004080"> object</font><font color="#000000"> s</font><font color="#0000FF">,</font><font color="#000000"> r</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> limit</font><font color="#0000FF">=-</font><font color="#000000">1</font><font color="#0000FF">)</font>
<font color="#000080"><i>-- replace all instances of s in text with r</i></font>
<font color="#004080">    integer</font><font color="#000000"> k</font><font color="#0000FF"> =</font><font color="#000000"> 1</font><font color="#0000FF">, </font>
<font color="#000000">            l</font><font color="#0000FF"> =</font><font color="#7060A8"> iff</font><font color="#0000FF">(</font><font color="#004080">atom</font><font color="#800000">(</font><font color="#000000">s</font><font color="#800000">)</font><font color="#0000FF">?</font><font color="#000000">1</font><font color="#0000FF">:</font><font color="#7060A8">length</font><font color="#800000">(</font><font color="#000000">s</font><font color="#800000">)</font><font color="#0000FF">),</font>
<font color="#000000">            startidx</font><font color="#0000FF"> =</font><font color="#000000"> 1</font>
<font color="#004080">    sequence</font><font color="#000000"> chunks</font><font color="#0000FF"> = {}</font>
<font color="#008080">    while</font><font color="#000000"> limit</font><font color="#0000FF">=-</font><font color="#000000">1</font><font color="#008080"> or</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">chunks</font><font color="#0000FF">)&lt;</font><font color="#000000">limit</font><font color="#008080"> do</font>
<font color="#000000">        k</font><font color="#0000FF"> =</font><font color="#7060A8"> match</font><font color="#0000FF">(</font><font color="#000000">s</font><font color="#0000FF">,</font><font color="#000000">text</font><font color="#0000FF">,</font><font color="#000000">k</font><font color="#0000FF">)</font>
<font color="#008080">        if</font><font color="#000000"> k</font><font color="#0000FF">=</font><font color="#000000">0</font><font color="#008080"> then exit end if</font>
<font color="#000000">        chunks</font><font color="#0000FF"> =</font><font color="#7060A8"> append</font><font color="#0000FF">(</font><font color="#000000">chunks</font><font color="#0000FF">,</font><font color="#000000">text</font><font color="#800000">[</font><font color="#000000">startidx</font><font color="#0000FF">..</font><font color="#000000">k</font><font color="#0000FF">-</font><font color="#000000">1</font><font color="#800000">]</font><font color="#0000FF">)</font>
<font color="#000000">        k</font><font color="#0000FF"> +=</font><font color="#000000"> l
        startidx</font><font color="#0000FF"> =</font><font color="#000000"> k</font>
<font color="#008080">    end while
    if</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">chunks</font><font color="#0000FF">)</font><font color="#008080"> then</font>
<font color="#000000">        chunks</font><font color="#0000FF"> =</font><font color="#7060A8"> append</font><font color="#0000FF">(</font><font color="#000000">chunks</font><font color="#0000FF">,</font><font color="#000000">text</font><font color="#800000">[</font><font color="#000000">startidx</font><font color="#0000FF">..</font><font color="#000000">$</font><font color="#800000">]</font><font color="#0000FF">)</font>
<font color="#000000">        text</font><font color="#0000FF"> =</font><font color="#000000"> chunks</font><font color="#0000FF">[</font><font color="#000000">1</font><font color="#0000FF">]</font>
<font color="#008080">        for</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">2</font><font color="#008080"> to</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">chunks</font><font color="#0000FF">)</font><font color="#008080"> do</font>
<font color="#000000">            text</font><font color="#0000FF"> &amp;=</font><font color="#000000"> r
            text</font><font color="#0000FF"> &amp;=</font><font color="#000000"> chunks</font><font color="#0000FF">[</font><font color="#000000">i</font><font color="#0000FF">]</font>
<font color="#008080">        end for
    end if
    return</font><font color="#000000"> text</font>
<font color="#008080">end function</font>
</pre>
            <br>
            Originally text/r/s were string, and that remains the primary use case, however I did once find a need for sequences,
            when investigating runs of differences in the sequence/generation of safe numbers. I should note that the replacement
            had to be nested one more than I first expected, because of the <code>text &= r</code>, not always behaving quite the 
            same as the <code>text[s..e] = r</code> it logically replaces, that is when r is not a string. Likewise I changed the
            first parameter/return of <a href="substitute_all.htm">substitute_all</a>() to a sequence.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
