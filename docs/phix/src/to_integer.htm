<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">to_integer</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            <a href="integer.htm">integer</a> res = to_integer(<a href="string.htm">string</a> s, <a href="integer.htm">integer</a> def_value = 0)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Converts a string representation of a decimal integer into an actual integer.
            <br>
            <br>
            s: A string such as "42".<br>
            def_value: The value to return on failure.
            <br>
            <br>
            Returns the integer equivalent of s, or def_value.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            This is, quite deliberately, just about the simplest possible implementation of such a function.
            <br>
            <br>
            To deal with values outside +/-1,073,741,823 as well as fractions, exponents, embedded underscores, or other number bases, 
            use <a href="to_number.htm">to_number</a>().
            <br>
            <br>
            By default to_integer(s) returns 0 for both "0" and "abc". To sidestep that kind of potential confusion there is a sister function, 
            <a href="integer.htm#bool">bool</a> res = <b>is_integer</b>(string s), which obviously annihilates any such ambiguity.
            Note that to_integer("-1073741824") fails/returns def_value after having set sgn to -1 but then finding "1073741824" is <i>not</i> an 
            integer (only just), and that <i>is</i>_integer() actually depends on that behaviour (of <i>to</i>_integer), and likewise yields 
            false for "-1073741824". <br>
<!--
            <small>Of course you <i>could</i> use that same trick directly, but who wants to remember or type in -1073741824 every time?
                   Likewise of course on 64bit you can replace that 1,073,741,824 with 4,611,686,018,427,387,904, sans commas.</small>
-->
            <small>(Of course that -1073741824 is replaced with -4611686018427387904 on 64bit.)</small>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
?to_integer("12")       --  12
?to_integer("-12")      -- -12       
?to_integer("abc")      --   0 (the default def_value)
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">?</font><font color="#5E005E">to_integer</font><font color="#0000FF">(</font><font color="#008000">"12"</font><font color="#0000FF">)                          </font><font color="#000080"><i> -- 12
</i></font><font color="#0000FF">?</font><font color="#5E005E">to_integer</font><font color="#0000FF">(</font><font color="#008000">"-12"</font><font color="#0000FF">)                         </font><font color="#000080"><i> -- 0 (the default def_value)</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\to_int.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
            <a href="to_number.htm">to_number</a>
         </td>
        </tr>
       </table>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
