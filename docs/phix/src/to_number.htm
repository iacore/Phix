<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">to_number</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            <a href="object.htm">object</a> res = to_number(<a href="string.htm">string</a> s, 
                                                            <a href="object.htm">object</a> failure={},
                                                            <a href="integer.htm">integer</a> inbase=10)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Converts a string representation of a number into an atom.
            <br>
            <br>
            s: A string such as "42".<br>
            failure: value to return is s cannot be parsed.<br>
            inbase: 2..16.
            <br>
            <br>
            Returns the atom equivalent of s, or the specified failure value.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            Copes with signs, fractions, exponents, other number bases, and values outside 0..#3FFFFFFF.
            <br>
            <br>
            The inbase parameter can be omitted/left as 10 for any s with an explict base, such as "0b01010" or "#DEADBEEF",
            since those would automatically override it to 2 and 16 respectively anyway, whereas should you fail to specify
            an inbase of 16 then obviously it will reject "DEADBEEF" since that is not a valid base 10 number. One caveat is
            that if you specify an inbase above 10, then the binary "0b01" and the decimal "0d10" will be interpreted as the
            hexadecimal #B01 and #D10, ie 2817 and 3344, rather than the 1 and 10 respectively that they would otherwise be.
            <br>
            <br>
            Note that unlike the simpler <a href="to_integer.htm">to_integer</a>(), the empty string yields failure,
            and embedded underscores ('_') are permitted/skipped.<br>
            This routine also allows eg "65'A'" which is treated as if it was just "65" (but "66'A'" and "65'B'" 
            would fail), specifically intended to help when processing ex.err files.
            <br>
            <br>
            Also note that there is no equivalent of the return_bad_pos argument of the Euphoria version.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
?to_number("12")                            -- 12
?to_number("-12")                           -- -12
?to_number("0b1100")                        -- 12
?to_number("1_000_000")                     -- 1000000
?to_number("13.25e-57")                     -- 13.25e-57
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">?</font><font color="#5E005E">to_number</font><font color="#0000FF">(</font><font color="#008000">"12"</font><font color="#0000FF">)                           </font><font color="#000080"><i> -- 12
</i></font><font color="#0000FF">?</font><font color="#5E005E">to_number</font><font color="#0000FF">(</font><font color="#008000">"-12"</font><font color="#0000FF">)                          </font><font color="#000080"><i> -- -12
</i></font><font color="#0000FF">?</font><font color="#5E005E">to_number</font><font color="#0000FF">(</font><font color="#008000">"0b1100"</font><font color="#0000FF">)                       </font><font color="#000080"><i> -- 12
</i></font><font color="#0000FF">?</font><font color="#5E005E">to_number</font><font color="#0000FF">(</font><font color="#008000">"1_000_000"</font><font color="#0000FF">)                    </font><font color="#000080"><i> -- 1000000
</i></font><font color="#0000FF">?</font><font color="#5E005E">to_number</font><font color="#0000FF">(</font><font color="#008000">"13.25e-57"</font><font color="#0000FF">)                    </font><font color="#000080"><i> -- 13.25e-57</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\scanf.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
       </table>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
