<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">traverse_dict</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
          traverse_dict(<a href="integer.htm">integer</a> rid, 
                        <a href="object.htm">object</a> user_data=0, 
                        <a href="integer.htm">integer</a> tid=1, 
                        <a href="integer.htm#bool">bool</a> rev=<a href="logicops.htm">false</a>)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Perform an in-order traversal of the dictionary, invoking the specified routine for each {key,data} pairing.
            <br>
            <br>
            rid: routine_id of a function that accepts three parameters, called for each entry.<br>
            user_data: any additional data that might be required by rid.<br>
            tid: a result from <a href="new_dict.htm">new_dict</a>(), or if omitted it uses the one common dictionary.<br>
            rev: if true, the traversal is made from the highest key to the lowest key.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            The specified routine should be a function that accepts three parameters: key, data, and user_data, and 
            should return 1 to continue the traversal, or 0 to terminate it.
            <br>
            <br>
            Obviously modifying the key structure of tid during rid is likely to have unintended consequences (updating 
            the data should however be fine). If you are traversing a complex tree structure and rebalance it underfoot,
            then anything can happen, from skipping whole subtrees, traversing them twice, or a fatal error. However it
            would be acceptable to terminate and restart the traversal after performing each key update (return 0), that
            is assuming you can skip any already-done updates on the next traversal.
            <br>
            <br>
            The ordering is case-sensitive. If a case-insensitive ordering is required, the key values as passed to
            <a href="setd.htm">setd</a>() [etc] should be passed through either <a href="upper.htm">upper</a>() or 
            <a href="lower.htm">lower</a>() and if needs be a copy of the original case included somewhere in data.
            <br>
            <br>
            The use of a <a href="procedures.htm#namedparams">named parameter</a> when setting the rev flag is recommended, 
            to make the intent clear and the code easier to read.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 1:</b>
         </td>
         <td>
<!--eucode>
function visitor(object key, object data, object /*user_data*/)
    ?{key,data}
    return 1
end function

setd("key","data")
setd("key2","data2")

traverse_dict(routine_id("visitor"))
</eucode-->
<pre>
<font color="#008080">function</font><font color="#000000"> visitor</font><font color="#0000FF">(</font><font color="#004080">object</font><font color="#000000"> key</font><font color="#0000FF">,</font><font color="#004080"> object</font><font color="#000000"> data</font><font color="#0000FF">,</font><font color="#004080"> object</font><font color="#000080"><i> /*user_data*/</i></font><font color="#0000FF">)
    ?{</font><font color="#000000">key</font><font color="#0000FF">,</font><font color="#000000">data</font><font color="#0000FF">}</font>
<font color="#008080">    return</font><font color="#000000"> 1</font>
<font color="#008080">end function
</font>
<font color="#5E005E">setd</font><font color="#0000FF">(</font><font color="#008000">"key"</font><font color="#0000FF">,</font><font color="#008000">"data"</font><font color="#0000FF">)</font>
<font color="#5E005E">setd</font><font color="#0000FF">(</font><font color="#008000">"key2"</font><font color="#0000FF">,</font><font color="#008000">"data2"</font><font color="#0000FF">)
</font>
<font color="#5E005E">traverse_dict</font><font color="#0000FF">(</font><font color="#5E005E">routine_id</font><font color="#800000">(</font><font color="#008000">"visitor"</font><font color="#800000">)</font><font color="#0000FF">)</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Example 2:</b>
         </td>
         <td>
<!--eucode>
constant map1 = new_dict({{"key1","data1"}}),
         map2 = new_dict({{"key2","data2"}}),
         map3 = new_dict(map1)

function merge(object key, object data, integer map3)
    setd(key,data,map3)
    return 1
end function
traverse_dict(routine_id("merge"),map3,map2)

include builtins\map.e
?{"map1:",pairs(map1)}
?{"map2:",pairs(map2)}
?{"map3:",pairs(map3)}
-- output
-- {"map1:",{{"key1","data1"}}}
-- {"map2:",{{"key2","data2"}}}
-- {"map3:",{{"key1","data1"},{"key2","data2"}}}
</eucode-->
<pre>
<font color="#008080">constant</font><font color="#000000"> map1</font><font color="#0000FF"> =</font><font color="#5E005E"> new_dict</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#800080">{</font><font color="#008000">"key1"</font><font color="#0000FF">,</font><font color="#008000">"data1"</font><font color="#800080">}</font><font color="#800000">}</font><font color="#0000FF">),</font>
<font color="#000000">         map2</font><font color="#0000FF"> =</font><font color="#5E005E"> new_dict</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#800080">{</font><font color="#008000">"key2"</font><font color="#0000FF">,</font><font color="#008000">"data2"</font><font color="#800080">}</font><font color="#800000">}</font><font color="#0000FF">),</font>
<font color="#000000">         map3</font><font color="#0000FF"> =</font><font color="#5E005E"> new_dict</font><font color="#0000FF">(</font><font color="#000000">map1</font><font color="#0000FF">)
</font>
<font color="#008080">function</font><font color="#000000"> merge</font><font color="#0000FF">(</font><font color="#004080">object</font><font color="#000000"> key</font><font color="#0000FF">,</font><font color="#004080"> object</font><font color="#000000"> data</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> map3</font><font color="#0000FF">)</font>
<font color="#5E005E">    setd</font><font color="#0000FF">(</font><font color="#000000">key</font><font color="#0000FF">,</font><font color="#000000">data</font><font color="#0000FF">,</font><font color="#000000">map3</font><font color="#0000FF">)</font>
<font color="#008080">    return</font><font color="#000000"> 1</font>
<font color="#008080">end function</font>
<font color="#5E005E">traverse_dict</font><font color="#0000FF">(</font><font color="#5E005E">routine_id</font><font color="#800000">(</font><font color="#008000">"merge"</font><font color="#800000">)</font><font color="#0000FF">,</font><font color="#000000">map3</font><font color="#0000FF">,</font><font color="#000000">map2</font><font color="#0000FF">)
</font>
<font color="#008080">include</font><font color="#000000"> builtins\map.e</font>
<font color="#0000FF">?{</font><font color="#008000">"map1:"</font><font color="#0000FF">,</font><font color="#5E005E">pairs</font><font color="#800000">(</font><font color="#000000">map1</font><font color="#800000">)</font><font color="#0000FF">}
?{</font><font color="#008000">"map2:"</font><font color="#0000FF">,</font><font color="#5E005E">pairs</font><font color="#800000">(</font><font color="#000000">map2</font><font color="#800000">)</font><font color="#0000FF">}
?{</font><font color="#008000">"map3:"</font><font color="#0000FF">,</font><font color="#5E005E">pairs</font><font color="#800000">(</font><font color="#000000">map3</font><font color="#800000">)</font><font color="#0000FF">}</font>
<font color="#000080"><i>-- output
-- {"map1:",{{"key1","data1"}}}
-- {"map2:",{{"key2","data2"}}}
-- {"map3:",{{"key1","data1"},{"key2","data2"}}}</i></font>
</pre>
            <br>
            Obviously should the same key occur in map1 and map2, the data from map2 will overwrite the corresponding map1 value.
            <br>
            <br>
            Note that other forms of merge are possible/may be required, for example if key is file size and data is a list of files of that size,
            the merge operation would probably want to concatenate the values from matching keys rather than replace them, eg:
            <br>
            <br>
<!--eucode>
constant map1 = new_dict({{1234,{"this.txt"}}}),
         map2 = new_dict({{1234,{"that.txt"}}}),
         map3 = new_dict(map1)

function merge(object key, object data, integer map3)
    integer node = getd_index(key,map3)
    if node=NULL then
        setd(key,data,map3)
        -- (possibly return 0 as per comment above)
    else
        setd(key,getd_by_index(node,map3)&data,map3)
    end if
    return 1
end function
traverse_dict(routine_id("merge"),map3,map2)
include builtins\map.e
?{"map1:",pairs(map1)}
?{"map2:",pairs(map2)}
?{"map3:",pairs(map3)}
-- output
-- {"map1:",{{1234,{"this.txt"}}}}
-- {"map2:",{{1234,{"that.txt"}}}}
-- {"map3:",{{1234,{"this.txt","that.txt"}}}}
</eucode-->
<pre>
<font color="#008080">constant</font><font color="#000000"> map1</font><font color="#0000FF"> =</font><font color="#5E005E"> new_dict</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#800080">{</font><font color="#000000">1234</font><font color="#0000FF">,</font><font color="#00FF00">{</font><font color="#008000">"this.txt"</font><font color="#00FF00">}</font><font color="#800080">}</font><font color="#800000">}</font><font color="#0000FF">),</font>
<font color="#000000">         map2</font><font color="#0000FF"> =</font><font color="#5E005E"> new_dict</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#800080">{</font><font color="#000000">1234</font><font color="#0000FF">,</font><font color="#00FF00">{</font><font color="#008000">"that.txt"</font><font color="#00FF00">}</font><font color="#800080">}</font><font color="#800000">}</font><font color="#0000FF">),</font>
<font color="#000000">         map3</font><font color="#0000FF"> =</font><font color="#5E005E"> new_dict</font><font color="#0000FF">(</font><font color="#000000">map1</font><font color="#0000FF">)
</font>
<font color="#008080">function</font><font color="#000000"> merge</font><font color="#0000FF">(</font><font color="#004080">object</font><font color="#000000"> key</font><font color="#0000FF">,</font><font color="#004080"> object</font><font color="#000000"> data</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> map3</font><font color="#0000FF">)</font>
<font color="#004080">    integer</font><font color="#000000"> node</font><font color="#0000FF"> =</font><font color="#5E005E"> getd_index</font><font color="#0000FF">(</font><font color="#000000">key</font><font color="#0000FF">,</font><font color="#000000">map3</font><font color="#0000FF">)</font>
<font color="#008080">    if</font><font color="#000000"> node</font><font color="#0000FF">=</font><font color="#004600">NULL</font><font color="#008080"> then</font>
<font color="#5E005E">        setd</font><font color="#0000FF">(</font><font color="#000000">key</font><font color="#0000FF">,</font><font color="#000000">data</font><font color="#0000FF">,</font><font color="#000000">map3</font><font color="#0000FF">)</font>
<font color="#000080"><i>        -- (possibly return 0 as per comment above)</i></font>
<font color="#008080">    else</font>
<font color="#5E005E">        setd</font><font color="#0000FF">(</font><font color="#000000">key</font><font color="#0000FF">,</font><font color="#5E005E">getd_by_index</font><font color="#800000">(</font><font color="#000000">node</font><font color="#0000FF">,</font><font color="#000000">map3</font><font color="#800000">)</font><font color="#0000FF">&amp;</font><font color="#000000">data</font><font color="#0000FF">,</font><font color="#000000">map3</font><font color="#0000FF">)</font>
<font color="#008080">    end if
    return</font><font color="#000000"> 1</font>
<font color="#008080">end function</font>
<font color="#5E005E">traverse_dict</font><font color="#0000FF">(</font><font color="#5E005E">routine_id</font><font color="#800000">(</font><font color="#008000">"merge"</font><font color="#800000">)</font><font color="#0000FF">,</font><font color="#000000">map3</font><font color="#0000FF">,</font><font color="#000000">map2</font><font color="#0000FF">)</font>
<font color="#008080">include</font><font color="#000000"> builtins\map.e</font>
<font color="#0000FF">?{</font><font color="#008000">"map1:"</font><font color="#0000FF">,</font><font color="#5E005E">pairs</font><font color="#800000">(</font><font color="#000000">map1</font><font color="#800000">)</font><font color="#0000FF">}
?{</font><font color="#008000">"map2:"</font><font color="#0000FF">,</font><font color="#5E005E">pairs</font><font color="#800000">(</font><font color="#000000">map2</font><font color="#800000">)</font><font color="#0000FF">}
?{</font><font color="#008000">"map3:"</font><font color="#0000FF">,</font><font color="#5E005E">pairs</font><font color="#800000">(</font><font color="#000000">map3</font><font color="#800000">)</font><font color="#0000FF">}</font>
<font color="#000080"><i>-- output
-- {"map1:",{{1234,{"this.txt"}}}}
-- {"map2:",{{1234,{"that.txt"}}}}
-- {"map3:",{{1234,{"this.txt","that.txt"}}}}</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="setd.htm">setd</a>,
          <a href="upper.htm">upper</a>,
          <a href="lower.htm">lower</a>,
          <a href="routine_id.htm">routine_id</a>,
          <a href="traverse_dict_partial_key.htm">traverse_dict_partial_key</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
