<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">trim</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
            <a href="object.htm">object</a> res = trim(<a href="object.htm">object</a> source, 
                                                       <a href="object.htm">object</a> what={' ','\t','\r','\n'}, 
                                                       <a href="integer.htm#bool">bool</a> return_index=false)
            <br>
            <i>or ...</i>
            <br>
            <a href="object.htm">object</a> res = trim_head(<a href="object.htm">object</a> source, 
                                                            <a href="object.htm">object</a> what={' ','\t','\r','\n'}, 
                                                            <a href="integer.htm#bool">bool</a> return_index=false)
            <br>
            <i>-- or --</i>
            <br>
            <a href="object.htm">object</a> res = trim_tail(<a href="object.htm">object</a> source, 
                                                            <a href="object.htm">object</a> what={' ','\t','\r','\n'}, 
                                                            <a href="integer.htm#bool">bool</a> return_index=false)
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Trim whitespace from strings.
            <br>
            <br>
            source: object (string) to be trimmed.<br>
            what: elements (characters) to be removed.<br>
            return_index: if true return {startpos,endpos} (trim), startpos (trim_head), or endpos (trim_tail) respectively.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            Can theoretically be used for other purposes besides trimming whitespace, perhaps to trim unused entries from a table.
            <br>
            <br>
            When return_index is true, the result is {startpos,endpos} (trim), startpos (trim_head), or endpos (trim_tail).
            <br>
            <br>
            To simplify processing, if source is not a <a href="sequence.htm">sequence</a>/<a href="string.htm">string</a>, but instead 
            something like EOF (ie -1), it is returned unaltered.<br>
            Note however that feature is certainly <i>not</i> intended for use when working with indexes (return_index=true), since treating
            the -1 (or whatever!) result as an index would probably be quite wrong! Instead it is usually easier to avoid the call when
            source is not a sequence, rather than struggle to interpret the result correctly.<br>
            In other words, <code>integer {s,e} = trim(5,x,true)</code> will fail trying to extract {s,e} from 5, and likewise(-ish)
            <code>integer e = trim_head/tail(5,x,true)</code> will succeed however some subsequent [5] usage will almost certainly fail.<br>
            In both cases it is simply easier to avoid the call rather than test/ignore the bogus results.
            <br>
            <br>
            Prior to version 1.0.0, what defaulted to " \t\r\n", but that is incompatible with <a href="p2js.htm">pwa/p2js</a>, and changing it
            to a dword-sequence does not affect the functionality on the desktop (however you simply cannot have tab characters in strings 
            in JavaScript, see <a href="notp2js.htm">Incompatibilities</a>).
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
?trim(" abc ")          -- prints "abc"
?trim(`"abc"`)          -- prints `"abc"`
?trim(`"abc"`,'\"')     -- prints "abc" (not ""abc"" nor `"abc"`)
?trim(table,{{}})       -- removes s[i]={} entries from start and end (note the extra {})
?trim(table,{{},0})     -- removes s[i]={} or 0 ""
?trim(gets(fn))         -- trim returns eof (-1) unaltered.
</eucode-->
<pre>
<font color="#0000FF">?</font><font color="#5E005E">trim</font><font color="#0000FF">(</font><font color="#008000">" abc "</font><font color="#0000FF">)         </font><font color="#000080"><i> -- prints "abc"</i></font>
<font color="#0000FF">?</font><font color="#5E005E">trim</font><font color="#0000FF">(</font><font color="#008000">`"abc"`</font><font color="#0000FF">)         </font><font color="#000080"><i> -- prints `"abc"`</i></font>
<font color="#0000FF">?</font><font color="#5E005E">trim</font><font color="#0000FF">(</font><font color="#008000">`"abc"`</font><font color="#0000FF">,</font><font color="#008000">'\"'</font><font color="#0000FF">)    </font><font color="#000080"><i> -- prints "abc" (not ""abc"" nor `"abc"`)</i></font>
<font color="#0000FF">?</font><font color="#5E005E">trim</font><font color="#0000FF">(</font><font color="#000000">table</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#800080">{}</font><font color="#800000">}</font><font color="#0000FF">)      </font><font color="#000080"><i> -- removes s[i]={} entries from start and end (note the extra {})</i></font>
<font color="#0000FF">?</font><font color="#5E005E">trim</font><font color="#0000FF">(</font><font color="#000000">table</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#800080">{}</font><font color="#0000FF">,</font><font color="#000000">0</font><font color="#800000">}</font><font color="#0000FF">)    </font><font color="#000080"><i> -- removes s[i]={} or 0 ""</i></font>
<font color="#0000FF">?</font><font color="#5E005E">trim</font><font color="#0000FF">(</font><font color="#7060A8">gets</font><font color="#800000">(</font><font color="#000000">fn</font><font color="#800000">)</font><font color="#0000FF">)        </font><font color="#000080"><i> -- trim returns eof (-1) unaltered.</i></font>
</pre>
            <a name=aux></a>
         </td>
        </tr>
        <tr>
         <td>
          <b>Ancilliary function:</b>
         </td>
         <td>
            string res = <b>shorten</b>(sequence s, string what="digits", integer ml=20)
            <br>
            <br>
            Crops longer output, eg shorten(repeat('1',9999)) returns "1111111111111111111...1111111111111111111 (9,999 digits)". <br>
            The original text is returned unaltered if it is already shorter than 2*ml, or if it would be longer with "..." and the suffix.<br>
            Obviously you might want to replace "digits" with "chars"/"elements"/etc, and keep more/less of the first/last,<br>
            eg shorten(repeat('1',9999),"ones",9) returns "111111111...111111111 (9,999 ones)". <br>
            If what is specified as "" then there is no suffix, eg shorten("0123456789","",1) returns "0...9". 
            <br>
            <br>
            If s is not a string then a sequence of strings is assumed, the "..." and final suffix are inserted as string elements, more suitable
            for say <a href="join.htm">join</a>() or <a href="join_by.htm">join_by</a>(), and giving a default (unflattened) max result length of 42.
            <br>
            <br>
            See also <a href="mpfr.htm#mpz_get_short_str">mpz_get_short_str</a>(), which may be significantly faster.
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\ptrim.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
       </table>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
