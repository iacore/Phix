<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">url</h1>
      <div id="mainSection">
        The file builtins\url.e (not an autoinclude) contains some basic routines for dealing with urls.
        <br>
        <br>
        The code is fairly straightforward and open to enhancements/suggestions.
        <br>
        <br>
        Since it is all just text processing, it is perfectly compatible with <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js</b></span></a>.

        <h3>Example:</h3>
           <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
            <div class="codeSnippetContainerCodeContainer">
             <div class="codeSnippetToolBar">
              <div class="codeSnippetToolBarText">
               <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_18b74j93-qx54-4765-123h-8b2483c92846');">Copy</a>
              </div>
             </div>
             <div id="CodeSnippetContainerCode_18b74j93-qx53-4765-123h-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
              <div style="color:Black;">
<!--eucode>
include url.e
?parse_url("http://user:pass@www.debian.org:80/index.html?name=John&age=39#tag")
?parse_url("mailto:John.Doe@example.com")
?decode_url("Fred+%26+Ethel")
-- output:
-- {"http","www.debian.org",80'P',"/index.html","user","pass","name=John&age=39","tag"}
-- {"mailto",0,0,"John.Doe@example.com",0,0,0,0}
-- "Fred & Ethel"
</eucode-->
<pre>
<font color="#008080">include</font><font color="#000000"> url.e</font>
<font color="#0000FF">?</font><font color="#5E005E">parse_url</font><font color="#0000FF">(</font><font color="#008000">"http://user:pass@www.debian.org:80/index.html?name=John&amp;age=39#tag"</font><font color="#0000FF">)
?</font><font color="#5E005E">parse_url</font><font color="#0000FF">(</font><font color="#008000">"mailto:John.Doe@example.com"</font><font color="#0000FF">)
?</font><font color="#5E005E">decode_url</font><font color="#0000FF">(</font><font color="#008000">"Fred+%26+Ethel"</font><font color="#0000FF">)</font>
<font color="#000080"><i>-- output:
-- {"http","www.debian.org",80'P',"/index.html","user","pass","name=John&amp;age=39","tag"}
-- {"mailto",0,0,"John.Doe@example.com",0,0,0,0}
-- "Fred &amp; Ethel"</i></font>
</pre>
              </div>
             </div>
            </div>
           </div>
        Elements returned by parse_url() are 0 when not available/recognised, apart from a protocol of "".<br>
        Some further examples can be found at <a id="ext837" style="color:#9B5565" 
        href="javascript:ExternalLink('ext837','https://rosettacode.org/mw/index.php?title=URL_parser#Phix');"
                                               >https://rosettacode.org/mw/index.php?title=URL_parser#Phix</a>.
        <br>
        <br>
        <a name=constants></a>
        <h3>Constants</h3>
        <style type="text/css">
          dl {margin:0;padding:0;}
          dt {margin:0;padding:0;}
          dd {margin:0;padding:0;}
          dd.pad {padding-left:12em;}
        </style>
        <div id="nopad" class="nopad" align="center">
         <table cellspacing="0" cellpadding="0" border="0" style="padding: 0; border-style: none;">
          <tr><td align="right" style="padding: 0; border-style: none;">
            <nobr>global enum URL_PROTOCOL,&nbsp;</nobr>
          </td><td align="left" style="padding: 0; border-style: none;">
            -- [1] The protocol of the URL, aka scheme, eg "http"
          </td></tr>
          <tr><td align="right" style="padding: 0; border-style: none;">
            <nobr>URL_HOSTNAME,&nbsp;</nobr>
          </td><td align="left" style="padding: 0; border-style: none;">
            -- [2] The hostname of the URL, aka domain, eg "www.example.com"
          </td></tr>
          <tr><td align="right" style="padding: 0; border-style: none;">
            <nobr>URL_PORT,&nbsp;</nobr>
          </td><td align="left" style="padding: 0; border-style: none;">
            -- [3] The TCP port that the URL will connect to, eg 80
          </td></tr>
          <tr><td align="right" style="padding: 0; border-style: none;">
            <nobr>URL_PATH,&nbsp;</nobr>
          </td><td align="left" style="padding: 0; border-style: none;">
            -- [4] The protocol-specific pathname of the URL, eg "/index.html"
          </td></tr>
          <tr><td align="right" style="padding: 0; border-style: none;">
            <nobr>URL_USER,&nbsp;</nobr>
          </td><td align="left" style="padding: 0; border-style: none;">
            -- [5] The username of the URL, eg "user"
          </td></tr>
          <tr><td align="right" style="padding: 0; border-style: none;">
            <nobr>URL_PASSWORD,&nbsp;</nobr>
          </td><td align="left" style="padding: 0; border-style: none;">
            -- [6] The password of the URL, eg "pass"
          </td></tr>
          <tr><td align="right" style="padding: 0; border-style: none;">
            <nobr>URL_QUERY_STRING,&nbsp;</nobr>
          </td><td align="left" style="padding: 0; border-style: none;">
            -- [7] The HTTP query string, eg "name=John&age=39"
          </td></tr>
          <tr><td align="right" style="padding: 0; border-style: none;">
            <nobr>URL_FRAGMENT,&nbsp;</nobr>
          </td><td align="left" style="padding: 0; border-style: none;">
            -- [8] The #name part, eg "tag"
          </td></tr>
         </table>
        </div>
        <div style="clear:both;height:1px;"> </div>

        <a name=routines></a>
        <h3>Routines</h3>

        <div id="nopad" class="nopad" align="center">
         <table cellspacing="0" cellpadding="0" border="0" style="padding: 0; border-style: none;">
          <tr><td align="right" style="padding: 0; border-style: none;">
            object res =&nbsp;
          </td><td align="left" style="padding: 0; border-style: none;">
            <dl><dt>
            <b>parse_url</b>(string url) -- Parse a URL returning its various elements.<br>
            </dt><dd class="pad">
            Returns 0 if the url could not be parsed.<br>
            Unlike Euphoria, there is no option to convert the query string to a map, it is always a string here, or 0.
            </dd></dl>
          </td></tr>
          <tr><td align="right" style="padding: 0; border-style: none;">
            string desc =&nbsp;
          </td><td align="left" style="padding: 0; border-style: none;">
            <dl><dt>
            <b>url_element_desc</b>(integer idx) -- Returns "scheme", "domain", "port", .. "fragment", matching the above constants<br>
            </dt><dd class="pad">
            <small>(Sufficiently trivial that you&rsquo;d just rewrite your own rather than fiddle/fret with it.)</small>
            </dd></dl>
          </td></tr>
          <tr><td align="right" style="padding: 0; border-style: none;">
            string url =&nbsp;
          </td><td align="left" style="padding: 0; border-style: none;">
            <b>decode_url</b>(string url) -- Convert all encoded entities to their decoded counter parts<br>
          </td></tr>
         </table>
        </div>
        <div style="clear:both;height:1px;"> </div>

        <br>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
