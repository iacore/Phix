<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">wait_key</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td>
          <b>Definition:</b>
         </td>
         <td>
             <a href="integer.htm">integer</a> i = wait_key()
         </td>
        </tr>
        <tr>
         <td>
          <b>Description:</b>
         </td>
         <td>
            Return the next key pressed by the user.<br>
            Do not return until a key is pressed.
         </td>
        </tr>
        <tr>
         <td>
          <a href="p2js.htm"><span class="pwap2js"><b>pwa/p2js:</b></span></a>
         </td>
         <td>
          <a href="notp2js.htm">Not supported</a>.
         </td>
        </tr>
        <tr>
         <td>
          <b>Comments:</b>
         </td>
         <td>
            You could achieve the same result using <a href="get_key.htm">get_key</a>() as follows:
          <br>
          <br>
<!--eucode>
    while 1 do
        k = get_key()
        if k!=-1 then
            exit
        end if
    end while
</eucode-->
<pre>
<font color="#008080">    while</font><font color="#000000"> 1</font><font color="#008080"> do</font>
<font color="#000000">        k</font><font color="#0000FF"> =</font><font color="#7060A8"> get_key</font><font color="#0000FF">()</font>
<font color="#008080">        if</font><font color="#000000"> k</font><font color="#0000FF">!=-</font><font color="#000000">1</font><font color="#008080"> then
            exit
        end if
    end while</font>
</pre>
        <br>
            However, this "busy waiting" would tend to slow the system down,
            whereas wait_key() lets the operating system do other useful work
            while your program is waiting for the user to press a key.
          <br>
          <br>
            You could also use <a href="getc.htm">getc</a>(0), assuming file number 0 was input
            from the keyboard, except that would not pick up the special codes for function keys, arrow keys etc.
          <br>
          <br>
            Note that wait_key() is intended for console applications only and <i>usually has no place</i> in a gui application.<br>
            It can only catch keystrokes when the console (assuming you have one) has focus; <br>
            when the gui has focus then the gui absorbs any keystrokes, as you should expect. <br>
            One obvious exception is that sometimes you might use wait_key() at the very end of a run, after the gui has closed, 
            to prevent the console and any messages on it from immediately dissappearing.
         </td>
        </tr>
        <tr>
         <td>
          <b>Example:</b>
         </td>
         <td>
            demo\key.exw
         </td>
        </tr>
        <tr>
         <td>
          <b>Implementation:</b>
         </td>
         <td>
            via :%opWaitKey in builtins\VM\pfileioN.e (an autoinclude) - be warned however it is low-level complicated stuff that you do not need to know.
         </td>
        </tr>
        <tr>
         <td>
          <b>See Also:</b>
         </td>
         <td>
          <a href="get_key.htm">get_key</a>,
          <a href="getc.htm">getc</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
