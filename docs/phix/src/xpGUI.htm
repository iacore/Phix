<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">xpGUI</h1>
      <div id="mainSection">
<!--
        <i><b>*Draft*</b>: in particular expect many pages copied verbatim from the pGUI docs to contain broken/cross links.<br>
        Pay particular attention to any ? against an attribute as that indicates it has not yet been implemented/tested.</i>
        <br>
        <br>
-->
        xpGUI is the Phix Cross Platform Graphical User Interface.
        <div id="accordion">
         <ul>
          <li>
           <div class="panel">
            <div class="header">
            Easy to learn and use - the API was inspired by that of IUP but is even simpler.
            </div>
            <div class="body">
             <small>
                At the time of writing xpGUI (but not including OpenGL) has just 88 entry points and 148 global constants, <br>
                plus to be fair (but still not including OpenGL) at least 27 named handlers and 114 named attributes, a <br>
                combined total of just 377, which must make it one of the smallest and easiest ever. In comparison:<br>
                pGUI (which it is intended to replace) has ~450 entry points, 490 global constants, over 70 named handlers <br>
                and well over 500 named attributes, which makes it about 1,510 in all (w/o OpenGL).<br>
                The GTK3 dlls contain (I can back this up) <i>at least</i> 21,774 public entry points - and that&rsquo;s not including any <br>
                of an equally frankly frightening number of constants, structures, and callbacks (or OpenGL).<br>
                The mini.chm I built ages ago from MSDN has 22,451 pages and indexes 12,135 things from WinAPI, no<br>
                OpenGL, and not all of which is going to be GUI related, though fwiw my gut instincts say maybe around &frac23; is. <br>
                The JavaScript DOM might actually boil down to something more reasonable, all I can say is that my time in <br>
                the browser development tools is generally utterly dominated by paging through seemingly <i>endless</i> <br>
                screenfuls of functions and attributes and nested prototypes on each and every element node.<br>
                Of course (other search engines/sites exist) googling things and searching StackOverflow is pretty easy, but <br>
                generally speaking for the most part only <i>after</i> you already know the names of things to look for.<br>
<!--
                Not that xpGUI has anything like all the bells and whistles of those, you understand, but should [eventually] <br>
                contain most things you actually need, 
-->
                The whole point of xpGUI is not so much to be complete, but instead easy to fix and extend. It may not have all <br>
                the bells and whistles, however I reject the premise that a "proper" API <i>must</i> be tortuously complicated and<br>
                difficult and confusing to make it flexible and powerful.
             </small>
            </div>
           </div>
          </li>
          <li>
           <div class="panel">
            <div class="header">
            Minimal dependencies - requires a working GTK install on Linux, or just a Windows OS, or just a working browser.
            </div>
            <div class="body">
             <small>
                I should probably admit that all development and testing has occurred on a Windows 10 box (plus VirtualBox).<br>
                Oh, you do actually need some kind of computing device, and it currently has to have an x86/64 chip inside,<br>
                though one of the main motivations for starting it was making ARM a worthwhile target for Phix version 2.
             </small>
            </div>
           </div>
          </li>
          <li>
           <div class="panel">
            <div class="header">
            Zero build overhead - no additional compiler/toolchain needed, just edit &amp; go.
            </div>
            <div class="body">
             <small>
                Of course some bugs may be difficult to find/remedy, but if you can edit the xpGUI source code, you&rsquo;re done, <br>
                unless you need the same fix in both xpGUI.e and xpGUI.js, which is (hopefully) also a pretty trivial step.
             </small>
            </div>
           </div>
          </li>
<!--
          <li>
           <div class="panel">
            <div class="header">
            Platform dependent functionality only as steps towards platform independent code.
            </div>
            <div class="body">
             <small>
                For instance load image from disk ==&gt; local constant, to stop the browser throwing stupid CORS errors on localhost.<br>
                That said, there is no prohibition on and no expectation that you will never need minor platform-specific tweaks.
             </small>
            </div>
           </div>
          </li>
-->
<!--
          <li>
           <div class="panel">
            <div class="header">
            A picture is worth a thousand words, so they say...
            </div>
            <div class="body">
             <small>
                Since xpGUI is a <i>graphical</i> library, it makes sense to show some <i>pictures</i> of what to expect, like the one just below.
                <small>(Let me know of any others I should add.)</small><br>
                To be fair, JavaScript is pretty well served, IUP is not too bad (faring better on the newer IupFlat* controls), but
                I cannot recall seeing a single image <br>
                anywhere at all in either the official GTK or WinAPI documentation. Go figure.
             </small>
            </div>
           </div>
          </li>
-->
<!--
          <li>
           <div class="panel">
            <div class="header">
            Focus on the problem, not the solution.
            </div>
            <div class="body">
             <small>
                Perhaps there is a bogus argument that making a GUI too easy will mislead someone into thinking that programming is easier than it is,
                but ultimately a GUI interface is just a means to an end, and less time spent fretting on it means more available elsewhere.
                Should something need an awful lot of faffing about, at least you are in a position to add/get it added into the core xpGUI far easier 
                than anything else I can think of, not that everything will automatically slip in effortlessly, of course.
             </small>
            </div>
           </div>
          </li>
-->
<!-- hmm, this is known as advertising your failures...
          <li>
           <div class="panel">
            <div class="header">
            Try as hard as reasonably possible to be a shade less highly opinionated.
            </div>
            <div class="body">
             <small>
                Such as: proper scrollbars? <i>NO</i>, you want these disappearing/hard to see and difficult to use ones, or <br>
                up/down arrows? <i>NO</i>, you want these dirty great ugly plus and minus buttons, or<br>
                26 pixels tall? <i>34</i> pixels, that&rsquo;s obviously what you meant and the smallest size we do...<br>
                However some of the extremely arrogant opinions of different backends like that(/of GTK) will no doubt seep through.
             </small>
            </div>
           </div>
          </li>
-->
         </ul>
         <script>
            initAccordion();
         </script>
<!--
        Lowest common denominator
        Load image from disk...
        Example (with image)
        Status/todo
        <br>
        <br>
        The public API was initially modelled on that of IUP, carefully reworked to lie squarely between the simplest thing that could possibly ever work, 
        and the easiest possible interface to learn and use. Some may feel it falls a little short in some areas, especially those not absolutely needed, 
        such as loading images from disk - what little there is tends to be platform-specific and therefore officially unsupported, and instead relying on 
        informal routines and utilities to get such into data constants that can easily be converted into (or already are) a suitable image format. Any and
        all such non-cross-platform features should be clearly marked and terminate with a clear no-nonsense message when run on an inappropriate platform.
        <br>
        <br>
        It has deliberately been made as simple as possible, both in use and internal complexity, but without knowingly sacrificing functionality, except 
        for a few patently single-platform features. It has been designed to be <a href="glossary.htm#failfast">fail fast</a>, so that errors are reported 
        as soon as and as close as posible to their origin, as opposed to quietly ignoring them and potentially leading to a catastrophic and misleading 
        error on some completely unrelated later statement. If it can do all I want, and run all the demos on rosettacode, that should be enough (flw). 
        Not that you really need to know, it uses:<br>
        * WinAPI on Windows (ie %windir%(System32|SysWOW64)\user32.dll and friends),<br>
        * GTK on Linux (such as gtk_window_new(), from some already-installed gtk package), and<br>
        * a hand_crafted pwa/xpGUI.js (ie <a href="javascript.htm#createElement">document.createElement</a>() and similar) in a web browser.<br>
        Incidentally, the "xp" has <i>nothing</i> to do with Windows XP, which I last used well over a decade before starting xpGUI,<br>
        and in fact all development occured on Windows 10 (including various Linux distros in VirtualBox), as did most testing.<br>
        &nbsp;&nbsp;<small><i>(I might well revert to "pGUI", once the IUP-based original is fully deprecated/outshined in every way...)</i></small><br>
<X!X-- ? gUI.e ? Nah, I ditched "Gui.e" for a reason... --X>
        Implemented in demo\xpGUI\xpGUI.e for desktop/Phix and pwa\xpGUI.js for use under pwa/p2js.<br>
        It is a planned <a href="xpport.htm">replacement for pGUI</a>, specifically to alleviate Linux installation issues more than anything else, <br>
        and designed to be as simple and intuitive as possible, and hopefully nothing short of an utter joy to use.
<X!--
        but easily extendable.<br>
        Unlike pGUI, xpGUI will only contain js-compatible things, and perhaps some non-js pieces I actually need.<br>
        On Windows, uses the native windows API but can be made to use GTK, for testing purposes only.<br>
        On Linux, uses GTK and assumes that is already installed, and besides IUP does/did so too anyway.<br>
        In a browser, uses pwa/xpGUI.js which is a laboriously hand-crafted drop-in replacement.<br>
//      The Windows part is based on Arwen, pGUI.js only needs fairly superficial mods, guess I&rsquo;ll wing it for GTK<sup><small>1</small></sup>.<br>
        To avoid confusion, none/few of the Windows API, Arwen, GTK, or IUP-style globals/names are exposed or (re-)used.<br>
--X>
<X!X--  <small>(Note that ppGUI.js is currently being used for some delta debugging, with xpGUI.js being a
        modified copy of [parts of] that, and relevant diffs manually maintained as comments)<br></small>   --X>
        <br>
        <br>
        Conspicuously absent/incomplete items include <a href="gDatePick.htm">gDatePick</a> on GTK, 
        <a href="gImage.htm">gImage</a>, as well as PADDING, GAP, and EXPAND attributes for 
        <a href="xplayout.htm">Layout Management</a> (itself still half-baked), normalisation, modal popups, single instance and drag/drop handling, 
//      and a scrollable <a href="gCanvas.htm#PLANNED">gCanvas</a>. 
        The majority of attributes and callbacks are tagged with a '?' indicating their incomplete/untested status. <br>
        No work at all on <a href="opengl.htm">OpenGL/WebGL</a> has even started, either.<br>
        That said, I&rsquo;m pretty pleased with the state of the mini <a href="xpelements.htm">gallery of element screenshots</a> which gives a 
        nice though possibly slightly optimistic overview.
        <br>
        <br>
        Of course, you can ask me (nicely) to improve something, but being fully open source with no setup or packaging issues, <br>
        there should be no real barrier to do so yourself. Also, with not one or two but three examples of how to do everything, <br>
        it should be as straightforward as possible to squidge in any other back-end you can think of. Bear in mind, however, that<br>
        especially on the <a href="xplayout.htm">layout management</a> side of things, I&rsquo;ve largely gone with "do what GTK does" 
        and you may hit problems <br>should the underlying mechanisms for that be simply too different.
        <br>
        <br>
        Layout and positioning use a <a href="xplayout.htm#BoxModel">box model</a>, primarily for compatibility with JavaScript.<br>
        Elements can be resized or hidden/shown at will, however there really is very little benefit to letting a programmer transmogrify <br>
        a possibly quite complex nested hierarchy in sudden and unexpected ways, hence xpGUI simply foregoes all of that kind of thing.<br>
        That may mean, for example, you need to define a layout with both a top and side menu, but only one showing at any given time.<br>
        Uses an attribute system (as per/nicked from IUP) to further keep the API nice and simple.
        <br>
        <br>
        <a href="xptypes.htm">Types</a>: xpGUI uses a pretty minimal set of types, plus the odd helper utility<br>
        <a href="xpattr.htm">Attributes</a>: attributes control and configure almost everything in xpGUI<br>
        <a href="xpcontainers.htm">Containers</a>: parent interface elements supported in xpGUI<br>
        <a href="xpelements.htm">Elements</a>: child interface elements supported in xpGUI<br>
        <a href="xpctrl.htm">Control</a>: startup, shutdown, and everything inbetween<br>
        <a href="opengl.htm">OpenGL/WebGL</a>: for rendering 2D and 3D vector graphics<br>
        <a href="xpport.htm">porting from pGUI</a>: a brief guide<br>
-->
        <h3 style="margin-bottom: 0;">Example</h3>
         <table style="border: 0;">
          <col style="width: 5%"/>
          <tr>
           <td style="border: 0;">
<!--
          <div style="float:left;">
-->
<!--eucode>
include xpGUI.e
gdx lbl = gLabel(`This is a label`),
    box = gHbox({lbl},`MARGIN=13x13`),
    dlg = gDialog(box,`gLabel`,`SIZE=240x60`)
gShow(dlg)
gMainLoop()
</eucode-->
<pre>
<font color="#008080">include</font><font color="#000000"> xpGUI.e</font>
<font color="#7060A8">gdx</font><font color="#000000"> lbl</font><font color="#0000FF"> =</font><font color="#7060A8"> gLabel</font><font color="#0000FF">(</font><font color="#008000">`This is a label`</font><font color="#0000FF">),</font>
<font color="#000000">    box</font><font color="#0000FF"> =</font><font color="#7060A8"> gHbox</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">lbl</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#008000">`MARGIN=13x13`</font><font color="#0000FF">),</font>
<font color="#000000">    dlg</font><font color="#0000FF"> =</font><font color="#7060A8"> gDialog</font><font color="#0000FF">(</font><font color="#000000">box</font><font color="#0000FF">,</font><font color="#008000">`gLabel`</font><font color="#0000FF">,</font><font color="#008000">`SIZE=240x60`</font><font color="#0000FF">)</font>
<font color="#7060A8">gShow</font><font color="#0000FF">(</font><font color="#000000">dlg</font><font color="#0000FF">)</font>
<font color="#7060A8">gMainLoop</font><font color="#0000FF">()</font>
</pre>
<!--
          </div>
          <div style="float:right;">
            <p align="center"><img alt="gLabel" src="images/gLabel.png" width="240" height="80"/></p>
          </div>
          <div class="clear"></div>
-->
           </td>
           <td style="border: 0;">
                <p align="center"><img alt="gLabel" src="images/gLabel.png" width="240" height="80"/></p>
           </td>
          </tr>
         </table>
        For the whirlwind aerial tour, visit <a href="xpelements.htm">Elements</a> and click on each of the 21 images to see the code that made it.<br>
        You should also be able to run Phix\pdemo.exw (currently still pGUI), filter on xpGUI.e, and run each of the examples that shows.<br>
        You may also want to run demo\Edita\xpEditer.exw to see where that&rsquo;s at.

        <h3>Roadmap / todo</h3>

<!--        The layout manager - needs to be done in baby steps would be the understatement of the year.<br>-->
        The all-important layout manager has finally gurgled into life, but probably still needs quite a bit of finessing, esp margins, gaps, etc.<br>
        All element sizes must be known/stored pixel-perfect, even/esp when they differ between the different backends (bugs can be hard to spot).<br>
        Last few elements: <a href="gImage.htm">gImage</a> variants, <a href="gDatePick.htm">gDatePick</a> under GTK (needs layout manager first)...<br>
        All attributes with a ? next to them still need actually implementing or at least thorough testing.<br>
        Anything with ?? next to it means "" and/or that documentation entry may yet need completely rewriting.<br>
        I still regularly break things, but at least that is significantly improving my delta debugging skills.<br>
        demo\xpGUI\scroller.exw uses 100% fake scrollbars, similar may be needed elsewhere to overcome (eg) GTK obstinacy.<br>
        <!--so you might want to try including xpGUI[2|3].e in some of the examples.<br>-->
<!-- DONE, [!!!] see SCROLLSIZE and VIEWPORT.
        Scrollable canvas: Consider the following four ways to create (/specify sizes on) a trivial dialog with just a canvas:
        <ul>
        <li>gDialog(gCanvas()) - silly small size of no practical use, and no-one should care.</li>
        <li>gDialog(gCanvas(),"SIZE=100x100") - canvas automatically fills/shrinks to fit.</li>
        <li>gDialog(gCanvas("SIZE=100x100,EXPAND=NO")) - fixed size canvas, dialog initially large enough (within reason).</li>
        <li>gDialog(gCanvas("SIZE=400x400,EXPAND=NO"),"SIZE=100x100") - fixed size canvas, initially with scrollbars.</li>
        </ul>   
        Similar behaviour should occur when the canvas is a <a href="xplayout.htm#SoleChild">sole child</a>, especially of gTabs 
        and gFrame, or its siblings are fixed size.<br>
//      The REDRAW handler needs to know/honour when top left is {0,0} or something else (or maybe paint all would be ok).<br> [VIEWPORT!!]
        The file demo\xpGUI\scrolla.exw contains a win32-only version of the sort of thing I&rsquo;m after [similar for GTK/JS rqd].<br>
-->
        Add <a href="gCanvas.htm#SCROLLSIZE">SCROLLSIZE</a> and <a href="gCanvas.htm#VIEWPORT">VIEWPORT</a> handling to <del><a href="gList.htm">gList</a>
        and</del> <a href="gTable.htm">gTable</a> (fully automatic), and possibly <a href="gGraph.htm">gGraph</a> (when explicitly set).<br>
        Work on integrating with OpenGL not started at all, but hopefully that should prove reasonably superficial.<br>
        Speaking of integrating, pdemo should probably also allow open in p2js, or via that in browser <small>(as well as desktop/Phix)</small>.<br>
        xpGUI.js is always likely to lag behind xpGUI.e: in my experience desktop-&gt;browser is <i>far</i> easier than browser-first.<br>
<!--        Some brave soul might fancy chancing their arm at using <a href="hh_xlib.htm">xlib</a> as a backend, but not me!<br>-->
        Ultimately, this paves the way for Phix on ARM, since with no viable GUI that would be pretty pointless.

        <h3>Immediate plans</h3>
        <ol>
<!--        <li>gSplit: do roughly what I did for scroller.exw, ie implement locally then transfer the code (eg backup.0002\scroller.7724(..8135).exw)</li>-->
<!--        <li>getting EXPAND/SPACE to do anything at all in demo/xpGUI/gH(|V)box might be nice.</li> FIXED!! -->
        <li><a href="gDatePick.htm">gDatePick</a>: write a (simple) hll version for GTK, initially in demo\xpGUI\gDatePick.exw.</li>
        <li><a href="gList.htm">gList</a>: selected line with background colour, then mouse/keyboard handling (first steps)</li>
        <li><a href="gTable.htm">gTable</a>: "", and probably needs to be made more like the gList API</li>
        <li><a href="gTabs.htm">gTabs</a>: insert/delete/swap tabs (probably a complete rewrite/redesign)</li>
        <li><a href="gTreeview.htm">gTreeview</a>: allow "no icons", and/or app-provided ones</li>
        <li>xpEditer: needs above gList/gTabs fixing, along with some further fixes to the layout manager</li>
<!--    <li>xpLaura: ha ha</li> -->
<!--    <li>pHelp.. </li> -->
        <li>log api calls/unit testing - g_proc/g_func?</li>
        <li>rewriting <a href="gCanvas.htm#gCanvasArc">gCanvasArc</a>() with similar innards to <a href="gCanvas.htm#gCanvasPolygon">gCanvasPolygon</a>()
            for WinAPI is a tedious but necessary chore.</li>
        </ol>
<!--
//      <sup><small>1</small></sup> Help welcome, and/or better (non-heredoc) GTK documentation.
//      <small><sup><small>1<small></sup> Forgive me for saying this, but the GTK documentation is by far the worst 
        I have ever seen in my entire life.<br>
        The GTK documentation has zero meaningful structure; every routine is independently defined with almost no 
        cross-references whatsoever, and all in segregated implementation "units" without any explanation.<br>
        Every page has a tempting search box, that bluntly rejects anything in the wrong "unit". <br>
        Of course there are without doubt many sound reasons for breaking something like that down into multiple
        implementation units, but there is no excuse for ramming that irrelevant technical detail into the face of
        every single person that uses the finished product or tries to navigate around the documentation, apart 
        from the almost inevitable bipolar "but di-docgen is just <i>so</i> cool, and <i>entirely</i> to blame".<br>
        I am certainly thankful that google exists.. and in fact I have resorted to Dependency Walker just to get 
        a list of the available functions, and it is quite something that running that 12 times is way easier than 
        navigating the official help documents!! <br>
        Either you know the name of the function needed, or if you don&rsquo;t, why <i>should</i> the docs bother to help??<br>
        Of course I am aware of the difficulties and similar deficiencies in my own docs, but absolutely refusing to even
        acknowledge there is a problem frankly just astonishes me.</small>
-->
        <h3>Licence</h3>
        As stated in the <a href="licence.htm">introduction</a>. You may freely use xpGUI in an otherwise closed source commercial 
        proprietary application, but any modifications, bugfixes, and enhancements to xpGUI itself must be made public - besides
        you probably would not want to have to manually re-apply any such changes to every new release.
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
