<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Control</h1>
      <div id="mainSection">
        <h3>Main Loop</h3>
        xpGUI is an event-oriented interface system, that uses an event loop "waiting" for the user to interact with the application. <br>
        For this loop to occur, the application must call the <a href="gMainLoop.htm">gMainLoop</a>() function, which is actually a
        null-op under pwa/p2js, since that relies on the browser&rsquo;s event loop.<br>
        One point perhaps worth mentioning is that event loop goes idle properly, ie it is not a "busy loop" that needlessly chews up 100% CPU time.

<!--
        generally used right before <a href="IupClose.htm">IupClose</a>().
-->
        <br>
        <br>
        When the application is closed by returning <a href="gSetHandler.htm#XPG_CLOSE">XPG_CLOSE</a> in a handler, 
        calling <a href="IupExitLoop.htm">IupExitLoop</a>() or by hiding the last visible dialog, the function 
        <a href="gMainLoop.htm">gMainLoop</a>() will return. Note that any CLOSE_CB is <i>not</i> invoked.
        <br>
        <br>
        The <a href="IupLoopStep.htm">IupLoopStep</a>() and the <a href="IupFlush.htm">IupFlush</a>() functions force the processing of 
        incoming events while inside an application callback.
       <br>
       <br>
        The following routines are used to control startup, shudown, and everything inbetween:
        <br>
        <br>
        <table>
         <col style="width: 5%"/>
<!--
         <tr>
          <td>
           <a href="gUseGTK.htm">gUseGTK</a>
          </td>
          <td>Test GTK on Windows
          </td>
         </tr>
-->
<!--
         <tr>
          <td>
           <a href="IupClose.htm">IupClose</a>
          </td>
          <td>Shutdown IUP
          </td>
         </tr>
-->
         <tr>
          <td>
           <a href="gShow.htm">gShow</a>
          </td>
          <td>Displays a dialog [in a given position] on the screen.
          </td>
         </tr>
<!--
         <tr>
          <td>
           <a href="IupSetFocus.htm">IupSetFocus</a>
          </td>
          <td>Sets the interface element that will receive the keyboard focus.
          </td>
         </tr>
         <tr>
          <td>
           <a href="IupHide.htm">IupHide</a>
          </td>
          <td>Hides an interface element.
          </td>
         </tr>
         <tr>
          <td>
           <a href="IupPopup.htm">IupPopup</a>
          </td>
          <td>Show a dialog or menu, equivalent of a modal dialog is some toolkits.
          </td>
         </tr>
         <tr>
          <td>
           <a href="IupMap.htm">IupMap</a>
          </td>
          <td>Creates (maps) the native interface objects corresponding to the given IUP interface elements. 
          </td>
         </tr>
-->
         <tr>
          <td>
           <a href="gMainLoop.htm">gMainLoop</a>
          </td>
          <td>Start the event processing loop/user interaction 
          </td>
         </tr>
<!--
         <tr>
          <td>
           <a href="IupClipboard.htm">IupClipboard</a>
          </td>
          <td>Creates an element that allows access to the clipboard.
          </td>
         </tr>
         <tr>
          <td>
           <a href="IupTimer.htm">IupTimer</a>
          </td>
          <td>Creates a timer
          </td>
         </tr>
         <tr>
          <td>
           <a href="IupRecordInput.htm">IupRecordInput</a>
          </td>
          <td>Records all mouse and keyboard input in a file for later reproduction.
          </td>
         </tr>
         <tr>
          <td>
           <a href="IupPlayInput.htm">IupPlayInput</a>
          </td>
          <td>Reproduces all mouse and keyboard input from a given file.
          </td>
         </tr>
         <tr>
          <td>
           <a href="IupConfig.htm">IupConfig</a>
          </td>
          <td>Initialise configuration file handler.
          </td>
         </tr>
         <tr>
          <td>
           <a href="IupHelp.htm">IupHelp</a>
          </td>
          <td>Opens the given URL.
          </td>
         </tr>
-->
        </table>
       <br>
       <br>
<!-- erm... (just leave this in pGUI...)
        Note that <span class="illegal">IupThread</span>() is <b><i>not</i></b> supported (since it would not have a proper call stack). <br>
        THREAD_CB should be translated to <a href="create_thread.htm">create_thread</a>()or <a href="task_create.htm">task_create</a>().<br>
        START should be translated to <a href="resume_thread.htm">resume_thread</a>() or <a href="task_schedule.htm">task_schedule</a>().<br>
        EXIT should be translated to <a href="exit_thread.htm">exit_thread</a>() a simple <a href="return.htm">return</a>.<br>
        ISCURRENT should be translated to <a href="get_thread_id.htm">get_thread_id</a>() or <a href="task_self.htm">task_self</a>().<br>
        YIELD should be translated to <a href="suspend_thread.htm">suspend_thread</a>() or <a href="task_yield.htm">task_yield</a>().<br>
        JOIN should be translated to <a href="wait_thread.htm">wait_thread</a>() (or "", which may be completely unnecessary).<br>
        LOCK should be translated to <a href="enter_cs.htm">enter_cs</a>() and/or <a href="leave_cs.htm">leave_cs</a>() (unnecessary under multitasking).
-->
        <br>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
