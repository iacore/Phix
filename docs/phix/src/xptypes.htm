<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Types</h1>
      <div id="mainSection">
        xpGUI uses a pretty minimal set of types, plus the odd helper utility.
        <br>
        <br>
        These types are deliberately designed to crash on error, and maximise compile-time error messages. 
        Should a typecheck error occur within xpGUI.e, the prime suspect should be the calling code, to which
        end xpGUI.e is normally shipped containing a "without debug" directive.
        <!--, however some routines 
        may be a little over-zealous - for instance the first version of <a href="IupSetAttribute.htm">IupSetAttribute</a>
        required an Ihandle, but now it accepts an Ihandln so that global attributes can also be set (with the implication 
        that, as and when appropriate, verifying something is a non-null Ihandle is now an application-level concern).-->
        <br>
        <br>
        <table>
         <col style="width: 5%"/>
         <tr>
          <td>
           <a href="gdx.htm">
            <b>gdx</b>
           </a>
          </td>
          <td>
            An interface element, such as a button, image, timer, container, or whole dialog, or a sequence of them.<br>
<!--
             - may not be NULL.<br>
            An gHandln is an gHandle or NULL - use of which suggests test/error handling should be present.<br>
            Also, gHandles and gHandlns can be used to hold the same <i>or</i> sequences of them.
            Also, the gHandles type can be used to hold the same <i>or</i> a sequence of them.
-->
          </td>
         </tr>
<!--
//       <tr>
//        <td>
//         <a href="gCallback.htm">
//          <b>gCallback</b>
//         </a>
//        </td>
//        <td>Helper utility to declare a callback, and enable (later) validation of the same.
//        </td>
//       </tr>
-->
<!--
         <tr>
          <td>
           <a href="cdCanvas.htm">
            <b>cdCanvas</b>
           </a>
          </td>
          <td>a drawing canvas, on the screen/clipboard/printer/file/etc. May not be NULL.
          </td>
         </tr>
-->
         <tr>
          <td>
           <a href="string.htm">
            <b>nullable_string</b>
           </a>
          </td>
          <td>A string or NULL.
<!-- - use (of this instead of <a href="string.htm">string</a>) suggests test/error handling should be present.-->
          </td>
         </tr>
         <tr>
          <td>
           <a href="rtn.htm">
            <b>rtn</b>
           </a>
          </td>
          <td>
            An event handler, such as the click routine for a button, or NULL.<br>
<!--
             - may not be NULL.<br>
            An gHandln is an gHandle or NULL - use of which suggests test/error handling should be present.<br>
            Also, gHandles and gHandlns can be used to hold the same <i>or</i> sequences of them.
            Also, the gHandles type can be used to hold the same <i>or</i> a sequence of them.
-->
          </td>
         </tr>
<!--
         <tr>
          <td>
           <a href="IupRawStringPtr.htm">
            <b>IupRawStringPtr</b>
           </a>
          </td>
          <td>get raw string pointer.
          </td>
         </tr>
-->
         <tr>
          <td>
           <a href="gUseGTK.htm">
            <b>gUseGTK()</b>
           </a>
          </td>
          <td>An officially unsupported Windows-only testing aid for GTK.<br>
          <a name=tech></a>
          </td>
         </tr>
        <tr id="Technicalia" style="display:none;">
         <td>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            Note that xpGUI uses first class routines for handlers<sup><small>1</small></sup> rather than callbacks<sup><small>2,3</small></sup>.<br>
            Likewise there is in fact a private xpg_raw_string_ptr() which is equilavent to <a href="IupRawStringPtr.htm">IupRawStringPtr</a>() 
            but it has not been made global since I doubt it will ever actually be needed, that is outside of xpGUI.e itself.
            <br>
            <br>
            <small><sup>1</sup> as in implicit forms of <a href="routine_id.htm">routine_id</a>(), <a href="call_func.htm">call_func</a>(), 
            and <a href="call_proc.htm">call_proc</a>() that became part of the language specification in 0.8.3 and look like normal code, ie
            <code>xxx</code> is the same as <code>routine_id("xxx")</code>, and <code>xxx()</code> the same as <code>call_proc()</code>, with 
            no further need for (say) <code>call_back({'+',routine_id("xxx")})</code>, as next.<br>
            <sup>2</sup> as would be needed when invoked from within a dll, with their atom-only-parameters and always-a-function restrictions,
            which of course no longer apply to xpGUI <del>callbacks</del> handlers. To be more accurate, xpGUI.e needs and uses them itself for 
            dealing with GTK(.so) and WinAPI(.dll), but since all that is abstracted away, user code shouldn&rsquo;t.<br>
            <sup>3</sup> hence there are no [longer any] equivalents for any of 
            <a href="Icallback.htm">Icallback(), cbfunc(), iup_name_from_cb(), or iup_cb_from_name()</a>.</small>
         </td>
        </tr>
       </table>
       <img id="Timg" src="images/sprites/tech.open.png" title="Expand/Shrink" alt="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
        <br>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
