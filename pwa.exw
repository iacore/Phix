--
-- pwa.exw
--
--  Pete's/Phix/Progresive Web Application.
--
--  Develop on desktop, publish to the web.
--
--  The basic idea is to support a subset of Phix and a subset of IUP, and transpile to HTML/Javascript.
--  Use "if platform()=WEB / else" or similar to control any fiddly/incompatible bits.
--  The pwa.exw application itself can read local files etc, however the web version cannot ("").
--  Outwardly pwa.exw is a gui front-end to the transpiler/interpreter, internally it performs a whole 
--  bunch of checks to keep your desktop development process on-track, making sure you do not start to
--  use things that later cannot be transpiled (such as #ilASM{}, outside of a platform() test anyway).
--
-- We need: fast source -> AST, integer-only, using a ttree directly.
-- It does not need to load numbers, a start/end/ttidx would suffice (maybe).
--  - I should find permitted js number formats, though
-- It should be possible to manipulate the AST, eg to perform CSE (common subexpression elimination).
--XXXX It does not help one iota to make javascript arrays that are zero-based... so stick with 1-based. -- UTTER BOLLOCKS: str[0] is the first character! (erm, no, it's a string!!!)
-- Note that Phix's 1-based [idx] is transpiler to js 0-based [idx-1] (where "idx" is any expression).
-- var a = 'Hi there!';  // using single quotes
--  document.write(typeof(a.charAt(1)) + "<br>");       -- string
--  document.write(typeof(a.charCodeAt(1)) + "<br>");   -- number
--  document.write(a.charAt(1) + "<br>");               -- i
--  document.write(a.charCodeAt(1) + "<br>");           -- 105
-- hmm: https://rosettacode.org/wiki/Compiler/lexical_analyzer
--      https://rosettacode.org/wiki/GUI_component_interaction
--      https://rosettacode.org/wiki/GUI_enabling/disabling_of_controls
--      https://rosettacode.org/wiki/GUI/Maximum_window_dimensions
--      https://rosettacode.org/wiki/Hello_world/Graphical
--      https://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm
--      https://rosettacode.org/wiki/Parsing/RPN_to_infix_conversion
--      https://rosettacode.org/wiki/Parsing/Shunting-yard_algorithm
--      https://rosettacode.org/wiki/Compiler/lexical_analyzer#JavaScript ( file:E:\downloads\misc\js\lexer.js )
--      https://github.com/alexei/sprintf.js ( file:E:\downloads\misc\js\sprintf.js )
--
--  https://rosettacode.org/wiki/GUI_component_interaction#Phix (no js entry)
--/*
include pGUI.e
 
Ihandle txt, increment, random, hbx, vbx, dlg
 
function action_cb(Ihandle /*ih*/, integer ch)
    if not find(ch,"0123456789-") then return IUP_IGNORE end if
    return IUP_CONTINUE
end function
 
function increment_cb(Ihandle /*ih*/)
    integer v = IupGetInt(txt,"VALUE")+1
    IupSetInt(txt,"VALUE",v)
    return IUP_CONTINUE
end function
 
function random_cb(Ihandle /*ih*/)
    if IupAlarm("Confirm","Replace wth random value?","Yes","No")=1 then
        IupSetInt(txt,"VALUE",rand(1000))
    end if
    return IUP_CONTINUE
end function
 
IupOpen()
txt = IupText(Icallback("action_cb"),"EXPAND=YES")
increment = IupButton("increment",Icallback("increment_cb"))
random = IupButton("random",Icallback("random_cb"))
hbx = IupHbox({increment,random},"MARGIN=0x10, GAP=20")
vbx = IupVbox({txt,hbx},"MARGIN=40x20")
dlg = IupDialog(vbx)
IupCloseOnEscape(dlg)
IupShow(dlg)
IupMainLoop()
IupClose()
--*/
--https://rosettacode.org/wiki/GUI_enabling/disabling_of_controls#Phix (no js entry)
-- (not brill...)
/*
include pGUI.e
 
Ihandle txt, inc, dec, hbx, vbx, dlg
 
function activate(integer v)
    IupSetInt(txt,"VALUE",v)
    IupSetAttribute(inc,"ACTIVE",iff(v<10,"YES":"NO"))
    IupSetAttribute(dec,"ACTIVE",iff(v>0,"YES":"NO"))
    IupSetAttribute(txt,"ACTIVE",iff(v=0,"YES":"NO"))
    return IUP_CONTINUE
end function
 
function valuechanged_cb(Ihandle /*ih*/)
    return activate(IupGetInt(txt,"VALUE"))
end function
 
function inc_cb(Ihandle /*ih*/)
    return activate(IupGetInt(txt,"VALUE")+1)
end function
 
function dec_cb(Ihandle /*ih*/)
    return activate(IupGetInt(txt,"VALUE")-1)
end function
 
function esc_close(Ihandle /*ih*/, atom c)
    return iff(c=K_ESC?IUP_CLOSE:IUP_CONTINUE)
end function
 
IupOpen()
txt = IupText("VALUECHANGED_CB",Icallback("valuechanged_cb"),"FILTER=NUMBER, EXPAND=YES")
inc = IupButton("increment",Icallback("inc_cb"))
dec = IupButton("decrement",Icallback("dec_cb"),"ACTIVE=NO")
hbx = IupHbox({inc,dec},"MARGIN=0x10, GAP=20")
vbx = IupVbox({txt,hbx},"MARGIN=40x20")
dlg = IupDialog(vbx)
IupSetCallback(dlg, "K_ANY", Icallback("esc_close"))
IupShow(dlg)
IupMainLoop()
*/
--https://rosettacode.org/wiki/Hello_world/Graphical#Phix
--js:
--/*
 alert("Goodbye, World!"); // no title, better off using our own??
--*/
/*
include pGUI.e
IupOpen()
IupMessage("Bye","Goodbye, World!")
IupClose()
*/
--https://rosettacode.org/wiki/Simple_windowed_application#Phix (no js entry)
--/*
include pGUI.e
 
Ihandle dlg, lbl, btn, vbox
integer clicks = 0
 
function click_cb(Ihandle /*btn*/)
    clicks += 1
    IupSetStrAttribute(lbl,"TITLE","clicked %d times",{clicks})
    return IUP_DEFAULT;
end function
 
IupOpen()
lbl = IupLabel("There have been no clicks yet")
btn = IupButton("Click me", Icallback("click_cb"))
vbox = IupVbox({lbl, IupHbox({IupFill(),btn,IupFill()})})
dlg = IupDialog(vbox,"MARGIN=10x10, GAP=10, RASTERSIZE=400x0")
IupSetAttribute(dlg, "TITLE", "Simple windowed application")
IupCloseOnEscape(dlg)
IupShow(dlg)
IupMainLoop()
IupClose()
--*/
--https://rosettacode.org/wiki/User_input/Graphical#Phix
--js:
--/*
var str = prompt("Enter a string");
var value = 0;
while (value != 75000) {
    value = parseInt( prompt("Enter the number 75000") );
}
--*/
--/*
-- demo\rosetta\User_Input_Graphical.exw
include pGUI.e
 
Ihandle dlg, label1, input1, label2, input2, OK, Cancel
 
function ok_cb(Ihandle self)
    if self=OK then
        string in1 = IupGetAttribute(input1,"VALUE")
        integer in2 = IupGetInt(input2,"VALUE")
        string msg = sprintf("\"%s\" and %d",{in1,in2})
        IupMessage("You entered",msg)
        -- (return IUP_CONTINUE if unhappy with input)
    end if
    return IUP_CLOSE
end function
 
IupOpen()
label1 = IupLabel("Please enter a string")
input1 = IupText("VALUE=\"a string\", EXPAND=HORIZONTAL")
label2 = IupLabel("and the number 75000")
input2 = IupText("VALUE=75000, EXPAND=HORIZONTAL")
IupSetAttribute(input2,"MASK",IUP_MASK_INT)
OK     = IupButton("OK", "ACTION", Icallback("ok_cb"))
Cancel = IupButton("Cancel", "ACTION", Icallback("ok_cb"))
dlg = IupDialog(IupVbox({IupHbox({label1,input1},"ALIGNMENT=ACENTER, PADDING=5"),
                         IupHbox({label2,input2},"ALIGNMENT=ACENTER, PADDING=5"),
                         IupHbox({IupFill(),OK,Cancel,IupFill()},"PADDING=15")},
                        "GAP=5,MARGIN=5x5"))
IupSetAttribute(dlg,"TITLE","User Input/Graphical")
IupCloseOnEscape(dlg)
IupDestroy(IupNormalizer({OK,Cancel},"NORMALIZE=BOTH"))
IupShow(dlg)
IupMainLoop()
IupClose()
--*/
--https://rosettacode.org/wiki/Window_creation#Phix (no usable js entry)
-- demo\rosetta\Window_creation.exw
--/*
include pGUI.e
 
IupOpen()
Ihandle dlg = IupDialog(IupVbox({IupLabel("hello")},"MARGIN=200x200"))
IupSetAttribute(dlg,"TITLE","Hello")
IupCloseOnEscape(dlg)
IupShow(dlg)
IupMainLoop()
IupClose()
--*/
--https://rosettacode.org/wiki/Window_management#Phix (no js entry)
--hmm? (no need to sweat this one...)
--/*
-- demo\rosetta\Window_management.exw
include pGUI.e
 
Ihandle dlg
 
function doFull(Ihandle /*ih*/)
    IupSetAttribute(dlg,"FULLSCREEN","YES")
    return IUP_DEFAULT
end function
 
function doMax(Ihandle /*ih*/)
    IupSetAttribute(dlg,"PLACEMENT","MAXIMIZED")
    -- this is a work-around to get the dialog minimised (on win platform)
    IupSetAttribute(dlg,"VISIBLE","YES")
    return IUP_DEFAULT
end function
 
function doMin(Ihandle /*ih*/)
    IupSetAttribute(dlg,"PLACEMENT","MINIMIZED")
    -- this is a work-around to get the dialog minimised (on win platform)
    IupSetAttribute(dlg,"VISIBLE","YES")
    return IUP_DEFAULT
end function
 
function doRestore(Ihandle /*ih*/)
    IupSetAttribute(dlg,"OPACITY","255")
    IupSetAttribute(dlg,"FULLSCREEN","NO")
    IupSetAttribute(dlg,"PLACEMENT","NORMAL")
    IupSetAttribute(dlg,"VISIBLE","YES")
    return IUP_DEFAULT
end function
 
function doDim(Ihandle /*ih*/)
    IupSetAttribute(dlg,"OPACITY","60")
    return IUP_DEFAULT
end function
 
function doShow(Ihandle /*ih*/)
    IupSetAttribute(dlg,"OPACITY","255")
    return IUP_DEFAULT
end function
 
function doMove(Ihandle /*ih*/)
    integer {x,y} = IupGetIntInt(dlg,"SCREENPOSITION")
    integer shift = iff(IupGetInt(NULL,"SHIFTKEY")?-10,+10)
    IupShowXY(dlg,x+shift,y+shift)
    return IUP_DEFAULT
end function
 
procedure main()
    IupOpen()
 
    Ihandle hbox = IupHbox({IupButton("restore",    Icallback("doRestore")),
                            IupButton("full screen",Icallback("doFull")),
                            IupButton("maximize",   Icallback("doMax")),
                            IupButton("minimize",   Icallback("doMin")),
                            IupButton("dim",        Icallback("doDim")),
                            IupButton("show",       Icallback("doShow")),
                            IupButton("move",       Icallback("doMove"))})
    IupSetAttribute(hbox,"MARGIN", "10x10")
    IupSetAttribute(hbox,"PADDING", "5x5")
 
    dlg = IupDialog(hbox)
    IupSetAttribute(dlg,"OPACITY","255")
    IupCloseOnEscape(dlg)
 
    IupShowXY(dlg,IUP_CENTER,IUP_CENTER)
    IupMainLoop()
    IupClose()
end procedure
main()
--*/
--C:\Program Files (x86)\Phix\demo\pGUI\list[2/3/view].exw
--C:\Program Files (x86)\Phix\demo\pGUI\matrix[3].exw
--C:\Program Files (x86)\Phix\demo\pGUI\PhixLogo.exw
--C:\Program Files (x86)\Phix\demo\pGUI\sample.exw  [one bit at a time!]
--C:\Program Files (x86)\Phix\demo\pGUI\tree.exw    [or ""]
-- plus, the 7guis... (Counter, Converter, Booker, Timer, CRUD, CircleDraw, Cells, in that order)
--That's all folks!

-- things you'll miss:
--  no user-defined types
--  hex numbers must be written 0xNNN, rather than #NNN (erm, that's easily fixable! [do -#NN too])
--  octal numbers (in js, 010 is decimal 8, ugh)
--  binary/octal/general numbers bases in 0bNN, 0oNN, 0tNN, o(2..36)NN formats.
--  single quoted characters ('a' is a length-1 string in js, same as "a")
--  escapes: \', \", \r, \n, \t, \b, \\, but **NOT** \0, \e, \E, \#, \x, \u, \U.


