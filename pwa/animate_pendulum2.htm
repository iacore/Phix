<!DOCTYPE html>
<html lang="en" >
 <head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>pwa</title>
  <link type="text/css" rel="stylesheet" media="screen" href="pGUI.css" />
 </head>
 <body style="font-family: monospace;">
  <script src="p2js.js"></script>
  <script src="builtins/pmaths.js"></script>
  <script src="builtins/ptagset.js"></script>
 <script src="pGUI.js"></script>
  <script>
"use strict";
// auto-generated by pwa/p2js - part of Phix, see http://phix.x10.mx
//
// demo\rosetta\animate_pendulum2.exw
// ==================================
//
// Author Pete Lomax, March 2017
//
// Port of animate_pendulum.exw from arwen to pGUI
//
// With help from lesterb, updates now in timer_cb not redraw_cb,
// variables better named, and velocity problem sorted, July 2018.
//
const full = false;     // set true for full swing to near-vertical.
                        // false performs swing to horizontal only.
                        // (adjusts the starting angle, pivot point,
                        //  and canvas size, only.)
let /*Ihandle*/ dlg, canvas, timer;
let /*cdCanvas*/ cdcanvas;
const g = 50;
let /*atom*/ angle = ((full) ? PI-.01 : PI/2),  // (near_vertical | horiz)
             velocity = 0;
let /*integer*/ w = 0, h = 0, len = 0;
function redraw_cb(/*Ihandle*/ /*ih*/anon1, /*integer*/ /*posx*/anon2, /*posy*/anon3) {
    [,w,h] = IupGetIntInt(canvas,"DRAWSIZE");
    cdCanvasActivate(cdcanvas);
    cdCanvasClear(cdcanvas);
    // new suspension point:
    let /*integer*/ sX = floor(w/2);
    let /*integer*/ sY = floor(h/((full) ? 2 : 16)); // (mid | top)
    // repaint:
    let /*integer*/ eX = floor(len*sin(angle)+sX);
    let /*integer*/ eY = floor(len*cos(angle)+sY);
    cdCanvasSetForeground(cdcanvas,CD_CYAN);
    cdCanvasLine(cdcanvas,sX,h-sY,eX,h-eY);
    cdCanvasSetForeground(cdcanvas,CD_DARK_GREEN);
    cdCanvasSector(cdcanvas,sX,h-sY,5,5,0,360);
    cdCanvasSetForeground(cdcanvas,CD_BLUE);
    cdCanvasSector(cdcanvas,eX,h-eY,35,35,0,360);
    cdCanvasFlush(cdcanvas);
    return IUP_DEFAULT;
}
function timer_cb(/*Ihandle*/ /*ih*/anon1) {
    if (w!==0) {
        let /*integer*/ newlen = floor(w/2)-30;
        if (newlen!==len) {
            len = newlen;
            let /*atom*/ tmp = ((2*g)*len)*cos(angle);
            velocity = ((tmp<0) ? 0 : sqrt(tmp)*sign(velocity));
        }
        let /*atom*/ dt = .2/w;
        let /*atom*/ acceleration = (-len*sin(angle))*g;
        velocity += dt*acceleration;
        angle += dt*velocity;
        IupUpdate(canvas);
    }
    return IUP_IGNORE;
}
function map_cb(/*Ihandle*/ ih) {
    let /*atom*/ res = IupGetDouble(NULL,"SCREENDPI")/25.4;
    IupGLMakeCurrent(canvas);
    if (equal(platform(),JS)) {
        cdcanvas = cdCreateCanvas(CD_IUP,canvas);
    } else {
        cdcanvas = cdCreateCanvas(CD_GL,"10x10 %g",["sequence",res]);
    }
    cdCanvasSetBackground(cdcanvas,CD_PARCHMENT);
    return IUP_DEFAULT;
}
function canvas_resize_cb(/*Ihandle*/ /*canvas*/anon1) {
    let /*integer*/ [,canvas_width,canvas_height] = IupGetIntInt(canvas,"DRAWSIZE");
    let /*atom*/ res = IupGetDouble(NULL,"SCREENDPI")/25.4;
    cdCanvasSetAttribute(cdcanvas,"SIZE","%dx%d %g",["sequence",canvas_width,canvas_height,res]);
    return IUP_DEFAULT;
}
function main() {
    IupOpen();
    canvas = IupGLCanvas();
    IupSetAttribute(canvas,"RASTERSIZE",((full) ? "640x640" : "640x340")); // (fit 360|180)
    IupSetCallback(canvas,"MAP_CB",Icallback(map_cb));
    IupSetCallback(canvas,"ACTION",Icallback(redraw_cb));
    IupSetCallback(canvas,"RESIZE_CB",Icallback(canvas_resize_cb));
    timer = IupTimer(Icallback(timer_cb),20);
    dlg = IupDialog(canvas);
    IupSetAttribute(dlg,"TITLE","Animated Pendulum");
    IupShow(dlg);
    IupSetAttribute(canvas,"RASTERSIZE",NULL);
    if (!equal(platform(),JS)) {
        IupMainLoop();
        IupClose();
    }
}
main();
  </script>
 </body>
</html>
