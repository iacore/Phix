"use strict";
// auto-generated by pwa/p2js - part of Phix, see http://phix.x10.mx
//
// premoveall.e
//
//  Phix implementation of remove_all()
//
// This is an auto-include file; there is no need to manually include
//  it, unless you want a namespace.
//

/*global*/ function remove_all(/*object*/ needle, /*sequence*/ haystack) {
    let /*integer*/ ts, te, ss, se;
    // See if we have to do anything at all.
    se = find(needle,haystack);
    if (se===0) {
        return haystack;
    }
    // Now we know there is at least one occurrence and because
    // it's the first one, we don't have to move anything yet.
    // So pretend we have and set up the 'end' variables
    // as if we had moved stuff.
    se -= 1;
    te = se;
    while (1) {
        // Calc where the next target start is (1 after the previous end)
        ts = te+1;
        // Calc where to start the next search (2 after the previous end)
        ss = se+2;
        // See if we got another one.
        se = find(needle,haystack,ss);
        // We have another one, so calculate the source end(1 before the needle)
        se = se-1;
        // Calc the target end (start + length of what we are moving)
        te = (ts+se)-ss;
        if (se<=0) { break; }
        // Shift elements down the sequence.
        haystack = $repss(haystack,ts,te,$subss(haystack,ss,se));
    }
    // Check to see if there is anything after the final needle and move it.
    if (compare(ss,length(haystack))<=0) {
        te = (ts+length(haystack))-ss;
        haystack = $repss(haystack,ts,te,$subss(haystack,ss,-1));
    } else {
        // Need to backtrack one needle.
        te = ts-1;
    }
    // Return only the stuff we moved.
    return $subss(haystack,1,te);
}
