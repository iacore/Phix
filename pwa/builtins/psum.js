// auto-generated by pwa/p2js, see http://phix.x10.mx
"use strict";
//
// psum.e
//
//  Phix implementation of sum() and product()
//
//  This is an auto-include file; there is no need to manually include
//  it, unless you want a namespace.
//
function $zl(/*object*/ zlr) {
    let /*atom*/ res;
    if (atom(zlr)) {
        res = zlr;
    } else if (!equal(length(zlr),1)) {
        crash("zlr not length 1");
    } else if (!atom($subse(zlr,1))) {
        crash("zlr[1] not atom");
    } else {
        res = $subse(zlr,1);
    }
    return res;
}

/*global*/ function sum(/*object*/ a, zlr=0) {
    let /*atom*/ res;
    if (atom(a)) {
        res = a;
    } else {
        let /*integer*/ l = length(a);
        if (l===0) {
            res = $zl(zlr);
        } else {
            res = 0;
            for (let i=1, i$lim=l; i<=i$lim; i+=1) {
                res += sum($subse(a,i),((atom(zlr)) ? 0 : zlr));
            }
        }
    }
    return res;
}

/*global*/ function product(/*object*/ a, zlr=1) {
    let /*atom*/ res;
    if (atom(a)) {
        res = a;
    } else {
        let /*integer*/ l = length(a);
        if (l===0) {
            res = $zl(zlr);
        } else {
            res = 1;
            for (let i=1, i$lim=l; i<=i$lim; i+=1) {
                res *= product($subse(a,i),((atom(zlr)) ? 1 : zlr));
            }
        }
    }
    return res;
}

/*global*/ function $average(/*object*/ a, zlr=0) {
    let /*atom*/ res;
    if (atom(a)) {
        res = a;
    } else {
        let /*integer*/ l = length(a);
        if (l===0) {
            res = $zl(zlr);
        } else {
//          res = sum(s)/l
            res = 0;
            for (let i=1, i$lim=l; i<=i$lim; i+=1) {
                res += $average($subse(a,i),((atom(zlr)) ? 0 : zlr));
            }
            res /= l;
        }
    }
    return res;
}
