// auto-generated by pwa/p2js, see http://phix.x10.mx
"use strict";
//
// builtins\to_int.e
// =================
//
// Phix implementation of to_integer (auto-include)
//
//  This is, quite deliberately, just about the simplest possible implementation.
//  See also to_number() [in scanf.e] for fractions,exponents,underscores, etc.
//
//  11/11/21: Made this handle atoms, for Own_digits_power_sum, before finding out it did not
//            really help (that specific task), so rather than update docs etc backed out all
//            the changes, but left them in as comments. A better idea might be to_atom()...

/*global*/ function to_integer(/*string*/ s, /*integer*/ def_value=0, base=10) {
//global function to_integer(string s, integer def_value = 0, base = 10, bool bForceInt=false)
//11/11/21:
    let /*integer*/ res = 0, 
                    sgn = 1, 
//  atom res = 0
//  integer sgn = 1,
                    ch, d;
    if (compare(length(s),0)>0) {
        ch = $subse(s,1);
        if ((ch===0X2D) || (ch===0X2B)) {
            if (ch===0X2D) { sgn = -1; }
            s = $subss(s,2,-1);
        }
    }
    if (base===16) {
        // (note: 0b, 0o, 0t, 0(base) not handled here [yet])
        if (compare(length(s),0)>0 && (equal($subse(s,1),0X23))) {
            s = $subss(s,2,-1);
        } else if (compare(length(s),1)>0 && (equal(lower($subss(s,1,2)),"0x"))) {
            s = $subss(s,3,-1);
        }
    }
    if (equal(length(s),0)) {
        return def_value;
    }
    for (let i=1, i$lim=length(s); i<=i$lim; i+=1) {
        ch = $subse(s,i);
        d = ch-((ch>0X39) ? ((ch>=0X61) ? 0X61 : 0X41)-10 : 0X30);
        if (d<0 || d>base) {
            return def_value;
        }
        let /*atom*/ rchk = res*base+d;
        if (!integer(rchk)) {
//      if (bForceInt and not integer(rchk))
//      or rchk>power(2,iff(machine_bits()=32?53:64)) then
            return def_value;
        }
        res = rchk;
    }
    res = sgn*res; // (explicitly enforce a final typecheck)
//  res = sgn*res
//  if bForceInt then
//?     integer rint = res  -- (explicitly enforce a final typecheck)
//      assert(integer(res)) -- (explicitly enforce a final typecheck)
//  end if
    return res;
}

/*global*/ function is_integer(/*string*/ s, /*integer*/ base=10) {
    let /*integer*/ r = -power(2,machine_bits()-2);
    // (r is -1073741824 or -4611686018427387904)
    return !equal(to_integer(s,r,base),r);
//  return to_integer(s, r, base, true) != r
}
