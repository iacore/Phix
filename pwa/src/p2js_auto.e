--
-- p2js_auto.e (nb automatically over-written, all comments get trashed)
--
global constant last_built = "May 29 2024 3:42:38pm"

global constant p2js_auto = {{`decode_base64`, `Func`, `FP`, `base64.e`},
                             {`encode_base64`, `Func`, `FPI`, `base64.e`},
                             {`binary_search`, `Func`, `FOPIII`, `bsearch.e`},
                             {`call_lambda`, `Func`, `FOO`, `closures.e`},
                             {`define_lambda`, `Func`, `FOPII`, `closures.e`},
                             {`lambda`, `Type`, `TO`, `closures.e`},
                             {`set_captures`, `Proc`, `PPO`, `closures.e`},
                             {`deld`, `Proc`, `POI`, `dict.e`},
                             {`destroy_dict`, `Proc`, `POI`, `dict.e`},
                             {`destroy_dictf`, `Func`, `PI`, `dict.e`},
                             {`dict_name`, `Func`, `FI`, `dict.e`},
                             {`dict_size`, `Func`, `FI`, `dict.e`},
                             {`getd`, `Func`, `FOI`, `dict.e`},
                             {`getd_all_keys`, `Func`, `FII`, `dict.e`},
                             {`getd_by_index`, `Func`, `FII`, `dict.e`},
                             {`getd_index`, `Func`, `FOI`, `dict.e`},
                             {`getd_partial_key`, `Func`, `FOII`, `dict.e`},
                             {`getdd`, `Func`, `FOOI`, `dict.e`},
                             {`is_dict`, `Func`, `FI`, `dict.e`},
                             {`named_dict`, `Func`, `FS`, `dict.e`},
                             {`new_dict`, `Func`, `FOI`, `dict.e`},
                             {`new_dicts`, `Func`, `FI`, `dict.e`},
                             {`peep_dict`, `Func`, `FII`, `dict.e`},
                             {`pop_dict`, `Func`, `FII`, `dict.e`},
                             {`putd`, `Proc`, `POOI`, `dict.e`},
                             {`setd`, `Proc`, `POOI`, `dict.e`},
                             {`setd_default`, `Proc`, `POI`, `dict.e`},
                             {`traverse_dict`, `Proc`, `PIOII`, `dict.e`},
                             {`traverse_dict_partial_key`, `Proc`, `PIOOII`, `dict.e`},
                             {`choose`, `Func`, `FII`, `factorial.e`},
                             {`factorial`, `Func`, `FN`, `factorial.e`},
                             {`k_perm`, `Func`, `FII`, `factorial.e`},
                             {`file_size_k`, `Func`, `FNI`, `file_utils.e`},
                             {`get_file_base`, `Func`, `FS`, `file_utils.e`},
                             {`get_file_extension`, `Func`, `FS`, `file_utils.e`},
                             {`get_file_name`, `Func`, `FS`, `file_utils.e`},
                             {`get_file_name_and_path`, `Func`, `FSI`, `file_utils.e`},
                             {`get_file_path`, `Func`, `FSI`, `file_utils.e`},
                             {`get_file_path_and_name`, `Func`, `FSI`, `file_utils.e`},
                             {`find`, `Func`, `FOPI`, `find.e`},
                             {`rfind`, `Func`, `FOPI`, `find.e`},
                             {`find_replace`, `Func`, `FOPOI`, `findrepl.e`},
                             {`gcd`, `Func`, `FON`, `gcd.e`},
                             {`lcm`, `Func`, `FON`, `gcd.e`},
                             {`phi`, `Func`, `FI`, `gcd.e`},
                             {`is_inf`, `Func`, `FOII`, `infnan.e`},
                             {`is_nan`, `Func`, `FOI`, `infnan.e`},
                             {`log10`, `Func`, `FN`, `log10.e`},
                             {`log2`, `Func`, `FN`, `log10.e`},
                             {`begins`, `Func`, `FOP`, `match.e`},
                             {`match`, `Func`, `FOPII`, `match.e`},
                             {`match_all`, `Func`, `FOPIII`, `match.e`},
                             {`rmatch`, `Func`, `FOPII`, `match.e`},
                             {`match_replace`, `Func`, `FOPOI`, `matchrepl.e`},
                             {`arccos`, `Func`, `FN`, `misc.e`},
                             {`arcsin`, `Func`, `FN`, `misc.e`},
                             {`reverse`, `Func`, `FP`, `misc.e`},
                             {`ord`, `Func`, `FN`, `ordinal.e`},
                             {`ordinal`, `Func`, `FNI`, `ordinal.e`},
                             {`ordinant`, `Func`, `FN`, `ordinal.e`},
                             {`apply`, `Func`, `FOIO`, `pApply.e`},
                             {`papply`, `Proc`, `POIO`, `pApply.e`},
                             {`filter`, `Func`, `FPOOS`, `pFilter.e`},
                             {`filter_count`, `Func`, `FPOOS`, `pFilter.e`},
                             {`islower`, `Func`, `FI`, `pcase.e`},
                             {`isupper`, `Func`, `FI`, `pcase.e`},
                             {`lower`, `Func`, `FO`, `pcase.e`},
                             {`proper`, `Func`, `FSS`, `pcase.e`},
                             {`upper`, `Func`, `FO`, `pcase.e`},
                             {`columnize`, `Func`, `FPOO`, `pcolumn.e`},
                             {`day_of_week`, `Func`, `FOIII`, `pdates.e`},
                             {`day_of_year`, `Func`, `FOII`, `pdates.e`},
                             {`days_in_month`, `Func`, `FOI`, `pdates.e`},
                             {`is_leap_year`, `Func`, `FO`, `pdates.e`},
                             {`week_number`, `Func`, `FOII`, `pdates.e`},
                             {`decode_flags`, `Func`, `FPNS`, `pdecodeflags.e`},
                             {`elapsed`, `Func`, `FNNS`, `pelapsed.e`},
                             {`elapsed_short`, `Func`, `FNNS`, `pelapsed.e`},
                             {`combinations`, `Func`, `FPIIPP`, `permute.e`},
                             {`combinations_with_repetitions`, `Func`, `FPIIPP`, `permute.e`},
                             {`permute`, `Func`, `FIPI`, `permute.e`},
                             {`permutes`, `Func`, `FPII`, `permute.e`},
                             {`extract`, `Func`, `FPPI`, `pextract.e`},
                             {`reinstate`, `Func`, `FPOOI`, `pextract.e`},
                             {`factor_count`, `Func`, `FN`, `pfactors.e`},
                             {`factor_sum`, `Func`, `FN`, `pfactors.e`},
                             {`factors`, `Func`, `FNO`, `pfactors.e`},
                             {`prime_factors`, `Func`, `FNII`, `pfactors.e`},
                             {`prime_powers`, `Func`, `FN`, `pfactors.e`},
                             {`square_free`, `Func`, `FNI`, `pfactors.e`},
                             {`find_all`, `Func`, `FOPI`, `pfindall.e`},
                             {`find_any`, `Func`, `FPPI`, `pfindany.e`},
                             {`flatten`, `Func`, `FPP`, `pflatten.e`},
                             {`join`, `Func`, `FPOOS`, `pflatten.e`},
                             {`join_by`, `Func`, `FPIIOOSI`, `pflatten.e`},
                             {`join_path`, `Func`, `FPI`, `pflatten.e`},
                             {`abs`, `Func`, `FN`, `pmaths.e`},
                             {`atan2`, `Func`, `FNN`, `pmaths.e`},
                             {`bankers_rounding`, `Func`, `FNI`, `pmaths.e`},
                             {`ceil`, `Func`, `FN`, `pmaths.e`},
                             {`exp`, `Func`, `FN`, `pmaths.e`},
                             {`max`, `Func`, `FOO`, `pmaths.e`},
                             {`maxsq`, `Func`, `FPI`, `pmaths.e`},
                             {`median`, `Func`, `FP`, `pmaths.e`},
                             {`min`, `Func`, `FOO`, `pmaths.e`},
                             {`minsq`, `Func`, `FPI`, `pmaths.e`},
                             {`mod`, `Func`, `FNN`, `pmaths.e`},
                             {`mulmod`, `Func`, `FNNN`, `pmaths.e`},
                             {`powmod`, `Func`, `FNNN`, `pmaths.e`},
                             {`round`, `Func`, `FNN`, `pmaths.e`},
                             {`sign`, `Func`, `FN`, `pmaths.e`},
                             {`trunc`, `Func`, `FN`, `pmaths.e`},
                             {`or_all`, `Func`, `FO`, `porall.e`},
                             {`or_allu`, `Func`, `FO`, `porall.e`},
                             {`pp`, `Proc`, `POP`, `ppp.e`},
                             {`ppEx`, `Proc`, `POP`, `ppp.e`},
                             {`ppExf`, `Func`, `FOP`, `ppp.e`},
                             {`ppOpt`, `Proc`, `PP`, `ppp.e`},
                             {`ppf`, `Func`, `FOP`, `ppp.e`},
                             {`destroy_queue`, `Proc`, `PI`, `pqueue.e`},
                             {`new_queue`, `Func`, `FI`, `pqueue.e`},
                             {`new_stack`, `Func`, `F`, `pqueue.e`},
                             {`peep`, `Func`, `FII`, `pqueue.e`},
                             {`peepn`, `Func`, `FIII`, `pqueue.e`},
                             {`pop`, `Func`, `FIIII`, `pqueue.e`},
                             {`popn`, `Func`, `FIII`, `pqueue.e`},
                             {`pq_add`, `Proc`, `PPI`, `pqueue.e`},
                             {`pq_destroy`, `Proc`, `PIII`, `pqueue.e`},
                             {`pq_empty`, `Func`, `FI`, `pqueue.e`},
                             {`pq_new`, `Func`, `FII`, `pqueue.e`},
                             {`pq_peek`, `Func`, `FI`, `pqueue.e`},
                             {`pq_pop`, `Func`, `FI`, `pqueue.e`},
                             {`pq_pop_data`, `Func`, `FI`, `pqueue.e`},
                             {`pq_size`, `Func`, `FI`, `pqueue.e`},
                             {`push`, `Proc`, `PIOI`, `pqueue.e`},
                             {`pushn`, `Proc`, `PIP`, `pqueue.e`},
                             {`queue_empty`, `Func`, `FI`, `pqueue.e`},
                             {`queue_size`, `Func`, `FI`, `pqueue.e`},
                             {`remove_all`, `Func`, `FOP`, `premoveall.e`},
                             {`get_maxprime`, `Func`, `FN`, `primes.e`},
                             {`get_prime`, `Func`, `FI`, `primes.e`},
                             {`get_primes`, `Func`, `FI`, `primes.e`},
                             {`get_primes_le`, `Func`, `FII`, `primes.e`},
                             {`is_prime`, `Func`, `FNI`, `primes.e`},
                             {`head`, `Func`, `FPN`, `pseqc.e`},
                             {`insert`, `Func`, `FPOI`, `pseqc.e`},
                             {`pad`, `Func`, `FSISI`, `pseqc.e`},
                             {`pad_head`, `Func`, `FSII`, `pseqc.e`},
                             {`pad_tail`, `Func`, `FPIO`, `pseqc.e`},
                             {`remove`, `Func`, `FPNN`, `pseqc.e`},
                             {`replace`, `Func`, `FPONN`, `pseqc.e`},
                             {`replace`, `Func`, `FPONN`, `pseqc.e`},
                             {`splice`, `Func`, `FPOI`, `pseqc.e`},
                             {`tail`, `Func`, `FPN`, `pseqc.e`},
                             {`valid_index`, `Func`, `FPO`, `pseqc.e`},
                             {`series`, `Func`, `FOOII`, `pseries.e`},
                             {`split`, `Func`, `FPOII`, `psplit.e`},
                             {`split_any`, `Func`, `FPOII`, `psplit.e`},
                             {`split_by`, `Func`, `FPI`, `psplit.e`},
                             {`split_path`, `Func`, `FPI`, `psplit.e`},
                             {`sq_abs`, `Func`, `FO`, `psqop.e`},
                             {`sq_add`, `Func`, `FOO`, `psqop.e`},
                             {`sq_and`, `Func`, `FOO`, `psqop.e`},
                             {`sq_and_bits`, `Func`, `FOO`, `psqop.e`},
                             {`sq_arccos`, `Func`, `FO`, `psqop.e`},
                             {`sq_arcsin`, `Func`, `FO`, `psqop.e`},
                             {`sq_arctan`, `Func`, `FO`, `psqop.e`},
                             {`sq_atom`, `Func`, `FO`, `psqop.e`},
                             {`sq_ceil`, `Func`, `FO`, `psqop.e`},
                             {`sq_cmp`, `Func`, `FOO`, `psqop.e`},
                             {`sq_cos`, `Func`, `FO`, `psqop.e`},
                             {`sq_div`, `Func`, `FOO`, `psqop.e`},
                             {`sq_eq`, `Func`, `FOO`, `psqop.e`},
                             {`sq_even`, `Func`, `FO`, `psqop.e`},
                             {`sq_floor`, `Func`, `FO`, `psqop.e`},
                             {`sq_floor_div`, `Func`, `FOO`, `psqop.e`},
                             {`sq_ge`, `Func`, `FOO`, `psqop.e`},
                             {`sq_gt`, `Func`, `FOO`, `psqop.e`},
                             {`sq_int`, `Func`, `FO`, `psqop.e`},
                             {`sq_le`, `Func`, `FOO`, `psqop.e`},
                             {`sq_log`, `Func`, `FO`, `psqop.e`},
                             {`sq_log10`, `Func`, `FO`, `psqop.e`},
                             {`sq_log2`, `Func`, `FO`, `psqop.e`},
                             {`sq_lt`, `Func`, `FOO`, `psqop.e`},
                             {`sq_max`, `Func`, `FOO`, `psqop.e`},
                             {`sq_min`, `Func`, `FOO`, `psqop.e`},
                             {`sq_mod`, `Func`, `FOO`, `psqop.e`},
                             {`sq_mul`, `Func`, `FOO`, `psqop.e`},
                             {`sq_ne`, `Func`, `FOO`, `psqop.e`},
                             {`sq_not`, `Func`, `FO`, `psqop.e`},
                             {`sq_not_bits`, `Func`, `FO`, `psqop.e`},
                             {`sq_odd`, `Func`, `FO`, `psqop.e`},
                             {`sq_or`, `Func`, `FOO`, `psqop.e`},
                             {`sq_or_bits`, `Func`, `FOO`, `psqop.e`},
                             {`sq_power`, `Func`, `FOO`, `psqop.e`},
                             {`sq_rand`, `Func`, `FO`, `psqop.e`},
                             {`sq_rmdr`, `Func`, `FOO`, `psqop.e`},
                             {`sq_round`, `Func`, `FOO`, `psqop.e`},
                             {`sq_seq`, `Func`, `FO`, `psqop.e`},
                             {`sq_sign`, `Func`, `FO`, `psqop.e`},
                             {`sq_sin`, `Func`, `FO`, `psqop.e`},
                             {`sq_sqrt`, `Func`, `FO`, `psqop.e`},
                             {`sq_str`, `Func`, `FO`, `psqop.e`},
                             {`sq_sub`, `Func`, `FOO`, `psqop.e`},
                             {`sq_tan`, `Func`, `FO`, `psqop.e`},
                             {`sq_trunc`, `Func`, `FO`, `psqop.e`},
                             {`sq_uminus`, `Func`, `FO`, `psqop.e`},
                             {`sq_xor`, `Func`, `FOO`, `psqop.e`},
                             {`sq_xor_bits`, `Func`, `FOO`, `psqop.e`},
                             {`average`, `Func`, `FON`, `psum.e`},
                             {`product`, `Func`, `FON`, `psum.e`},
                             {`sum`, `Func`, `FON`, `psum.e`},
                             {`tagset`, `Func`, `FIII`, `ptagset.e`},
                             {`tagstart`, `Func`, `FIII`, `ptagset.e`},
                             {`shorten`, `Func`, `FPSIS`, `ptrim.e`},
                             {`trim`, `Func`, `FOOI`, `ptrim.e`},
                             {`trim_head`, `Func`, `FOOI`, `ptrim.e`},
                             {`trim_tail`, `Func`, `FOOI`, `ptrim.e`},
                             {`unique`, `Func`, `FPS`, `punique.e`},
                             {`vlookup`, `Func`, `FOPIIO`, `pvlookup.e`},
                             {`scanf`, `Func`, `FSS`, `scanf.e`},
                             {`to_number`, `Func`, `FSOI`, `scanf.e`},
                             {`count_bits`, `Func`, `FOI`, `shift_bits.e`},
                             {`shift_bits`, `Func`, `FOI`, `shift_bits.e`},
                             {`shuffle`, `Func`, `FP`, `shuffle.e`},
                             {`custom_sort`, `Func`, `FOPOI`, `sort.e`},
                             {`sort`, `Func`, `FPI`, `sort.e`},
                             {`sort_columns`, `Func`, `FPP`, `sort.e`},
                             {`substitute`, `Func`, `FPOOI`, `substitute.e`},
                             {`substitute_all`, `Func`, `FPOO`, `substitute.e`},
                             {`is_integer`, `Func`, `FSI`, `to_int.e`},
                             {`to_integer`, `Func`, `FSII`, `to_int.e`},
                             {`to_string`, `Func`, `FOII`, `to_str.e`},
                             {`get_test_abort`, `Func`, `F`, `unit_test.e`},
                             {`get_test_logfile`, `Func`, `F`, `unit_test.e`},
                             {`get_test_pause`, `Func`, `F`, `unit_test.e`},
                             {`get_test_verbosity`, `Func`, `F`, `unit_test.e`},
                             {`set_test_abort`, `Proc`, `PI`, `unit_test.e`},
                             {`set_test_logfile`, `Proc`, `PS`, `unit_test.e`},
                             {`set_test_module`, `Proc`, `PS`, `unit_test.e`},
                             {`set_test_pause`, `Proc`, `PI`, `unit_test.e`},
                             {`set_test_verbosity`, `Proc`, `PI`, `unit_test.e`},
                             {`test_equal`, `Proc`, `POOSOOI`, `unit_test.e`},
                             {`test_fail`, `Proc`, `PSP`, `unit_test.e`},
                             {`test_false`, `Proc`, `PISP`, `unit_test.e`},
                             {`test_not_equal`, `Proc`, `POOSOO`, `unit_test.e`},
                             {`test_pass`, `Proc`, `PSP`, `unit_test.e`},
                             {`test_summary`, `Proc`, `PI`, `unit_test.e`},
                             {`test_true`, `Proc`, `PISP`, `unit_test.e`},
                             {`unix_dict`, `Func`, `FIS`, `unix_dict.e`},
                             {`vslice`, `Func`, `FPOO`, `vslice.e`},
                             {`wildcard_file`, `Func`, `FPP`, `wildcard.e`},
                             {`wildcard_match`, `Func`, `FPP`, `wildcard.e`}}

global constant p2js_alia = {{`destroy_stack`, `destroy_queue`},
                             {`filebase`, `get_file_base`},
                             {`fileext`, `get_file_extension`},
                             {`hcf`, `gcd`},
                             {`hll_rmdr`, `hll_remainder`},
                             {`is_match`, `wildcard_match`},
                             {`largest`, `maxsq`},
                             {`pathname`, `get_file_path`},
                             {`putd`, `setd`},
                             {`set_test_section`, `set_test_module`},
                             {`smallest`, `minsq`},
                             {`sq_remainder`, `sq_rmdr`},
                             {`stack_empty`, `queue_empty`},
                             {`stack_size`, `queue_size`}}
