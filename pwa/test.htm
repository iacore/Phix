<!DOCTYPE html>
<html lang="en" >
 <head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>pwa</title>
 </head>
 <body style="font-family: monospace;">
  <script src="p2js.js"></script>
  <script src="builtins/find.js"></script>
  <script src="builtins/pApply.js"></script>
  <script src="builtins/pcase.js"></script>
  <script src="builtins/scanf.js"></script>
  <script src="builtins/match.js"></script>
  <script src="builtins/pfindall.js"></script>
  <script>
// auto-generated by pwa/p2js, see http://phix.x10.mx
"use strict";
function from_roman(/*string*/ s) {
    let /*integer*/ res = 0, prev = 0;
    for (let i=length(s); i>=1; i-=1) {
        let /*integer*/ rdx = find(upper($subse(s,i)),"IVXLCDM"), 
                        rn = power(10,floor((rdx-1)/2));
        if (even(rdx)) { rn *= 5; }
        res += ((rn<prev) ? -rn : rn);
        prev = rn;
    }
    return res;
}
function toRoman(/*integer*/ n) {
    assert(n>=1 && n<=3999);
    let /*string*/ res = "";
    let /*integer*/ idx = 1,  // (..7, to "MDCLXVI")
                    rn = 1000,  // 500,100,50,10,5,1
                    v = n, 
                    tenth = 100; // 100, 10,10, 1,1,0
    while (n>0) {
        while (n>=rn) {
            res = $conCat(res, $subse("MDCLXVI",idx), false);
            n -= rn;
        }
        if (compare(n+tenth,rn)>=0) {
            res = $conCat(res, $subse("CXI",floor((idx+1)/2)), false);
            n += tenth; // above loop once more
        } else if (n) {
            idx += 1;
            rn /= ((odd(idx)) ? 5 : 2);
            if (odd(idx)) { tenth = floor(rn/10); }
        }
    }
    assert(equal(v,from_roman(res)));
    return ["sequence",v,res]; // (for output)
}
print(1, "killme");
print(1, apply(["sequence",1990,2008,1666],toRoman));
for (let n=1; n<=3999; n+=1) {
    /*[,] =*/ toRoman(n);
}
//?ldx
printf(1,"%R\n",2024); // MMXXIV
printf(1,"%r\n",2024); // mmxxiv
print(1, scanf("MMXXIV","%R")); // {{2024}}
  </script>
 </body>
</html>
