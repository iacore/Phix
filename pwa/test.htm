<!DOCTYPE html>
<html lang="en" >
 <head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>pwa</title>
 </head>
 <body style="font-family: monospace;">
  <script src="p2js.js"></script>
  <script src="builtins/pelapsed.js"></script>
  <script src="builtins/match.js"></script>
  <script src="builtins/pmaths.js"></script>
  <script src="builtins/find.js"></script>
  <script src="builtins/pcase.js"></script>
  <script src="builtins/pfindall.js"></script>
  <script src="builtins/primes.js"></script>
  <script src="builtins/ptagset.js"></script>
  <script src="builtins/mpfr.js"></script>
  <script>
// auto-generated by pwa/p2js, see http://phix.x10.mx
"use strict";
/*with javascript_semantics*/ // (for the final divide only)
function mmnn(/*integer*/ n) {
    if (n<=0) { return "0"; }      // (edge case)
    let /*string*/ digits = repeat(0X20,n*(n+1)), res = "0";
    let /*sequence*/ parent = repeat(0,n*(n+1)), queue = ["sequence"];
    let /*integer*/ dsum = 0, residue = 0, pdx = 0;
    while (true) { // (found or queue not empty at end of loop)
        for (let digit=0; digit<=9; digit+=1) {
            if (dsum>n) { break; }
            if ((dsum===n) && (residue===0)) { // success!!
                res = $repe(res,1,0X30+digit);
                while (pdx) {
                    res = $conCat($subse(digits,pdx), res);
                    pdx = $subse(parent,pdx);
                }
                let /*mpz*/ z = mpz_init(res);
                assert(equal(mpz_fdiv_q_ui(z,z,n),0));
                res = mpz_get_str(z);
                return res;
            }
            let /*integer*/ drx = (dsum*n+residue)+1;
            if (equal($subse(digits,drx),0X20)) {
                digits = $repe(digits,drx,0X30+digit);
                parent = $repe(parent,drx,pdx);
                queue = append(queue,["sequence",dsum,residue]);
            }
            dsum += 1;
            residue = remainder(residue+1,n);
        }
        if (equal(length(queue),0)) { return "FAIL"; }
        [,dsum,residue] = $subse(queue,1);
        queue = $subss(queue,2,-1);
        pdx = (dsum*n+residue)+1;
        residue = remainder(residue*10,n);
    }
    return "what???";
}
puts(1,"");
let /*atom*/ t0 = time();
let /*integer*/ llen = 5;
for (let n=1; n<=200; n+=1) { // 1.2s (15.4s under pwa/p2js)
//for n=1 to 274 do -- 3.1s
//for n=1 to 369 do -- 7.1s
//for n=1 to 500 do -- 19s
//for n=1 to 1000 do -- 2 mins 29s
    let /*string*/ res = mmnn(n);
    llen += length(res);
    let /*bool*/ bCR = ((n<=101) ? equal(remainder(n,10),1) : llen>118);
    if (bCR) { printf(1,"\n%3d:",n); llen = 5+length(res); }
    printf(1," %-11s",["sequence",res]);
//  printf(1,"%d %s\n",{n,mmnn(n)}) // Generate b-file for A131382 (1..1000)
}
//printf(1,"%d %s\n",{1e3,mmnn(1e3)}) -- 0.6s
//printf(1,"%d %s\n",{1e4,mmnn(1e4)}) -- 1min 8s
//printf(1,"%d %s\n",{2e4,mmnn(2e4)}) -- crashes on 32 bit, 6 minutes and 18s on 64 bit
//printf(1,"%d %s\n",{1e6,mmnn(1e6)}) -- not a chance!
printf(1,"\n");
print(1, elapsed(time()-t0));
  </script>
 </body>
</html>
