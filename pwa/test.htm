<!DOCTYPE html>
<html lang="en" >
 <head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>pwa</title>
 </head>
 <body style="font-family: monospace;">
  <script src="p2js.js"></script>
  <script src="builtins/pelapsed.js"></script>
  <script src="builtins/pfactors.js"></script>
  <script src="builtins/pmaths.js"></script>
  <script src="builtins/match.js"></script>
  <script src="builtins/primes.js"></script>
  <script src="builtins/find.js"></script>
  <script src="builtins/pcase.js"></script>
  <script src="builtins/pfindall.js"></script>
  <script src="builtins/bsearch.js"></script>
  <script>
// auto-generated by pwa/p2js, see http://phix.x10.mx
"use strict";
/*with javascript_semantics*/ function evalpoly(/*integer*/ x, /*sequence*/ p) {
    let /*integer*/ result = 0;
    for (let y=1, y$lim=length(p); y<=y$lim; y+=1) {
        result = result*x+$subse(p,y);
    }
    return result;
}
function stringify(/*sequence*/ digits) {
    let /*integer*/ l = length(digits);
    let /*sequence*/ res = repeat(0X30,l);
    for (let i=1, i$lim=l; i<=i$lim; i+=1) {
        let /*integer*/ di = $subse(digits,i);
        res = $repe(res,i,di+((di<=9) ? 0X30 : 0X61-10));
        l -= 1;
    }
    return res;
}
function max_prime_bases(/*integer*/ ndig, maxbase) {
    let /*atom*/ t0 = time(), 
                 t1 = time()+1;
    let /*sequence*/ maxprimebases = ["sequence"], 
                     digits = repeat(0,ndig);
    let /*integer*/ maxlen = 0, 
                    limit = power(10,ndig), 
                    maxdigit = maxbase;
    if (ndig>1) {
        digits = $repe(digits,1,1); }
    while (true) {
        for (let i=length(digits); i>=1; i-=1) {
            let /*integer*/ di = $subse(digits,i)+1;
//          if di<maxbase then
            if (di<maxdigit) {
                digits = $repe(digits,i,di);
                break;
            } else {
                di = 0;
                digits = $repe(digits,i,0);
            }
        }
        let /*integer*/ minbase = maxsq(digits)+1, 
                        maxposs = (maxbase-minbase)+1;
        if (minbase===1) { break; }     // (ie we just wrapped round to all 0s)
        let /*sequence*/ bases = ["sequence"];
        for (let base=minbase, base$lim=maxbase; base<=base$lim; base+=1) {
            if (is_prime(evalpoly(base,digits))) {
                bases = $conCat(bases, base);
            } else {
                maxposs -= 1;
                if (maxposs<maxlen) { break; }     // (a 5-fold speedup)
            }
        }
        let /*integer*/ l = length(bases);
        if (l>maxlen) {
            maxlen = l;
            maxdigit = maxbase-maxlen;      // (around 20-fold speedup)
            maxprimebases = ["sequence"];
        }
        if (l===maxlen) {
            maxprimebases = $conCat(maxprimebases, ["sequence",["sequence",stringify(digits),bases]]);
        }
        if ((!equal(platform(),JS)) && compare(time(),t1)>0) {
            progress("%V\r",["sequence",digits]);
            t1 = time()+1;
        }
    }
    let /*string*/ e = elapsed(time()-t0);
    printf(1,"%d character numeric strings that are prime in %d bases (%s):\n",["sequence",ndig,maxlen,e]);
    for (let i=1, i$lim=length(maxprimebases); i<=i$lim; i+=1) {
        printf(1," %s => %V\n",$subse(maxprimebases,i));
    }
    printf(1,"\n");
}
for (let n=1, n$lim=((equal(platform(),JS)) ? 5 : 6); n<=n$lim; n+=1) {
    max_prime_bases(n,36);
}
  </script>
 </body>
</html>
