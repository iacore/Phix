<!DOCTYPE html>
<html lang="en" >
 <head>
  <meta charset='utf-8'/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>substitute.e</title>
 </head>
 <body style="font-family: monospace;">
  <script src="p2js.js"></script>
   <script src="builtins/misc.js"></script>
   <script src="builtins/psplit.js"></script>
   <script src="builtins/ptrim.js"></script>
   <script src="builtins/sort.js"></script>
   <script src="builtins/substitute.js"></script>
   <script src="builtins/find.js"></script>
   <script src="builtins/match.js"></script>
   <script src="builtins/pfindany.js"></script>
   <script src="builtins/psqop.js"></script>
   <script src="builtins/psum.js"></script>
   <script src="builtins/pcase.js"></script>
   <script src="builtins/pfindall.js"></script>
   <script src="builtins/pmaths.js"></script>
   <script src="builtins/log10.js"></script>
  <script>
"use strict";
// auto-generated by pwa/p2js.
function print_children(/*sequence*/ lines, children, /*string*/ indent, /*bool*/ bRev) {
    let /*sequence*/ tags = custom_sort(lines,children);
    if (bRev) { tags = reverse(tags); }
    for (let i=1, i$lim=length(tags); i<=i$lim; i+=1) {
        let /*integer*/ ti = $subse(tags,i);
        printf(1,"%s%s\n",["sequence",indent, $subse($subse(lines,ti),1)]);
        print_children(lines,$subse($subse(lines,ti),-1),$subse($subse(lines,ti),2),bRev);
    }
}
let onet = String.fromCharCode(9);
const spaced = `
zeta
    beta
    gamma
        lambda
        kappa
        mu
    delta
alpha
    theta
    iota
    epsilon
`, 
//    tabbed = substitute(spaced,"    ","\u0009"), 
      tabbed = substitute(spaced,"    ",onet), 
      confused = substitute_all(spaced,["sequence","  gamma", "    kappa"],["sequence","gamma", "\t   kappa"]), 
      ragged = substitute_all(spaced,["sequence"," gamma", "kappa"],["sequence","gamma", " kappa"]), 
      tests = ["sequence",spaced, tabbed, confused, ragged], 
      names = "spaced,tabbed,confused,ragged";
function test(/*sequence*/ lines) {
    let /*sequence*/ pi = ["sequence",-1],  // indents (to locate parents)
                     pdx = ["sequence",0],  // indexes for ""
                     children = ["sequence"], 
                     roots = ["sequence"];
    for (let i=1, i$lim=length(lines); i<=i$lim; i+=1) {
        let /*string*/ line = trim_tail($subse(lines,i)), 
                       text = trim_head(line);
        let /*integer*/ indent = length(line)-length(text);
        // remove any completed parents
        while (length(pi) && compare(indent,$subse(pi,-1))<=0) {
            pi = $subss(pi,1,-1-1);
            pdx = $subss(pdx,1,-1-1);
        }
        let /*integer*/ parent = 0;
        if (length(pi)) {
            parent = $subse(pdx,-1);
            if (parent===0) {
                if (indent!==0) {
                    printf(1,"**invalid indent** (%s, line %d)\n\n",["sequence",text, i]);
                    return;
                }
                roots = $conCat(roots, i);
            } else {
                if (equal($subse($subse(lines,parent),-1),["sequence"])) {
                    lines = $repe(lines,2,$subss(line,1,indent),["sequence",parent]);
                } else if (!equal($subse($subse(lines,parent),2),$subss(line,1,indent))) {
                    printf(1,"**inconsistent indent** (%s, line %d)\n\n",["sequence",text, i]);
                    return;
                }
                lines = $repe(lines,-1,$conCat($subse(lines,-1,["sequence",parent]),i),["sequence",parent]); // (update children)
            }
        }
        pi = $conCat(pi, indent);
        pdx = $conCat(pdx, i);
        lines = $repe(lines,i,["sequence",text, "", children]);
    }
    printf(1,"ascending:\n");
    print_children(lines,roots,"",false);
    printf(1,"\ndescending:\n");
    print_children(lines,roots,"",true);
    printf(1,"\n");
}
for (let t=1, t$lim=length(tests); t<=t$lim; t+=1) {
    let /*string*/ name = $subse(split(names,","),t);
//  printf(1,"Test %d (%s):\n%s\n",{t,name,tests[t]})
    printf(1,"Test %d (%s):\n",["sequence",t, name]);
    let /*sequence*/ lines = split($subse(tests,t),"\n",true);
    test(lines);
}
  </script>
 </body>
</html>
