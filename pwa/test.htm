<!DOCTYPE html>
<html lang="en" >
 <head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>IQpuzzle.exw</title>
 </head>
 <body style="font-family: monospace;">
  <script src="p2js.js"></script>
  <script src="builtins/pextract.js"></script>
  <script src="builtins/pflatten.js"></script>
  <script src="builtins/psplit.js"></script>
  <script src="builtins/substitute.js"></script>
  <script src="builtins/pmaths.js"></script>
  <script src="builtins/ptagset.js"></script>
  <script src="builtins/find.js"></script>
  <script src="builtins/pApply.js"></script>
  <script src="builtins/match.js"></script>
  <script src="builtins/pfindany.js"></script>
  <script src="builtins/pcase.js"></script>
  <script src="builtins/pfindall.js"></script>
  <script>
// auto-generated by pwa/p2js, see http://phix.x10.mx
"use strict";
//
// demo\rosetta\IQpuzzle.exw
// =========================
//
//  Twee brute-force string-based solution. 
//  Backtracks a mere 366 times, whereas starting with the 5th peg missing backtracks 19388 times.
//
/*with javascript_semantics*/ /*
constant moves = {-11,-9,2,11,9,-2}
function solve(string board, integer left)
    if left=1 then return "" end if
    for i=1 to length(board) do
        if board[i]='1' then
            for j=1 to length(moves) do
                integer mj = moves[j], over = i+mj, tgt = i+2*mj
                if tgt>=1 and tgt<=length(board) 
                and board[tgt]='0' and board[over]='1' then
                    board = reinstate(board,{i,over,tgt},"001")
                    string res = solve(board,left-1)
                    if length(res)!=4 then return board&res end if
                    board = reinstate(board,{i,over,tgt},"110")
                end if
            end for
        end if
    end for
    return "oops"
end function
 
sequence start = """
----0----
---1-1---
--1-1-1--
-1-1-1-1-
1-1-1-1-1
"""
puts(1,substitute(join_by(split(start&solve(start,14),'\n'),5,7),"-"," "))
*/ 
///!*
//Adapted to the English game:
const moves = ["sequence",-2, 15, 2, -15];
function solve(/*string*/ board, /*integer*/ left) {
    if (left===1) {
//      return ""   -- (leaves it on the edge)
        if (equal($subse(board,3*15+8),0X2E)) { return ""; }
        return "oops";
    }
    for (let i=1, i$lim=length(board); i<=i$lim; i+=1) {
        if (equal($subse(board,i),0X2E)) {
            for (let j=1, j$lim=length(moves); j<=j$lim; j+=1) {
                let /*integer*/ mj = $subse(moves,j), over = i+mj, tgt = i+2*mj;
                if (((tgt>=1 && compare(tgt,length(board))<=0) && (equal($subse(board,tgt),0X6F))) && (equal($subse(board,over),0X2E))) {
                    board = reinstate(board,["sequence",i,over,tgt],"oo.");
                    let /*string*/ res = solve(board,left-1);
                    if (!equal(length(res),4)) { return $conCat(board, res); }
                    board = reinstate(board,["sequence",i,over,tgt],"..o");
                }
            }
        }
    }
    return "oops";
}
let /*sequence*/ start = 
`-----.-.-.----
-----.-.-.----
-.-.-.-.-.-.-.
-.-.-.-o-.-.-.
-.-.-.-.-.-.-.
-----.-.-.----
-----.-.-.----
`;
puts(1,substitute(join_by(split($conCat(start, solve(start,32)),0XA),7,8),"-"," "));
//*!/
/*[,] =*/ wait_key();
  </script>
 </body>
</html>
