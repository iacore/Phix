--
-- test\t71decode_flags.exw
-- ========================
--
--  Tests for decode_flags() - bit belated, but now I want to change it:
--    pegs and rw only trigger when all bits set, however in contrast
--    #FF00 triggers/skips when any bit set, since length(desc) is 0.
--
--    Also, I rationalised hi bit checks to ensure they'd always work,
--    in other words both FlagSet[i][1] and v get f:=and_bitsu(f,f)'d,
--    however as evidenced below a negative/signed bitmask inherently
--    contains 32 more [set] bits on 64-bit than on 32-bit (DOH!).
--    A #8000000000000000 bit test for 64-bit left as an exercise...
--
--with trace

constant allergens = {{#00, "<nothing>"},
                      {#03, "pegs"},
                      {#01, "eggs"},
                      {#02, "peanuts"},
                      {#04, "shellfish"},
                      {#08, "strawberries"},
                      {#10, "tomatoes"},
                      {#20, "chocolate"},
                      {#40, "pollen"},
                      {#80, "cats"},
                      {#FF00, ""}}

assert(decode_flags(allergens,#22,", ")="peanuts, chocolate")
assert(decode_flags(allergens,#0,", ")="<nothing>")
assert(decode_flags(allergens,#1,", ")="eggs")
assert(decode_flags(allergens,#101)="eggs")
assert(decode_flags(allergens,#03)="pegs")
assert(decode_flags(allergens,#10001)="0x10000+eggs")
assert(decode_flags(allergens,#1FF01)="0x10000+eggs")
-- Note that without the express ignore of bit #100, or an explicit and_bits(#FF,257), you would get "0x100+eggs"
-- The #FF00 on that last line specifically catches any of those bits, that is when length(description) === 0.
-- Leaving out the #0,"<nothing>" from allergens would make the second test yield "".

constant img_set = {{img_00:=0x00000000, "0"},
                    {img_rw:=0x00000003, "rw"},
                    {img_ro:=0x00000001, "r"},
                    {img_wo:=0x00000002, "w"},
                    {img_hi:=0x80000000, "p"}},
         m4 = allocate_word(img_hi,size:=4),
         hs = peek4s(m4),
         hu = peek4u(m4)
assert(decode_flags(img_set,img_00)="0")
assert(decode_flags(img_set,img_rw)="rw")
assert(decode_flags(img_set,img_ro)="r")
assert(decode_flags(img_set,img_wo)="w")
--printf(1,"img_hi:%d, #%08x\n",img_hi)
--trace(1)
--?decode_flags(img_set,hs) -- "0xFFFFFFFF80000000+" on 64-bit...
if machine_bits()=32 then -- (oops...)
    assert(decode_flags(img_set,hs)="p")
end if
assert(decode_flags(img_set,hu)="p")
assert(decode_flags(img_set,img_hi)="p")
assert(decode_flags(img_set,#103)="0x100+rw")

--?"done"
--wait_key()

